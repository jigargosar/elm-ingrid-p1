// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

// eslint-disable-next-line no-global-assign
parcelRequire = (function(modules, cache, entry, globalName) {
  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof parcelRequire === 'function' && parcelRequire
  var nodeRequire = typeof require === 'function' && require

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof parcelRequire === 'function' && parcelRequire
        if (!jumped && currentRequire) {
          return currentRequire(name, true)
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true)
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name)
        }

        var err = new Error("Cannot find module '" + name + "'")
        err.code = 'MODULE_NOT_FOUND'
        throw err
      }

      localRequire.resolve = resolve
      localRequire.cache = {}

      var module = (cache[name] = new newRequire.Module(name))

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this,
      )
    }

    return cache[name].exports

    function localRequire(x) {
      return newRequire(localRequire.resolve(x))
    }

    function resolve(x) {
      return modules[name][1][x] || x
    }
  }

  function Module(moduleName) {
    this.id = moduleName
    this.bundle = newRequire
    this.exports = {}
  }

  newRequire.isParcelRequire = true
  newRequire.Module = Module
  newRequire.modules = modules
  newRequire.cache = cache
  newRequire.parent = previousRequire
  newRequire.register = function(id, exports) {
    modules[id] = [
      function(require, module) {
        module.exports = exports
      },
      {},
    ]
  }

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i])
  }

  if (entry.length) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(entry[entry.length - 1])

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function() {
        return mainExports
      })

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports
    }
  }

  // Override the current require with this new one
  return newRequire
})(
  {
    '../node_modules/ramda/es/F.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        /**
         * A function that always returns `false`. Any passed in parameters are ignored.
         *
         * @func
         * @memberOf R
         * @since v0.9.0
         * @category Function
         * @sig * -> Boolean
         * @param {*}
         * @return {Boolean}
         * @see R.T
         * @example
         *
         *      R.F(); //=> false
         */
        var F = function() {
          return false
        }

        var _default = F
        exports.default = _default
      },
      {},
    ],
    '../node_modules/ramda/es/T.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        /**
         * A function that always returns `true`. Any passed in parameters are ignored.
         *
         * @func
         * @memberOf R
         * @since v0.9.0
         * @category Function
         * @sig * -> Boolean
         * @param {*}
         * @return {Boolean}
         * @see R.F
         * @example
         *
         *      R.T(); //=> true
         */
        var T = function() {
          return true
        }

        var _default = T
        exports.default = _default
      },
      {},
    ],
    '../node_modules/ramda/es/__.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        /**
         * A special placeholder value used to specify "gaps" within curried functions,
         * allowing partial application of any combination of arguments, regardless of
         * their positions.
         *
         * If `g` is a curried ternary function and `_` is `R.__`, the following are
         * equivalent:
         *
         *   - `g(1, 2, 3)`
         *   - `g(_, 2, 3)(1)`
         *   - `g(_, _, 3)(1)(2)`
         *   - `g(_, _, 3)(1, 2)`
         *   - `g(_, 2, _)(1, 3)`
         *   - `g(_, 2)(1)(3)`
         *   - `g(_, 2)(1, 3)`
         *   - `g(_, 2)(_, 3)(1)`
         *
         * @name __
         * @constant
         * @memberOf R
         * @since v0.6.0
         * @category Function
         * @example
         *
         *      const greet = R.replace('{name}', R.__, 'Hello, {name}!');
         *      greet('Alice'); //=> 'Hello, Alice!'
         */
        var _default = {
          '@@functional/placeholder': true,
        }
        exports.default = _default
      },
      {},
    ],
    '../node_modules/ramda/es/internal/_isPlaceholder.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = _isPlaceholder

        function _isPlaceholder(a) {
          return (
            a != null &&
            typeof a === 'object' &&
            a['@@functional/placeholder'] === true
          )
        }
      },
      {},
    ],
    '../node_modules/ramda/es/internal/_curry1.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = _curry1

        var _isPlaceholder2 = _interopRequireDefault(
          require('./_isPlaceholder.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Optimized internal one-arity curry function.
         *
         * @private
         * @category Function
         * @param {Function} fn The function to curry.
         * @return {Function} The curried function.
         */
        function _curry1(fn) {
          return function f1(a) {
            if (
              arguments.length === 0 ||
              (0, _isPlaceholder2.default)(a)
            ) {
              return f1
            } else {
              return fn.apply(this, arguments)
            }
          }
        }
      },
      {
        './_isPlaceholder.js':
          '../node_modules/ramda/es/internal/_isPlaceholder.js',
      },
    ],
    '../node_modules/ramda/es/internal/_curry2.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = _curry2

        var _curry = _interopRequireDefault(require('./_curry1.js'))

        var _isPlaceholder2 = _interopRequireDefault(
          require('./_isPlaceholder.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Optimized internal two-arity curry function.
         *
         * @private
         * @category Function
         * @param {Function} fn The function to curry.
         * @return {Function} The curried function.
         */
        function _curry2(fn) {
          return function f2(a, b) {
            switch (arguments.length) {
              case 0:
                return f2

              case 1:
                return (0, _isPlaceholder2.default)(a)
                  ? f2
                  : (0, _curry.default)(function(_b) {
                      return fn(a, _b)
                    })

              default:
                return (0, _isPlaceholder2.default)(a) &&
                  (0, _isPlaceholder2.default)(b)
                  ? f2
                  : (0, _isPlaceholder2.default)(a)
                  ? (0, _curry.default)(function(_a) {
                      return fn(_a, b)
                    })
                  : (0, _isPlaceholder2.default)(b)
                  ? (0, _curry.default)(function(_b) {
                      return fn(a, _b)
                    })
                  : fn(a, b)
            }
          }
        }
      },
      {
        './_curry1.js': '../node_modules/ramda/es/internal/_curry1.js',
        './_isPlaceholder.js':
          '../node_modules/ramda/es/internal/_isPlaceholder.js',
      },
    ],
    '../node_modules/ramda/es/add.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Adds two values.
         *
         * @func
         * @memberOf R
         * @since v0.1.0
         * @category Math
         * @sig Number -> Number -> Number
         * @param {Number} a
         * @param {Number} b
         * @return {Number}
         * @see R.subtract
         * @example
         *
         *      R.add(2, 3);       //=>  5
         *      R.add(7)(10);      //=> 17
         */
        var add =
          /*#__PURE__*/
          (0, _curry.default)(function add(a, b) {
            return Number(a) + Number(b)
          })
        var _default = add
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
      },
    ],
    '../node_modules/ramda/es/internal/_concat.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = _concat

        /**
         * Private `concat` function to merge two array-like objects.
         *
         * @private
         * @param {Array|Arguments} [set1=[]] An array-like object.
         * @param {Array|Arguments} [set2=[]] An array-like object.
         * @return {Array} A new, merged array.
         * @example
         *
         *      _concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]
         */
        function _concat(set1, set2) {
          set1 = set1 || []
          set2 = set2 || []
          var idx
          var len1 = set1.length
          var len2 = set2.length
          var result = []
          idx = 0

          while (idx < len1) {
            result[result.length] = set1[idx]
            idx += 1
          }

          idx = 0

          while (idx < len2) {
            result[result.length] = set2[idx]
            idx += 1
          }

          return result
        }
      },
      {},
    ],
    '../node_modules/ramda/es/internal/_arity.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = _arity

        function _arity(n, fn) {
          /* eslint-disable no-unused-vars */
          switch (n) {
            case 0:
              return function() {
                return fn.apply(this, arguments)
              }

            case 1:
              return function(a0) {
                return fn.apply(this, arguments)
              }

            case 2:
              return function(a0, a1) {
                return fn.apply(this, arguments)
              }

            case 3:
              return function(a0, a1, a2) {
                return fn.apply(this, arguments)
              }

            case 4:
              return function(a0, a1, a2, a3) {
                return fn.apply(this, arguments)
              }

            case 5:
              return function(a0, a1, a2, a3, a4) {
                return fn.apply(this, arguments)
              }

            case 6:
              return function(a0, a1, a2, a3, a4, a5) {
                return fn.apply(this, arguments)
              }

            case 7:
              return function(a0, a1, a2, a3, a4, a5, a6) {
                return fn.apply(this, arguments)
              }

            case 8:
              return function(a0, a1, a2, a3, a4, a5, a6, a7) {
                return fn.apply(this, arguments)
              }

            case 9:
              return function(a0, a1, a2, a3, a4, a5, a6, a7, a8) {
                return fn.apply(this, arguments)
              }

            case 10:
              return function(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
                return fn.apply(this, arguments)
              }

            default:
              throw new Error(
                'First argument to _arity must be a non-negative integer no greater than ten',
              )
          }
        }
      },
      {},
    ],
    '../node_modules/ramda/es/internal/_curryN.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = _curryN

        var _arity2 = _interopRequireDefault(require('./_arity.js'))

        var _isPlaceholder2 = _interopRequireDefault(
          require('./_isPlaceholder.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Internal curryN function.
         *
         * @private
         * @category Function
         * @param {Number} length The arity of the curried function.
         * @param {Array} received An array of arguments received thus far.
         * @param {Function} fn The function to curry.
         * @return {Function} The curried function.
         */
        function _curryN(length, received, fn) {
          return function() {
            var combined = []
            var argsIdx = 0
            var left = length
            var combinedIdx = 0

            while (
              combinedIdx < received.length ||
              argsIdx < arguments.length
            ) {
              var result

              if (
                combinedIdx < received.length &&
                (!(0, _isPlaceholder2.default)(received[combinedIdx]) ||
                  argsIdx >= arguments.length)
              ) {
                result = received[combinedIdx]
              } else {
                result = arguments[argsIdx]
                argsIdx += 1
              }

              combined[combinedIdx] = result

              if (!(0, _isPlaceholder2.default)(result)) {
                left -= 1
              }

              combinedIdx += 1
            }

            return left <= 0
              ? fn.apply(this, combined)
              : (0, _arity2.default)(left, _curryN(length, combined, fn))
          }
        }
      },
      {
        './_arity.js': '../node_modules/ramda/es/internal/_arity.js',
        './_isPlaceholder.js':
          '../node_modules/ramda/es/internal/_isPlaceholder.js',
      },
    ],
    '../node_modules/ramda/es/curryN.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _arity2 = _interopRequireDefault(
          require('./internal/_arity.js'),
        )

        var _curry = _interopRequireDefault(
          require('./internal/_curry1.js'),
        )

        var _curry3 = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        var _curryN2 = _interopRequireDefault(
          require('./internal/_curryN.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns a curried equivalent of the provided function, with the specified
         * arity. The curried function has two unusual capabilities. First, its
         * arguments needn't be provided one at a time. If `g` is `R.curryN(3, f)`, the
         * following are equivalent:
         *
         *   - `g(1)(2)(3)`
         *   - `g(1)(2, 3)`
         *   - `g(1, 2)(3)`
         *   - `g(1, 2, 3)`
         *
         * Secondly, the special placeholder value [`R.__`](#__) may be used to specify
         * "gaps", allowing partial application of any combination of arguments,
         * regardless of their positions. If `g` is as above and `_` is [`R.__`](#__),
         * the following are equivalent:
         *
         *   - `g(1, 2, 3)`
         *   - `g(_, 2, 3)(1)`
         *   - `g(_, _, 3)(1)(2)`
         *   - `g(_, _, 3)(1, 2)`
         *   - `g(_, 2)(1)(3)`
         *   - `g(_, 2)(1, 3)`
         *   - `g(_, 2)(_, 3)(1)`
         *
         * @func
         * @memberOf R
         * @since v0.5.0
         * @category Function
         * @sig Number -> (* -> a) -> (* -> a)
         * @param {Number} length The arity for the returned function.
         * @param {Function} fn The function to curry.
         * @return {Function} A new, curried function.
         * @see R.curry
         * @example
         *
         *      const sumArgs = (...args) => R.sum(args);
         *
         *      const curriedAddFourNumbers = R.curryN(4, sumArgs);
         *      const f = curriedAddFourNumbers(1, 2);
         *      const g = f(3);
         *      g(4); //=> 10
         */
        var curryN =
          /*#__PURE__*/
          (0, _curry3.default)(function curryN(length, fn) {
            if (length === 1) {
              return (0, _curry.default)(fn)
            }

            return (0,
            _arity2.default)(length, (0, _curryN2.default)(length, [], fn))
          })
        var _default = curryN
        exports.default = _default
      },
      {
        './internal/_arity.js':
          '../node_modules/ramda/es/internal/_arity.js',
        './internal/_curry1.js':
          '../node_modules/ramda/es/internal/_curry1.js',
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
        './internal/_curryN.js':
          '../node_modules/ramda/es/internal/_curryN.js',
      },
    ],
    '../node_modules/ramda/es/addIndex.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _concat2 = _interopRequireDefault(
          require('./internal/_concat.js'),
        )

        var _curry = _interopRequireDefault(
          require('./internal/_curry1.js'),
        )

        var _curryN = _interopRequireDefault(require('./curryN.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Creates a new list iteration function from an existing one by adding two new
         * parameters to its callback function: the current index, and the entire list.
         *
         * This would turn, for instance, [`R.map`](#map) function into one that
         * more closely resembles `Array.prototype.map`. Note that this will only work
         * for functions in which the iteration callback function is the first
         * parameter, and where the list is the last parameter. (This latter might be
         * unimportant if the list parameter is not used.)
         *
         * @func
         * @memberOf R
         * @since v0.15.0
         * @category Function
         * @category List
         * @sig ((a ... -> b) ... -> [a] -> *) -> ((a ..., Int, [a] -> b) ... -> [a] -> *)
         * @param {Function} fn A list iteration function that does not pass index or list to its callback
         * @return {Function} An altered list iteration function that passes (item, index, list) to its callback
         * @example
         *
         *      const mapIndexed = R.addIndex(R.map);
         *      mapIndexed((val, idx) => idx + '-' + val, ['f', 'o', 'o', 'b', 'a', 'r']);
         *      //=> ['0-f', '1-o', '2-o', '3-b', '4-a', '5-r']
         */
        var addIndex =
          /*#__PURE__*/
          (0, _curry.default)(function addIndex(fn) {
            return (0, _curryN.default)(fn.length, function() {
              var idx = 0
              var origFn = arguments[0]
              var list = arguments[arguments.length - 1]
              var args = Array.prototype.slice.call(arguments, 0)

              args[0] = function() {
                var result = origFn.apply(
                  this,
                  (0, _concat2.default)(arguments, [idx, list]),
                )
                idx += 1
                return result
              }

              return fn.apply(this, args)
            })
          })
        var _default = addIndex
        exports.default = _default
      },
      {
        './internal/_concat.js':
          '../node_modules/ramda/es/internal/_concat.js',
        './internal/_curry1.js':
          '../node_modules/ramda/es/internal/_curry1.js',
        './curryN.js': '../node_modules/ramda/es/curryN.js',
      },
    ],
    '../node_modules/ramda/es/internal/_curry3.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = _curry3

        var _curry = _interopRequireDefault(require('./_curry1.js'))

        var _curry4 = _interopRequireDefault(require('./_curry2.js'))

        var _isPlaceholder2 = _interopRequireDefault(
          require('./_isPlaceholder.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Optimized internal three-arity curry function.
         *
         * @private
         * @category Function
         * @param {Function} fn The function to curry.
         * @return {Function} The curried function.
         */
        function _curry3(fn) {
          return function f3(a, b, c) {
            switch (arguments.length) {
              case 0:
                return f3

              case 1:
                return (0, _isPlaceholder2.default)(a)
                  ? f3
                  : (0, _curry4.default)(function(_b, _c) {
                      return fn(a, _b, _c)
                    })

              case 2:
                return (0, _isPlaceholder2.default)(a) &&
                  (0, _isPlaceholder2.default)(b)
                  ? f3
                  : (0, _isPlaceholder2.default)(a)
                  ? (0, _curry4.default)(function(_a, _c) {
                      return fn(_a, b, _c)
                    })
                  : (0, _isPlaceholder2.default)(b)
                  ? (0, _curry4.default)(function(_b, _c) {
                      return fn(a, _b, _c)
                    })
                  : (0, _curry.default)(function(_c) {
                      return fn(a, b, _c)
                    })

              default:
                return (0, _isPlaceholder2.default)(a) &&
                  (0, _isPlaceholder2.default)(b) &&
                  (0, _isPlaceholder2.default)(c)
                  ? f3
                  : (0, _isPlaceholder2.default)(a) &&
                    (0, _isPlaceholder2.default)(b)
                  ? (0, _curry4.default)(function(_a, _b) {
                      return fn(_a, _b, c)
                    })
                  : (0, _isPlaceholder2.default)(a) &&
                    (0, _isPlaceholder2.default)(c)
                  ? (0, _curry4.default)(function(_a, _c) {
                      return fn(_a, b, _c)
                    })
                  : (0, _isPlaceholder2.default)(b) &&
                    (0, _isPlaceholder2.default)(c)
                  ? (0, _curry4.default)(function(_b, _c) {
                      return fn(a, _b, _c)
                    })
                  : (0, _isPlaceholder2.default)(a)
                  ? (0, _curry.default)(function(_a) {
                      return fn(_a, b, c)
                    })
                  : (0, _isPlaceholder2.default)(b)
                  ? (0, _curry.default)(function(_b) {
                      return fn(a, _b, c)
                    })
                  : (0, _isPlaceholder2.default)(c)
                  ? (0, _curry.default)(function(_c) {
                      return fn(a, b, _c)
                    })
                  : fn(a, b, c)
            }
          }
        }
      },
      {
        './_curry1.js': '../node_modules/ramda/es/internal/_curry1.js',
        './_curry2.js': '../node_modules/ramda/es/internal/_curry2.js',
        './_isPlaceholder.js':
          '../node_modules/ramda/es/internal/_isPlaceholder.js',
      },
    ],
    '../node_modules/ramda/es/adjust.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _concat2 = _interopRequireDefault(
          require('./internal/_concat.js'),
        )

        var _curry = _interopRequireDefault(
          require('./internal/_curry3.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Applies a function to the value at the given index of an array, returning a
         * new copy of the array with the element at the given index replaced with the
         * result of the function application.
         *
         * @func
         * @memberOf R
         * @since v0.14.0
         * @category List
         * @sig Number -> (a -> a) -> [a] -> [a]
         * @param {Number} idx The index.
         * @param {Function} fn The function to apply.
         * @param {Array|Arguments} list An array-like object whose value
         *        at the supplied index will be replaced.
         * @return {Array} A copy of the supplied array-like object with
         *         the element at index `idx` replaced with the value
         *         returned by applying `fn` to the existing element.
         * @see R.update
         * @example
         *
         *      R.adjust(1, R.toUpper, ['a', 'b', 'c', 'd']);      //=> ['a', 'B', 'c', 'd']
         *      R.adjust(-1, R.toUpper, ['a', 'b', 'c', 'd']);     //=> ['a', 'b', 'c', 'D']
         * @symb R.adjust(-1, f, [a, b]) = [a, f(b)]
         * @symb R.adjust(0, f, [a, b]) = [f(a), b]
         */
        var adjust =
          /*#__PURE__*/
          (0, _curry.default)(function adjust(idx, fn, list) {
            if (idx >= list.length || idx < -list.length) {
              return list
            }

            var start = idx < 0 ? list.length : 0

            var _idx = start + idx

            var _list = (0, _concat2.default)(list)

            _list[_idx] = fn(list[_idx])
            return _list
          })
        var _default = adjust
        exports.default = _default
      },
      {
        './internal/_concat.js':
          '../node_modules/ramda/es/internal/_concat.js',
        './internal/_curry3.js':
          '../node_modules/ramda/es/internal/_curry3.js',
      },
    ],
    '../node_modules/ramda/es/internal/_isArray.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        /**
         * Tests whether or not an object is an array.
         *
         * @private
         * @param {*} val The object to test.
         * @return {Boolean} `true` if `val` is an array, `false` otherwise.
         * @example
         *
         *      _isArray([]); //=> true
         *      _isArray(null); //=> false
         *      _isArray({}); //=> false
         */
        var _default =
          Array.isArray ||
          function _isArray(val) {
            return (
              val != null &&
              val.length >= 0 &&
              Object.prototype.toString.call(val) === '[object Array]'
            )
          }

        exports.default = _default
      },
      {},
    ],
    '../node_modules/ramda/es/internal/_isTransformer.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = _isTransformer

        function _isTransformer(obj) {
          return (
            obj != null && typeof obj['@@transducer/step'] === 'function'
          )
        }
      },
      {},
    ],
    '../node_modules/ramda/es/internal/_dispatchable.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = _dispatchable

        var _isArray2 = _interopRequireDefault(require('./_isArray.js'))

        var _isTransformer2 = _interopRequireDefault(
          require('./_isTransformer.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns a function that dispatches with different strategies based on the
         * object in list position (last argument). If it is an array, executes [fn].
         * Otherwise, if it has a function with one of the given method names, it will
         * execute that function (functor case). Otherwise, if it is a transformer,
         * uses transducer [xf] to return a new transformer (transducer case).
         * Otherwise, it will default to executing [fn].
         *
         * @private
         * @param {Array} methodNames properties to check for a custom implementation
         * @param {Function} xf transducer to initialize if object is transformer
         * @param {Function} fn default ramda implementation
         * @return {Function} A function that dispatches on object in list position
         */
        function _dispatchable(methodNames, xf, fn) {
          return function() {
            if (arguments.length === 0) {
              return fn()
            }

            var args = Array.prototype.slice.call(arguments, 0)
            var obj = args.pop()

            if (!(0, _isArray2.default)(obj)) {
              var idx = 0

              while (idx < methodNames.length) {
                if (typeof obj[methodNames[idx]] === 'function') {
                  return obj[methodNames[idx]].apply(obj, args)
                }

                idx += 1
              }

              if ((0, _isTransformer2.default)(obj)) {
                var transducer = xf.apply(null, args)
                return transducer(obj)
              }
            }

            return fn.apply(this, arguments)
          }
        }
      },
      {
        './_isArray.js': '../node_modules/ramda/es/internal/_isArray.js',
        './_isTransformer.js':
          '../node_modules/ramda/es/internal/_isTransformer.js',
      },
    ],
    '../node_modules/ramda/es/internal/_reduced.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = _reduced

        function _reduced(x) {
          return x && x['@@transducer/reduced']
            ? x
            : {
                '@@transducer/value': x,
                '@@transducer/reduced': true,
              }
        }
      },
      {},
    ],
    '../node_modules/ramda/es/internal/_xfBase.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0
        var _default = {
          init: function() {
            return this.xf['@@transducer/init']()
          },
          result: function(result) {
            return this.xf['@@transducer/result'](result)
          },
        }
        exports.default = _default
      },
      {},
    ],
    '../node_modules/ramda/es/internal/_xall.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(require('./_curry2.js'))

        var _reduced2 = _interopRequireDefault(require('./_reduced.js'))

        var _xfBase2 = _interopRequireDefault(require('./_xfBase.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        var XAll =
          /*#__PURE__*/
          (function() {
            function XAll(f, xf) {
              this.xf = xf
              this.f = f
              this.all = true
            }

            XAll.prototype['@@transducer/init'] = _xfBase2.default.init

            XAll.prototype['@@transducer/result'] = function(result) {
              if (this.all) {
                result = this.xf['@@transducer/step'](result, true)
              }

              return this.xf['@@transducer/result'](result)
            }

            XAll.prototype['@@transducer/step'] = function(result, input) {
              if (!this.f(input)) {
                this.all = false
                result = (0, _reduced2.default)(
                  this.xf['@@transducer/step'](result, false),
                )
              }

              return result
            }

            return XAll
          })()

        var _xall =
          /*#__PURE__*/
          (0, _curry.default)(function _xall(f, xf) {
            return new XAll(f, xf)
          })

        var _default = _xall
        exports.default = _default
      },
      {
        './_curry2.js': '../node_modules/ramda/es/internal/_curry2.js',
        './_reduced.js': '../node_modules/ramda/es/internal/_reduced.js',
        './_xfBase.js': '../node_modules/ramda/es/internal/_xfBase.js',
      },
    ],
    '../node_modules/ramda/es/all.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        var _dispatchable2 = _interopRequireDefault(
          require('./internal/_dispatchable.js'),
        )

        var _xall2 = _interopRequireDefault(require('./internal/_xall.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns `true` if all elements of the list match the predicate, `false` if
         * there are any that don't.
         *
         * Dispatches to the `all` method of the second argument, if present.
         *
         * Acts as a transducer if a transformer is given in list position.
         *
         * @func
         * @memberOf R
         * @since v0.1.0
         * @category List
         * @sig (a -> Boolean) -> [a] -> Boolean
         * @param {Function} fn The predicate function.
         * @param {Array} list The array to consider.
         * @return {Boolean} `true` if the predicate is satisfied by every element, `false`
         *         otherwise.
         * @see R.any, R.none, R.transduce
         * @example
         *
         *      const equals3 = R.equals(3);
         *      R.all(equals3)([3, 3, 3, 3]); //=> true
         *      R.all(equals3)([3, 3, 1, 3]); //=> false
         */
        var all =
          /*#__PURE__*/
          (0, _curry.default)(
            /*#__PURE__*/
            (0, _dispatchable2.default)(
              ['all'],
              _xall2.default,
              function all(fn, list) {
                var idx = 0

                while (idx < list.length) {
                  if (!fn(list[idx])) {
                    return false
                  }

                  idx += 1
                }

                return true
              },
            ),
          )
        var _default = all
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
        './internal/_dispatchable.js':
          '../node_modules/ramda/es/internal/_dispatchable.js',
        './internal/_xall.js':
          '../node_modules/ramda/es/internal/_xall.js',
      },
    ],
    '../node_modules/ramda/es/max.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns the larger of its two arguments.
         *
         * @func
         * @memberOf R
         * @since v0.1.0
         * @category Relation
         * @sig Ord a => a -> a -> a
         * @param {*} a
         * @param {*} b
         * @return {*}
         * @see R.maxBy, R.min
         * @example
         *
         *      R.max(789, 123); //=> 789
         *      R.max('a', 'b'); //=> 'b'
         */
        var max =
          /*#__PURE__*/
          (0, _curry.default)(function max(a, b) {
            return b > a ? b : a
          })
        var _default = max
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
      },
    ],
    '../node_modules/ramda/es/internal/_map.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = _map

        function _map(fn, functor) {
          var idx = 0
          var len = functor.length
          var result = Array(len)

          while (idx < len) {
            result[idx] = fn(functor[idx])
            idx += 1
          }

          return result
        }
      },
      {},
    ],
    '../node_modules/ramda/es/internal/_isString.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = _isString

        function _isString(x) {
          return Object.prototype.toString.call(x) === '[object String]'
        }
      },
      {},
    ],
    '../node_modules/ramda/es/internal/_isArrayLike.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(require('./_curry1.js'))

        var _isArray2 = _interopRequireDefault(require('./_isArray.js'))

        var _isString2 = _interopRequireDefault(require('./_isString.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Tests whether or not an object is similar to an array.
         *
         * @private
         * @category Type
         * @category List
         * @sig * -> Boolean
         * @param {*} x The object to test.
         * @return {Boolean} `true` if `x` has a numeric length property and extreme indices defined; `false` otherwise.
         * @example
         *
         *      _isArrayLike([]); //=> true
         *      _isArrayLike(true); //=> false
         *      _isArrayLike({}); //=> false
         *      _isArrayLike({length: 10}); //=> false
         *      _isArrayLike({0: 'zero', 9: 'nine', length: 10}); //=> true
         */
        var _isArrayLike =
          /*#__PURE__*/
          (0, _curry.default)(function isArrayLike(x) {
            if ((0, _isArray2.default)(x)) {
              return true
            }

            if (!x) {
              return false
            }

            if (typeof x !== 'object') {
              return false
            }

            if ((0, _isString2.default)(x)) {
              return false
            }

            if (x.nodeType === 1) {
              return !!x.length
            }

            if (x.length === 0) {
              return true
            }

            if (x.length > 0) {
              return x.hasOwnProperty(0) && x.hasOwnProperty(x.length - 1)
            }

            return false
          })

        var _default = _isArrayLike
        exports.default = _default
      },
      {
        './_curry1.js': '../node_modules/ramda/es/internal/_curry1.js',
        './_isArray.js': '../node_modules/ramda/es/internal/_isArray.js',
        './_isString.js': '../node_modules/ramda/es/internal/_isString.js',
      },
    ],
    '../node_modules/ramda/es/internal/_xwrap.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = _xwrap

        var XWrap =
          /*#__PURE__*/
          (function() {
            function XWrap(fn) {
              this.f = fn
            }

            XWrap.prototype['@@transducer/init'] = function() {
              throw new Error('init not implemented on XWrap')
            }

            XWrap.prototype['@@transducer/result'] = function(acc) {
              return acc
            }

            XWrap.prototype['@@transducer/step'] = function(acc, x) {
              return this.f(acc, x)
            }

            return XWrap
          })()

        function _xwrap(fn) {
          return new XWrap(fn)
        }
      },
      {},
    ],
    '../node_modules/ramda/es/bind.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _arity2 = _interopRequireDefault(
          require('./internal/_arity.js'),
        )

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Creates a function that is bound to a context.
         * Note: `R.bind` does not provide the additional argument-binding capabilities of
         * [Function.prototype.bind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind).
         *
         * @func
         * @memberOf R
         * @since v0.6.0
         * @category Function
         * @category Object
         * @sig (* -> *) -> {*} -> (* -> *)
         * @param {Function} fn The function to bind to context
         * @param {Object} thisObj The context to bind `fn` to
         * @return {Function} A function that will execute in the context of `thisObj`.
         * @see R.partial
         * @example
         *
         *      const log = R.bind(console.log, console);
         *      R.pipe(R.assoc('a', 2), R.tap(log), R.assoc('a', 3))({a: 1}); //=> {a: 3}
         *      // logs {a: 2}
         * @symb R.bind(f, o)(a, b) = f.call(o, a, b)
         */
        var bind =
          /*#__PURE__*/
          (0, _curry.default)(function bind(fn, thisObj) {
            return (0, _arity2.default)(fn.length, function() {
              return fn.apply(thisObj, arguments)
            })
          })
        var _default = bind
        exports.default = _default
      },
      {
        './internal/_arity.js':
          '../node_modules/ramda/es/internal/_arity.js',
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
      },
    ],
    '../node_modules/ramda/es/internal/_reduce.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = _reduce

        var _isArrayLike2 = _interopRequireDefault(
          require('./_isArrayLike.js'),
        )

        var _xwrap2 = _interopRequireDefault(require('./_xwrap.js'))

        var _bind = _interopRequireDefault(require('../bind.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        function _arrayReduce(xf, acc, list) {
          var idx = 0
          var len = list.length

          while (idx < len) {
            acc = xf['@@transducer/step'](acc, list[idx])

            if (acc && acc['@@transducer/reduced']) {
              acc = acc['@@transducer/value']
              break
            }

            idx += 1
          }

          return xf['@@transducer/result'](acc)
        }

        function _iterableReduce(xf, acc, iter) {
          var step = iter.next()

          while (!step.done) {
            acc = xf['@@transducer/step'](acc, step.value)

            if (acc && acc['@@transducer/reduced']) {
              acc = acc['@@transducer/value']
              break
            }

            step = iter.next()
          }

          return xf['@@transducer/result'](acc)
        }

        function _methodReduce(xf, acc, obj, methodName) {
          return xf['@@transducer/result'](
            obj[methodName](
              (0, _bind.default)(xf['@@transducer/step'], xf),
              acc,
            ),
          )
        }

        var symIterator =
          typeof Symbol !== 'undefined' ? Symbol.iterator : '@@iterator'

        function _reduce(fn, acc, list) {
          if (typeof fn === 'function') {
            fn = (0, _xwrap2.default)(fn)
          }

          if ((0, _isArrayLike2.default)(list)) {
            return _arrayReduce(fn, acc, list)
          }

          if (typeof list['fantasy-land/reduce'] === 'function') {
            return _methodReduce(fn, acc, list, 'fantasy-land/reduce')
          }

          if (list[symIterator] != null) {
            return _iterableReduce(fn, acc, list[symIterator]())
          }

          if (typeof list.next === 'function') {
            return _iterableReduce(fn, acc, list)
          }

          if (typeof list.reduce === 'function') {
            return _methodReduce(fn, acc, list, 'reduce')
          }

          throw new TypeError('reduce: list must be array or iterable')
        }
      },
      {
        './_isArrayLike.js':
          '../node_modules/ramda/es/internal/_isArrayLike.js',
        './_xwrap.js': '../node_modules/ramda/es/internal/_xwrap.js',
        '../bind.js': '../node_modules/ramda/es/bind.js',
      },
    ],
    '../node_modules/ramda/es/internal/_xmap.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(require('./_curry2.js'))

        var _xfBase2 = _interopRequireDefault(require('./_xfBase.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        var XMap =
          /*#__PURE__*/
          (function() {
            function XMap(f, xf) {
              this.xf = xf
              this.f = f
            }

            XMap.prototype['@@transducer/init'] = _xfBase2.default.init
            XMap.prototype['@@transducer/result'] = _xfBase2.default.result

            XMap.prototype['@@transducer/step'] = function(result, input) {
              return this.xf['@@transducer/step'](result, this.f(input))
            }

            return XMap
          })()

        var _xmap =
          /*#__PURE__*/
          (0, _curry.default)(function _xmap(f, xf) {
            return new XMap(f, xf)
          })

        var _default = _xmap
        exports.default = _default
      },
      {
        './_curry2.js': '../node_modules/ramda/es/internal/_curry2.js',
        './_xfBase.js': '../node_modules/ramda/es/internal/_xfBase.js',
      },
    ],
    '../node_modules/ramda/es/internal/_has.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = _has

        function _has(prop, obj) {
          return Object.prototype.hasOwnProperty.call(obj, prop)
        }
      },
      {},
    ],
    '../node_modules/ramda/es/internal/_isArguments.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _has2 = _interopRequireDefault(require('./_has.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        var toString = Object.prototype.toString

        var _isArguments =
          /*#__PURE__*/
          (function() {
            return toString.call(arguments) === '[object Arguments]'
              ? function _isArguments(x) {
                  return toString.call(x) === '[object Arguments]'
                }
              : function _isArguments(x) {
                  return (0, _has2.default)('callee', x)
                }
          })()

        var _default = _isArguments
        exports.default = _default
      },
      { './_has.js': '../node_modules/ramda/es/internal/_has.js' },
    ],
    '../node_modules/ramda/es/keys.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry1.js'),
        )

        var _has2 = _interopRequireDefault(require('./internal/_has.js'))

        var _isArguments2 = _interopRequireDefault(
          require('./internal/_isArguments.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        // cover IE < 9 keys issues
        var hasEnumBug = !/*#__PURE__*/
        {
          toString: null,
        }.propertyIsEnumerable('toString')
        var nonEnumerableProps = [
          'constructor',
          'valueOf',
          'isPrototypeOf',
          'toString',
          'propertyIsEnumerable',
          'hasOwnProperty',
          'toLocaleString',
        ] // Safari bug

        var hasArgsEnumBug =
          /*#__PURE__*/
          (function() {
            'use strict'

            return arguments.propertyIsEnumerable('length')
          })()

        var contains = function contains(list, item) {
          var idx = 0

          while (idx < list.length) {
            if (list[idx] === item) {
              return true
            }

            idx += 1
          }

          return false
        }
        /**
         * Returns a list containing the names of all the enumerable own properties of
         * the supplied object.
         * Note that the order of the output array is not guaranteed to be consistent
         * across different JS platforms.
         *
         * @func
         * @memberOf R
         * @since v0.1.0
         * @category Object
         * @sig {k: v} -> [k]
         * @param {Object} obj The object to extract properties from
         * @return {Array} An array of the object's own properties.
         * @see R.keysIn, R.values
         * @example
         *
         *      R.keys({a: 1, b: 2, c: 3}); //=> ['a', 'b', 'c']
         */

        var keys =
          typeof Object.keys === 'function' && !hasArgsEnumBug
            ? /*#__PURE__*/
              (0, _curry.default)(function keys(obj) {
                return Object(obj) !== obj ? [] : Object.keys(obj)
              })
            : /*#__PURE__*/
              (0, _curry.default)(function keys(obj) {
                if (Object(obj) !== obj) {
                  return []
                }

                var prop, nIdx
                var ks = []
                var checkArgsLength =
                  hasArgsEnumBug && (0, _isArguments2.default)(obj)

                for (prop in obj) {
                  if (
                    (0, _has2.default)(prop, obj) &&
                    (!checkArgsLength || prop !== 'length')
                  ) {
                    ks[ks.length] = prop
                  }
                }

                if (hasEnumBug) {
                  nIdx = nonEnumerableProps.length - 1

                  while (nIdx >= 0) {
                    prop = nonEnumerableProps[nIdx]

                    if (
                      (0, _has2.default)(prop, obj) &&
                      !contains(ks, prop)
                    ) {
                      ks[ks.length] = prop
                    }

                    nIdx -= 1
                  }
                }

                return ks
              })
        var _default = keys
        exports.default = _default
      },
      {
        './internal/_curry1.js':
          '../node_modules/ramda/es/internal/_curry1.js',
        './internal/_has.js': '../node_modules/ramda/es/internal/_has.js',
        './internal/_isArguments.js':
          '../node_modules/ramda/es/internal/_isArguments.js',
      },
    ],
    '../node_modules/ramda/es/map.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        var _dispatchable2 = _interopRequireDefault(
          require('./internal/_dispatchable.js'),
        )

        var _map2 = _interopRequireDefault(require('./internal/_map.js'))

        var _reduce2 = _interopRequireDefault(
          require('./internal/_reduce.js'),
        )

        var _xmap2 = _interopRequireDefault(require('./internal/_xmap.js'))

        var _curryN = _interopRequireDefault(require('./curryN.js'))

        var _keys = _interopRequireDefault(require('./keys.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Takes a function and
         * a [functor](https://github.com/fantasyland/fantasy-land#functor),
         * applies the function to each of the functor's values, and returns
         * a functor of the same shape.
         *
         * Ramda provides suitable `map` implementations for `Array` and `Object`,
         * so this function may be applied to `[1, 2, 3]` or `{x: 1, y: 2, z: 3}`.
         *
         * Dispatches to the `map` method of the second argument, if present.
         *
         * Acts as a transducer if a transformer is given in list position.
         *
         * Also treats functions as functors and will compose them together.
         *
         * @func
         * @memberOf R
         * @since v0.1.0
         * @category List
         * @sig Functor f => (a -> b) -> f a -> f b
         * @param {Function} fn The function to be called on every element of the input `list`.
         * @param {Array} list The list to be iterated over.
         * @return {Array} The new list.
         * @see R.transduce, R.addIndex
         * @example
         *
         *      const double = x => x * 2;
         *
         *      R.map(double, [1, 2, 3]); //=> [2, 4, 6]
         *
         *      R.map(double, {x: 1, y: 2, z: 3}); //=> {x: 2, y: 4, z: 6}
         * @symb R.map(f, [a, b]) = [f(a), f(b)]
         * @symb R.map(f, { x: a, y: b }) = { x: f(a), y: f(b) }
         * @symb R.map(f, functor_o) = functor_o.map(f)
         */
        var map =
          /*#__PURE__*/
          (0, _curry.default)(
            /*#__PURE__*/
            (0, _dispatchable2.default)(
              ['fantasy-land/map', 'map'],
              _xmap2.default,
              function map(fn, functor) {
                switch (Object.prototype.toString.call(functor)) {
                  case '[object Function]':
                    return (0, _curryN.default)(
                      functor.length,
                      function() {
                        return fn.call(
                          this,
                          functor.apply(this, arguments),
                        )
                      },
                    )

                  case '[object Object]':
                    return (0, _reduce2.default)(
                      function(acc, key) {
                        acc[key] = fn(functor[key])
                        return acc
                      },
                      {},
                      (0, _keys.default)(functor),
                    )

                  default:
                    return (0, _map2.default)(fn, functor)
                }
              },
            ),
          )
        var _default = map
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
        './internal/_dispatchable.js':
          '../node_modules/ramda/es/internal/_dispatchable.js',
        './internal/_map.js': '../node_modules/ramda/es/internal/_map.js',
        './internal/_reduce.js':
          '../node_modules/ramda/es/internal/_reduce.js',
        './internal/_xmap.js':
          '../node_modules/ramda/es/internal/_xmap.js',
        './curryN.js': '../node_modules/ramda/es/curryN.js',
        './keys.js': '../node_modules/ramda/es/keys.js',
      },
    ],
    '../node_modules/ramda/es/path.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Retrieve the value at a given path.
         *
         * @func
         * @memberOf R
         * @since v0.2.0
         * @category Object
         * @typedefn Idx = String | Int
         * @sig [Idx] -> {a} -> a | Undefined
         * @param {Array} path The path to use.
         * @param {Object} obj The object to retrieve the nested property from.
         * @return {*} The data at `path`.
         * @see R.prop
         * @example
         *
         *      R.path(['a', 'b'], {a: {b: 2}}); //=> 2
         *      R.path(['a', 'b'], {c: {b: 2}}); //=> undefined
         */
        var path =
          /*#__PURE__*/
          (0, _curry.default)(function path(paths, obj) {
            var val = obj
            var idx = 0

            while (idx < paths.length) {
              if (val == null) {
                return
              }

              val = val[paths[idx]]
              idx += 1
            }

            return val
          })
        var _default = path
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
      },
    ],
    '../node_modules/ramda/es/prop.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        var _path = _interopRequireDefault(require('./path.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns a function that when supplied an object returns the indicated
         * property of that object, if it exists.
         *
         * @func
         * @memberOf R
         * @since v0.1.0
         * @category Object
         * @sig s -> {s: a} -> a | Undefined
         * @param {String} p The property name
         * @param {Object} obj The object to query
         * @return {*} The value at `obj.p`.
         * @see R.path
         * @example
         *
         *      R.prop('x', {x: 100}); //=> 100
         *      R.prop('x', {}); //=> undefined
         *      R.compose(R.inc, R.prop('x'))({ x: 3 }) //=> 4
         */
        var prop =
          /*#__PURE__*/
          (0, _curry.default)(function prop(p, obj) {
            return (0, _path.default)([p], obj)
          })
        var _default = prop
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
        './path.js': '../node_modules/ramda/es/path.js',
      },
    ],
    '../node_modules/ramda/es/pluck.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        var _map = _interopRequireDefault(require('./map.js'))

        var _prop = _interopRequireDefault(require('./prop.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns a new list by plucking the same named property off all objects in
         * the list supplied.
         *
         * `pluck` will work on
         * any [functor](https://github.com/fantasyland/fantasy-land#functor) in
         * addition to arrays, as it is equivalent to `R.map(R.prop(k), f)`.
         *
         * @func
         * @memberOf R
         * @since v0.1.0
         * @category List
         * @sig Functor f => k -> f {k: v} -> f v
         * @param {Number|String} key The key name to pluck off of each object.
         * @param {Array} f The array or functor to consider.
         * @return {Array} The list of values for the given key.
         * @see R.props
         * @example
         *
         *      var getAges = R.pluck('age');
         *      getAges([{name: 'fred', age: 29}, {name: 'wilma', age: 27}]); //=> [29, 27]
         *
         *      R.pluck(0, [[1, 2], [3, 4]]);               //=> [1, 3]
         *      R.pluck('val', {a: {val: 3}, b: {val: 5}}); //=> {a: 3, b: 5}
         * @symb R.pluck('x', [{x: 1, y: 2}, {x: 3, y: 4}, {x: 5, y: 6}]) = [1, 3, 5]
         * @symb R.pluck(0, [[1, 2], [3, 4], [5, 6]]) = [1, 3, 5]
         */
        var pluck =
          /*#__PURE__*/
          (0, _curry.default)(function pluck(p, list) {
            return (0, _map.default)((0, _prop.default)(p), list)
          })
        var _default = pluck
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
        './map.js': '../node_modules/ramda/es/map.js',
        './prop.js': '../node_modules/ramda/es/prop.js',
      },
    ],
    '../node_modules/ramda/es/reduce.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry3.js'),
        )

        var _reduce2 = _interopRequireDefault(
          require('./internal/_reduce.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns a single item by iterating through the list, successively calling
         * the iterator function and passing it an accumulator value and the current
         * value from the array, and then passing the result to the next call.
         *
         * The iterator function receives two values: *(acc, value)*. It may use
         * [`R.reduced`](#reduced) to shortcut the iteration.
         *
         * The arguments' order of [`reduceRight`](#reduceRight)'s iterator function
         * is *(value, acc)*.
         *
         * Note: `R.reduce` does not skip deleted or unassigned indices (sparse
         * arrays), unlike the native `Array.prototype.reduce` method. For more details
         * on this behavior, see:
         * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#Description
         *
         * Dispatches to the `reduce` method of the third argument, if present. When
         * doing so, it is up to the user to handle the [`R.reduced`](#reduced)
         * shortcuting, as this is not implemented by `reduce`.
         *
         * @func
         * @memberOf R
         * @since v0.1.0
         * @category List
         * @sig ((a, b) -> a) -> a -> [b] -> a
         * @param {Function} fn The iterator function. Receives two values, the accumulator and the
         *        current element from the array.
         * @param {*} acc The accumulator value.
         * @param {Array} list The list to iterate over.
         * @return {*} The final, accumulated value.
         * @see R.reduced, R.addIndex, R.reduceRight
         * @example
         *
         *      R.reduce(R.subtract, 0, [1, 2, 3, 4]) // => ((((0 - 1) - 2) - 3) - 4) = -10
         *      //          -               -10
         *      //         / \              / \
         *      //        -   4           -6   4
         *      //       / \              / \
         *      //      -   3   ==>     -3   3
         *      //     / \              / \
         *      //    -   2           -1   2
         *      //   / \              / \
         *      //  0   1            0   1
         *
         * @symb R.reduce(f, a, [b, c, d]) = f(f(f(a, b), c), d)
         */
        var reduce =
          /*#__PURE__*/
          (0, _curry.default)(_reduce2.default)
        var _default = reduce
        exports.default = _default
      },
      {
        './internal/_curry3.js':
          '../node_modules/ramda/es/internal/_curry3.js',
        './internal/_reduce.js':
          '../node_modules/ramda/es/internal/_reduce.js',
      },
    ],
    '../node_modules/ramda/es/allPass.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry1.js'),
        )

        var _curryN = _interopRequireDefault(require('./curryN.js'))

        var _max = _interopRequireDefault(require('./max.js'))

        var _pluck = _interopRequireDefault(require('./pluck.js'))

        var _reduce = _interopRequireDefault(require('./reduce.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Takes a list of predicates and returns a predicate that returns true for a
         * given list of arguments if every one of the provided predicates is satisfied
         * by those arguments.
         *
         * The function returned is a curried function whose arity matches that of the
         * highest-arity predicate.
         *
         * @func
         * @memberOf R
         * @since v0.9.0
         * @category Logic
         * @sig [(*... -> Boolean)] -> (*... -> Boolean)
         * @param {Array} predicates An array of predicates to check
         * @return {Function} The combined predicate
         * @see R.anyPass
         * @example
         *
         *      const isQueen = R.propEq('rank', 'Q');
         *      const isSpade = R.propEq('suit', '♠︎');
         *      const isQueenOfSpades = R.allPass([isQueen, isSpade]);
         *
         *      isQueenOfSpades({rank: 'Q', suit: '♣︎'}); //=> false
         *      isQueenOfSpades({rank: 'Q', suit: '♠︎'}); //=> true
         */
        var allPass =
          /*#__PURE__*/
          (0, _curry.default)(function allPass(preds) {
            return (0,
            _curryN.default)((0, _reduce.default)(_max.default, 0, (0, _pluck.default)('length', preds)), function() {
              var idx = 0
              var len = preds.length

              while (idx < len) {
                if (!preds[idx].apply(this, arguments)) {
                  return false
                }

                idx += 1
              }

              return true
            })
          })
        var _default = allPass
        exports.default = _default
      },
      {
        './internal/_curry1.js':
          '../node_modules/ramda/es/internal/_curry1.js',
        './curryN.js': '../node_modules/ramda/es/curryN.js',
        './max.js': '../node_modules/ramda/es/max.js',
        './pluck.js': '../node_modules/ramda/es/pluck.js',
        './reduce.js': '../node_modules/ramda/es/reduce.js',
      },
    ],
    '../node_modules/ramda/es/always.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry1.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns a function that always returns the given value. Note that for
         * non-primitives the value returned is a reference to the original value.
         *
         * This function is known as `const`, `constant`, or `K` (for K combinator) in
         * other languages and libraries.
         *
         * @func
         * @memberOf R
         * @since v0.1.0
         * @category Function
         * @sig a -> (* -> a)
         * @param {*} val The value to wrap in a function
         * @return {Function} A Function :: * -> val.
         * @example
         *
         *      const t = R.always('Tee');
         *      t(); //=> 'Tee'
         */
        var always =
          /*#__PURE__*/
          (0, _curry.default)(function always(val) {
            return function() {
              return val
            }
          })
        var _default = always
        exports.default = _default
      },
      {
        './internal/_curry1.js':
          '../node_modules/ramda/es/internal/_curry1.js',
      },
    ],
    '../node_modules/ramda/es/and.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns `true` if both arguments are `true`; `false` otherwise.
         *
         * @func
         * @memberOf R
         * @since v0.1.0
         * @category Logic
         * @sig a -> b -> a | b
         * @param {Any} a
         * @param {Any} b
         * @return {Any} the first argument if it is falsy, otherwise the second argument.
         * @see R.both
         * @example
         *
         *      R.and(true, true); //=> true
         *      R.and(true, false); //=> false
         *      R.and(false, true); //=> false
         *      R.and(false, false); //=> false
         */
        var and =
          /*#__PURE__*/
          (0, _curry.default)(function and(a, b) {
            return a && b
          })
        var _default = and
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
      },
    ],
    '../node_modules/ramda/es/internal/_xany.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(require('./_curry2.js'))

        var _reduced2 = _interopRequireDefault(require('./_reduced.js'))

        var _xfBase2 = _interopRequireDefault(require('./_xfBase.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        var XAny =
          /*#__PURE__*/
          (function() {
            function XAny(f, xf) {
              this.xf = xf
              this.f = f
              this.any = false
            }

            XAny.prototype['@@transducer/init'] = _xfBase2.default.init

            XAny.prototype['@@transducer/result'] = function(result) {
              if (!this.any) {
                result = this.xf['@@transducer/step'](result, false)
              }

              return this.xf['@@transducer/result'](result)
            }

            XAny.prototype['@@transducer/step'] = function(result, input) {
              if (this.f(input)) {
                this.any = true
                result = (0, _reduced2.default)(
                  this.xf['@@transducer/step'](result, true),
                )
              }

              return result
            }

            return XAny
          })()

        var _xany =
          /*#__PURE__*/
          (0, _curry.default)(function _xany(f, xf) {
            return new XAny(f, xf)
          })

        var _default = _xany
        exports.default = _default
      },
      {
        './_curry2.js': '../node_modules/ramda/es/internal/_curry2.js',
        './_reduced.js': '../node_modules/ramda/es/internal/_reduced.js',
        './_xfBase.js': '../node_modules/ramda/es/internal/_xfBase.js',
      },
    ],
    '../node_modules/ramda/es/any.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        var _dispatchable2 = _interopRequireDefault(
          require('./internal/_dispatchable.js'),
        )

        var _xany2 = _interopRequireDefault(require('./internal/_xany.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns `true` if at least one of the elements of the list match the predicate,
         * `false` otherwise.
         *
         * Dispatches to the `any` method of the second argument, if present.
         *
         * Acts as a transducer if a transformer is given in list position.
         *
         * @func
         * @memberOf R
         * @since v0.1.0
         * @category List
         * @sig (a -> Boolean) -> [a] -> Boolean
         * @param {Function} fn The predicate function.
         * @param {Array} list The array to consider.
         * @return {Boolean} `true` if the predicate is satisfied by at least one element, `false`
         *         otherwise.
         * @see R.all, R.none, R.transduce
         * @example
         *
         *      const lessThan0 = R.flip(R.lt)(0);
         *      const lessThan2 = R.flip(R.lt)(2);
         *      R.any(lessThan0)([1, 2]); //=> false
         *      R.any(lessThan2)([1, 2]); //=> true
         */
        var any =
          /*#__PURE__*/
          (0, _curry.default)(
            /*#__PURE__*/
            (0, _dispatchable2.default)(
              ['any'],
              _xany2.default,
              function any(fn, list) {
                var idx = 0

                while (idx < list.length) {
                  if (fn(list[idx])) {
                    return true
                  }

                  idx += 1
                }

                return false
              },
            ),
          )
        var _default = any
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
        './internal/_dispatchable.js':
          '../node_modules/ramda/es/internal/_dispatchable.js',
        './internal/_xany.js':
          '../node_modules/ramda/es/internal/_xany.js',
      },
    ],
    '../node_modules/ramda/es/anyPass.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry1.js'),
        )

        var _curryN = _interopRequireDefault(require('./curryN.js'))

        var _max = _interopRequireDefault(require('./max.js'))

        var _pluck = _interopRequireDefault(require('./pluck.js'))

        var _reduce = _interopRequireDefault(require('./reduce.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Takes a list of predicates and returns a predicate that returns true for a
         * given list of arguments if at least one of the provided predicates is
         * satisfied by those arguments.
         *
         * The function returned is a curried function whose arity matches that of the
         * highest-arity predicate.
         *
         * @func
         * @memberOf R
         * @since v0.9.0
         * @category Logic
         * @sig [(*... -> Boolean)] -> (*... -> Boolean)
         * @param {Array} predicates An array of predicates to check
         * @return {Function} The combined predicate
         * @see R.allPass
         * @example
         *
         *      const isClub = R.propEq('suit', '♣');
         *      const isSpade = R.propEq('suit', '♠');
         *      const isBlackCard = R.anyPass([isClub, isSpade]);
         *
         *      isBlackCard({rank: '10', suit: '♣'}); //=> true
         *      isBlackCard({rank: 'Q', suit: '♠'}); //=> true
         *      isBlackCard({rank: 'Q', suit: '♦'}); //=> false
         */
        var anyPass =
          /*#__PURE__*/
          (0, _curry.default)(function anyPass(preds) {
            return (0,
            _curryN.default)((0, _reduce.default)(_max.default, 0, (0, _pluck.default)('length', preds)), function() {
              var idx = 0
              var len = preds.length

              while (idx < len) {
                if (preds[idx].apply(this, arguments)) {
                  return true
                }

                idx += 1
              }

              return false
            })
          })
        var _default = anyPass
        exports.default = _default
      },
      {
        './internal/_curry1.js':
          '../node_modules/ramda/es/internal/_curry1.js',
        './curryN.js': '../node_modules/ramda/es/curryN.js',
        './max.js': '../node_modules/ramda/es/max.js',
        './pluck.js': '../node_modules/ramda/es/pluck.js',
        './reduce.js': '../node_modules/ramda/es/reduce.js',
      },
    ],
    '../node_modules/ramda/es/ap.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _concat2 = _interopRequireDefault(
          require('./internal/_concat.js'),
        )

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        var _reduce2 = _interopRequireDefault(
          require('./internal/_reduce.js'),
        )

        var _map = _interopRequireDefault(require('./map.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * ap applies a list of functions to a list of values.
         *
         * Dispatches to the `ap` method of the second argument, if present. Also
         * treats curried functions as applicatives.
         *
         * @func
         * @memberOf R
         * @since v0.3.0
         * @category Function
         * @sig [a -> b] -> [a] -> [b]
         * @sig Apply f => f (a -> b) -> f a -> f b
         * @sig (r -> a -> b) -> (r -> a) -> (r -> b)
         * @param {*} applyF
         * @param {*} applyX
         * @return {*}
         * @example
         *
         *      R.ap([R.multiply(2), R.add(3)], [1,2,3]); //=> [2, 4, 6, 4, 5, 6]
         *      R.ap([R.concat('tasty '), R.toUpper], ['pizza', 'salad']); //=> ["tasty pizza", "tasty salad", "PIZZA", "SALAD"]
         *
         *      // R.ap can also be used as S combinator
         *      // when only two functions are passed
         *      R.ap(R.concat, R.toUpper)('Ramda') //=> 'RamdaRAMDA'
         * @symb R.ap([f, g], [a, b]) = [f(a), f(b), g(a), g(b)]
         */
        var ap =
          /*#__PURE__*/
          (0, _curry.default)(function ap(applyF, applyX) {
            return typeof applyX['fantasy-land/ap'] === 'function'
              ? applyX['fantasy-land/ap'](applyF)
              : typeof applyF.ap === 'function'
              ? applyF.ap(applyX)
              : typeof applyF === 'function'
              ? function(x) {
                  return applyF(x)(applyX(x))
                }
              : (0, _reduce2.default)(
                  function(acc, f) {
                    return (0, _concat2.default)(
                      acc,
                      (0, _map.default)(f, applyX),
                    )
                  },
                  [],
                  applyF,
                )
          })
        var _default = ap
        exports.default = _default
      },
      {
        './internal/_concat.js':
          '../node_modules/ramda/es/internal/_concat.js',
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
        './internal/_reduce.js':
          '../node_modules/ramda/es/internal/_reduce.js',
        './map.js': '../node_modules/ramda/es/map.js',
      },
    ],
    '../node_modules/ramda/es/internal/_aperture.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = _aperture

        function _aperture(n, list) {
          var idx = 0
          var limit = list.length - (n - 1)
          var acc = new Array(limit >= 0 ? limit : 0)

          while (idx < limit) {
            acc[idx] = Array.prototype.slice.call(list, idx, idx + n)
            idx += 1
          }

          return acc
        }
      },
      {},
    ],
    '../node_modules/ramda/es/internal/_xaperture.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _concat2 = _interopRequireDefault(require('./_concat.js'))

        var _curry = _interopRequireDefault(require('./_curry2.js'))

        var _xfBase2 = _interopRequireDefault(require('./_xfBase.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        var XAperture =
          /*#__PURE__*/
          (function() {
            function XAperture(n, xf) {
              this.xf = xf
              this.pos = 0
              this.full = false
              this.acc = new Array(n)
            }

            XAperture.prototype['@@transducer/init'] =
              _xfBase2.default.init

            XAperture.prototype['@@transducer/result'] = function(result) {
              this.acc = null
              return this.xf['@@transducer/result'](result)
            }

            XAperture.prototype['@@transducer/step'] = function(
              result,
              input,
            ) {
              this.store(input)
              return this.full
                ? this.xf['@@transducer/step'](result, this.getCopy())
                : result
            }

            XAperture.prototype.store = function(input) {
              this.acc[this.pos] = input
              this.pos += 1

              if (this.pos === this.acc.length) {
                this.pos = 0
                this.full = true
              }
            }

            XAperture.prototype.getCopy = function() {
              return (0, _concat2.default)(
                Array.prototype.slice.call(this.acc, this.pos),
                Array.prototype.slice.call(this.acc, 0, this.pos),
              )
            }

            return XAperture
          })()

        var _xaperture =
          /*#__PURE__*/
          (0, _curry.default)(function _xaperture(n, xf) {
            return new XAperture(n, xf)
          })

        var _default = _xaperture
        exports.default = _default
      },
      {
        './_concat.js': '../node_modules/ramda/es/internal/_concat.js',
        './_curry2.js': '../node_modules/ramda/es/internal/_curry2.js',
        './_xfBase.js': '../node_modules/ramda/es/internal/_xfBase.js',
      },
    ],
    '../node_modules/ramda/es/aperture.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _aperture2 = _interopRequireDefault(
          require('./internal/_aperture.js'),
        )

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        var _dispatchable2 = _interopRequireDefault(
          require('./internal/_dispatchable.js'),
        )

        var _xaperture2 = _interopRequireDefault(
          require('./internal/_xaperture.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns a new list, composed of n-tuples of consecutive elements. If `n` is
         * greater than the length of the list, an empty list is returned.
         *
         * Acts as a transducer if a transformer is given in list position.
         *
         * @func
         * @memberOf R
         * @since v0.12.0
         * @category List
         * @sig Number -> [a] -> [[a]]
         * @param {Number} n The size of the tuples to create
         * @param {Array} list The list to split into `n`-length tuples
         * @return {Array} The resulting list of `n`-length tuples
         * @see R.transduce
         * @example
         *
         *      R.aperture(2, [1, 2, 3, 4, 5]); //=> [[1, 2], [2, 3], [3, 4], [4, 5]]
         *      R.aperture(3, [1, 2, 3, 4, 5]); //=> [[1, 2, 3], [2, 3, 4], [3, 4, 5]]
         *      R.aperture(7, [1, 2, 3, 4, 5]); //=> []
         */
        var aperture =
          /*#__PURE__*/
          (0, _curry.default)(
            /*#__PURE__*/
            (0, _dispatchable2.default)(
              [],
              _xaperture2.default,
              _aperture2.default,
            ),
          )
        var _default = aperture
        exports.default = _default
      },
      {
        './internal/_aperture.js':
          '../node_modules/ramda/es/internal/_aperture.js',
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
        './internal/_dispatchable.js':
          '../node_modules/ramda/es/internal/_dispatchable.js',
        './internal/_xaperture.js':
          '../node_modules/ramda/es/internal/_xaperture.js',
      },
    ],
    '../node_modules/ramda/es/append.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _concat2 = _interopRequireDefault(
          require('./internal/_concat.js'),
        )

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns a new list containing the contents of the given list, followed by
         * the given element.
         *
         * @func
         * @memberOf R
         * @since v0.1.0
         * @category List
         * @sig a -> [a] -> [a]
         * @param {*} el The element to add to the end of the new list.
         * @param {Array} list The list of elements to add a new item to.
         *        list.
         * @return {Array} A new list containing the elements of the old list followed by `el`.
         * @see R.prepend
         * @example
         *
         *      R.append('tests', ['write', 'more']); //=> ['write', 'more', 'tests']
         *      R.append('tests', []); //=> ['tests']
         *      R.append(['tests'], ['write', 'more']); //=> ['write', 'more', ['tests']]
         */
        var append =
          /*#__PURE__*/
          (0, _curry.default)(function append(el, list) {
            return (0, _concat2.default)(list, [el])
          })
        var _default = append
        exports.default = _default
      },
      {
        './internal/_concat.js':
          '../node_modules/ramda/es/internal/_concat.js',
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
      },
    ],
    '../node_modules/ramda/es/apply.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Applies function `fn` to the argument list `args`. This is useful for
         * creating a fixed-arity function from a variadic function. `fn` should be a
         * bound function if context is significant.
         *
         * @func
         * @memberOf R
         * @since v0.7.0
         * @category Function
         * @sig (*... -> a) -> [*] -> a
         * @param {Function} fn The function which will be called with `args`
         * @param {Array} args The arguments to call `fn` with
         * @return {*} result The result, equivalent to `fn(...args)`
         * @see R.call, R.unapply
         * @example
         *
         *      const nums = [1, 2, 3, -99, 42, 6, 7];
         *      R.apply(Math.max, nums); //=> 42
         * @symb R.apply(f, [a, b, c]) = f(a, b, c)
         */
        var apply =
          /*#__PURE__*/
          (0, _curry.default)(function apply(fn, args) {
            return fn.apply(this, args)
          })
        var _default = apply
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
      },
    ],
    '../node_modules/ramda/es/values.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry1.js'),
        )

        var _keys = _interopRequireDefault(require('./keys.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns a list of all the enumerable own properties of the supplied object.
         * Note that the order of the output array is not guaranteed across different
         * JS platforms.
         *
         * @func
         * @memberOf R
         * @since v0.1.0
         * @category Object
         * @sig {k: v} -> [v]
         * @param {Object} obj The object to extract values from
         * @return {Array} An array of the values of the object's own properties.
         * @see R.valuesIn, R.keys
         * @example
         *
         *      R.values({a: 1, b: 2, c: 3}); //=> [1, 2, 3]
         */
        var values =
          /*#__PURE__*/
          (0, _curry.default)(function values(obj) {
            var props = (0, _keys.default)(obj)
            var len = props.length
            var vals = []
            var idx = 0

            while (idx < len) {
              vals[idx] = obj[props[idx]]
              idx += 1
            }

            return vals
          })
        var _default = values
        exports.default = _default
      },
      {
        './internal/_curry1.js':
          '../node_modules/ramda/es/internal/_curry1.js',
        './keys.js': '../node_modules/ramda/es/keys.js',
      },
    ],
    '../node_modules/ramda/es/applySpec.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry1.js'),
        )

        var _apply = _interopRequireDefault(require('./apply.js'))

        var _curryN = _interopRequireDefault(require('./curryN.js'))

        var _max = _interopRequireDefault(require('./max.js'))

        var _pluck = _interopRequireDefault(require('./pluck.js'))

        var _reduce = _interopRequireDefault(require('./reduce.js'))

        var _keys = _interopRequireDefault(require('./keys.js'))

        var _values = _interopRequireDefault(require('./values.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        // Use custom mapValues function to avoid issues with specs that include a "map" key and R.map
        // delegating calls to .map
        function mapValues(fn, obj) {
          return (0, _keys.default)(obj).reduce(function(acc, key) {
            acc[key] = fn(obj[key])
            return acc
          }, {})
        }
        /**
         * Given a spec object recursively mapping properties to functions, creates a
         * function producing an object of the same structure, by mapping each property
         * to the result of calling its associated function with the supplied arguments.
         *
         * @func
         * @memberOf R
         * @since v0.20.0
         * @category Function
         * @sig {k: ((a, b, ..., m) -> v)} -> ((a, b, ..., m) -> {k: v})
         * @param {Object} spec an object recursively mapping properties to functions for
         *        producing the values for these properties.
         * @return {Function} A function that returns an object of the same structure
         * as `spec', with each property set to the value returned by calling its
         * associated function with the supplied arguments.
         * @see R.converge, R.juxt
         * @example
         *
         *      const getMetrics = R.applySpec({
         *        sum: R.add,
         *        nested: { mul: R.multiply }
         *      });
         *      getMetrics(2, 4); // => { sum: 6, nested: { mul: 8 } }
         * @symb R.applySpec({ x: f, y: { z: g } })(a, b) = { x: f(a, b), y: { z: g(a, b) } }
         */

        var applySpec =
          /*#__PURE__*/
          (0, _curry.default)(function applySpec(spec) {
            spec = mapValues(function(v) {
              return typeof v == 'function' ? v : applySpec(v)
            }, spec)
            return (0,
            _curryN.default)((0, _reduce.default)(_max.default, 0, (0, _pluck.default)('length', (0, _values.default)(spec))), function() {
              var args = arguments
              return mapValues(function(f) {
                return (0, _apply.default)(f, args)
              }, spec)
            })
          })
        var _default = applySpec
        exports.default = _default
      },
      {
        './internal/_curry1.js':
          '../node_modules/ramda/es/internal/_curry1.js',
        './apply.js': '../node_modules/ramda/es/apply.js',
        './curryN.js': '../node_modules/ramda/es/curryN.js',
        './max.js': '../node_modules/ramda/es/max.js',
        './pluck.js': '../node_modules/ramda/es/pluck.js',
        './reduce.js': '../node_modules/ramda/es/reduce.js',
        './keys.js': '../node_modules/ramda/es/keys.js',
        './values.js': '../node_modules/ramda/es/values.js',
      },
    ],
    '../node_modules/ramda/es/applyTo.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Takes a value and applies a function to it.
         *
         * This function is also known as the `thrush` combinator.
         *
         * @func
         * @memberOf R
         * @since v0.25.0
         * @category Function
         * @sig a -> (a -> b) -> b
         * @param {*} x The value
         * @param {Function} f The function to apply
         * @return {*} The result of applying `f` to `x`
         * @example
         *
         *      const t42 = R.applyTo(42);
         *      t42(R.identity); //=> 42
         *      t42(R.add(1)); //=> 43
         */
        var applyTo =
          /*#__PURE__*/
          (0, _curry.default)(function applyTo(x, f) {
            return f(x)
          })
        var _default = applyTo
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
      },
    ],
    '../node_modules/ramda/es/ascend.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry3.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Makes an ascending comparator function out of a function that returns a value
         * that can be compared with `<` and `>`.
         *
         * @func
         * @memberOf R
         * @since v0.23.0
         * @category Function
         * @sig Ord b => (a -> b) -> a -> a -> Number
         * @param {Function} fn A function of arity one that returns a value that can be compared
         * @param {*} a The first item to be compared.
         * @param {*} b The second item to be compared.
         * @return {Number} `-1` if fn(a) < fn(b), `1` if fn(b) < fn(a), otherwise `0`
         * @see R.descend
         * @example
         *
         *      const byAge = R.ascend(R.prop('age'));
         *      const people = [
         *        { name: 'Emma', age: 70 },
         *        { name: 'Peter', age: 78 },
         *        { name: 'Mikhail', age: 62 },
         *      ];
         *      const peopleByYoungestFirst = R.sort(byAge, people);
         *        //=> [{ name: 'Mikhail', age: 62 },{ name: 'Emma', age: 70 }, { name: 'Peter', age: 78 }]
         */
        var ascend =
          /*#__PURE__*/
          (0, _curry.default)(function ascend(fn, a, b) {
            var aa = fn(a)
            var bb = fn(b)
            return aa < bb ? -1 : aa > bb ? 1 : 0
          })
        var _default = ascend
        exports.default = _default
      },
      {
        './internal/_curry3.js':
          '../node_modules/ramda/es/internal/_curry3.js',
      },
    ],
    '../node_modules/ramda/es/assoc.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry3.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Makes a shallow clone of an object, setting or overriding the specified
         * property with the given value. Note that this copies and flattens prototype
         * properties onto the new object as well. All non-primitive properties are
         * copied by reference.
         *
         * @func
         * @memberOf R
         * @since v0.8.0
         * @category Object
         * @sig String -> a -> {k: v} -> {k: v}
         * @param {String} prop The property name to set
         * @param {*} val The new value
         * @param {Object} obj The object to clone
         * @return {Object} A new object equivalent to the original except for the changed property.
         * @see R.dissoc, R.pick
         * @example
         *
         *      R.assoc('c', 3, {a: 1, b: 2}); //=> {a: 1, b: 2, c: 3}
         */
        var assoc =
          /*#__PURE__*/
          (0, _curry.default)(function assoc(prop, val, obj) {
            var result = {}

            for (var p in obj) {
              result[p] = obj[p]
            }

            result[prop] = val
            return result
          })
        var _default = assoc
        exports.default = _default
      },
      {
        './internal/_curry3.js':
          '../node_modules/ramda/es/internal/_curry3.js',
      },
    ],
    '../node_modules/ramda/es/internal/_isInteger.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        /**
         * Determine if the passed argument is an integer.
         *
         * @private
         * @param {*} n
         * @category Type
         * @return {Boolean}
         */
        var _default =
          Number.isInteger ||
          function _isInteger(n) {
            return n << 0 === n
          }

        exports.default = _default
      },
      {},
    ],
    '../node_modules/ramda/es/isNil.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry1.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Checks if the input value is `null` or `undefined`.
         *
         * @func
         * @memberOf R
         * @since v0.9.0
         * @category Type
         * @sig * -> Boolean
         * @param {*} x The value to test.
         * @return {Boolean} `true` if `x` is `undefined` or `null`, otherwise `false`.
         * @example
         *
         *      R.isNil(null); //=> true
         *      R.isNil(undefined); //=> true
         *      R.isNil(0); //=> false
         *      R.isNil([]); //=> false
         */
        var isNil =
          /*#__PURE__*/
          (0, _curry.default)(function isNil(x) {
            return x == null
          })
        var _default = isNil
        exports.default = _default
      },
      {
        './internal/_curry1.js':
          '../node_modules/ramda/es/internal/_curry1.js',
      },
    ],
    '../node_modules/ramda/es/assocPath.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry3.js'),
        )

        var _has2 = _interopRequireDefault(require('./internal/_has.js'))

        var _isArray2 = _interopRequireDefault(
          require('./internal/_isArray.js'),
        )

        var _isInteger2 = _interopRequireDefault(
          require('./internal/_isInteger.js'),
        )

        var _assoc = _interopRequireDefault(require('./assoc.js'))

        var _isNil = _interopRequireDefault(require('./isNil.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Makes a shallow clone of an object, setting or overriding the nodes required
         * to create the given path, and placing the specific value at the tail end of
         * that path. Note that this copies and flattens prototype properties onto the
         * new object as well. All non-primitive properties are copied by reference.
         *
         * @func
         * @memberOf R
         * @since v0.8.0
         * @category Object
         * @typedefn Idx = String | Int
         * @sig [Idx] -> a -> {a} -> {a}
         * @param {Array} path the path to set
         * @param {*} val The new value
         * @param {Object} obj The object to clone
         * @return {Object} A new object equivalent to the original except along the specified path.
         * @see R.dissocPath
         * @example
         *
         *      R.assocPath(['a', 'b', 'c'], 42, {a: {b: {c: 0}}}); //=> {a: {b: {c: 42}}}
         *
         *      // Any missing or non-object keys in path will be overridden
         *      R.assocPath(['a', 'b', 'c'], 42, {a: 5}); //=> {a: {b: {c: 42}}}
         */
        var assocPath =
          /*#__PURE__*/
          (0, _curry.default)(function assocPath(path, val, obj) {
            if (path.length === 0) {
              return val
            }

            var idx = path[0]

            if (path.length > 1) {
              var nextObj =
                !(0, _isNil.default)(obj) && (0, _has2.default)(idx, obj)
                  ? obj[idx]
                  : (0, _isInteger2.default)(path[1])
                  ? []
                  : {}
              val = assocPath(
                Array.prototype.slice.call(path, 1),
                val,
                nextObj,
              )
            }

            if (
              (0, _isInteger2.default)(idx) &&
              (0, _isArray2.default)(obj)
            ) {
              var arr = [].concat(obj)
              arr[idx] = val
              return arr
            } else {
              return (0, _assoc.default)(idx, val, obj)
            }
          })
        var _default = assocPath
        exports.default = _default
      },
      {
        './internal/_curry3.js':
          '../node_modules/ramda/es/internal/_curry3.js',
        './internal/_has.js': '../node_modules/ramda/es/internal/_has.js',
        './internal/_isArray.js':
          '../node_modules/ramda/es/internal/_isArray.js',
        './internal/_isInteger.js':
          '../node_modules/ramda/es/internal/_isInteger.js',
        './assoc.js': '../node_modules/ramda/es/assoc.js',
        './isNil.js': '../node_modules/ramda/es/isNil.js',
      },
    ],
    '../node_modules/ramda/es/nAry.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Wraps a function of any arity (including nullary) in a function that accepts
         * exactly `n` parameters. Any extraneous parameters will not be passed to the
         * supplied function.
         *
         * @func
         * @memberOf R
         * @since v0.1.0
         * @category Function
         * @sig Number -> (* -> a) -> (* -> a)
         * @param {Number} n The desired arity of the new function.
         * @param {Function} fn The function to wrap.
         * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of
         *         arity `n`.
         * @see R.binary, R.unary
         * @example
         *
         *      const takesTwoArgs = (a, b) => [a, b];
         *
         *      takesTwoArgs.length; //=> 2
         *      takesTwoArgs(1, 2); //=> [1, 2]
         *
         *      const takesOneArg = R.nAry(1, takesTwoArgs);
         *      takesOneArg.length; //=> 1
         *      // Only `n` arguments are passed to the wrapped function
         *      takesOneArg(1, 2); //=> [1, undefined]
         * @symb R.nAry(0, f)(a, b) = f()
         * @symb R.nAry(1, f)(a, b) = f(a)
         * @symb R.nAry(2, f)(a, b) = f(a, b)
         */
        var nAry =
          /*#__PURE__*/
          (0, _curry.default)(function nAry(n, fn) {
            switch (n) {
              case 0:
                return function() {
                  return fn.call(this)
                }

              case 1:
                return function(a0) {
                  return fn.call(this, a0)
                }

              case 2:
                return function(a0, a1) {
                  return fn.call(this, a0, a1)
                }

              case 3:
                return function(a0, a1, a2) {
                  return fn.call(this, a0, a1, a2)
                }

              case 4:
                return function(a0, a1, a2, a3) {
                  return fn.call(this, a0, a1, a2, a3)
                }

              case 5:
                return function(a0, a1, a2, a3, a4) {
                  return fn.call(this, a0, a1, a2, a3, a4)
                }

              case 6:
                return function(a0, a1, a2, a3, a4, a5) {
                  return fn.call(this, a0, a1, a2, a3, a4, a5)
                }

              case 7:
                return function(a0, a1, a2, a3, a4, a5, a6) {
                  return fn.call(this, a0, a1, a2, a3, a4, a5, a6)
                }

              case 8:
                return function(a0, a1, a2, a3, a4, a5, a6, a7) {
                  return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7)
                }

              case 9:
                return function(a0, a1, a2, a3, a4, a5, a6, a7, a8) {
                  return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7, a8)
                }

              case 10:
                return function(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
                  return fn.call(
                    this,
                    a0,
                    a1,
                    a2,
                    a3,
                    a4,
                    a5,
                    a6,
                    a7,
                    a8,
                    a9,
                  )
                }

              default:
                throw new Error(
                  'First argument to nAry must be a non-negative integer no greater than ten',
                )
            }
          })
        var _default = nAry
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
      },
    ],
    '../node_modules/ramda/es/binary.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry1.js'),
        )

        var _nAry = _interopRequireDefault(require('./nAry.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Wraps a function of any arity (including nullary) in a function that accepts
         * exactly 2 parameters. Any extraneous parameters will not be passed to the
         * supplied function.
         *
         * @func
         * @memberOf R
         * @since v0.2.0
         * @category Function
         * @sig (* -> c) -> (a, b -> c)
         * @param {Function} fn The function to wrap.
         * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of
         *         arity 2.
         * @see R.nAry, R.unary
         * @example
         *
         *      const takesThreeArgs = function(a, b, c) {
         *        return [a, b, c];
         *      };
         *      takesThreeArgs.length; //=> 3
         *      takesThreeArgs(1, 2, 3); //=> [1, 2, 3]
         *
         *      const takesTwoArgs = R.binary(takesThreeArgs);
         *      takesTwoArgs.length; //=> 2
         *      // Only 2 arguments are passed to the wrapped function
         *      takesTwoArgs(1, 2, 3); //=> [1, 2, undefined]
         * @symb R.binary(f)(a, b, c) = f(a, b)
         */
        var binary =
          /*#__PURE__*/
          (0, _curry.default)(function binary(fn) {
            return (0, _nAry.default)(2, fn)
          })
        var _default = binary
        exports.default = _default
      },
      {
        './internal/_curry1.js':
          '../node_modules/ramda/es/internal/_curry1.js',
        './nAry.js': '../node_modules/ramda/es/nAry.js',
      },
    ],
    '../node_modules/ramda/es/internal/_isFunction.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = _isFunction

        function _isFunction(x) {
          return Object.prototype.toString.call(x) === '[object Function]'
        }
      },
      {},
    ],
    '../node_modules/ramda/es/liftN.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        var _reduce2 = _interopRequireDefault(
          require('./internal/_reduce.js'),
        )

        var _ap = _interopRequireDefault(require('./ap.js'))

        var _curryN = _interopRequireDefault(require('./curryN.js'))

        var _map = _interopRequireDefault(require('./map.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * "lifts" a function to be the specified arity, so that it may "map over" that
         * many lists, Functions or other objects that satisfy the [FantasyLand Apply spec](https://github.com/fantasyland/fantasy-land#apply).
         *
         * @func
         * @memberOf R
         * @since v0.7.0
         * @category Function
         * @sig Number -> (*... -> *) -> ([*]... -> [*])
         * @param {Function} fn The function to lift into higher context
         * @return {Function} The lifted function.
         * @see R.lift, R.ap
         * @example
         *
         *      const madd3 = R.liftN(3, (...args) => R.sum(args));
         *      madd3([1,2,3], [1,2,3], [1]); //=> [3, 4, 5, 4, 5, 6, 5, 6, 7]
         */
        var liftN =
          /*#__PURE__*/
          (0, _curry.default)(function liftN(arity, fn) {
            var lifted = (0, _curryN.default)(arity, fn)
            return (0, _curryN.default)(arity, function() {
              return (0,
              _reduce2.default)(_ap.default, (0, _map.default)(lifted, arguments[0]), Array.prototype.slice.call(arguments, 1))
            })
          })
        var _default = liftN
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
        './internal/_reduce.js':
          '../node_modules/ramda/es/internal/_reduce.js',
        './ap.js': '../node_modules/ramda/es/ap.js',
        './curryN.js': '../node_modules/ramda/es/curryN.js',
        './map.js': '../node_modules/ramda/es/map.js',
      },
    ],
    '../node_modules/ramda/es/lift.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry1.js'),
        )

        var _liftN = _interopRequireDefault(require('./liftN.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * "lifts" a function of arity > 1 so that it may "map over" a list, Function or other
         * object that satisfies the [FantasyLand Apply spec](https://github.com/fantasyland/fantasy-land#apply).
         *
         * @func
         * @memberOf R
         * @since v0.7.0
         * @category Function
         * @sig (*... -> *) -> ([*]... -> [*])
         * @param {Function} fn The function to lift into higher context
         * @return {Function} The lifted function.
         * @see R.liftN
         * @example
         *
         *      const madd3 = R.lift((a, b, c) => a + b + c);
         *
         *      madd3([1,2,3], [1,2,3], [1]); //=> [3, 4, 5, 4, 5, 6, 5, 6, 7]
         *
         *      const madd5 = R.lift((a, b, c, d, e) => a + b + c + d + e);
         *
         *      madd5([1,2], [3], [4, 5], [6], [7, 8]); //=> [21, 22, 22, 23, 22, 23, 23, 24]
         */
        var lift =
          /*#__PURE__*/
          (0, _curry.default)(function lift(fn) {
            return (0, _liftN.default)(fn.length, fn)
          })
        var _default = lift
        exports.default = _default
      },
      {
        './internal/_curry1.js':
          '../node_modules/ramda/es/internal/_curry1.js',
        './liftN.js': '../node_modules/ramda/es/liftN.js',
      },
    ],
    '../node_modules/ramda/es/both.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        var _isFunction2 = _interopRequireDefault(
          require('./internal/_isFunction.js'),
        )

        var _and = _interopRequireDefault(require('./and.js'))

        var _lift = _interopRequireDefault(require('./lift.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * A function which calls the two provided functions and returns the `&&`
         * of the results.
         * It returns the result of the first function if it is false-y and the result
         * of the second function otherwise. Note that this is short-circuited,
         * meaning that the second function will not be invoked if the first returns a
         * false-y value.
         *
         * In addition to functions, `R.both` also accepts any fantasy-land compatible
         * applicative functor.
         *
         * @func
         * @memberOf R
         * @since v0.12.0
         * @category Logic
         * @sig (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)
         * @param {Function} f A predicate
         * @param {Function} g Another predicate
         * @return {Function} a function that applies its arguments to `f` and `g` and `&&`s their outputs together.
         * @see R.and
         * @example
         *
         *      const gt10 = R.gt(R.__, 10)
         *      const lt20 = R.lt(R.__, 20)
         *      const f = R.both(gt10, lt20);
         *      f(15); //=> true
         *      f(30); //=> false
         *
         *      R.both(Maybe.Just(false), Maybe.Just(55)); // => Maybe.Just(false)
         *      R.both([false, false, 'a'], [11]); //=> [false, false, 11]
         */
        var both =
          /*#__PURE__*/
          (0, _curry.default)(function both(f, g) {
            return (0, _isFunction2.default)(f)
              ? function _both() {
                  return (
                    f.apply(this, arguments) && g.apply(this, arguments)
                  )
                }
              : (0, _lift.default)(_and.default)(f, g)
          })
        var _default = both
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
        './internal/_isFunction.js':
          '../node_modules/ramda/es/internal/_isFunction.js',
        './and.js': '../node_modules/ramda/es/and.js',
        './lift.js': '../node_modules/ramda/es/lift.js',
      },
    ],
    '../node_modules/ramda/es/curry.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry1.js'),
        )

        var _curryN = _interopRequireDefault(require('./curryN.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns a curried equivalent of the provided function. The curried function
         * has two unusual capabilities. First, its arguments needn't be provided one
         * at a time. If `f` is a ternary function and `g` is `R.curry(f)`, the
         * following are equivalent:
         *
         *   - `g(1)(2)(3)`
         *   - `g(1)(2, 3)`
         *   - `g(1, 2)(3)`
         *   - `g(1, 2, 3)`
         *
         * Secondly, the special placeholder value [`R.__`](#__) may be used to specify
         * "gaps", allowing partial application of any combination of arguments,
         * regardless of their positions. If `g` is as above and `_` is [`R.__`](#__),
         * the following are equivalent:
         *
         *   - `g(1, 2, 3)`
         *   - `g(_, 2, 3)(1)`
         *   - `g(_, _, 3)(1)(2)`
         *   - `g(_, _, 3)(1, 2)`
         *   - `g(_, 2)(1)(3)`
         *   - `g(_, 2)(1, 3)`
         *   - `g(_, 2)(_, 3)(1)`
         *
         * @func
         * @memberOf R
         * @since v0.1.0
         * @category Function
         * @sig (* -> a) -> (* -> a)
         * @param {Function} fn The function to curry.
         * @return {Function} A new, curried function.
         * @see R.curryN, R.partial
         * @example
         *
         *      const addFourNumbers = (a, b, c, d) => a + b + c + d;
         *
         *      const curriedAddFourNumbers = R.curry(addFourNumbers);
         *      const f = curriedAddFourNumbers(1, 2);
         *      const g = f(3);
         *      g(4); //=> 10
         */
        var curry =
          /*#__PURE__*/
          (0, _curry.default)(function curry(fn) {
            return (0, _curryN.default)(fn.length, fn)
          })
        var _default = curry
        exports.default = _default
      },
      {
        './internal/_curry1.js':
          '../node_modules/ramda/es/internal/_curry1.js',
        './curryN.js': '../node_modules/ramda/es/curryN.js',
      },
    ],
    '../node_modules/ramda/es/call.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(require('./curry.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns the result of calling its first argument with the remaining
         * arguments. This is occasionally useful as a converging function for
         * [`R.converge`](#converge): the first branch can produce a function while the
         * remaining branches produce values to be passed to that function as its
         * arguments.
         *
         * @func
         * @memberOf R
         * @since v0.9.0
         * @category Function
         * @sig (*... -> a),*... -> a
         * @param {Function} fn The function to apply to the remaining arguments.
         * @param {...*} args Any number of positional arguments.
         * @return {*}
         * @see R.apply
         * @example
         *
         *      R.call(R.add, 1, 2); //=> 3
         *
         *      const indentN = R.pipe(R.repeat(' '),
         *                           R.join(''),
         *                           R.replace(/^(?!$)/gm));
         *
         *      const format = R.converge(R.call, [
         *                                  R.pipe(R.prop('indent'), indentN),
         *                                  R.prop('value')
         *                              ]);
         *
         *      format({indent: 2, value: 'foo\nbar\nbaz\n'}); //=> '  foo\n  bar\n  baz\n'
         * @symb R.call(f, a, b) = f(a, b)
         */
        var call =
          /*#__PURE__*/
          (0, _curry.default)(function call(fn) {
            return fn.apply(this, Array.prototype.slice.call(arguments, 1))
          })
        var _default = call
        exports.default = _default
      },
      { './curry.js': '../node_modules/ramda/es/curry.js' },
    ],
    '../node_modules/ramda/es/internal/_makeFlat.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = _makeFlat

        var _isArrayLike2 = _interopRequireDefault(
          require('./_isArrayLike.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * `_makeFlat` is a helper function that returns a one-level or fully recursive
         * function based on the flag passed in.
         *
         * @private
         */
        function _makeFlat(recursive) {
          return function flatt(list) {
            var value, jlen, j
            var result = []
            var idx = 0
            var ilen = list.length

            while (idx < ilen) {
              if ((0, _isArrayLike2.default)(list[idx])) {
                value = recursive ? flatt(list[idx]) : list[idx]
                j = 0
                jlen = value.length

                while (j < jlen) {
                  result[result.length] = value[j]
                  j += 1
                }
              } else {
                result[result.length] = list[idx]
              }

              idx += 1
            }

            return result
          }
        }
      },
      {
        './_isArrayLike.js':
          '../node_modules/ramda/es/internal/_isArrayLike.js',
      },
    ],
    '../node_modules/ramda/es/internal/_forceReduced.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = _forceReduced

        function _forceReduced(x) {
          return {
            '@@transducer/value': x,
            '@@transducer/reduced': true,
          }
        }
      },
      {},
    ],
    '../node_modules/ramda/es/internal/_flatCat.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _forceReduced2 = _interopRequireDefault(
          require('./_forceReduced.js'),
        )

        var _isArrayLike2 = _interopRequireDefault(
          require('./_isArrayLike.js'),
        )

        var _reduce2 = _interopRequireDefault(require('./_reduce.js'))

        var _xfBase2 = _interopRequireDefault(require('./_xfBase.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        var preservingReduced = function(xf) {
          return {
            '@@transducer/init': _xfBase2.default.init,
            '@@transducer/result': function(result) {
              return xf['@@transducer/result'](result)
            },
            '@@transducer/step': function(result, input) {
              var ret = xf['@@transducer/step'](result, input)
              return ret['@@transducer/reduced']
                ? (0, _forceReduced2.default)(ret)
                : ret
            },
          }
        }

        var _flatCat = function _xcat(xf) {
          var rxf = preservingReduced(xf)
          return {
            '@@transducer/init': _xfBase2.default.init,
            '@@transducer/result': function(result) {
              return rxf['@@transducer/result'](result)
            },
            '@@transducer/step': function(result, input) {
              return !(0, _isArrayLike2.default)(input)
                ? (0, _reduce2.default)(rxf, result, [input])
                : (0, _reduce2.default)(rxf, result, input)
            },
          }
        }

        var _default = _flatCat
        exports.default = _default
      },
      {
        './_forceReduced.js':
          '../node_modules/ramda/es/internal/_forceReduced.js',
        './_isArrayLike.js':
          '../node_modules/ramda/es/internal/_isArrayLike.js',
        './_reduce.js': '../node_modules/ramda/es/internal/_reduce.js',
        './_xfBase.js': '../node_modules/ramda/es/internal/_xfBase.js',
      },
    ],
    '../node_modules/ramda/es/internal/_xchain.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(require('./_curry2.js'))

        var _flatCat2 = _interopRequireDefault(require('./_flatCat.js'))

        var _map = _interopRequireDefault(require('../map.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        var _xchain =
          /*#__PURE__*/
          (0, _curry.default)(function _xchain(f, xf) {
            return (0, _map.default)(f, (0, _flatCat2.default)(xf))
          })

        var _default = _xchain
        exports.default = _default
      },
      {
        './_curry2.js': '../node_modules/ramda/es/internal/_curry2.js',
        './_flatCat.js': '../node_modules/ramda/es/internal/_flatCat.js',
        '../map.js': '../node_modules/ramda/es/map.js',
      },
    ],
    '../node_modules/ramda/es/chain.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        var _dispatchable2 = _interopRequireDefault(
          require('./internal/_dispatchable.js'),
        )

        var _makeFlat2 = _interopRequireDefault(
          require('./internal/_makeFlat.js'),
        )

        var _xchain2 = _interopRequireDefault(
          require('./internal/_xchain.js'),
        )

        var _map = _interopRequireDefault(require('./map.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * `chain` maps a function over a list and concatenates the results. `chain`
         * is also known as `flatMap` in some libraries.
         *
         * Dispatches to the `chain` method of the second argument, if present,
         * according to the [FantasyLand Chain spec](https://github.com/fantasyland/fantasy-land#chain).
         *
         * If second argument is a function, `chain(f, g)(x)` is equivalent to `f(g(x), x)`.
         *
         * Acts as a transducer if a transformer is given in list position.
         *
         * @func
         * @memberOf R
         * @since v0.3.0
         * @category List
         * @sig Chain m => (a -> m b) -> m a -> m b
         * @param {Function} fn The function to map with
         * @param {Array} list The list to map over
         * @return {Array} The result of flat-mapping `list` with `fn`
         * @example
         *
         *      const duplicate = n => [n, n];
         *      R.chain(duplicate, [1, 2, 3]); //=> [1, 1, 2, 2, 3, 3]
         *
         *      R.chain(R.append, R.head)([1, 2, 3]); //=> [1, 2, 3, 1]
         */
        var chain =
          /*#__PURE__*/
          (0, _curry.default)(
            /*#__PURE__*/
            (0, _dispatchable2.default)(
              ['fantasy-land/chain', 'chain'],
              _xchain2.default,
              function chain(fn, monad) {
                if (typeof monad === 'function') {
                  return function(x) {
                    return fn(monad(x))(x)
                  }
                }

                return (0, _makeFlat2.default)(false)(
                  (0, _map.default)(fn, monad),
                )
              },
            ),
          )
        var _default = chain
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
        './internal/_dispatchable.js':
          '../node_modules/ramda/es/internal/_dispatchable.js',
        './internal/_makeFlat.js':
          '../node_modules/ramda/es/internal/_makeFlat.js',
        './internal/_xchain.js':
          '../node_modules/ramda/es/internal/_xchain.js',
        './map.js': '../node_modules/ramda/es/map.js',
      },
    ],
    '../node_modules/ramda/es/clamp.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry3.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Restricts a number to be within a range.
         *
         * Also works for other ordered types such as Strings and Dates.
         *
         * @func
         * @memberOf R
         * @since v0.20.0
         * @category Relation
         * @sig Ord a => a -> a -> a -> a
         * @param {Number} minimum The lower limit of the clamp (inclusive)
         * @param {Number} maximum The upper limit of the clamp (inclusive)
         * @param {Number} value Value to be clamped
         * @return {Number} Returns `minimum` when `val < minimum`, `maximum` when `val > maximum`, returns `val` otherwise
         * @example
         *
         *      R.clamp(1, 10, -5) // => 1
         *      R.clamp(1, 10, 15) // => 10
         *      R.clamp(1, 10, 4)  // => 4
         */
        var clamp =
          /*#__PURE__*/
          (0, _curry.default)(function clamp(min, max, value) {
            if (min > max) {
              throw new Error(
                'min must not be greater than max in clamp(min, max, value)',
              )
            }

            return value < min ? min : value > max ? max : value
          })
        var _default = clamp
        exports.default = _default
      },
      {
        './internal/_curry3.js':
          '../node_modules/ramda/es/internal/_curry3.js',
      },
    ],
    '../node_modules/ramda/es/internal/_cloneRegExp.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = _cloneRegExp

        function _cloneRegExp(pattern) {
          return new RegExp(
            pattern.source,
            (pattern.global ? 'g' : '') +
              (pattern.ignoreCase ? 'i' : '') +
              (pattern.multiline ? 'm' : '') +
              (pattern.sticky ? 'y' : '') +
              (pattern.unicode ? 'u' : ''),
          )
        }
      },
      {},
    ],
    '../node_modules/ramda/es/type.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry1.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Gives a single-word string description of the (native) type of a value,
         * returning such answers as 'Object', 'Number', 'Array', or 'Null'. Does not
         * attempt to distinguish user Object types any further, reporting them all as
         * 'Object'.
         *
         * @func
         * @memberOf R
         * @since v0.8.0
         * @category Type
         * @sig (* -> {*}) -> String
         * @param {*} val The value to test
         * @return {String}
         * @example
         *
         *      R.type({}); //=> "Object"
         *      R.type(1); //=> "Number"
         *      R.type(false); //=> "Boolean"
         *      R.type('s'); //=> "String"
         *      R.type(null); //=> "Null"
         *      R.type([]); //=> "Array"
         *      R.type(/[A-z]/); //=> "RegExp"
         *      R.type(() => {}); //=> "Function"
         *      R.type(undefined); //=> "Undefined"
         */
        var type =
          /*#__PURE__*/
          (0, _curry.default)(function type(val) {
            return val === null
              ? 'Null'
              : val === undefined
              ? 'Undefined'
              : Object.prototype.toString.call(val).slice(8, -1)
          })
        var _default = type
        exports.default = _default
      },
      {
        './internal/_curry1.js':
          '../node_modules/ramda/es/internal/_curry1.js',
      },
    ],
    '../node_modules/ramda/es/internal/_clone.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = _clone

        var _cloneRegExp2 = _interopRequireDefault(
          require('./_cloneRegExp.js'),
        )

        var _type = _interopRequireDefault(require('../type.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Copies an object.
         *
         * @private
         * @param {*} value The value to be copied
         * @param {Array} refFrom Array containing the source references
         * @param {Array} refTo Array containing the copied source references
         * @param {Boolean} deep Whether or not to perform deep cloning.
         * @return {*} The copied value.
         */
        function _clone(value, refFrom, refTo, deep) {
          var copy = function copy(copiedValue) {
            var len = refFrom.length
            var idx = 0

            while (idx < len) {
              if (value === refFrom[idx]) {
                return refTo[idx]
              }

              idx += 1
            }

            refFrom[idx + 1] = value
            refTo[idx + 1] = copiedValue

            for (var key in value) {
              copiedValue[key] = deep
                ? _clone(value[key], refFrom, refTo, true)
                : value[key]
            }

            return copiedValue
          }

          switch ((0, _type.default)(value)) {
            case 'Object':
              return copy({})

            case 'Array':
              return copy([])

            case 'Date':
              return new Date(value.valueOf())

            case 'RegExp':
              return (0, _cloneRegExp2.default)(value)

            default:
              return value
          }
        }
      },
      {
        './_cloneRegExp.js':
          '../node_modules/ramda/es/internal/_cloneRegExp.js',
        '../type.js': '../node_modules/ramda/es/type.js',
      },
    ],
    '../node_modules/ramda/es/clone.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _clone2 = _interopRequireDefault(
          require('./internal/_clone.js'),
        )

        var _curry = _interopRequireDefault(
          require('./internal/_curry1.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Creates a deep copy of the value which may contain (nested) `Array`s and
         * `Object`s, `Number`s, `String`s, `Boolean`s and `Date`s. `Function`s are
         * assigned by reference rather than copied
         *
         * Dispatches to a `clone` method if present.
         *
         * @func
         * @memberOf R
         * @since v0.1.0
         * @category Object
         * @sig {*} -> {*}
         * @param {*} value The object or array to clone
         * @return {*} A deeply cloned copy of `val`
         * @example
         *
         *      const objects = [{}, {}, {}];
         *      const objectsClone = R.clone(objects);
         *      objects === objectsClone; //=> false
         *      objects[0] === objectsClone[0]; //=> false
         */
        var clone =
          /*#__PURE__*/
          (0, _curry.default)(function clone(value) {
            return value != null && typeof value.clone === 'function'
              ? value.clone()
              : (0, _clone2.default)(value, [], [], true)
          })
        var _default = clone
        exports.default = _default
      },
      {
        './internal/_clone.js':
          '../node_modules/ramda/es/internal/_clone.js',
        './internal/_curry1.js':
          '../node_modules/ramda/es/internal/_curry1.js',
      },
    ],
    '../node_modules/ramda/es/comparator.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry1.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Makes a comparator function out of a function that reports whether the first
         * element is less than the second.
         *
         * @func
         * @memberOf R
         * @since v0.1.0
         * @category Function
         * @sig ((a, b) -> Boolean) -> ((a, b) -> Number)
         * @param {Function} pred A predicate function of arity two which will return `true` if the first argument
         * is less than the second, `false` otherwise
         * @return {Function} A Function :: a -> b -> Int that returns `-1` if a < b, `1` if b < a, otherwise `0`
         * @example
         *
         *      const byAge = R.comparator((a, b) => a.age < b.age);
         *      const people = [
         *        { name: 'Emma', age: 70 },
         *        { name: 'Peter', age: 78 },
         *        { name: 'Mikhail', age: 62 },
         *      ];
         *      const peopleByIncreasingAge = R.sort(byAge, people);
         *        //=> [{ name: 'Mikhail', age: 62 },{ name: 'Emma', age: 70 }, { name: 'Peter', age: 78 }]
         */
        var comparator =
          /*#__PURE__*/
          (0, _curry.default)(function comparator(pred) {
            return function(a, b) {
              return pred(a, b) ? -1 : pred(b, a) ? 1 : 0
            }
          })
        var _default = comparator
        exports.default = _default
      },
      {
        './internal/_curry1.js':
          '../node_modules/ramda/es/internal/_curry1.js',
      },
    ],
    '../node_modules/ramda/es/not.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry1.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * A function that returns the `!` of its argument. It will return `true` when
         * passed false-y value, and `false` when passed a truth-y one.
         *
         * @func
         * @memberOf R
         * @since v0.1.0
         * @category Logic
         * @sig * -> Boolean
         * @param {*} a any value
         * @return {Boolean} the logical inverse of passed argument.
         * @see R.complement
         * @example
         *
         *      R.not(true); //=> false
         *      R.not(false); //=> true
         *      R.not(0); //=> true
         *      R.not(1); //=> false
         */
        var not =
          /*#__PURE__*/
          (0, _curry.default)(function not(a) {
            return !a
          })
        var _default = not
        exports.default = _default
      },
      {
        './internal/_curry1.js':
          '../node_modules/ramda/es/internal/_curry1.js',
      },
    ],
    '../node_modules/ramda/es/complement.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _lift = _interopRequireDefault(require('./lift.js'))

        var _not = _interopRequireDefault(require('./not.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Takes a function `f` and returns a function `g` such that if called with the same arguments
         * when `f` returns a "truthy" value, `g` returns `false` and when `f` returns a "falsy" value `g` returns `true`.
         *
         * `R.complement` may be applied to any functor
         *
         * @func
         * @memberOf R
         * @since v0.12.0
         * @category Logic
         * @sig (*... -> *) -> (*... -> Boolean)
         * @param {Function} f
         * @return {Function}
         * @see R.not
         * @example
         *
         *      const isNotNil = R.complement(R.isNil);
         *      isNil(null); //=> true
         *      isNotNil(null); //=> false
         *      isNil(7); //=> false
         *      isNotNil(7); //=> true
         */
        var complement =
          /*#__PURE__*/
          (0, _lift.default)(_not.default)
        var _default = complement
        exports.default = _default
      },
      {
        './lift.js': '../node_modules/ramda/es/lift.js',
        './not.js': '../node_modules/ramda/es/not.js',
      },
    ],
    '../node_modules/ramda/es/internal/_pipe.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = _pipe

        function _pipe(f, g) {
          return function() {
            return g.call(this, f.apply(this, arguments))
          }
        }
      },
      {},
    ],
    '../node_modules/ramda/es/internal/_checkForMethod.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = _checkForMethod

        var _isArray2 = _interopRequireDefault(require('./_isArray.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * This checks whether a function has a [methodname] function. If it isn't an
         * array it will execute that function otherwise it will default to the ramda
         * implementation.
         *
         * @private
         * @param {Function} fn ramda implemtation
         * @param {String} methodname property to check for a custom implementation
         * @return {Object} Whatever the return value of the method is.
         */
        function _checkForMethod(methodname, fn) {
          return function() {
            var length = arguments.length

            if (length === 0) {
              return fn()
            }

            var obj = arguments[length - 1]
            return (0, _isArray2.default)(obj) ||
              typeof obj[methodname] !== 'function'
              ? fn.apply(this, arguments)
              : obj[methodname].apply(
                  obj,
                  Array.prototype.slice.call(arguments, 0, length - 1),
                )
          }
        }
      },
      { './_isArray.js': '../node_modules/ramda/es/internal/_isArray.js' },
    ],
    '../node_modules/ramda/es/slice.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _checkForMethod2 = _interopRequireDefault(
          require('./internal/_checkForMethod.js'),
        )

        var _curry = _interopRequireDefault(
          require('./internal/_curry3.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns the elements of the given list or string (or object with a `slice`
         * method) from `fromIndex` (inclusive) to `toIndex` (exclusive).
         *
         * Dispatches to the `slice` method of the third argument, if present.
         *
         * @func
         * @memberOf R
         * @since v0.1.4
         * @category List
         * @sig Number -> Number -> [a] -> [a]
         * @sig Number -> Number -> String -> String
         * @param {Number} fromIndex The start index (inclusive).
         * @param {Number} toIndex The end index (exclusive).
         * @param {*} list
         * @return {*}
         * @example
         *
         *      R.slice(1, 3, ['a', 'b', 'c', 'd']);        //=> ['b', 'c']
         *      R.slice(1, Infinity, ['a', 'b', 'c', 'd']); //=> ['b', 'c', 'd']
         *      R.slice(0, -1, ['a', 'b', 'c', 'd']);       //=> ['a', 'b', 'c']
         *      R.slice(-3, -1, ['a', 'b', 'c', 'd']);      //=> ['b', 'c']
         *      R.slice(0, 3, 'ramda');                     //=> 'ram'
         */
        var slice =
          /*#__PURE__*/
          (0, _curry.default)(
            /*#__PURE__*/
            (0, _checkForMethod2.default)('slice', function slice(
              fromIndex,
              toIndex,
              list,
            ) {
              return Array.prototype.slice.call(list, fromIndex, toIndex)
            }),
          )
        var _default = slice
        exports.default = _default
      },
      {
        './internal/_checkForMethod.js':
          '../node_modules/ramda/es/internal/_checkForMethod.js',
        './internal/_curry3.js':
          '../node_modules/ramda/es/internal/_curry3.js',
      },
    ],
    '../node_modules/ramda/es/tail.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _checkForMethod2 = _interopRequireDefault(
          require('./internal/_checkForMethod.js'),
        )

        var _curry = _interopRequireDefault(
          require('./internal/_curry1.js'),
        )

        var _slice = _interopRequireDefault(require('./slice.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns all but the first element of the given list or string (or object
         * with a `tail` method).
         *
         * Dispatches to the `slice` method of the first argument, if present.
         *
         * @func
         * @memberOf R
         * @since v0.1.0
         * @category List
         * @sig [a] -> [a]
         * @sig String -> String
         * @param {*} list
         * @return {*}
         * @see R.head, R.init, R.last
         * @example
         *
         *      R.tail([1, 2, 3]);  //=> [2, 3]
         *      R.tail([1, 2]);     //=> [2]
         *      R.tail([1]);        //=> []
         *      R.tail([]);         //=> []
         *
         *      R.tail('abc');  //=> 'bc'
         *      R.tail('ab');   //=> 'b'
         *      R.tail('a');    //=> ''
         *      R.tail('');     //=> ''
         */
        var tail =
          /*#__PURE__*/
          (0, _curry.default)(
            /*#__PURE__*/
            (0, _checkForMethod2.default)(
              'tail',
              /*#__PURE__*/
              (0, _slice.default)(1, Infinity),
            ),
          )
        var _default = tail
        exports.default = _default
      },
      {
        './internal/_checkForMethod.js':
          '../node_modules/ramda/es/internal/_checkForMethod.js',
        './internal/_curry1.js':
          '../node_modules/ramda/es/internal/_curry1.js',
        './slice.js': '../node_modules/ramda/es/slice.js',
      },
    ],
    '../node_modules/ramda/es/pipe.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = pipe

        var _arity2 = _interopRequireDefault(
          require('./internal/_arity.js'),
        )

        var _pipe2 = _interopRequireDefault(require('./internal/_pipe.js'))

        var _reduce = _interopRequireDefault(require('./reduce.js'))

        var _tail = _interopRequireDefault(require('./tail.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Performs left-to-right function composition. The leftmost function may have
         * any arity; the remaining functions must be unary.
         *
         * In some libraries this function is named `sequence`.
         *
         * **Note:** The result of pipe is not automatically curried.
         *
         * @func
         * @memberOf R
         * @since v0.1.0
         * @category Function
         * @sig (((a, b, ..., n) -> o), (o -> p), ..., (x -> y), (y -> z)) -> ((a, b, ..., n) -> z)
         * @param {...Function} functions
         * @return {Function}
         * @see R.compose
         * @example
         *
         *      const f = R.pipe(Math.pow, R.negate, R.inc);
         *
         *      f(3, 4); // -(3^4) + 1
         * @symb R.pipe(f, g, h)(a, b) = h(g(f(a, b)))
         */
        function pipe() {
          if (arguments.length === 0) {
            throw new Error('pipe requires at least one argument')
          }

          return (0, _arity2.default)(
            arguments[0].length,
            (0, _reduce.default)(
              _pipe2.default,
              arguments[0],
              (0, _tail.default)(arguments),
            ),
          )
        }
      },
      {
        './internal/_arity.js':
          '../node_modules/ramda/es/internal/_arity.js',
        './internal/_pipe.js':
          '../node_modules/ramda/es/internal/_pipe.js',
        './reduce.js': '../node_modules/ramda/es/reduce.js',
        './tail.js': '../node_modules/ramda/es/tail.js',
      },
    ],
    '../node_modules/ramda/es/reverse.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry1.js'),
        )

        var _isString2 = _interopRequireDefault(
          require('./internal/_isString.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns a new list or string with the elements or characters in reverse
         * order.
         *
         * @func
         * @memberOf R
         * @since v0.1.0
         * @category List
         * @sig [a] -> [a]
         * @sig String -> String
         * @param {Array|String} list
         * @return {Array|String}
         * @example
         *
         *      R.reverse([1, 2, 3]);  //=> [3, 2, 1]
         *      R.reverse([1, 2]);     //=> [2, 1]
         *      R.reverse([1]);        //=> [1]
         *      R.reverse([]);         //=> []
         *
         *      R.reverse('abc');      //=> 'cba'
         *      R.reverse('ab');       //=> 'ba'
         *      R.reverse('a');        //=> 'a'
         *      R.reverse('');         //=> ''
         */
        var reverse =
          /*#__PURE__*/
          (0, _curry.default)(function reverse(list) {
            return (0, _isString2.default)(list)
              ? list
                  .split('')
                  .reverse()
                  .join('')
              : Array.prototype.slice.call(list, 0).reverse()
          })
        var _default = reverse
        exports.default = _default
      },
      {
        './internal/_curry1.js':
          '../node_modules/ramda/es/internal/_curry1.js',
        './internal/_isString.js':
          '../node_modules/ramda/es/internal/_isString.js',
      },
    ],
    '../node_modules/ramda/es/compose.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = compose

        var _pipe = _interopRequireDefault(require('./pipe.js'))

        var _reverse = _interopRequireDefault(require('./reverse.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Performs right-to-left function composition. The rightmost function may have
         * any arity; the remaining functions must be unary.
         *
         * **Note:** The result of compose is not automatically curried.
         *
         * @func
         * @memberOf R
         * @since v0.1.0
         * @category Function
         * @sig ((y -> z), (x -> y), ..., (o -> p), ((a, b, ..., n) -> o)) -> ((a, b, ..., n) -> z)
         * @param {...Function} ...functions The functions to compose
         * @return {Function}
         * @see R.pipe
         * @example
         *
         *      const classyGreeting = (firstName, lastName) => "The name's " + lastName + ", " + firstName + " " + lastName
         *      const yellGreeting = R.compose(R.toUpper, classyGreeting);
         *      yellGreeting('James', 'Bond'); //=> "THE NAME'S BOND, JAMES BOND"
         *
         *      R.compose(Math.abs, R.add(1), R.multiply(2))(-4) //=> 7
         *
         * @symb R.compose(f, g, h)(a, b) = f(g(h(a, b)))
         */
        function compose() {
          if (arguments.length === 0) {
            throw new Error('compose requires at least one argument')
          }

          return _pipe.default.apply(
            this,
            (0, _reverse.default)(arguments),
          )
        }
      },
      {
        './pipe.js': '../node_modules/ramda/es/pipe.js',
        './reverse.js': '../node_modules/ramda/es/reverse.js',
      },
    ],
    '../node_modules/ramda/es/composeK.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = composeK

        var _chain = _interopRequireDefault(require('./chain.js'))

        var _compose = _interopRequireDefault(require('./compose.js'))

        var _map = _interopRequireDefault(require('./map.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns the right-to-left Kleisli composition of the provided functions,
         * each of which must return a value of a type supported by [`chain`](#chain).
         *
         * `R.composeK(h, g, f)` is equivalent to `R.compose(R.chain(h), R.chain(g), f)`.
         *
         * @func
         * @memberOf R
         * @since v0.16.0
         * @category Function
         * @sig Chain m => ((y -> m z), (x -> m y), ..., (a -> m b)) -> (a -> m z)
         * @param {...Function} ...functions The functions to compose
         * @return {Function}
         * @see R.pipeK
         * @deprecated since v0.26.0
         * @example
         *
         *       //  get :: String -> Object -> Maybe *
         *       const get = R.curry((propName, obj) => Maybe(obj[propName]))
         *
         *       //  getStateCode :: Maybe String -> Maybe String
         *       const getStateCode = R.composeK(
         *         R.compose(Maybe.of, R.toUpper),
         *         get('state'),
         *         get('address'),
         *         get('user'),
         *       );
         *       getStateCode({"user":{"address":{"state":"ny"}}}); //=> Maybe.Just("NY")
         *       getStateCode({}); //=> Maybe.Nothing()
         * @symb R.composeK(f, g, h)(a) = R.chain(f, R.chain(g, h(a)))
         */
        function composeK() {
          if (arguments.length === 0) {
            throw new Error('composeK requires at least one argument')
          }

          var init = Array.prototype.slice.call(arguments)
          var last = init.pop()
          return (0, _compose.default)(
            _compose.default.apply(
              this,
              (0, _map.default)(_chain.default, init),
            ),
            last,
          )
        }
      },
      {
        './chain.js': '../node_modules/ramda/es/chain.js',
        './compose.js': '../node_modules/ramda/es/compose.js',
        './map.js': '../node_modules/ramda/es/map.js',
      },
    ],
    '../node_modules/ramda/es/internal/_pipeP.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = _pipeP

        function _pipeP(f, g) {
          return function() {
            var ctx = this
            return f.apply(ctx, arguments).then(function(x) {
              return g.call(ctx, x)
            })
          }
        }
      },
      {},
    ],
    '../node_modules/ramda/es/pipeP.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = pipeP

        var _arity2 = _interopRequireDefault(
          require('./internal/_arity.js'),
        )

        var _pipeP2 = _interopRequireDefault(
          require('./internal/_pipeP.js'),
        )

        var _reduce = _interopRequireDefault(require('./reduce.js'))

        var _tail = _interopRequireDefault(require('./tail.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Performs left-to-right composition of one or more Promise-returning
         * functions. The leftmost function may have any arity; the remaining functions
         * must be unary.
         *
         * @func
         * @memberOf R
         * @since v0.10.0
         * @category Function
         * @sig ((a -> Promise b), (b -> Promise c), ..., (y -> Promise z)) -> (a -> Promise z)
         * @param {...Function} functions
         * @return {Function}
         * @see R.composeP
         * @deprecated since v0.26.0
         * @example
         *
         *      //  followersForUser :: String -> Promise [User]
         *      const followersForUser = R.pipeP(db.getUserById, db.getFollowers);
         */
        function pipeP() {
          if (arguments.length === 0) {
            throw new Error('pipeP requires at least one argument')
          }

          return (0, _arity2.default)(
            arguments[0].length,
            (0, _reduce.default)(
              _pipeP2.default,
              arguments[0],
              (0, _tail.default)(arguments),
            ),
          )
        }
      },
      {
        './internal/_arity.js':
          '../node_modules/ramda/es/internal/_arity.js',
        './internal/_pipeP.js':
          '../node_modules/ramda/es/internal/_pipeP.js',
        './reduce.js': '../node_modules/ramda/es/reduce.js',
        './tail.js': '../node_modules/ramda/es/tail.js',
      },
    ],
    '../node_modules/ramda/es/composeP.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = composeP

        var _pipeP = _interopRequireDefault(require('./pipeP.js'))

        var _reverse = _interopRequireDefault(require('./reverse.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Performs right-to-left composition of one or more Promise-returning
         * functions. The rightmost function may have any arity; the remaining
         * functions must be unary.
         *
         * @func
         * @memberOf R
         * @since v0.10.0
         * @category Function
         * @sig ((y -> Promise z), (x -> Promise y), ..., (a -> Promise b)) -> (a -> Promise z)
         * @param {...Function} functions The functions to compose
         * @return {Function}
         * @see R.pipeP
         * @deprecated since v0.26.0
         * @example
         *
         *      const db = {
         *        users: {
         *          JOE: {
         *            name: 'Joe',
         *            followers: ['STEVE', 'SUZY']
         *          }
         *        }
         *      }
         *
         *      // We'll pretend to do a db lookup which returns a promise
         *      const lookupUser = (userId) => Promise.resolve(db.users[userId])
         *      const lookupFollowers = (user) => Promise.resolve(user.followers)
         *      lookupUser('JOE').then(lookupFollowers)
         *
         *      //  followersForUser :: String -> Promise [UserId]
         *      const followersForUser = R.composeP(lookupFollowers, lookupUser);
         *      followersForUser('JOE').then(followers => console.log('Followers:', followers))
         *      // Followers: ["STEVE","SUZY"]
         */
        function composeP() {
          if (arguments.length === 0) {
            throw new Error('composeP requires at least one argument')
          }

          return _pipeP.default.apply(
            this,
            (0, _reverse.default)(arguments),
          )
        }
      },
      {
        './pipeP.js': '../node_modules/ramda/es/pipeP.js',
        './reverse.js': '../node_modules/ramda/es/reverse.js',
      },
    ],
    '../node_modules/ramda/es/nth.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        var _isString2 = _interopRequireDefault(
          require('./internal/_isString.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns the nth element of the given list or string. If n is negative the
         * element at index length + n is returned.
         *
         * @func
         * @memberOf R
         * @since v0.1.0
         * @category List
         * @sig Number -> [a] -> a | Undefined
         * @sig Number -> String -> String
         * @param {Number} offset
         * @param {*} list
         * @return {*}
         * @example
         *
         *      const list = ['foo', 'bar', 'baz', 'quux'];
         *      R.nth(1, list); //=> 'bar'
         *      R.nth(-1, list); //=> 'quux'
         *      R.nth(-99, list); //=> undefined
         *
         *      R.nth(2, 'abc'); //=> 'c'
         *      R.nth(3, 'abc'); //=> ''
         * @symb R.nth(-1, [a, b, c]) = c
         * @symb R.nth(0, [a, b, c]) = a
         * @symb R.nth(1, [a, b, c]) = b
         */
        var nth =
          /*#__PURE__*/
          (0, _curry.default)(function nth(offset, list) {
            var idx = offset < 0 ? list.length + offset : offset
            return (0, _isString2.default)(list)
              ? list.charAt(idx)
              : list[idx]
          })
        var _default = nth
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
        './internal/_isString.js':
          '../node_modules/ramda/es/internal/_isString.js',
      },
    ],
    '../node_modules/ramda/es/head.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _nth = _interopRequireDefault(require('./nth.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns the first element of the given list or string. In some libraries
         * this function is named `first`.
         *
         * @func
         * @memberOf R
         * @since v0.1.0
         * @category List
         * @sig [a] -> a | Undefined
         * @sig String -> String
         * @param {Array|String} list
         * @return {*}
         * @see R.tail, R.init, R.last
         * @example
         *
         *      R.head(['fi', 'fo', 'fum']); //=> 'fi'
         *      R.head([]); //=> undefined
         *
         *      R.head('abc'); //=> 'a'
         *      R.head(''); //=> ''
         */
        var head =
          /*#__PURE__*/
          (0, _nth.default)(0)
        var _default = head
        exports.default = _default
      },
      { './nth.js': '../node_modules/ramda/es/nth.js' },
    ],
    '../node_modules/ramda/es/internal/_identity.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = _identity

        function _identity(x) {
          return x
        }
      },
      {},
    ],
    '../node_modules/ramda/es/identity.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry1.js'),
        )

        var _identity2 = _interopRequireDefault(
          require('./internal/_identity.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * A function that does nothing but return the parameter supplied to it. Good
         * as a default or placeholder function.
         *
         * @func
         * @memberOf R
         * @since v0.1.0
         * @category Function
         * @sig a -> a
         * @param {*} x The value to return.
         * @return {*} The input value, `x`.
         * @example
         *
         *      R.identity(1); //=> 1
         *
         *      const obj = {};
         *      R.identity(obj) === obj; //=> true
         * @symb R.identity(a) = a
         */
        var identity =
          /*#__PURE__*/
          (0, _curry.default)(_identity2.default)
        var _default = identity
        exports.default = _default
      },
      {
        './internal/_curry1.js':
          '../node_modules/ramda/es/internal/_curry1.js',
        './internal/_identity.js':
          '../node_modules/ramda/es/internal/_identity.js',
      },
    ],
    '../node_modules/ramda/es/pipeWith.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _arity2 = _interopRequireDefault(
          require('./internal/_arity.js'),
        )

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        var _head = _interopRequireDefault(require('./head.js'))

        var _reduce2 = _interopRequireDefault(
          require('./internal/_reduce.js'),
        )

        var _tail = _interopRequireDefault(require('./tail.js'))

        var _identity = _interopRequireDefault(require('./identity.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Performs left-to-right function composition using transforming function. The leftmost function may have
         * any arity; the remaining functions must be unary.
         *
         * **Note:** The result of pipeWith is not automatically curried.
         *
         * @func
         * @memberOf R
         * @category Function
         * @sig ((* -> *), [((a, b, ..., n) -> o), (o -> p), ..., (x -> y), (y -> z)]) -> ((a, b, ..., n) -> z)
         * @param {...Function} functions
         * @return {Function}
         * @see R.composeWith, R.pipe
         * @example
         *
         *      const pipeWhileNotNil = R.pipeWith((f, res) => R.isNil(res) ? res : f(res));
         *      const f = pipeWhileNotNil([Math.pow, R.negate, R.inc])
         *
         *      f(3, 4); // -(3^4) + 1
         * @symb R.pipeWith(f)([g, h, i])(...args) = f(i, f(h, f(g, ...args)))
         */
        var pipeWith =
          /*#__PURE__*/
          (0, _curry.default)(function pipeWith(xf, list) {
            if (list.length <= 0) {
              return _identity.default
            }

            var headList = (0, _head.default)(list)
            var tailList = (0, _tail.default)(list)
            return (0, _arity2.default)(headList.length, function() {
              return (0, _reduce2.default)(
                function(result, f) {
                  return xf.call(this, f, result)
                },
                headList.apply(this, arguments),
                tailList,
              )
            })
          })
        var _default = pipeWith
        exports.default = _default
      },
      {
        './internal/_arity.js':
          '../node_modules/ramda/es/internal/_arity.js',
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
        './head.js': '../node_modules/ramda/es/head.js',
        './internal/_reduce.js':
          '../node_modules/ramda/es/internal/_reduce.js',
        './tail.js': '../node_modules/ramda/es/tail.js',
        './identity.js': '../node_modules/ramda/es/identity.js',
      },
    ],
    '../node_modules/ramda/es/composeWith.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        var _pipeWith = _interopRequireDefault(require('./pipeWith.js'))

        var _reverse = _interopRequireDefault(require('./reverse.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Performs right-to-left function composition using transforming function. The rightmost function may have
         * any arity; the remaining functions must be unary.
         *
         * **Note:** The result of compose is not automatically curried.
         *
         * @func
         * @memberOf R
         * @category Function
         * @sig ((* -> *), [(y -> z), (x -> y), ..., (o -> p), ((a, b, ..., n) -> o)]) -> ((a, b, ..., n) -> z)
         * @param {...Function} ...functions The functions to compose
         * @return {Function}
         * @see R.compose, R.pipeWith
         * @example
         *
         *      const composeWhileNotNil = R.composeWith((f, res) => R.isNil(res) ? res : f(res));
         *
         *      composeWhileNotNil([R.inc, R.prop('age')])({age: 1}) //=> 2
         *      composeWhileNotNil([R.inc, R.prop('age')])({}) //=> undefined
         *
         * @symb R.composeWith(f)([g, h, i])(...args) = f(g, f(h, f(i, ...args)))
         */
        var composeWith =
          /*#__PURE__*/
          (0, _curry.default)(function composeWith(xf, list) {
            return _pipeWith.default.apply(this, [
              xf,
              (0, _reverse.default)(list),
            ])
          })
        var _default = composeWith
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
        './pipeWith.js': '../node_modules/ramda/es/pipeWith.js',
        './reverse.js': '../node_modules/ramda/es/reverse.js',
      },
    ],
    '../node_modules/ramda/es/internal/_arrayFromIterator.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = _arrayFromIterator

        function _arrayFromIterator(iter) {
          var list = []
          var next

          while (!(next = iter.next()).done) {
            list.push(next.value)
          }

          return list
        }
      },
      {},
    ],
    '../node_modules/ramda/es/internal/_includesWith.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = _includesWith

        function _includesWith(pred, x, list) {
          var idx = 0
          var len = list.length

          while (idx < len) {
            if (pred(x, list[idx])) {
              return true
            }

            idx += 1
          }

          return false
        }
      },
      {},
    ],
    '../node_modules/ramda/es/internal/_functionName.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = _functionName

        function _functionName(f) {
          // String(x => x) evaluates to "x => x", so the pattern may not match.
          var match = String(f).match(/^function (\w*)/)
          return match == null ? '' : match[1]
        }
      },
      {},
    ],
    '../node_modules/ramda/es/internal/_objectIs.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        // Based on https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
        function _objectIs(a, b) {
          // SameValue algorithm
          if (a === b) {
            // Steps 1-5, 7-10
            // Steps 6.b-6.e: +0 != -0
            return a !== 0 || 1 / a === 1 / b
          } else {
            // Step 6.a: NaN == NaN
            return a !== a && b !== b
          }
        }

        var _default =
          typeof Object.is === 'function' ? Object.is : _objectIs

        exports.default = _default
      },
      {},
    ],
    '../node_modules/ramda/es/internal/_equals.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = _equals

        var _arrayFromIterator2 = _interopRequireDefault(
          require('./_arrayFromIterator.js'),
        )

        var _includesWith2 = _interopRequireDefault(
          require('./_includesWith.js'),
        )

        var _functionName2 = _interopRequireDefault(
          require('./_functionName.js'),
        )

        var _has2 = _interopRequireDefault(require('./_has.js'))

        var _objectIs2 = _interopRequireDefault(require('./_objectIs.js'))

        var _keys = _interopRequireDefault(require('../keys.js'))

        var _type = _interopRequireDefault(require('../type.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * private _uniqContentEquals function.
         * That function is checking equality of 2 iterator contents with 2 assumptions
         * - iterators lengths are the same
         * - iterators values are unique
         *
         * false-positive result will be returned for comparision of, e.g.
         * - [1,2,3] and [1,2,3,4]
         * - [1,1,1] and [1,2,3]
         * */
        function _uniqContentEquals(aIterator, bIterator, stackA, stackB) {
          var a = (0, _arrayFromIterator2.default)(aIterator)
          var b = (0, _arrayFromIterator2.default)(bIterator)

          function eq(_a, _b) {
            return _equals(_a, _b, stackA.slice(), stackB.slice())
          } // if *a* array contains any element that is not included in *b*

          return !(0, _includesWith2.default)(
            function(b, aItem) {
              return !(0, _includesWith2.default)(eq, aItem, b)
            },
            b,
            a,
          )
        }

        function _equals(a, b, stackA, stackB) {
          if ((0, _objectIs2.default)(a, b)) {
            return true
          }

          var typeA = (0, _type.default)(a)

          if (typeA !== (0, _type.default)(b)) {
            return false
          }

          if (a == null || b == null) {
            return false
          }

          if (
            typeof a['fantasy-land/equals'] === 'function' ||
            typeof b['fantasy-land/equals'] === 'function'
          ) {
            return (
              typeof a['fantasy-land/equals'] === 'function' &&
              a['fantasy-land/equals'](b) &&
              typeof b['fantasy-land/equals'] === 'function' &&
              b['fantasy-land/equals'](a)
            )
          }

          if (
            typeof a.equals === 'function' ||
            typeof b.equals === 'function'
          ) {
            return (
              typeof a.equals === 'function' &&
              a.equals(b) &&
              typeof b.equals === 'function' &&
              b.equals(a)
            )
          }

          switch (typeA) {
            case 'Arguments':
            case 'Array':
            case 'Object':
              if (
                typeof a.constructor === 'function' &&
                (0, _functionName2.default)(a.constructor) === 'Promise'
              ) {
                return a === b
              }

              break

            case 'Boolean':
            case 'Number':
            case 'String':
              if (
                !(
                  typeof a === typeof b &&
                  (0, _objectIs2.default)(a.valueOf(), b.valueOf())
                )
              ) {
                return false
              }

              break

            case 'Date':
              if (!(0, _objectIs2.default)(a.valueOf(), b.valueOf())) {
                return false
              }

              break

            case 'Error':
              return a.name === b.name && a.message === b.message

            case 'RegExp':
              if (
                !(
                  a.source === b.source &&
                  a.global === b.global &&
                  a.ignoreCase === b.ignoreCase &&
                  a.multiline === b.multiline &&
                  a.sticky === b.sticky &&
                  a.unicode === b.unicode
                )
              ) {
                return false
              }

              break
          }

          var idx = stackA.length - 1

          while (idx >= 0) {
            if (stackA[idx] === a) {
              return stackB[idx] === b
            }

            idx -= 1
          }

          switch (typeA) {
            case 'Map':
              if (a.size !== b.size) {
                return false
              }

              return _uniqContentEquals(
                a.entries(),
                b.entries(),
                stackA.concat([a]),
                stackB.concat([b]),
              )

            case 'Set':
              if (a.size !== b.size) {
                return false
              }

              return _uniqContentEquals(
                a.values(),
                b.values(),
                stackA.concat([a]),
                stackB.concat([b]),
              )

            case 'Arguments':
            case 'Array':
            case 'Object':
            case 'Boolean':
            case 'Number':
            case 'String':
            case 'Date':
            case 'Error':
            case 'RegExp':
            case 'Int8Array':
            case 'Uint8Array':
            case 'Uint8ClampedArray':
            case 'Int16Array':
            case 'Uint16Array':
            case 'Int32Array':
            case 'Uint32Array':
            case 'Float32Array':
            case 'Float64Array':
            case 'ArrayBuffer':
              break

            default:
              // Values of other types are only equal if identical.
              return false
          }

          var keysA = (0, _keys.default)(a)

          if (keysA.length !== (0, _keys.default)(b).length) {
            return false
          }

          var extendedStackA = stackA.concat([a])
          var extendedStackB = stackB.concat([b])
          idx = keysA.length - 1

          while (idx >= 0) {
            var key = keysA[idx]

            if (
              !(
                (0, _has2.default)(key, b) &&
                _equals(b[key], a[key], extendedStackA, extendedStackB)
              )
            ) {
              return false
            }

            idx -= 1
          }

          return true
        }
      },
      {
        './_arrayFromIterator.js':
          '../node_modules/ramda/es/internal/_arrayFromIterator.js',
        './_includesWith.js':
          '../node_modules/ramda/es/internal/_includesWith.js',
        './_functionName.js':
          '../node_modules/ramda/es/internal/_functionName.js',
        './_has.js': '../node_modules/ramda/es/internal/_has.js',
        './_objectIs.js': '../node_modules/ramda/es/internal/_objectIs.js',
        '../keys.js': '../node_modules/ramda/es/keys.js',
        '../type.js': '../node_modules/ramda/es/type.js',
      },
    ],
    '../node_modules/ramda/es/equals.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        var _equals2 = _interopRequireDefault(
          require('./internal/_equals.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns `true` if its arguments are equivalent, `false` otherwise. Handles
         * cyclical data structures.
         *
         * Dispatches symmetrically to the `equals` methods of both arguments, if
         * present.
         *
         * @func
         * @memberOf R
         * @since v0.15.0
         * @category Relation
         * @sig a -> b -> Boolean
         * @param {*} a
         * @param {*} b
         * @return {Boolean}
         * @example
         *
         *      R.equals(1, 1); //=> true
         *      R.equals(1, '1'); //=> false
         *      R.equals([1, 2, 3], [1, 2, 3]); //=> true
         *
         *      const a = {}; a.v = a;
         *      const b = {}; b.v = b;
         *      R.equals(a, b); //=> true
         */
        var equals =
          /*#__PURE__*/
          (0, _curry.default)(function equals(a, b) {
            return (0, _equals2.default)(a, b, [], [])
          })
        var _default = equals
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
        './internal/_equals.js':
          '../node_modules/ramda/es/internal/_equals.js',
      },
    ],
    '../node_modules/ramda/es/internal/_indexOf.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = _indexOf

        var _equals = _interopRequireDefault(require('../equals.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        function _indexOf(list, a, idx) {
          var inf, item // Array.prototype.indexOf doesn't exist below IE9

          if (typeof list.indexOf === 'function') {
            switch (typeof a) {
              case 'number':
                if (a === 0) {
                  // manually crawl the list to distinguish between +0 and -0
                  inf = 1 / a

                  while (idx < list.length) {
                    item = list[idx]

                    if (item === 0 && 1 / item === inf) {
                      return idx
                    }

                    idx += 1
                  }

                  return -1
                } else if (a !== a) {
                  // NaN
                  while (idx < list.length) {
                    item = list[idx]

                    if (typeof item === 'number' && item !== item) {
                      return idx
                    }

                    idx += 1
                  }

                  return -1
                } // non-zero numbers can utilise Set

                return list.indexOf(a, idx)
              // all these types can utilise Set

              case 'string':
              case 'boolean':
              case 'function':
              case 'undefined':
                return list.indexOf(a, idx)

              case 'object':
                if (a === null) {
                  // null can utilise Set
                  return list.indexOf(a, idx)
                }
            }
          } // anything else not covered above, defer to R.equals

          while (idx < list.length) {
            if ((0, _equals.default)(list[idx], a)) {
              return idx
            }

            idx += 1
          }

          return -1
        }
      },
      { '../equals.js': '../node_modules/ramda/es/equals.js' },
    ],
    '../node_modules/ramda/es/internal/_includes.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = _includes

        var _indexOf2 = _interopRequireDefault(require('./_indexOf.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        function _includes(a, list) {
          return (0, _indexOf2.default)(list, a, 0) >= 0
        }
      },
      { './_indexOf.js': '../node_modules/ramda/es/internal/_indexOf.js' },
    ],
    '../node_modules/ramda/es/internal/_quote.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = _quote

        function _quote(s) {
          var escaped = s
            .replace(/\\/g, '\\\\')
            .replace(/[\b]/g, '\\b') // \b matches word boundary; [\b] matches backspace
            .replace(/\f/g, '\\f')
            .replace(/\n/g, '\\n')
            .replace(/\r/g, '\\r')
            .replace(/\t/g, '\\t')
            .replace(/\v/g, '\\v')
            .replace(/\0/g, '\\0')
          return '"' + escaped.replace(/"/g, '\\"') + '"'
        }
      },
      {},
    ],
    '../node_modules/ramda/es/internal/_toISOString.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        /**
         * Polyfill from <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString>.
         */
        var pad = function pad(n) {
          return (n < 10 ? '0' : '') + n
        }

        var _toISOString =
          typeof Date.prototype.toISOString === 'function'
            ? function _toISOString(d) {
                return d.toISOString()
              }
            : function _toISOString(d) {
                return (
                  d.getUTCFullYear() +
                  '-' +
                  pad(d.getUTCMonth() + 1) +
                  '-' +
                  pad(d.getUTCDate()) +
                  'T' +
                  pad(d.getUTCHours()) +
                  ':' +
                  pad(d.getUTCMinutes()) +
                  ':' +
                  pad(d.getUTCSeconds()) +
                  '.' +
                  (d.getUTCMilliseconds() / 1000).toFixed(3).slice(2, 5) +
                  'Z'
                )
              }

        var _default = _toISOString
        exports.default = _default
      },
      {},
    ],
    '../node_modules/ramda/es/internal/_complement.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = _complement

        function _complement(f) {
          return function() {
            return !f.apply(this, arguments)
          }
        }
      },
      {},
    ],
    '../node_modules/ramda/es/internal/_filter.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = _filter

        function _filter(fn, list) {
          var idx = 0
          var len = list.length
          var result = []

          while (idx < len) {
            if (fn(list[idx])) {
              result[result.length] = list[idx]
            }

            idx += 1
          }

          return result
        }
      },
      {},
    ],
    '../node_modules/ramda/es/internal/_isObject.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = _isObject

        function _isObject(x) {
          return Object.prototype.toString.call(x) === '[object Object]'
        }
      },
      {},
    ],
    '../node_modules/ramda/es/internal/_xfilter.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(require('./_curry2.js'))

        var _xfBase2 = _interopRequireDefault(require('./_xfBase.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        var XFilter =
          /*#__PURE__*/
          (function() {
            function XFilter(f, xf) {
              this.xf = xf
              this.f = f
            }

            XFilter.prototype['@@transducer/init'] = _xfBase2.default.init
            XFilter.prototype['@@transducer/result'] =
              _xfBase2.default.result

            XFilter.prototype['@@transducer/step'] = function(
              result,
              input,
            ) {
              return this.f(input)
                ? this.xf['@@transducer/step'](result, input)
                : result
            }

            return XFilter
          })()

        var _xfilter =
          /*#__PURE__*/
          (0, _curry.default)(function _xfilter(f, xf) {
            return new XFilter(f, xf)
          })

        var _default = _xfilter
        exports.default = _default
      },
      {
        './_curry2.js': '../node_modules/ramda/es/internal/_curry2.js',
        './_xfBase.js': '../node_modules/ramda/es/internal/_xfBase.js',
      },
    ],
    '../node_modules/ramda/es/filter.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        var _dispatchable2 = _interopRequireDefault(
          require('./internal/_dispatchable.js'),
        )

        var _filter2 = _interopRequireDefault(
          require('./internal/_filter.js'),
        )

        var _isObject2 = _interopRequireDefault(
          require('./internal/_isObject.js'),
        )

        var _reduce2 = _interopRequireDefault(
          require('./internal/_reduce.js'),
        )

        var _xfilter2 = _interopRequireDefault(
          require('./internal/_xfilter.js'),
        )

        var _keys = _interopRequireDefault(require('./keys.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Takes a predicate and a `Filterable`, and returns a new filterable of the
         * same type containing the members of the given filterable which satisfy the
         * given predicate. Filterable objects include plain objects or any object
         * that has a filter method such as `Array`.
         *
         * Dispatches to the `filter` method of the second argument, if present.
         *
         * Acts as a transducer if a transformer is given in list position.
         *
         * @func
         * @memberOf R
         * @since v0.1.0
         * @category List
         * @sig Filterable f => (a -> Boolean) -> f a -> f a
         * @param {Function} pred
         * @param {Array} filterable
         * @return {Array} Filterable
         * @see R.reject, R.transduce, R.addIndex
         * @example
         *
         *      const isEven = n => n % 2 === 0;
         *
         *      R.filter(isEven, [1, 2, 3, 4]); //=> [2, 4]
         *
         *      R.filter(isEven, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}
         */
        var filter =
          /*#__PURE__*/
          (0, _curry.default)(
            /*#__PURE__*/
            (0, _dispatchable2.default)(
              ['filter'],
              _xfilter2.default,
              function(pred, filterable) {
                return (0, _isObject2.default)(filterable)
                  ? (0, _reduce2.default)(
                      function(acc, key) {
                        if (pred(filterable[key])) {
                          acc[key] = filterable[key]
                        }

                        return acc
                      },
                      {},
                      (0, _keys.default)(filterable),
                    ) // else
                  : (0, _filter2.default)(pred, filterable)
              },
            ),
          )
        var _default = filter
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
        './internal/_dispatchable.js':
          '../node_modules/ramda/es/internal/_dispatchable.js',
        './internal/_filter.js':
          '../node_modules/ramda/es/internal/_filter.js',
        './internal/_isObject.js':
          '../node_modules/ramda/es/internal/_isObject.js',
        './internal/_reduce.js':
          '../node_modules/ramda/es/internal/_reduce.js',
        './internal/_xfilter.js':
          '../node_modules/ramda/es/internal/_xfilter.js',
        './keys.js': '../node_modules/ramda/es/keys.js',
      },
    ],
    '../node_modules/ramda/es/reject.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _complement2 = _interopRequireDefault(
          require('./internal/_complement.js'),
        )

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        var _filter = _interopRequireDefault(require('./filter.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * The complement of [`filter`](#filter).
         *
         * Acts as a transducer if a transformer is given in list position. Filterable
         * objects include plain objects or any object that has a filter method such
         * as `Array`.
         *
         * @func
         * @memberOf R
         * @since v0.1.0
         * @category List
         * @sig Filterable f => (a -> Boolean) -> f a -> f a
         * @param {Function} pred
         * @param {Array} filterable
         * @return {Array}
         * @see R.filter, R.transduce, R.addIndex
         * @example
         *
         *      const isOdd = (n) => n % 2 === 1;
         *
         *      R.reject(isOdd, [1, 2, 3, 4]); //=> [2, 4]
         *
         *      R.reject(isOdd, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}
         */
        var reject =
          /*#__PURE__*/
          (0, _curry.default)(function reject(pred, filterable) {
            return (0,
            _filter.default)((0, _complement2.default)(pred), filterable)
          })
        var _default = reject
        exports.default = _default
      },
      {
        './internal/_complement.js':
          '../node_modules/ramda/es/internal/_complement.js',
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
        './filter.js': '../node_modules/ramda/es/filter.js',
      },
    ],
    '../node_modules/ramda/es/internal/_toString.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = _toString

        var _includes2 = _interopRequireDefault(require('./_includes.js'))

        var _map2 = _interopRequireDefault(require('./_map.js'))

        var _quote2 = _interopRequireDefault(require('./_quote.js'))

        var _toISOString2 = _interopRequireDefault(
          require('./_toISOString.js'),
        )

        var _keys = _interopRequireDefault(require('../keys.js'))

        var _reject = _interopRequireDefault(require('../reject.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        function _toString(x, seen) {
          var recur = function recur(y) {
            var xs = seen.concat([x])
            return (0, _includes2.default)(y, xs)
              ? '<Circular>'
              : _toString(y, xs)
          } //  mapPairs :: (Object, [String]) -> [String]

          var mapPairs = function(obj, keys) {
            return (0, _map2.default)(function(k) {
              return (0, _quote2.default)(k) + ': ' + recur(obj[k])
            }, keys.slice().sort())
          }

          switch (Object.prototype.toString.call(x)) {
            case '[object Arguments]':
              return (
                '(function() { return arguments; }(' +
                (0, _map2.default)(recur, x).join(', ') +
                '))'
              )

            case '[object Array]':
              return (
                '[' +
                (0, _map2.default)(recur, x)
                  .concat(
                    mapPairs(
                      x,
                      (0, _reject.default)(function(k) {
                        return /^\d+$/.test(k)
                      }, (0, _keys.default)(x)),
                    ),
                  )
                  .join(', ') +
                ']'
              )

            case '[object Boolean]':
              return typeof x === 'object'
                ? 'new Boolean(' + recur(x.valueOf()) + ')'
                : x.toString()

            case '[object Date]':
              return (
                'new Date(' +
                (isNaN(x.valueOf())
                  ? recur(NaN)
                  : (0, _quote2.default)((0, _toISOString2.default)(x))) +
                ')'
              )

            case '[object Null]':
              return 'null'

            case '[object Number]':
              return typeof x === 'object'
                ? 'new Number(' + recur(x.valueOf()) + ')'
                : 1 / x === -Infinity
                ? '-0'
                : x.toString(10)

            case '[object String]':
              return typeof x === 'object'
                ? 'new String(' + recur(x.valueOf()) + ')'
                : (0, _quote2.default)(x)

            case '[object Undefined]':
              return 'undefined'

            default:
              if (typeof x.toString === 'function') {
                var repr = x.toString()

                if (repr !== '[object Object]') {
                  return repr
                }
              }

              return (
                '{' + mapPairs(x, (0, _keys.default)(x)).join(', ') + '}'
              )
          }
        }
      },
      {
        './_includes.js': '../node_modules/ramda/es/internal/_includes.js',
        './_map.js': '../node_modules/ramda/es/internal/_map.js',
        './_quote.js': '../node_modules/ramda/es/internal/_quote.js',
        './_toISOString.js':
          '../node_modules/ramda/es/internal/_toISOString.js',
        '../keys.js': '../node_modules/ramda/es/keys.js',
        '../reject.js': '../node_modules/ramda/es/reject.js',
      },
    ],
    '../node_modules/ramda/es/toString.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry1.js'),
        )

        var _toString2 = _interopRequireDefault(
          require('./internal/_toString.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns the string representation of the given value. `eval`'ing the output
         * should result in a value equivalent to the input value. Many of the built-in
         * `toString` methods do not satisfy this requirement.
         *
         * If the given value is an `[object Object]` with a `toString` method other
         * than `Object.prototype.toString`, this method is invoked with no arguments
         * to produce the return value. This means user-defined constructor functions
         * can provide a suitable `toString` method. For example:
         *
         *     function Point(x, y) {
         *       this.x = x;
         *       this.y = y;
         *     }
         *
         *     Point.prototype.toString = function() {
         *       return 'new Point(' + this.x + ', ' + this.y + ')';
         *     };
         *
         *     R.toString(new Point(1, 2)); //=> 'new Point(1, 2)'
         *
         * @func
         * @memberOf R
         * @since v0.14.0
         * @category String
         * @sig * -> String
         * @param {*} val
         * @return {String}
         * @example
         *
         *      R.toString(42); //=> '42'
         *      R.toString('abc'); //=> '"abc"'
         *      R.toString([1, 2, 3]); //=> '[1, 2, 3]'
         *      R.toString({foo: 1, bar: 2, baz: 3}); //=> '{"bar": 2, "baz": 3, "foo": 1}'
         *      R.toString(new Date('2001-02-03T04:05:06Z')); //=> 'new Date("2001-02-03T04:05:06.000Z")'
         */
        var toString =
          /*#__PURE__*/
          (0, _curry.default)(function toString(val) {
            return (0, _toString2.default)(val, [])
          })
        var _default = toString
        exports.default = _default
      },
      {
        './internal/_curry1.js':
          '../node_modules/ramda/es/internal/_curry1.js',
        './internal/_toString.js':
          '../node_modules/ramda/es/internal/_toString.js',
      },
    ],
    '../node_modules/ramda/es/concat.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        var _isArray2 = _interopRequireDefault(
          require('./internal/_isArray.js'),
        )

        var _isFunction2 = _interopRequireDefault(
          require('./internal/_isFunction.js'),
        )

        var _isString2 = _interopRequireDefault(
          require('./internal/_isString.js'),
        )

        var _toString = _interopRequireDefault(require('./toString.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns the result of concatenating the given lists or strings.
         *
         * Note: `R.concat` expects both arguments to be of the same type,
         * unlike the native `Array.prototype.concat` method. It will throw
         * an error if you `concat` an Array with a non-Array value.
         *
         * Dispatches to the `concat` method of the first argument, if present.
         * Can also concatenate two members of a [fantasy-land
         * compatible semigroup](https://github.com/fantasyland/fantasy-land#semigroup).
         *
         * @func
         * @memberOf R
         * @since v0.1.0
         * @category List
         * @sig [a] -> [a] -> [a]
         * @sig String -> String -> String
         * @param {Array|String} firstList The first list
         * @param {Array|String} secondList The second list
         * @return {Array|String} A list consisting of the elements of `firstList` followed by the elements of
         * `secondList`.
         *
         * @example
         *
         *      R.concat('ABC', 'DEF'); // 'ABCDEF'
         *      R.concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]
         *      R.concat([], []); //=> []
         */
        var concat =
          /*#__PURE__*/
          (0, _curry.default)(function concat(a, b) {
            if ((0, _isArray2.default)(a)) {
              if ((0, _isArray2.default)(b)) {
                return a.concat(b)
              }

              throw new TypeError(
                (0, _toString.default)(b) + ' is not an array',
              )
            }

            if ((0, _isString2.default)(a)) {
              if ((0, _isString2.default)(b)) {
                return a + b
              }

              throw new TypeError(
                (0, _toString.default)(b) + ' is not a string',
              )
            }

            if (
              a != null &&
              (0, _isFunction2.default)(a['fantasy-land/concat'])
            ) {
              return a['fantasy-land/concat'](b)
            }

            if (a != null && (0, _isFunction2.default)(a.concat)) {
              return a.concat(b)
            }

            throw new TypeError(
              (0, _toString.default)(a) +
                ' does not have a method named "concat" or "fantasy-land/concat"',
            )
          })
        var _default = concat
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
        './internal/_isArray.js':
          '../node_modules/ramda/es/internal/_isArray.js',
        './internal/_isFunction.js':
          '../node_modules/ramda/es/internal/_isFunction.js',
        './internal/_isString.js':
          '../node_modules/ramda/es/internal/_isString.js',
        './toString.js': '../node_modules/ramda/es/toString.js',
      },
    ],
    '../node_modules/ramda/es/cond.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _arity2 = _interopRequireDefault(
          require('./internal/_arity.js'),
        )

        var _curry = _interopRequireDefault(
          require('./internal/_curry1.js'),
        )

        var _map = _interopRequireDefault(require('./map.js'))

        var _max = _interopRequireDefault(require('./max.js'))

        var _reduce = _interopRequireDefault(require('./reduce.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns a function, `fn`, which encapsulates `if/else, if/else, ...` logic.
         * `R.cond` takes a list of [predicate, transformer] pairs. All of the arguments
         * to `fn` are applied to each of the predicates in turn until one returns a
         * "truthy" value, at which point `fn` returns the result of applying its
         * arguments to the corresponding transformer. If none of the predicates
         * matches, `fn` returns undefined.
         *
         * @func
         * @memberOf R
         * @since v0.6.0
         * @category Logic
         * @sig [[(*... -> Boolean),(*... -> *)]] -> (*... -> *)
         * @param {Array} pairs A list of [predicate, transformer]
         * @return {Function}
         * @see R.ifElse, R.unless, R.when
         * @example
         *
         *      const fn = R.cond([
         *        [R.equals(0),   R.always('water freezes at 0°C')],
         *        [R.equals(100), R.always('water boils at 100°C')],
         *        [R.T,           temp => 'nothing special happens at ' + temp + '°C']
         *      ]);
         *      fn(0); //=> 'water freezes at 0°C'
         *      fn(50); //=> 'nothing special happens at 50°C'
         *      fn(100); //=> 'water boils at 100°C'
         */
        var cond =
          /*#__PURE__*/
          (0, _curry.default)(function cond(pairs) {
            var arity = (0, _reduce.default)(
              _max.default,
              0,
              (0, _map.default)(function(pair) {
                return pair[0].length
              }, pairs),
            )
            return (0, _arity2.default)(arity, function() {
              var idx = 0

              while (idx < pairs.length) {
                if (pairs[idx][0].apply(this, arguments)) {
                  return pairs[idx][1].apply(this, arguments)
                }

                idx += 1
              }
            })
          })
        var _default = cond
        exports.default = _default
      },
      {
        './internal/_arity.js':
          '../node_modules/ramda/es/internal/_arity.js',
        './internal/_curry1.js':
          '../node_modules/ramda/es/internal/_curry1.js',
        './map.js': '../node_modules/ramda/es/map.js',
        './max.js': '../node_modules/ramda/es/max.js',
        './reduce.js': '../node_modules/ramda/es/reduce.js',
      },
    ],
    '../node_modules/ramda/es/constructN.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        var _curry3 = _interopRequireDefault(require('./curry.js'))

        var _nAry = _interopRequireDefault(require('./nAry.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Wraps a constructor function inside a curried function that can be called
         * with the same arguments and returns the same type. The arity of the function
         * returned is specified to allow using variadic constructor functions.
         *
         * @func
         * @memberOf R
         * @since v0.4.0
         * @category Function
         * @sig Number -> (* -> {*}) -> (* -> {*})
         * @param {Number} n The arity of the constructor function.
         * @param {Function} Fn The constructor function to wrap.
         * @return {Function} A wrapped, curried constructor function.
         * @example
         *
         *      // Variadic Constructor function
         *      function Salad() {
         *        this.ingredients = arguments;
         *      }
         *
         *      Salad.prototype.recipe = function() {
         *        const instructions = R.map(ingredient => 'Add a dollop of ' + ingredient, this.ingredients);
         *        return R.join('\n', instructions);
         *      };
         *
         *      const ThreeLayerSalad = R.constructN(3, Salad);
         *
         *      // Notice we no longer need the 'new' keyword, and the constructor is curried for 3 arguments.
         *      const salad = ThreeLayerSalad('Mayonnaise')('Potato Chips')('Ketchup');
         *
         *      console.log(salad.recipe());
         *      // Add a dollop of Mayonnaise
         *      // Add a dollop of Potato Chips
         *      // Add a dollop of Ketchup
         */
        var constructN =
          /*#__PURE__*/
          (0, _curry.default)(function constructN(n, Fn) {
            if (n > 10) {
              throw new Error(
                'Constructor with greater than ten arguments',
              )
            }

            if (n === 0) {
              return function() {
                return new Fn()
              }
            }

            return (0, _curry3.default)(
              (0, _nAry.default)(n, function(
                $0,
                $1,
                $2,
                $3,
                $4,
                $5,
                $6,
                $7,
                $8,
                $9,
              ) {
                switch (arguments.length) {
                  case 1:
                    return new Fn($0)

                  case 2:
                    return new Fn($0, $1)

                  case 3:
                    return new Fn($0, $1, $2)

                  case 4:
                    return new Fn($0, $1, $2, $3)

                  case 5:
                    return new Fn($0, $1, $2, $3, $4)

                  case 6:
                    return new Fn($0, $1, $2, $3, $4, $5)

                  case 7:
                    return new Fn($0, $1, $2, $3, $4, $5, $6)

                  case 8:
                    return new Fn($0, $1, $2, $3, $4, $5, $6, $7)

                  case 9:
                    return new Fn($0, $1, $2, $3, $4, $5, $6, $7, $8)

                  case 10:
                    return new Fn($0, $1, $2, $3, $4, $5, $6, $7, $8, $9)
                }
              }),
            )
          })
        var _default = constructN
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
        './curry.js': '../node_modules/ramda/es/curry.js',
        './nAry.js': '../node_modules/ramda/es/nAry.js',
      },
    ],
    '../node_modules/ramda/es/construct.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry1.js'),
        )

        var _constructN = _interopRequireDefault(
          require('./constructN.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Wraps a constructor function inside a curried function that can be called
         * with the same arguments and returns the same type.
         *
         * @func
         * @memberOf R
         * @since v0.1.0
         * @category Function
         * @sig (* -> {*}) -> (* -> {*})
         * @param {Function} fn The constructor function to wrap.
         * @return {Function} A wrapped, curried constructor function.
         * @see R.invoker
         * @example
         *
         *      // Constructor function
         *      function Animal(kind) {
         *        this.kind = kind;
         *      };
         *      Animal.prototype.sighting = function() {
         *        return "It's a " + this.kind + "!";
         *      }
         *
         *      const AnimalConstructor = R.construct(Animal)
         *
         *      // Notice we no longer need the 'new' keyword:
         *      AnimalConstructor('Pig'); //=> {"kind": "Pig", "sighting": function (){...}};
         *
         *      const animalTypes = ["Lion", "Tiger", "Bear"];
         *      const animalSighting = R.invoker(0, 'sighting');
         *      const sightNewAnimal = R.compose(animalSighting, AnimalConstructor);
         *      R.map(sightNewAnimal, animalTypes); //=> ["It's a Lion!", "It's a Tiger!", "It's a Bear!"]
         */
        var construct =
          /*#__PURE__*/
          (0, _curry.default)(function construct(Fn) {
            return (0, _constructN.default)(Fn.length, Fn)
          })
        var _default = construct
        exports.default = _default
      },
      {
        './internal/_curry1.js':
          '../node_modules/ramda/es/internal/_curry1.js',
        './constructN.js': '../node_modules/ramda/es/constructN.js',
      },
    ],
    '../node_modules/ramda/es/contains.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _includes2 = _interopRequireDefault(
          require('./internal/_includes.js'),
        )

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns `true` if the specified value is equal, in [`R.equals`](#equals)
         * terms, to at least one element of the given list; `false` otherwise.
         * Works also with strings.
         *
         * @func
         * @memberOf R
         * @since v0.1.0
         * @category List
         * @sig a -> [a] -> Boolean
         * @param {Object} a The item to compare against.
         * @param {Array} list The array to consider.
         * @return {Boolean} `true` if an equivalent item is in the list, `false` otherwise.
         * @see R.includes
         * @deprecated since v0.26.0
         * @example
         *
         *      R.contains(3, [1, 2, 3]); //=> true
         *      R.contains(4, [1, 2, 3]); //=> false
         *      R.contains({ name: 'Fred' }, [{ name: 'Fred' }]); //=> true
         *      R.contains([42], [[42]]); //=> true
         *      R.contains('ba', 'banana'); //=>true
         */
        var contains =
          /*#__PURE__*/
          (0, _curry.default)(_includes2.default)
        var _default = contains
        exports.default = _default
      },
      {
        './internal/_includes.js':
          '../node_modules/ramda/es/internal/_includes.js',
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
      },
    ],
    '../node_modules/ramda/es/converge.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        var _map2 = _interopRequireDefault(require('./internal/_map.js'))

        var _curryN = _interopRequireDefault(require('./curryN.js'))

        var _max = _interopRequireDefault(require('./max.js'))

        var _pluck = _interopRequireDefault(require('./pluck.js'))

        var _reduce = _interopRequireDefault(require('./reduce.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Accepts a converging function and a list of branching functions and returns
         * a new function. The arity of the new function is the same as the arity of
         * the longest branching function. When invoked, this new function is applied
         * to some arguments, and each branching function is applied to those same
         * arguments. The results of each branching function are passed as arguments
         * to the converging function to produce the return value.
         *
         * @func
         * @memberOf R
         * @since v0.4.2
         * @category Function
         * @sig ((x1, x2, ...) -> z) -> [((a, b, ...) -> x1), ((a, b, ...) -> x2), ...] -> (a -> b -> ... -> z)
         * @param {Function} after A function. `after` will be invoked with the return values of
         *        `fn1` and `fn2` as its arguments.
         * @param {Array} functions A list of functions.
         * @return {Function} A new function.
         * @see R.useWith
         * @example
         *
         *      const average = R.converge(R.divide, [R.sum, R.length])
         *      average([1, 2, 3, 4, 5, 6, 7]) //=> 4
         *
         *      const strangeConcat = R.converge(R.concat, [R.toUpper, R.toLower])
         *      strangeConcat("Yodel") //=> "YODELyodel"
         *
         * @symb R.converge(f, [g, h])(a, b) = f(g(a, b), h(a, b))
         */
        var converge =
          /*#__PURE__*/
          (0, _curry.default)(function converge(after, fns) {
            return (0,
            _curryN.default)((0, _reduce.default)(_max.default, 0, (0, _pluck.default)('length', fns)), function() {
              var args = arguments
              var context = this
              return after.apply(
                context,
                (0, _map2.default)(function(fn) {
                  return fn.apply(context, args)
                }, fns),
              )
            })
          })
        var _default = converge
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
        './internal/_map.js': '../node_modules/ramda/es/internal/_map.js',
        './curryN.js': '../node_modules/ramda/es/curryN.js',
        './max.js': '../node_modules/ramda/es/max.js',
        './pluck.js': '../node_modules/ramda/es/pluck.js',
        './reduce.js': '../node_modules/ramda/es/reduce.js',
      },
    ],
    '../node_modules/ramda/es/internal/_xreduceBy.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curryN2 = _interopRequireDefault(require('./_curryN.js'))

        var _has2 = _interopRequireDefault(require('./_has.js'))

        var _xfBase2 = _interopRequireDefault(require('./_xfBase.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        var XReduceBy =
          /*#__PURE__*/
          (function() {
            function XReduceBy(valueFn, valueAcc, keyFn, xf) {
              this.valueFn = valueFn
              this.valueAcc = valueAcc
              this.keyFn = keyFn
              this.xf = xf
              this.inputs = {}
            }

            XReduceBy.prototype['@@transducer/init'] =
              _xfBase2.default.init

            XReduceBy.prototype['@@transducer/result'] = function(result) {
              var key

              for (key in this.inputs) {
                if ((0, _has2.default)(key, this.inputs)) {
                  result = this.xf['@@transducer/step'](
                    result,
                    this.inputs[key],
                  )

                  if (result['@@transducer/reduced']) {
                    result = result['@@transducer/value']
                    break
                  }
                }
              }

              this.inputs = null
              return this.xf['@@transducer/result'](result)
            }

            XReduceBy.prototype['@@transducer/step'] = function(
              result,
              input,
            ) {
              var key = this.keyFn(input)
              this.inputs[key] = this.inputs[key] || [key, this.valueAcc]
              this.inputs[key][1] = this.valueFn(
                this.inputs[key][1],
                input,
              )
              return result
            }

            return XReduceBy
          })()

        var _xreduceBy =
          /*#__PURE__*/
          (0, _curryN2.default)(4, [], function _xreduceBy(
            valueFn,
            valueAcc,
            keyFn,
            xf,
          ) {
            return new XReduceBy(valueFn, valueAcc, keyFn, xf)
          })

        var _default = _xreduceBy
        exports.default = _default
      },
      {
        './_curryN.js': '../node_modules/ramda/es/internal/_curryN.js',
        './_has.js': '../node_modules/ramda/es/internal/_has.js',
        './_xfBase.js': '../node_modules/ramda/es/internal/_xfBase.js',
      },
    ],
    '../node_modules/ramda/es/reduceBy.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curryN2 = _interopRequireDefault(
          require('./internal/_curryN.js'),
        )

        var _dispatchable2 = _interopRequireDefault(
          require('./internal/_dispatchable.js'),
        )

        var _has2 = _interopRequireDefault(require('./internal/_has.js'))

        var _reduce2 = _interopRequireDefault(
          require('./internal/_reduce.js'),
        )

        var _xreduceBy2 = _interopRequireDefault(
          require('./internal/_xreduceBy.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Groups the elements of the list according to the result of calling
         * the String-returning function `keyFn` on each element and reduces the elements
         * of each group to a single value via the reducer function `valueFn`.
         *
         * This function is basically a more general [`groupBy`](#groupBy) function.
         *
         * Acts as a transducer if a transformer is given in list position.
         *
         * @func
         * @memberOf R
         * @since v0.20.0
         * @category List
         * @sig ((a, b) -> a) -> a -> (b -> String) -> [b] -> {String: a}
         * @param {Function} valueFn The function that reduces the elements of each group to a single
         *        value. Receives two values, accumulator for a particular group and the current element.
         * @param {*} acc The (initial) accumulator value for each group.
         * @param {Function} keyFn The function that maps the list's element into a key.
         * @param {Array} list The array to group.
         * @return {Object} An object with the output of `keyFn` for keys, mapped to the output of
         *         `valueFn` for elements which produced that key when passed to `keyFn`.
         * @see R.groupBy, R.reduce
         * @example
         *
         *      const groupNames = (acc, {name}) => acc.concat(name)
         *      const toGrade = ({score}) =>
         *        score < 65 ? 'F' :
         *        score < 70 ? 'D' :
         *        score < 80 ? 'C' :
         *        score < 90 ? 'B' : 'A'
         *
         *      var students = [
         *        {name: 'Abby', score: 83},
         *        {name: 'Bart', score: 62},
         *        {name: 'Curt', score: 88},
         *        {name: 'Dora', score: 92},
         *      ]
         *
         *      reduceBy(groupNames, [], toGrade, students)
         *      //=> {"A": ["Dora"], "B": ["Abby", "Curt"], "F": ["Bart"]}
         */
        var reduceBy =
          /*#__PURE__*/
          (0, _curryN2.default)(
            4,
            [],
            /*#__PURE__*/
            (0, _dispatchable2.default)(
              [],
              _xreduceBy2.default,
              function reduceBy(valueFn, valueAcc, keyFn, list) {
                return (0, _reduce2.default)(
                  function(acc, elt) {
                    var key = keyFn(elt)
                    acc[key] = valueFn(
                      (0, _has2.default)(key, acc) ? acc[key] : valueAcc,
                      elt,
                    )
                    return acc
                  },
                  {},
                  list,
                )
              },
            ),
          )
        var _default = reduceBy
        exports.default = _default
      },
      {
        './internal/_curryN.js':
          '../node_modules/ramda/es/internal/_curryN.js',
        './internal/_dispatchable.js':
          '../node_modules/ramda/es/internal/_dispatchable.js',
        './internal/_has.js': '../node_modules/ramda/es/internal/_has.js',
        './internal/_reduce.js':
          '../node_modules/ramda/es/internal/_reduce.js',
        './internal/_xreduceBy.js':
          '../node_modules/ramda/es/internal/_xreduceBy.js',
      },
    ],
    '../node_modules/ramda/es/countBy.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _reduceBy = _interopRequireDefault(require('./reduceBy.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Counts the elements of a list according to how many match each value of a
         * key generated by the supplied function. Returns an object mapping the keys
         * produced by `fn` to the number of occurrences in the list. Note that all
         * keys are coerced to strings because of how JavaScript objects work.
         *
         * Acts as a transducer if a transformer is given in list position.
         *
         * @func
         * @memberOf R
         * @since v0.1.0
         * @category Relation
         * @sig (a -> String) -> [a] -> {*}
         * @param {Function} fn The function used to map values to keys.
         * @param {Array} list The list to count elements from.
         * @return {Object} An object mapping keys to number of occurrences in the list.
         * @example
         *
         *      const numbers = [1.0, 1.1, 1.2, 2.0, 3.0, 2.2];
         *      R.countBy(Math.floor)(numbers);    //=> {'1': 3, '2': 2, '3': 1}
         *
         *      const letters = ['a', 'b', 'A', 'a', 'B', 'c'];
         *      R.countBy(R.toLower)(letters);   //=> {'a': 3, 'b': 2, 'c': 1}
         */
        var countBy =
          /*#__PURE__*/
          (0, _reduceBy.default)(function(acc, elem) {
            return acc + 1
          }, 0)
        var _default = countBy
        exports.default = _default
      },
      { './reduceBy.js': '../node_modules/ramda/es/reduceBy.js' },
    ],
    '../node_modules/ramda/es/dec.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _add = _interopRequireDefault(require('./add.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Decrements its argument.
         *
         * @func
         * @memberOf R
         * @since v0.9.0
         * @category Math
         * @sig Number -> Number
         * @param {Number} n
         * @return {Number} n - 1
         * @see R.inc
         * @example
         *
         *      R.dec(42); //=> 41
         */
        var dec =
          /*#__PURE__*/
          (0, _add.default)(-1)
        var _default = dec
        exports.default = _default
      },
      { './add.js': '../node_modules/ramda/es/add.js' },
    ],
    '../node_modules/ramda/es/defaultTo.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns the second argument if it is not `null`, `undefined` or `NaN`;
         * otherwise the first argument is returned.
         *
         * @func
         * @memberOf R
         * @since v0.10.0
         * @category Logic
         * @sig a -> b -> a | b
         * @param {a} default The default value.
         * @param {b} val `val` will be returned instead of `default` unless `val` is `null`, `undefined` or `NaN`.
         * @return {*} The second value if it is not `null`, `undefined` or `NaN`, otherwise the default value
         * @example
         *
         *      const defaultTo42 = R.defaultTo(42);
         *
         *      defaultTo42(null);  //=> 42
         *      defaultTo42(undefined);  //=> 42
         *      defaultTo42(false);  //=> false
         *      defaultTo42('Ramda');  //=> 'Ramda'
         *      // parseInt('string') results in NaN
         *      defaultTo42(parseInt('string')); //=> 42
         */
        var defaultTo =
          /*#__PURE__*/
          (0, _curry.default)(function defaultTo(d, v) {
            return v == null || v !== v ? d : v
          })
        var _default = defaultTo
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
      },
    ],
    '../node_modules/ramda/es/descend.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry3.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Makes a descending comparator function out of a function that returns a value
         * that can be compared with `<` and `>`.
         *
         * @func
         * @memberOf R
         * @since v0.23.0
         * @category Function
         * @sig Ord b => (a -> b) -> a -> a -> Number
         * @param {Function} fn A function of arity one that returns a value that can be compared
         * @param {*} a The first item to be compared.
         * @param {*} b The second item to be compared.
         * @return {Number} `-1` if fn(a) > fn(b), `1` if fn(b) > fn(a), otherwise `0`
         * @see R.ascend
         * @example
         *
         *      const byAge = R.descend(R.prop('age'));
         *      const people = [
         *        { name: 'Emma', age: 70 },
         *        { name: 'Peter', age: 78 },
         *        { name: 'Mikhail', age: 62 },
         *      ];
         *      const peopleByOldestFirst = R.sort(byAge, people);
         *        //=> [{ name: 'Peter', age: 78 }, { name: 'Emma', age: 70 }, { name: 'Mikhail', age: 62 }]
         */
        var descend =
          /*#__PURE__*/
          (0, _curry.default)(function descend(fn, a, b) {
            var aa = fn(a)
            var bb = fn(b)
            return aa > bb ? -1 : aa < bb ? 1 : 0
          })
        var _default = descend
        exports.default = _default
      },
      {
        './internal/_curry3.js':
          '../node_modules/ramda/es/internal/_curry3.js',
      },
    ],
    '../node_modules/ramda/es/internal/_Set.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _includes2 = _interopRequireDefault(require('./_includes.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        var _Set =
          /*#__PURE__*/
          (function() {
            function _Set() {
              /* globals Set */
              this._nativeSet =
                typeof Set === 'function' ? new Set() : null
              this._items = {}
            } // until we figure out why jsdoc chokes on this
            // @param item The item to add to the Set
            // @returns {boolean} true if the item did not exist prior, otherwise false
            //

            _Set.prototype.add = function(item) {
              return !hasOrAdd(item, true, this)
            } //
            // @param item The item to check for existence in the Set
            // @returns {boolean} true if the item exists in the Set, otherwise false
            //

            _Set.prototype.has = function(item) {
              return hasOrAdd(item, false, this)
            } //
            // Combines the logic for checking whether an item is a member of the set and
            // for adding a new item to the set.
            //
            // @param item       The item to check or add to the Set instance.
            // @param shouldAdd  If true, the item will be added to the set if it doesn't
            //                   already exist.
            // @param set        The set instance to check or add to.
            // @return {boolean} true if the item already existed, otherwise false.
            //

            return _Set
          })()

        function hasOrAdd(item, shouldAdd, set) {
          var type = typeof item
          var prevSize, newSize

          switch (type) {
            case 'string':
            case 'number':
              // distinguish between +0 and -0
              if (item === 0 && 1 / item === -Infinity) {
                if (set._items['-0']) {
                  return true
                } else {
                  if (shouldAdd) {
                    set._items['-0'] = true
                  }

                  return false
                }
              } // these types can all utilise the native Set

              if (set._nativeSet !== null) {
                if (shouldAdd) {
                  prevSize = set._nativeSet.size

                  set._nativeSet.add(item)

                  newSize = set._nativeSet.size
                  return newSize === prevSize
                } else {
                  return set._nativeSet.has(item)
                }
              } else {
                if (!(type in set._items)) {
                  if (shouldAdd) {
                    set._items[type] = {}
                    set._items[type][item] = true
                  }

                  return false
                } else if (item in set._items[type]) {
                  return true
                } else {
                  if (shouldAdd) {
                    set._items[type][item] = true
                  }

                  return false
                }
              }

            case 'boolean':
              // set._items['boolean'] holds a two element array
              // representing [ falseExists, trueExists ]
              if (type in set._items) {
                var bIdx = item ? 1 : 0

                if (set._items[type][bIdx]) {
                  return true
                } else {
                  if (shouldAdd) {
                    set._items[type][bIdx] = true
                  }

                  return false
                }
              } else {
                if (shouldAdd) {
                  set._items[type] = item ? [false, true] : [true, false]
                }

                return false
              }

            case 'function':
              // compare functions for reference equality
              if (set._nativeSet !== null) {
                if (shouldAdd) {
                  prevSize = set._nativeSet.size

                  set._nativeSet.add(item)

                  newSize = set._nativeSet.size
                  return newSize === prevSize
                } else {
                  return set._nativeSet.has(item)
                }
              } else {
                if (!(type in set._items)) {
                  if (shouldAdd) {
                    set._items[type] = [item]
                  }

                  return false
                }

                if (!(0, _includes2.default)(item, set._items[type])) {
                  if (shouldAdd) {
                    set._items[type].push(item)
                  }

                  return false
                }

                return true
              }

            case 'undefined':
              if (set._items[type]) {
                return true
              } else {
                if (shouldAdd) {
                  set._items[type] = true
                }

                return false
              }

            case 'object':
              if (item === null) {
                if (!set._items['null']) {
                  if (shouldAdd) {
                    set._items['null'] = true
                  }

                  return false
                }

                return true
              }

            /* falls through */

            default:
              // reduce the search size of heterogeneous sets by creating buckets
              // for each type.
              type = Object.prototype.toString.call(item)

              if (!(type in set._items)) {
                if (shouldAdd) {
                  set._items[type] = [item]
                }

                return false
              } // scan through all previously applied items

              if (!(0, _includes2.default)(item, set._items[type])) {
                if (shouldAdd) {
                  set._items[type].push(item)
                }

                return false
              }

              return true
          }
        } // A simple Set type that honours R.equals semantics

        var _default = _Set
        exports.default = _default
      },
      {
        './_includes.js': '../node_modules/ramda/es/internal/_includes.js',
      },
    ],
    '../node_modules/ramda/es/difference.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        var _Set2 = _interopRequireDefault(require('./internal/_Set.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Finds the set (i.e. no duplicates) of all elements in the first list not
         * contained in the second list. Objects and Arrays are compared in terms of
         * value equality, not reference equality.
         *
         * @func
         * @memberOf R
         * @since v0.1.0
         * @category Relation
         * @sig [*] -> [*] -> [*]
         * @param {Array} list1 The first list.
         * @param {Array} list2 The second list.
         * @return {Array} The elements in `list1` that are not in `list2`.
         * @see R.differenceWith, R.symmetricDifference, R.symmetricDifferenceWith, R.without
         * @example
         *
         *      R.difference([1,2,3,4], [7,6,5,4,3]); //=> [1,2]
         *      R.difference([7,6,5,4,3], [1,2,3,4]); //=> [7,6,5]
         *      R.difference([{a: 1}, {b: 2}], [{a: 1}, {c: 3}]) //=> [{b: 2}]
         */
        var difference =
          /*#__PURE__*/
          (0, _curry.default)(function difference(first, second) {
            var out = []
            var idx = 0
            var firstLen = first.length
            var secondLen = second.length
            var toFilterOut = new _Set2.default()

            for (var i = 0; i < secondLen; i += 1) {
              toFilterOut.add(second[i])
            }

            while (idx < firstLen) {
              if (toFilterOut.add(first[idx])) {
                out[out.length] = first[idx]
              }

              idx += 1
            }

            return out
          })
        var _default = difference
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
        './internal/_Set.js': '../node_modules/ramda/es/internal/_Set.js',
      },
    ],
    '../node_modules/ramda/es/differenceWith.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _includesWith2 = _interopRequireDefault(
          require('./internal/_includesWith.js'),
        )

        var _curry = _interopRequireDefault(
          require('./internal/_curry3.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Finds the set (i.e. no duplicates) of all elements in the first list not
         * contained in the second list. Duplication is determined according to the
         * value returned by applying the supplied predicate to two list elements.
         *
         * @func
         * @memberOf R
         * @since v0.1.0
         * @category Relation
         * @sig ((a, a) -> Boolean) -> [a] -> [a] -> [a]
         * @param {Function} pred A predicate used to test whether two items are equal.
         * @param {Array} list1 The first list.
         * @param {Array} list2 The second list.
         * @return {Array} The elements in `list1` that are not in `list2`.
         * @see R.difference, R.symmetricDifference, R.symmetricDifferenceWith
         * @example
         *
         *      const cmp = (x, y) => x.a === y.a;
         *      const l1 = [{a: 1}, {a: 2}, {a: 3}];
         *      const l2 = [{a: 3}, {a: 4}];
         *      R.differenceWith(cmp, l1, l2); //=> [{a: 1}, {a: 2}]
         */
        var differenceWith =
          /*#__PURE__*/
          (0, _curry.default)(function differenceWith(
            pred,
            first,
            second,
          ) {
            var out = []
            var idx = 0
            var firstLen = first.length

            while (idx < firstLen) {
              if (
                !(0, _includesWith2.default)(pred, first[idx], second) &&
                !(0, _includesWith2.default)(pred, first[idx], out)
              ) {
                out.push(first[idx])
              }

              idx += 1
            }

            return out
          })
        var _default = differenceWith
        exports.default = _default
      },
      {
        './internal/_includesWith.js':
          '../node_modules/ramda/es/internal/_includesWith.js',
        './internal/_curry3.js':
          '../node_modules/ramda/es/internal/_curry3.js',
      },
    ],
    '../node_modules/ramda/es/dissoc.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns a new object that does not contain a `prop` property.
         *
         * @func
         * @memberOf R
         * @since v0.10.0
         * @category Object
         * @sig String -> {k: v} -> {k: v}
         * @param {String} prop The name of the property to dissociate
         * @param {Object} obj The object to clone
         * @return {Object} A new object equivalent to the original but without the specified property
         * @see R.assoc, R.omit
         * @example
         *
         *      R.dissoc('b', {a: 1, b: 2, c: 3}); //=> {a: 1, c: 3}
         */
        var dissoc =
          /*#__PURE__*/
          (0, _curry.default)(function dissoc(prop, obj) {
            var result = {}

            for (var p in obj) {
              result[p] = obj[p]
            }

            delete result[prop]
            return result
          })
        var _default = dissoc
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
      },
    ],
    '../node_modules/ramda/es/remove.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry3.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Removes the sub-list of `list` starting at index `start` and containing
         * `count` elements. _Note that this is not destructive_: it returns a copy of
         * the list with the changes.
         * <small>No lists have been harmed in the application of this function.</small>
         *
         * @func
         * @memberOf R
         * @since v0.2.2
         * @category List
         * @sig Number -> Number -> [a] -> [a]
         * @param {Number} start The position to start removing elements
         * @param {Number} count The number of elements to remove
         * @param {Array} list The list to remove from
         * @return {Array} A new Array with `count` elements from `start` removed.
         * @see R.without
         * @example
         *
         *      R.remove(2, 3, [1,2,3,4,5,6,7,8]); //=> [1,2,6,7,8]
         */
        var remove =
          /*#__PURE__*/
          (0, _curry.default)(function remove(start, count, list) {
            var result = Array.prototype.slice.call(list, 0)
            result.splice(start, count)
            return result
          })
        var _default = remove
        exports.default = _default
      },
      {
        './internal/_curry3.js':
          '../node_modules/ramda/es/internal/_curry3.js',
      },
    ],
    '../node_modules/ramda/es/update.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry3.js'),
        )

        var _adjust = _interopRequireDefault(require('./adjust.js'))

        var _always = _interopRequireDefault(require('./always.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns a new copy of the array with the element at the provided index
         * replaced with the given value.
         *
         * @func
         * @memberOf R
         * @since v0.14.0
         * @category List
         * @sig Number -> a -> [a] -> [a]
         * @param {Number} idx The index to update.
         * @param {*} x The value to exist at the given index of the returned array.
         * @param {Array|Arguments} list The source array-like object to be updated.
         * @return {Array} A copy of `list` with the value at index `idx` replaced with `x`.
         * @see R.adjust
         * @example
         *
         *      R.update(1, '_', ['a', 'b', 'c']);      //=> ['a', '_', 'c']
         *      R.update(-1, '_', ['a', 'b', 'c']);     //=> ['a', 'b', '_']
         * @symb R.update(-1, a, [b, c]) = [b, a]
         * @symb R.update(0, a, [b, c]) = [a, c]
         * @symb R.update(1, a, [b, c]) = [b, a]
         */
        var update =
          /*#__PURE__*/
          (0, _curry.default)(function update(idx, x, list) {
            return (0, _adjust.default)(idx, (0, _always.default)(x), list)
          })
        var _default = update
        exports.default = _default
      },
      {
        './internal/_curry3.js':
          '../node_modules/ramda/es/internal/_curry3.js',
        './adjust.js': '../node_modules/ramda/es/adjust.js',
        './always.js': '../node_modules/ramda/es/always.js',
      },
    ],
    '../node_modules/ramda/es/dissocPath.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        var _isInteger2 = _interopRequireDefault(
          require('./internal/_isInteger.js'),
        )

        var _isArray2 = _interopRequireDefault(
          require('./internal/_isArray.js'),
        )

        var _assoc = _interopRequireDefault(require('./assoc.js'))

        var _dissoc = _interopRequireDefault(require('./dissoc.js'))

        var _remove = _interopRequireDefault(require('./remove.js'))

        var _update = _interopRequireDefault(require('./update.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Makes a shallow clone of an object, omitting the property at the given path.
         * Note that this copies and flattens prototype properties onto the new object
         * as well. All non-primitive properties are copied by reference.
         *
         * @func
         * @memberOf R
         * @since v0.11.0
         * @category Object
         * @typedefn Idx = String | Int
         * @sig [Idx] -> {k: v} -> {k: v}
         * @param {Array} path The path to the value to omit
         * @param {Object} obj The object to clone
         * @return {Object} A new object without the property at path
         * @see R.assocPath
         * @example
         *
         *      R.dissocPath(['a', 'b', 'c'], {a: {b: {c: 42}}}); //=> {a: {b: {}}}
         */
        var dissocPath =
          /*#__PURE__*/
          (0, _curry.default)(function dissocPath(path, obj) {
            switch (path.length) {
              case 0:
                return obj

              case 1:
                return (0, _isInteger2.default)(path[0]) &&
                  (0, _isArray2.default)(obj)
                  ? (0, _remove.default)(path[0], 1, obj)
                  : (0, _dissoc.default)(path[0], obj)

              default:
                var head = path[0]
                var tail = Array.prototype.slice.call(path, 1)

                if (obj[head] == null) {
                  return obj
                } else if (
                  (0, _isInteger2.default)(head) &&
                  (0, _isArray2.default)(obj)
                ) {
                  return (0, _update.default)(
                    head,
                    dissocPath(tail, obj[head]),
                    obj,
                  )
                } else {
                  return (0, _assoc.default)(
                    head,
                    dissocPath(tail, obj[head]),
                    obj,
                  )
                }
            }
          })
        var _default = dissocPath
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
        './internal/_isInteger.js':
          '../node_modules/ramda/es/internal/_isInteger.js',
        './internal/_isArray.js':
          '../node_modules/ramda/es/internal/_isArray.js',
        './assoc.js': '../node_modules/ramda/es/assoc.js',
        './dissoc.js': '../node_modules/ramda/es/dissoc.js',
        './remove.js': '../node_modules/ramda/es/remove.js',
        './update.js': '../node_modules/ramda/es/update.js',
      },
    ],
    '../node_modules/ramda/es/divide.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Divides two numbers. Equivalent to `a / b`.
         *
         * @func
         * @memberOf R
         * @since v0.1.0
         * @category Math
         * @sig Number -> Number -> Number
         * @param {Number} a The first value.
         * @param {Number} b The second value.
         * @return {Number} The result of `a / b`.
         * @see R.multiply
         * @example
         *
         *      R.divide(71, 100); //=> 0.71
         *
         *      const half = R.divide(R.__, 2);
         *      half(42); //=> 21
         *
         *      const reciprocal = R.divide(1);
         *      reciprocal(4);   //=> 0.25
         */
        var divide =
          /*#__PURE__*/
          (0, _curry.default)(function divide(a, b) {
            return a / b
          })
        var _default = divide
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
      },
    ],
    '../node_modules/ramda/es/internal/_xdrop.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(require('./_curry2.js'))

        var _xfBase2 = _interopRequireDefault(require('./_xfBase.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        var XDrop =
          /*#__PURE__*/
          (function() {
            function XDrop(n, xf) {
              this.xf = xf
              this.n = n
            }

            XDrop.prototype['@@transducer/init'] = _xfBase2.default.init
            XDrop.prototype['@@transducer/result'] =
              _xfBase2.default.result

            XDrop.prototype['@@transducer/step'] = function(
              result,
              input,
            ) {
              if (this.n > 0) {
                this.n -= 1
                return result
              }

              return this.xf['@@transducer/step'](result, input)
            }

            return XDrop
          })()

        var _xdrop =
          /*#__PURE__*/
          (0, _curry.default)(function _xdrop(n, xf) {
            return new XDrop(n, xf)
          })

        var _default = _xdrop
        exports.default = _default
      },
      {
        './_curry2.js': '../node_modules/ramda/es/internal/_curry2.js',
        './_xfBase.js': '../node_modules/ramda/es/internal/_xfBase.js',
      },
    ],
    '../node_modules/ramda/es/drop.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        var _dispatchable2 = _interopRequireDefault(
          require('./internal/_dispatchable.js'),
        )

        var _xdrop2 = _interopRequireDefault(
          require('./internal/_xdrop.js'),
        )

        var _slice = _interopRequireDefault(require('./slice.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns all but the first `n` elements of the given list, string, or
         * transducer/transformer (or object with a `drop` method).
         *
         * Dispatches to the `drop` method of the second argument, if present.
         *
         * @func
         * @memberOf R
         * @since v0.1.0
         * @category List
         * @sig Number -> [a] -> [a]
         * @sig Number -> String -> String
         * @param {Number} n
         * @param {*} list
         * @return {*} A copy of list without the first `n` elements
         * @see R.take, R.transduce, R.dropLast, R.dropWhile
         * @example
         *
         *      R.drop(1, ['foo', 'bar', 'baz']); //=> ['bar', 'baz']
         *      R.drop(2, ['foo', 'bar', 'baz']); //=> ['baz']
         *      R.drop(3, ['foo', 'bar', 'baz']); //=> []
         *      R.drop(4, ['foo', 'bar', 'baz']); //=> []
         *      R.drop(3, 'ramda');               //=> 'da'
         */
        var drop =
          /*#__PURE__*/
          (0, _curry.default)(
            /*#__PURE__*/
            (0, _dispatchable2.default)(
              ['drop'],
              _xdrop2.default,
              function drop(n, xs) {
                return (0, _slice.default)(Math.max(0, n), Infinity, xs)
              },
            ),
          )
        var _default = drop
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
        './internal/_dispatchable.js':
          '../node_modules/ramda/es/internal/_dispatchable.js',
        './internal/_xdrop.js':
          '../node_modules/ramda/es/internal/_xdrop.js',
        './slice.js': '../node_modules/ramda/es/slice.js',
      },
    ],
    '../node_modules/ramda/es/internal/_xtake.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(require('./_curry2.js'))

        var _reduced2 = _interopRequireDefault(require('./_reduced.js'))

        var _xfBase2 = _interopRequireDefault(require('./_xfBase.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        var XTake =
          /*#__PURE__*/
          (function() {
            function XTake(n, xf) {
              this.xf = xf
              this.n = n
              this.i = 0
            }

            XTake.prototype['@@transducer/init'] = _xfBase2.default.init
            XTake.prototype['@@transducer/result'] =
              _xfBase2.default.result

            XTake.prototype['@@transducer/step'] = function(
              result,
              input,
            ) {
              this.i += 1
              var ret =
                this.n === 0
                  ? result
                  : this.xf['@@transducer/step'](result, input)
              return this.n >= 0 && this.i >= this.n
                ? (0, _reduced2.default)(ret)
                : ret
            }

            return XTake
          })()

        var _xtake =
          /*#__PURE__*/
          (0, _curry.default)(function _xtake(n, xf) {
            return new XTake(n, xf)
          })

        var _default = _xtake
        exports.default = _default
      },
      {
        './_curry2.js': '../node_modules/ramda/es/internal/_curry2.js',
        './_reduced.js': '../node_modules/ramda/es/internal/_reduced.js',
        './_xfBase.js': '../node_modules/ramda/es/internal/_xfBase.js',
      },
    ],
    '../node_modules/ramda/es/take.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        var _dispatchable2 = _interopRequireDefault(
          require('./internal/_dispatchable.js'),
        )

        var _xtake2 = _interopRequireDefault(
          require('./internal/_xtake.js'),
        )

        var _slice = _interopRequireDefault(require('./slice.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns the first `n` elements of the given list, string, or
         * transducer/transformer (or object with a `take` method).
         *
         * Dispatches to the `take` method of the second argument, if present.
         *
         * @func
         * @memberOf R
         * @since v0.1.0
         * @category List
         * @sig Number -> [a] -> [a]
         * @sig Number -> String -> String
         * @param {Number} n
         * @param {*} list
         * @return {*}
         * @see R.drop
         * @example
         *
         *      R.take(1, ['foo', 'bar', 'baz']); //=> ['foo']
         *      R.take(2, ['foo', 'bar', 'baz']); //=> ['foo', 'bar']
         *      R.take(3, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']
         *      R.take(4, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']
         *      R.take(3, 'ramda');               //=> 'ram'
         *
         *      const personnel = [
         *        'Dave Brubeck',
         *        'Paul Desmond',
         *        'Eugene Wright',
         *        'Joe Morello',
         *        'Gerry Mulligan',
         *        'Bob Bates',
         *        'Joe Dodge',
         *        'Ron Crotty'
         *      ];
         *
         *      const takeFive = R.take(5);
         *      takeFive(personnel);
         *      //=> ['Dave Brubeck', 'Paul Desmond', 'Eugene Wright', 'Joe Morello', 'Gerry Mulligan']
         * @symb R.take(-1, [a, b]) = [a, b]
         * @symb R.take(0, [a, b]) = []
         * @symb R.take(1, [a, b]) = [a]
         * @symb R.take(2, [a, b]) = [a, b]
         */
        var take =
          /*#__PURE__*/
          (0, _curry.default)(
            /*#__PURE__*/
            (0, _dispatchable2.default)(
              ['take'],
              _xtake2.default,
              function take(n, xs) {
                return (0, _slice.default)(0, n < 0 ? Infinity : n, xs)
              },
            ),
          )
        var _default = take
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
        './internal/_dispatchable.js':
          '../node_modules/ramda/es/internal/_dispatchable.js',
        './internal/_xtake.js':
          '../node_modules/ramda/es/internal/_xtake.js',
        './slice.js': '../node_modules/ramda/es/slice.js',
      },
    ],
    '../node_modules/ramda/es/internal/_dropLast.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = dropLast

        var _take = _interopRequireDefault(require('../take.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        function dropLast(n, xs) {
          return (0, _take.default)(n < xs.length ? xs.length - n : 0, xs)
        }
      },
      { '../take.js': '../node_modules/ramda/es/take.js' },
    ],
    '../node_modules/ramda/es/internal/_xdropLast.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(require('./_curry2.js'))

        var _xfBase2 = _interopRequireDefault(require('./_xfBase.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        var XDropLast =
          /*#__PURE__*/
          (function() {
            function XDropLast(n, xf) {
              this.xf = xf
              this.pos = 0
              this.full = false
              this.acc = new Array(n)
            }

            XDropLast.prototype['@@transducer/init'] =
              _xfBase2.default.init

            XDropLast.prototype['@@transducer/result'] = function(result) {
              this.acc = null
              return this.xf['@@transducer/result'](result)
            }

            XDropLast.prototype['@@transducer/step'] = function(
              result,
              input,
            ) {
              if (this.full) {
                result = this.xf['@@transducer/step'](
                  result,
                  this.acc[this.pos],
                )
              }

              this.store(input)
              return result
            }

            XDropLast.prototype.store = function(input) {
              this.acc[this.pos] = input
              this.pos += 1

              if (this.pos === this.acc.length) {
                this.pos = 0
                this.full = true
              }
            }

            return XDropLast
          })()

        var _xdropLast =
          /*#__PURE__*/
          (0, _curry.default)(function _xdropLast(n, xf) {
            return new XDropLast(n, xf)
          })

        var _default = _xdropLast
        exports.default = _default
      },
      {
        './_curry2.js': '../node_modules/ramda/es/internal/_curry2.js',
        './_xfBase.js': '../node_modules/ramda/es/internal/_xfBase.js',
      },
    ],
    '../node_modules/ramda/es/dropLast.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        var _dispatchable2 = _interopRequireDefault(
          require('./internal/_dispatchable.js'),
        )

        var _dropLast2 = _interopRequireDefault(
          require('./internal/_dropLast.js'),
        )

        var _xdropLast2 = _interopRequireDefault(
          require('./internal/_xdropLast.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns a list containing all but the last `n` elements of the given `list`.
         *
         * Acts as a transducer if a transformer is given in list position.
         *
         * @func
         * @memberOf R
         * @since v0.16.0
         * @category List
         * @sig Number -> [a] -> [a]
         * @sig Number -> String -> String
         * @param {Number} n The number of elements of `list` to skip.
         * @param {Array} list The list of elements to consider.
         * @return {Array} A copy of the list with only the first `list.length - n` elements
         * @see R.takeLast, R.drop, R.dropWhile, R.dropLastWhile
         * @example
         *
         *      R.dropLast(1, ['foo', 'bar', 'baz']); //=> ['foo', 'bar']
         *      R.dropLast(2, ['foo', 'bar', 'baz']); //=> ['foo']
         *      R.dropLast(3, ['foo', 'bar', 'baz']); //=> []
         *      R.dropLast(4, ['foo', 'bar', 'baz']); //=> []
         *      R.dropLast(3, 'ramda');               //=> 'ra'
         */
        var dropLast =
          /*#__PURE__*/
          (0, _curry.default)(
            /*#__PURE__*/
            (0, _dispatchable2.default)(
              [],
              _xdropLast2.default,
              _dropLast2.default,
            ),
          )
        var _default = dropLast
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
        './internal/_dispatchable.js':
          '../node_modules/ramda/es/internal/_dispatchable.js',
        './internal/_dropLast.js':
          '../node_modules/ramda/es/internal/_dropLast.js',
        './internal/_xdropLast.js':
          '../node_modules/ramda/es/internal/_xdropLast.js',
      },
    ],
    '../node_modules/ramda/es/internal/_dropLastWhile.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = dropLastWhile

        var _slice = _interopRequireDefault(require('../slice.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        function dropLastWhile(pred, xs) {
          var idx = xs.length - 1

          while (idx >= 0 && pred(xs[idx])) {
            idx -= 1
          }

          return (0, _slice.default)(0, idx + 1, xs)
        }
      },
      { '../slice.js': '../node_modules/ramda/es/slice.js' },
    ],
    '../node_modules/ramda/es/internal/_xdropLastWhile.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(require('./_curry2.js'))

        var _reduce2 = _interopRequireDefault(require('./_reduce.js'))

        var _xfBase2 = _interopRequireDefault(require('./_xfBase.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        var XDropLastWhile =
          /*#__PURE__*/
          (function() {
            function XDropLastWhile(fn, xf) {
              this.f = fn
              this.retained = []
              this.xf = xf
            }

            XDropLastWhile.prototype['@@transducer/init'] =
              _xfBase2.default.init

            XDropLastWhile.prototype['@@transducer/result'] = function(
              result,
            ) {
              this.retained = null
              return this.xf['@@transducer/result'](result)
            }

            XDropLastWhile.prototype['@@transducer/step'] = function(
              result,
              input,
            ) {
              return this.f(input)
                ? this.retain(result, input)
                : this.flush(result, input)
            }

            XDropLastWhile.prototype.flush = function(result, input) {
              result = (0, _reduce2.default)(
                this.xf['@@transducer/step'],
                result,
                this.retained,
              )
              this.retained = []
              return this.xf['@@transducer/step'](result, input)
            }

            XDropLastWhile.prototype.retain = function(result, input) {
              this.retained.push(input)
              return result
            }

            return XDropLastWhile
          })()

        var _xdropLastWhile =
          /*#__PURE__*/
          (0, _curry.default)(function _xdropLastWhile(fn, xf) {
            return new XDropLastWhile(fn, xf)
          })

        var _default = _xdropLastWhile
        exports.default = _default
      },
      {
        './_curry2.js': '../node_modules/ramda/es/internal/_curry2.js',
        './_reduce.js': '../node_modules/ramda/es/internal/_reduce.js',
        './_xfBase.js': '../node_modules/ramda/es/internal/_xfBase.js',
      },
    ],
    '../node_modules/ramda/es/dropLastWhile.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        var _dispatchable2 = _interopRequireDefault(
          require('./internal/_dispatchable.js'),
        )

        var _dropLastWhile2 = _interopRequireDefault(
          require('./internal/_dropLastWhile.js'),
        )

        var _xdropLastWhile2 = _interopRequireDefault(
          require('./internal/_xdropLastWhile.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns a new list excluding all the tailing elements of a given list which
         * satisfy the supplied predicate function. It passes each value from the right
         * to the supplied predicate function, skipping elements until the predicate
         * function returns a `falsy` value. The predicate function is applied to one argument:
         * *(value)*.
         *
         * Acts as a transducer if a transformer is given in list position.
         *
         * @func
         * @memberOf R
         * @since v0.16.0
         * @category List
         * @sig (a -> Boolean) -> [a] -> [a]
         * @sig (a -> Boolean) -> String -> String
         * @param {Function} predicate The function to be called on each element
         * @param {Array} xs The collection to iterate over.
         * @return {Array} A new array without any trailing elements that return `falsy` values from the `predicate`.
         * @see R.takeLastWhile, R.addIndex, R.drop, R.dropWhile
         * @example
         *
         *      const lteThree = x => x <= 3;
         *
         *      R.dropLastWhile(lteThree, [1, 2, 3, 4, 3, 2, 1]); //=> [1, 2, 3, 4]
         *
         *      R.dropLastWhile(x => x !== 'd' , 'Ramda'); //=> 'Ramd'
         */
        var dropLastWhile =
          /*#__PURE__*/
          (0, _curry.default)(
            /*#__PURE__*/
            (0, _dispatchable2.default)(
              [],
              _xdropLastWhile2.default,
              _dropLastWhile2.default,
            ),
          )
        var _default = dropLastWhile
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
        './internal/_dispatchable.js':
          '../node_modules/ramda/es/internal/_dispatchable.js',
        './internal/_dropLastWhile.js':
          '../node_modules/ramda/es/internal/_dropLastWhile.js',
        './internal/_xdropLastWhile.js':
          '../node_modules/ramda/es/internal/_xdropLastWhile.js',
      },
    ],
    '../node_modules/ramda/es/internal/_xdropRepeatsWith.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(require('./_curry2.js'))

        var _xfBase2 = _interopRequireDefault(require('./_xfBase.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        var XDropRepeatsWith =
          /*#__PURE__*/
          (function() {
            function XDropRepeatsWith(pred, xf) {
              this.xf = xf
              this.pred = pred
              this.lastValue = undefined
              this.seenFirstValue = false
            }

            XDropRepeatsWith.prototype['@@transducer/init'] =
              _xfBase2.default.init
            XDropRepeatsWith.prototype['@@transducer/result'] =
              _xfBase2.default.result

            XDropRepeatsWith.prototype['@@transducer/step'] = function(
              result,
              input,
            ) {
              var sameAsLast = false

              if (!this.seenFirstValue) {
                this.seenFirstValue = true
              } else if (this.pred(this.lastValue, input)) {
                sameAsLast = true
              }

              this.lastValue = input
              return sameAsLast
                ? result
                : this.xf['@@transducer/step'](result, input)
            }

            return XDropRepeatsWith
          })()

        var _xdropRepeatsWith =
          /*#__PURE__*/
          (0, _curry.default)(function _xdropRepeatsWith(pred, xf) {
            return new XDropRepeatsWith(pred, xf)
          })

        var _default = _xdropRepeatsWith
        exports.default = _default
      },
      {
        './_curry2.js': '../node_modules/ramda/es/internal/_curry2.js',
        './_xfBase.js': '../node_modules/ramda/es/internal/_xfBase.js',
      },
    ],
    '../node_modules/ramda/es/last.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _nth = _interopRequireDefault(require('./nth.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns the last element of the given list or string.
         *
         * @func
         * @memberOf R
         * @since v0.1.4
         * @category List
         * @sig [a] -> a | Undefined
         * @sig String -> String
         * @param {*} list
         * @return {*}
         * @see R.init, R.head, R.tail
         * @example
         *
         *      R.last(['fi', 'fo', 'fum']); //=> 'fum'
         *      R.last([]); //=> undefined
         *
         *      R.last('abc'); //=> 'c'
         *      R.last(''); //=> ''
         */
        var last =
          /*#__PURE__*/
          (0, _nth.default)(-1)
        var _default = last
        exports.default = _default
      },
      { './nth.js': '../node_modules/ramda/es/nth.js' },
    ],
    '../node_modules/ramda/es/dropRepeatsWith.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        var _dispatchable2 = _interopRequireDefault(
          require('./internal/_dispatchable.js'),
        )

        var _xdropRepeatsWith2 = _interopRequireDefault(
          require('./internal/_xdropRepeatsWith.js'),
        )

        var _last = _interopRequireDefault(require('./last.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns a new list without any consecutively repeating elements. Equality is
         * determined by applying the supplied predicate to each pair of consecutive elements. The
         * first element in a series of equal elements will be preserved.
         *
         * Acts as a transducer if a transformer is given in list position.
         *
         * @func
         * @memberOf R
         * @since v0.14.0
         * @category List
         * @sig ((a, a) -> Boolean) -> [a] -> [a]
         * @param {Function} pred A predicate used to test whether two items are equal.
         * @param {Array} list The array to consider.
         * @return {Array} `list` without repeating elements.
         * @see R.transduce
         * @example
         *
         *      const l = [1, -1, 1, 3, 4, -4, -4, -5, 5, 3, 3];
         *      R.dropRepeatsWith(R.eqBy(Math.abs), l); //=> [1, 3, 4, -5, 3]
         */
        var dropRepeatsWith =
          /*#__PURE__*/
          (0, _curry.default)(
            /*#__PURE__*/
            (0, _dispatchable2.default)(
              [],
              _xdropRepeatsWith2.default,
              function dropRepeatsWith(pred, list) {
                var result = []
                var idx = 1
                var len = list.length

                if (len !== 0) {
                  result[0] = list[0]

                  while (idx < len) {
                    if (!pred((0, _last.default)(result), list[idx])) {
                      result[result.length] = list[idx]
                    }

                    idx += 1
                  }
                }

                return result
              },
            ),
          )
        var _default = dropRepeatsWith
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
        './internal/_dispatchable.js':
          '../node_modules/ramda/es/internal/_dispatchable.js',
        './internal/_xdropRepeatsWith.js':
          '../node_modules/ramda/es/internal/_xdropRepeatsWith.js',
        './last.js': '../node_modules/ramda/es/last.js',
      },
    ],
    '../node_modules/ramda/es/dropRepeats.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry1.js'),
        )

        var _dispatchable2 = _interopRequireDefault(
          require('./internal/_dispatchable.js'),
        )

        var _xdropRepeatsWith2 = _interopRequireDefault(
          require('./internal/_xdropRepeatsWith.js'),
        )

        var _dropRepeatsWith = _interopRequireDefault(
          require('./dropRepeatsWith.js'),
        )

        var _equals = _interopRequireDefault(require('./equals.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns a new list without any consecutively repeating elements.
         * [`R.equals`](#equals) is used to determine equality.
         *
         * Acts as a transducer if a transformer is given in list position.
         *
         * @func
         * @memberOf R
         * @since v0.14.0
         * @category List
         * @sig [a] -> [a]
         * @param {Array} list The array to consider.
         * @return {Array} `list` without repeating elements.
         * @see R.transduce
         * @example
         *
         *     R.dropRepeats([1, 1, 1, 2, 3, 4, 4, 2, 2]); //=> [1, 2, 3, 4, 2]
         */
        var dropRepeats =
          /*#__PURE__*/
          (0, _curry.default)(
            /*#__PURE__*/
            (0, _dispatchable2.default)(
              [],
              /*#__PURE__*/
              (0, _xdropRepeatsWith2.default)(_equals.default),
              /*#__PURE__*/
              (0, _dropRepeatsWith.default)(_equals.default),
            ),
          )
        var _default = dropRepeats
        exports.default = _default
      },
      {
        './internal/_curry1.js':
          '../node_modules/ramda/es/internal/_curry1.js',
        './internal/_dispatchable.js':
          '../node_modules/ramda/es/internal/_dispatchable.js',
        './internal/_xdropRepeatsWith.js':
          '../node_modules/ramda/es/internal/_xdropRepeatsWith.js',
        './dropRepeatsWith.js':
          '../node_modules/ramda/es/dropRepeatsWith.js',
        './equals.js': '../node_modules/ramda/es/equals.js',
      },
    ],
    '../node_modules/ramda/es/internal/_xdropWhile.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(require('./_curry2.js'))

        var _xfBase2 = _interopRequireDefault(require('./_xfBase.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        var XDropWhile =
          /*#__PURE__*/
          (function() {
            function XDropWhile(f, xf) {
              this.xf = xf
              this.f = f
            }

            XDropWhile.prototype['@@transducer/init'] =
              _xfBase2.default.init
            XDropWhile.prototype['@@transducer/result'] =
              _xfBase2.default.result

            XDropWhile.prototype['@@transducer/step'] = function(
              result,
              input,
            ) {
              if (this.f) {
                if (this.f(input)) {
                  return result
                }

                this.f = null
              }

              return this.xf['@@transducer/step'](result, input)
            }

            return XDropWhile
          })()

        var _xdropWhile =
          /*#__PURE__*/
          (0, _curry.default)(function _xdropWhile(f, xf) {
            return new XDropWhile(f, xf)
          })

        var _default = _xdropWhile
        exports.default = _default
      },
      {
        './_curry2.js': '../node_modules/ramda/es/internal/_curry2.js',
        './_xfBase.js': '../node_modules/ramda/es/internal/_xfBase.js',
      },
    ],
    '../node_modules/ramda/es/dropWhile.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        var _dispatchable2 = _interopRequireDefault(
          require('./internal/_dispatchable.js'),
        )

        var _xdropWhile2 = _interopRequireDefault(
          require('./internal/_xdropWhile.js'),
        )

        var _slice = _interopRequireDefault(require('./slice.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns a new list excluding the leading elements of a given list which
         * satisfy the supplied predicate function. It passes each value to the supplied
         * predicate function, skipping elements while the predicate function returns
         * `true`. The predicate function is applied to one argument: *(value)*.
         *
         * Dispatches to the `dropWhile` method of the second argument, if present.
         *
         * Acts as a transducer if a transformer is given in list position.
         *
         * @func
         * @memberOf R
         * @since v0.9.0
         * @category List
         * @sig (a -> Boolean) -> [a] -> [a]
         * @sig (a -> Boolean) -> String -> String
         * @param {Function} fn The function called per iteration.
         * @param {Array} xs The collection to iterate over.
         * @return {Array} A new array.
         * @see R.takeWhile, R.transduce, R.addIndex
         * @example
         *
         *      const lteTwo = x => x <= 2;
         *
         *      R.dropWhile(lteTwo, [1, 2, 3, 4, 3, 2, 1]); //=> [3, 4, 3, 2, 1]
         *
         *      R.dropWhile(x => x !== 'd' , 'Ramda'); //=> 'da'
         */
        var dropWhile =
          /*#__PURE__*/
          (0, _curry.default)(
            /*#__PURE__*/
            (0, _dispatchable2.default)(
              ['dropWhile'],
              _xdropWhile2.default,
              function dropWhile(pred, xs) {
                var idx = 0
                var len = xs.length

                while (idx < len && pred(xs[idx])) {
                  idx += 1
                }

                return (0, _slice.default)(idx, Infinity, xs)
              },
            ),
          )
        var _default = dropWhile
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
        './internal/_dispatchable.js':
          '../node_modules/ramda/es/internal/_dispatchable.js',
        './internal/_xdropWhile.js':
          '../node_modules/ramda/es/internal/_xdropWhile.js',
        './slice.js': '../node_modules/ramda/es/slice.js',
      },
    ],
    '../node_modules/ramda/es/or.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns `true` if one or both of its arguments are `true`. Returns `false`
         * if both arguments are `false`.
         *
         * @func
         * @memberOf R
         * @since v0.1.0
         * @category Logic
         * @sig a -> b -> a | b
         * @param {Any} a
         * @param {Any} b
         * @return {Any} the first argument if truthy, otherwise the second argument.
         * @see R.either
         * @example
         *
         *      R.or(true, true); //=> true
         *      R.or(true, false); //=> true
         *      R.or(false, true); //=> true
         *      R.or(false, false); //=> false
         */
        var or =
          /*#__PURE__*/
          (0, _curry.default)(function or(a, b) {
            return a || b
          })
        var _default = or
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
      },
    ],
    '../node_modules/ramda/es/either.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        var _isFunction2 = _interopRequireDefault(
          require('./internal/_isFunction.js'),
        )

        var _lift = _interopRequireDefault(require('./lift.js'))

        var _or = _interopRequireDefault(require('./or.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * A function wrapping calls to the two functions in an `||` operation,
         * returning the result of the first function if it is truth-y and the result
         * of the second function otherwise. Note that this is short-circuited,
         * meaning that the second function will not be invoked if the first returns a
         * truth-y value.
         *
         * In addition to functions, `R.either` also accepts any fantasy-land compatible
         * applicative functor.
         *
         * @func
         * @memberOf R
         * @since v0.12.0
         * @category Logic
         * @sig (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)
         * @param {Function} f a predicate
         * @param {Function} g another predicate
         * @return {Function} a function that applies its arguments to `f` and `g` and `||`s their outputs together.
         * @see R.or
         * @example
         *
         *      const gt10 = x => x > 10;
         *      const even = x => x % 2 === 0;
         *      const f = R.either(gt10, even);
         *      f(101); //=> true
         *      f(8); //=> true
         *
         *      R.either(Maybe.Just(false), Maybe.Just(55)); // => Maybe.Just(55)
         *      R.either([false, false, 'a'], [11]) // => [11, 11, "a"]
         */
        var either =
          /*#__PURE__*/
          (0, _curry.default)(function either(f, g) {
            return (0, _isFunction2.default)(f)
              ? function _either() {
                  return (
                    f.apply(this, arguments) || g.apply(this, arguments)
                  )
                }
              : (0, _lift.default)(_or.default)(f, g)
          })
        var _default = either
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
        './internal/_isFunction.js':
          '../node_modules/ramda/es/internal/_isFunction.js',
        './lift.js': '../node_modules/ramda/es/lift.js',
        './or.js': '../node_modules/ramda/es/or.js',
      },
    ],
    '../node_modules/ramda/es/empty.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry1.js'),
        )

        var _isArguments2 = _interopRequireDefault(
          require('./internal/_isArguments.js'),
        )

        var _isArray2 = _interopRequireDefault(
          require('./internal/_isArray.js'),
        )

        var _isObject2 = _interopRequireDefault(
          require('./internal/_isObject.js'),
        )

        var _isString2 = _interopRequireDefault(
          require('./internal/_isString.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns the empty value of its argument's type. Ramda defines the empty
         * value of Array (`[]`), Object (`{}`), String (`''`), and Arguments. Other
         * types are supported if they define `<Type>.empty`,
         * `<Type>.prototype.empty` or implement the
         * [FantasyLand Monoid spec](https://github.com/fantasyland/fantasy-land#monoid).
         *
         * Dispatches to the `empty` method of the first argument, if present.
         *
         * @func
         * @memberOf R
         * @since v0.3.0
         * @category Function
         * @sig a -> a
         * @param {*} x
         * @return {*}
         * @example
         *
         *      R.empty(Just(42));      //=> Nothing()
         *      R.empty([1, 2, 3]);     //=> []
         *      R.empty('unicorns');    //=> ''
         *      R.empty({x: 1, y: 2});  //=> {}
         */
        var empty =
          /*#__PURE__*/
          (0, _curry.default)(function empty(x) {
            return x != null &&
              typeof x['fantasy-land/empty'] === 'function'
              ? x['fantasy-land/empty']()
              : x != null &&
                x.constructor != null &&
                typeof x.constructor['fantasy-land/empty'] === 'function'
              ? x.constructor['fantasy-land/empty']()
              : x != null && typeof x.empty === 'function'
              ? x.empty()
              : x != null &&
                x.constructor != null &&
                typeof x.constructor.empty === 'function'
              ? x.constructor.empty()
              : (0, _isArray2.default)(x)
              ? []
              : (0, _isString2.default)(x)
              ? ''
              : (0, _isObject2.default)(x)
              ? {}
              : (0, _isArguments2.default)(x)
              ? (function() {
                  return arguments
                })()
              : void 0 // else
          })
        var _default = empty
        exports.default = _default
      },
      {
        './internal/_curry1.js':
          '../node_modules/ramda/es/internal/_curry1.js',
        './internal/_isArguments.js':
          '../node_modules/ramda/es/internal/_isArguments.js',
        './internal/_isArray.js':
          '../node_modules/ramda/es/internal/_isArray.js',
        './internal/_isObject.js':
          '../node_modules/ramda/es/internal/_isObject.js',
        './internal/_isString.js':
          '../node_modules/ramda/es/internal/_isString.js',
      },
    ],
    '../node_modules/ramda/es/takeLast.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        var _drop = _interopRequireDefault(require('./drop.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns a new list containing the last `n` elements of the given list.
         * If `n > list.length`, returns a list of `list.length` elements.
         *
         * @func
         * @memberOf R
         * @since v0.16.0
         * @category List
         * @sig Number -> [a] -> [a]
         * @sig Number -> String -> String
         * @param {Number} n The number of elements to return.
         * @param {Array} xs The collection to consider.
         * @return {Array}
         * @see R.dropLast
         * @example
         *
         *      R.takeLast(1, ['foo', 'bar', 'baz']); //=> ['baz']
         *      R.takeLast(2, ['foo', 'bar', 'baz']); //=> ['bar', 'baz']
         *      R.takeLast(3, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']
         *      R.takeLast(4, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']
         *      R.takeLast(3, 'ramda');               //=> 'mda'
         */
        var takeLast =
          /*#__PURE__*/
          (0, _curry.default)(function takeLast(n, xs) {
            return (0, _drop.default)(n >= 0 ? xs.length - n : 0, xs)
          })
        var _default = takeLast
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
        './drop.js': '../node_modules/ramda/es/drop.js',
      },
    ],
    '../node_modules/ramda/es/endsWith.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        var _equals = _interopRequireDefault(require('./equals.js'))

        var _takeLast = _interopRequireDefault(require('./takeLast.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Checks if a list ends with the provided sublist.
         *
         * Similarly, checks if a string ends with the provided substring.
         *
         * @func
         * @memberOf R
         * @since v0.24.0
         * @category List
         * @sig [a] -> [a] -> Boolean
         * @sig String -> String -> Boolean
         * @param {*} suffix
         * @param {*} list
         * @return {Boolean}
         * @see R.startsWith
         * @example
         *
         *      R.endsWith('c', 'abc')                //=> true
         *      R.endsWith('b', 'abc')                //=> false
         *      R.endsWith(['c'], ['a', 'b', 'c'])    //=> true
         *      R.endsWith(['b'], ['a', 'b', 'c'])    //=> false
         */
        var endsWith =
          /*#__PURE__*/
          (0, _curry.default)(function(suffix, list) {
            return (0,
            _equals.default)((0, _takeLast.default)(suffix.length, list), suffix)
          })
        var _default = endsWith
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
        './equals.js': '../node_modules/ramda/es/equals.js',
        './takeLast.js': '../node_modules/ramda/es/takeLast.js',
      },
    ],
    '../node_modules/ramda/es/eqBy.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry3.js'),
        )

        var _equals = _interopRequireDefault(require('./equals.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Takes a function and two values in its domain and returns `true` if the
         * values map to the same value in the codomain; `false` otherwise.
         *
         * @func
         * @memberOf R
         * @since v0.18.0
         * @category Relation
         * @sig (a -> b) -> a -> a -> Boolean
         * @param {Function} f
         * @param {*} x
         * @param {*} y
         * @return {Boolean}
         * @example
         *
         *      R.eqBy(Math.abs, 5, -5); //=> true
         */
        var eqBy =
          /*#__PURE__*/
          (0, _curry.default)(function eqBy(f, x, y) {
            return (0, _equals.default)(f(x), f(y))
          })
        var _default = eqBy
        exports.default = _default
      },
      {
        './internal/_curry3.js':
          '../node_modules/ramda/es/internal/_curry3.js',
        './equals.js': '../node_modules/ramda/es/equals.js',
      },
    ],
    '../node_modules/ramda/es/eqProps.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry3.js'),
        )

        var _equals = _interopRequireDefault(require('./equals.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Reports whether two objects have the same value, in [`R.equals`](#equals)
         * terms, for the specified property. Useful as a curried predicate.
         *
         * @func
         * @memberOf R
         * @since v0.1.0
         * @category Object
         * @sig k -> {k: v} -> {k: v} -> Boolean
         * @param {String} prop The name of the property to compare
         * @param {Object} obj1
         * @param {Object} obj2
         * @return {Boolean}
         *
         * @example
         *
         *      const o1 = { a: 1, b: 2, c: 3, d: 4 };
         *      const o2 = { a: 10, b: 20, c: 3, d: 40 };
         *      R.eqProps('a', o1, o2); //=> false
         *      R.eqProps('c', o1, o2); //=> true
         */
        var eqProps =
          /*#__PURE__*/
          (0, _curry.default)(function eqProps(prop, obj1, obj2) {
            return (0, _equals.default)(obj1[prop], obj2[prop])
          })
        var _default = eqProps
        exports.default = _default
      },
      {
        './internal/_curry3.js':
          '../node_modules/ramda/es/internal/_curry3.js',
        './equals.js': '../node_modules/ramda/es/equals.js',
      },
    ],
    '../node_modules/ramda/es/evolve.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Creates a new object by recursively evolving a shallow copy of `object`,
         * according to the `transformation` functions. All non-primitive properties
         * are copied by reference.
         *
         * A `transformation` function will not be invoked if its corresponding key
         * does not exist in the evolved object.
         *
         * @func
         * @memberOf R
         * @since v0.9.0
         * @category Object
         * @sig {k: (v -> v)} -> {k: v} -> {k: v}
         * @param {Object} transformations The object specifying transformation functions to apply
         *        to the object.
         * @param {Object} object The object to be transformed.
         * @return {Object} The transformed object.
         * @example
         *
         *      const tomato = {firstName: '  Tomato ', data: {elapsed: 100, remaining: 1400}, id:123};
         *      const transformations = {
         *        firstName: R.trim,
         *        lastName: R.trim, // Will not get invoked.
         *        data: {elapsed: R.add(1), remaining: R.add(-1)}
         *      };
         *      R.evolve(transformations, tomato); //=> {firstName: 'Tomato', data: {elapsed: 101, remaining: 1399}, id:123}
         */
        var evolve =
          /*#__PURE__*/
          (0, _curry.default)(function evolve(transformations, object) {
            var result = object instanceof Array ? [] : {}
            var transformation, key, type

            for (key in object) {
              transformation = transformations[key]
              type = typeof transformation
              result[key] =
                type === 'function'
                  ? transformation(object[key])
                  : transformation && type === 'object'
                  ? evolve(transformation, object[key])
                  : object[key]
            }

            return result
          })
        var _default = evolve
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
      },
    ],
    '../node_modules/ramda/es/internal/_xfind.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(require('./_curry2.js'))

        var _reduced2 = _interopRequireDefault(require('./_reduced.js'))

        var _xfBase2 = _interopRequireDefault(require('./_xfBase.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        var XFind =
          /*#__PURE__*/
          (function() {
            function XFind(f, xf) {
              this.xf = xf
              this.f = f
              this.found = false
            }

            XFind.prototype['@@transducer/init'] = _xfBase2.default.init

            XFind.prototype['@@transducer/result'] = function(result) {
              if (!this.found) {
                result = this.xf['@@transducer/step'](result, void 0)
              }

              return this.xf['@@transducer/result'](result)
            }

            XFind.prototype['@@transducer/step'] = function(
              result,
              input,
            ) {
              if (this.f(input)) {
                this.found = true
                result = (0, _reduced2.default)(
                  this.xf['@@transducer/step'](result, input),
                )
              }

              return result
            }

            return XFind
          })()

        var _xfind =
          /*#__PURE__*/
          (0, _curry.default)(function _xfind(f, xf) {
            return new XFind(f, xf)
          })

        var _default = _xfind
        exports.default = _default
      },
      {
        './_curry2.js': '../node_modules/ramda/es/internal/_curry2.js',
        './_reduced.js': '../node_modules/ramda/es/internal/_reduced.js',
        './_xfBase.js': '../node_modules/ramda/es/internal/_xfBase.js',
      },
    ],
    '../node_modules/ramda/es/find.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        var _dispatchable2 = _interopRequireDefault(
          require('./internal/_dispatchable.js'),
        )

        var _xfind2 = _interopRequireDefault(
          require('./internal/_xfind.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns the first element of the list which matches the predicate, or
         * `undefined` if no element matches.
         *
         * Dispatches to the `find` method of the second argument, if present.
         *
         * Acts as a transducer if a transformer is given in list position.
         *
         * @func
         * @memberOf R
         * @since v0.1.0
         * @category List
         * @sig (a -> Boolean) -> [a] -> a | undefined
         * @param {Function} fn The predicate function used to determine if the element is the
         *        desired one.
         * @param {Array} list The array to consider.
         * @return {Object} The element found, or `undefined`.
         * @see R.transduce
         * @example
         *
         *      const xs = [{a: 1}, {a: 2}, {a: 3}];
         *      R.find(R.propEq('a', 2))(xs); //=> {a: 2}
         *      R.find(R.propEq('a', 4))(xs); //=> undefined
         */
        var find =
          /*#__PURE__*/
          (0, _curry.default)(
            /*#__PURE__*/
            (0, _dispatchable2.default)(
              ['find'],
              _xfind2.default,
              function find(fn, list) {
                var idx = 0
                var len = list.length

                while (idx < len) {
                  if (fn(list[idx])) {
                    return list[idx]
                  }

                  idx += 1
                }
              },
            ),
          )
        var _default = find
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
        './internal/_dispatchable.js':
          '../node_modules/ramda/es/internal/_dispatchable.js',
        './internal/_xfind.js':
          '../node_modules/ramda/es/internal/_xfind.js',
      },
    ],
    '../node_modules/ramda/es/internal/_xfindIndex.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(require('./_curry2.js'))

        var _reduced2 = _interopRequireDefault(require('./_reduced.js'))

        var _xfBase2 = _interopRequireDefault(require('./_xfBase.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        var XFindIndex =
          /*#__PURE__*/
          (function() {
            function XFindIndex(f, xf) {
              this.xf = xf
              this.f = f
              this.idx = -1
              this.found = false
            }

            XFindIndex.prototype['@@transducer/init'] =
              _xfBase2.default.init

            XFindIndex.prototype['@@transducer/result'] = function(
              result,
            ) {
              if (!this.found) {
                result = this.xf['@@transducer/step'](result, -1)
              }

              return this.xf['@@transducer/result'](result)
            }

            XFindIndex.prototype['@@transducer/step'] = function(
              result,
              input,
            ) {
              this.idx += 1

              if (this.f(input)) {
                this.found = true
                result = (0, _reduced2.default)(
                  this.xf['@@transducer/step'](result, this.idx),
                )
              }

              return result
            }

            return XFindIndex
          })()

        var _xfindIndex =
          /*#__PURE__*/
          (0, _curry.default)(function _xfindIndex(f, xf) {
            return new XFindIndex(f, xf)
          })

        var _default = _xfindIndex
        exports.default = _default
      },
      {
        './_curry2.js': '../node_modules/ramda/es/internal/_curry2.js',
        './_reduced.js': '../node_modules/ramda/es/internal/_reduced.js',
        './_xfBase.js': '../node_modules/ramda/es/internal/_xfBase.js',
      },
    ],
    '../node_modules/ramda/es/findIndex.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        var _dispatchable2 = _interopRequireDefault(
          require('./internal/_dispatchable.js'),
        )

        var _xfindIndex2 = _interopRequireDefault(
          require('./internal/_xfindIndex.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns the index of the first element of the list which matches the
         * predicate, or `-1` if no element matches.
         *
         * Acts as a transducer if a transformer is given in list position.
         *
         * @func
         * @memberOf R
         * @since v0.1.1
         * @category List
         * @sig (a -> Boolean) -> [a] -> Number
         * @param {Function} fn The predicate function used to determine if the element is the
         * desired one.
         * @param {Array} list The array to consider.
         * @return {Number} The index of the element found, or `-1`.
         * @see R.transduce
         * @example
         *
         *      const xs = [{a: 1}, {a: 2}, {a: 3}];
         *      R.findIndex(R.propEq('a', 2))(xs); //=> 1
         *      R.findIndex(R.propEq('a', 4))(xs); //=> -1
         */
        var findIndex =
          /*#__PURE__*/
          (0, _curry.default)(
            /*#__PURE__*/
            (0, _dispatchable2.default)(
              [],
              _xfindIndex2.default,
              function findIndex(fn, list) {
                var idx = 0
                var len = list.length

                while (idx < len) {
                  if (fn(list[idx])) {
                    return idx
                  }

                  idx += 1
                }

                return -1
              },
            ),
          )
        var _default = findIndex
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
        './internal/_dispatchable.js':
          '../node_modules/ramda/es/internal/_dispatchable.js',
        './internal/_xfindIndex.js':
          '../node_modules/ramda/es/internal/_xfindIndex.js',
      },
    ],
    '../node_modules/ramda/es/internal/_xfindLast.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(require('./_curry2.js'))

        var _xfBase2 = _interopRequireDefault(require('./_xfBase.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        var XFindLast =
          /*#__PURE__*/
          (function() {
            function XFindLast(f, xf) {
              this.xf = xf
              this.f = f
            }

            XFindLast.prototype['@@transducer/init'] =
              _xfBase2.default.init

            XFindLast.prototype['@@transducer/result'] = function(result) {
              return this.xf['@@transducer/result'](
                this.xf['@@transducer/step'](result, this.last),
              )
            }

            XFindLast.prototype['@@transducer/step'] = function(
              result,
              input,
            ) {
              if (this.f(input)) {
                this.last = input
              }

              return result
            }

            return XFindLast
          })()

        var _xfindLast =
          /*#__PURE__*/
          (0, _curry.default)(function _xfindLast(f, xf) {
            return new XFindLast(f, xf)
          })

        var _default = _xfindLast
        exports.default = _default
      },
      {
        './_curry2.js': '../node_modules/ramda/es/internal/_curry2.js',
        './_xfBase.js': '../node_modules/ramda/es/internal/_xfBase.js',
      },
    ],
    '../node_modules/ramda/es/findLast.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        var _dispatchable2 = _interopRequireDefault(
          require('./internal/_dispatchable.js'),
        )

        var _xfindLast2 = _interopRequireDefault(
          require('./internal/_xfindLast.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns the last element of the list which matches the predicate, or
         * `undefined` if no element matches.
         *
         * Acts as a transducer if a transformer is given in list position.
         *
         * @func
         * @memberOf R
         * @since v0.1.1
         * @category List
         * @sig (a -> Boolean) -> [a] -> a | undefined
         * @param {Function} fn The predicate function used to determine if the element is the
         * desired one.
         * @param {Array} list The array to consider.
         * @return {Object} The element found, or `undefined`.
         * @see R.transduce
         * @example
         *
         *      const xs = [{a: 1, b: 0}, {a:1, b: 1}];
         *      R.findLast(R.propEq('a', 1))(xs); //=> {a: 1, b: 1}
         *      R.findLast(R.propEq('a', 4))(xs); //=> undefined
         */
        var findLast =
          /*#__PURE__*/
          (0, _curry.default)(
            /*#__PURE__*/
            (0, _dispatchable2.default)(
              [],
              _xfindLast2.default,
              function findLast(fn, list) {
                var idx = list.length - 1

                while (idx >= 0) {
                  if (fn(list[idx])) {
                    return list[idx]
                  }

                  idx -= 1
                }
              },
            ),
          )
        var _default = findLast
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
        './internal/_dispatchable.js':
          '../node_modules/ramda/es/internal/_dispatchable.js',
        './internal/_xfindLast.js':
          '../node_modules/ramda/es/internal/_xfindLast.js',
      },
    ],
    '../node_modules/ramda/es/internal/_xfindLastIndex.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(require('./_curry2.js'))

        var _xfBase2 = _interopRequireDefault(require('./_xfBase.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        var XFindLastIndex =
          /*#__PURE__*/
          (function() {
            function XFindLastIndex(f, xf) {
              this.xf = xf
              this.f = f
              this.idx = -1
              this.lastIdx = -1
            }

            XFindLastIndex.prototype['@@transducer/init'] =
              _xfBase2.default.init

            XFindLastIndex.prototype['@@transducer/result'] = function(
              result,
            ) {
              return this.xf['@@transducer/result'](
                this.xf['@@transducer/step'](result, this.lastIdx),
              )
            }

            XFindLastIndex.prototype['@@transducer/step'] = function(
              result,
              input,
            ) {
              this.idx += 1

              if (this.f(input)) {
                this.lastIdx = this.idx
              }

              return result
            }

            return XFindLastIndex
          })()

        var _xfindLastIndex =
          /*#__PURE__*/
          (0, _curry.default)(function _xfindLastIndex(f, xf) {
            return new XFindLastIndex(f, xf)
          })

        var _default = _xfindLastIndex
        exports.default = _default
      },
      {
        './_curry2.js': '../node_modules/ramda/es/internal/_curry2.js',
        './_xfBase.js': '../node_modules/ramda/es/internal/_xfBase.js',
      },
    ],
    '../node_modules/ramda/es/findLastIndex.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        var _dispatchable2 = _interopRequireDefault(
          require('./internal/_dispatchable.js'),
        )

        var _xfindLastIndex2 = _interopRequireDefault(
          require('./internal/_xfindLastIndex.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns the index of the last element of the list which matches the
         * predicate, or `-1` if no element matches.
         *
         * Acts as a transducer if a transformer is given in list position.
         *
         * @func
         * @memberOf R
         * @since v0.1.1
         * @category List
         * @sig (a -> Boolean) -> [a] -> Number
         * @param {Function} fn The predicate function used to determine if the element is the
         * desired one.
         * @param {Array} list The array to consider.
         * @return {Number} The index of the element found, or `-1`.
         * @see R.transduce
         * @example
         *
         *      const xs = [{a: 1, b: 0}, {a:1, b: 1}];
         *      R.findLastIndex(R.propEq('a', 1))(xs); //=> 1
         *      R.findLastIndex(R.propEq('a', 4))(xs); //=> -1
         */
        var findLastIndex =
          /*#__PURE__*/
          (0, _curry.default)(
            /*#__PURE__*/
            (0, _dispatchable2.default)(
              [],
              _xfindLastIndex2.default,
              function findLastIndex(fn, list) {
                var idx = list.length - 1

                while (idx >= 0) {
                  if (fn(list[idx])) {
                    return idx
                  }

                  idx -= 1
                }

                return -1
              },
            ),
          )
        var _default = findLastIndex
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
        './internal/_dispatchable.js':
          '../node_modules/ramda/es/internal/_dispatchable.js',
        './internal/_xfindLastIndex.js':
          '../node_modules/ramda/es/internal/_xfindLastIndex.js',
      },
    ],
    '../node_modules/ramda/es/flatten.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry1.js'),
        )

        var _makeFlat2 = _interopRequireDefault(
          require('./internal/_makeFlat.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns a new list by pulling every item out of it (and all its sub-arrays)
         * and putting them in a new array, depth-first.
         *
         * @func
         * @memberOf R
         * @since v0.1.0
         * @category List
         * @sig [a] -> [b]
         * @param {Array} list The array to consider.
         * @return {Array} The flattened list.
         * @see R.unnest
         * @example
         *
         *      R.flatten([1, 2, [3, 4], 5, [6, [7, 8, [9, [10, 11], 12]]]]);
         *      //=> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
         */
        var flatten =
          /*#__PURE__*/
          (0, _curry.default)(
            /*#__PURE__*/
            (0, _makeFlat2.default)(true),
          )
        var _default = flatten
        exports.default = _default
      },
      {
        './internal/_curry1.js':
          '../node_modules/ramda/es/internal/_curry1.js',
        './internal/_makeFlat.js':
          '../node_modules/ramda/es/internal/_makeFlat.js',
      },
    ],
    '../node_modules/ramda/es/flip.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry1.js'),
        )

        var _curryN = _interopRequireDefault(require('./curryN.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns a new function much like the supplied one, except that the first two
         * arguments' order is reversed.
         *
         * @func
         * @memberOf R
         * @since v0.1.0
         * @category Function
         * @sig ((a, b, c, ...) -> z) -> (b -> a -> c -> ... -> z)
         * @param {Function} fn The function to invoke with its first two parameters reversed.
         * @return {*} The result of invoking `fn` with its first two parameters' order reversed.
         * @example
         *
         *      const mergeThree = (a, b, c) => [].concat(a, b, c);
         *
         *      mergeThree(1, 2, 3); //=> [1, 2, 3]
         *
         *      R.flip(mergeThree)(1, 2, 3); //=> [2, 1, 3]
         * @symb R.flip(f)(a, b, c) = f(b, a, c)
         */
        var flip =
          /*#__PURE__*/
          (0, _curry.default)(function flip(fn) {
            return (0, _curryN.default)(fn.length, function(a, b) {
              var args = Array.prototype.slice.call(arguments, 0)
              args[0] = b
              args[1] = a
              return fn.apply(this, args)
            })
          })
        var _default = flip
        exports.default = _default
      },
      {
        './internal/_curry1.js':
          '../node_modules/ramda/es/internal/_curry1.js',
        './curryN.js': '../node_modules/ramda/es/curryN.js',
      },
    ],
    '../node_modules/ramda/es/forEach.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _checkForMethod2 = _interopRequireDefault(
          require('./internal/_checkForMethod.js'),
        )

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Iterate over an input `list`, calling a provided function `fn` for each
         * element in the list.
         *
         * `fn` receives one argument: *(value)*.
         *
         * Note: `R.forEach` does not skip deleted or unassigned indices (sparse
         * arrays), unlike the native `Array.prototype.forEach` method. For more
         * details on this behavior, see:
         * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#Description
         *
         * Also note that, unlike `Array.prototype.forEach`, Ramda's `forEach` returns
         * the original array. In some libraries this function is named `each`.
         *
         * Dispatches to the `forEach` method of the second argument, if present.
         *
         * @func
         * @memberOf R
         * @since v0.1.1
         * @category List
         * @sig (a -> *) -> [a] -> [a]
         * @param {Function} fn The function to invoke. Receives one argument, `value`.
         * @param {Array} list The list to iterate over.
         * @return {Array} The original list.
         * @see R.addIndex
         * @example
         *
         *      const printXPlusFive = x => console.log(x + 5);
         *      R.forEach(printXPlusFive, [1, 2, 3]); //=> [1, 2, 3]
         *      // logs 6
         *      // logs 7
         *      // logs 8
         * @symb R.forEach(f, [a, b, c]) = [a, b, c]
         */
        var forEach =
          /*#__PURE__*/
          (0, _curry.default)(
            /*#__PURE__*/
            (0, _checkForMethod2.default)('forEach', function forEach(
              fn,
              list,
            ) {
              var len = list.length
              var idx = 0

              while (idx < len) {
                fn(list[idx])
                idx += 1
              }

              return list
            }),
          )
        var _default = forEach
        exports.default = _default
      },
      {
        './internal/_checkForMethod.js':
          '../node_modules/ramda/es/internal/_checkForMethod.js',
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
      },
    ],
    '../node_modules/ramda/es/forEachObjIndexed.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        var _keys = _interopRequireDefault(require('./keys.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Iterate over an input `object`, calling a provided function `fn` for each
         * key and value in the object.
         *
         * `fn` receives three argument: *(value, key, obj)*.
         *
         * @func
         * @memberOf R
         * @since v0.23.0
         * @category Object
         * @sig ((a, String, StrMap a) -> Any) -> StrMap a -> StrMap a
         * @param {Function} fn The function to invoke. Receives three argument, `value`, `key`, `obj`.
         * @param {Object} obj The object to iterate over.
         * @return {Object} The original object.
         * @example
         *
         *      const printKeyConcatValue = (value, key) => console.log(key + ':' + value);
         *      R.forEachObjIndexed(printKeyConcatValue, {x: 1, y: 2}); //=> {x: 1, y: 2}
         *      // logs x:1
         *      // logs y:2
         * @symb R.forEachObjIndexed(f, {x: a, y: b}) = {x: a, y: b}
         */
        var forEachObjIndexed =
          /*#__PURE__*/
          (0, _curry.default)(function forEachObjIndexed(fn, obj) {
            var keyList = (0, _keys.default)(obj)
            var idx = 0

            while (idx < keyList.length) {
              var key = keyList[idx]
              fn(obj[key], key, obj)
              idx += 1
            }

            return obj
          })
        var _default = forEachObjIndexed
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
        './keys.js': '../node_modules/ramda/es/keys.js',
      },
    ],
    '../node_modules/ramda/es/fromPairs.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry1.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Creates a new object from a list key-value pairs. If a key appears in
         * multiple pairs, the rightmost pair is included in the object.
         *
         * @func
         * @memberOf R
         * @since v0.3.0
         * @category List
         * @sig [[k,v]] -> {k: v}
         * @param {Array} pairs An array of two-element arrays that will be the keys and values of the output object.
         * @return {Object} The object made by pairing up `keys` and `values`.
         * @see R.toPairs, R.pair
         * @example
         *
         *      R.fromPairs([['a', 1], ['b', 2], ['c', 3]]); //=> {a: 1, b: 2, c: 3}
         */
        var fromPairs =
          /*#__PURE__*/
          (0, _curry.default)(function fromPairs(pairs) {
            var result = {}
            var idx = 0

            while (idx < pairs.length) {
              result[pairs[idx][0]] = pairs[idx][1]
              idx += 1
            }

            return result
          })
        var _default = fromPairs
        exports.default = _default
      },
      {
        './internal/_curry1.js':
          '../node_modules/ramda/es/internal/_curry1.js',
      },
    ],
    '../node_modules/ramda/es/groupBy.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _checkForMethod2 = _interopRequireDefault(
          require('./internal/_checkForMethod.js'),
        )

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        var _reduceBy = _interopRequireDefault(require('./reduceBy.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Splits a list into sub-lists stored in an object, based on the result of
         * calling a String-returning function on each element, and grouping the
         * results according to values returned.
         *
         * Dispatches to the `groupBy` method of the second argument, if present.
         *
         * Acts as a transducer if a transformer is given in list position.
         *
         * @func
         * @memberOf R
         * @since v0.1.0
         * @category List
         * @sig (a -> String) -> [a] -> {String: [a]}
         * @param {Function} fn Function :: a -> String
         * @param {Array} list The array to group
         * @return {Object} An object with the output of `fn` for keys, mapped to arrays of elements
         *         that produced that key when passed to `fn`.
         * @see R.reduceBy, R.transduce
         * @example
         *
         *      const byGrade = R.groupBy(function(student) {
         *        const score = student.score;
         *        return score < 65 ? 'F' :
         *               score < 70 ? 'D' :
         *               score < 80 ? 'C' :
         *               score < 90 ? 'B' : 'A';
         *      });
         *      const students = [{name: 'Abby', score: 84},
         *                      {name: 'Eddy', score: 58},
         *                      // ...
         *                      {name: 'Jack', score: 69}];
         *      byGrade(students);
         *      // {
         *      //   'A': [{name: 'Dianne', score: 99}],
         *      //   'B': [{name: 'Abby', score: 84}]
         *      //   // ...,
         *      //   'F': [{name: 'Eddy', score: 58}]
         *      // }
         */
        var groupBy =
          /*#__PURE__*/
          (0, _curry.default)(
            /*#__PURE__*/
            (0, _checkForMethod2.default)(
              'groupBy',
              /*#__PURE__*/
              (0, _reduceBy.default)(function(acc, item) {
                if (acc == null) {
                  acc = []
                }

                acc.push(item)
                return acc
              }, null),
            ),
          )
        var _default = groupBy
        exports.default = _default
      },
      {
        './internal/_checkForMethod.js':
          '../node_modules/ramda/es/internal/_checkForMethod.js',
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
        './reduceBy.js': '../node_modules/ramda/es/reduceBy.js',
      },
    ],
    '../node_modules/ramda/es/groupWith.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Takes a list and returns a list of lists where each sublist's elements are
         * all satisfied pairwise comparison according to the provided function.
         * Only adjacent elements are passed to the comparison function.
         *
         * @func
         * @memberOf R
         * @since v0.21.0
         * @category List
         * @sig ((a, a) → Boolean) → [a] → [[a]]
         * @param {Function} fn Function for determining whether two given (adjacent)
         *        elements should be in the same group
         * @param {Array} list The array to group. Also accepts a string, which will be
         *        treated as a list of characters.
         * @return {List} A list that contains sublists of elements,
         *         whose concatenations are equal to the original list.
         * @example
         *
         * R.groupWith(R.equals, [0, 1, 1, 2, 3, 5, 8, 13, 21])
         * //=> [[0], [1, 1], [2], [3], [5], [8], [13], [21]]
         *
         * R.groupWith((a, b) => a + 1 === b, [0, 1, 1, 2, 3, 5, 8, 13, 21])
         * //=> [[0, 1], [1, 2, 3], [5], [8], [13], [21]]
         *
         * R.groupWith((a, b) => a % 2 === b % 2, [0, 1, 1, 2, 3, 5, 8, 13, 21])
         * //=> [[0], [1, 1], [2], [3, 5], [8], [13, 21]]
         *
         * R.groupWith(R.eqBy(isVowel), 'aestiou')
         * //=> ['ae', 'st', 'iou']
         */
        var groupWith =
          /*#__PURE__*/
          (0, _curry.default)(function(fn, list) {
            var res = []
            var idx = 0
            var len = list.length

            while (idx < len) {
              var nextidx = idx + 1

              while (
                nextidx < len &&
                fn(list[nextidx - 1], list[nextidx])
              ) {
                nextidx += 1
              }

              res.push(list.slice(idx, nextidx))
              idx = nextidx
            }

            return res
          })
        var _default = groupWith
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
      },
    ],
    '../node_modules/ramda/es/gt.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns `true` if the first argument is greater than the second; `false`
         * otherwise.
         *
         * @func
         * @memberOf R
         * @since v0.1.0
         * @category Relation
         * @sig Ord a => a -> a -> Boolean
         * @param {*} a
         * @param {*} b
         * @return {Boolean}
         * @see R.lt
         * @example
         *
         *      R.gt(2, 1); //=> true
         *      R.gt(2, 2); //=> false
         *      R.gt(2, 3); //=> false
         *      R.gt('a', 'z'); //=> false
         *      R.gt('z', 'a'); //=> true
         */
        var gt =
          /*#__PURE__*/
          (0, _curry.default)(function gt(a, b) {
            return a > b
          })
        var _default = gt
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
      },
    ],
    '../node_modules/ramda/es/gte.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns `true` if the first argument is greater than or equal to the second;
         * `false` otherwise.
         *
         * @func
         * @memberOf R
         * @since v0.1.0
         * @category Relation
         * @sig Ord a => a -> a -> Boolean
         * @param {Number} a
         * @param {Number} b
         * @return {Boolean}
         * @see R.lte
         * @example
         *
         *      R.gte(2, 1); //=> true
         *      R.gte(2, 2); //=> true
         *      R.gte(2, 3); //=> false
         *      R.gte('a', 'z'); //=> false
         *      R.gte('z', 'a'); //=> true
         */
        var gte =
          /*#__PURE__*/
          (0, _curry.default)(function gte(a, b) {
            return a >= b
          })
        var _default = gte
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
      },
    ],
    '../node_modules/ramda/es/hasPath.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        var _has2 = _interopRequireDefault(require('./internal/_has.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns whether or not a path exists in an object. Only the object's
         * own properties are checked.
         *
         * @func
         * @memberOf R
         * @since v0.26.0
         * @category Object
         * @typedefn Idx = String | Int
         * @sig [Idx] -> {a} -> Boolean
         * @param {Array} path The path to use.
         * @param {Object} obj The object to check the path in.
         * @return {Boolean} Whether the path exists.
         * @see R.has
         * @example
         *
         *      R.hasPath(['a', 'b'], {a: {b: 2}});         // => true
         *      R.hasPath(['a', 'b'], {a: {b: undefined}}); // => true
         *      R.hasPath(['a', 'b'], {a: {c: 2}});         // => false
         *      R.hasPath(['a', 'b'], {});                  // => false
         */
        var hasPath =
          /*#__PURE__*/
          (0, _curry.default)(function hasPath(_path, obj) {
            if (_path.length === 0) {
              return false
            }

            var val = obj
            var idx = 0

            while (idx < _path.length) {
              if ((0, _has2.default)(_path[idx], val)) {
                val = val[_path[idx]]
                idx += 1
              } else {
                return false
              }
            }

            return true
          })
        var _default = hasPath
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
        './internal/_has.js': '../node_modules/ramda/es/internal/_has.js',
      },
    ],
    '../node_modules/ramda/es/has.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        var _hasPath = _interopRequireDefault(require('./hasPath.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns whether or not an object has an own property with the specified name
         *
         * @func
         * @memberOf R
         * @since v0.7.0
         * @category Object
         * @sig s -> {s: x} -> Boolean
         * @param {String} prop The name of the property to check for.
         * @param {Object} obj The object to query.
         * @return {Boolean} Whether the property exists.
         * @example
         *
         *      const hasName = R.has('name');
         *      hasName({name: 'alice'});   //=> true
         *      hasName({name: 'bob'});     //=> true
         *      hasName({});                //=> false
         *
         *      const point = {x: 0, y: 0};
         *      const pointHas = R.has(R.__, point);
         *      pointHas('x');  //=> true
         *      pointHas('y');  //=> true
         *      pointHas('z');  //=> false
         */
        var has =
          /*#__PURE__*/
          (0, _curry.default)(function has(prop, obj) {
            return (0, _hasPath.default)([prop], obj)
          })
        var _default = has
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
        './hasPath.js': '../node_modules/ramda/es/hasPath.js',
      },
    ],
    '../node_modules/ramda/es/hasIn.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns whether or not an object or its prototype chain has a property with
         * the specified name
         *
         * @func
         * @memberOf R
         * @since v0.7.0
         * @category Object
         * @sig s -> {s: x} -> Boolean
         * @param {String} prop The name of the property to check for.
         * @param {Object} obj The object to query.
         * @return {Boolean} Whether the property exists.
         * @example
         *
         *      function Rectangle(width, height) {
         *        this.width = width;
         *        this.height = height;
         *      }
         *      Rectangle.prototype.area = function() {
         *        return this.width * this.height;
         *      };
         *
         *      const square = new Rectangle(2, 2);
         *      R.hasIn('width', square);  //=> true
         *      R.hasIn('area', square);  //=> true
         */
        var hasIn =
          /*#__PURE__*/
          (0, _curry.default)(function hasIn(prop, obj) {
            return prop in obj
          })
        var _default = hasIn
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
      },
    ],
    '../node_modules/ramda/es/identical.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _objectIs2 = _interopRequireDefault(
          require('./internal/_objectIs.js'),
        )

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns true if its arguments are identical, false otherwise. Values are
         * identical if they reference the same memory. `NaN` is identical to `NaN`;
         * `0` and `-0` are not identical.
         *
         * Note this is merely a curried version of ES6 `Object.is`.
         *
         * @func
         * @memberOf R
         * @since v0.15.0
         * @category Relation
         * @sig a -> a -> Boolean
         * @param {*} a
         * @param {*} b
         * @return {Boolean}
         * @example
         *
         *      const o = {};
         *      R.identical(o, o); //=> true
         *      R.identical(1, 1); //=> true
         *      R.identical(1, '1'); //=> false
         *      R.identical([], []); //=> false
         *      R.identical(0, -0); //=> false
         *      R.identical(NaN, NaN); //=> true
         */
        var identical =
          /*#__PURE__*/
          (0, _curry.default)(_objectIs2.default)
        var _default = identical
        exports.default = _default
      },
      {
        './internal/_objectIs.js':
          '../node_modules/ramda/es/internal/_objectIs.js',
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
      },
    ],
    '../node_modules/ramda/es/ifElse.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry3.js'),
        )

        var _curryN = _interopRequireDefault(require('./curryN.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Creates a function that will process either the `onTrue` or the `onFalse`
         * function depending upon the result of the `condition` predicate.
         *
         * @func
         * @memberOf R
         * @since v0.8.0
         * @category Logic
         * @sig (*... -> Boolean) -> (*... -> *) -> (*... -> *) -> (*... -> *)
         * @param {Function} condition A predicate function
         * @param {Function} onTrue A function to invoke when the `condition` evaluates to a truthy value.
         * @param {Function} onFalse A function to invoke when the `condition` evaluates to a falsy value.
         * @return {Function} A new function that will process either the `onTrue` or the `onFalse`
         *                    function depending upon the result of the `condition` predicate.
         * @see R.unless, R.when, R.cond
         * @example
         *
         *      const incCount = R.ifElse(
         *        R.has('count'),
         *        R.over(R.lensProp('count'), R.inc),
         *        R.assoc('count', 1)
         *      );
         *      incCount({});           //=> { count: 1 }
         *      incCount({ count: 1 }); //=> { count: 2 }
         */
        var ifElse =
          /*#__PURE__*/
          (0, _curry.default)(function ifElse(condition, onTrue, onFalse) {
            return (0,
            _curryN.default)(Math.max(condition.length, onTrue.length, onFalse.length), function _ifElse() {
              return condition.apply(this, arguments)
                ? onTrue.apply(this, arguments)
                : onFalse.apply(this, arguments)
            })
          })
        var _default = ifElse
        exports.default = _default
      },
      {
        './internal/_curry3.js':
          '../node_modules/ramda/es/internal/_curry3.js',
        './curryN.js': '../node_modules/ramda/es/curryN.js',
      },
    ],
    '../node_modules/ramda/es/inc.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _add = _interopRequireDefault(require('./add.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Increments its argument.
         *
         * @func
         * @memberOf R
         * @since v0.9.0
         * @category Math
         * @sig Number -> Number
         * @param {Number} n
         * @return {Number} n + 1
         * @see R.dec
         * @example
         *
         *      R.inc(42); //=> 43
         */
        var inc =
          /*#__PURE__*/
          (0, _add.default)(1)
        var _default = inc
        exports.default = _default
      },
      { './add.js': '../node_modules/ramda/es/add.js' },
    ],
    '../node_modules/ramda/es/includes.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _includes2 = _interopRequireDefault(
          require('./internal/_includes.js'),
        )

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns `true` if the specified value is equal, in [`R.equals`](#equals)
         * terms, to at least one element of the given list; `false` otherwise.
         * Works also with strings.
         *
         * @func
         * @memberOf R
         * @since v0.1.0
         * @category List
         * @sig a -> [a] -> Boolean
         * @param {Object} a The item to compare against.
         * @param {Array} list The array to consider.
         * @return {Boolean} `true` if an equivalent item is in the list, `false` otherwise.
         * @see R.any
         * @example
         *
         *      R.includes(3, [1, 2, 3]); //=> true
         *      R.includes(4, [1, 2, 3]); //=> false
         *      R.includes({ name: 'Fred' }, [{ name: 'Fred' }]); //=> true
         *      R.includes([42], [[42]]); //=> true
         *      R.includes('ba', 'banana'); //=>true
         */
        var includes =
          /*#__PURE__*/
          (0, _curry.default)(_includes2.default)
        var _default = includes
        exports.default = _default
      },
      {
        './internal/_includes.js':
          '../node_modules/ramda/es/internal/_includes.js',
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
      },
    ],
    '../node_modules/ramda/es/indexBy.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _reduceBy = _interopRequireDefault(require('./reduceBy.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Given a function that generates a key, turns a list of objects into an
         * object indexing the objects by the given key. Note that if multiple
         * objects generate the same value for the indexing key only the last value
         * will be included in the generated object.
         *
         * Acts as a transducer if a transformer is given in list position.
         *
         * @func
         * @memberOf R
         * @since v0.19.0
         * @category List
         * @sig (a -> String) -> [{k: v}] -> {k: {k: v}}
         * @param {Function} fn Function :: a -> String
         * @param {Array} array The array of objects to index
         * @return {Object} An object indexing each array element by the given property.
         * @example
         *
         *      const list = [{id: 'xyz', title: 'A'}, {id: 'abc', title: 'B'}];
         *      R.indexBy(R.prop('id'), list);
         *      //=> {abc: {id: 'abc', title: 'B'}, xyz: {id: 'xyz', title: 'A'}}
         */
        var indexBy =
          /*#__PURE__*/
          (0, _reduceBy.default)(function(acc, elem) {
            return elem
          }, null)
        var _default = indexBy
        exports.default = _default
      },
      { './reduceBy.js': '../node_modules/ramda/es/reduceBy.js' },
    ],
    '../node_modules/ramda/es/indexOf.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        var _indexOf2 = _interopRequireDefault(
          require('./internal/_indexOf.js'),
        )

        var _isArray2 = _interopRequireDefault(
          require('./internal/_isArray.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns the position of the first occurrence of an item in an array, or -1
         * if the item is not included in the array. [`R.equals`](#equals) is used to
         * determine equality.
         *
         * @func
         * @memberOf R
         * @since v0.1.0
         * @category List
         * @sig a -> [a] -> Number
         * @param {*} target The item to find.
         * @param {Array} xs The array to search in.
         * @return {Number} the index of the target, or -1 if the target is not found.
         * @see R.lastIndexOf
         * @example
         *
         *      R.indexOf(3, [1,2,3,4]); //=> 2
         *      R.indexOf(10, [1,2,3,4]); //=> -1
         */
        var indexOf =
          /*#__PURE__*/
          (0, _curry.default)(function indexOf(target, xs) {
            return typeof xs.indexOf === 'function' &&
              !(0, _isArray2.default)(xs)
              ? xs.indexOf(target)
              : (0, _indexOf2.default)(xs, target, 0)
          })
        var _default = indexOf
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
        './internal/_indexOf.js':
          '../node_modules/ramda/es/internal/_indexOf.js',
        './internal/_isArray.js':
          '../node_modules/ramda/es/internal/_isArray.js',
      },
    ],
    '../node_modules/ramda/es/init.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _slice = _interopRequireDefault(require('./slice.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns all but the last element of the given list or string.
         *
         * @func
         * @memberOf R
         * @since v0.9.0
         * @category List
         * @sig [a] -> [a]
         * @sig String -> String
         * @param {*} list
         * @return {*}
         * @see R.last, R.head, R.tail
         * @example
         *
         *      R.init([1, 2, 3]);  //=> [1, 2]
         *      R.init([1, 2]);     //=> [1]
         *      R.init([1]);        //=> []
         *      R.init([]);         //=> []
         *
         *      R.init('abc');  //=> 'ab'
         *      R.init('ab');   //=> 'a'
         *      R.init('a');    //=> ''
         *      R.init('');     //=> ''
         */
        var init =
          /*#__PURE__*/
          (0, _slice.default)(0, -1)
        var _default = init
        exports.default = _default
      },
      { './slice.js': '../node_modules/ramda/es/slice.js' },
    ],
    '../node_modules/ramda/es/innerJoin.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _includesWith2 = _interopRequireDefault(
          require('./internal/_includesWith.js'),
        )

        var _curry = _interopRequireDefault(
          require('./internal/_curry3.js'),
        )

        var _filter2 = _interopRequireDefault(
          require('./internal/_filter.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Takes a predicate `pred`, a list `xs`, and a list `ys`, and returns a list
         * `xs'` comprising each of the elements of `xs` which is equal to one or more
         * elements of `ys` according to `pred`.
         *
         * `pred` must be a binary function expecting an element from each list.
         *
         * `xs`, `ys`, and `xs'` are treated as sets, semantically, so ordering should
         * not be significant, but since `xs'` is ordered the implementation guarantees
         * that its values are in the same order as they appear in `xs`. Duplicates are
         * not removed, so `xs'` may contain duplicates if `xs` contains duplicates.
         *
         * @func
         * @memberOf R
         * @since v0.24.0
         * @category Relation
         * @sig ((a, b) -> Boolean) -> [a] -> [b] -> [a]
         * @param {Function} pred
         * @param {Array} xs
         * @param {Array} ys
         * @return {Array}
         * @see R.intersection
         * @example
         *
         *      R.innerJoin(
         *        (record, id) => record.id === id,
         *        [{id: 824, name: 'Richie Furay'},
         *         {id: 956, name: 'Dewey Martin'},
         *         {id: 313, name: 'Bruce Palmer'},
         *         {id: 456, name: 'Stephen Stills'},
         *         {id: 177, name: 'Neil Young'}],
         *        [177, 456, 999]
         *      );
         *      //=> [{id: 456, name: 'Stephen Stills'}, {id: 177, name: 'Neil Young'}]
         */
        var innerJoin =
          /*#__PURE__*/
          (0, _curry.default)(function innerJoin(pred, xs, ys) {
            return (0, _filter2.default)(function(x) {
              return (0, _includesWith2.default)(pred, x, ys)
            }, xs)
          })
        var _default = innerJoin
        exports.default = _default
      },
      {
        './internal/_includesWith.js':
          '../node_modules/ramda/es/internal/_includesWith.js',
        './internal/_curry3.js':
          '../node_modules/ramda/es/internal/_curry3.js',
        './internal/_filter.js':
          '../node_modules/ramda/es/internal/_filter.js',
      },
    ],
    '../node_modules/ramda/es/insert.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry3.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
 * Inserts the supplied element into the list, at the specified `index`. _Note that

 * this is not destructive_: it returns a copy of the list with the changes.
 * <small>No lists have been harmed in the application of this function.</small>
 *
 * @func
 * @memberOf R
 * @since v0.2.2
 * @category List
 * @sig Number -> a -> [a] -> [a]
 * @param {Number} index The position to insert the element
 * @param {*} elt The element to insert into the Array
 * @param {Array} list The list to insert into
 * @return {Array} A new Array with `elt` inserted at `index`.
 * @example
 *
 *      R.insert(2, 'x', [1,2,3,4]); //=> [1,2,'x',3,4]
 */
        var insert =
          /*#__PURE__*/
          (0, _curry.default)(function insert(idx, elt, list) {
            idx = idx < list.length && idx >= 0 ? idx : list.length
            var result = Array.prototype.slice.call(list, 0)
            result.splice(idx, 0, elt)
            return result
          })
        var _default = insert
        exports.default = _default
      },
      {
        './internal/_curry3.js':
          '../node_modules/ramda/es/internal/_curry3.js',
      },
    ],
    '../node_modules/ramda/es/insertAll.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry3.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Inserts the sub-list into the list, at the specified `index`. _Note that this is not
         * destructive_: it returns a copy of the list with the changes.
         * <small>No lists have been harmed in the application of this function.</small>
         *
         * @func
         * @memberOf R
         * @since v0.9.0
         * @category List
         * @sig Number -> [a] -> [a] -> [a]
         * @param {Number} index The position to insert the sub-list
         * @param {Array} elts The sub-list to insert into the Array
         * @param {Array} list The list to insert the sub-list into
         * @return {Array} A new Array with `elts` inserted starting at `index`.
         * @example
         *
         *      R.insertAll(2, ['x','y','z'], [1,2,3,4]); //=> [1,2,'x','y','z',3,4]
         */
        var insertAll =
          /*#__PURE__*/
          (0, _curry.default)(function insertAll(idx, elts, list) {
            idx = idx < list.length && idx >= 0 ? idx : list.length
            return [].concat(
              Array.prototype.slice.call(list, 0, idx),
              elts,
              Array.prototype.slice.call(list, idx),
            )
          })
        var _default = insertAll
        exports.default = _default
      },
      {
        './internal/_curry3.js':
          '../node_modules/ramda/es/internal/_curry3.js',
      },
    ],
    '../node_modules/ramda/es/uniqBy.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _Set2 = _interopRequireDefault(require('./internal/_Set.js'))

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns a new list containing only one copy of each element in the original
         * list, based upon the value returned by applying the supplied function to
         * each list element. Prefers the first item if the supplied function produces
         * the same value on two items. [`R.equals`](#equals) is used for comparison.
         *
         * @func
         * @memberOf R
         * @since v0.16.0
         * @category List
         * @sig (a -> b) -> [a] -> [a]
         * @param {Function} fn A function used to produce a value to use during comparisons.
         * @param {Array} list The array to consider.
         * @return {Array} The list of unique items.
         * @example
         *
         *      R.uniqBy(Math.abs, [-1, -5, 2, 10, 1, 2]); //=> [-1, -5, 2, 10]
         */
        var uniqBy =
          /*#__PURE__*/
          (0, _curry.default)(function uniqBy(fn, list) {
            var set = new _Set2.default()
            var result = []
            var idx = 0
            var appliedItem, item

            while (idx < list.length) {
              item = list[idx]
              appliedItem = fn(item)

              if (set.add(appliedItem)) {
                result.push(item)
              }

              idx += 1
            }

            return result
          })
        var _default = uniqBy
        exports.default = _default
      },
      {
        './internal/_Set.js': '../node_modules/ramda/es/internal/_Set.js',
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
      },
    ],
    '../node_modules/ramda/es/uniq.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _identity = _interopRequireDefault(require('./identity.js'))

        var _uniqBy = _interopRequireDefault(require('./uniqBy.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns a new list containing only one copy of each element in the original
         * list. [`R.equals`](#equals) is used to determine equality.
         *
         * @func
         * @memberOf R
         * @since v0.1.0
         * @category List
         * @sig [a] -> [a]
         * @param {Array} list The array to consider.
         * @return {Array} The list of unique items.
         * @example
         *
         *      R.uniq([1, 1, 2, 1]); //=> [1, 2]
         *      R.uniq([1, '1']);     //=> [1, '1']
         *      R.uniq([[42], [42]]); //=> [[42]]
         */
        var uniq =
          /*#__PURE__*/
          (0, _uniqBy.default)(_identity.default)
        var _default = uniq
        exports.default = _default
      },
      {
        './identity.js': '../node_modules/ramda/es/identity.js',
        './uniqBy.js': '../node_modules/ramda/es/uniqBy.js',
      },
    ],
    '../node_modules/ramda/es/intersection.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _includes2 = _interopRequireDefault(
          require('./internal/_includes.js'),
        )

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        var _filter2 = _interopRequireDefault(
          require('./internal/_filter.js'),
        )

        var _flip = _interopRequireDefault(require('./flip.js'))

        var _uniq = _interopRequireDefault(require('./uniq.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Combines two lists into a set (i.e. no duplicates) composed of those
         * elements common to both lists.
         *
         * @func
         * @memberOf R
         * @since v0.1.0
         * @category Relation
         * @sig [*] -> [*] -> [*]
         * @param {Array} list1 The first list.
         * @param {Array} list2 The second list.
         * @return {Array} The list of elements found in both `list1` and `list2`.
         * @see R.innerJoin
         * @example
         *
         *      R.intersection([1,2,3,4], [7,6,5,4,3]); //=> [4, 3]
         */
        var intersection =
          /*#__PURE__*/
          (0, _curry.default)(function intersection(list1, list2) {
            var lookupList, filteredList

            if (list1.length > list2.length) {
              lookupList = list1
              filteredList = list2
            } else {
              lookupList = list2
              filteredList = list1
            }

            return (0,
            _uniq.default)((0, _filter2.default)((0, _flip.default)(_includes2.default)(lookupList), filteredList))
          })
        var _default = intersection
        exports.default = _default
      },
      {
        './internal/_includes.js':
          '../node_modules/ramda/es/internal/_includes.js',
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
        './internal/_filter.js':
          '../node_modules/ramda/es/internal/_filter.js',
        './flip.js': '../node_modules/ramda/es/flip.js',
        './uniq.js': '../node_modules/ramda/es/uniq.js',
      },
    ],
    '../node_modules/ramda/es/intersperse.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _checkForMethod2 = _interopRequireDefault(
          require('./internal/_checkForMethod.js'),
        )

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Creates a new list with the separator interposed between elements.
         *
         * Dispatches to the `intersperse` method of the second argument, if present.
         *
         * @func
         * @memberOf R
         * @since v0.14.0
         * @category List
         * @sig a -> [a] -> [a]
         * @param {*} separator The element to add to the list.
         * @param {Array} list The list to be interposed.
         * @return {Array} The new list.
         * @example
         *
         *      R.intersperse('a', ['b', 'n', 'n', 's']); //=> ['b', 'a', 'n', 'a', 'n', 'a', 's']
         */
        var intersperse =
          /*#__PURE__*/
          (0, _curry.default)(
            /*#__PURE__*/
            (0, _checkForMethod2.default)(
              'intersperse',
              function intersperse(separator, list) {
                var out = []
                var idx = 0
                var length = list.length

                while (idx < length) {
                  if (idx === length - 1) {
                    out.push(list[idx])
                  } else {
                    out.push(list[idx], separator)
                  }

                  idx += 1
                }

                return out
              },
            ),
          )
        var _default = intersperse
        exports.default = _default
      },
      {
        './internal/_checkForMethod.js':
          '../node_modules/ramda/es/internal/_checkForMethod.js',
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
      },
    ],
    '../node_modules/ramda/es/internal/_objectAssign.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _has2 = _interopRequireDefault(require('./_has.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        // Based on https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign
        function _objectAssign(target) {
          if (target == null) {
            throw new TypeError(
              'Cannot convert undefined or null to object',
            )
          }

          var output = Object(target)
          var idx = 1
          var length = arguments.length

          while (idx < length) {
            var source = arguments[idx]

            if (source != null) {
              for (var nextKey in source) {
                if ((0, _has2.default)(nextKey, source)) {
                  output[nextKey] = source[nextKey]
                }
              }
            }

            idx += 1
          }

          return output
        }

        var _default =
          typeof Object.assign === 'function'
            ? Object.assign
            : _objectAssign

        exports.default = _default
      },
      { './_has.js': '../node_modules/ramda/es/internal/_has.js' },
    ],
    '../node_modules/ramda/es/objOf.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Creates an object containing a single key:value pair.
         *
         * @func
         * @memberOf R
         * @since v0.18.0
         * @category Object
         * @sig String -> a -> {String:a}
         * @param {String} key
         * @param {*} val
         * @return {Object}
         * @see R.pair
         * @example
         *
         *      const matchPhrases = R.compose(
         *        R.objOf('must'),
         *        R.map(R.objOf('match_phrase'))
         *      );
         *      matchPhrases(['foo', 'bar', 'baz']); //=> {must: [{match_phrase: 'foo'}, {match_phrase: 'bar'}, {match_phrase: 'baz'}]}
         */
        var objOf =
          /*#__PURE__*/
          (0, _curry.default)(function objOf(key, val) {
            var obj = {}
            obj[key] = val
            return obj
          })
        var _default = objOf
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
      },
    ],
    '../node_modules/ramda/es/internal/_stepCat.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = _stepCat

        var _objectAssign2 = _interopRequireDefault(
          require('./_objectAssign.js'),
        )

        var _identity2 = _interopRequireDefault(require('./_identity.js'))

        var _isArrayLike2 = _interopRequireDefault(
          require('./_isArrayLike.js'),
        )

        var _isTransformer2 = _interopRequireDefault(
          require('./_isTransformer.js'),
        )

        var _objOf = _interopRequireDefault(require('../objOf.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        var _stepCatArray = {
          '@@transducer/init': Array,
          '@@transducer/step': function(xs, x) {
            xs.push(x)
            return xs
          },
          '@@transducer/result': _identity2.default,
        }
        var _stepCatString = {
          '@@transducer/init': String,
          '@@transducer/step': function(a, b) {
            return a + b
          },
          '@@transducer/result': _identity2.default,
        }
        var _stepCatObject = {
          '@@transducer/init': Object,
          '@@transducer/step': function(result, input) {
            return (0, _objectAssign2.default)(
              result,
              (0, _isArrayLike2.default)(input)
                ? (0, _objOf.default)(input[0], input[1])
                : input,
            )
          },
          '@@transducer/result': _identity2.default,
        }

        function _stepCat(obj) {
          if ((0, _isTransformer2.default)(obj)) {
            return obj
          }

          if ((0, _isArrayLike2.default)(obj)) {
            return _stepCatArray
          }

          if (typeof obj === 'string') {
            return _stepCatString
          }

          if (typeof obj === 'object') {
            return _stepCatObject
          }

          throw new Error('Cannot create transformer for ' + obj)
        }
      },
      {
        './_objectAssign.js':
          '../node_modules/ramda/es/internal/_objectAssign.js',
        './_identity.js': '../node_modules/ramda/es/internal/_identity.js',
        './_isArrayLike.js':
          '../node_modules/ramda/es/internal/_isArrayLike.js',
        './_isTransformer.js':
          '../node_modules/ramda/es/internal/_isTransformer.js',
        '../objOf.js': '../node_modules/ramda/es/objOf.js',
      },
    ],
    '../node_modules/ramda/es/into.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _clone2 = _interopRequireDefault(
          require('./internal/_clone.js'),
        )

        var _curry = _interopRequireDefault(
          require('./internal/_curry3.js'),
        )

        var _isTransformer2 = _interopRequireDefault(
          require('./internal/_isTransformer.js'),
        )

        var _reduce2 = _interopRequireDefault(
          require('./internal/_reduce.js'),
        )

        var _stepCat2 = _interopRequireDefault(
          require('./internal/_stepCat.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Transforms the items of the list with the transducer and appends the
         * transformed items to the accumulator using an appropriate iterator function
         * based on the accumulator type.
         *
         * The accumulator can be an array, string, object or a transformer. Iterated
         * items will be appended to arrays and concatenated to strings. Objects will
         * be merged directly or 2-item arrays will be merged as key, value pairs.
         *
         * The accumulator can also be a transformer object that provides a 2-arity
         * reducing iterator function, step, 0-arity initial value function, init, and
         * 1-arity result extraction function result. The step function is used as the
         * iterator function in reduce. The result function is used to convert the
         * final accumulator into the return type and in most cases is R.identity. The
         * init function is used to provide the initial accumulator.
         *
         * The iteration is performed with [`R.reduce`](#reduce) after initializing the
         * transducer.
         *
         * @func
         * @memberOf R
         * @since v0.12.0
         * @category List
         * @sig a -> (b -> b) -> [c] -> a
         * @param {*} acc The initial accumulator value.
         * @param {Function} xf The transducer function. Receives a transformer and returns a transformer.
         * @param {Array} list The list to iterate over.
         * @return {*} The final, accumulated value.
         * @see R.transduce
         * @example
         *
         *      const numbers = [1, 2, 3, 4];
         *      const transducer = R.compose(R.map(R.add(1)), R.take(2));
         *
         *      R.into([], transducer, numbers); //=> [2, 3]
         *
         *      const intoArray = R.into([]);
         *      intoArray(transducer, numbers); //=> [2, 3]
         */
        var into =
          /*#__PURE__*/
          (0, _curry.default)(function into(acc, xf, list) {
            return (0, _isTransformer2.default)(acc)
              ? (0, _reduce2.default)(
                  xf(acc),
                  acc['@@transducer/init'](),
                  list,
                )
              : (0, _reduce2.default)(
                  xf((0, _stepCat2.default)(acc)),
                  (0, _clone2.default)(acc, [], [], false),
                  list,
                )
          })
        var _default = into
        exports.default = _default
      },
      {
        './internal/_clone.js':
          '../node_modules/ramda/es/internal/_clone.js',
        './internal/_curry3.js':
          '../node_modules/ramda/es/internal/_curry3.js',
        './internal/_isTransformer.js':
          '../node_modules/ramda/es/internal/_isTransformer.js',
        './internal/_reduce.js':
          '../node_modules/ramda/es/internal/_reduce.js',
        './internal/_stepCat.js':
          '../node_modules/ramda/es/internal/_stepCat.js',
      },
    ],
    '../node_modules/ramda/es/invert.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry1.js'),
        )

        var _has2 = _interopRequireDefault(require('./internal/_has.js'))

        var _keys = _interopRequireDefault(require('./keys.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Same as [`R.invertObj`](#invertObj), however this accounts for objects with
         * duplicate values by putting the values into an array.
         *
         * @func
         * @memberOf R
         * @since v0.9.0
         * @category Object
         * @sig {s: x} -> {x: [ s, ... ]}
         * @param {Object} obj The object or array to invert
         * @return {Object} out A new object with keys in an array.
         * @see R.invertObj
         * @example
         *
         *      const raceResultsByFirstName = {
         *        first: 'alice',
         *        second: 'jake',
         *        third: 'alice',
         *      };
         *      R.invert(raceResultsByFirstName);
         *      //=> { 'alice': ['first', 'third'], 'jake':['second'] }
         */
        var invert =
          /*#__PURE__*/
          (0, _curry.default)(function invert(obj) {
            var props = (0, _keys.default)(obj)
            var len = props.length
            var idx = 0
            var out = {}

            while (idx < len) {
              var key = props[idx]
              var val = obj[key]
              var list = (0, _has2.default)(val, out)
                ? out[val]
                : (out[val] = [])
              list[list.length] = key
              idx += 1
            }

            return out
          })
        var _default = invert
        exports.default = _default
      },
      {
        './internal/_curry1.js':
          '../node_modules/ramda/es/internal/_curry1.js',
        './internal/_has.js': '../node_modules/ramda/es/internal/_has.js',
        './keys.js': '../node_modules/ramda/es/keys.js',
      },
    ],
    '../node_modules/ramda/es/invertObj.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry1.js'),
        )

        var _keys = _interopRequireDefault(require('./keys.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns a new object with the keys of the given object as values, and the
         * values of the given object, which are coerced to strings, as keys. Note
         * that the last key found is preferred when handling the same value.
         *
         * @func
         * @memberOf R
         * @since v0.9.0
         * @category Object
         * @sig {s: x} -> {x: s}
         * @param {Object} obj The object or array to invert
         * @return {Object} out A new object
         * @see R.invert
         * @example
         *
         *      const raceResults = {
         *        first: 'alice',
         *        second: 'jake'
         *      };
         *      R.invertObj(raceResults);
         *      //=> { 'alice': 'first', 'jake':'second' }
         *
         *      // Alternatively:
         *      const raceResults = ['alice', 'jake'];
         *      R.invertObj(raceResults);
         *      //=> { 'alice': '0', 'jake':'1' }
         */
        var invertObj =
          /*#__PURE__*/
          (0, _curry.default)(function invertObj(obj) {
            var props = (0, _keys.default)(obj)
            var len = props.length
            var idx = 0
            var out = {}

            while (idx < len) {
              var key = props[idx]
              out[obj[key]] = key
              idx += 1
            }

            return out
          })
        var _default = invertObj
        exports.default = _default
      },
      {
        './internal/_curry1.js':
          '../node_modules/ramda/es/internal/_curry1.js',
        './keys.js': '../node_modules/ramda/es/keys.js',
      },
    ],
    '../node_modules/ramda/es/invoker.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        var _isFunction2 = _interopRequireDefault(
          require('./internal/_isFunction.js'),
        )

        var _curryN = _interopRequireDefault(require('./curryN.js'))

        var _toString = _interopRequireDefault(require('./toString.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Turns a named method with a specified arity into a function that can be
         * called directly supplied with arguments and a target object.
         *
         * The returned function is curried and accepts `arity + 1` parameters where
         * the final parameter is the target object.
         *
         * @func
         * @memberOf R
         * @since v0.1.0
         * @category Function
         * @sig Number -> String -> (a -> b -> ... -> n -> Object -> *)
         * @param {Number} arity Number of arguments the returned function should take
         *        before the target object.
         * @param {String} method Name of the method to call.
         * @return {Function} A new curried function.
         * @see R.construct
         * @example
         *
         *      const sliceFrom = R.invoker(1, 'slice');
         *      sliceFrom(6, 'abcdefghijklm'); //=> 'ghijklm'
         *      const sliceFrom6 = R.invoker(2, 'slice')(6);
         *      sliceFrom6(8, 'abcdefghijklm'); //=> 'gh'
         * @symb R.invoker(0, 'method')(o) = o['method']()
         * @symb R.invoker(1, 'method')(a, o) = o['method'](a)
         * @symb R.invoker(2, 'method')(a, b, o) = o['method'](a, b)
         */
        var invoker =
          /*#__PURE__*/
          (0, _curry.default)(function invoker(arity, method) {
            return (0, _curryN.default)(arity + 1, function() {
              var target = arguments[arity]

              if (
                target != null &&
                (0, _isFunction2.default)(target[method])
              ) {
                return target[method].apply(
                  target,
                  Array.prototype.slice.call(arguments, 0, arity),
                )
              }

              throw new TypeError(
                (0, _toString.default)(target) +
                  ' does not have a method named "' +
                  method +
                  '"',
              )
            })
          })
        var _default = invoker
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
        './internal/_isFunction.js':
          '../node_modules/ramda/es/internal/_isFunction.js',
        './curryN.js': '../node_modules/ramda/es/curryN.js',
        './toString.js': '../node_modules/ramda/es/toString.js',
      },
    ],
    '../node_modules/ramda/es/is.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * See if an object (`val`) is an instance of the supplied constructor. This
         * function will check up the inheritance chain, if any.
         *
         * @func
         * @memberOf R
         * @since v0.3.0
         * @category Type
         * @sig (* -> {*}) -> a -> Boolean
         * @param {Object} ctor A constructor
         * @param {*} val The value to test
         * @return {Boolean}
         * @example
         *
         *      R.is(Object, {}); //=> true
         *      R.is(Number, 1); //=> true
         *      R.is(Object, 1); //=> false
         *      R.is(String, 's'); //=> true
         *      R.is(String, new String('')); //=> true
         *      R.is(Object, new String('')); //=> true
         *      R.is(Object, 's'); //=> false
         *      R.is(Number, {}); //=> false
         */
        var is =
          /*#__PURE__*/
          (0, _curry.default)(function is(Ctor, val) {
            return (
              (val != null && val.constructor === Ctor) ||
              val instanceof Ctor
            )
          })
        var _default = is
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
      },
    ],
    '../node_modules/ramda/es/isEmpty.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry1.js'),
        )

        var _empty = _interopRequireDefault(require('./empty.js'))

        var _equals = _interopRequireDefault(require('./equals.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns `true` if the given value is its type's empty value; `false`
         * otherwise.
         *
         * @func
         * @memberOf R
         * @since v0.1.0
         * @category Logic
         * @sig a -> Boolean
         * @param {*} x
         * @return {Boolean}
         * @see R.empty
         * @example
         *
         *      R.isEmpty([1, 2, 3]);   //=> false
         *      R.isEmpty([]);          //=> true
         *      R.isEmpty('');          //=> true
         *      R.isEmpty(null);        //=> false
         *      R.isEmpty({});          //=> true
         *      R.isEmpty({length: 0}); //=> false
         */
        var isEmpty =
          /*#__PURE__*/
          (0, _curry.default)(function isEmpty(x) {
            return (
              x != null && (0, _equals.default)(x, (0, _empty.default)(x))
            )
          })
        var _default = isEmpty
        exports.default = _default
      },
      {
        './internal/_curry1.js':
          '../node_modules/ramda/es/internal/_curry1.js',
        './empty.js': '../node_modules/ramda/es/empty.js',
        './equals.js': '../node_modules/ramda/es/equals.js',
      },
    ],
    '../node_modules/ramda/es/join.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _invoker = _interopRequireDefault(require('./invoker.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns a string made by inserting the `separator` between each element and
         * concatenating all the elements into a single string.
         *
         * @func
         * @memberOf R
         * @since v0.1.0
         * @category List
         * @sig String -> [a] -> String
         * @param {Number|String} separator The string used to separate the elements.
         * @param {Array} xs The elements to join into a string.
         * @return {String} str The string made by concatenating `xs` with `separator`.
         * @see R.split
         * @example
         *
         *      const spacer = R.join(' ');
         *      spacer(['a', 2, 3.4]);   //=> 'a 2 3.4'
         *      R.join('|', [1, 2, 3]);    //=> '1|2|3'
         */
        var join =
          /*#__PURE__*/
          (0, _invoker.default)(1, 'join')
        var _default = join
        exports.default = _default
      },
      { './invoker.js': '../node_modules/ramda/es/invoker.js' },
    ],
    '../node_modules/ramda/es/juxt.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry1.js'),
        )

        var _converge = _interopRequireDefault(require('./converge.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * juxt applies a list of functions to a list of values.
         *
         * @func
         * @memberOf R
         * @since v0.19.0
         * @category Function
         * @sig [(a, b, ..., m) -> n] -> ((a, b, ..., m) -> [n])
         * @param {Array} fns An array of functions
         * @return {Function} A function that returns a list of values after applying each of the original `fns` to its parameters.
         * @see R.applySpec
         * @example
         *
         *      const getRange = R.juxt([Math.min, Math.max]);
         *      getRange(3, 4, 9, -3); //=> [-3, 9]
         * @symb R.juxt([f, g, h])(a, b) = [f(a, b), g(a, b), h(a, b)]
         */
        var juxt =
          /*#__PURE__*/
          (0, _curry.default)(function juxt(fns) {
            return (0, _converge.default)(function() {
              return Array.prototype.slice.call(arguments, 0)
            }, fns)
          })
        var _default = juxt
        exports.default = _default
      },
      {
        './internal/_curry1.js':
          '../node_modules/ramda/es/internal/_curry1.js',
        './converge.js': '../node_modules/ramda/es/converge.js',
      },
    ],
    '../node_modules/ramda/es/keysIn.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry1.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns a list containing the names of all the properties of the supplied
         * object, including prototype properties.
         * Note that the order of the output array is not guaranteed to be consistent
         * across different JS platforms.
         *
         * @func
         * @memberOf R
         * @since v0.2.0
         * @category Object
         * @sig {k: v} -> [k]
         * @param {Object} obj The object to extract properties from
         * @return {Array} An array of the object's own and prototype properties.
         * @see R.keys, R.valuesIn
         * @example
         *
         *      const F = function() { this.x = 'X'; };
         *      F.prototype.y = 'Y';
         *      const f = new F();
         *      R.keysIn(f); //=> ['x', 'y']
         */
        var keysIn =
          /*#__PURE__*/
          (0, _curry.default)(function keysIn(obj) {
            var prop
            var ks = []

            for (prop in obj) {
              ks[ks.length] = prop
            }

            return ks
          })
        var _default = keysIn
        exports.default = _default
      },
      {
        './internal/_curry1.js':
          '../node_modules/ramda/es/internal/_curry1.js',
      },
    ],
    '../node_modules/ramda/es/lastIndexOf.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        var _isArray2 = _interopRequireDefault(
          require('./internal/_isArray.js'),
        )

        var _equals = _interopRequireDefault(require('./equals.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns the position of the last occurrence of an item in an array, or -1 if
         * the item is not included in the array. [`R.equals`](#equals) is used to
         * determine equality.
         *
         * @func
         * @memberOf R
         * @since v0.1.0
         * @category List
         * @sig a -> [a] -> Number
         * @param {*} target The item to find.
         * @param {Array} xs The array to search in.
         * @return {Number} the index of the target, or -1 if the target is not found.
         * @see R.indexOf
         * @example
         *
         *      R.lastIndexOf(3, [-1,3,3,0,1,2,3,4]); //=> 6
         *      R.lastIndexOf(10, [1,2,3,4]); //=> -1
         */
        var lastIndexOf =
          /*#__PURE__*/
          (0, _curry.default)(function lastIndexOf(target, xs) {
            if (
              typeof xs.lastIndexOf === 'function' &&
              !(0, _isArray2.default)(xs)
            ) {
              return xs.lastIndexOf(target)
            } else {
              var idx = xs.length - 1

              while (idx >= 0) {
                if ((0, _equals.default)(xs[idx], target)) {
                  return idx
                }

                idx -= 1
              }

              return -1
            }
          })
        var _default = lastIndexOf
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
        './internal/_isArray.js':
          '../node_modules/ramda/es/internal/_isArray.js',
        './equals.js': '../node_modules/ramda/es/equals.js',
      },
    ],
    '../node_modules/ramda/es/internal/_isNumber.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = _isNumber

        function _isNumber(x) {
          return Object.prototype.toString.call(x) === '[object Number]'
        }
      },
      {},
    ],
    '../node_modules/ramda/es/length.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry1.js'),
        )

        var _isNumber2 = _interopRequireDefault(
          require('./internal/_isNumber.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns the number of elements in the array by returning `list.length`.
         *
         * @func
         * @memberOf R
         * @since v0.3.0
         * @category List
         * @sig [a] -> Number
         * @param {Array} list The array to inspect.
         * @return {Number} The length of the array.
         * @example
         *
         *      R.length([]); //=> 0
         *      R.length([1, 2, 3]); //=> 3
         */
        var length =
          /*#__PURE__*/
          (0, _curry.default)(function length(list) {
            return list != null && (0, _isNumber2.default)(list.length)
              ? list.length
              : NaN
          })
        var _default = length
        exports.default = _default
      },
      {
        './internal/_curry1.js':
          '../node_modules/ramda/es/internal/_curry1.js',
        './internal/_isNumber.js':
          '../node_modules/ramda/es/internal/_isNumber.js',
      },
    ],
    '../node_modules/ramda/es/lens.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        var _map = _interopRequireDefault(require('./map.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns a lens for the given getter and setter functions. The getter "gets"
         * the value of the focus; the setter "sets" the value of the focus. The setter
         * should not mutate the data structure.
         *
         * @func
         * @memberOf R
         * @since v0.8.0
         * @category Object
         * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s
         * @sig (s -> a) -> ((a, s) -> s) -> Lens s a
         * @param {Function} getter
         * @param {Function} setter
         * @return {Lens}
         * @see R.view, R.set, R.over, R.lensIndex, R.lensProp
         * @example
         *
         *      const xLens = R.lens(R.prop('x'), R.assoc('x'));
         *
         *      R.view(xLens, {x: 1, y: 2});            //=> 1
         *      R.set(xLens, 4, {x: 1, y: 2});          //=> {x: 4, y: 2}
         *      R.over(xLens, R.negate, {x: 1, y: 2});  //=> {x: -1, y: 2}
         */
        var lens =
          /*#__PURE__*/
          (0, _curry.default)(function lens(getter, setter) {
            return function(toFunctorFn) {
              return function(target) {
                return (0, _map.default)(function(focus) {
                  return setter(focus, target)
                }, toFunctorFn(getter(target)))
              }
            }
          })
        var _default = lens
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
        './map.js': '../node_modules/ramda/es/map.js',
      },
    ],
    '../node_modules/ramda/es/lensIndex.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry1.js'),
        )

        var _lens = _interopRequireDefault(require('./lens.js'))

        var _nth = _interopRequireDefault(require('./nth.js'))

        var _update = _interopRequireDefault(require('./update.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns a lens whose focus is the specified index.
         *
         * @func
         * @memberOf R
         * @since v0.14.0
         * @category Object
         * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s
         * @sig Number -> Lens s a
         * @param {Number} n
         * @return {Lens}
         * @see R.view, R.set, R.over
         * @example
         *
         *      const headLens = R.lensIndex(0);
         *
         *      R.view(headLens, ['a', 'b', 'c']);            //=> 'a'
         *      R.set(headLens, 'x', ['a', 'b', 'c']);        //=> ['x', 'b', 'c']
         *      R.over(headLens, R.toUpper, ['a', 'b', 'c']); //=> ['A', 'b', 'c']
         */
        var lensIndex =
          /*#__PURE__*/
          (0, _curry.default)(function lensIndex(n) {
            return (0,
            _lens.default)((0, _nth.default)(n), (0, _update.default)(n))
          })
        var _default = lensIndex
        exports.default = _default
      },
      {
        './internal/_curry1.js':
          '../node_modules/ramda/es/internal/_curry1.js',
        './lens.js': '../node_modules/ramda/es/lens.js',
        './nth.js': '../node_modules/ramda/es/nth.js',
        './update.js': '../node_modules/ramda/es/update.js',
      },
    ],
    '../node_modules/ramda/es/lensPath.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry1.js'),
        )

        var _assocPath = _interopRequireDefault(require('./assocPath.js'))

        var _lens = _interopRequireDefault(require('./lens.js'))

        var _path = _interopRequireDefault(require('./path.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns a lens whose focus is the specified path.
         *
         * @func
         * @memberOf R
         * @since v0.19.0
         * @category Object
         * @typedefn Idx = String | Int
         * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s
         * @sig [Idx] -> Lens s a
         * @param {Array} path The path to use.
         * @return {Lens}
         * @see R.view, R.set, R.over
         * @example
         *
         *      const xHeadYLens = R.lensPath(['x', 0, 'y']);
         *
         *      R.view(xHeadYLens, {x: [{y: 2, z: 3}, {y: 4, z: 5}]});
         *      //=> 2
         *      R.set(xHeadYLens, 1, {x: [{y: 2, z: 3}, {y: 4, z: 5}]});
         *      //=> {x: [{y: 1, z: 3}, {y: 4, z: 5}]}
         *      R.over(xHeadYLens, R.negate, {x: [{y: 2, z: 3}, {y: 4, z: 5}]});
         *      //=> {x: [{y: -2, z: 3}, {y: 4, z: 5}]}
         */
        var lensPath =
          /*#__PURE__*/
          (0, _curry.default)(function lensPath(p) {
            return (0,
            _lens.default)((0, _path.default)(p), (0, _assocPath.default)(p))
          })
        var _default = lensPath
        exports.default = _default
      },
      {
        './internal/_curry1.js':
          '../node_modules/ramda/es/internal/_curry1.js',
        './assocPath.js': '../node_modules/ramda/es/assocPath.js',
        './lens.js': '../node_modules/ramda/es/lens.js',
        './path.js': '../node_modules/ramda/es/path.js',
      },
    ],
    '../node_modules/ramda/es/lensProp.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry1.js'),
        )

        var _assoc = _interopRequireDefault(require('./assoc.js'))

        var _lens = _interopRequireDefault(require('./lens.js'))

        var _prop = _interopRequireDefault(require('./prop.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns a lens whose focus is the specified property.
         *
         * @func
         * @memberOf R
         * @since v0.14.0
         * @category Object
         * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s
         * @sig String -> Lens s a
         * @param {String} k
         * @return {Lens}
         * @see R.view, R.set, R.over
         * @example
         *
         *      const xLens = R.lensProp('x');
         *
         *      R.view(xLens, {x: 1, y: 2});            //=> 1
         *      R.set(xLens, 4, {x: 1, y: 2});          //=> {x: 4, y: 2}
         *      R.over(xLens, R.negate, {x: 1, y: 2});  //=> {x: -1, y: 2}
         */
        var lensProp =
          /*#__PURE__*/
          (0, _curry.default)(function lensProp(k) {
            return (0,
            _lens.default)((0, _prop.default)(k), (0, _assoc.default)(k))
          })
        var _default = lensProp
        exports.default = _default
      },
      {
        './internal/_curry1.js':
          '../node_modules/ramda/es/internal/_curry1.js',
        './assoc.js': '../node_modules/ramda/es/assoc.js',
        './lens.js': '../node_modules/ramda/es/lens.js',
        './prop.js': '../node_modules/ramda/es/prop.js',
      },
    ],
    '../node_modules/ramda/es/lt.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns `true` if the first argument is less than the second; `false`
         * otherwise.
         *
         * @func
         * @memberOf R
         * @since v0.1.0
         * @category Relation
         * @sig Ord a => a -> a -> Boolean
         * @param {*} a
         * @param {*} b
         * @return {Boolean}
         * @see R.gt
         * @example
         *
         *      R.lt(2, 1); //=> false
         *      R.lt(2, 2); //=> false
         *      R.lt(2, 3); //=> true
         *      R.lt('a', 'z'); //=> true
         *      R.lt('z', 'a'); //=> false
         */
        var lt =
          /*#__PURE__*/
          (0, _curry.default)(function lt(a, b) {
            return a < b
          })
        var _default = lt
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
      },
    ],
    '../node_modules/ramda/es/lte.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns `true` if the first argument is less than or equal to the second;
         * `false` otherwise.
         *
         * @func
         * @memberOf R
         * @since v0.1.0
         * @category Relation
         * @sig Ord a => a -> a -> Boolean
         * @param {Number} a
         * @param {Number} b
         * @return {Boolean}
         * @see R.gte
         * @example
         *
         *      R.lte(2, 1); //=> false
         *      R.lte(2, 2); //=> true
         *      R.lte(2, 3); //=> true
         *      R.lte('a', 'z'); //=> true
         *      R.lte('z', 'a'); //=> false
         */
        var lte =
          /*#__PURE__*/
          (0, _curry.default)(function lte(a, b) {
            return a <= b
          })
        var _default = lte
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
      },
    ],
    '../node_modules/ramda/es/mapAccum.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry3.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * The `mapAccum` function behaves like a combination of map and reduce; it
         * applies a function to each element of a list, passing an accumulating
         * parameter from left to right, and returning a final value of this
         * accumulator together with the new list.
         *
         * The iterator function receives two arguments, *acc* and *value*, and should
         * return a tuple *[acc, value]*.
         *
         * @func
         * @memberOf R
         * @since v0.10.0
         * @category List
         * @sig ((acc, x) -> (acc, y)) -> acc -> [x] -> (acc, [y])
         * @param {Function} fn The function to be called on every element of the input `list`.
         * @param {*} acc The accumulator value.
         * @param {Array} list The list to iterate over.
         * @return {*} The final, accumulated value.
         * @see R.scan, R.addIndex, R.mapAccumRight
         * @example
         *
         *      const digits = ['1', '2', '3', '4'];
         *      const appender = (a, b) => [a + b, a + b];
         *
         *      R.mapAccum(appender, 0, digits); //=> ['01234', ['01', '012', '0123', '01234']]
         * @symb R.mapAccum(f, a, [b, c, d]) = [
         *   f(f(f(a, b)[0], c)[0], d)[0],
         *   [
         *     f(a, b)[1],
         *     f(f(a, b)[0], c)[1],
         *     f(f(f(a, b)[0], c)[0], d)[1]
         *   ]
         * ]
         */
        var mapAccum =
          /*#__PURE__*/
          (0, _curry.default)(function mapAccum(fn, acc, list) {
            var idx = 0
            var len = list.length
            var result = []
            var tuple = [acc]

            while (idx < len) {
              tuple = fn(tuple[0], list[idx])
              result[idx] = tuple[1]
              idx += 1
            }

            return [tuple[0], result]
          })
        var _default = mapAccum
        exports.default = _default
      },
      {
        './internal/_curry3.js':
          '../node_modules/ramda/es/internal/_curry3.js',
      },
    ],
    '../node_modules/ramda/es/mapAccumRight.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry3.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * The `mapAccumRight` function behaves like a combination of map and reduce; it
         * applies a function to each element of a list, passing an accumulating
         * parameter from right to left, and returning a final value of this
         * accumulator together with the new list.
         *
         * Similar to [`mapAccum`](#mapAccum), except moves through the input list from
         * the right to the left.
         *
         * The iterator function receives two arguments, *acc* and *value*, and should
         * return a tuple *[acc, value]*.
         *
         * @func
         * @memberOf R
         * @since v0.10.0
         * @category List
         * @sig ((acc, x) -> (acc, y)) -> acc -> [x] -> (acc, [y])
         * @param {Function} fn The function to be called on every element of the input `list`.
         * @param {*} acc The accumulator value.
         * @param {Array} list The list to iterate over.
         * @return {*} The final, accumulated value.
         * @see R.addIndex, R.mapAccum
         * @example
         *
         *      const digits = ['1', '2', '3', '4'];
         *      const appender = (a, b) => [b + a, b + a];
         *
         *      R.mapAccumRight(appender, 5, digits); //=> ['12345', ['12345', '2345', '345', '45']]
         * @symb R.mapAccumRight(f, a, [b, c, d]) = [
         *   f(f(f(a, d)[0], c)[0], b)[0],
         *   [
         *     f(a, d)[1],
         *     f(f(a, d)[0], c)[1],
         *     f(f(f(a, d)[0], c)[0], b)[1]
         *   ]
         * ]
         */
        var mapAccumRight =
          /*#__PURE__*/
          (0, _curry.default)(function mapAccumRight(fn, acc, list) {
            var idx = list.length - 1
            var result = []
            var tuple = [acc]

            while (idx >= 0) {
              tuple = fn(tuple[0], list[idx])
              result[idx] = tuple[1]
              idx -= 1
            }

            return [tuple[0], result]
          })
        var _default = mapAccumRight
        exports.default = _default
      },
      {
        './internal/_curry3.js':
          '../node_modules/ramda/es/internal/_curry3.js',
      },
    ],
    '../node_modules/ramda/es/mapObjIndexed.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        var _reduce2 = _interopRequireDefault(
          require('./internal/_reduce.js'),
        )

        var _keys = _interopRequireDefault(require('./keys.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * An Object-specific version of [`map`](#map). The function is applied to three
         * arguments: *(value, key, obj)*. If only the value is significant, use
         * [`map`](#map) instead.
         *
         * @func
         * @memberOf R
         * @since v0.9.0
         * @category Object
         * @sig ((*, String, Object) -> *) -> Object -> Object
         * @param {Function} fn
         * @param {Object} obj
         * @return {Object}
         * @see R.map
         * @example
         *
         *      const xyz = { x: 1, y: 2, z: 3 };
         *      const prependKeyAndDouble = (num, key, obj) => key + (num * 2);
         *
         *      R.mapObjIndexed(prependKeyAndDouble, xyz); //=> { x: 'x2', y: 'y4', z: 'z6' }
         */
        var mapObjIndexed =
          /*#__PURE__*/
          (0, _curry.default)(function mapObjIndexed(fn, obj) {
            return (0, _reduce2.default)(
              function(acc, key) {
                acc[key] = fn(obj[key], key, obj)
                return acc
              },
              {},
              (0, _keys.default)(obj),
            )
          })
        var _default = mapObjIndexed
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
        './internal/_reduce.js':
          '../node_modules/ramda/es/internal/_reduce.js',
        './keys.js': '../node_modules/ramda/es/keys.js',
      },
    ],
    '../node_modules/ramda/es/match.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Tests a regular expression against a String. Note that this function will
         * return an empty array when there are no matches. This differs from
         * [`String.prototype.match`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match)
         * which returns `null` when there are no matches.
         *
         * @func
         * @memberOf R
         * @since v0.1.0
         * @category String
         * @sig RegExp -> String -> [String | Undefined]
         * @param {RegExp} rx A regular expression.
         * @param {String} str The string to match against
         * @return {Array} The list of matches or empty array.
         * @see R.test
         * @example
         *
         *      R.match(/([a-z]a)/g, 'bananas'); //=> ['ba', 'na', 'na']
         *      R.match(/a/, 'b'); //=> []
         *      R.match(/a/, null); //=> TypeError: null does not have a method named "match"
         */
        var match =
          /*#__PURE__*/
          (0, _curry.default)(function match(rx, str) {
            return str.match(rx) || []
          })
        var _default = match
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
      },
    ],
    '../node_modules/ramda/es/mathMod.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        var _isInteger2 = _interopRequireDefault(
          require('./internal/_isInteger.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * `mathMod` behaves like the modulo operator should mathematically, unlike the
         * `%` operator (and by extension, [`R.modulo`](#modulo)). So while
         * `-17 % 5` is `-2`, `mathMod(-17, 5)` is `3`. `mathMod` requires Integer
         * arguments, and returns NaN when the modulus is zero or negative.
         *
         * @func
         * @memberOf R
         * @since v0.3.0
         * @category Math
         * @sig Number -> Number -> Number
         * @param {Number} m The dividend.
         * @param {Number} p the modulus.
         * @return {Number} The result of `b mod a`.
         * @see R.modulo
         * @example
         *
         *      R.mathMod(-17, 5);  //=> 3
         *      R.mathMod(17, 5);   //=> 2
         *      R.mathMod(17, -5);  //=> NaN
         *      R.mathMod(17, 0);   //=> NaN
         *      R.mathMod(17.2, 5); //=> NaN
         *      R.mathMod(17, 5.3); //=> NaN
         *
         *      const clock = R.mathMod(R.__, 12);
         *      clock(15); //=> 3
         *      clock(24); //=> 0
         *
         *      const seventeenMod = R.mathMod(17);
         *      seventeenMod(3);  //=> 2
         *      seventeenMod(4);  //=> 1
         *      seventeenMod(10); //=> 7
         */
        var mathMod =
          /*#__PURE__*/
          (0, _curry.default)(function mathMod(m, p) {
            if (!(0, _isInteger2.default)(m)) {
              return NaN
            }

            if (!(0, _isInteger2.default)(p) || p < 1) {
              return NaN
            }

            return ((m % p) + p) % p
          })
        var _default = mathMod
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
        './internal/_isInteger.js':
          '../node_modules/ramda/es/internal/_isInteger.js',
      },
    ],
    '../node_modules/ramda/es/maxBy.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry3.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Takes a function and two values, and returns whichever value produces the
         * larger result when passed to the provided function.
         *
         * @func
         * @memberOf R
         * @since v0.8.0
         * @category Relation
         * @sig Ord b => (a -> b) -> a -> a -> a
         * @param {Function} f
         * @param {*} a
         * @param {*} b
         * @return {*}
         * @see R.max, R.minBy
         * @example
         *
         *      //  square :: Number -> Number
         *      const square = n => n * n;
         *
         *      R.maxBy(square, -3, 2); //=> -3
         *
         *      R.reduce(R.maxBy(square), 0, [3, -5, 4, 1, -2]); //=> -5
         *      R.reduce(R.maxBy(square), 0, []); //=> 0
         */
        var maxBy =
          /*#__PURE__*/
          (0, _curry.default)(function maxBy(f, a, b) {
            return f(b) > f(a) ? b : a
          })
        var _default = maxBy
        exports.default = _default
      },
      {
        './internal/_curry3.js':
          '../node_modules/ramda/es/internal/_curry3.js',
      },
    ],
    '../node_modules/ramda/es/sum.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _add = _interopRequireDefault(require('./add.js'))

        var _reduce = _interopRequireDefault(require('./reduce.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Adds together all the elements of a list.
         *
         * @func
         * @memberOf R
         * @since v0.1.0
         * @category Math
         * @sig [Number] -> Number
         * @param {Array} list An array of numbers
         * @return {Number} The sum of all the numbers in the list.
         * @see R.reduce
         * @example
         *
         *      R.sum([2,4,6,8,100,1]); //=> 121
         */
        var sum =
          /*#__PURE__*/
          (0, _reduce.default)(_add.default, 0)
        var _default = sum
        exports.default = _default
      },
      {
        './add.js': '../node_modules/ramda/es/add.js',
        './reduce.js': '../node_modules/ramda/es/reduce.js',
      },
    ],
    '../node_modules/ramda/es/mean.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry1.js'),
        )

        var _sum = _interopRequireDefault(require('./sum.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns the mean of the given list of numbers.
         *
         * @func
         * @memberOf R
         * @since v0.14.0
         * @category Math
         * @sig [Number] -> Number
         * @param {Array} list
         * @return {Number}
         * @see R.median
         * @example
         *
         *      R.mean([2, 7, 9]); //=> 6
         *      R.mean([]); //=> NaN
         */
        var mean =
          /*#__PURE__*/
          (0, _curry.default)(function mean(list) {
            return (0, _sum.default)(list) / list.length
          })
        var _default = mean
        exports.default = _default
      },
      {
        './internal/_curry1.js':
          '../node_modules/ramda/es/internal/_curry1.js',
        './sum.js': '../node_modules/ramda/es/sum.js',
      },
    ],
    '../node_modules/ramda/es/median.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry1.js'),
        )

        var _mean = _interopRequireDefault(require('./mean.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns the median of the given list of numbers.
         *
         * @func
         * @memberOf R
         * @since v0.14.0
         * @category Math
         * @sig [Number] -> Number
         * @param {Array} list
         * @return {Number}
         * @see R.mean
         * @example
         *
         *      R.median([2, 9, 7]); //=> 7
         *      R.median([7, 2, 10, 9]); //=> 8
         *      R.median([]); //=> NaN
         */
        var median =
          /*#__PURE__*/
          (0, _curry.default)(function median(list) {
            var len = list.length

            if (len === 0) {
              return NaN
            }

            var width = 2 - (len % 2)
            var idx = (len - width) / 2
            return (0, _mean.default)(
              Array.prototype.slice
                .call(list, 0)
                .sort(function(a, b) {
                  return a < b ? -1 : a > b ? 1 : 0
                })
                .slice(idx, idx + width),
            )
          })
        var _default = median
        exports.default = _default
      },
      {
        './internal/_curry1.js':
          '../node_modules/ramda/es/internal/_curry1.js',
        './mean.js': '../node_modules/ramda/es/mean.js',
      },
    ],
    '../node_modules/ramda/es/memoizeWith.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _arity2 = _interopRequireDefault(
          require('./internal/_arity.js'),
        )

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        var _has2 = _interopRequireDefault(require('./internal/_has.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Creates a new function that, when invoked, caches the result of calling `fn`
         * for a given argument set and returns the result. Subsequent calls to the
         * memoized `fn` with the same argument set will not result in an additional
         * call to `fn`; instead, the cached result for that set of arguments will be
         * returned.
         *
         *
         * @func
         * @memberOf R
         * @since v0.24.0
         * @category Function
         * @sig (*... -> String) -> (*... -> a) -> (*... -> a)
         * @param {Function} fn The function to generate the cache key.
         * @param {Function} fn The function to memoize.
         * @return {Function} Memoized version of `fn`.
         * @example
         *
         *      let count = 0;
         *      const factorial = R.memoizeWith(R.identity, n => {
         *        count += 1;
         *        return R.product(R.range(1, n + 1));
         *      });
         *      factorial(5); //=> 120
         *      factorial(5); //=> 120
         *      factorial(5); //=> 120
         *      count; //=> 1
         */
        var memoizeWith =
          /*#__PURE__*/
          (0, _curry.default)(function memoizeWith(mFn, fn) {
            var cache = {}
            return (0, _arity2.default)(fn.length, function() {
              var key = mFn.apply(this, arguments)

              if (!(0, _has2.default)(key, cache)) {
                cache[key] = fn.apply(this, arguments)
              }

              return cache[key]
            })
          })
        var _default = memoizeWith
        exports.default = _default
      },
      {
        './internal/_arity.js':
          '../node_modules/ramda/es/internal/_arity.js',
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
        './internal/_has.js': '../node_modules/ramda/es/internal/_has.js',
      },
    ],
    '../node_modules/ramda/es/merge.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _objectAssign2 = _interopRequireDefault(
          require('./internal/_objectAssign.js'),
        )

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Create a new object with the own properties of the first object merged with
         * the own properties of the second object. If a key exists in both objects,
         * the value from the second object will be used.
         *
         * @func
         * @memberOf R
         * @since v0.1.0
         * @category Object
         * @sig {k: v} -> {k: v} -> {k: v}
         * @param {Object} l
         * @param {Object} r
         * @return {Object}
         * @see R.mergeRight, R.mergeDeepRight, R.mergeWith, R.mergeWithKey
         * @deprecated
         * @example
         *
         *      R.merge({ 'name': 'fred', 'age': 10 }, { 'age': 40 });
         *      //=> { 'name': 'fred', 'age': 40 }
         *
         *      const withDefaults = R.merge({x: 0, y: 0});
         *      withDefaults({y: 2}); //=> {x: 0, y: 2}
         * @symb R.merge(a, b) = {...a, ...b}
         */
        var merge =
          /*#__PURE__*/
          (0, _curry.default)(function merge(l, r) {
            return (0, _objectAssign2.default)({}, l, r)
          })
        var _default = merge
        exports.default = _default
      },
      {
        './internal/_objectAssign.js':
          '../node_modules/ramda/es/internal/_objectAssign.js',
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
      },
    ],
    '../node_modules/ramda/es/mergeAll.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _objectAssign2 = _interopRequireDefault(
          require('./internal/_objectAssign.js'),
        )

        var _curry = _interopRequireDefault(
          require('./internal/_curry1.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Merges a list of objects together into one object.
         *
         * @func
         * @memberOf R
         * @since v0.10.0
         * @category List
         * @sig [{k: v}] -> {k: v}
         * @param {Array} list An array of objects
         * @return {Object} A merged object.
         * @see R.reduce
         * @example
         *
         *      R.mergeAll([{foo:1},{bar:2},{baz:3}]); //=> {foo:1,bar:2,baz:3}
         *      R.mergeAll([{foo:1},{foo:2},{bar:2}]); //=> {foo:2,bar:2}
         * @symb R.mergeAll([{ x: 1 }, { y: 2 }, { z: 3 }]) = { x: 1, y: 2, z: 3 }
         */
        var mergeAll =
          /*#__PURE__*/
          (0, _curry.default)(function mergeAll(list) {
            return _objectAssign2.default.apply(null, [{}].concat(list))
          })
        var _default = mergeAll
        exports.default = _default
      },
      {
        './internal/_objectAssign.js':
          '../node_modules/ramda/es/internal/_objectAssign.js',
        './internal/_curry1.js':
          '../node_modules/ramda/es/internal/_curry1.js',
      },
    ],
    '../node_modules/ramda/es/mergeWithKey.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry3.js'),
        )

        var _has2 = _interopRequireDefault(require('./internal/_has.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Creates a new object with the own properties of the two provided objects. If
         * a key exists in both objects, the provided function is applied to the key
         * and the values associated with the key in each object, with the result being
         * used as the value associated with the key in the returned object.
         *
         * @func
         * @memberOf R
         * @since v0.19.0
         * @category Object
         * @sig ((String, a, a) -> a) -> {a} -> {a} -> {a}
         * @param {Function} fn
         * @param {Object} l
         * @param {Object} r
         * @return {Object}
         * @see R.mergeDeepWithKey, R.merge, R.mergeWith
         * @example
         *
         *      let concatValues = (k, l, r) => k == 'values' ? R.concat(l, r) : r
         *      R.mergeWithKey(concatValues,
         *                     { a: true, thing: 'foo', values: [10, 20] },
         *                     { b: true, thing: 'bar', values: [15, 35] });
         *      //=> { a: true, b: true, thing: 'bar', values: [10, 20, 15, 35] }
         * @symb R.mergeWithKey(f, { x: 1, y: 2 }, { y: 5, z: 3 }) = { x: 1, y: f('y', 2, 5), z: 3 }
         */
        var mergeWithKey =
          /*#__PURE__*/
          (0, _curry.default)(function mergeWithKey(fn, l, r) {
            var result = {}
            var k

            for (k in l) {
              if ((0, _has2.default)(k, l)) {
                result[k] = (0, _has2.default)(k, r)
                  ? fn(k, l[k], r[k])
                  : l[k]
              }
            }

            for (k in r) {
              if (
                (0, _has2.default)(k, r) &&
                !(0, _has2.default)(k, result)
              ) {
                result[k] = r[k]
              }
            }

            return result
          })
        var _default = mergeWithKey
        exports.default = _default
      },
      {
        './internal/_curry3.js':
          '../node_modules/ramda/es/internal/_curry3.js',
        './internal/_has.js': '../node_modules/ramda/es/internal/_has.js',
      },
    ],
    '../node_modules/ramda/es/mergeDeepWithKey.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry3.js'),
        )

        var _isObject2 = _interopRequireDefault(
          require('./internal/_isObject.js'),
        )

        var _mergeWithKey = _interopRequireDefault(
          require('./mergeWithKey.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Creates a new object with the own properties of the two provided objects.
         * If a key exists in both objects:
         * - and both associated values are also objects then the values will be
         *   recursively merged.
         * - otherwise the provided function is applied to the key and associated values
         *   using the resulting value as the new value associated with the key.
         * If a key only exists in one object, the value will be associated with the key
         * of the resulting object.
         *
         * @func
         * @memberOf R
         * @since v0.24.0
         * @category Object
         * @sig ((String, a, a) -> a) -> {a} -> {a} -> {a}
         * @param {Function} fn
         * @param {Object} lObj
         * @param {Object} rObj
         * @return {Object}
         * @see R.mergeWithKey, R.mergeDeepWith
         * @example
         *
         *      let concatValues = (k, l, r) => k == 'values' ? R.concat(l, r) : r
         *      R.mergeDeepWithKey(concatValues,
         *                         { a: true, c: { thing: 'foo', values: [10, 20] }},
         *                         { b: true, c: { thing: 'bar', values: [15, 35] }});
         *      //=> { a: true, b: true, c: { thing: 'bar', values: [10, 20, 15, 35] }}
         */
        var mergeDeepWithKey =
          /*#__PURE__*/
          (0, _curry.default)(function mergeDeepWithKey(fn, lObj, rObj) {
            return (0, _mergeWithKey.default)(
              function(k, lVal, rVal) {
                if (
                  (0, _isObject2.default)(lVal) &&
                  (0, _isObject2.default)(rVal)
                ) {
                  return mergeDeepWithKey(fn, lVal, rVal)
                } else {
                  return fn(k, lVal, rVal)
                }
              },
              lObj,
              rObj,
            )
          })
        var _default = mergeDeepWithKey
        exports.default = _default
      },
      {
        './internal/_curry3.js':
          '../node_modules/ramda/es/internal/_curry3.js',
        './internal/_isObject.js':
          '../node_modules/ramda/es/internal/_isObject.js',
        './mergeWithKey.js': '../node_modules/ramda/es/mergeWithKey.js',
      },
    ],
    '../node_modules/ramda/es/mergeDeepLeft.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        var _mergeDeepWithKey = _interopRequireDefault(
          require('./mergeDeepWithKey.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Creates a new object with the own properties of the first object merged with
         * the own properties of the second object. If a key exists in both objects:
         * - and both values are objects, the two values will be recursively merged
         * - otherwise the value from the first object will be used.
         *
         * @func
         * @memberOf R
         * @since v0.24.0
         * @category Object
         * @sig {a} -> {a} -> {a}
         * @param {Object} lObj
         * @param {Object} rObj
         * @return {Object}
         * @see R.merge, R.mergeDeepRight, R.mergeDeepWith, R.mergeDeepWithKey
         * @example
         *
         *      R.mergeDeepLeft({ name: 'fred', age: 10, contact: { email: 'moo@example.com' }},
         *                      { age: 40, contact: { email: 'baa@example.com' }});
         *      //=> { name: 'fred', age: 10, contact: { email: 'moo@example.com' }}
         */
        var mergeDeepLeft =
          /*#__PURE__*/
          (0, _curry.default)(function mergeDeepLeft(lObj, rObj) {
            return (0, _mergeDeepWithKey.default)(
              function(k, lVal, rVal) {
                return lVal
              },
              lObj,
              rObj,
            )
          })
        var _default = mergeDeepLeft
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
        './mergeDeepWithKey.js':
          '../node_modules/ramda/es/mergeDeepWithKey.js',
      },
    ],
    '../node_modules/ramda/es/mergeDeepRight.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        var _mergeDeepWithKey = _interopRequireDefault(
          require('./mergeDeepWithKey.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Creates a new object with the own properties of the first object merged with
         * the own properties of the second object. If a key exists in both objects:
         * - and both values are objects, the two values will be recursively merged
         * - otherwise the value from the second object will be used.
         *
         * @func
         * @memberOf R
         * @since v0.24.0
         * @category Object
         * @sig {a} -> {a} -> {a}
         * @param {Object} lObj
         * @param {Object} rObj
         * @return {Object}
         * @see R.merge, R.mergeDeepLeft, R.mergeDeepWith, R.mergeDeepWithKey
         * @example
         *
         *      R.mergeDeepRight({ name: 'fred', age: 10, contact: { email: 'moo@example.com' }},
         *                       { age: 40, contact: { email: 'baa@example.com' }});
         *      //=> { name: 'fred', age: 40, contact: { email: 'baa@example.com' }}
         */
        var mergeDeepRight =
          /*#__PURE__*/
          (0, _curry.default)(function mergeDeepRight(lObj, rObj) {
            return (0, _mergeDeepWithKey.default)(
              function(k, lVal, rVal) {
                return rVal
              },
              lObj,
              rObj,
            )
          })
        var _default = mergeDeepRight
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
        './mergeDeepWithKey.js':
          '../node_modules/ramda/es/mergeDeepWithKey.js',
      },
    ],
    '../node_modules/ramda/es/mergeDeepWith.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry3.js'),
        )

        var _mergeDeepWithKey = _interopRequireDefault(
          require('./mergeDeepWithKey.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Creates a new object with the own properties of the two provided objects.
         * If a key exists in both objects:
         * - and both associated values are also objects then the values will be
         *   recursively merged.
         * - otherwise the provided function is applied to associated values using the
         *   resulting value as the new value associated with the key.
         * If a key only exists in one object, the value will be associated with the key
         * of the resulting object.
         *
         * @func
         * @memberOf R
         * @since v0.24.0
         * @category Object
         * @sig ((a, a) -> a) -> {a} -> {a} -> {a}
         * @param {Function} fn
         * @param {Object} lObj
         * @param {Object} rObj
         * @return {Object}
         * @see R.mergeWith, R.mergeDeepWithKey
         * @example
         *
         *      R.mergeDeepWith(R.concat,
         *                      { a: true, c: { values: [10, 20] }},
         *                      { b: true, c: { values: [15, 35] }});
         *      //=> { a: true, b: true, c: { values: [10, 20, 15, 35] }}
         */
        var mergeDeepWith =
          /*#__PURE__*/
          (0, _curry.default)(function mergeDeepWith(fn, lObj, rObj) {
            return (0, _mergeDeepWithKey.default)(
              function(k, lVal, rVal) {
                return fn(lVal, rVal)
              },
              lObj,
              rObj,
            )
          })
        var _default = mergeDeepWith
        exports.default = _default
      },
      {
        './internal/_curry3.js':
          '../node_modules/ramda/es/internal/_curry3.js',
        './mergeDeepWithKey.js':
          '../node_modules/ramda/es/mergeDeepWithKey.js',
      },
    ],
    '../node_modules/ramda/es/mergeLeft.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _objectAssign2 = _interopRequireDefault(
          require('./internal/_objectAssign.js'),
        )

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Create a new object with the own properties of the first object merged with
         * the own properties of the second object. If a key exists in both objects,
         * the value from the first object will be used.
         *
         * @func
         * @memberOf R
         * @category Object
         * @sig {k: v} -> {k: v} -> {k: v}
         * @param {Object} l
         * @param {Object} r
         * @return {Object}
         * @see R.mergeRight, R.mergeDeepLeft, R.mergeWith, R.mergeWithKey
         * @example
         *
         *      R.mergeLeft({ 'age': 40 }, { 'name': 'fred', 'age': 10 });
         *      //=> { 'name': 'fred', 'age': 40 }
         *
         *      const resetToDefault = R.mergeLeft({x: 0});
         *      resetToDefault({x: 5, y: 2}); //=> {x: 0, y: 2}
         * @symb R.mergeLeft(a, b) = {...b, ...a}
         */
        var mergeLeft =
          /*#__PURE__*/
          (0, _curry.default)(function mergeLeft(l, r) {
            return (0, _objectAssign2.default)({}, r, l)
          })
        var _default = mergeLeft
        exports.default = _default
      },
      {
        './internal/_objectAssign.js':
          '../node_modules/ramda/es/internal/_objectAssign.js',
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
      },
    ],
    '../node_modules/ramda/es/mergeRight.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _objectAssign2 = _interopRequireDefault(
          require('./internal/_objectAssign.js'),
        )

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Create a new object with the own properties of the first object merged with
         * the own properties of the second object. If a key exists in both objects,
         * the value from the second object will be used.
         *
         * @func
         * @memberOf R
         * @category Object
         * @sig {k: v} -> {k: v} -> {k: v}
         * @param {Object} l
         * @param {Object} r
         * @return {Object}
         * @see R.mergeLeft, R.mergeDeepRight, R.mergeWith, R.mergeWithKey
         * @example
         *
         *      R.mergeRight({ 'name': 'fred', 'age': 10 }, { 'age': 40 });
         *      //=> { 'name': 'fred', 'age': 40 }
         *
         *      const withDefaults = R.mergeRight({x: 0, y: 0});
         *      withDefaults({y: 2}); //=> {x: 0, y: 2}
         * @symb R.mergeRight(a, b) = {...a, ...b}
         */
        var mergeRight =
          /*#__PURE__*/
          (0, _curry.default)(function mergeRight(l, r) {
            return (0, _objectAssign2.default)({}, l, r)
          })
        var _default = mergeRight
        exports.default = _default
      },
      {
        './internal/_objectAssign.js':
          '../node_modules/ramda/es/internal/_objectAssign.js',
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
      },
    ],
    '../node_modules/ramda/es/mergeWith.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry3.js'),
        )

        var _mergeWithKey = _interopRequireDefault(
          require('./mergeWithKey.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Creates a new object with the own properties of the two provided objects. If
         * a key exists in both objects, the provided function is applied to the values
         * associated with the key in each object, with the result being used as the
         * value associated with the key in the returned object.
         *
         * @func
         * @memberOf R
         * @since v0.19.0
         * @category Object
         * @sig ((a, a) -> a) -> {a} -> {a} -> {a}
         * @param {Function} fn
         * @param {Object} l
         * @param {Object} r
         * @return {Object}
         * @see R.mergeDeepWith, R.merge, R.mergeWithKey
         * @example
         *
         *      R.mergeWith(R.concat,
         *                  { a: true, values: [10, 20] },
         *                  { b: true, values: [15, 35] });
         *      //=> { a: true, b: true, values: [10, 20, 15, 35] }
         */
        var mergeWith =
          /*#__PURE__*/
          (0, _curry.default)(function mergeWith(fn, l, r) {
            return (0, _mergeWithKey.default)(
              function(_, _l, _r) {
                return fn(_l, _r)
              },
              l,
              r,
            )
          })
        var _default = mergeWith
        exports.default = _default
      },
      {
        './internal/_curry3.js':
          '../node_modules/ramda/es/internal/_curry3.js',
        './mergeWithKey.js': '../node_modules/ramda/es/mergeWithKey.js',
      },
    ],
    '../node_modules/ramda/es/min.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns the smaller of its two arguments.
         *
         * @func
         * @memberOf R
         * @since v0.1.0
         * @category Relation
         * @sig Ord a => a -> a -> a
         * @param {*} a
         * @param {*} b
         * @return {*}
         * @see R.minBy, R.max
         * @example
         *
         *      R.min(789, 123); //=> 123
         *      R.min('a', 'b'); //=> 'a'
         */
        var min =
          /*#__PURE__*/
          (0, _curry.default)(function min(a, b) {
            return b < a ? b : a
          })
        var _default = min
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
      },
    ],
    '../node_modules/ramda/es/minBy.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry3.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Takes a function and two values, and returns whichever value produces the
         * smaller result when passed to the provided function.
         *
         * @func
         * @memberOf R
         * @since v0.8.0
         * @category Relation
         * @sig Ord b => (a -> b) -> a -> a -> a
         * @param {Function} f
         * @param {*} a
         * @param {*} b
         * @return {*}
         * @see R.min, R.maxBy
         * @example
         *
         *      //  square :: Number -> Number
         *      const square = n => n * n;
         *
         *      R.minBy(square, -3, 2); //=> 2
         *
         *      R.reduce(R.minBy(square), Infinity, [3, -5, 4, 1, -2]); //=> 1
         *      R.reduce(R.minBy(square), Infinity, []); //=> Infinity
         */
        var minBy =
          /*#__PURE__*/
          (0, _curry.default)(function minBy(f, a, b) {
            return f(b) < f(a) ? b : a
          })
        var _default = minBy
        exports.default = _default
      },
      {
        './internal/_curry3.js':
          '../node_modules/ramda/es/internal/_curry3.js',
      },
    ],
    '../node_modules/ramda/es/modulo.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Divides the first parameter by the second and returns the remainder. Note
         * that this function preserves the JavaScript-style behavior for modulo. For
         * mathematical modulo see [`mathMod`](#mathMod).
         *
         * @func
         * @memberOf R
         * @since v0.1.1
         * @category Math
         * @sig Number -> Number -> Number
         * @param {Number} a The value to the divide.
         * @param {Number} b The pseudo-modulus
         * @return {Number} The result of `b % a`.
         * @see R.mathMod
         * @example
         *
         *      R.modulo(17, 3); //=> 2
         *      // JS behavior:
         *      R.modulo(-17, 3); //=> -2
         *      R.modulo(17, -3); //=> 2
         *
         *      const isOdd = R.modulo(R.__, 2);
         *      isOdd(42); //=> 0
         *      isOdd(21); //=> 1
         */
        var modulo =
          /*#__PURE__*/
          (0, _curry.default)(function modulo(a, b) {
            return a % b
          })
        var _default = modulo
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
      },
    ],
    '../node_modules/ramda/es/move.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry3.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Move an item, at index `from`, to index `to`, in a list of elements.
         * A new list will be created containing the new elements order.
         *
         * @func
         * @memberOf R
         * @category List
         * @sig Number -> Number -> [a] -> [a]
         * @param {Number} from The source index
         * @param {Number} to The destination index
         * @param {Array} list The list which will serve to realise the move
         * @return {Array} The new list reordered
         * @example
         *
         *      R.move(0, 2, ['a', 'b', 'c', 'd', 'e', 'f']); //=> ['b', 'c', 'a', 'd', 'e', 'f']
         *      R.move(-1, 0, ['a', 'b', 'c', 'd', 'e', 'f']); //=> ['f', 'a', 'b', 'c', 'd', 'e'] list rotation
         */
        var move =
          /*#__PURE__*/
          (0, _curry.default)(function(from, to, list) {
            var length = list.length
            var result = list.slice()
            var positiveFrom = from < 0 ? length + from : from
            var positiveTo = to < 0 ? length + to : to
            var item = result.splice(positiveFrom, 1)
            return positiveFrom < 0 ||
              positiveFrom >= list.length ||
              positiveTo < 0 ||
              positiveTo >= list.length
              ? list
              : []
                  .concat(result.slice(0, positiveTo))
                  .concat(item)
                  .concat(result.slice(positiveTo, list.length))
          })
        var _default = move
        exports.default = _default
      },
      {
        './internal/_curry3.js':
          '../node_modules/ramda/es/internal/_curry3.js',
      },
    ],
    '../node_modules/ramda/es/multiply.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Multiplies two numbers. Equivalent to `a * b` but curried.
         *
         * @func
         * @memberOf R
         * @since v0.1.0
         * @category Math
         * @sig Number -> Number -> Number
         * @param {Number} a The first value.
         * @param {Number} b The second value.
         * @return {Number} The result of `a * b`.
         * @see R.divide
         * @example
         *
         *      const double = R.multiply(2);
         *      const triple = R.multiply(3);
         *      double(3);       //=>  6
         *      triple(4);       //=> 12
         *      R.multiply(2, 5);  //=> 10
         */
        var multiply =
          /*#__PURE__*/
          (0, _curry.default)(function multiply(a, b) {
            return a * b
          })
        var _default = multiply
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
      },
    ],
    '../node_modules/ramda/es/negate.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry1.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Negates its argument.
         *
         * @func
         * @memberOf R
         * @since v0.9.0
         * @category Math
         * @sig Number -> Number
         * @param {Number} n
         * @return {Number}
         * @example
         *
         *      R.negate(42); //=> -42
         */
        var negate =
          /*#__PURE__*/
          (0, _curry.default)(function negate(n) {
            return -n
          })
        var _default = negate
        exports.default = _default
      },
      {
        './internal/_curry1.js':
          '../node_modules/ramda/es/internal/_curry1.js',
      },
    ],
    '../node_modules/ramda/es/none.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _complement2 = _interopRequireDefault(
          require('./internal/_complement.js'),
        )

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        var _all = _interopRequireDefault(require('./all.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns `true` if no elements of the list match the predicate, `false`
         * otherwise.
         *
         * Dispatches to the `all` method of the second argument, if present.
         *
         * Acts as a transducer if a transformer is given in list position.
         *
         * @func
         * @memberOf R
         * @since v0.12.0
         * @category List
         * @sig (a -> Boolean) -> [a] -> Boolean
         * @param {Function} fn The predicate function.
         * @param {Array} list The array to consider.
         * @return {Boolean} `true` if the predicate is not satisfied by every element, `false` otherwise.
         * @see R.all, R.any
         * @example
         *
         *      const isEven = n => n % 2 === 0;
         *      const isOdd = n => n % 2 === 1;
         *
         *      R.none(isEven, [1, 3, 5, 7, 9, 11]); //=> true
         *      R.none(isOdd, [1, 3, 5, 7, 8, 11]); //=> false
         */
        var none =
          /*#__PURE__*/
          (0, _curry.default)(function none(fn, input) {
            return (0, _all.default)((0, _complement2.default)(fn), input)
          })
        var _default = none
        exports.default = _default
      },
      {
        './internal/_complement.js':
          '../node_modules/ramda/es/internal/_complement.js',
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
        './all.js': '../node_modules/ramda/es/all.js',
      },
    ],
    '../node_modules/ramda/es/nthArg.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry1.js'),
        )

        var _curryN = _interopRequireDefault(require('./curryN.js'))

        var _nth = _interopRequireDefault(require('./nth.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns a function which returns its nth argument.
         *
         * @func
         * @memberOf R
         * @since v0.9.0
         * @category Function
         * @sig Number -> *... -> *
         * @param {Number} n
         * @return {Function}
         * @example
         *
         *      R.nthArg(1)('a', 'b', 'c'); //=> 'b'
         *      R.nthArg(-1)('a', 'b', 'c'); //=> 'c'
         * @symb R.nthArg(-1)(a, b, c) = c
         * @symb R.nthArg(0)(a, b, c) = a
         * @symb R.nthArg(1)(a, b, c) = b
         */
        var nthArg =
          /*#__PURE__*/
          (0, _curry.default)(function nthArg(n) {
            var arity = n < 0 ? 1 : n + 1
            return (0, _curryN.default)(arity, function() {
              return (0, _nth.default)(n, arguments)
            })
          })
        var _default = nthArg
        exports.default = _default
      },
      {
        './internal/_curry1.js':
          '../node_modules/ramda/es/internal/_curry1.js',
        './curryN.js': '../node_modules/ramda/es/curryN.js',
        './nth.js': '../node_modules/ramda/es/nth.js',
      },
    ],
    '../node_modules/ramda/es/o.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry3.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * `o` is a curried composition function that returns a unary function.
         * Like [`compose`](#compose), `o` performs right-to-left function composition.
         * Unlike [`compose`](#compose), the rightmost function passed to `o` will be
         * invoked with only one argument. Also, unlike [`compose`](#compose), `o` is
         * limited to accepting only 2 unary functions. The name o was chosen because
         * of its similarity to the mathematical composition operator ∘.
         *
         * @func
         * @memberOf R
         * @since v0.24.0
         * @category Function
         * @sig (b -> c) -> (a -> b) -> a -> c
         * @param {Function} f
         * @param {Function} g
         * @return {Function}
         * @see R.compose, R.pipe
         * @example
         *
         *      const classyGreeting = name => "The name's " + name.last + ", " + name.first + " " + name.last
         *      const yellGreeting = R.o(R.toUpper, classyGreeting);
         *      yellGreeting({first: 'James', last: 'Bond'}); //=> "THE NAME'S BOND, JAMES BOND"
         *
         *      R.o(R.multiply(10), R.add(10))(-4) //=> 60
         *
         * @symb R.o(f, g, x) = f(g(x))
         */
        var o =
          /*#__PURE__*/
          (0, _curry.default)(function o(f, g, x) {
            return f(g(x))
          })
        var _default = o
        exports.default = _default
      },
      {
        './internal/_curry3.js':
          '../node_modules/ramda/es/internal/_curry3.js',
      },
    ],
    '../node_modules/ramda/es/internal/_of.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = _of

        function _of(x) {
          return [x]
        }
      },
      {},
    ],
    '../node_modules/ramda/es/of.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry1.js'),
        )

        var _of2 = _interopRequireDefault(require('./internal/_of.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns a singleton array containing the value provided.
         *
         * Note this `of` is different from the ES6 `of`; See
         * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of
         *
         * @func
         * @memberOf R
         * @since v0.3.0
         * @category Function
         * @sig a -> [a]
         * @param {*} x any value
         * @return {Array} An array wrapping `x`.
         * @example
         *
         *      R.of(null); //=> [null]
         *      R.of([42]); //=> [[42]]
         */
        var of =
          /*#__PURE__*/
          (0, _curry.default)(_of2.default)
        var _default = of
        exports.default = _default
      },
      {
        './internal/_curry1.js':
          '../node_modules/ramda/es/internal/_curry1.js',
        './internal/_of.js': '../node_modules/ramda/es/internal/_of.js',
      },
    ],
    '../node_modules/ramda/es/omit.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns a partial copy of an object omitting the keys specified.
         *
         * @func
         * @memberOf R
         * @since v0.1.0
         * @category Object
         * @sig [String] -> {String: *} -> {String: *}
         * @param {Array} names an array of String property names to omit from the new object
         * @param {Object} obj The object to copy from
         * @return {Object} A new object with properties from `names` not on it.
         * @see R.pick
         * @example
         *
         *      R.omit(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, c: 3}
         */
        var omit =
          /*#__PURE__*/
          (0, _curry.default)(function omit(names, obj) {
            var result = {}
            var index = {}
            var idx = 0
            var len = names.length

            while (idx < len) {
              index[names[idx]] = 1
              idx += 1
            }

            for (var prop in obj) {
              if (!index.hasOwnProperty(prop)) {
                result[prop] = obj[prop]
              }
            }

            return result
          })
        var _default = omit
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
      },
    ],
    '../node_modules/ramda/es/once.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _arity2 = _interopRequireDefault(
          require('./internal/_arity.js'),
        )

        var _curry = _interopRequireDefault(
          require('./internal/_curry1.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Accepts a function `fn` and returns a function that guards invocation of
         * `fn` such that `fn` can only ever be called once, no matter how many times
         * the returned function is invoked. The first value calculated is returned in
         * subsequent invocations.
         *
         * @func
         * @memberOf R
         * @since v0.1.0
         * @category Function
         * @sig (a... -> b) -> (a... -> b)
         * @param {Function} fn The function to wrap in a call-only-once wrapper.
         * @return {Function} The wrapped function.
         * @example
         *
         *      const addOneOnce = R.once(x => x + 1);
         *      addOneOnce(10); //=> 11
         *      addOneOnce(addOneOnce(50)); //=> 11
         */
        var once =
          /*#__PURE__*/
          (0, _curry.default)(function once(fn) {
            var called = false
            var result
            return (0, _arity2.default)(fn.length, function() {
              if (called) {
                return result
              }

              called = true
              result = fn.apply(this, arguments)
              return result
            })
          })
        var _default = once
        exports.default = _default
      },
      {
        './internal/_arity.js':
          '../node_modules/ramda/es/internal/_arity.js',
        './internal/_curry1.js':
          '../node_modules/ramda/es/internal/_curry1.js',
      },
    ],
    '../node_modules/ramda/es/internal/_assertPromise.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = _assertPromise

        var _isFunction2 = _interopRequireDefault(
          require('./_isFunction.js'),
        )

        var _toString2 = _interopRequireDefault(require('./_toString.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        function _assertPromise(name, p) {
          if (p == null || !(0, _isFunction2.default)(p.then)) {
            throw new TypeError(
              '`' +
                name +
                '` expected a Promise, received ' +
                (0, _toString2.default)(p, []),
            )
          }
        }
      },
      {
        './_isFunction.js':
          '../node_modules/ramda/es/internal/_isFunction.js',
        './_toString.js': '../node_modules/ramda/es/internal/_toString.js',
      },
    ],
    '../node_modules/ramda/es/otherwise.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        var _assertPromise2 = _interopRequireDefault(
          require('./internal/_assertPromise.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns the result of applying the onFailure function to the value inside
         * a failed promise. This is useful for handling rejected promises
         * inside function compositions.
         *
         * @func
         * @memberOf R
         * @category Function
         * @sig (e -> b) -> (Promise e a) -> (Promise e b)
         * @sig (e -> (Promise f b)) -> (Promise e a) -> (Promise f b)
         * @param {Function} onFailure The function to apply. Can return a value or a promise of a value.
         * @param {Promise} p
         * @return {Promise} The result of calling `p.then(null, onFailure)`
         * @see R.then
         * @example
         *
         *      var failedFetch = (id) => Promise.reject('bad ID');
         *      var useDefault = () => ({ firstName: 'Bob', lastName: 'Loblaw' })
         *
         *      //recoverFromFailure :: String -> Promise ({firstName, lastName})
         *      var recoverFromFailure = R.pipe(
         *        failedFetch,
         *        R.otherwise(useDefault),
         *        R.then(R.pick(['firstName', 'lastName'])),
         *      );
         *      recoverFromFailure(12345).then(console.log)
         */
        var otherwise =
          /*#__PURE__*/
          (0, _curry.default)(function otherwise(f, p) {
            ;(0, _assertPromise2.default)('otherwise', p)
            return p.then(null, f)
          })
        var _default = otherwise
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
        './internal/_assertPromise.js':
          '../node_modules/ramda/es/internal/_assertPromise.js',
      },
    ],
    '../node_modules/ramda/es/over.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry3.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        // `Identity` is a functor that holds a single value, where `map` simply
        // transforms the held value with the provided function.
        var Identity = function(x) {
          return {
            value: x,
            map: function(f) {
              return Identity(f(x))
            },
          }
        }
        /**
         * Returns the result of "setting" the portion of the given data structure
         * focused by the given lens to the result of applying the given function to
         * the focused value.
         *
         * @func
         * @memberOf R
         * @since v0.16.0
         * @category Object
         * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s
         * @sig Lens s a -> (a -> a) -> s -> s
         * @param {Lens} lens
         * @param {*} v
         * @param {*} x
         * @return {*}
         * @see R.prop, R.lensIndex, R.lensProp
         * @example
         *
         *      const headLens = R.lensIndex(0);
         *
         *      R.over(headLens, R.toUpper, ['foo', 'bar', 'baz']); //=> ['FOO', 'bar', 'baz']
         */

        var over =
          /*#__PURE__*/
          (0, _curry.default)(function over(lens, f, x) {
            // The value returned by the getter function is first transformed with `f`,
            // then set as the value of an `Identity`. This is then mapped over with the
            // setter function of the lens.
            return lens(function(y) {
              return Identity(f(y))
            })(x).value
          })
        var _default = over
        exports.default = _default
      },
      {
        './internal/_curry3.js':
          '../node_modules/ramda/es/internal/_curry3.js',
      },
    ],
    '../node_modules/ramda/es/pair.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Takes two arguments, `fst` and `snd`, and returns `[fst, snd]`.
         *
         * @func
         * @memberOf R
         * @since v0.18.0
         * @category List
         * @sig a -> b -> (a,b)
         * @param {*} fst
         * @param {*} snd
         * @return {Array}
         * @see R.objOf, R.of
         * @example
         *
         *      R.pair('foo', 'bar'); //=> ['foo', 'bar']
         */
        var pair =
          /*#__PURE__*/
          (0, _curry.default)(function pair(fst, snd) {
            return [fst, snd]
          })
        var _default = pair
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
      },
    ],
    '../node_modules/ramda/es/internal/_createPartialApplicator.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = _createPartialApplicator

        var _arity2 = _interopRequireDefault(require('./_arity.js'))

        var _curry = _interopRequireDefault(require('./_curry2.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        function _createPartialApplicator(concat) {
          return (0, _curry.default)(function(fn, args) {
            return (0,
            _arity2.default)(Math.max(0, fn.length - args.length), function() {
              return fn.apply(this, concat(args, arguments))
            })
          })
        }
      },
      {
        './_arity.js': '../node_modules/ramda/es/internal/_arity.js',
        './_curry2.js': '../node_modules/ramda/es/internal/_curry2.js',
      },
    ],
    '../node_modules/ramda/es/partial.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _concat2 = _interopRequireDefault(
          require('./internal/_concat.js'),
        )

        var _createPartialApplicator2 = _interopRequireDefault(
          require('./internal/_createPartialApplicator.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Takes a function `f` and a list of arguments, and returns a function `g`.
         * When applied, `g` returns the result of applying `f` to the arguments
         * provided initially followed by the arguments provided to `g`.
         *
         * @func
         * @memberOf R
         * @since v0.10.0
         * @category Function
         * @sig ((a, b, c, ..., n) -> x) -> [a, b, c, ...] -> ((d, e, f, ..., n) -> x)
         * @param {Function} f
         * @param {Array} args
         * @return {Function}
         * @see R.partialRight, R.curry
         * @example
         *
         *      const multiply2 = (a, b) => a * b;
         *      const double = R.partial(multiply2, [2]);
         *      double(2); //=> 4
         *
         *      const greet = (salutation, title, firstName, lastName) =>
         *        salutation + ', ' + title + ' ' + firstName + ' ' + lastName + '!';
         *
         *      const sayHello = R.partial(greet, ['Hello']);
         *      const sayHelloToMs = R.partial(sayHello, ['Ms.']);
         *      sayHelloToMs('Jane', 'Jones'); //=> 'Hello, Ms. Jane Jones!'
         * @symb R.partial(f, [a, b])(c, d) = f(a, b, c, d)
         */
        var partial =
          /*#__PURE__*/
          (0, _createPartialApplicator2.default)(_concat2.default)
        var _default = partial
        exports.default = _default
      },
      {
        './internal/_concat.js':
          '../node_modules/ramda/es/internal/_concat.js',
        './internal/_createPartialApplicator.js':
          '../node_modules/ramda/es/internal/_createPartialApplicator.js',
      },
    ],
    '../node_modules/ramda/es/partialRight.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _concat2 = _interopRequireDefault(
          require('./internal/_concat.js'),
        )

        var _createPartialApplicator2 = _interopRequireDefault(
          require('./internal/_createPartialApplicator.js'),
        )

        var _flip = _interopRequireDefault(require('./flip.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Takes a function `f` and a list of arguments, and returns a function `g`.
         * When applied, `g` returns the result of applying `f` to the arguments
         * provided to `g` followed by the arguments provided initially.
         *
         * @func
         * @memberOf R
         * @since v0.10.0
         * @category Function
         * @sig ((a, b, c, ..., n) -> x) -> [d, e, f, ..., n] -> ((a, b, c, ...) -> x)
         * @param {Function} f
         * @param {Array} args
         * @return {Function}
         * @see R.partial
         * @example
         *
         *      const greet = (salutation, title, firstName, lastName) =>
         *        salutation + ', ' + title + ' ' + firstName + ' ' + lastName + '!';
         *
         *      const greetMsJaneJones = R.partialRight(greet, ['Ms.', 'Jane', 'Jones']);
         *
         *      greetMsJaneJones('Hello'); //=> 'Hello, Ms. Jane Jones!'
         * @symb R.partialRight(f, [a, b])(c, d) = f(c, d, a, b)
         */
        var partialRight =
          /*#__PURE__*/
          (0, _createPartialApplicator2.default)(
            /*#__PURE__*/
            (0, _flip.default)(_concat2.default),
          )
        var _default = partialRight
        exports.default = _default
      },
      {
        './internal/_concat.js':
          '../node_modules/ramda/es/internal/_concat.js',
        './internal/_createPartialApplicator.js':
          '../node_modules/ramda/es/internal/_createPartialApplicator.js',
        './flip.js': '../node_modules/ramda/es/flip.js',
      },
    ],
    '../node_modules/ramda/es/partition.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _filter = _interopRequireDefault(require('./filter.js'))

        var _juxt = _interopRequireDefault(require('./juxt.js'))

        var _reject = _interopRequireDefault(require('./reject.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Takes a predicate and a list or other `Filterable` object and returns the
         * pair of filterable objects of the same type of elements which do and do not
         * satisfy, the predicate, respectively. Filterable objects include plain objects or any object
         * that has a filter method such as `Array`.
         *
         * @func
         * @memberOf R
         * @since v0.1.4
         * @category List
         * @sig Filterable f => (a -> Boolean) -> f a -> [f a, f a]
         * @param {Function} pred A predicate to determine which side the element belongs to.
         * @param {Array} filterable the list (or other filterable) to partition.
         * @return {Array} An array, containing first the subset of elements that satisfy the
         *         predicate, and second the subset of elements that do not satisfy.
         * @see R.filter, R.reject
         * @example
         *
         *      R.partition(R.includes('s'), ['sss', 'ttt', 'foo', 'bars']);
         *      // => [ [ 'sss', 'bars' ],  [ 'ttt', 'foo' ] ]
         *
         *      R.partition(R.includes('s'), { a: 'sss', b: 'ttt', foo: 'bars' });
         *      // => [ { a: 'sss', foo: 'bars' }, { b: 'ttt' }  ]
         */
        var partition =
          /*#__PURE__*/
          (0, _juxt.default)([_filter.default, _reject.default])
        var _default = partition
        exports.default = _default
      },
      {
        './filter.js': '../node_modules/ramda/es/filter.js',
        './juxt.js': '../node_modules/ramda/es/juxt.js',
        './reject.js': '../node_modules/ramda/es/reject.js',
      },
    ],
    '../node_modules/ramda/es/pathEq.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry3.js'),
        )

        var _equals = _interopRequireDefault(require('./equals.js'))

        var _path2 = _interopRequireDefault(require('./path.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Determines whether a nested path on an object has a specific value, in
         * [`R.equals`](#equals) terms. Most likely used to filter a list.
         *
         * @func
         * @memberOf R
         * @since v0.7.0
         * @category Relation
         * @typedefn Idx = String | Int
         * @sig [Idx] -> a -> {a} -> Boolean
         * @param {Array} path The path of the nested property to use
         * @param {*} val The value to compare the nested property with
         * @param {Object} obj The object to check the nested property in
         * @return {Boolean} `true` if the value equals the nested object property,
         *         `false` otherwise.
         * @example
         *
         *      const user1 = { address: { zipCode: 90210 } };
         *      const user2 = { address: { zipCode: 55555 } };
         *      const user3 = { name: 'Bob' };
         *      const users = [ user1, user2, user3 ];
         *      const isFamous = R.pathEq(['address', 'zipCode'], 90210);
         *      R.filter(isFamous, users); //=> [ user1 ]
         */
        var pathEq =
          /*#__PURE__*/
          (0, _curry.default)(function pathEq(_path, val, obj) {
            return (0,
            _equals.default)((0, _path2.default)(_path, obj), val)
          })
        var _default = pathEq
        exports.default = _default
      },
      {
        './internal/_curry3.js':
          '../node_modules/ramda/es/internal/_curry3.js',
        './equals.js': '../node_modules/ramda/es/equals.js',
        './path.js': '../node_modules/ramda/es/path.js',
      },
    ],
    '../node_modules/ramda/es/pathOr.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry3.js'),
        )

        var _defaultTo = _interopRequireDefault(require('./defaultTo.js'))

        var _path = _interopRequireDefault(require('./path.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * If the given, non-null object has a value at the given path, returns the
         * value at that path. Otherwise returns the provided default value.
         *
         * @func
         * @memberOf R
         * @since v0.18.0
         * @category Object
         * @typedefn Idx = String | Int
         * @sig a -> [Idx] -> {a} -> a
         * @param {*} d The default value.
         * @param {Array} p The path to use.
         * @param {Object} obj The object to retrieve the nested property from.
         * @return {*} The data at `path` of the supplied object or the default value.
         * @example
         *
         *      R.pathOr('N/A', ['a', 'b'], {a: {b: 2}}); //=> 2
         *      R.pathOr('N/A', ['a', 'b'], {c: {b: 2}}); //=> "N/A"
         */
        var pathOr =
          /*#__PURE__*/
          (0, _curry.default)(function pathOr(d, p, obj) {
            return (0, _defaultTo.default)(d, (0, _path.default)(p, obj))
          })
        var _default = pathOr
        exports.default = _default
      },
      {
        './internal/_curry3.js':
          '../node_modules/ramda/es/internal/_curry3.js',
        './defaultTo.js': '../node_modules/ramda/es/defaultTo.js',
        './path.js': '../node_modules/ramda/es/path.js',
      },
    ],
    '../node_modules/ramda/es/pathSatisfies.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry3.js'),
        )

        var _path = _interopRequireDefault(require('./path.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns `true` if the specified object property at given path satisfies the
         * given predicate; `false` otherwise.
         *
         * @func
         * @memberOf R
         * @since v0.19.0
         * @category Logic
         * @typedefn Idx = String | Int
         * @sig (a -> Boolean) -> [Idx] -> {a} -> Boolean
         * @param {Function} pred
         * @param {Array} propPath
         * @param {*} obj
         * @return {Boolean}
         * @see R.propSatisfies, R.path
         * @example
         *
         *      R.pathSatisfies(y => y > 0, ['x', 'y'], {x: {y: 2}}); //=> true
         */
        var pathSatisfies =
          /*#__PURE__*/
          (0, _curry.default)(function pathSatisfies(pred, propPath, obj) {
            return (
              propPath.length > 0 &&
              pred((0, _path.default)(propPath, obj))
            )
          })
        var _default = pathSatisfies
        exports.default = _default
      },
      {
        './internal/_curry3.js':
          '../node_modules/ramda/es/internal/_curry3.js',
        './path.js': '../node_modules/ramda/es/path.js',
      },
    ],
    '../node_modules/ramda/es/pick.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns a partial copy of an object containing only the keys specified. If
         * the key does not exist, the property is ignored.
         *
         * @func
         * @memberOf R
         * @since v0.1.0
         * @category Object
         * @sig [k] -> {k: v} -> {k: v}
         * @param {Array} names an array of String property names to copy onto a new object
         * @param {Object} obj The object to copy from
         * @return {Object} A new object with only properties from `names` on it.
         * @see R.omit, R.props
         * @example
         *
         *      R.pick(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, d: 4}
         *      R.pick(['a', 'e', 'f'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1}
         */
        var pick =
          /*#__PURE__*/
          (0, _curry.default)(function pick(names, obj) {
            var result = {}
            var idx = 0

            while (idx < names.length) {
              if (names[idx] in obj) {
                result[names[idx]] = obj[names[idx]]
              }

              idx += 1
            }

            return result
          })
        var _default = pick
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
      },
    ],
    '../node_modules/ramda/es/pickAll.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Similar to `pick` except that this one includes a `key: undefined` pair for
         * properties that don't exist.
         *
         * @func
         * @memberOf R
         * @since v0.1.0
         * @category Object
         * @sig [k] -> {k: v} -> {k: v}
         * @param {Array} names an array of String property names to copy onto a new object
         * @param {Object} obj The object to copy from
         * @return {Object} A new object with only properties from `names` on it.
         * @see R.pick
         * @example
         *
         *      R.pickAll(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, d: 4}
         *      R.pickAll(['a', 'e', 'f'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, e: undefined, f: undefined}
         */
        var pickAll =
          /*#__PURE__*/
          (0, _curry.default)(function pickAll(names, obj) {
            var result = {}
            var idx = 0
            var len = names.length

            while (idx < len) {
              var name = names[idx]
              result[name] = obj[name]
              idx += 1
            }

            return result
          })
        var _default = pickAll
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
      },
    ],
    '../node_modules/ramda/es/pickBy.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns a partial copy of an object containing only the keys that satisfy
         * the supplied predicate.
         *
         * @func
         * @memberOf R
         * @since v0.8.0
         * @category Object
         * @sig ((v, k) -> Boolean) -> {k: v} -> {k: v}
         * @param {Function} pred A predicate to determine whether or not a key
         *        should be included on the output object.
         * @param {Object} obj The object to copy from
         * @return {Object} A new object with only properties that satisfy `pred`
         *         on it.
         * @see R.pick, R.filter
         * @example
         *
         *      const isUpperCase = (val, key) => key.toUpperCase() === key;
         *      R.pickBy(isUpperCase, {a: 1, b: 2, A: 3, B: 4}); //=> {A: 3, B: 4}
         */
        var pickBy =
          /*#__PURE__*/
          (0, _curry.default)(function pickBy(test, obj) {
            var result = {}

            for (var prop in obj) {
              if (test(obj[prop], prop, obj)) {
                result[prop] = obj[prop]
              }
            }

            return result
          })
        var _default = pickBy
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
      },
    ],
    '../node_modules/ramda/es/pipeK.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = pipeK

        var _composeK = _interopRequireDefault(require('./composeK.js'))

        var _reverse = _interopRequireDefault(require('./reverse.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns the left-to-right Kleisli composition of the provided functions,
         * each of which must return a value of a type supported by [`chain`](#chain).
         *
         * `R.pipeK(f, g, h)` is equivalent to `R.pipe(f, R.chain(g), R.chain(h))`.
         *
         * @func
         * @memberOf R
         * @since v0.16.0
         * @category Function
         * @sig Chain m => ((a -> m b), (b -> m c), ..., (y -> m z)) -> (a -> m z)
         * @param {...Function}
         * @return {Function}
         * @see R.composeK
         * @deprecated since v0.26.0
         * @example
         *
         *      //  parseJson :: String -> Maybe *
         *      //  get :: String -> Object -> Maybe *
         *
         *      //  getStateCode :: Maybe String -> Maybe String
         *      const getStateCode = R.pipeK(
         *        parseJson,
         *        get('user'),
         *        get('address'),
         *        get('state'),
         *        R.compose(Maybe.of, R.toUpper)
         *      );
         *
         *      getStateCode('{"user":{"address":{"state":"ny"}}}');
         *      //=> Just('NY')
         *      getStateCode('[Invalid JSON]');
         *      //=> Nothing()
         * @symb R.pipeK(f, g, h)(a) = R.chain(h, R.chain(g, f(a)))
         */
        function pipeK() {
          if (arguments.length === 0) {
            throw new Error('pipeK requires at least one argument')
          }

          return _composeK.default.apply(
            this,
            (0, _reverse.default)(arguments),
          )
        }
      },
      {
        './composeK.js': '../node_modules/ramda/es/composeK.js',
        './reverse.js': '../node_modules/ramda/es/reverse.js',
      },
    ],
    '../node_modules/ramda/es/prepend.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _concat2 = _interopRequireDefault(
          require('./internal/_concat.js'),
        )

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns a new list with the given element at the front, followed by the
         * contents of the list.
         *
         * @func
         * @memberOf R
         * @since v0.1.0
         * @category List
         * @sig a -> [a] -> [a]
         * @param {*} el The item to add to the head of the output list.
         * @param {Array} list The array to add to the tail of the output list.
         * @return {Array} A new array.
         * @see R.append
         * @example
         *
         *      R.prepend('fee', ['fi', 'fo', 'fum']); //=> ['fee', 'fi', 'fo', 'fum']
         */
        var prepend =
          /*#__PURE__*/
          (0, _curry.default)(function prepend(el, list) {
            return (0, _concat2.default)([el], list)
          })
        var _default = prepend
        exports.default = _default
      },
      {
        './internal/_concat.js':
          '../node_modules/ramda/es/internal/_concat.js',
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
      },
    ],
    '../node_modules/ramda/es/product.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _multiply = _interopRequireDefault(require('./multiply.js'))

        var _reduce = _interopRequireDefault(require('./reduce.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Multiplies together all the elements of a list.
         *
         * @func
         * @memberOf R
         * @since v0.1.0
         * @category Math
         * @sig [Number] -> Number
         * @param {Array} list An array of numbers
         * @return {Number} The product of all the numbers in the list.
         * @see R.reduce
         * @example
         *
         *      R.product([2,4,6,8,100,1]); //=> 38400
         */
        var product =
          /*#__PURE__*/
          (0, _reduce.default)(_multiply.default, 1)
        var _default = product
        exports.default = _default
      },
      {
        './multiply.js': '../node_modules/ramda/es/multiply.js',
        './reduce.js': '../node_modules/ramda/es/reduce.js',
      },
    ],
    '../node_modules/ramda/es/useWith.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        var _curryN = _interopRequireDefault(require('./curryN.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Accepts a function `fn` and a list of transformer functions and returns a
         * new curried function. When the new function is invoked, it calls the
         * function `fn` with parameters consisting of the result of calling each
         * supplied handler on successive arguments to the new function.
         *
         * If more arguments are passed to the returned function than transformer
         * functions, those arguments are passed directly to `fn` as additional
         * parameters. If you expect additional arguments that don't need to be
         * transformed, although you can ignore them, it's best to pass an identity
         * function so that the new function reports the correct arity.
         *
         * @func
         * @memberOf R
         * @since v0.1.0
         * @category Function
         * @sig ((x1, x2, ...) -> z) -> [(a -> x1), (b -> x2), ...] -> (a -> b -> ... -> z)
         * @param {Function} fn The function to wrap.
         * @param {Array} transformers A list of transformer functions
         * @return {Function} The wrapped function.
         * @see R.converge
         * @example
         *
         *      R.useWith(Math.pow, [R.identity, R.identity])(3, 4); //=> 81
         *      R.useWith(Math.pow, [R.identity, R.identity])(3)(4); //=> 81
         *      R.useWith(Math.pow, [R.dec, R.inc])(3, 4); //=> 32
         *      R.useWith(Math.pow, [R.dec, R.inc])(3)(4); //=> 32
         * @symb R.useWith(f, [g, h])(a, b) = f(g(a), h(b))
         */
        var useWith =
          /*#__PURE__*/
          (0, _curry.default)(function useWith(fn, transformers) {
            return (0, _curryN.default)(transformers.length, function() {
              var args = []
              var idx = 0

              while (idx < transformers.length) {
                args.push(transformers[idx].call(this, arguments[idx]))
                idx += 1
              }

              return fn.apply(
                this,
                args.concat(
                  Array.prototype.slice.call(
                    arguments,
                    transformers.length,
                  ),
                ),
              )
            })
          })
        var _default = useWith
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
        './curryN.js': '../node_modules/ramda/es/curryN.js',
      },
    ],
    '../node_modules/ramda/es/project.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _map2 = _interopRequireDefault(require('./internal/_map.js'))

        var _identity = _interopRequireDefault(require('./identity.js'))

        var _pickAll = _interopRequireDefault(require('./pickAll.js'))

        var _useWith = _interopRequireDefault(require('./useWith.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Reasonable analog to SQL `select` statement.
         *
         * @func
         * @memberOf R
         * @since v0.1.0
         * @category Object
         * @category Relation
         * @sig [k] -> [{k: v}] -> [{k: v}]
         * @param {Array} props The property names to project
         * @param {Array} objs The objects to query
         * @return {Array} An array of objects with just the `props` properties.
         * @example
         *
         *      const abby = {name: 'Abby', age: 7, hair: 'blond', grade: 2};
         *      const fred = {name: 'Fred', age: 12, hair: 'brown', grade: 7};
         *      const kids = [abby, fred];
         *      R.project(['name', 'grade'], kids); //=> [{name: 'Abby', grade: 2}, {name: 'Fred', grade: 7}]
         */
        var project =
          /*#__PURE__*/
          (0, _useWith.default)(_map2.default, [
            _pickAll.default,
            _identity.default,
          ]) // passing `identity` gives correct arity

        var _default = project
        exports.default = _default
      },
      {
        './internal/_map.js': '../node_modules/ramda/es/internal/_map.js',
        './identity.js': '../node_modules/ramda/es/identity.js',
        './pickAll.js': '../node_modules/ramda/es/pickAll.js',
        './useWith.js': '../node_modules/ramda/es/useWith.js',
      },
    ],
    '../node_modules/ramda/es/propEq.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry3.js'),
        )

        var _equals = _interopRequireDefault(require('./equals.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns `true` if the specified object property is equal, in
         * [`R.equals`](#equals) terms, to the given value; `false` otherwise.
         * You can test multiple properties with [`R.whereEq`](#whereEq).
         *
         * @func
         * @memberOf R
         * @since v0.1.0
         * @category Relation
         * @sig String -> a -> Object -> Boolean
         * @param {String} name
         * @param {*} val
         * @param {*} obj
         * @return {Boolean}
         * @see R.whereEq, R.propSatisfies, R.equals
         * @example
         *
         *      const abby = {name: 'Abby', age: 7, hair: 'blond'};
         *      const fred = {name: 'Fred', age: 12, hair: 'brown'};
         *      const rusty = {name: 'Rusty', age: 10, hair: 'brown'};
         *      const alois = {name: 'Alois', age: 15, disposition: 'surly'};
         *      const kids = [abby, fred, rusty, alois];
         *      const hasBrownHair = R.propEq('hair', 'brown');
         *      R.filter(hasBrownHair, kids); //=> [fred, rusty]
         */
        var propEq =
          /*#__PURE__*/
          (0, _curry.default)(function propEq(name, val, obj) {
            return (0, _equals.default)(val, obj[name])
          })
        var _default = propEq
        exports.default = _default
      },
      {
        './internal/_curry3.js':
          '../node_modules/ramda/es/internal/_curry3.js',
        './equals.js': '../node_modules/ramda/es/equals.js',
      },
    ],
    '../node_modules/ramda/es/propIs.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry3.js'),
        )

        var _is = _interopRequireDefault(require('./is.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns `true` if the specified object property is of the given type;
         * `false` otherwise.
         *
         * @func
         * @memberOf R
         * @since v0.16.0
         * @category Type
         * @sig Type -> String -> Object -> Boolean
         * @param {Function} type
         * @param {String} name
         * @param {*} obj
         * @return {Boolean}
         * @see R.is, R.propSatisfies
         * @example
         *
         *      R.propIs(Number, 'x', {x: 1, y: 2});  //=> true
         *      R.propIs(Number, 'x', {x: 'foo'});    //=> false
         *      R.propIs(Number, 'x', {});            //=> false
         */
        var propIs =
          /*#__PURE__*/
          (0, _curry.default)(function propIs(type, name, obj) {
            return (0, _is.default)(type, obj[name])
          })
        var _default = propIs
        exports.default = _default
      },
      {
        './internal/_curry3.js':
          '../node_modules/ramda/es/internal/_curry3.js',
        './is.js': '../node_modules/ramda/es/is.js',
      },
    ],
    '../node_modules/ramda/es/propOr.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry3.js'),
        )

        var _pathOr = _interopRequireDefault(require('./pathOr.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * If the given, non-null object has an own property with the specified name,
         * returns the value of that property. Otherwise returns the provided default
         * value.
         *
         * @func
         * @memberOf R
         * @since v0.6.0
         * @category Object
         * @sig a -> String -> Object -> a
         * @param {*} val The default value.
         * @param {String} p The name of the property to return.
         * @param {Object} obj The object to query.
         * @return {*} The value of given property of the supplied object or the default value.
         * @example
         *
         *      const alice = {
         *        name: 'ALICE',
         *        age: 101
         *      };
         *      const favorite = R.prop('favoriteLibrary');
         *      const favoriteWithDefault = R.propOr('Ramda', 'favoriteLibrary');
         *
         *      favorite(alice);  //=> undefined
         *      favoriteWithDefault(alice);  //=> 'Ramda'
         */
        var propOr =
          /*#__PURE__*/
          (0, _curry.default)(function propOr(val, p, obj) {
            return (0, _pathOr.default)(val, [p], obj)
          })
        var _default = propOr
        exports.default = _default
      },
      {
        './internal/_curry3.js':
          '../node_modules/ramda/es/internal/_curry3.js',
        './pathOr.js': '../node_modules/ramda/es/pathOr.js',
      },
    ],
    '../node_modules/ramda/es/propSatisfies.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry3.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns `true` if the specified object property satisfies the given
         * predicate; `false` otherwise. You can test multiple properties with
         * [`R.where`](#where).
         *
         * @func
         * @memberOf R
         * @since v0.16.0
         * @category Logic
         * @sig (a -> Boolean) -> String -> {String: a} -> Boolean
         * @param {Function} pred
         * @param {String} name
         * @param {*} obj
         * @return {Boolean}
         * @see R.where, R.propEq, R.propIs
         * @example
         *
         *      R.propSatisfies(x => x > 0, 'x', {x: 1, y: 2}); //=> true
         */
        var propSatisfies =
          /*#__PURE__*/
          (0, _curry.default)(function propSatisfies(pred, name, obj) {
            return pred(obj[name])
          })
        var _default = propSatisfies
        exports.default = _default
      },
      {
        './internal/_curry3.js':
          '../node_modules/ramda/es/internal/_curry3.js',
      },
    ],
    '../node_modules/ramda/es/props.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Acts as multiple `prop`: array of keys in, array of values out. Preserves
         * order.
         *
         * @func
         * @memberOf R
         * @since v0.1.0
         * @category Object
         * @sig [k] -> {k: v} -> [v]
         * @param {Array} ps The property names to fetch
         * @param {Object} obj The object to query
         * @return {Array} The corresponding values or partially applied function.
         * @example
         *
         *      R.props(['x', 'y'], {x: 1, y: 2}); //=> [1, 2]
         *      R.props(['c', 'a', 'b'], {b: 2, a: 1}); //=> [undefined, 1, 2]
         *
         *      const fullName = R.compose(R.join(' '), R.props(['first', 'last']));
         *      fullName({last: 'Bullet-Tooth', age: 33, first: 'Tony'}); //=> 'Tony Bullet-Tooth'
         */
        var props =
          /*#__PURE__*/
          (0, _curry.default)(function props(ps, obj) {
            var len = ps.length
            var out = []
            var idx = 0

            while (idx < len) {
              out[idx] = obj[ps[idx]]
              idx += 1
            }

            return out
          })
        var _default = props
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
      },
    ],
    '../node_modules/ramda/es/range.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        var _isNumber2 = _interopRequireDefault(
          require('./internal/_isNumber.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns a list of numbers from `from` (inclusive) to `to` (exclusive).
         *
         * @func
         * @memberOf R
         * @since v0.1.0
         * @category List
         * @sig Number -> Number -> [Number]
         * @param {Number} from The first number in the list.
         * @param {Number} to One more than the last number in the list.
         * @return {Array} The list of numbers in the set `[a, b)`.
         * @example
         *
         *      R.range(1, 5);    //=> [1, 2, 3, 4]
         *      R.range(50, 53);  //=> [50, 51, 52]
         */
        var range =
          /*#__PURE__*/
          (0, _curry.default)(function range(from, to) {
            if (
              !(
                (0, _isNumber2.default)(from) &&
                (0, _isNumber2.default)(to)
              )
            ) {
              throw new TypeError(
                'Both arguments to range must be numbers',
              )
            }

            var result = []
            var n = from

            while (n < to) {
              result.push(n)
              n += 1
            }

            return result
          })
        var _default = range
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
        './internal/_isNumber.js':
          '../node_modules/ramda/es/internal/_isNumber.js',
      },
    ],
    '../node_modules/ramda/es/reduceRight.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry3.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns a single item by iterating through the list, successively calling
         * the iterator function and passing it an accumulator value and the current
         * value from the array, and then passing the result to the next call.
         *
         * Similar to [`reduce`](#reduce), except moves through the input list from the
         * right to the left.
         *
         * The iterator function receives two values: *(value, acc)*, while the arguments'
         * order of `reduce`'s iterator function is *(acc, value)*.
         *
         * Note: `R.reduceRight` does not skip deleted or unassigned indices (sparse
         * arrays), unlike the native `Array.prototype.reduceRight` method. For more details
         * on this behavior, see:
         * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight#Description
         *
         * @func
         * @memberOf R
         * @since v0.1.0
         * @category List
         * @sig ((a, b) -> b) -> b -> [a] -> b
         * @param {Function} fn The iterator function. Receives two values, the current element from the array
         *        and the accumulator.
         * @param {*} acc The accumulator value.
         * @param {Array} list The list to iterate over.
         * @return {*} The final, accumulated value.
         * @see R.reduce, R.addIndex
         * @example
         *
         *      R.reduceRight(R.subtract, 0, [1, 2, 3, 4]) // => (1 - (2 - (3 - (4 - 0)))) = -2
         *      //    -               -2
         *      //   / \              / \
         *      //  1   -            1   3
         *      //     / \              / \
         *      //    2   -     ==>    2  -1
         *      //       / \              / \
         *      //      3   -            3   4
         *      //         / \              / \
         *      //        4   0            4   0
         *
         * @symb R.reduceRight(f, a, [b, c, d]) = f(b, f(c, f(d, a)))
         */
        var reduceRight =
          /*#__PURE__*/
          (0, _curry.default)(function reduceRight(fn, acc, list) {
            var idx = list.length - 1

            while (idx >= 0) {
              acc = fn(list[idx], acc)
              idx -= 1
            }

            return acc
          })
        var _default = reduceRight
        exports.default = _default
      },
      {
        './internal/_curry3.js':
          '../node_modules/ramda/es/internal/_curry3.js',
      },
    ],
    '../node_modules/ramda/es/reduceWhile.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curryN2 = _interopRequireDefault(
          require('./internal/_curryN.js'),
        )

        var _reduce2 = _interopRequireDefault(
          require('./internal/_reduce.js'),
        )

        var _reduced2 = _interopRequireDefault(
          require('./internal/_reduced.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Like [`reduce`](#reduce), `reduceWhile` returns a single item by iterating
         * through the list, successively calling the iterator function. `reduceWhile`
         * also takes a predicate that is evaluated before each step. If the predicate
         * returns `false`, it "short-circuits" the iteration and returns the current
         * value of the accumulator.
         *
         * @func
         * @memberOf R
         * @since v0.22.0
         * @category List
         * @sig ((a, b) -> Boolean) -> ((a, b) -> a) -> a -> [b] -> a
         * @param {Function} pred The predicate. It is passed the accumulator and the
         *        current element.
         * @param {Function} fn The iterator function. Receives two values, the
         *        accumulator and the current element.
         * @param {*} a The accumulator value.
         * @param {Array} list The list to iterate over.
         * @return {*} The final, accumulated value.
         * @see R.reduce, R.reduced
         * @example
         *
         *      const isOdd = (acc, x) => x % 2 === 1;
         *      const xs = [1, 3, 5, 60, 777, 800];
         *      R.reduceWhile(isOdd, R.add, 0, xs); //=> 9
         *
         *      const ys = [2, 4, 6]
         *      R.reduceWhile(isOdd, R.add, 111, ys); //=> 111
         */
        var reduceWhile =
          /*#__PURE__*/
          (0, _curryN2.default)(4, [], function _reduceWhile(
            pred,
            fn,
            a,
            list,
          ) {
            return (0, _reduce2.default)(
              function(acc, x) {
                return pred(acc, x)
                  ? fn(acc, x)
                  : (0, _reduced2.default)(acc)
              },
              a,
              list,
            )
          })
        var _default = reduceWhile
        exports.default = _default
      },
      {
        './internal/_curryN.js':
          '../node_modules/ramda/es/internal/_curryN.js',
        './internal/_reduce.js':
          '../node_modules/ramda/es/internal/_reduce.js',
        './internal/_reduced.js':
          '../node_modules/ramda/es/internal/_reduced.js',
      },
    ],
    '../node_modules/ramda/es/reduced.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry1.js'),
        )

        var _reduced2 = _interopRequireDefault(
          require('./internal/_reduced.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns a value wrapped to indicate that it is the final value of the reduce
         * and transduce functions. The returned value should be considered a black
         * box: the internal structure is not guaranteed to be stable.
         *
         * Note: this optimization is only available to the below functions:
         * - [`reduce`](#reduce)
         * - [`reduceWhile`](#reduceWhile)
         * - [`transduce`](#transduce)
         *
         * @func
         * @memberOf R
         * @since v0.15.0
         * @category List
         * @sig a -> *
         * @param {*} x The final value of the reduce.
         * @return {*} The wrapped value.
         * @see R.reduce, R.reduceWhile, R.transduce
         * @example
         *
         *     R.reduce(
         *       (acc, item) => item > 3 ? R.reduced(acc) : acc.concat(item),
         *       [],
         *       [1, 2, 3, 4, 5]) // [1, 2, 3]
         */
        var reduced =
          /*#__PURE__*/
          (0, _curry.default)(_reduced2.default)
        var _default = reduced
        exports.default = _default
      },
      {
        './internal/_curry1.js':
          '../node_modules/ramda/es/internal/_curry1.js',
        './internal/_reduced.js':
          '../node_modules/ramda/es/internal/_reduced.js',
      },
    ],
    '../node_modules/ramda/es/times.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Calls an input function `n` times, returning an array containing the results
         * of those function calls.
         *
         * `fn` is passed one argument: The current value of `n`, which begins at `0`
         * and is gradually incremented to `n - 1`.
         *
         * @func
         * @memberOf R
         * @since v0.2.3
         * @category List
         * @sig (Number -> a) -> Number -> [a]
         * @param {Function} fn The function to invoke. Passed one argument, the current value of `n`.
         * @param {Number} n A value between `0` and `n - 1`. Increments after each function call.
         * @return {Array} An array containing the return values of all calls to `fn`.
         * @see R.repeat
         * @example
         *
         *      R.times(R.identity, 5); //=> [0, 1, 2, 3, 4]
         * @symb R.times(f, 0) = []
         * @symb R.times(f, 1) = [f(0)]
         * @symb R.times(f, 2) = [f(0), f(1)]
         */
        var times =
          /*#__PURE__*/
          (0, _curry.default)(function times(fn, n) {
            var len = Number(n)
            var idx = 0
            var list

            if (len < 0 || isNaN(len)) {
              throw new RangeError('n must be a non-negative number')
            }

            list = new Array(len)

            while (idx < len) {
              list[idx] = fn(idx)
              idx += 1
            }

            return list
          })
        var _default = times
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
      },
    ],
    '../node_modules/ramda/es/repeat.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        var _always = _interopRequireDefault(require('./always.js'))

        var _times = _interopRequireDefault(require('./times.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns a fixed list of size `n` containing a specified identical value.
         *
         * @func
         * @memberOf R
         * @since v0.1.1
         * @category List
         * @sig a -> n -> [a]
         * @param {*} value The value to repeat.
         * @param {Number} n The desired size of the output list.
         * @return {Array} A new array containing `n` `value`s.
         * @see R.times
         * @example
         *
         *      R.repeat('hi', 5); //=> ['hi', 'hi', 'hi', 'hi', 'hi']
         *
         *      const obj = {};
         *      const repeatedObjs = R.repeat(obj, 5); //=> [{}, {}, {}, {}, {}]
         *      repeatedObjs[0] === repeatedObjs[1]; //=> true
         * @symb R.repeat(a, 0) = []
         * @symb R.repeat(a, 1) = [a]
         * @symb R.repeat(a, 2) = [a, a]
         */
        var repeat =
          /*#__PURE__*/
          (0, _curry.default)(function repeat(value, n) {
            return (0, _times.default)((0, _always.default)(value), n)
          })
        var _default = repeat
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
        './always.js': '../node_modules/ramda/es/always.js',
        './times.js': '../node_modules/ramda/es/times.js',
      },
    ],
    '../node_modules/ramda/es/replace.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry3.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Replace a substring or regex match in a string with a replacement.
         *
         * The first two parameters correspond to the parameters of the
         * `String.prototype.replace()` function, so the second parameter can also be a
         * function.
         *
         * @func
         * @memberOf R
         * @since v0.7.0
         * @category String
         * @sig RegExp|String -> String -> String -> String
         * @param {RegExp|String} pattern A regular expression or a substring to match.
         * @param {String} replacement The string to replace the matches with.
         * @param {String} str The String to do the search and replacement in.
         * @return {String} The result.
         * @example
         *
         *      R.replace('foo', 'bar', 'foo foo foo'); //=> 'bar foo foo'
         *      R.replace(/foo/, 'bar', 'foo foo foo'); //=> 'bar foo foo'
         *
         *      // Use the "g" (global) flag to replace all occurrences:
         *      R.replace(/foo/g, 'bar', 'foo foo foo'); //=> 'bar bar bar'
         */
        var replace =
          /*#__PURE__*/
          (0, _curry.default)(function replace(regex, replacement, str) {
            return str.replace(regex, replacement)
          })
        var _default = replace
        exports.default = _default
      },
      {
        './internal/_curry3.js':
          '../node_modules/ramda/es/internal/_curry3.js',
      },
    ],
    '../node_modules/ramda/es/scan.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry3.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Scan is similar to [`reduce`](#reduce), but returns a list of successively
         * reduced values from the left
         *
         * @func
         * @memberOf R
         * @since v0.10.0
         * @category List
         * @sig ((a, b) -> a) -> a -> [b] -> [a]
         * @param {Function} fn The iterator function. Receives two values, the accumulator and the
         *        current element from the array
         * @param {*} acc The accumulator value.
         * @param {Array} list The list to iterate over.
         * @return {Array} A list of all intermediately reduced values.
         * @see R.reduce, R.mapAccum
         * @example
         *
         *      const numbers = [1, 2, 3, 4];
         *      const factorials = R.scan(R.multiply, 1, numbers); //=> [1, 1, 2, 6, 24]
         * @symb R.scan(f, a, [b, c]) = [a, f(a, b), f(f(a, b), c)]
         */
        var scan =
          /*#__PURE__*/
          (0, _curry.default)(function scan(fn, acc, list) {
            var idx = 0
            var len = list.length
            var result = [acc]

            while (idx < len) {
              acc = fn(acc, list[idx])
              result[idx + 1] = acc
              idx += 1
            }

            return result
          })
        var _default = scan
        exports.default = _default
      },
      {
        './internal/_curry3.js':
          '../node_modules/ramda/es/internal/_curry3.js',
      },
    ],
    '../node_modules/ramda/es/sequence.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        var _ap = _interopRequireDefault(require('./ap.js'))

        var _map = _interopRequireDefault(require('./map.js'))

        var _prepend = _interopRequireDefault(require('./prepend.js'))

        var _reduceRight = _interopRequireDefault(
          require('./reduceRight.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Transforms a [Traversable](https://github.com/fantasyland/fantasy-land#traversable)
         * of [Applicative](https://github.com/fantasyland/fantasy-land#applicative) into an
         * Applicative of Traversable.
         *
         * Dispatches to the `sequence` method of the second argument, if present.
         *
         * @func
         * @memberOf R
         * @since v0.19.0
         * @category List
         * @sig (Applicative f, Traversable t) => (a -> f a) -> t (f a) -> f (t a)
         * @param {Function} of
         * @param {*} traversable
         * @return {*}
         * @see R.traverse
         * @example
         *
         *      R.sequence(Maybe.of, [Just(1), Just(2), Just(3)]);   //=> Just([1, 2, 3])
         *      R.sequence(Maybe.of, [Just(1), Just(2), Nothing()]); //=> Nothing()
         *
         *      R.sequence(R.of, Just([1, 2, 3])); //=> [Just(1), Just(2), Just(3)]
         *      R.sequence(R.of, Nothing());       //=> [Nothing()]
         */
        var sequence =
          /*#__PURE__*/
          (0, _curry.default)(function sequence(of, traversable) {
            return typeof traversable.sequence === 'function'
              ? traversable.sequence(of)
              : (0, _reduceRight.default)(
                  function(x, acc) {
                    return (0, _ap.default)(
                      (0, _map.default)(_prepend.default, x),
                      acc,
                    )
                  },
                  of([]),
                  traversable,
                )
          })
        var _default = sequence
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
        './ap.js': '../node_modules/ramda/es/ap.js',
        './map.js': '../node_modules/ramda/es/map.js',
        './prepend.js': '../node_modules/ramda/es/prepend.js',
        './reduceRight.js': '../node_modules/ramda/es/reduceRight.js',
      },
    ],
    '../node_modules/ramda/es/set.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry3.js'),
        )

        var _always = _interopRequireDefault(require('./always.js'))

        var _over = _interopRequireDefault(require('./over.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns the result of "setting" the portion of the given data structure
         * focused by the given lens to the given value.
         *
         * @func
         * @memberOf R
         * @since v0.16.0
         * @category Object
         * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s
         * @sig Lens s a -> a -> s -> s
         * @param {Lens} lens
         * @param {*} v
         * @param {*} x
         * @return {*}
         * @see R.prop, R.lensIndex, R.lensProp
         * @example
         *
         *      const xLens = R.lensProp('x');
         *
         *      R.set(xLens, 4, {x: 1, y: 2});  //=> {x: 4, y: 2}
         *      R.set(xLens, 8, {x: 1, y: 2});  //=> {x: 8, y: 2}
         */
        var set =
          /*#__PURE__*/
          (0, _curry.default)(function set(lens, v, x) {
            return (0, _over.default)(lens, (0, _always.default)(v), x)
          })
        var _default = set
        exports.default = _default
      },
      {
        './internal/_curry3.js':
          '../node_modules/ramda/es/internal/_curry3.js',
        './always.js': '../node_modules/ramda/es/always.js',
        './over.js': '../node_modules/ramda/es/over.js',
      },
    ],
    '../node_modules/ramda/es/sort.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns a copy of the list, sorted according to the comparator function,
         * which should accept two values at a time and return a negative number if the
         * first value is smaller, a positive number if it's larger, and zero if they
         * are equal. Please note that this is a **copy** of the list. It does not
         * modify the original.
         *
         * @func
         * @memberOf R
         * @since v0.1.0
         * @category List
         * @sig ((a, a) -> Number) -> [a] -> [a]
         * @param {Function} comparator A sorting function :: a -> b -> Int
         * @param {Array} list The list to sort
         * @return {Array} a new array with its elements sorted by the comparator function.
         * @example
         *
         *      const diff = function(a, b) { return a - b; };
         *      R.sort(diff, [4,2,7,5]); //=> [2, 4, 5, 7]
         */
        var sort =
          /*#__PURE__*/
          (0, _curry.default)(function sort(comparator, list) {
            return Array.prototype.slice.call(list, 0).sort(comparator)
          })
        var _default = sort
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
      },
    ],
    '../node_modules/ramda/es/sortBy.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Sorts the list according to the supplied function.
         *
         * @func
         * @memberOf R
         * @since v0.1.0
         * @category Relation
         * @sig Ord b => (a -> b) -> [a] -> [a]
         * @param {Function} fn
         * @param {Array} list The list to sort.
         * @return {Array} A new list sorted by the keys generated by `fn`.
         * @example
         *
         *      const sortByFirstItem = R.sortBy(R.prop(0));
         *      const pairs = [[-1, 1], [-2, 2], [-3, 3]];
         *      sortByFirstItem(pairs); //=> [[-3, 3], [-2, 2], [-1, 1]]
         *
         *      const sortByNameCaseInsensitive = R.sortBy(R.compose(R.toLower, R.prop('name')));
         *      const alice = {
         *        name: 'ALICE',
         *        age: 101
         *      };
         *      const bob = {
         *        name: 'Bob',
         *        age: -10
         *      };
         *      const clara = {
         *        name: 'clara',
         *        age: 314.159
         *      };
         *      const people = [clara, bob, alice];
         *      sortByNameCaseInsensitive(people); //=> [alice, bob, clara]
         */
        var sortBy =
          /*#__PURE__*/
          (0, _curry.default)(function sortBy(fn, list) {
            return Array.prototype.slice
              .call(list, 0)
              .sort(function(a, b) {
                var aa = fn(a)
                var bb = fn(b)
                return aa < bb ? -1 : aa > bb ? 1 : 0
              })
          })
        var _default = sortBy
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
      },
    ],
    '../node_modules/ramda/es/sortWith.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Sorts a list according to a list of comparators.
         *
         * @func
         * @memberOf R
         * @since v0.23.0
         * @category Relation
         * @sig [(a, a) -> Number] -> [a] -> [a]
         * @param {Array} functions A list of comparator functions.
         * @param {Array} list The list to sort.
         * @return {Array} A new list sorted according to the comarator functions.
         * @example
         *
         *      const alice = {
         *        name: 'alice',
         *        age: 40
         *      };
         *      const bob = {
         *        name: 'bob',
         *        age: 30
         *      };
         *      const clara = {
         *        name: 'clara',
         *        age: 40
         *      };
         *      const people = [clara, bob, alice];
         *      const ageNameSort = R.sortWith([
         *        R.descend(R.prop('age')),
         *        R.ascend(R.prop('name'))
         *      ]);
         *      ageNameSort(people); //=> [alice, clara, bob]
         */
        var sortWith =
          /*#__PURE__*/
          (0, _curry.default)(function sortWith(fns, list) {
            return Array.prototype.slice
              .call(list, 0)
              .sort(function(a, b) {
                var result = 0
                var i = 0

                while (result === 0 && i < fns.length) {
                  result = fns[i](a, b)
                  i += 1
                }

                return result
              })
          })
        var _default = sortWith
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
      },
    ],
    '../node_modules/ramda/es/split.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _invoker = _interopRequireDefault(require('./invoker.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Splits a string into an array of strings based on the given
         * separator.
         *
         * @func
         * @memberOf R
         * @since v0.1.0
         * @category String
         * @sig (String | RegExp) -> String -> [String]
         * @param {String|RegExp} sep The pattern.
         * @param {String} str The string to separate into an array.
         * @return {Array} The array of strings from `str` separated by `str`.
         * @see R.join
         * @example
         *
         *      const pathComponents = R.split('/');
         *      R.tail(pathComponents('/usr/local/bin/node')); //=> ['usr', 'local', 'bin', 'node']
         *
         *      R.split('.', 'a.b.c.xyz.d'); //=> ['a', 'b', 'c', 'xyz', 'd']
         */
        var split =
          /*#__PURE__*/
          (0, _invoker.default)(1, 'split')
        var _default = split
        exports.default = _default
      },
      { './invoker.js': '../node_modules/ramda/es/invoker.js' },
    ],
    '../node_modules/ramda/es/splitAt.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        var _length = _interopRequireDefault(require('./length.js'))

        var _slice = _interopRequireDefault(require('./slice.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Splits a given list or string at a given index.
         *
         * @func
         * @memberOf R
         * @since v0.19.0
         * @category List
         * @sig Number -> [a] -> [[a], [a]]
         * @sig Number -> String -> [String, String]
         * @param {Number} index The index where the array/string is split.
         * @param {Array|String} array The array/string to be split.
         * @return {Array}
         * @example
         *
         *      R.splitAt(1, [1, 2, 3]);          //=> [[1], [2, 3]]
         *      R.splitAt(5, 'hello world');      //=> ['hello', ' world']
         *      R.splitAt(-1, 'foobar');          //=> ['fooba', 'r']
         */
        var splitAt =
          /*#__PURE__*/
          (0, _curry.default)(function splitAt(index, array) {
            return [
              (0, _slice.default)(0, index, array),
              (0, _slice.default)(
                index,
                (0, _length.default)(array),
                array,
              ),
            ]
          })
        var _default = splitAt
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
        './length.js': '../node_modules/ramda/es/length.js',
        './slice.js': '../node_modules/ramda/es/slice.js',
      },
    ],
    '../node_modules/ramda/es/splitEvery.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        var _slice = _interopRequireDefault(require('./slice.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Splits a collection into slices of the specified length.
         *
         * @func
         * @memberOf R
         * @since v0.16.0
         * @category List
         * @sig Number -> [a] -> [[a]]
         * @sig Number -> String -> [String]
         * @param {Number} n
         * @param {Array} list
         * @return {Array}
         * @example
         *
         *      R.splitEvery(3, [1, 2, 3, 4, 5, 6, 7]); //=> [[1, 2, 3], [4, 5, 6], [7]]
         *      R.splitEvery(3, 'foobarbaz'); //=> ['foo', 'bar', 'baz']
         */
        var splitEvery =
          /*#__PURE__*/
          (0, _curry.default)(function splitEvery(n, list) {
            if (n <= 0) {
              throw new Error(
                'First argument to splitEvery must be a positive integer',
              )
            }

            var result = []
            var idx = 0

            while (idx < list.length) {
              result.push((0, _slice.default)(idx, (idx += n), list))
            }

            return result
          })
        var _default = splitEvery
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
        './slice.js': '../node_modules/ramda/es/slice.js',
      },
    ],
    '../node_modules/ramda/es/splitWhen.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Takes a list and a predicate and returns a pair of lists with the following properties:
         *
         *  - the result of concatenating the two output lists is equivalent to the input list;
         *  - none of the elements of the first output list satisfies the predicate; and
         *  - if the second output list is non-empty, its first element satisfies the predicate.
         *
         * @func
         * @memberOf R
         * @since v0.19.0
         * @category List
         * @sig (a -> Boolean) -> [a] -> [[a], [a]]
         * @param {Function} pred The predicate that determines where the array is split.
         * @param {Array} list The array to be split.
         * @return {Array}
         * @example
         *
         *      R.splitWhen(R.equals(2), [1, 2, 3, 1, 2, 3]);   //=> [[1], [2, 3, 1, 2, 3]]
         */
        var splitWhen =
          /*#__PURE__*/
          (0, _curry.default)(function splitWhen(pred, list) {
            var idx = 0
            var len = list.length
            var prefix = []

            while (idx < len && !pred(list[idx])) {
              prefix.push(list[idx])
              idx += 1
            }

            return [prefix, Array.prototype.slice.call(list, idx)]
          })
        var _default = splitWhen
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
      },
    ],
    '../node_modules/ramda/es/startsWith.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        var _equals = _interopRequireDefault(require('./equals.js'))

        var _take = _interopRequireDefault(require('./take.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Checks if a list starts with the provided sublist.
         *
         * Similarly, checks if a string starts with the provided substring.
         *
         * @func
         * @memberOf R
         * @since v0.24.0
         * @category List
         * @sig [a] -> [a] -> Boolean
         * @sig String -> String -> Boolean
         * @param {*} prefix
         * @param {*} list
         * @return {Boolean}
         * @see R.endsWith
         * @example
         *
         *      R.startsWith('a', 'abc')                //=> true
         *      R.startsWith('b', 'abc')                //=> false
         *      R.startsWith(['a'], ['a', 'b', 'c'])    //=> true
         *      R.startsWith(['b'], ['a', 'b', 'c'])    //=> false
         */
        var startsWith =
          /*#__PURE__*/
          (0, _curry.default)(function(prefix, list) {
            return (0,
            _equals.default)((0, _take.default)(prefix.length, list), prefix)
          })
        var _default = startsWith
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
        './equals.js': '../node_modules/ramda/es/equals.js',
        './take.js': '../node_modules/ramda/es/take.js',
      },
    ],
    '../node_modules/ramda/es/subtract.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Subtracts its second argument from its first argument.
         *
         * @func
         * @memberOf R
         * @since v0.1.0
         * @category Math
         * @sig Number -> Number -> Number
         * @param {Number} a The first value.
         * @param {Number} b The second value.
         * @return {Number} The result of `a - b`.
         * @see R.add
         * @example
         *
         *      R.subtract(10, 8); //=> 2
         *
         *      const minus5 = R.subtract(R.__, 5);
         *      minus5(17); //=> 12
         *
         *      const complementaryAngle = R.subtract(90);
         *      complementaryAngle(30); //=> 60
         *      complementaryAngle(72); //=> 18
         */
        var subtract =
          /*#__PURE__*/
          (0, _curry.default)(function subtract(a, b) {
            return Number(a) - Number(b)
          })
        var _default = subtract
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
      },
    ],
    '../node_modules/ramda/es/symmetricDifference.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        var _concat = _interopRequireDefault(require('./concat.js'))

        var _difference = _interopRequireDefault(
          require('./difference.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Finds the set (i.e. no duplicates) of all elements contained in the first or
         * second list, but not both.
         *
         * @func
         * @memberOf R
         * @since v0.19.0
         * @category Relation
         * @sig [*] -> [*] -> [*]
         * @param {Array} list1 The first list.
         * @param {Array} list2 The second list.
         * @return {Array} The elements in `list1` or `list2`, but not both.
         * @see R.symmetricDifferenceWith, R.difference, R.differenceWith
         * @example
         *
         *      R.symmetricDifference([1,2,3,4], [7,6,5,4,3]); //=> [1,2,7,6,5]
         *      R.symmetricDifference([7,6,5,4,3], [1,2,3,4]); //=> [7,6,5,1,2]
         */
        var symmetricDifference =
          /*#__PURE__*/
          (0, _curry.default)(function symmetricDifference(list1, list2) {
            return (0,
            _concat.default)((0, _difference.default)(list1, list2), (0, _difference.default)(list2, list1))
          })
        var _default = symmetricDifference
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
        './concat.js': '../node_modules/ramda/es/concat.js',
        './difference.js': '../node_modules/ramda/es/difference.js',
      },
    ],
    '../node_modules/ramda/es/symmetricDifferenceWith.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry3.js'),
        )

        var _concat = _interopRequireDefault(require('./concat.js'))

        var _differenceWith = _interopRequireDefault(
          require('./differenceWith.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Finds the set (i.e. no duplicates) of all elements contained in the first or
         * second list, but not both. Duplication is determined according to the value
         * returned by applying the supplied predicate to two list elements.
         *
         * @func
         * @memberOf R
         * @since v0.19.0
         * @category Relation
         * @sig ((a, a) -> Boolean) -> [a] -> [a] -> [a]
         * @param {Function} pred A predicate used to test whether two items are equal.
         * @param {Array} list1 The first list.
         * @param {Array} list2 The second list.
         * @return {Array} The elements in `list1` or `list2`, but not both.
         * @see R.symmetricDifference, R.difference, R.differenceWith
         * @example
         *
         *      const eqA = R.eqBy(R.prop('a'));
         *      const l1 = [{a: 1}, {a: 2}, {a: 3}, {a: 4}];
         *      const l2 = [{a: 3}, {a: 4}, {a: 5}, {a: 6}];
         *      R.symmetricDifferenceWith(eqA, l1, l2); //=> [{a: 1}, {a: 2}, {a: 5}, {a: 6}]
         */
        var symmetricDifferenceWith =
          /*#__PURE__*/
          (0, _curry.default)(function symmetricDifferenceWith(
            pred,
            list1,
            list2,
          ) {
            return (0, _concat.default)(
              (0, _differenceWith.default)(pred, list1, list2),
              (0, _differenceWith.default)(pred, list2, list1),
            )
          })
        var _default = symmetricDifferenceWith
        exports.default = _default
      },
      {
        './internal/_curry3.js':
          '../node_modules/ramda/es/internal/_curry3.js',
        './concat.js': '../node_modules/ramda/es/concat.js',
        './differenceWith.js':
          '../node_modules/ramda/es/differenceWith.js',
      },
    ],
    '../node_modules/ramda/es/takeLastWhile.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        var _slice = _interopRequireDefault(require('./slice.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns a new list containing the last `n` elements of a given list, passing
         * each value to the supplied predicate function, and terminating when the
         * predicate function returns `false`. Excludes the element that caused the
         * predicate function to fail. The predicate function is passed one argument:
         * *(value)*.
         *
         * @func
         * @memberOf R
         * @since v0.16.0
         * @category List
         * @sig (a -> Boolean) -> [a] -> [a]
         * @sig (a -> Boolean) -> String -> String
         * @param {Function} fn The function called per iteration.
         * @param {Array} xs The collection to iterate over.
         * @return {Array} A new array.
         * @see R.dropLastWhile, R.addIndex
         * @example
         *
         *      const isNotOne = x => x !== 1;
         *
         *      R.takeLastWhile(isNotOne, [1, 2, 3, 4]); //=> [2, 3, 4]
         *
         *      R.takeLastWhile(x => x !== 'R' , 'Ramda'); //=> 'amda'
         */
        var takeLastWhile =
          /*#__PURE__*/
          (0, _curry.default)(function takeLastWhile(fn, xs) {
            var idx = xs.length - 1

            while (idx >= 0 && fn(xs[idx])) {
              idx -= 1
            }

            return (0, _slice.default)(idx + 1, Infinity, xs)
          })
        var _default = takeLastWhile
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
        './slice.js': '../node_modules/ramda/es/slice.js',
      },
    ],
    '../node_modules/ramda/es/internal/_xtakeWhile.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(require('./_curry2.js'))

        var _reduced2 = _interopRequireDefault(require('./_reduced.js'))

        var _xfBase2 = _interopRequireDefault(require('./_xfBase.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        var XTakeWhile =
          /*#__PURE__*/
          (function() {
            function XTakeWhile(f, xf) {
              this.xf = xf
              this.f = f
            }

            XTakeWhile.prototype['@@transducer/init'] =
              _xfBase2.default.init
            XTakeWhile.prototype['@@transducer/result'] =
              _xfBase2.default.result

            XTakeWhile.prototype['@@transducer/step'] = function(
              result,
              input,
            ) {
              return this.f(input)
                ? this.xf['@@transducer/step'](result, input)
                : (0, _reduced2.default)(result)
            }

            return XTakeWhile
          })()

        var _xtakeWhile =
          /*#__PURE__*/
          (0, _curry.default)(function _xtakeWhile(f, xf) {
            return new XTakeWhile(f, xf)
          })

        var _default = _xtakeWhile
        exports.default = _default
      },
      {
        './_curry2.js': '../node_modules/ramda/es/internal/_curry2.js',
        './_reduced.js': '../node_modules/ramda/es/internal/_reduced.js',
        './_xfBase.js': '../node_modules/ramda/es/internal/_xfBase.js',
      },
    ],
    '../node_modules/ramda/es/takeWhile.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        var _dispatchable2 = _interopRequireDefault(
          require('./internal/_dispatchable.js'),
        )

        var _xtakeWhile2 = _interopRequireDefault(
          require('./internal/_xtakeWhile.js'),
        )

        var _slice = _interopRequireDefault(require('./slice.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns a new list containing the first `n` elements of a given list,
         * passing each value to the supplied predicate function, and terminating when
         * the predicate function returns `false`. Excludes the element that caused the
         * predicate function to fail. The predicate function is passed one argument:
         * *(value)*.
         *
         * Dispatches to the `takeWhile` method of the second argument, if present.
         *
         * Acts as a transducer if a transformer is given in list position.
         *
         * @func
         * @memberOf R
         * @since v0.1.0
         * @category List
         * @sig (a -> Boolean) -> [a] -> [a]
         * @sig (a -> Boolean) -> String -> String
         * @param {Function} fn The function called per iteration.
         * @param {Array} xs The collection to iterate over.
         * @return {Array} A new array.
         * @see R.dropWhile, R.transduce, R.addIndex
         * @example
         *
         *      const isNotFour = x => x !== 4;
         *
         *      R.takeWhile(isNotFour, [1, 2, 3, 4, 3, 2, 1]); //=> [1, 2, 3]
         *
         *      R.takeWhile(x => x !== 'd' , 'Ramda'); //=> 'Ram'
         */
        var takeWhile =
          /*#__PURE__*/
          (0, _curry.default)(
            /*#__PURE__*/
            (0, _dispatchable2.default)(
              ['takeWhile'],
              _xtakeWhile2.default,
              function takeWhile(fn, xs) {
                var idx = 0
                var len = xs.length

                while (idx < len && fn(xs[idx])) {
                  idx += 1
                }

                return (0, _slice.default)(0, idx, xs)
              },
            ),
          )
        var _default = takeWhile
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
        './internal/_dispatchable.js':
          '../node_modules/ramda/es/internal/_dispatchable.js',
        './internal/_xtakeWhile.js':
          '../node_modules/ramda/es/internal/_xtakeWhile.js',
        './slice.js': '../node_modules/ramda/es/slice.js',
      },
    ],
    '../node_modules/ramda/es/internal/_xtap.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(require('./_curry2.js'))

        var _xfBase2 = _interopRequireDefault(require('./_xfBase.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        var XTap =
          /*#__PURE__*/
          (function() {
            function XTap(f, xf) {
              this.xf = xf
              this.f = f
            }

            XTap.prototype['@@transducer/init'] = _xfBase2.default.init
            XTap.prototype['@@transducer/result'] = _xfBase2.default.result

            XTap.prototype['@@transducer/step'] = function(result, input) {
              this.f(input)
              return this.xf['@@transducer/step'](result, input)
            }

            return XTap
          })()

        var _xtap =
          /*#__PURE__*/
          (0, _curry.default)(function _xtap(f, xf) {
            return new XTap(f, xf)
          })

        var _default = _xtap
        exports.default = _default
      },
      {
        './_curry2.js': '../node_modules/ramda/es/internal/_curry2.js',
        './_xfBase.js': '../node_modules/ramda/es/internal/_xfBase.js',
      },
    ],
    '../node_modules/ramda/es/tap.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        var _dispatchable2 = _interopRequireDefault(
          require('./internal/_dispatchable.js'),
        )

        var _xtap2 = _interopRequireDefault(require('./internal/_xtap.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Runs the given function with the supplied object, then returns the object.
         *
         * Acts as a transducer if a transformer is given as second parameter.
         *
         * @func
         * @memberOf R
         * @since v0.1.0
         * @category Function
         * @sig (a -> *) -> a -> a
         * @param {Function} fn The function to call with `x`. The return value of `fn` will be thrown away.
         * @param {*} x
         * @return {*} `x`.
         * @example
         *
         *      const sayX = x => console.log('x is ' + x);
         *      R.tap(sayX, 100); //=> 100
         *      // logs 'x is 100'
         * @symb R.tap(f, a) = a
         */
        var tap =
          /*#__PURE__*/
          (0, _curry.default)(
            /*#__PURE__*/
            (0, _dispatchable2.default)([], _xtap2.default, function tap(
              fn,
              x,
            ) {
              fn(x)
              return x
            }),
          )
        var _default = tap
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
        './internal/_dispatchable.js':
          '../node_modules/ramda/es/internal/_dispatchable.js',
        './internal/_xtap.js':
          '../node_modules/ramda/es/internal/_xtap.js',
      },
    ],
    '../node_modules/ramda/es/internal/_isRegExp.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = _isRegExp

        function _isRegExp(x) {
          return Object.prototype.toString.call(x) === '[object RegExp]'
        }
      },
      {},
    ],
    '../node_modules/ramda/es/test.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _cloneRegExp2 = _interopRequireDefault(
          require('./internal/_cloneRegExp.js'),
        )

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        var _isRegExp2 = _interopRequireDefault(
          require('./internal/_isRegExp.js'),
        )

        var _toString = _interopRequireDefault(require('./toString.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Determines whether a given string matches a given regular expression.
         *
         * @func
         * @memberOf R
         * @since v0.12.0
         * @category String
         * @sig RegExp -> String -> Boolean
         * @param {RegExp} pattern
         * @param {String} str
         * @return {Boolean}
         * @see R.match
         * @example
         *
         *      R.test(/^x/, 'xyz'); //=> true
         *      R.test(/^y/, 'xyz'); //=> false
         */
        var test =
          /*#__PURE__*/
          (0, _curry.default)(function test(pattern, str) {
            if (!(0, _isRegExp2.default)(pattern)) {
              throw new TypeError(
                '‘test’ requires a value of type RegExp as its first argument; received ' +
                  (0, _toString.default)(pattern),
              )
            }

            return (0, _cloneRegExp2.default)(pattern).test(str)
          })
        var _default = test
        exports.default = _default
      },
      {
        './internal/_cloneRegExp.js':
          '../node_modules/ramda/es/internal/_cloneRegExp.js',
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
        './internal/_isRegExp.js':
          '../node_modules/ramda/es/internal/_isRegExp.js',
        './toString.js': '../node_modules/ramda/es/toString.js',
      },
    ],
    '../node_modules/ramda/es/then.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        var _assertPromise2 = _interopRequireDefault(
          require('./internal/_assertPromise.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns the result of applying the onSuccess function to the value inside
         * a successfully resolved promise. This is useful for working with promises
         * inside function compositions.
         *
         * @func
         * @memberOf R
         * @category Function
         * @sig (a -> b) -> (Promise e a) -> (Promise e b)
         * @sig (a -> (Promise e b)) -> (Promise e a) -> (Promise e b)
         * @param {Function} onSuccess The function to apply. Can return a value or a promise of a value.
         * @param {Promise} p
         * @return {Promise} The result of calling `p.then(onSuccess)`
         * @see R.otherwise
         * @example
         *
         *      var makeQuery = (email) => ({ query: { email }});
         *
         *      //getMemberName :: String -> Promise ({firstName, lastName})
         *      var getMemberName = R.pipe(
         *        makeQuery,
         *        fetchMember,
         *        R.then(R.pick(['firstName', 'lastName']))
         *      );
         */
        var then =
          /*#__PURE__*/
          (0, _curry.default)(function then(f, p) {
            ;(0, _assertPromise2.default)('then', p)
            return p.then(f)
          })
        var _default = then
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
        './internal/_assertPromise.js':
          '../node_modules/ramda/es/internal/_assertPromise.js',
      },
    ],
    '../node_modules/ramda/es/toLower.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _invoker = _interopRequireDefault(require('./invoker.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * The lower case version of a string.
         *
         * @func
         * @memberOf R
         * @since v0.9.0
         * @category String
         * @sig String -> String
         * @param {String} str The string to lower case.
         * @return {String} The lower case version of `str`.
         * @see R.toUpper
         * @example
         *
         *      R.toLower('XYZ'); //=> 'xyz'
         */
        var toLower =
          /*#__PURE__*/
          (0, _invoker.default)(0, 'toLowerCase')
        var _default = toLower
        exports.default = _default
      },
      { './invoker.js': '../node_modules/ramda/es/invoker.js' },
    ],
    '../node_modules/ramda/es/toPairs.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry1.js'),
        )

        var _has2 = _interopRequireDefault(require('./internal/_has.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Converts an object into an array of key, value arrays. Only the object's
         * own properties are used.
         * Note that the order of the output array is not guaranteed to be consistent
         * across different JS platforms.
         *
         * @func
         * @memberOf R
         * @since v0.4.0
         * @category Object
         * @sig {String: *} -> [[String,*]]
         * @param {Object} obj The object to extract from
         * @return {Array} An array of key, value arrays from the object's own properties.
         * @see R.fromPairs
         * @example
         *
         *      R.toPairs({a: 1, b: 2, c: 3}); //=> [['a', 1], ['b', 2], ['c', 3]]
         */
        var toPairs =
          /*#__PURE__*/
          (0, _curry.default)(function toPairs(obj) {
            var pairs = []

            for (var prop in obj) {
              if ((0, _has2.default)(prop, obj)) {
                pairs[pairs.length] = [prop, obj[prop]]
              }
            }

            return pairs
          })
        var _default = toPairs
        exports.default = _default
      },
      {
        './internal/_curry1.js':
          '../node_modules/ramda/es/internal/_curry1.js',
        './internal/_has.js': '../node_modules/ramda/es/internal/_has.js',
      },
    ],
    '../node_modules/ramda/es/toPairsIn.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry1.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Converts an object into an array of key, value arrays. The object's own
         * properties and prototype properties are used. Note that the order of the
         * output array is not guaranteed to be consistent across different JS
         * platforms.
         *
         * @func
         * @memberOf R
         * @since v0.4.0
         * @category Object
         * @sig {String: *} -> [[String,*]]
         * @param {Object} obj The object to extract from
         * @return {Array} An array of key, value arrays from the object's own
         *         and prototype properties.
         * @example
         *
         *      const F = function() { this.x = 'X'; };
         *      F.prototype.y = 'Y';
         *      const f = new F();
         *      R.toPairsIn(f); //=> [['x','X'], ['y','Y']]
         */
        var toPairsIn =
          /*#__PURE__*/
          (0, _curry.default)(function toPairsIn(obj) {
            var pairs = []

            for (var prop in obj) {
              pairs[pairs.length] = [prop, obj[prop]]
            }

            return pairs
          })
        var _default = toPairsIn
        exports.default = _default
      },
      {
        './internal/_curry1.js':
          '../node_modules/ramda/es/internal/_curry1.js',
      },
    ],
    '../node_modules/ramda/es/toUpper.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _invoker = _interopRequireDefault(require('./invoker.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * The upper case version of a string.
         *
         * @func
         * @memberOf R
         * @since v0.9.0
         * @category String
         * @sig String -> String
         * @param {String} str The string to upper case.
         * @return {String} The upper case version of `str`.
         * @see R.toLower
         * @example
         *
         *      R.toUpper('abc'); //=> 'ABC'
         */
        var toUpper =
          /*#__PURE__*/
          (0, _invoker.default)(0, 'toUpperCase')
        var _default = toUpper
        exports.default = _default
      },
      { './invoker.js': '../node_modules/ramda/es/invoker.js' },
    ],
    '../node_modules/ramda/es/transduce.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _reduce2 = _interopRequireDefault(
          require('./internal/_reduce.js'),
        )

        var _xwrap2 = _interopRequireDefault(
          require('./internal/_xwrap.js'),
        )

        var _curryN = _interopRequireDefault(require('./curryN.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Initializes a transducer using supplied iterator function. Returns a single
         * item by iterating through the list, successively calling the transformed
         * iterator function and passing it an accumulator value and the current value
         * from the array, and then passing the result to the next call.
         *
         * The iterator function receives two values: *(acc, value)*. It will be
         * wrapped as a transformer to initialize the transducer. A transformer can be
         * passed directly in place of an iterator function. In both cases, iteration
         * may be stopped early with the [`R.reduced`](#reduced) function.
         *
         * A transducer is a function that accepts a transformer and returns a
         * transformer and can be composed directly.
         *
         * A transformer is an an object that provides a 2-arity reducing iterator
         * function, step, 0-arity initial value function, init, and 1-arity result
         * extraction function, result. The step function is used as the iterator
         * function in reduce. The result function is used to convert the final
         * accumulator into the return type and in most cases is
         * [`R.identity`](#identity). The init function can be used to provide an
         * initial accumulator, but is ignored by transduce.
         *
         * The iteration is performed with [`R.reduce`](#reduce) after initializing the transducer.
         *
         * @func
         * @memberOf R
         * @since v0.12.0
         * @category List
         * @sig (c -> c) -> ((a, b) -> a) -> a -> [b] -> a
         * @param {Function} xf The transducer function. Receives a transformer and returns a transformer.
         * @param {Function} fn The iterator function. Receives two values, the accumulator and the
         *        current element from the array. Wrapped as transformer, if necessary, and used to
         *        initialize the transducer
         * @param {*} acc The initial accumulator value.
         * @param {Array} list The list to iterate over.
         * @return {*} The final, accumulated value.
         * @see R.reduce, R.reduced, R.into
         * @example
         *
         *      const numbers = [1, 2, 3, 4];
         *      const transducer = R.compose(R.map(R.add(1)), R.take(2));
         *      R.transduce(transducer, R.flip(R.append), [], numbers); //=> [2, 3]
         *
         *      const isOdd = (x) => x % 2 === 1;
         *      const firstOddTransducer = R.compose(R.filter(isOdd), R.take(1));
         *      R.transduce(firstOddTransducer, R.flip(R.append), [], R.range(0, 100)); //=> [1]
         */
        var transduce =
          /*#__PURE__*/
          (0, _curryN.default)(4, function transduce(xf, fn, acc, list) {
            return (0,
            _reduce2.default)(xf(typeof fn === 'function' ? (0, _xwrap2.default)(fn) : fn), acc, list)
          })
        var _default = transduce
        exports.default = _default
      },
      {
        './internal/_reduce.js':
          '../node_modules/ramda/es/internal/_reduce.js',
        './internal/_xwrap.js':
          '../node_modules/ramda/es/internal/_xwrap.js',
        './curryN.js': '../node_modules/ramda/es/curryN.js',
      },
    ],
    '../node_modules/ramda/es/transpose.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry1.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Transposes the rows and columns of a 2D list.
         * When passed a list of `n` lists of length `x`,
         * returns a list of `x` lists of length `n`.
         *
         *
         * @func
         * @memberOf R
         * @since v0.19.0
         * @category List
         * @sig [[a]] -> [[a]]
         * @param {Array} list A 2D list
         * @return {Array} A 2D list
         * @example
         *
         *      R.transpose([[1, 'a'], [2, 'b'], [3, 'c']]) //=> [[1, 2, 3], ['a', 'b', 'c']]
         *      R.transpose([[1, 2, 3], ['a', 'b', 'c']]) //=> [[1, 'a'], [2, 'b'], [3, 'c']]
         *
         *      // If some of the rows are shorter than the following rows, their elements are skipped:
         *      R.transpose([[10, 11], [20], [], [30, 31, 32]]) //=> [[10, 20, 30], [11, 31], [32]]
         * @symb R.transpose([[a], [b], [c]]) = [a, b, c]
         * @symb R.transpose([[a, b], [c, d]]) = [[a, c], [b, d]]
         * @symb R.transpose([[a, b], [c]]) = [[a, c], [b]]
         */
        var transpose =
          /*#__PURE__*/
          (0, _curry.default)(function transpose(outerlist) {
            var i = 0
            var result = []

            while (i < outerlist.length) {
              var innerlist = outerlist[i]
              var j = 0

              while (j < innerlist.length) {
                if (typeof result[j] === 'undefined') {
                  result[j] = []
                }

                result[j].push(innerlist[j])
                j += 1
              }

              i += 1
            }

            return result
          })
        var _default = transpose
        exports.default = _default
      },
      {
        './internal/_curry1.js':
          '../node_modules/ramda/es/internal/_curry1.js',
      },
    ],
    '../node_modules/ramda/es/traverse.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry3.js'),
        )

        var _map = _interopRequireDefault(require('./map.js'))

        var _sequence = _interopRequireDefault(require('./sequence.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Maps an [Applicative](https://github.com/fantasyland/fantasy-land#applicative)-returning
         * function over a [Traversable](https://github.com/fantasyland/fantasy-land#traversable),
         * then uses [`sequence`](#sequence) to transform the resulting Traversable of Applicative
         * into an Applicative of Traversable.
         *
         * Dispatches to the `traverse` method of the third argument, if present.
         *
         * @func
         * @memberOf R
         * @since v0.19.0
         * @category List
         * @sig (Applicative f, Traversable t) => (a -> f a) -> (a -> f b) -> t a -> f (t b)
         * @param {Function} of
         * @param {Function} f
         * @param {*} traversable
         * @return {*}
         * @see R.sequence
         * @example
         *
         *      // Returns `Maybe.Nothing` if the given divisor is `0`
         *      const safeDiv = n => d => d === 0 ? Maybe.Nothing() : Maybe.Just(n / d)
         *
         *      R.traverse(Maybe.of, safeDiv(10), [2, 4, 5]); //=> Maybe.Just([5, 2.5, 2])
         *      R.traverse(Maybe.of, safeDiv(10), [2, 0, 5]); //=> Maybe.Nothing
         */
        var traverse =
          /*#__PURE__*/
          (0, _curry.default)(function traverse(of, f, traversable) {
            return typeof traversable['fantasy-land/traverse'] ===
              'function'
              ? traversable['fantasy-land/traverse'](f, of)
              : (0, _sequence.default)(
                  of,
                  (0, _map.default)(f, traversable),
                )
          })
        var _default = traverse
        exports.default = _default
      },
      {
        './internal/_curry3.js':
          '../node_modules/ramda/es/internal/_curry3.js',
        './map.js': '../node_modules/ramda/es/map.js',
        './sequence.js': '../node_modules/ramda/es/sequence.js',
      },
    ],
    '../node_modules/ramda/es/trim.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry1.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        var ws =
          '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' +
          '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028' +
          '\u2029\uFEFF'
        var zeroWidth = '\u200b'
        var hasProtoTrim = typeof String.prototype.trim === 'function'
        /**
         * Removes (strips) whitespace from both ends of the string.
         *
         * @func
         * @memberOf R
         * @since v0.6.0
         * @category String
         * @sig String -> String
         * @param {String} str The string to trim.
         * @return {String} Trimmed version of `str`.
         * @example
         *
         *      R.trim('   xyz  '); //=> 'xyz'
         *      R.map(R.trim, R.split(',', 'x, y, z')); //=> ['x', 'y', 'z']
         */

        var trim =
          !hasProtoTrim ||
          /*#__PURE__*/
          ws.trim() ||
          !/*#__PURE__*/
          zeroWidth.trim()
            ? /*#__PURE__*/
              (0, _curry.default)(function trim(str) {
                var beginRx = new RegExp('^[' + ws + '][' + ws + ']*')
                var endRx = new RegExp('[' + ws + '][' + ws + ']*$')
                return str.replace(beginRx, '').replace(endRx, '')
              })
            : /*#__PURE__*/
              (0, _curry.default)(function trim(str) {
                return str.trim()
              })
        var _default = trim
        exports.default = _default
      },
      {
        './internal/_curry1.js':
          '../node_modules/ramda/es/internal/_curry1.js',
      },
    ],
    '../node_modules/ramda/es/tryCatch.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _arity2 = _interopRequireDefault(
          require('./internal/_arity.js'),
        )

        var _concat2 = _interopRequireDefault(
          require('./internal/_concat.js'),
        )

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
 * `tryCatch` takes two functions, a `tryer` and a `catcher`. The returned
 * function evaluates the `tryer`; if it does not throw, it simply returns the
 * result. If the `tryer` *does* throw, the returned function evaluates the
 * `catcher` function and returns its result. Note that for effective
 * composition with this function, both the `tryer` and `catcher` functions
 * must return the same type of results.
 *
 * @func
 * @memberOf R
 * @since v0.20.0
 * @category Function
 * @sig (...x -> a) -> ((e, ...x) -> a) -> (...x -> a)
 * @param {Function} tryer The function that may throw.
 * @param {Function} catcher The function that will be evaluated if `tryer` throws.
 * @return {Function} A new function that will catch exceptions and send then to the catcher.
 * @example
 *
 *      R.tryCatch(R.prop('x'), R.F)({x: true}); //=> true
 *      R.tryCatch(() => { throw 'foo'}, R.always('catched'))('bar') // => 'catched'
 *      R.tryCatch(R.times(R.identity), R.always([]))('s') // => []
 `` */
        var tryCatch =
          /*#__PURE__*/
          (0, _curry.default)(function _tryCatch(tryer, catcher) {
            return (0, _arity2.default)(tryer.length, function() {
              try {
                return tryer.apply(this, arguments)
              } catch (e) {
                return catcher.apply(
                  this,
                  (0, _concat2.default)([e], arguments),
                )
              }
            })
          })
        var _default = tryCatch
        exports.default = _default
      },
      {
        './internal/_arity.js':
          '../node_modules/ramda/es/internal/_arity.js',
        './internal/_concat.js':
          '../node_modules/ramda/es/internal/_concat.js',
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
      },
    ],
    '../node_modules/ramda/es/unapply.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry1.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Takes a function `fn`, which takes a single array argument, and returns a
         * function which:
         *
         *   - takes any number of positional arguments;
         *   - passes these arguments to `fn` as an array; and
         *   - returns the result.
         *
         * In other words, `R.unapply` derives a variadic function from a function which
         * takes an array. `R.unapply` is the inverse of [`R.apply`](#apply).
         *
         * @func
         * @memberOf R
         * @since v0.8.0
         * @category Function
         * @sig ([*...] -> a) -> (*... -> a)
         * @param {Function} fn
         * @return {Function}
         * @see R.apply
         * @example
         *
         *      R.unapply(JSON.stringify)(1, 2, 3); //=> '[1,2,3]'
         * @symb R.unapply(f)(a, b) = f([a, b])
         */
        var unapply =
          /*#__PURE__*/
          (0, _curry.default)(function unapply(fn) {
            return function() {
              return fn(Array.prototype.slice.call(arguments, 0))
            }
          })
        var _default = unapply
        exports.default = _default
      },
      {
        './internal/_curry1.js':
          '../node_modules/ramda/es/internal/_curry1.js',
      },
    ],
    '../node_modules/ramda/es/unary.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry1.js'),
        )

        var _nAry = _interopRequireDefault(require('./nAry.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Wraps a function of any arity (including nullary) in a function that accepts
         * exactly 1 parameter. Any extraneous parameters will not be passed to the
         * supplied function.
         *
         * @func
         * @memberOf R
         * @since v0.2.0
         * @category Function
         * @sig (* -> b) -> (a -> b)
         * @param {Function} fn The function to wrap.
         * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of
         *         arity 1.
         * @see R.binary, R.nAry
         * @example
         *
         *      const takesTwoArgs = function(a, b) {
         *        return [a, b];
         *      };
         *      takesTwoArgs.length; //=> 2
         *      takesTwoArgs(1, 2); //=> [1, 2]
         *
         *      const takesOneArg = R.unary(takesTwoArgs);
         *      takesOneArg.length; //=> 1
         *      // Only 1 argument is passed to the wrapped function
         *      takesOneArg(1, 2); //=> [1, undefined]
         * @symb R.unary(f)(a, b, c) = f(a)
         */
        var unary =
          /*#__PURE__*/
          (0, _curry.default)(function unary(fn) {
            return (0, _nAry.default)(1, fn)
          })
        var _default = unary
        exports.default = _default
      },
      {
        './internal/_curry1.js':
          '../node_modules/ramda/es/internal/_curry1.js',
        './nAry.js': '../node_modules/ramda/es/nAry.js',
      },
    ],
    '../node_modules/ramda/es/uncurryN.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        var _curryN = _interopRequireDefault(require('./curryN.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns a function of arity `n` from a (manually) curried function.
         *
         * @func
         * @memberOf R
         * @since v0.14.0
         * @category Function
         * @sig Number -> (a -> b) -> (a -> c)
         * @param {Number} length The arity for the returned function.
         * @param {Function} fn The function to uncurry.
         * @return {Function} A new function.
         * @see R.curry
         * @example
         *
         *      const addFour = a => b => c => d => a + b + c + d;
         *
         *      const uncurriedAddFour = R.uncurryN(4, addFour);
         *      uncurriedAddFour(1, 2, 3, 4); //=> 10
         */
        var uncurryN =
          /*#__PURE__*/
          (0, _curry.default)(function uncurryN(depth, fn) {
            return (0, _curryN.default)(depth, function() {
              var currentDepth = 1
              var value = fn
              var idx = 0
              var endIdx

              while (
                currentDepth <= depth &&
                typeof value === 'function'
              ) {
                endIdx =
                  currentDepth === depth
                    ? arguments.length
                    : idx + value.length
                value = value.apply(
                  this,
                  Array.prototype.slice.call(arguments, idx, endIdx),
                )
                currentDepth += 1
                idx = endIdx
              }

              return value
            })
          })
        var _default = uncurryN
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
        './curryN.js': '../node_modules/ramda/es/curryN.js',
      },
    ],
    '../node_modules/ramda/es/unfold.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Builds a list from a seed value. Accepts an iterator function, which returns
         * either false to stop iteration or an array of length 2 containing the value
         * to add to the resulting list and the seed to be used in the next call to the
         * iterator function.
         *
         * The iterator function receives one argument: *(seed)*.
         *
         * @func
         * @memberOf R
         * @since v0.10.0
         * @category List
         * @sig (a -> [b]) -> * -> [b]
         * @param {Function} fn The iterator function. receives one argument, `seed`, and returns
         *        either false to quit iteration or an array of length two to proceed. The element
         *        at index 0 of this array will be added to the resulting array, and the element
         *        at index 1 will be passed to the next call to `fn`.
         * @param {*} seed The seed value.
         * @return {Array} The final list.
         * @example
         *
         *      const f = n => n > 50 ? false : [-n, n + 10];
         *      R.unfold(f, 10); //=> [-10, -20, -30, -40, -50]
         * @symb R.unfold(f, x) = [f(x)[0], f(f(x)[1])[0], f(f(f(x)[1])[1])[0], ...]
         */
        var unfold =
          /*#__PURE__*/
          (0, _curry.default)(function unfold(fn, seed) {
            var pair = fn(seed)
            var result = []

            while (pair && pair.length) {
              result[result.length] = pair[0]
              pair = fn(pair[1])
            }

            return result
          })
        var _default = unfold
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
      },
    ],
    '../node_modules/ramda/es/union.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _concat2 = _interopRequireDefault(
          require('./internal/_concat.js'),
        )

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        var _compose = _interopRequireDefault(require('./compose.js'))

        var _uniq = _interopRequireDefault(require('./uniq.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Combines two lists into a set (i.e. no duplicates) composed of the elements
         * of each list.
         *
         * @func
         * @memberOf R
         * @since v0.1.0
         * @category Relation
         * @sig [*] -> [*] -> [*]
         * @param {Array} as The first list.
         * @param {Array} bs The second list.
         * @return {Array} The first and second lists concatenated, with
         *         duplicates removed.
         * @example
         *
         *      R.union([1, 2, 3], [2, 3, 4]); //=> [1, 2, 3, 4]
         */
        var union =
          /*#__PURE__*/
          (0, _curry.default)(
            /*#__PURE__*/
            (0, _compose.default)(_uniq.default, _concat2.default),
          )
        var _default = union
        exports.default = _default
      },
      {
        './internal/_concat.js':
          '../node_modules/ramda/es/internal/_concat.js',
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
        './compose.js': '../node_modules/ramda/es/compose.js',
        './uniq.js': '../node_modules/ramda/es/uniq.js',
      },
    ],
    '../node_modules/ramda/es/uniqWith.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _includesWith2 = _interopRequireDefault(
          require('./internal/_includesWith.js'),
        )

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns a new list containing only one copy of each element in the original
         * list, based upon the value returned by applying the supplied predicate to
         * two list elements. Prefers the first item if two items compare equal based
         * on the predicate.
         *
         * @func
         * @memberOf R
         * @since v0.2.0
         * @category List
         * @sig ((a, a) -> Boolean) -> [a] -> [a]
         * @param {Function} pred A predicate used to test whether two items are equal.
         * @param {Array} list The array to consider.
         * @return {Array} The list of unique items.
         * @example
         *
         *      const strEq = R.eqBy(String);
         *      R.uniqWith(strEq)([1, '1', 2, 1]); //=> [1, 2]
         *      R.uniqWith(strEq)([{}, {}]);       //=> [{}]
         *      R.uniqWith(strEq)([1, '1', 1]);    //=> [1]
         *      R.uniqWith(strEq)(['1', 1, 1]);    //=> ['1']
         */
        var uniqWith =
          /*#__PURE__*/
          (0, _curry.default)(function uniqWith(pred, list) {
            var idx = 0
            var len = list.length
            var result = []
            var item

            while (idx < len) {
              item = list[idx]

              if (!(0, _includesWith2.default)(pred, item, result)) {
                result[result.length] = item
              }

              idx += 1
            }

            return result
          })
        var _default = uniqWith
        exports.default = _default
      },
      {
        './internal/_includesWith.js':
          '../node_modules/ramda/es/internal/_includesWith.js',
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
      },
    ],
    '../node_modules/ramda/es/unionWith.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _concat2 = _interopRequireDefault(
          require('./internal/_concat.js'),
        )

        var _curry = _interopRequireDefault(
          require('./internal/_curry3.js'),
        )

        var _uniqWith = _interopRequireDefault(require('./uniqWith.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Combines two lists into a set (i.e. no duplicates) composed of the elements
         * of each list. Duplication is determined according to the value returned by
         * applying the supplied predicate to two list elements.
         *
         * @func
         * @memberOf R
         * @since v0.1.0
         * @category Relation
         * @sig ((a, a) -> Boolean) -> [*] -> [*] -> [*]
         * @param {Function} pred A predicate used to test whether two items are equal.
         * @param {Array} list1 The first list.
         * @param {Array} list2 The second list.
         * @return {Array} The first and second lists concatenated, with
         *         duplicates removed.
         * @see R.union
         * @example
         *
         *      const l1 = [{a: 1}, {a: 2}];
         *      const l2 = [{a: 1}, {a: 4}];
         *      R.unionWith(R.eqBy(R.prop('a')), l1, l2); //=> [{a: 1}, {a: 2}, {a: 4}]
         */
        var unionWith =
          /*#__PURE__*/
          (0, _curry.default)(function unionWith(pred, list1, list2) {
            return (0,
            _uniqWith.default)(pred, (0, _concat2.default)(list1, list2))
          })
        var _default = unionWith
        exports.default = _default
      },
      {
        './internal/_concat.js':
          '../node_modules/ramda/es/internal/_concat.js',
        './internal/_curry3.js':
          '../node_modules/ramda/es/internal/_curry3.js',
        './uniqWith.js': '../node_modules/ramda/es/uniqWith.js',
      },
    ],
    '../node_modules/ramda/es/unless.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry3.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Tests the final argument by passing it to the given predicate function. If
         * the predicate is not satisfied, the function will return the result of
         * calling the `whenFalseFn` function with the same argument. If the predicate
         * is satisfied, the argument is returned as is.
         *
         * @func
         * @memberOf R
         * @since v0.18.0
         * @category Logic
         * @sig (a -> Boolean) -> (a -> a) -> a -> a
         * @param {Function} pred        A predicate function
         * @param {Function} whenFalseFn A function to invoke when the `pred` evaluates
         *                               to a falsy value.
         * @param {*}        x           An object to test with the `pred` function and
         *                               pass to `whenFalseFn` if necessary.
         * @return {*} Either `x` or the result of applying `x` to `whenFalseFn`.
         * @see R.ifElse, R.when, R.cond
         * @example
         *
         *      let safeInc = R.unless(R.isNil, R.inc);
         *      safeInc(null); //=> null
         *      safeInc(1); //=> 2
         */
        var unless =
          /*#__PURE__*/
          (0, _curry.default)(function unless(pred, whenFalseFn, x) {
            return pred(x) ? x : whenFalseFn(x)
          })
        var _default = unless
        exports.default = _default
      },
      {
        './internal/_curry3.js':
          '../node_modules/ramda/es/internal/_curry3.js',
      },
    ],
    '../node_modules/ramda/es/unnest.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _identity2 = _interopRequireDefault(
          require('./internal/_identity.js'),
        )

        var _chain = _interopRequireDefault(require('./chain.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Shorthand for `R.chain(R.identity)`, which removes one level of nesting from
         * any [Chain](https://github.com/fantasyland/fantasy-land#chain).
         *
         * @func
         * @memberOf R
         * @since v0.3.0
         * @category List
         * @sig Chain c => c (c a) -> c a
         * @param {*} list
         * @return {*}
         * @see R.flatten, R.chain
         * @example
         *
         *      R.unnest([1, [2], [[3]]]); //=> [1, 2, [3]]
         *      R.unnest([[1, 2], [3, 4], [5, 6]]); //=> [1, 2, 3, 4, 5, 6]
         */
        var unnest =
          /*#__PURE__*/
          (0, _chain.default)(_identity2.default)
        var _default = unnest
        exports.default = _default
      },
      {
        './internal/_identity.js':
          '../node_modules/ramda/es/internal/_identity.js',
        './chain.js': '../node_modules/ramda/es/chain.js',
      },
    ],
    '../node_modules/ramda/es/until.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry3.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Takes a predicate, a transformation function, and an initial value,
         * and returns a value of the same type as the initial value.
         * It does so by applying the transformation until the predicate is satisfied,
         * at which point it returns the satisfactory value.
         *
         * @func
         * @memberOf R
         * @since v0.20.0
         * @category Logic
         * @sig (a -> Boolean) -> (a -> a) -> a -> a
         * @param {Function} pred A predicate function
         * @param {Function} fn The iterator function
         * @param {*} init Initial value
         * @return {*} Final value that satisfies predicate
         * @example
         *
         *      R.until(R.gt(R.__, 100), R.multiply(2))(1) // => 128
         */
        var until =
          /*#__PURE__*/
          (0, _curry.default)(function until(pred, fn, init) {
            var val = init

            while (!pred(val)) {
              val = fn(val)
            }

            return val
          })
        var _default = until
        exports.default = _default
      },
      {
        './internal/_curry3.js':
          '../node_modules/ramda/es/internal/_curry3.js',
      },
    ],
    '../node_modules/ramda/es/valuesIn.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry1.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns a list of all the properties, including prototype properties, of the
         * supplied object.
         * Note that the order of the output array is not guaranteed to be consistent
         * across different JS platforms.
         *
         * @func
         * @memberOf R
         * @since v0.2.0
         * @category Object
         * @sig {k: v} -> [v]
         * @param {Object} obj The object to extract values from
         * @return {Array} An array of the values of the object's own and prototype properties.
         * @see R.values, R.keysIn
         * @example
         *
         *      const F = function() { this.x = 'X'; };
         *      F.prototype.y = 'Y';
         *      const f = new F();
         *      R.valuesIn(f); //=> ['X', 'Y']
         */
        var valuesIn =
          /*#__PURE__*/
          (0, _curry.default)(function valuesIn(obj) {
            var prop
            var vs = []

            for (prop in obj) {
              vs[vs.length] = obj[prop]
            }

            return vs
          })
        var _default = valuesIn
        exports.default = _default
      },
      {
        './internal/_curry1.js':
          '../node_modules/ramda/es/internal/_curry1.js',
      },
    ],
    '../node_modules/ramda/es/view.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        // `Const` is a functor that effectively ignores the function given to `map`.
        var Const = function(x) {
          return {
            value: x,
            'fantasy-land/map': function() {
              return this
            },
          }
        }
        /**
         * Returns a "view" of the given data structure, determined by the given lens.
         * The lens's focus determines which portion of the data structure is visible.
         *
         * @func
         * @memberOf R
         * @since v0.16.0
         * @category Object
         * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s
         * @sig Lens s a -> s -> a
         * @param {Lens} lens
         * @param {*} x
         * @return {*}
         * @see R.prop, R.lensIndex, R.lensProp
         * @example
         *
         *      const xLens = R.lensProp('x');
         *
         *      R.view(xLens, {x: 1, y: 2});  //=> 1
         *      R.view(xLens, {x: 4, y: 2});  //=> 4
         */

        var view =
          /*#__PURE__*/
          (0, _curry.default)(function view(lens, x) {
            // Using `Const` effectively ignores the setter function of the `lens`,
            // leaving the value returned by the getter function unmodified.
            return lens(Const)(x).value
          })
        var _default = view
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
      },
    ],
    '../node_modules/ramda/es/when.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry3.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Tests the final argument by passing it to the given predicate function. If
         * the predicate is satisfied, the function will return the result of calling
         * the `whenTrueFn` function with the same argument. If the predicate is not
         * satisfied, the argument is returned as is.
         *
         * @func
         * @memberOf R
         * @since v0.18.0
         * @category Logic
         * @sig (a -> Boolean) -> (a -> a) -> a -> a
         * @param {Function} pred       A predicate function
         * @param {Function} whenTrueFn A function to invoke when the `condition`
         *                              evaluates to a truthy value.
         * @param {*}        x          An object to test with the `pred` function and
         *                              pass to `whenTrueFn` if necessary.
         * @return {*} Either `x` or the result of applying `x` to `whenTrueFn`.
         * @see R.ifElse, R.unless, R.cond
         * @example
         *
         *      // truncate :: String -> String
         *      const truncate = R.when(
         *        R.propSatisfies(R.gt(R.__, 10), 'length'),
         *        R.pipe(R.take(10), R.append('…'), R.join(''))
         *      );
         *      truncate('12345');         //=> '12345'
         *      truncate('0123456789ABC'); //=> '0123456789…'
         */
        var when =
          /*#__PURE__*/
          (0, _curry.default)(function when(pred, whenTrueFn, x) {
            return pred(x) ? whenTrueFn(x) : x
          })
        var _default = when
        exports.default = _default
      },
      {
        './internal/_curry3.js':
          '../node_modules/ramda/es/internal/_curry3.js',
      },
    ],
    '../node_modules/ramda/es/where.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        var _has2 = _interopRequireDefault(require('./internal/_has.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Takes a spec object and a test object; returns true if the test satisfies
         * the spec. Each of the spec's own properties must be a predicate function.
         * Each predicate is applied to the value of the corresponding property of the
         * test object. `where` returns true if all the predicates return true, false
         * otherwise.
         *
         * `where` is well suited to declaratively expressing constraints for other
         * functions such as [`filter`](#filter) and [`find`](#find).
         *
         * @func
         * @memberOf R
         * @since v0.1.1
         * @category Object
         * @sig {String: (* -> Boolean)} -> {String: *} -> Boolean
         * @param {Object} spec
         * @param {Object} testObj
         * @return {Boolean}
         * @see R.propSatisfies, R.whereEq
         * @example
         *
         *      // pred :: Object -> Boolean
         *      const pred = R.where({
         *        a: R.equals('foo'),
         *        b: R.complement(R.equals('bar')),
         *        x: R.gt(R.__, 10),
         *        y: R.lt(R.__, 20)
         *      });
         *
         *      pred({a: 'foo', b: 'xxx', x: 11, y: 19}); //=> true
         *      pred({a: 'xxx', b: 'xxx', x: 11, y: 19}); //=> false
         *      pred({a: 'foo', b: 'bar', x: 11, y: 19}); //=> false
         *      pred({a: 'foo', b: 'xxx', x: 10, y: 19}); //=> false
         *      pred({a: 'foo', b: 'xxx', x: 11, y: 20}); //=> false
         */
        var where =
          /*#__PURE__*/
          (0, _curry.default)(function where(spec, testObj) {
            for (var prop in spec) {
              if (
                (0, _has2.default)(prop, spec) &&
                !spec[prop](testObj[prop])
              ) {
                return false
              }
            }

            return true
          })
        var _default = where
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
        './internal/_has.js': '../node_modules/ramda/es/internal/_has.js',
      },
    ],
    '../node_modules/ramda/es/whereEq.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        var _equals = _interopRequireDefault(require('./equals.js'))

        var _map = _interopRequireDefault(require('./map.js'))

        var _where = _interopRequireDefault(require('./where.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Takes a spec object and a test object; returns true if the test satisfies
         * the spec, false otherwise. An object satisfies the spec if, for each of the
         * spec's own properties, accessing that property of the object gives the same
         * value (in [`R.equals`](#equals) terms) as accessing that property of the
         * spec.
         *
         * `whereEq` is a specialization of [`where`](#where).
         *
         * @func
         * @memberOf R
         * @since v0.14.0
         * @category Object
         * @sig {String: *} -> {String: *} -> Boolean
         * @param {Object} spec
         * @param {Object} testObj
         * @return {Boolean}
         * @see R.propEq, R.where
         * @example
         *
         *      // pred :: Object -> Boolean
         *      const pred = R.whereEq({a: 1, b: 2});
         *
         *      pred({a: 1});              //=> false
         *      pred({a: 1, b: 2});        //=> true
         *      pred({a: 1, b: 2, c: 3});  //=> true
         *      pred({a: 1, b: 1});        //=> false
         */
        var whereEq =
          /*#__PURE__*/
          (0, _curry.default)(function whereEq(spec, testObj) {
            return (0,
            _where.default)((0, _map.default)(_equals.default, spec), testObj)
          })
        var _default = whereEq
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
        './equals.js': '../node_modules/ramda/es/equals.js',
        './map.js': '../node_modules/ramda/es/map.js',
        './where.js': '../node_modules/ramda/es/where.js',
      },
    ],
    '../node_modules/ramda/es/without.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _includes2 = _interopRequireDefault(
          require('./internal/_includes.js'),
        )

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        var _flip = _interopRequireDefault(require('./flip.js'))

        var _reject = _interopRequireDefault(require('./reject.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Returns a new list without values in the first argument.
         * [`R.equals`](#equals) is used to determine equality.
         *
         * Acts as a transducer if a transformer is given in list position.
         *
         * @func
         * @memberOf R
         * @since v0.19.0
         * @category List
         * @sig [a] -> [a] -> [a]
         * @param {Array} list1 The values to be removed from `list2`.
         * @param {Array} list2 The array to remove values from.
         * @return {Array} The new array without values in `list1`.
         * @see R.transduce, R.difference, R.remove
         * @example
         *
         *      R.without([1, 2], [1, 2, 1, 3, 4]); //=> [3, 4]
         */
        var without =
          /*#__PURE__*/
          (0, _curry.default)(function(xs, list) {
            return (0,
            _reject.default)((0, _flip.default)(_includes2.default)(xs), list)
          })
        var _default = without
        exports.default = _default
      },
      {
        './internal/_includes.js':
          '../node_modules/ramda/es/internal/_includes.js',
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
        './flip.js': '../node_modules/ramda/es/flip.js',
        './reject.js': '../node_modules/ramda/es/reject.js',
      },
    ],
    '../node_modules/ramda/es/xprod.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Creates a new list out of the two supplied by creating each possible pair
         * from the lists.
         *
         * @func
         * @memberOf R
         * @since v0.1.0
         * @category List
         * @sig [a] -> [b] -> [[a,b]]
         * @param {Array} as The first list.
         * @param {Array} bs The second list.
         * @return {Array} The list made by combining each possible pair from
         *         `as` and `bs` into pairs (`[a, b]`).
         * @example
         *
         *      R.xprod([1, 2], ['a', 'b']); //=> [[1, 'a'], [1, 'b'], [2, 'a'], [2, 'b']]
         * @symb R.xprod([a, b], [c, d]) = [[a, c], [a, d], [b, c], [b, d]]
         */
        var xprod =
          /*#__PURE__*/
          (0, _curry.default)(function xprod(a, b) {
            // = xprodWith(prepend); (takes about 3 times as long...)
            var idx = 0
            var ilen = a.length
            var j
            var jlen = b.length
            var result = []

            while (idx < ilen) {
              j = 0

              while (j < jlen) {
                result[result.length] = [a[idx], b[j]]
                j += 1
              }

              idx += 1
            }

            return result
          })
        var _default = xprod
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
      },
    ],
    '../node_modules/ramda/es/zip.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Creates a new list out of the two supplied by pairing up equally-positioned
         * items from both lists. The returned list is truncated to the length of the
         * shorter of the two input lists.
         * Note: `zip` is equivalent to `zipWith(function(a, b) { return [a, b] })`.
         *
         * @func
         * @memberOf R
         * @since v0.1.0
         * @category List
         * @sig [a] -> [b] -> [[a,b]]
         * @param {Array} list1 The first array to consider.
         * @param {Array} list2 The second array to consider.
         * @return {Array} The list made by pairing up same-indexed elements of `list1` and `list2`.
         * @example
         *
         *      R.zip([1, 2, 3], ['a', 'b', 'c']); //=> [[1, 'a'], [2, 'b'], [3, 'c']]
         * @symb R.zip([a, b, c], [d, e, f]) = [[a, d], [b, e], [c, f]]
         */
        var zip =
          /*#__PURE__*/
          (0, _curry.default)(function zip(a, b) {
            var rv = []
            var idx = 0
            var len = Math.min(a.length, b.length)

            while (idx < len) {
              rv[idx] = [a[idx], b[idx]]
              idx += 1
            }

            return rv
          })
        var _default = zip
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
      },
    ],
    '../node_modules/ramda/es/zipObj.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry2.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Creates a new object out of a list of keys and a list of values.
         * Key/value pairing is truncated to the length of the shorter of the two lists.
         * Note: `zipObj` is equivalent to `pipe(zip, fromPairs)`.
         *
         * @func
         * @memberOf R
         * @since v0.3.0
         * @category List
         * @sig [String] -> [*] -> {String: *}
         * @param {Array} keys The array that will be properties on the output object.
         * @param {Array} values The list of values on the output object.
         * @return {Object} The object made by pairing up same-indexed elements of `keys` and `values`.
         * @example
         *
         *      R.zipObj(['a', 'b', 'c'], [1, 2, 3]); //=> {a: 1, b: 2, c: 3}
         */
        var zipObj =
          /*#__PURE__*/
          (0, _curry.default)(function zipObj(keys, values) {
            var idx = 0
            var len = Math.min(keys.length, values.length)
            var out = {}

            while (idx < len) {
              out[keys[idx]] = values[idx]
              idx += 1
            }

            return out
          })
        var _default = zipObj
        exports.default = _default
      },
      {
        './internal/_curry2.js':
          '../node_modules/ramda/es/internal/_curry2.js',
      },
    ],
    '../node_modules/ramda/es/zipWith.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curry = _interopRequireDefault(
          require('./internal/_curry3.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Creates a new list out of the two supplied by applying the function to each
         * equally-positioned pair in the lists. The returned list is truncated to the
         * length of the shorter of the two input lists.
         *
         * @function
         * @memberOf R
         * @since v0.1.0
         * @category List
         * @sig ((a, b) -> c) -> [a] -> [b] -> [c]
         * @param {Function} fn The function used to combine the two elements into one value.
         * @param {Array} list1 The first array to consider.
         * @param {Array} list2 The second array to consider.
         * @return {Array} The list made by combining same-indexed elements of `list1` and `list2`
         *         using `fn`.
         * @example
         *
         *      const f = (x, y) => {
         *        // ...
         *      };
         *      R.zipWith(f, [1, 2, 3], ['a', 'b', 'c']);
         *      //=> [f(1, 'a'), f(2, 'b'), f(3, 'c')]
         * @symb R.zipWith(fn, [a, b, c], [d, e, f]) = [fn(a, d), fn(b, e), fn(c, f)]
         */
        var zipWith =
          /*#__PURE__*/
          (0, _curry.default)(function zipWith(fn, a, b) {
            var rv = []
            var idx = 0
            var len = Math.min(a.length, b.length)

            while (idx < len) {
              rv[idx] = fn(a[idx], b[idx])
              idx += 1
            }

            return rv
          })
        var _default = zipWith
        exports.default = _default
      },
      {
        './internal/_curry3.js':
          '../node_modules/ramda/es/internal/_curry3.js',
      },
    ],
    '../node_modules/ramda/es/thunkify.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _curryN = _interopRequireDefault(require('./curryN.js'))

        var _curry = _interopRequireDefault(
          require('./internal/_curry1.js'),
        )

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        /**
         * Creates a thunk out of a function. A thunk delays a calculation until
         * its result is needed, providing lazy evaluation of arguments.
         *
         * @func
         * @memberOf R
         * @category Function
         * @sig ((a, b, ..., j) -> k) -> (a, b, ..., j) -> (() -> k)
         * @param {Function} fn A function to wrap in a thunk
         * @return {Function} Expects arguments for `fn` and returns a new function
         *  that, when called, applies those arguments to `fn`.
         * @see R.partial, R.partialRight
         * @example
         *
         *      R.thunkify(R.identity)(42)(); //=> 42
         *      R.thunkify((a, b) => a + b)(25, 17)(); //=> 42
         */
        var thunkify =
          /*#__PURE__*/
          (0, _curry.default)(function thunkify(fn) {
            return (0, _curryN.default)(fn.length, function createThunk() {
              var fnArgs = arguments
              return function invokeThunk() {
                return fn.apply(this, fnArgs)
              }
            })
          })
        var _default = thunkify
        exports.default = _default
      },
      {
        './curryN.js': '../node_modules/ramda/es/curryN.js',
        './internal/_curry1.js':
          '../node_modules/ramda/es/internal/_curry1.js',
      },
    ],
    '../node_modules/ramda/es/index.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        Object.defineProperty(exports, 'F', {
          enumerable: true,
          get: function() {
            return _F.default
          },
        })
        Object.defineProperty(exports, 'T', {
          enumerable: true,
          get: function() {
            return _T.default
          },
        })
        Object.defineProperty(exports, '__', {
          enumerable: true,
          get: function() {
            return _.default
          },
        })
        Object.defineProperty(exports, 'add', {
          enumerable: true,
          get: function() {
            return _add.default
          },
        })
        Object.defineProperty(exports, 'addIndex', {
          enumerable: true,
          get: function() {
            return _addIndex.default
          },
        })
        Object.defineProperty(exports, 'adjust', {
          enumerable: true,
          get: function() {
            return _adjust.default
          },
        })
        Object.defineProperty(exports, 'all', {
          enumerable: true,
          get: function() {
            return _all.default
          },
        })
        Object.defineProperty(exports, 'allPass', {
          enumerable: true,
          get: function() {
            return _allPass.default
          },
        })
        Object.defineProperty(exports, 'always', {
          enumerable: true,
          get: function() {
            return _always.default
          },
        })
        Object.defineProperty(exports, 'and', {
          enumerable: true,
          get: function() {
            return _and.default
          },
        })
        Object.defineProperty(exports, 'any', {
          enumerable: true,
          get: function() {
            return _any.default
          },
        })
        Object.defineProperty(exports, 'anyPass', {
          enumerable: true,
          get: function() {
            return _anyPass.default
          },
        })
        Object.defineProperty(exports, 'ap', {
          enumerable: true,
          get: function() {
            return _ap.default
          },
        })
        Object.defineProperty(exports, 'aperture', {
          enumerable: true,
          get: function() {
            return _aperture.default
          },
        })
        Object.defineProperty(exports, 'append', {
          enumerable: true,
          get: function() {
            return _append.default
          },
        })
        Object.defineProperty(exports, 'apply', {
          enumerable: true,
          get: function() {
            return _apply.default
          },
        })
        Object.defineProperty(exports, 'applySpec', {
          enumerable: true,
          get: function() {
            return _applySpec.default
          },
        })
        Object.defineProperty(exports, 'applyTo', {
          enumerable: true,
          get: function() {
            return _applyTo.default
          },
        })
        Object.defineProperty(exports, 'ascend', {
          enumerable: true,
          get: function() {
            return _ascend.default
          },
        })
        Object.defineProperty(exports, 'assoc', {
          enumerable: true,
          get: function() {
            return _assoc.default
          },
        })
        Object.defineProperty(exports, 'assocPath', {
          enumerable: true,
          get: function() {
            return _assocPath.default
          },
        })
        Object.defineProperty(exports, 'binary', {
          enumerable: true,
          get: function() {
            return _binary.default
          },
        })
        Object.defineProperty(exports, 'bind', {
          enumerable: true,
          get: function() {
            return _bind.default
          },
        })
        Object.defineProperty(exports, 'both', {
          enumerable: true,
          get: function() {
            return _both.default
          },
        })
        Object.defineProperty(exports, 'call', {
          enumerable: true,
          get: function() {
            return _call.default
          },
        })
        Object.defineProperty(exports, 'chain', {
          enumerable: true,
          get: function() {
            return _chain.default
          },
        })
        Object.defineProperty(exports, 'clamp', {
          enumerable: true,
          get: function() {
            return _clamp.default
          },
        })
        Object.defineProperty(exports, 'clone', {
          enumerable: true,
          get: function() {
            return _clone.default
          },
        })
        Object.defineProperty(exports, 'comparator', {
          enumerable: true,
          get: function() {
            return _comparator.default
          },
        })
        Object.defineProperty(exports, 'complement', {
          enumerable: true,
          get: function() {
            return _complement.default
          },
        })
        Object.defineProperty(exports, 'compose', {
          enumerable: true,
          get: function() {
            return _compose.default
          },
        })
        Object.defineProperty(exports, 'composeK', {
          enumerable: true,
          get: function() {
            return _composeK.default
          },
        })
        Object.defineProperty(exports, 'composeP', {
          enumerable: true,
          get: function() {
            return _composeP.default
          },
        })
        Object.defineProperty(exports, 'composeWith', {
          enumerable: true,
          get: function() {
            return _composeWith.default
          },
        })
        Object.defineProperty(exports, 'concat', {
          enumerable: true,
          get: function() {
            return _concat.default
          },
        })
        Object.defineProperty(exports, 'cond', {
          enumerable: true,
          get: function() {
            return _cond.default
          },
        })
        Object.defineProperty(exports, 'construct', {
          enumerable: true,
          get: function() {
            return _construct.default
          },
        })
        Object.defineProperty(exports, 'constructN', {
          enumerable: true,
          get: function() {
            return _constructN.default
          },
        })
        Object.defineProperty(exports, 'contains', {
          enumerable: true,
          get: function() {
            return _contains.default
          },
        })
        Object.defineProperty(exports, 'converge', {
          enumerable: true,
          get: function() {
            return _converge.default
          },
        })
        Object.defineProperty(exports, 'countBy', {
          enumerable: true,
          get: function() {
            return _countBy.default
          },
        })
        Object.defineProperty(exports, 'curry', {
          enumerable: true,
          get: function() {
            return _curry.default
          },
        })
        Object.defineProperty(exports, 'curryN', {
          enumerable: true,
          get: function() {
            return _curryN.default
          },
        })
        Object.defineProperty(exports, 'dec', {
          enumerable: true,
          get: function() {
            return _dec.default
          },
        })
        Object.defineProperty(exports, 'defaultTo', {
          enumerable: true,
          get: function() {
            return _defaultTo.default
          },
        })
        Object.defineProperty(exports, 'descend', {
          enumerable: true,
          get: function() {
            return _descend.default
          },
        })
        Object.defineProperty(exports, 'difference', {
          enumerable: true,
          get: function() {
            return _difference.default
          },
        })
        Object.defineProperty(exports, 'differenceWith', {
          enumerable: true,
          get: function() {
            return _differenceWith.default
          },
        })
        Object.defineProperty(exports, 'dissoc', {
          enumerable: true,
          get: function() {
            return _dissoc.default
          },
        })
        Object.defineProperty(exports, 'dissocPath', {
          enumerable: true,
          get: function() {
            return _dissocPath.default
          },
        })
        Object.defineProperty(exports, 'divide', {
          enumerable: true,
          get: function() {
            return _divide.default
          },
        })
        Object.defineProperty(exports, 'drop', {
          enumerable: true,
          get: function() {
            return _drop.default
          },
        })
        Object.defineProperty(exports, 'dropLast', {
          enumerable: true,
          get: function() {
            return _dropLast.default
          },
        })
        Object.defineProperty(exports, 'dropLastWhile', {
          enumerable: true,
          get: function() {
            return _dropLastWhile.default
          },
        })
        Object.defineProperty(exports, 'dropRepeats', {
          enumerable: true,
          get: function() {
            return _dropRepeats.default
          },
        })
        Object.defineProperty(exports, 'dropRepeatsWith', {
          enumerable: true,
          get: function() {
            return _dropRepeatsWith.default
          },
        })
        Object.defineProperty(exports, 'dropWhile', {
          enumerable: true,
          get: function() {
            return _dropWhile.default
          },
        })
        Object.defineProperty(exports, 'either', {
          enumerable: true,
          get: function() {
            return _either.default
          },
        })
        Object.defineProperty(exports, 'empty', {
          enumerable: true,
          get: function() {
            return _empty.default
          },
        })
        Object.defineProperty(exports, 'endsWith', {
          enumerable: true,
          get: function() {
            return _endsWith.default
          },
        })
        Object.defineProperty(exports, 'eqBy', {
          enumerable: true,
          get: function() {
            return _eqBy.default
          },
        })
        Object.defineProperty(exports, 'eqProps', {
          enumerable: true,
          get: function() {
            return _eqProps.default
          },
        })
        Object.defineProperty(exports, 'equals', {
          enumerable: true,
          get: function() {
            return _equals.default
          },
        })
        Object.defineProperty(exports, 'evolve', {
          enumerable: true,
          get: function() {
            return _evolve.default
          },
        })
        Object.defineProperty(exports, 'filter', {
          enumerable: true,
          get: function() {
            return _filter.default
          },
        })
        Object.defineProperty(exports, 'find', {
          enumerable: true,
          get: function() {
            return _find.default
          },
        })
        Object.defineProperty(exports, 'findIndex', {
          enumerable: true,
          get: function() {
            return _findIndex.default
          },
        })
        Object.defineProperty(exports, 'findLast', {
          enumerable: true,
          get: function() {
            return _findLast.default
          },
        })
        Object.defineProperty(exports, 'findLastIndex', {
          enumerable: true,
          get: function() {
            return _findLastIndex.default
          },
        })
        Object.defineProperty(exports, 'flatten', {
          enumerable: true,
          get: function() {
            return _flatten.default
          },
        })
        Object.defineProperty(exports, 'flip', {
          enumerable: true,
          get: function() {
            return _flip.default
          },
        })
        Object.defineProperty(exports, 'forEach', {
          enumerable: true,
          get: function() {
            return _forEach.default
          },
        })
        Object.defineProperty(exports, 'forEachObjIndexed', {
          enumerable: true,
          get: function() {
            return _forEachObjIndexed.default
          },
        })
        Object.defineProperty(exports, 'fromPairs', {
          enumerable: true,
          get: function() {
            return _fromPairs.default
          },
        })
        Object.defineProperty(exports, 'groupBy', {
          enumerable: true,
          get: function() {
            return _groupBy.default
          },
        })
        Object.defineProperty(exports, 'groupWith', {
          enumerable: true,
          get: function() {
            return _groupWith.default
          },
        })
        Object.defineProperty(exports, 'gt', {
          enumerable: true,
          get: function() {
            return _gt.default
          },
        })
        Object.defineProperty(exports, 'gte', {
          enumerable: true,
          get: function() {
            return _gte.default
          },
        })
        Object.defineProperty(exports, 'has', {
          enumerable: true,
          get: function() {
            return _has.default
          },
        })
        Object.defineProperty(exports, 'hasIn', {
          enumerable: true,
          get: function() {
            return _hasIn.default
          },
        })
        Object.defineProperty(exports, 'hasPath', {
          enumerable: true,
          get: function() {
            return _hasPath.default
          },
        })
        Object.defineProperty(exports, 'head', {
          enumerable: true,
          get: function() {
            return _head.default
          },
        })
        Object.defineProperty(exports, 'identical', {
          enumerable: true,
          get: function() {
            return _identical.default
          },
        })
        Object.defineProperty(exports, 'identity', {
          enumerable: true,
          get: function() {
            return _identity.default
          },
        })
        Object.defineProperty(exports, 'ifElse', {
          enumerable: true,
          get: function() {
            return _ifElse.default
          },
        })
        Object.defineProperty(exports, 'inc', {
          enumerable: true,
          get: function() {
            return _inc.default
          },
        })
        Object.defineProperty(exports, 'includes', {
          enumerable: true,
          get: function() {
            return _includes.default
          },
        })
        Object.defineProperty(exports, 'indexBy', {
          enumerable: true,
          get: function() {
            return _indexBy.default
          },
        })
        Object.defineProperty(exports, 'indexOf', {
          enumerable: true,
          get: function() {
            return _indexOf.default
          },
        })
        Object.defineProperty(exports, 'init', {
          enumerable: true,
          get: function() {
            return _init.default
          },
        })
        Object.defineProperty(exports, 'innerJoin', {
          enumerable: true,
          get: function() {
            return _innerJoin.default
          },
        })
        Object.defineProperty(exports, 'insert', {
          enumerable: true,
          get: function() {
            return _insert.default
          },
        })
        Object.defineProperty(exports, 'insertAll', {
          enumerable: true,
          get: function() {
            return _insertAll.default
          },
        })
        Object.defineProperty(exports, 'intersection', {
          enumerable: true,
          get: function() {
            return _intersection.default
          },
        })
        Object.defineProperty(exports, 'intersperse', {
          enumerable: true,
          get: function() {
            return _intersperse.default
          },
        })
        Object.defineProperty(exports, 'into', {
          enumerable: true,
          get: function() {
            return _into.default
          },
        })
        Object.defineProperty(exports, 'invert', {
          enumerable: true,
          get: function() {
            return _invert.default
          },
        })
        Object.defineProperty(exports, 'invertObj', {
          enumerable: true,
          get: function() {
            return _invertObj.default
          },
        })
        Object.defineProperty(exports, 'invoker', {
          enumerable: true,
          get: function() {
            return _invoker.default
          },
        })
        Object.defineProperty(exports, 'is', {
          enumerable: true,
          get: function() {
            return _is.default
          },
        })
        Object.defineProperty(exports, 'isEmpty', {
          enumerable: true,
          get: function() {
            return _isEmpty.default
          },
        })
        Object.defineProperty(exports, 'isNil', {
          enumerable: true,
          get: function() {
            return _isNil.default
          },
        })
        Object.defineProperty(exports, 'join', {
          enumerable: true,
          get: function() {
            return _join.default
          },
        })
        Object.defineProperty(exports, 'juxt', {
          enumerable: true,
          get: function() {
            return _juxt.default
          },
        })
        Object.defineProperty(exports, 'keys', {
          enumerable: true,
          get: function() {
            return _keys.default
          },
        })
        Object.defineProperty(exports, 'keysIn', {
          enumerable: true,
          get: function() {
            return _keysIn.default
          },
        })
        Object.defineProperty(exports, 'last', {
          enumerable: true,
          get: function() {
            return _last.default
          },
        })
        Object.defineProperty(exports, 'lastIndexOf', {
          enumerable: true,
          get: function() {
            return _lastIndexOf.default
          },
        })
        Object.defineProperty(exports, 'length', {
          enumerable: true,
          get: function() {
            return _length.default
          },
        })
        Object.defineProperty(exports, 'lens', {
          enumerable: true,
          get: function() {
            return _lens.default
          },
        })
        Object.defineProperty(exports, 'lensIndex', {
          enumerable: true,
          get: function() {
            return _lensIndex.default
          },
        })
        Object.defineProperty(exports, 'lensPath', {
          enumerable: true,
          get: function() {
            return _lensPath.default
          },
        })
        Object.defineProperty(exports, 'lensProp', {
          enumerable: true,
          get: function() {
            return _lensProp.default
          },
        })
        Object.defineProperty(exports, 'lift', {
          enumerable: true,
          get: function() {
            return _lift.default
          },
        })
        Object.defineProperty(exports, 'liftN', {
          enumerable: true,
          get: function() {
            return _liftN.default
          },
        })
        Object.defineProperty(exports, 'lt', {
          enumerable: true,
          get: function() {
            return _lt.default
          },
        })
        Object.defineProperty(exports, 'lte', {
          enumerable: true,
          get: function() {
            return _lte.default
          },
        })
        Object.defineProperty(exports, 'map', {
          enumerable: true,
          get: function() {
            return _map.default
          },
        })
        Object.defineProperty(exports, 'mapAccum', {
          enumerable: true,
          get: function() {
            return _mapAccum.default
          },
        })
        Object.defineProperty(exports, 'mapAccumRight', {
          enumerable: true,
          get: function() {
            return _mapAccumRight.default
          },
        })
        Object.defineProperty(exports, 'mapObjIndexed', {
          enumerable: true,
          get: function() {
            return _mapObjIndexed.default
          },
        })
        Object.defineProperty(exports, 'match', {
          enumerable: true,
          get: function() {
            return _match.default
          },
        })
        Object.defineProperty(exports, 'mathMod', {
          enumerable: true,
          get: function() {
            return _mathMod.default
          },
        })
        Object.defineProperty(exports, 'max', {
          enumerable: true,
          get: function() {
            return _max.default
          },
        })
        Object.defineProperty(exports, 'maxBy', {
          enumerable: true,
          get: function() {
            return _maxBy.default
          },
        })
        Object.defineProperty(exports, 'mean', {
          enumerable: true,
          get: function() {
            return _mean.default
          },
        })
        Object.defineProperty(exports, 'median', {
          enumerable: true,
          get: function() {
            return _median.default
          },
        })
        Object.defineProperty(exports, 'memoizeWith', {
          enumerable: true,
          get: function() {
            return _memoizeWith.default
          },
        })
        Object.defineProperty(exports, 'merge', {
          enumerable: true,
          get: function() {
            return _merge.default
          },
        })
        Object.defineProperty(exports, 'mergeAll', {
          enumerable: true,
          get: function() {
            return _mergeAll.default
          },
        })
        Object.defineProperty(exports, 'mergeDeepLeft', {
          enumerable: true,
          get: function() {
            return _mergeDeepLeft.default
          },
        })
        Object.defineProperty(exports, 'mergeDeepRight', {
          enumerable: true,
          get: function() {
            return _mergeDeepRight.default
          },
        })
        Object.defineProperty(exports, 'mergeDeepWith', {
          enumerable: true,
          get: function() {
            return _mergeDeepWith.default
          },
        })
        Object.defineProperty(exports, 'mergeDeepWithKey', {
          enumerable: true,
          get: function() {
            return _mergeDeepWithKey.default
          },
        })
        Object.defineProperty(exports, 'mergeLeft', {
          enumerable: true,
          get: function() {
            return _mergeLeft.default
          },
        })
        Object.defineProperty(exports, 'mergeRight', {
          enumerable: true,
          get: function() {
            return _mergeRight.default
          },
        })
        Object.defineProperty(exports, 'mergeWith', {
          enumerable: true,
          get: function() {
            return _mergeWith.default
          },
        })
        Object.defineProperty(exports, 'mergeWithKey', {
          enumerable: true,
          get: function() {
            return _mergeWithKey.default
          },
        })
        Object.defineProperty(exports, 'min', {
          enumerable: true,
          get: function() {
            return _min.default
          },
        })
        Object.defineProperty(exports, 'minBy', {
          enumerable: true,
          get: function() {
            return _minBy.default
          },
        })
        Object.defineProperty(exports, 'modulo', {
          enumerable: true,
          get: function() {
            return _modulo.default
          },
        })
        Object.defineProperty(exports, 'move', {
          enumerable: true,
          get: function() {
            return _move.default
          },
        })
        Object.defineProperty(exports, 'multiply', {
          enumerable: true,
          get: function() {
            return _multiply.default
          },
        })
        Object.defineProperty(exports, 'nAry', {
          enumerable: true,
          get: function() {
            return _nAry.default
          },
        })
        Object.defineProperty(exports, 'negate', {
          enumerable: true,
          get: function() {
            return _negate.default
          },
        })
        Object.defineProperty(exports, 'none', {
          enumerable: true,
          get: function() {
            return _none.default
          },
        })
        Object.defineProperty(exports, 'not', {
          enumerable: true,
          get: function() {
            return _not.default
          },
        })
        Object.defineProperty(exports, 'nth', {
          enumerable: true,
          get: function() {
            return _nth.default
          },
        })
        Object.defineProperty(exports, 'nthArg', {
          enumerable: true,
          get: function() {
            return _nthArg.default
          },
        })
        Object.defineProperty(exports, 'o', {
          enumerable: true,
          get: function() {
            return _o.default
          },
        })
        Object.defineProperty(exports, 'objOf', {
          enumerable: true,
          get: function() {
            return _objOf.default
          },
        })
        Object.defineProperty(exports, 'of', {
          enumerable: true,
          get: function() {
            return _of.default
          },
        })
        Object.defineProperty(exports, 'omit', {
          enumerable: true,
          get: function() {
            return _omit.default
          },
        })
        Object.defineProperty(exports, 'once', {
          enumerable: true,
          get: function() {
            return _once.default
          },
        })
        Object.defineProperty(exports, 'or', {
          enumerable: true,
          get: function() {
            return _or.default
          },
        })
        Object.defineProperty(exports, 'otherwise', {
          enumerable: true,
          get: function() {
            return _otherwise.default
          },
        })
        Object.defineProperty(exports, 'over', {
          enumerable: true,
          get: function() {
            return _over.default
          },
        })
        Object.defineProperty(exports, 'pair', {
          enumerable: true,
          get: function() {
            return _pair.default
          },
        })
        Object.defineProperty(exports, 'partial', {
          enumerable: true,
          get: function() {
            return _partial.default
          },
        })
        Object.defineProperty(exports, 'partialRight', {
          enumerable: true,
          get: function() {
            return _partialRight.default
          },
        })
        Object.defineProperty(exports, 'partition', {
          enumerable: true,
          get: function() {
            return _partition.default
          },
        })
        Object.defineProperty(exports, 'path', {
          enumerable: true,
          get: function() {
            return _path.default
          },
        })
        Object.defineProperty(exports, 'pathEq', {
          enumerable: true,
          get: function() {
            return _pathEq.default
          },
        })
        Object.defineProperty(exports, 'pathOr', {
          enumerable: true,
          get: function() {
            return _pathOr.default
          },
        })
        Object.defineProperty(exports, 'pathSatisfies', {
          enumerable: true,
          get: function() {
            return _pathSatisfies.default
          },
        })
        Object.defineProperty(exports, 'pick', {
          enumerable: true,
          get: function() {
            return _pick.default
          },
        })
        Object.defineProperty(exports, 'pickAll', {
          enumerable: true,
          get: function() {
            return _pickAll.default
          },
        })
        Object.defineProperty(exports, 'pickBy', {
          enumerable: true,
          get: function() {
            return _pickBy.default
          },
        })
        Object.defineProperty(exports, 'pipe', {
          enumerable: true,
          get: function() {
            return _pipe.default
          },
        })
        Object.defineProperty(exports, 'pipeK', {
          enumerable: true,
          get: function() {
            return _pipeK.default
          },
        })
        Object.defineProperty(exports, 'pipeP', {
          enumerable: true,
          get: function() {
            return _pipeP.default
          },
        })
        Object.defineProperty(exports, 'pipeWith', {
          enumerable: true,
          get: function() {
            return _pipeWith.default
          },
        })
        Object.defineProperty(exports, 'pluck', {
          enumerable: true,
          get: function() {
            return _pluck.default
          },
        })
        Object.defineProperty(exports, 'prepend', {
          enumerable: true,
          get: function() {
            return _prepend.default
          },
        })
        Object.defineProperty(exports, 'product', {
          enumerable: true,
          get: function() {
            return _product.default
          },
        })
        Object.defineProperty(exports, 'project', {
          enumerable: true,
          get: function() {
            return _project.default
          },
        })
        Object.defineProperty(exports, 'prop', {
          enumerable: true,
          get: function() {
            return _prop.default
          },
        })
        Object.defineProperty(exports, 'propEq', {
          enumerable: true,
          get: function() {
            return _propEq.default
          },
        })
        Object.defineProperty(exports, 'propIs', {
          enumerable: true,
          get: function() {
            return _propIs.default
          },
        })
        Object.defineProperty(exports, 'propOr', {
          enumerable: true,
          get: function() {
            return _propOr.default
          },
        })
        Object.defineProperty(exports, 'propSatisfies', {
          enumerable: true,
          get: function() {
            return _propSatisfies.default
          },
        })
        Object.defineProperty(exports, 'props', {
          enumerable: true,
          get: function() {
            return _props.default
          },
        })
        Object.defineProperty(exports, 'range', {
          enumerable: true,
          get: function() {
            return _range.default
          },
        })
        Object.defineProperty(exports, 'reduce', {
          enumerable: true,
          get: function() {
            return _reduce.default
          },
        })
        Object.defineProperty(exports, 'reduceBy', {
          enumerable: true,
          get: function() {
            return _reduceBy.default
          },
        })
        Object.defineProperty(exports, 'reduceRight', {
          enumerable: true,
          get: function() {
            return _reduceRight.default
          },
        })
        Object.defineProperty(exports, 'reduceWhile', {
          enumerable: true,
          get: function() {
            return _reduceWhile.default
          },
        })
        Object.defineProperty(exports, 'reduced', {
          enumerable: true,
          get: function() {
            return _reduced.default
          },
        })
        Object.defineProperty(exports, 'reject', {
          enumerable: true,
          get: function() {
            return _reject.default
          },
        })
        Object.defineProperty(exports, 'remove', {
          enumerable: true,
          get: function() {
            return _remove.default
          },
        })
        Object.defineProperty(exports, 'repeat', {
          enumerable: true,
          get: function() {
            return _repeat.default
          },
        })
        Object.defineProperty(exports, 'replace', {
          enumerable: true,
          get: function() {
            return _replace.default
          },
        })
        Object.defineProperty(exports, 'reverse', {
          enumerable: true,
          get: function() {
            return _reverse.default
          },
        })
        Object.defineProperty(exports, 'scan', {
          enumerable: true,
          get: function() {
            return _scan.default
          },
        })
        Object.defineProperty(exports, 'sequence', {
          enumerable: true,
          get: function() {
            return _sequence.default
          },
        })
        Object.defineProperty(exports, 'set', {
          enumerable: true,
          get: function() {
            return _set.default
          },
        })
        Object.defineProperty(exports, 'slice', {
          enumerable: true,
          get: function() {
            return _slice.default
          },
        })
        Object.defineProperty(exports, 'sort', {
          enumerable: true,
          get: function() {
            return _sort.default
          },
        })
        Object.defineProperty(exports, 'sortBy', {
          enumerable: true,
          get: function() {
            return _sortBy.default
          },
        })
        Object.defineProperty(exports, 'sortWith', {
          enumerable: true,
          get: function() {
            return _sortWith.default
          },
        })
        Object.defineProperty(exports, 'split', {
          enumerable: true,
          get: function() {
            return _split.default
          },
        })
        Object.defineProperty(exports, 'splitAt', {
          enumerable: true,
          get: function() {
            return _splitAt.default
          },
        })
        Object.defineProperty(exports, 'splitEvery', {
          enumerable: true,
          get: function() {
            return _splitEvery.default
          },
        })
        Object.defineProperty(exports, 'splitWhen', {
          enumerable: true,
          get: function() {
            return _splitWhen.default
          },
        })
        Object.defineProperty(exports, 'startsWith', {
          enumerable: true,
          get: function() {
            return _startsWith.default
          },
        })
        Object.defineProperty(exports, 'subtract', {
          enumerable: true,
          get: function() {
            return _subtract.default
          },
        })
        Object.defineProperty(exports, 'sum', {
          enumerable: true,
          get: function() {
            return _sum.default
          },
        })
        Object.defineProperty(exports, 'symmetricDifference', {
          enumerable: true,
          get: function() {
            return _symmetricDifference.default
          },
        })
        Object.defineProperty(exports, 'symmetricDifferenceWith', {
          enumerable: true,
          get: function() {
            return _symmetricDifferenceWith.default
          },
        })
        Object.defineProperty(exports, 'tail', {
          enumerable: true,
          get: function() {
            return _tail.default
          },
        })
        Object.defineProperty(exports, 'take', {
          enumerable: true,
          get: function() {
            return _take.default
          },
        })
        Object.defineProperty(exports, 'takeLast', {
          enumerable: true,
          get: function() {
            return _takeLast.default
          },
        })
        Object.defineProperty(exports, 'takeLastWhile', {
          enumerable: true,
          get: function() {
            return _takeLastWhile.default
          },
        })
        Object.defineProperty(exports, 'takeWhile', {
          enumerable: true,
          get: function() {
            return _takeWhile.default
          },
        })
        Object.defineProperty(exports, 'tap', {
          enumerable: true,
          get: function() {
            return _tap.default
          },
        })
        Object.defineProperty(exports, 'test', {
          enumerable: true,
          get: function() {
            return _test.default
          },
        })
        Object.defineProperty(exports, 'then', {
          enumerable: true,
          get: function() {
            return _then.default
          },
        })
        Object.defineProperty(exports, 'times', {
          enumerable: true,
          get: function() {
            return _times.default
          },
        })
        Object.defineProperty(exports, 'toLower', {
          enumerable: true,
          get: function() {
            return _toLower.default
          },
        })
        Object.defineProperty(exports, 'toPairs', {
          enumerable: true,
          get: function() {
            return _toPairs.default
          },
        })
        Object.defineProperty(exports, 'toPairsIn', {
          enumerable: true,
          get: function() {
            return _toPairsIn.default
          },
        })
        Object.defineProperty(exports, 'toString', {
          enumerable: true,
          get: function() {
            return _toString.default
          },
        })
        Object.defineProperty(exports, 'toUpper', {
          enumerable: true,
          get: function() {
            return _toUpper.default
          },
        })
        Object.defineProperty(exports, 'transduce', {
          enumerable: true,
          get: function() {
            return _transduce.default
          },
        })
        Object.defineProperty(exports, 'transpose', {
          enumerable: true,
          get: function() {
            return _transpose.default
          },
        })
        Object.defineProperty(exports, 'traverse', {
          enumerable: true,
          get: function() {
            return _traverse.default
          },
        })
        Object.defineProperty(exports, 'trim', {
          enumerable: true,
          get: function() {
            return _trim.default
          },
        })
        Object.defineProperty(exports, 'tryCatch', {
          enumerable: true,
          get: function() {
            return _tryCatch.default
          },
        })
        Object.defineProperty(exports, 'type', {
          enumerable: true,
          get: function() {
            return _type.default
          },
        })
        Object.defineProperty(exports, 'unapply', {
          enumerable: true,
          get: function() {
            return _unapply.default
          },
        })
        Object.defineProperty(exports, 'unary', {
          enumerable: true,
          get: function() {
            return _unary.default
          },
        })
        Object.defineProperty(exports, 'uncurryN', {
          enumerable: true,
          get: function() {
            return _uncurryN.default
          },
        })
        Object.defineProperty(exports, 'unfold', {
          enumerable: true,
          get: function() {
            return _unfold.default
          },
        })
        Object.defineProperty(exports, 'union', {
          enumerable: true,
          get: function() {
            return _union.default
          },
        })
        Object.defineProperty(exports, 'unionWith', {
          enumerable: true,
          get: function() {
            return _unionWith.default
          },
        })
        Object.defineProperty(exports, 'uniq', {
          enumerable: true,
          get: function() {
            return _uniq.default
          },
        })
        Object.defineProperty(exports, 'uniqBy', {
          enumerable: true,
          get: function() {
            return _uniqBy.default
          },
        })
        Object.defineProperty(exports, 'uniqWith', {
          enumerable: true,
          get: function() {
            return _uniqWith.default
          },
        })
        Object.defineProperty(exports, 'unless', {
          enumerable: true,
          get: function() {
            return _unless.default
          },
        })
        Object.defineProperty(exports, 'unnest', {
          enumerable: true,
          get: function() {
            return _unnest.default
          },
        })
        Object.defineProperty(exports, 'until', {
          enumerable: true,
          get: function() {
            return _until.default
          },
        })
        Object.defineProperty(exports, 'update', {
          enumerable: true,
          get: function() {
            return _update.default
          },
        })
        Object.defineProperty(exports, 'useWith', {
          enumerable: true,
          get: function() {
            return _useWith.default
          },
        })
        Object.defineProperty(exports, 'values', {
          enumerable: true,
          get: function() {
            return _values.default
          },
        })
        Object.defineProperty(exports, 'valuesIn', {
          enumerable: true,
          get: function() {
            return _valuesIn.default
          },
        })
        Object.defineProperty(exports, 'view', {
          enumerable: true,
          get: function() {
            return _view.default
          },
        })
        Object.defineProperty(exports, 'when', {
          enumerable: true,
          get: function() {
            return _when.default
          },
        })
        Object.defineProperty(exports, 'where', {
          enumerable: true,
          get: function() {
            return _where.default
          },
        })
        Object.defineProperty(exports, 'whereEq', {
          enumerable: true,
          get: function() {
            return _whereEq.default
          },
        })
        Object.defineProperty(exports, 'without', {
          enumerable: true,
          get: function() {
            return _without.default
          },
        })
        Object.defineProperty(exports, 'xprod', {
          enumerable: true,
          get: function() {
            return _xprod.default
          },
        })
        Object.defineProperty(exports, 'zip', {
          enumerable: true,
          get: function() {
            return _zip.default
          },
        })
        Object.defineProperty(exports, 'zipObj', {
          enumerable: true,
          get: function() {
            return _zipObj.default
          },
        })
        Object.defineProperty(exports, 'zipWith', {
          enumerable: true,
          get: function() {
            return _zipWith.default
          },
        })
        Object.defineProperty(exports, 'thunkify', {
          enumerable: true,
          get: function() {
            return _thunkify.default
          },
        })

        var _F = _interopRequireDefault(require('./F.js'))

        var _T = _interopRequireDefault(require('./T.js'))

        var _ = _interopRequireDefault(require('./__.js'))

        var _add = _interopRequireDefault(require('./add.js'))

        var _addIndex = _interopRequireDefault(require('./addIndex.js'))

        var _adjust = _interopRequireDefault(require('./adjust.js'))

        var _all = _interopRequireDefault(require('./all.js'))

        var _allPass = _interopRequireDefault(require('./allPass.js'))

        var _always = _interopRequireDefault(require('./always.js'))

        var _and = _interopRequireDefault(require('./and.js'))

        var _any = _interopRequireDefault(require('./any.js'))

        var _anyPass = _interopRequireDefault(require('./anyPass.js'))

        var _ap = _interopRequireDefault(require('./ap.js'))

        var _aperture = _interopRequireDefault(require('./aperture.js'))

        var _append = _interopRequireDefault(require('./append.js'))

        var _apply = _interopRequireDefault(require('./apply.js'))

        var _applySpec = _interopRequireDefault(require('./applySpec.js'))

        var _applyTo = _interopRequireDefault(require('./applyTo.js'))

        var _ascend = _interopRequireDefault(require('./ascend.js'))

        var _assoc = _interopRequireDefault(require('./assoc.js'))

        var _assocPath = _interopRequireDefault(require('./assocPath.js'))

        var _binary = _interopRequireDefault(require('./binary.js'))

        var _bind = _interopRequireDefault(require('./bind.js'))

        var _both = _interopRequireDefault(require('./both.js'))

        var _call = _interopRequireDefault(require('./call.js'))

        var _chain = _interopRequireDefault(require('./chain.js'))

        var _clamp = _interopRequireDefault(require('./clamp.js'))

        var _clone = _interopRequireDefault(require('./clone.js'))

        var _comparator = _interopRequireDefault(
          require('./comparator.js'),
        )

        var _complement = _interopRequireDefault(
          require('./complement.js'),
        )

        var _compose = _interopRequireDefault(require('./compose.js'))

        var _composeK = _interopRequireDefault(require('./composeK.js'))

        var _composeP = _interopRequireDefault(require('./composeP.js'))

        var _composeWith = _interopRequireDefault(
          require('./composeWith.js'),
        )

        var _concat = _interopRequireDefault(require('./concat.js'))

        var _cond = _interopRequireDefault(require('./cond.js'))

        var _construct = _interopRequireDefault(require('./construct.js'))

        var _constructN = _interopRequireDefault(
          require('./constructN.js'),
        )

        var _contains = _interopRequireDefault(require('./contains.js'))

        var _converge = _interopRequireDefault(require('./converge.js'))

        var _countBy = _interopRequireDefault(require('./countBy.js'))

        var _curry = _interopRequireDefault(require('./curry.js'))

        var _curryN = _interopRequireDefault(require('./curryN.js'))

        var _dec = _interopRequireDefault(require('./dec.js'))

        var _defaultTo = _interopRequireDefault(require('./defaultTo.js'))

        var _descend = _interopRequireDefault(require('./descend.js'))

        var _difference = _interopRequireDefault(
          require('./difference.js'),
        )

        var _differenceWith = _interopRequireDefault(
          require('./differenceWith.js'),
        )

        var _dissoc = _interopRequireDefault(require('./dissoc.js'))

        var _dissocPath = _interopRequireDefault(
          require('./dissocPath.js'),
        )

        var _divide = _interopRequireDefault(require('./divide.js'))

        var _drop = _interopRequireDefault(require('./drop.js'))

        var _dropLast = _interopRequireDefault(require('./dropLast.js'))

        var _dropLastWhile = _interopRequireDefault(
          require('./dropLastWhile.js'),
        )

        var _dropRepeats = _interopRequireDefault(
          require('./dropRepeats.js'),
        )

        var _dropRepeatsWith = _interopRequireDefault(
          require('./dropRepeatsWith.js'),
        )

        var _dropWhile = _interopRequireDefault(require('./dropWhile.js'))

        var _either = _interopRequireDefault(require('./either.js'))

        var _empty = _interopRequireDefault(require('./empty.js'))

        var _endsWith = _interopRequireDefault(require('./endsWith.js'))

        var _eqBy = _interopRequireDefault(require('./eqBy.js'))

        var _eqProps = _interopRequireDefault(require('./eqProps.js'))

        var _equals = _interopRequireDefault(require('./equals.js'))

        var _evolve = _interopRequireDefault(require('./evolve.js'))

        var _filter = _interopRequireDefault(require('./filter.js'))

        var _find = _interopRequireDefault(require('./find.js'))

        var _findIndex = _interopRequireDefault(require('./findIndex.js'))

        var _findLast = _interopRequireDefault(require('./findLast.js'))

        var _findLastIndex = _interopRequireDefault(
          require('./findLastIndex.js'),
        )

        var _flatten = _interopRequireDefault(require('./flatten.js'))

        var _flip = _interopRequireDefault(require('./flip.js'))

        var _forEach = _interopRequireDefault(require('./forEach.js'))

        var _forEachObjIndexed = _interopRequireDefault(
          require('./forEachObjIndexed.js'),
        )

        var _fromPairs = _interopRequireDefault(require('./fromPairs.js'))

        var _groupBy = _interopRequireDefault(require('./groupBy.js'))

        var _groupWith = _interopRequireDefault(require('./groupWith.js'))

        var _gt = _interopRequireDefault(require('./gt.js'))

        var _gte = _interopRequireDefault(require('./gte.js'))

        var _has = _interopRequireDefault(require('./has.js'))

        var _hasIn = _interopRequireDefault(require('./hasIn.js'))

        var _hasPath = _interopRequireDefault(require('./hasPath.js'))

        var _head = _interopRequireDefault(require('./head.js'))

        var _identical = _interopRequireDefault(require('./identical.js'))

        var _identity = _interopRequireDefault(require('./identity.js'))

        var _ifElse = _interopRequireDefault(require('./ifElse.js'))

        var _inc = _interopRequireDefault(require('./inc.js'))

        var _includes = _interopRequireDefault(require('./includes.js'))

        var _indexBy = _interopRequireDefault(require('./indexBy.js'))

        var _indexOf = _interopRequireDefault(require('./indexOf.js'))

        var _init = _interopRequireDefault(require('./init.js'))

        var _innerJoin = _interopRequireDefault(require('./innerJoin.js'))

        var _insert = _interopRequireDefault(require('./insert.js'))

        var _insertAll = _interopRequireDefault(require('./insertAll.js'))

        var _intersection = _interopRequireDefault(
          require('./intersection.js'),
        )

        var _intersperse = _interopRequireDefault(
          require('./intersperse.js'),
        )

        var _into = _interopRequireDefault(require('./into.js'))

        var _invert = _interopRequireDefault(require('./invert.js'))

        var _invertObj = _interopRequireDefault(require('./invertObj.js'))

        var _invoker = _interopRequireDefault(require('./invoker.js'))

        var _is = _interopRequireDefault(require('./is.js'))

        var _isEmpty = _interopRequireDefault(require('./isEmpty.js'))

        var _isNil = _interopRequireDefault(require('./isNil.js'))

        var _join = _interopRequireDefault(require('./join.js'))

        var _juxt = _interopRequireDefault(require('./juxt.js'))

        var _keys = _interopRequireDefault(require('./keys.js'))

        var _keysIn = _interopRequireDefault(require('./keysIn.js'))

        var _last = _interopRequireDefault(require('./last.js'))

        var _lastIndexOf = _interopRequireDefault(
          require('./lastIndexOf.js'),
        )

        var _length = _interopRequireDefault(require('./length.js'))

        var _lens = _interopRequireDefault(require('./lens.js'))

        var _lensIndex = _interopRequireDefault(require('./lensIndex.js'))

        var _lensPath = _interopRequireDefault(require('./lensPath.js'))

        var _lensProp = _interopRequireDefault(require('./lensProp.js'))

        var _lift = _interopRequireDefault(require('./lift.js'))

        var _liftN = _interopRequireDefault(require('./liftN.js'))

        var _lt = _interopRequireDefault(require('./lt.js'))

        var _lte = _interopRequireDefault(require('./lte.js'))

        var _map = _interopRequireDefault(require('./map.js'))

        var _mapAccum = _interopRequireDefault(require('./mapAccum.js'))

        var _mapAccumRight = _interopRequireDefault(
          require('./mapAccumRight.js'),
        )

        var _mapObjIndexed = _interopRequireDefault(
          require('./mapObjIndexed.js'),
        )

        var _match = _interopRequireDefault(require('./match.js'))

        var _mathMod = _interopRequireDefault(require('./mathMod.js'))

        var _max = _interopRequireDefault(require('./max.js'))

        var _maxBy = _interopRequireDefault(require('./maxBy.js'))

        var _mean = _interopRequireDefault(require('./mean.js'))

        var _median = _interopRequireDefault(require('./median.js'))

        var _memoizeWith = _interopRequireDefault(
          require('./memoizeWith.js'),
        )

        var _merge = _interopRequireDefault(require('./merge.js'))

        var _mergeAll = _interopRequireDefault(require('./mergeAll.js'))

        var _mergeDeepLeft = _interopRequireDefault(
          require('./mergeDeepLeft.js'),
        )

        var _mergeDeepRight = _interopRequireDefault(
          require('./mergeDeepRight.js'),
        )

        var _mergeDeepWith = _interopRequireDefault(
          require('./mergeDeepWith.js'),
        )

        var _mergeDeepWithKey = _interopRequireDefault(
          require('./mergeDeepWithKey.js'),
        )

        var _mergeLeft = _interopRequireDefault(require('./mergeLeft.js'))

        var _mergeRight = _interopRequireDefault(
          require('./mergeRight.js'),
        )

        var _mergeWith = _interopRequireDefault(require('./mergeWith.js'))

        var _mergeWithKey = _interopRequireDefault(
          require('./mergeWithKey.js'),
        )

        var _min = _interopRequireDefault(require('./min.js'))

        var _minBy = _interopRequireDefault(require('./minBy.js'))

        var _modulo = _interopRequireDefault(require('./modulo.js'))

        var _move = _interopRequireDefault(require('./move.js'))

        var _multiply = _interopRequireDefault(require('./multiply.js'))

        var _nAry = _interopRequireDefault(require('./nAry.js'))

        var _negate = _interopRequireDefault(require('./negate.js'))

        var _none = _interopRequireDefault(require('./none.js'))

        var _not = _interopRequireDefault(require('./not.js'))

        var _nth = _interopRequireDefault(require('./nth.js'))

        var _nthArg = _interopRequireDefault(require('./nthArg.js'))

        var _o = _interopRequireDefault(require('./o.js'))

        var _objOf = _interopRequireDefault(require('./objOf.js'))

        var _of = _interopRequireDefault(require('./of.js'))

        var _omit = _interopRequireDefault(require('./omit.js'))

        var _once = _interopRequireDefault(require('./once.js'))

        var _or = _interopRequireDefault(require('./or.js'))

        var _otherwise = _interopRequireDefault(require('./otherwise.js'))

        var _over = _interopRequireDefault(require('./over.js'))

        var _pair = _interopRequireDefault(require('./pair.js'))

        var _partial = _interopRequireDefault(require('./partial.js'))

        var _partialRight = _interopRequireDefault(
          require('./partialRight.js'),
        )

        var _partition = _interopRequireDefault(require('./partition.js'))

        var _path = _interopRequireDefault(require('./path.js'))

        var _pathEq = _interopRequireDefault(require('./pathEq.js'))

        var _pathOr = _interopRequireDefault(require('./pathOr.js'))

        var _pathSatisfies = _interopRequireDefault(
          require('./pathSatisfies.js'),
        )

        var _pick = _interopRequireDefault(require('./pick.js'))

        var _pickAll = _interopRequireDefault(require('./pickAll.js'))

        var _pickBy = _interopRequireDefault(require('./pickBy.js'))

        var _pipe = _interopRequireDefault(require('./pipe.js'))

        var _pipeK = _interopRequireDefault(require('./pipeK.js'))

        var _pipeP = _interopRequireDefault(require('./pipeP.js'))

        var _pipeWith = _interopRequireDefault(require('./pipeWith.js'))

        var _pluck = _interopRequireDefault(require('./pluck.js'))

        var _prepend = _interopRequireDefault(require('./prepend.js'))

        var _product = _interopRequireDefault(require('./product.js'))

        var _project = _interopRequireDefault(require('./project.js'))

        var _prop = _interopRequireDefault(require('./prop.js'))

        var _propEq = _interopRequireDefault(require('./propEq.js'))

        var _propIs = _interopRequireDefault(require('./propIs.js'))

        var _propOr = _interopRequireDefault(require('./propOr.js'))

        var _propSatisfies = _interopRequireDefault(
          require('./propSatisfies.js'),
        )

        var _props = _interopRequireDefault(require('./props.js'))

        var _range = _interopRequireDefault(require('./range.js'))

        var _reduce = _interopRequireDefault(require('./reduce.js'))

        var _reduceBy = _interopRequireDefault(require('./reduceBy.js'))

        var _reduceRight = _interopRequireDefault(
          require('./reduceRight.js'),
        )

        var _reduceWhile = _interopRequireDefault(
          require('./reduceWhile.js'),
        )

        var _reduced = _interopRequireDefault(require('./reduced.js'))

        var _reject = _interopRequireDefault(require('./reject.js'))

        var _remove = _interopRequireDefault(require('./remove.js'))

        var _repeat = _interopRequireDefault(require('./repeat.js'))

        var _replace = _interopRequireDefault(require('./replace.js'))

        var _reverse = _interopRequireDefault(require('./reverse.js'))

        var _scan = _interopRequireDefault(require('./scan.js'))

        var _sequence = _interopRequireDefault(require('./sequence.js'))

        var _set = _interopRequireDefault(require('./set.js'))

        var _slice = _interopRequireDefault(require('./slice.js'))

        var _sort = _interopRequireDefault(require('./sort.js'))

        var _sortBy = _interopRequireDefault(require('./sortBy.js'))

        var _sortWith = _interopRequireDefault(require('./sortWith.js'))

        var _split = _interopRequireDefault(require('./split.js'))

        var _splitAt = _interopRequireDefault(require('./splitAt.js'))

        var _splitEvery = _interopRequireDefault(
          require('./splitEvery.js'),
        )

        var _splitWhen = _interopRequireDefault(require('./splitWhen.js'))

        var _startsWith = _interopRequireDefault(
          require('./startsWith.js'),
        )

        var _subtract = _interopRequireDefault(require('./subtract.js'))

        var _sum = _interopRequireDefault(require('./sum.js'))

        var _symmetricDifference = _interopRequireDefault(
          require('./symmetricDifference.js'),
        )

        var _symmetricDifferenceWith = _interopRequireDefault(
          require('./symmetricDifferenceWith.js'),
        )

        var _tail = _interopRequireDefault(require('./tail.js'))

        var _take = _interopRequireDefault(require('./take.js'))

        var _takeLast = _interopRequireDefault(require('./takeLast.js'))

        var _takeLastWhile = _interopRequireDefault(
          require('./takeLastWhile.js'),
        )

        var _takeWhile = _interopRequireDefault(require('./takeWhile.js'))

        var _tap = _interopRequireDefault(require('./tap.js'))

        var _test = _interopRequireDefault(require('./test.js'))

        var _then = _interopRequireDefault(require('./then.js'))

        var _times = _interopRequireDefault(require('./times.js'))

        var _toLower = _interopRequireDefault(require('./toLower.js'))

        var _toPairs = _interopRequireDefault(require('./toPairs.js'))

        var _toPairsIn = _interopRequireDefault(require('./toPairsIn.js'))

        var _toString = _interopRequireDefault(require('./toString.js'))

        var _toUpper = _interopRequireDefault(require('./toUpper.js'))

        var _transduce = _interopRequireDefault(require('./transduce.js'))

        var _transpose = _interopRequireDefault(require('./transpose.js'))

        var _traverse = _interopRequireDefault(require('./traverse.js'))

        var _trim = _interopRequireDefault(require('./trim.js'))

        var _tryCatch = _interopRequireDefault(require('./tryCatch.js'))

        var _type = _interopRequireDefault(require('./type.js'))

        var _unapply = _interopRequireDefault(require('./unapply.js'))

        var _unary = _interopRequireDefault(require('./unary.js'))

        var _uncurryN = _interopRequireDefault(require('./uncurryN.js'))

        var _unfold = _interopRequireDefault(require('./unfold.js'))

        var _union = _interopRequireDefault(require('./union.js'))

        var _unionWith = _interopRequireDefault(require('./unionWith.js'))

        var _uniq = _interopRequireDefault(require('./uniq.js'))

        var _uniqBy = _interopRequireDefault(require('./uniqBy.js'))

        var _uniqWith = _interopRequireDefault(require('./uniqWith.js'))

        var _unless = _interopRequireDefault(require('./unless.js'))

        var _unnest = _interopRequireDefault(require('./unnest.js'))

        var _until = _interopRequireDefault(require('./until.js'))

        var _update = _interopRequireDefault(require('./update.js'))

        var _useWith = _interopRequireDefault(require('./useWith.js'))

        var _values = _interopRequireDefault(require('./values.js'))

        var _valuesIn = _interopRequireDefault(require('./valuesIn.js'))

        var _view = _interopRequireDefault(require('./view.js'))

        var _when = _interopRequireDefault(require('./when.js'))

        var _where = _interopRequireDefault(require('./where.js'))

        var _whereEq = _interopRequireDefault(require('./whereEq.js'))

        var _without = _interopRequireDefault(require('./without.js'))

        var _xprod = _interopRequireDefault(require('./xprod.js'))

        var _zip = _interopRequireDefault(require('./zip.js'))

        var _zipObj = _interopRequireDefault(require('./zipObj.js'))

        var _zipWith = _interopRequireDefault(require('./zipWith.js'))

        var _thunkify = _interopRequireDefault(require('./thunkify.js'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }
      },
      {
        './F.js': '../node_modules/ramda/es/F.js',
        './T.js': '../node_modules/ramda/es/T.js',
        './__.js': '../node_modules/ramda/es/__.js',
        './add.js': '../node_modules/ramda/es/add.js',
        './addIndex.js': '../node_modules/ramda/es/addIndex.js',
        './adjust.js': '../node_modules/ramda/es/adjust.js',
        './all.js': '../node_modules/ramda/es/all.js',
        './allPass.js': '../node_modules/ramda/es/allPass.js',
        './always.js': '../node_modules/ramda/es/always.js',
        './and.js': '../node_modules/ramda/es/and.js',
        './any.js': '../node_modules/ramda/es/any.js',
        './anyPass.js': '../node_modules/ramda/es/anyPass.js',
        './ap.js': '../node_modules/ramda/es/ap.js',
        './aperture.js': '../node_modules/ramda/es/aperture.js',
        './append.js': '../node_modules/ramda/es/append.js',
        './apply.js': '../node_modules/ramda/es/apply.js',
        './applySpec.js': '../node_modules/ramda/es/applySpec.js',
        './applyTo.js': '../node_modules/ramda/es/applyTo.js',
        './ascend.js': '../node_modules/ramda/es/ascend.js',
        './assoc.js': '../node_modules/ramda/es/assoc.js',
        './assocPath.js': '../node_modules/ramda/es/assocPath.js',
        './binary.js': '../node_modules/ramda/es/binary.js',
        './bind.js': '../node_modules/ramda/es/bind.js',
        './both.js': '../node_modules/ramda/es/both.js',
        './call.js': '../node_modules/ramda/es/call.js',
        './chain.js': '../node_modules/ramda/es/chain.js',
        './clamp.js': '../node_modules/ramda/es/clamp.js',
        './clone.js': '../node_modules/ramda/es/clone.js',
        './comparator.js': '../node_modules/ramda/es/comparator.js',
        './complement.js': '../node_modules/ramda/es/complement.js',
        './compose.js': '../node_modules/ramda/es/compose.js',
        './composeK.js': '../node_modules/ramda/es/composeK.js',
        './composeP.js': '../node_modules/ramda/es/composeP.js',
        './composeWith.js': '../node_modules/ramda/es/composeWith.js',
        './concat.js': '../node_modules/ramda/es/concat.js',
        './cond.js': '../node_modules/ramda/es/cond.js',
        './construct.js': '../node_modules/ramda/es/construct.js',
        './constructN.js': '../node_modules/ramda/es/constructN.js',
        './contains.js': '../node_modules/ramda/es/contains.js',
        './converge.js': '../node_modules/ramda/es/converge.js',
        './countBy.js': '../node_modules/ramda/es/countBy.js',
        './curry.js': '../node_modules/ramda/es/curry.js',
        './curryN.js': '../node_modules/ramda/es/curryN.js',
        './dec.js': '../node_modules/ramda/es/dec.js',
        './defaultTo.js': '../node_modules/ramda/es/defaultTo.js',
        './descend.js': '../node_modules/ramda/es/descend.js',
        './difference.js': '../node_modules/ramda/es/difference.js',
        './differenceWith.js':
          '../node_modules/ramda/es/differenceWith.js',
        './dissoc.js': '../node_modules/ramda/es/dissoc.js',
        './dissocPath.js': '../node_modules/ramda/es/dissocPath.js',
        './divide.js': '../node_modules/ramda/es/divide.js',
        './drop.js': '../node_modules/ramda/es/drop.js',
        './dropLast.js': '../node_modules/ramda/es/dropLast.js',
        './dropLastWhile.js': '../node_modules/ramda/es/dropLastWhile.js',
        './dropRepeats.js': '../node_modules/ramda/es/dropRepeats.js',
        './dropRepeatsWith.js':
          '../node_modules/ramda/es/dropRepeatsWith.js',
        './dropWhile.js': '../node_modules/ramda/es/dropWhile.js',
        './either.js': '../node_modules/ramda/es/either.js',
        './empty.js': '../node_modules/ramda/es/empty.js',
        './endsWith.js': '../node_modules/ramda/es/endsWith.js',
        './eqBy.js': '../node_modules/ramda/es/eqBy.js',
        './eqProps.js': '../node_modules/ramda/es/eqProps.js',
        './equals.js': '../node_modules/ramda/es/equals.js',
        './evolve.js': '../node_modules/ramda/es/evolve.js',
        './filter.js': '../node_modules/ramda/es/filter.js',
        './find.js': '../node_modules/ramda/es/find.js',
        './findIndex.js': '../node_modules/ramda/es/findIndex.js',
        './findLast.js': '../node_modules/ramda/es/findLast.js',
        './findLastIndex.js': '../node_modules/ramda/es/findLastIndex.js',
        './flatten.js': '../node_modules/ramda/es/flatten.js',
        './flip.js': '../node_modules/ramda/es/flip.js',
        './forEach.js': '../node_modules/ramda/es/forEach.js',
        './forEachObjIndexed.js':
          '../node_modules/ramda/es/forEachObjIndexed.js',
        './fromPairs.js': '../node_modules/ramda/es/fromPairs.js',
        './groupBy.js': '../node_modules/ramda/es/groupBy.js',
        './groupWith.js': '../node_modules/ramda/es/groupWith.js',
        './gt.js': '../node_modules/ramda/es/gt.js',
        './gte.js': '../node_modules/ramda/es/gte.js',
        './has.js': '../node_modules/ramda/es/has.js',
        './hasIn.js': '../node_modules/ramda/es/hasIn.js',
        './hasPath.js': '../node_modules/ramda/es/hasPath.js',
        './head.js': '../node_modules/ramda/es/head.js',
        './identical.js': '../node_modules/ramda/es/identical.js',
        './identity.js': '../node_modules/ramda/es/identity.js',
        './ifElse.js': '../node_modules/ramda/es/ifElse.js',
        './inc.js': '../node_modules/ramda/es/inc.js',
        './includes.js': '../node_modules/ramda/es/includes.js',
        './indexBy.js': '../node_modules/ramda/es/indexBy.js',
        './indexOf.js': '../node_modules/ramda/es/indexOf.js',
        './init.js': '../node_modules/ramda/es/init.js',
        './innerJoin.js': '../node_modules/ramda/es/innerJoin.js',
        './insert.js': '../node_modules/ramda/es/insert.js',
        './insertAll.js': '../node_modules/ramda/es/insertAll.js',
        './intersection.js': '../node_modules/ramda/es/intersection.js',
        './intersperse.js': '../node_modules/ramda/es/intersperse.js',
        './into.js': '../node_modules/ramda/es/into.js',
        './invert.js': '../node_modules/ramda/es/invert.js',
        './invertObj.js': '../node_modules/ramda/es/invertObj.js',
        './invoker.js': '../node_modules/ramda/es/invoker.js',
        './is.js': '../node_modules/ramda/es/is.js',
        './isEmpty.js': '../node_modules/ramda/es/isEmpty.js',
        './isNil.js': '../node_modules/ramda/es/isNil.js',
        './join.js': '../node_modules/ramda/es/join.js',
        './juxt.js': '../node_modules/ramda/es/juxt.js',
        './keys.js': '../node_modules/ramda/es/keys.js',
        './keysIn.js': '../node_modules/ramda/es/keysIn.js',
        './last.js': '../node_modules/ramda/es/last.js',
        './lastIndexOf.js': '../node_modules/ramda/es/lastIndexOf.js',
        './length.js': '../node_modules/ramda/es/length.js',
        './lens.js': '../node_modules/ramda/es/lens.js',
        './lensIndex.js': '../node_modules/ramda/es/lensIndex.js',
        './lensPath.js': '../node_modules/ramda/es/lensPath.js',
        './lensProp.js': '../node_modules/ramda/es/lensProp.js',
        './lift.js': '../node_modules/ramda/es/lift.js',
        './liftN.js': '../node_modules/ramda/es/liftN.js',
        './lt.js': '../node_modules/ramda/es/lt.js',
        './lte.js': '../node_modules/ramda/es/lte.js',
        './map.js': '../node_modules/ramda/es/map.js',
        './mapAccum.js': '../node_modules/ramda/es/mapAccum.js',
        './mapAccumRight.js': '../node_modules/ramda/es/mapAccumRight.js',
        './mapObjIndexed.js': '../node_modules/ramda/es/mapObjIndexed.js',
        './match.js': '../node_modules/ramda/es/match.js',
        './mathMod.js': '../node_modules/ramda/es/mathMod.js',
        './max.js': '../node_modules/ramda/es/max.js',
        './maxBy.js': '../node_modules/ramda/es/maxBy.js',
        './mean.js': '../node_modules/ramda/es/mean.js',
        './median.js': '../node_modules/ramda/es/median.js',
        './memoizeWith.js': '../node_modules/ramda/es/memoizeWith.js',
        './merge.js': '../node_modules/ramda/es/merge.js',
        './mergeAll.js': '../node_modules/ramda/es/mergeAll.js',
        './mergeDeepLeft.js': '../node_modules/ramda/es/mergeDeepLeft.js',
        './mergeDeepRight.js':
          '../node_modules/ramda/es/mergeDeepRight.js',
        './mergeDeepWith.js': '../node_modules/ramda/es/mergeDeepWith.js',
        './mergeDeepWithKey.js':
          '../node_modules/ramda/es/mergeDeepWithKey.js',
        './mergeLeft.js': '../node_modules/ramda/es/mergeLeft.js',
        './mergeRight.js': '../node_modules/ramda/es/mergeRight.js',
        './mergeWith.js': '../node_modules/ramda/es/mergeWith.js',
        './mergeWithKey.js': '../node_modules/ramda/es/mergeWithKey.js',
        './min.js': '../node_modules/ramda/es/min.js',
        './minBy.js': '../node_modules/ramda/es/minBy.js',
        './modulo.js': '../node_modules/ramda/es/modulo.js',
        './move.js': '../node_modules/ramda/es/move.js',
        './multiply.js': '../node_modules/ramda/es/multiply.js',
        './nAry.js': '../node_modules/ramda/es/nAry.js',
        './negate.js': '../node_modules/ramda/es/negate.js',
        './none.js': '../node_modules/ramda/es/none.js',
        './not.js': '../node_modules/ramda/es/not.js',
        './nth.js': '../node_modules/ramda/es/nth.js',
        './nthArg.js': '../node_modules/ramda/es/nthArg.js',
        './o.js': '../node_modules/ramda/es/o.js',
        './objOf.js': '../node_modules/ramda/es/objOf.js',
        './of.js': '../node_modules/ramda/es/of.js',
        './omit.js': '../node_modules/ramda/es/omit.js',
        './once.js': '../node_modules/ramda/es/once.js',
        './or.js': '../node_modules/ramda/es/or.js',
        './otherwise.js': '../node_modules/ramda/es/otherwise.js',
        './over.js': '../node_modules/ramda/es/over.js',
        './pair.js': '../node_modules/ramda/es/pair.js',
        './partial.js': '../node_modules/ramda/es/partial.js',
        './partialRight.js': '../node_modules/ramda/es/partialRight.js',
        './partition.js': '../node_modules/ramda/es/partition.js',
        './path.js': '../node_modules/ramda/es/path.js',
        './pathEq.js': '../node_modules/ramda/es/pathEq.js',
        './pathOr.js': '../node_modules/ramda/es/pathOr.js',
        './pathSatisfies.js': '../node_modules/ramda/es/pathSatisfies.js',
        './pick.js': '../node_modules/ramda/es/pick.js',
        './pickAll.js': '../node_modules/ramda/es/pickAll.js',
        './pickBy.js': '../node_modules/ramda/es/pickBy.js',
        './pipe.js': '../node_modules/ramda/es/pipe.js',
        './pipeK.js': '../node_modules/ramda/es/pipeK.js',
        './pipeP.js': '../node_modules/ramda/es/pipeP.js',
        './pipeWith.js': '../node_modules/ramda/es/pipeWith.js',
        './pluck.js': '../node_modules/ramda/es/pluck.js',
        './prepend.js': '../node_modules/ramda/es/prepend.js',
        './product.js': '../node_modules/ramda/es/product.js',
        './project.js': '../node_modules/ramda/es/project.js',
        './prop.js': '../node_modules/ramda/es/prop.js',
        './propEq.js': '../node_modules/ramda/es/propEq.js',
        './propIs.js': '../node_modules/ramda/es/propIs.js',
        './propOr.js': '../node_modules/ramda/es/propOr.js',
        './propSatisfies.js': '../node_modules/ramda/es/propSatisfies.js',
        './props.js': '../node_modules/ramda/es/props.js',
        './range.js': '../node_modules/ramda/es/range.js',
        './reduce.js': '../node_modules/ramda/es/reduce.js',
        './reduceBy.js': '../node_modules/ramda/es/reduceBy.js',
        './reduceRight.js': '../node_modules/ramda/es/reduceRight.js',
        './reduceWhile.js': '../node_modules/ramda/es/reduceWhile.js',
        './reduced.js': '../node_modules/ramda/es/reduced.js',
        './reject.js': '../node_modules/ramda/es/reject.js',
        './remove.js': '../node_modules/ramda/es/remove.js',
        './repeat.js': '../node_modules/ramda/es/repeat.js',
        './replace.js': '../node_modules/ramda/es/replace.js',
        './reverse.js': '../node_modules/ramda/es/reverse.js',
        './scan.js': '../node_modules/ramda/es/scan.js',
        './sequence.js': '../node_modules/ramda/es/sequence.js',
        './set.js': '../node_modules/ramda/es/set.js',
        './slice.js': '../node_modules/ramda/es/slice.js',
        './sort.js': '../node_modules/ramda/es/sort.js',
        './sortBy.js': '../node_modules/ramda/es/sortBy.js',
        './sortWith.js': '../node_modules/ramda/es/sortWith.js',
        './split.js': '../node_modules/ramda/es/split.js',
        './splitAt.js': '../node_modules/ramda/es/splitAt.js',
        './splitEvery.js': '../node_modules/ramda/es/splitEvery.js',
        './splitWhen.js': '../node_modules/ramda/es/splitWhen.js',
        './startsWith.js': '../node_modules/ramda/es/startsWith.js',
        './subtract.js': '../node_modules/ramda/es/subtract.js',
        './sum.js': '../node_modules/ramda/es/sum.js',
        './symmetricDifference.js':
          '../node_modules/ramda/es/symmetricDifference.js',
        './symmetricDifferenceWith.js':
          '../node_modules/ramda/es/symmetricDifferenceWith.js',
        './tail.js': '../node_modules/ramda/es/tail.js',
        './take.js': '../node_modules/ramda/es/take.js',
        './takeLast.js': '../node_modules/ramda/es/takeLast.js',
        './takeLastWhile.js': '../node_modules/ramda/es/takeLastWhile.js',
        './takeWhile.js': '../node_modules/ramda/es/takeWhile.js',
        './tap.js': '../node_modules/ramda/es/tap.js',
        './test.js': '../node_modules/ramda/es/test.js',
        './then.js': '../node_modules/ramda/es/then.js',
        './times.js': '../node_modules/ramda/es/times.js',
        './toLower.js': '../node_modules/ramda/es/toLower.js',
        './toPairs.js': '../node_modules/ramda/es/toPairs.js',
        './toPairsIn.js': '../node_modules/ramda/es/toPairsIn.js',
        './toString.js': '../node_modules/ramda/es/toString.js',
        './toUpper.js': '../node_modules/ramda/es/toUpper.js',
        './transduce.js': '../node_modules/ramda/es/transduce.js',
        './transpose.js': '../node_modules/ramda/es/transpose.js',
        './traverse.js': '../node_modules/ramda/es/traverse.js',
        './trim.js': '../node_modules/ramda/es/trim.js',
        './tryCatch.js': '../node_modules/ramda/es/tryCatch.js',
        './type.js': '../node_modules/ramda/es/type.js',
        './unapply.js': '../node_modules/ramda/es/unapply.js',
        './unary.js': '../node_modules/ramda/es/unary.js',
        './uncurryN.js': '../node_modules/ramda/es/uncurryN.js',
        './unfold.js': '../node_modules/ramda/es/unfold.js',
        './union.js': '../node_modules/ramda/es/union.js',
        './unionWith.js': '../node_modules/ramda/es/unionWith.js',
        './uniq.js': '../node_modules/ramda/es/uniq.js',
        './uniqBy.js': '../node_modules/ramda/es/uniqBy.js',
        './uniqWith.js': '../node_modules/ramda/es/uniqWith.js',
        './unless.js': '../node_modules/ramda/es/unless.js',
        './unnest.js': '../node_modules/ramda/es/unnest.js',
        './until.js': '../node_modules/ramda/es/until.js',
        './update.js': '../node_modules/ramda/es/update.js',
        './useWith.js': '../node_modules/ramda/es/useWith.js',
        './values.js': '../node_modules/ramda/es/values.js',
        './valuesIn.js': '../node_modules/ramda/es/valuesIn.js',
        './view.js': '../node_modules/ramda/es/view.js',
        './when.js': '../node_modules/ramda/es/when.js',
        './where.js': '../node_modules/ramda/es/where.js',
        './whereEq.js': '../node_modules/ramda/es/whereEq.js',
        './without.js': '../node_modules/ramda/es/without.js',
        './xprod.js': '../node_modules/ramda/es/xprod.js',
        './zip.js': '../node_modules/ramda/es/zip.js',
        './zipObj.js': '../node_modules/ramda/es/zipObj.js',
        './zipWith.js': '../node_modules/ramda/es/zipWith.js',
        './thunkify.js': '../node_modules/ramda/es/thunkify.js',
      },
    ],
    '../node_modules/aproba/index.js': [
      function(require, module, exports) {
        'use strict'
        module.exports = validate

        function isArguments(thingy) {
          return (
            thingy != null &&
            typeof thingy === 'object' &&
            thingy.hasOwnProperty('callee')
          )
        }

        const types = {
          '*': { label: 'any', check: () => true },
          A: {
            label: 'array',
            check: _ => Array.isArray(_) || isArguments(_),
          },
          S: { label: 'string', check: _ => typeof _ === 'string' },
          N: { label: 'number', check: _ => typeof _ === 'number' },
          F: { label: 'function', check: _ => typeof _ === 'function' },
          O: {
            label: 'object',
            check: _ =>
              typeof _ === 'object' &&
              _ != null &&
              !types.A.check(_) &&
              !types.E.check(_),
          },
          B: { label: 'boolean', check: _ => typeof _ === 'boolean' },
          E: { label: 'error', check: _ => _ instanceof Error },
          Z: { label: 'null', check: _ => _ == null },
        }

        function addSchema(schema, arity) {
          const group = (arity[schema.length] = arity[schema.length] || [])
          if (group.indexOf(schema) === -1) group.push(schema)
        }

        function validate(rawSchemas, args) {
          if (arguments.length !== 2)
            throw wrongNumberOfArgs(['SA'], arguments.length)
          if (!rawSchemas) throw missingRequiredArg(0, 'rawSchemas')
          if (!args) throw missingRequiredArg(1, 'args')
          if (!types.S.check(rawSchemas))
            throw invalidType(0, ['string'], rawSchemas)
          if (!types.A.check(args)) throw invalidType(1, ['array'], args)
          const schemas = rawSchemas.split('|')
          const arity = {}

          schemas.forEach(schema => {
            for (let ii = 0; ii < schema.length; ++ii) {
              const type = schema[ii]
              if (!types[type]) throw unknownType(ii, type)
            }
            if (/E.*E/.test(schema)) throw moreThanOneError(schema)
            addSchema(schema, arity)
            if (/E/.test(schema)) {
              addSchema(schema.replace(/E.*$/, 'E'), arity)
              addSchema(schema.replace(/E/, 'Z'), arity)
              if (schema.length === 1) addSchema('', arity)
            }
          })
          let matching = arity[args.length]
          if (!matching) {
            throw wrongNumberOfArgs(Object.keys(arity), args.length)
          }
          for (let ii = 0; ii < args.length; ++ii) {
            let newMatching = matching.filter(schema => {
              const type = schema[ii]
              const typeCheck = types[type].check
              return typeCheck(args[ii])
            })
            if (!newMatching.length) {
              const labels = matching
                .map(_ => types[_[ii]].label)
                .filter(_ => _ != null)
              throw invalidType(ii, labels, args[ii])
            }
            matching = newMatching
          }
        }

        function missingRequiredArg(num) {
          return newException(
            'EMISSINGARG',
            'Missing required argument #' + (num + 1),
          )
        }

        function unknownType(num, type) {
          return newException(
            'EUNKNOWNTYPE',
            'Unknown type ' + type + ' in argument #' + (num + 1),
          )
        }

        function invalidType(num, expectedTypes, value) {
          let valueType
          Object.keys(types).forEach(typeCode => {
            if (types[typeCode].check(value))
              valueType = types[typeCode].label
          })
          return newException(
            'EINVALIDTYPE',
            'Argument #' +
              (num + 1) +
              ': Expected ' +
              englishList(expectedTypes) +
              ' but got ' +
              valueType,
          )
        }

        function englishList(list) {
          return list.join(', ').replace(/, ([^,]+)$/, ' or $1')
        }

        function wrongNumberOfArgs(expected, got) {
          const english = englishList(expected)
          const args = expected.every(ex => ex.length === 1)
            ? 'argument'
            : 'arguments'
          return newException(
            'EWRONGARGCOUNT',
            'Expected ' + english + ' ' + args + ' but got ' + got,
          )
        }

        function moreThanOneError(schema) {
          return newException(
            'ETOOMANYERRORTYPES',
            'Only one error type per argument signature is allowed, more than one found in "' +
              schema +
              '"',
          )
        }

        function newException(code, msg) {
          const err = new Error(msg)
          err.code = code
          /* istanbul ignore else */
          if (Error.captureStackTrace)
            Error.captureStackTrace(err, validate)
          return err
        }
      },
      {},
    ],
    'cache-helpers.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.getCachedOr_ = getCachedOr_
        exports.getCached = getCached
        exports.removeCached = removeCached
        exports.setCache = void 0

        var R = _interopRequireWildcard(require('ramda'))

        var _aproba = _interopRequireDefault(require('aproba'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj
          } else {
            var newObj = {}
            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                  var desc =
                    Object.defineProperty &&
                    Object.getOwnPropertyDescriptor
                      ? Object.getOwnPropertyDescriptor(obj, key)
                      : {}
                  if (desc.get || desc.set) {
                    Object.defineProperty(newObj, key, desc)
                  } else {
                    newObj[key] = obj[key]
                  }
                }
              }
            }
            newObj.default = obj
            return newObj
          }
        }

        function getCachedOr_(thunk, key) {
          return R.when(R.isNil)(thunk)(
            JSON.parse(localStorage.getItem(key) || null),
          )
        }

        function getCached(key) {
          ;(0, _aproba.default)('S', arguments)

          try {
            return JSON.parse(localStorage.getItem(key) || null)
          } catch (e) {
            console.error(e)
            return null
          }
        }

        var setCache = R.curry(function setCache(key, jsonValue) {
          ;(0, _aproba.default)('S*', arguments)
          localStorage.setItem(key, JSON.stringify(jsonValue))
        })
        exports.setCache = setCache

        function removeCached(cacheKey) {
          localStorage.removeItem(cacheKey)
        }
      },
      {
        ramda: '../node_modules/ramda/es/index.js',
        aproba: '../node_modules/aproba/index.js',
      },
    ],
    '../../../.config/yarn/global/node_modules/parcel-bundler/src/builtins/bundle-url.js': [
      function(require, module, exports) {
        var bundleURL = null

        function getBundleURLCached() {
          if (!bundleURL) {
            bundleURL = getBundleURL()
          }

          return bundleURL
        }

        function getBundleURL() {
          // Attempt to find the URL of the current script and use that as the base URL
          try {
            throw new Error()
          } catch (err) {
            var matches = ('' + err.stack).match(
              /(https?|file|ftp):\/\/[^)\n]+/g,
            )

            if (matches) {
              return getBaseURL(matches[0])
            }
          }

          return '/'
        }

        function getBaseURL(url) {
          return (
            ('' + url).replace(
              /^((?:https?|file|ftp):\/\/.+)\/[^/]+$/,
              '$1',
            ) + '/'
          )
        }

        exports.getBundleURL = getBundleURLCached
        exports.getBaseURL = getBaseURL
      },
      {},
    ],
    '../../../.config/yarn/global/node_modules/parcel-bundler/src/builtins/css-loader.js': [
      function(require, module, exports) {
        var bundle = require('./bundle-url')

        function updateLink(link) {
          var newLink = link.cloneNode()

          newLink.onload = function() {
            link.remove()
          }

          newLink.href = link.href.split('?')[0] + '?' + Date.now()
          link.parentNode.insertBefore(newLink, link.nextSibling)
        }

        var cssTimeout = null

        function reloadCSS() {
          if (cssTimeout) {
            return
          }

          cssTimeout = setTimeout(function() {
            var links = document.querySelectorAll('link[rel="stylesheet"]')

            for (var i = 0; i < links.length; i++) {
              if (
                bundle.getBaseURL(links[i].href) === bundle.getBundleURL()
              ) {
                updateLink(links[i])
              }
            }

            cssTimeout = null
          }, 50)
        }

        module.exports = reloadCSS
      },
      {
        './bundle-url':
          '../../../.config/yarn/global/node_modules/parcel-bundler/src/builtins/bundle-url.js',
      },
    ],
    'main.scss': [
      function(require, module, exports) {
        var reloadCSS = require('_css_loader')

        module.hot.dispose(reloadCSS)
        module.hot.accept(reloadCSS)
      },
      {
        _css_loader:
          '../../../.config/yarn/global/node_modules/parcel-bundler/src/builtins/css-loader.js',
      },
    ],
    'Main.elm': [
      function(require, module, exports) {
        ;(function(scope) {
          'use strict'

          function F(arity, fun, wrapper) {
            wrapper.a = arity
            wrapper.f = fun
            return wrapper
          }

          function F2(fun) {
            return F(2, fun, function(a) {
              return function(b) {
                return fun(a, b)
              }
            })
          }
          function F3(fun) {
            return F(3, fun, function(a) {
              return function(b) {
                return function(c) {
                  return fun(a, b, c)
                }
              }
            })
          }
          function F4(fun) {
            return F(4, fun, function(a) {
              return function(b) {
                return function(c) {
                  return function(d) {
                    return fun(a, b, c, d)
                  }
                }
              }
            })
          }
          function F5(fun) {
            return F(5, fun, function(a) {
              return function(b) {
                return function(c) {
                  return function(d) {
                    return function(e) {
                      return fun(a, b, c, d, e)
                    }
                  }
                }
              }
            })
          }
          function F6(fun) {
            return F(6, fun, function(a) {
              return function(b) {
                return function(c) {
                  return function(d) {
                    return function(e) {
                      return function(f) {
                        return fun(a, b, c, d, e, f)
                      }
                    }
                  }
                }
              }
            })
          }
          function F7(fun) {
            return F(7, fun, function(a) {
              return function(b) {
                return function(c) {
                  return function(d) {
                    return function(e) {
                      return function(f) {
                        return function(g) {
                          return fun(a, b, c, d, e, f, g)
                        }
                      }
                    }
                  }
                }
              }
            })
          }
          function F8(fun) {
            return F(8, fun, function(a) {
              return function(b) {
                return function(c) {
                  return function(d) {
                    return function(e) {
                      return function(f) {
                        return function(g) {
                          return function(h) {
                            return fun(a, b, c, d, e, f, g, h)
                          }
                        }
                      }
                    }
                  }
                }
              }
            })
          }
          function F9(fun) {
            return F(9, fun, function(a) {
              return function(b) {
                return function(c) {
                  return function(d) {
                    return function(e) {
                      return function(f) {
                        return function(g) {
                          return function(h) {
                            return function(i) {
                              return fun(a, b, c, d, e, f, g, h, i)
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            })
          }

          function A2(fun, a, b) {
            return fun.a === 2 ? fun.f(a, b) : fun(a)(b)
          }
          function A3(fun, a, b, c) {
            return fun.a === 3 ? fun.f(a, b, c) : fun(a)(b)(c)
          }
          function A4(fun, a, b, c, d) {
            return fun.a === 4 ? fun.f(a, b, c, d) : fun(a)(b)(c)(d)
          }
          function A5(fun, a, b, c, d, e) {
            return fun.a === 5 ? fun.f(a, b, c, d, e) : fun(a)(b)(c)(d)(e)
          }
          function A6(fun, a, b, c, d, e, f) {
            return fun.a === 6
              ? fun.f(a, b, c, d, e, f)
              : fun(a)(b)(c)(d)(e)(f)
          }
          function A7(fun, a, b, c, d, e, f, g) {
            return fun.a === 7
              ? fun.f(a, b, c, d, e, f, g)
              : fun(a)(b)(c)(d)(e)(f)(g)
          }
          function A8(fun, a, b, c, d, e, f, g, h) {
            return fun.a === 8
              ? fun.f(a, b, c, d, e, f, g, h)
              : fun(a)(b)(c)(d)(e)(f)(g)(h)
          }
          function A9(fun, a, b, c, d, e, f, g, h, i) {
            return fun.a === 9
              ? fun.f(a, b, c, d, e, f, g, h, i)
              : fun(a)(b)(c)(d)(e)(f)(g)(h)(i)
          }

          console.warn(
            'Compiled in DEBUG mode. Follow the advice at https://elm-lang.org/0.19.0/optimize for better performance and smaller assets.',
          )

          var _JsArray_empty = []

          function _JsArray_singleton(value) {
            return [value]
          }

          function _JsArray_length(array) {
            return array.length
          }

          var _JsArray_initialize = F3(function(size, offset, func) {
            var result = new Array(size)

            for (var i = 0; i < size; i++) {
              result[i] = func(offset + i)
            }

            return result
          })

          var _JsArray_initializeFromList = F2(function(max, ls) {
            var result = new Array(max)

            for (var i = 0; i < max && ls.b; i++) {
              result[i] = ls.a
              ls = ls.b
            }

            result.length = i
            return _Utils_Tuple2(result, ls)
          })

          var _JsArray_unsafeGet = F2(function(index, array) {
            return array[index]
          })

          var _JsArray_unsafeSet = F3(function(index, value, array) {
            var length = array.length
            var result = new Array(length)

            for (var i = 0; i < length; i++) {
              result[i] = array[i]
            }

            result[index] = value
            return result
          })

          var _JsArray_push = F2(function(value, array) {
            var length = array.length
            var result = new Array(length + 1)

            for (var i = 0; i < length; i++) {
              result[i] = array[i]
            }

            result[length] = value
            return result
          })

          var _JsArray_foldl = F3(function(func, acc, array) {
            var length = array.length

            for (var i = 0; i < length; i++) {
              acc = A2(func, array[i], acc)
            }

            return acc
          })

          var _JsArray_foldr = F3(function(func, acc, array) {
            for (var i = array.length - 1; i >= 0; i--) {
              acc = A2(func, array[i], acc)
            }

            return acc
          })

          var _JsArray_map = F2(function(func, array) {
            var length = array.length
            var result = new Array(length)

            for (var i = 0; i < length; i++) {
              result[i] = func(array[i])
            }

            return result
          })

          var _JsArray_indexedMap = F3(function(func, offset, array) {
            var length = array.length
            var result = new Array(length)

            for (var i = 0; i < length; i++) {
              result[i] = A2(func, offset + i, array[i])
            }

            return result
          })

          var _JsArray_slice = F3(function(from, to, array) {
            return array.slice(from, to)
          })

          var _JsArray_appendN = F3(function(n, dest, source) {
            var destLen = dest.length
            var itemsToCopy = n - destLen

            if (itemsToCopy > source.length) {
              itemsToCopy = source.length
            }

            var size = destLen + itemsToCopy
            var result = new Array(size)

            for (var i = 0; i < destLen; i++) {
              result[i] = dest[i]
            }

            for (var i = 0; i < itemsToCopy; i++) {
              result[i + destLen] = source[i]
            }

            return result
          })

          var _List_Nil_UNUSED = { $: 0 }
          var _List_Nil = { $: '[]' }

          function _List_Cons_UNUSED(hd, tl) {
            return { $: 1, a: hd, b: tl }
          }
          function _List_Cons(hd, tl) {
            return { $: '::', a: hd, b: tl }
          }

          var _List_cons = F2(_List_Cons)

          function _List_fromArray(arr) {
            var out = _List_Nil
            for (var i = arr.length; i--; ) {
              out = _List_Cons(arr[i], out)
            }
            return out
          }

          function _List_toArray(xs) {
            for (
              var out = [];
              xs.b;
              xs = xs.b // WHILE_CONS
            ) {
              out.push(xs.a)
            }
            return out
          }

          var _List_map2 = F3(function(f, xs, ys) {
            for (
              var arr = [];
              xs.b && ys.b;
              xs = xs.b, ys = ys.b // WHILE_CONSES
            ) {
              arr.push(A2(f, xs.a, ys.a))
            }
            return _List_fromArray(arr)
          })

          var _List_map3 = F4(function(f, xs, ys, zs) {
            for (
              var arr = [];
              xs.b && ys.b && zs.b;
              xs = xs.b, ys = ys.b, zs = zs.b // WHILE_CONSES
            ) {
              arr.push(A3(f, xs.a, ys.a, zs.a))
            }
            return _List_fromArray(arr)
          })

          var _List_map4 = F5(function(f, ws, xs, ys, zs) {
            for (
              var arr = [];
              ws.b && xs.b && ys.b && zs.b;
              ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b // WHILE_CONSES
            ) {
              arr.push(A4(f, ws.a, xs.a, ys.a, zs.a))
            }
            return _List_fromArray(arr)
          })

          var _List_map5 = F6(function(f, vs, ws, xs, ys, zs) {
            for (
              var arr = [];
              vs.b && ws.b && xs.b && ys.b && zs.b;
              vs = vs.b, ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b // WHILE_CONSES
            ) {
              arr.push(A5(f, vs.a, ws.a, xs.a, ys.a, zs.a))
            }
            return _List_fromArray(arr)
          })

          var _List_sortBy = F2(function(f, xs) {
            return _List_fromArray(
              _List_toArray(xs).sort(function(a, b) {
                return _Utils_cmp(f(a), f(b))
              }),
            )
          })

          var _List_sortWith = F2(function(f, xs) {
            return _List_fromArray(
              _List_toArray(xs).sort(function(a, b) {
                var ord = A2(f, a, b)
                return ord === elm$core$Basics$EQ
                  ? 0
                  : ord === elm$core$Basics$LT
                  ? -1
                  : 1
              }),
            )
          })

          // LOG

          var _Debug_log_UNUSED = F2(function(tag, value) {
            return value
          })

          var _Debug_log = F2(function(tag, value) {
            console.log(tag + ': ' + _Debug_toString(value))
            return value
          })

          // TODOS

          function _Debug_todo(moduleName, region) {
            return function(message) {
              _Debug_crash(8, moduleName, region, message)
            }
          }

          function _Debug_todoCase(moduleName, region, value) {
            return function(message) {
              _Debug_crash(9, moduleName, region, value, message)
            }
          }

          // TO STRING

          function _Debug_toString_UNUSED(value) {
            return '<internals>'
          }

          function _Debug_toString(value) {
            return _Debug_toAnsiString(false, value)
          }

          function _Debug_toAnsiString(ansi, value) {
            if (typeof value === 'function') {
              return _Debug_internalColor(ansi, '<function>')
            }

            if (typeof value === 'boolean') {
              return _Debug_ctorColor(ansi, value ? 'True' : 'False')
            }

            if (typeof value === 'number') {
              return _Debug_numberColor(ansi, value + '')
            }

            if (value instanceof String) {
              return _Debug_charColor(
                ansi,
                "'" + _Debug_addSlashes(value, true) + "'",
              )
            }

            if (typeof value === 'string') {
              return _Debug_stringColor(
                ansi,
                '"' + _Debug_addSlashes(value, false) + '"',
              )
            }

            if (typeof value === 'object' && '$' in value) {
              var tag = value.$

              if (typeof tag === 'number') {
                return _Debug_internalColor(ansi, '<internals>')
              }

              if (tag[0] === '#') {
                var output = []
                for (var k in value) {
                  if (k === '$') continue
                  output.push(_Debug_toAnsiString(ansi, value[k]))
                }
                return '(' + output.join(',') + ')'
              }

              if (tag === 'Set_elm_builtin') {
                return (
                  _Debug_ctorColor(ansi, 'Set') +
                  _Debug_fadeColor(ansi, '.fromList') +
                  ' ' +
                  _Debug_toAnsiString(ansi, elm$core$Set$toList(value))
                )
              }

              if (
                tag === 'RBNode_elm_builtin' ||
                tag === 'RBEmpty_elm_builtin'
              ) {
                return (
                  _Debug_ctorColor(ansi, 'Dict') +
                  _Debug_fadeColor(ansi, '.fromList') +
                  ' ' +
                  _Debug_toAnsiString(ansi, elm$core$Dict$toList(value))
                )
              }

              if (tag === 'Array_elm_builtin') {
                return (
                  _Debug_ctorColor(ansi, 'Array') +
                  _Debug_fadeColor(ansi, '.fromList') +
                  ' ' +
                  _Debug_toAnsiString(ansi, elm$core$Array$toList(value))
                )
              }

              if (tag === '::' || tag === '[]') {
                var output = '['

                value.b &&
                  ((output += _Debug_toAnsiString(ansi, value.a)),
                  (value = value.b))

                for (
                  ;
                  value.b;
                  value = value.b // WHILE_CONS
                ) {
                  output += ',' + _Debug_toAnsiString(ansi, value.a)
                }
                return output + ']'
              }

              var output = ''
              for (var i in value) {
                if (i === '$') continue
                var str = _Debug_toAnsiString(ansi, value[i])
                var c0 = str[0]
                var parenless =
                  c0 === '{' ||
                  c0 === '(' ||
                  c0 === '[' ||
                  c0 === '<' ||
                  c0 === '"' ||
                  str.indexOf(' ') < 0
                output += ' ' + (parenless ? str : '(' + str + ')')
              }
              return _Debug_ctorColor(ansi, tag) + output
            }

            if (
              typeof DataView === 'function' &&
              value instanceof DataView
            ) {
              return _Debug_stringColor(
                ansi,
                '<' + value.byteLength + ' bytes>',
              )
            }

            if (typeof File === 'function' && value instanceof File) {
              return _Debug_internalColor(ansi, '<' + value.name + '>')
            }

            if (typeof value === 'object') {
              var output = []
              for (var key in value) {
                var field = key[0] === '_' ? key.slice(1) : key
                output.push(
                  _Debug_fadeColor(ansi, field) +
                    ' = ' +
                    _Debug_toAnsiString(ansi, value[key]),
                )
              }
              if (output.length === 0) {
                return '{}'
              }
              return '{ ' + output.join(', ') + ' }'
            }

            return _Debug_internalColor(ansi, '<internals>')
          }

          function _Debug_addSlashes(str, isChar) {
            var s = str
              .replace(/\\/g, '\\\\')
              .replace(/\n/g, '\\n')
              .replace(/\t/g, '\\t')
              .replace(/\r/g, '\\r')
              .replace(/\v/g, '\\v')
              .replace(/\0/g, '\\0')

            if (isChar) {
              return s.replace(/\'/g, "\\'")
            } else {
              return s.replace(/\"/g, '\\"')
            }
          }

          function _Debug_ctorColor(ansi, string) {
            return ansi ? '\x1b[96m' + string + '\x1b[0m' : string
          }

          function _Debug_numberColor(ansi, string) {
            return ansi ? '\x1b[95m' + string + '\x1b[0m' : string
          }

          function _Debug_stringColor(ansi, string) {
            return ansi ? '\x1b[93m' + string + '\x1b[0m' : string
          }

          function _Debug_charColor(ansi, string) {
            return ansi ? '\x1b[92m' + string + '\x1b[0m' : string
          }

          function _Debug_fadeColor(ansi, string) {
            return ansi ? '\x1b[37m' + string + '\x1b[0m' : string
          }

          function _Debug_internalColor(ansi, string) {
            return ansi ? '\x1b[94m' + string + '\x1b[0m' : string
          }

          function _Debug_toHexDigit(n) {
            return String.fromCharCode(n < 10 ? 48 + n : 55 + n)
          }

          // CRASH

          function _Debug_crash_UNUSED(identifier) {
            throw new Error(
              'https://github.com/elm/core/blob/1.0.0/hints/' +
                identifier +
                '.md',
            )
          }

          function _Debug_crash(identifier, fact1, fact2, fact3, fact4) {
            switch (identifier) {
              case 0:
                throw new Error(
                  'What node should I take over? In JavaScript I need something like:\n\n    Elm.Main.init({\n        node: document.getElementById("elm-node")\n    })\n\nYou need to do this with any Browser.sandbox or Browser.element program.',
                )

              case 1:
                throw new Error(
                  'Browser.application programs cannot handle URLs like this:\n\n    ' +
                    document.location.href +
                    '\n\nWhat is the root? The root of your file system? Try looking at this program with `elm reactor` or some other server.',
                )

              case 2:
                var jsonErrorString = fact1
                throw new Error(
                  'Problem with the flags given to your Elm program on initialization.\n\n' +
                    jsonErrorString,
                )

              case 3:
                var portName = fact1
                throw new Error(
                  'There can only be one port named `' +
                    portName +
                    '`, but your program has multiple.',
                )

              case 4:
                var portName = fact1
                var problem = fact2
                throw new Error(
                  'Trying to send an unexpected type of value through port `' +
                    portName +
                    '`:\n' +
                    problem,
                )

              case 5:
                throw new Error(
                  'Trying to use `(==)` on functions.\nThere is no way to know if functions are "the same" in the Elm sense.\nRead more about this at https://package.elm-lang.org/packages/elm/core/latest/Basics#== which describes why it is this way and what the better version will look like.',
                )

              case 6:
                var moduleName = fact1
                throw new Error(
                  'Your page is loading multiple Elm scripts with a module named ' +
                    moduleName +
                    '. Maybe a duplicate script is getting loaded accidentally? If not, rename one of them so I know which is which!',
                )

              case 8:
                var moduleName = fact1
                var region = fact2
                var message = fact3
                throw new Error(
                  'TODO in module `' +
                    moduleName +
                    '` ' +
                    _Debug_regionToString(region) +
                    '\n\n' +
                    message,
                )

              case 9:
                var moduleName = fact1
                var region = fact2
                var value = fact3
                var message = fact4
                throw new Error(
                  'TODO in module `' +
                    moduleName +
                    '` from the `case` expression ' +
                    _Debug_regionToString(region) +
                    '\n\nIt received the following value:\n\n    ' +
                    _Debug_toString(value).replace('\n', '\n    ') +
                    '\n\nBut the branch that handles it says:\n\n    ' +
                    message.replace('\n', '\n    '),
                )

              case 10:
                throw new Error(
                  'Bug in https://github.com/elm/virtual-dom/issues',
                )

              case 11:
                throw new Error(
                  'Cannot perform mod 0. Division by zero error.',
                )
            }
          }

          function _Debug_regionToString(region) {
            if (region.start.line === region.end.line) {
              return 'on line ' + region.start.line
            }
            return (
              'on lines ' +
              region.start.line +
              ' through ' +
              region.end.line
            )
          }

          // EQUALITY

          function _Utils_eq(x, y) {
            for (
              var pair,
                stack = [],
                isEqual = _Utils_eqHelp(x, y, 0, stack);
              isEqual && (pair = stack.pop());
              isEqual = _Utils_eqHelp(pair.a, pair.b, 0, stack)
            ) {}

            return isEqual
          }

          function _Utils_eqHelp(x, y, depth, stack) {
            if (depth > 100) {
              stack.push(_Utils_Tuple2(x, y))
              return true
            }

            if (x === y) {
              return true
            }

            if (typeof x !== 'object' || x === null || y === null) {
              typeof x === 'function' && _Debug_crash(5)
              return false
            }

            /**/
            if (x.$ === 'Set_elm_builtin') {
              x = elm$core$Set$toList(x)
              y = elm$core$Set$toList(y)
            }
            if (
              x.$ === 'RBNode_elm_builtin' ||
              x.$ === 'RBEmpty_elm_builtin'
            ) {
              x = elm$core$Dict$toList(x)
              y = elm$core$Dict$toList(y)
            }
            //*/

            /**_UNUSED/
	if (x.$ < 0)
	{
		x = elm$core$Dict$toList(x);
		y = elm$core$Dict$toList(y);
	}
	//*/

            for (var key in x) {
              if (!_Utils_eqHelp(x[key], y[key], depth + 1, stack)) {
                return false
              }
            }
            return true
          }

          var _Utils_equal = F2(_Utils_eq)
          var _Utils_notEqual = F2(function(a, b) {
            return !_Utils_eq(a, b)
          })

          // COMPARISONS

          // Code in Generate/JavaScript.hs, Basics.js, and List.js depends on
          // the particular integer values assigned to LT, EQ, and GT.

          function _Utils_cmp(x, y, ord) {
            if (typeof x !== 'object') {
              return x === y ? /*EQ*/ 0 : x < y ? /*LT*/ -1 : /*GT*/ 1
            }

            /**/
            if (x instanceof String) {
              var a = x.valueOf()
              var b = y.valueOf()
              return a === b ? 0 : a < b ? -1 : 1
            }
            //*/

            /**_UNUSED/
	if (typeof x.$ === 'undefined')
	//*/
            /**/
            if (x.$[0] === '#') {
              //*/
              return (ord = _Utils_cmp(x.a, y.a))
                ? ord
                : (ord = _Utils_cmp(x.b, y.b))
                ? ord
                : _Utils_cmp(x.c, y.c)
            }

            // traverse conses until end of a list or a mismatch
            for (
              ;
              x.b && y.b && !(ord = _Utils_cmp(x.a, y.a));
              x = x.b, y = y.b
            ) {} // WHILE_CONSES
            return ord || (x.b ? /*GT*/ 1 : y.b ? /*LT*/ -1 : /*EQ*/ 0)
          }

          var _Utils_lt = F2(function(a, b) {
            return _Utils_cmp(a, b) < 0
          })
          var _Utils_le = F2(function(a, b) {
            return _Utils_cmp(a, b) < 1
          })
          var _Utils_gt = F2(function(a, b) {
            return _Utils_cmp(a, b) > 0
          })
          var _Utils_ge = F2(function(a, b) {
            return _Utils_cmp(a, b) >= 0
          })

          var _Utils_compare = F2(function(x, y) {
            var n = _Utils_cmp(x, y)
            return n < 0
              ? elm$core$Basics$LT
              : n
              ? elm$core$Basics$GT
              : elm$core$Basics$EQ
          })

          // COMMON VALUES

          var _Utils_Tuple0_UNUSED = 0
          var _Utils_Tuple0 = { $: '#0' }

          function _Utils_Tuple2_UNUSED(a, b) {
            return { a: a, b: b }
          }
          function _Utils_Tuple2(a, b) {
            return { $: '#2', a: a, b: b }
          }

          function _Utils_Tuple3_UNUSED(a, b, c) {
            return { a: a, b: b, c: c }
          }
          function _Utils_Tuple3(a, b, c) {
            return { $: '#3', a: a, b: b, c: c }
          }

          function _Utils_chr_UNUSED(c) {
            return c
          }
          function _Utils_chr(c) {
            return new String(c)
          }

          // RECORDS

          function _Utils_update(oldRecord, updatedFields) {
            var newRecord = {}

            for (var key in oldRecord) {
              newRecord[key] = oldRecord[key]
            }

            for (var key in updatedFields) {
              newRecord[key] = updatedFields[key]
            }

            return newRecord
          }

          // APPEND

          var _Utils_append = F2(_Utils_ap)

          function _Utils_ap(xs, ys) {
            // append Strings
            if (typeof xs === 'string') {
              return xs + ys
            }

            // append Lists
            if (!xs.b) {
              return ys
            }
            var root = _List_Cons(xs.a, ys)
            xs = xs.b
            for (
              var curr = root;
              xs.b;
              xs = xs.b // WHILE_CONS
            ) {
              curr = curr.b = _List_Cons(xs.a, ys)
            }
            return root
          }

          // MATH

          var _Basics_add = F2(function(a, b) {
            return a + b
          })
          var _Basics_sub = F2(function(a, b) {
            return a - b
          })
          var _Basics_mul = F2(function(a, b) {
            return a * b
          })
          var _Basics_fdiv = F2(function(a, b) {
            return a / b
          })
          var _Basics_idiv = F2(function(a, b) {
            return (a / b) | 0
          })
          var _Basics_pow = F2(Math.pow)

          var _Basics_remainderBy = F2(function(b, a) {
            return a % b
          })

          // https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/divmodnote-letter.pdf
          var _Basics_modBy = F2(function(modulus, x) {
            var answer = x % modulus
            return modulus === 0
              ? _Debug_crash(11)
              : (answer > 0 && modulus < 0) || (answer < 0 && modulus > 0)
              ? answer + modulus
              : answer
          })

          // TRIGONOMETRY

          var _Basics_pi = Math.PI
          var _Basics_e = Math.E
          var _Basics_cos = Math.cos
          var _Basics_sin = Math.sin
          var _Basics_tan = Math.tan
          var _Basics_acos = Math.acos
          var _Basics_asin = Math.asin
          var _Basics_atan = Math.atan
          var _Basics_atan2 = F2(Math.atan2)

          // MORE MATH

          function _Basics_toFloat(x) {
            return x
          }
          function _Basics_truncate(n) {
            return n | 0
          }
          function _Basics_isInfinite(n) {
            return n === Infinity || n === -Infinity
          }

          var _Basics_ceiling = Math.ceil
          var _Basics_floor = Math.floor
          var _Basics_round = Math.round
          var _Basics_sqrt = Math.sqrt
          var _Basics_log = Math.log
          var _Basics_isNaN = isNaN

          // BOOLEANS

          function _Basics_not(bool) {
            return !bool
          }
          var _Basics_and = F2(function(a, b) {
            return a && b
          })
          var _Basics_or = F2(function(a, b) {
            return a || b
          })
          var _Basics_xor = F2(function(a, b) {
            return a !== b
          })

          // TASKS

          function _Scheduler_succeed(value) {
            return {
              $: 0,
              a: value,
            }
          }

          function _Scheduler_fail(error) {
            return {
              $: 1,
              a: error,
            }
          }

          function _Scheduler_binding(callback) {
            return {
              $: 2,
              b: callback,
              c: null,
            }
          }

          var _Scheduler_andThen = F2(function(callback, task) {
            return {
              $: 3,
              b: callback,
              d: task,
            }
          })

          var _Scheduler_onError = F2(function(callback, task) {
            return {
              $: 4,
              b: callback,
              d: task,
            }
          })

          function _Scheduler_receive(callback) {
            return {
              $: 5,
              b: callback,
            }
          }

          // PROCESSES

          var _Scheduler_guid = 0

          function _Scheduler_rawSpawn(task) {
            var proc = {
              $: 0,
              e: _Scheduler_guid++,
              f: task,
              g: null,
              h: [],
            }

            _Scheduler_enqueue(proc)

            return proc
          }

          function _Scheduler_spawn(task) {
            return _Scheduler_binding(function(callback) {
              callback(_Scheduler_succeed(_Scheduler_rawSpawn(task)))
            })
          }

          function _Scheduler_rawSend(proc, msg) {
            proc.h.push(msg)
            _Scheduler_enqueue(proc)
          }

          var _Scheduler_send = F2(function(proc, msg) {
            return _Scheduler_binding(function(callback) {
              _Scheduler_rawSend(proc, msg)
              callback(_Scheduler_succeed(_Utils_Tuple0))
            })
          })

          function _Scheduler_kill(proc) {
            return _Scheduler_binding(function(callback) {
              var task = proc.f
              if (task.$ === 2 && task.c) {
                task.c()
              }

              proc.f = null

              callback(_Scheduler_succeed(_Utils_Tuple0))
            })
          }

          /* STEP PROCESSES

type alias Process =
  { $ : tag
  , id : unique_id
  , root : Task
  , stack : null | { $: SUCCEED | FAIL, a: callback, b: stack }
  , mailbox : [msg]
  }

*/

          var _Scheduler_working = false
          var _Scheduler_queue = []

          function _Scheduler_enqueue(proc) {
            _Scheduler_queue.push(proc)
            if (_Scheduler_working) {
              return
            }
            _Scheduler_working = true
            while ((proc = _Scheduler_queue.shift())) {
              _Scheduler_step(proc)
            }
            _Scheduler_working = false
          }

          function _Scheduler_step(proc) {
            while (proc.f) {
              var rootTag = proc.f.$
              if (rootTag === 0 || rootTag === 1) {
                while (proc.g && proc.g.$ !== rootTag) {
                  proc.g = proc.g.i
                }
                if (!proc.g) {
                  return
                }
                proc.f = proc.g.b(proc.f.a)
                proc.g = proc.g.i
              } else if (rootTag === 2) {
                proc.f.c = proc.f.b(function(newRoot) {
                  proc.f = newRoot
                  _Scheduler_enqueue(proc)
                })
                return
              } else if (rootTag === 5) {
                if (proc.h.length === 0) {
                  return
                }
                proc.f = proc.f.b(proc.h.shift())
              } // if (rootTag === 3 || rootTag === 4)
              else {
                proc.g = {
                  $: rootTag === 3 ? 0 : 1,
                  b: proc.f.b,
                  i: proc.g,
                }
                proc.f = proc.f.d
              }
            }
          }

          function _Char_toCode(char) {
            var code = char.charCodeAt(0)
            if (0xd800 <= code && code <= 0xdbff) {
              return (
                (code - 0xd800) * 0x400 +
                char.charCodeAt(1) -
                0xdc00 +
                0x10000
              )
            }
            return code
          }

          function _Char_fromCode(code) {
            return _Utils_chr(
              code < 0 || 0x10ffff < code
                ? '\uFFFD'
                : code <= 0xffff
                ? String.fromCharCode(code)
                : ((code -= 0x10000),
                  String.fromCharCode(
                    Math.floor(code / 0x400) + 0xd800,
                    (code % 0x400) + 0xdc00,
                  )),
            )
          }

          function _Char_toUpper(char) {
            return _Utils_chr(char.toUpperCase())
          }

          function _Char_toLower(char) {
            return _Utils_chr(char.toLowerCase())
          }

          function _Char_toLocaleUpper(char) {
            return _Utils_chr(char.toLocaleUpperCase())
          }

          function _Char_toLocaleLower(char) {
            return _Utils_chr(char.toLocaleLowerCase())
          }

          var _String_cons = F2(function(chr, str) {
            return chr + str
          })

          function _String_uncons(string) {
            var word = string.charCodeAt(0)
            return word
              ? elm$core$Maybe$Just(
                  0xd800 <= word && word <= 0xdbff
                    ? _Utils_Tuple2(
                        _Utils_chr(string[0] + string[1]),
                        string.slice(2),
                      )
                    : _Utils_Tuple2(
                        _Utils_chr(string[0]),
                        string.slice(1),
                      ),
                )
              : elm$core$Maybe$Nothing
          }

          var _String_append = F2(function(a, b) {
            return a + b
          })

          function _String_length(str) {
            return str.length
          }

          var _String_map = F2(function(func, string) {
            var len = string.length
            var array = new Array(len)
            var i = 0
            while (i < len) {
              var word = string.charCodeAt(i)
              if (0xd800 <= word && word <= 0xdbff) {
                array[i] = func(_Utils_chr(string[i] + string[i + 1]))
                i += 2
                continue
              }
              array[i] = func(_Utils_chr(string[i]))
              i++
            }
            return array.join('')
          })

          var _String_filter = F2(function(isGood, str) {
            var arr = []
            var len = str.length
            var i = 0
            while (i < len) {
              var char = str[i]
              var word = str.charCodeAt(i)
              i++
              if (0xd800 <= word && word <= 0xdbff) {
                char += str[i]
                i++
              }

              if (isGood(_Utils_chr(char))) {
                arr.push(char)
              }
            }
            return arr.join('')
          })

          function _String_reverse(str) {
            var len = str.length
            var arr = new Array(len)
            var i = 0
            while (i < len) {
              var word = str.charCodeAt(i)
              if (0xd800 <= word && word <= 0xdbff) {
                arr[len - i] = str[i + 1]
                i++
                arr[len - i] = str[i - 1]
                i++
              } else {
                arr[len - i] = str[i]
                i++
              }
            }
            return arr.join('')
          }

          var _String_foldl = F3(function(func, state, string) {
            var len = string.length
            var i = 0
            while (i < len) {
              var char = string[i]
              var word = string.charCodeAt(i)
              i++
              if (0xd800 <= word && word <= 0xdbff) {
                char += string[i]
                i++
              }
              state = A2(func, _Utils_chr(char), state)
            }
            return state
          })

          var _String_foldr = F3(function(func, state, string) {
            var i = string.length
            while (i--) {
              var char = string[i]
              var word = string.charCodeAt(i)
              if (0xdc00 <= word && word <= 0xdfff) {
                i--
                char = string[i] + char
              }
              state = A2(func, _Utils_chr(char), state)
            }
            return state
          })

          var _String_split = F2(function(sep, str) {
            return str.split(sep)
          })

          var _String_join = F2(function(sep, strs) {
            return strs.join(sep)
          })

          var _String_slice = F3(function(start, end, str) {
            return str.slice(start, end)
          })

          function _String_trim(str) {
            return str.trim()
          }

          function _String_trimLeft(str) {
            return str.replace(/^\s+/, '')
          }

          function _String_trimRight(str) {
            return str.replace(/\s+$/, '')
          }

          function _String_words(str) {
            return _List_fromArray(str.trim().split(/\s+/g))
          }

          function _String_lines(str) {
            return _List_fromArray(str.split(/\r\n|\r|\n/g))
          }

          function _String_toUpper(str) {
            return str.toUpperCase()
          }

          function _String_toLower(str) {
            return str.toLowerCase()
          }

          var _String_any = F2(function(isGood, string) {
            var i = string.length
            while (i--) {
              var char = string[i]
              var word = string.charCodeAt(i)
              if (0xdc00 <= word && word <= 0xdfff) {
                i--
                char = string[i] + char
              }
              if (isGood(_Utils_chr(char))) {
                return true
              }
            }
            return false
          })

          var _String_all = F2(function(isGood, string) {
            var i = string.length
            while (i--) {
              var char = string[i]
              var word = string.charCodeAt(i)
              if (0xdc00 <= word && word <= 0xdfff) {
                i--
                char = string[i] + char
              }
              if (!isGood(_Utils_chr(char))) {
                return false
              }
            }
            return true
          })

          var _String_contains = F2(function(sub, str) {
            return str.indexOf(sub) > -1
          })

          var _String_startsWith = F2(function(sub, str) {
            return str.indexOf(sub) === 0
          })

          var _String_endsWith = F2(function(sub, str) {
            return (
              str.length >= sub.length &&
              str.lastIndexOf(sub) === str.length - sub.length
            )
          })

          var _String_indexes = F2(function(sub, str) {
            var subLen = sub.length

            if (subLen < 1) {
              return _List_Nil
            }

            var i = 0
            var is = []

            while ((i = str.indexOf(sub, i)) > -1) {
              is.push(i)
              i = i + subLen
            }

            return _List_fromArray(is)
          })

          // TO STRING

          function _String_fromNumber(number) {
            return number + ''
          }

          // INT CONVERSIONS

          function _String_toInt(str) {
            var total = 0
            var code0 = str.charCodeAt(0)
            var start =
              code0 == 0x2b /* + */ || code0 == 0x2d /* - */ ? 1 : 0

            for (var i = start; i < str.length; ++i) {
              var code = str.charCodeAt(i)
              if (code < 0x30 || 0x39 < code) {
                return elm$core$Maybe$Nothing
              }
              total = 10 * total + code - 0x30
            }

            return i == start
              ? elm$core$Maybe$Nothing
              : elm$core$Maybe$Just(code0 == 0x2d ? -total : total)
          }

          // FLOAT CONVERSIONS

          function _String_toFloat(s) {
            // check if it is a hex, octal, or binary number
            if (s.length === 0 || /[\sxbo]/.test(s)) {
              return elm$core$Maybe$Nothing
            }
            var n = +s
            // faster isNaN check
            return n === n
              ? elm$core$Maybe$Just(n)
              : elm$core$Maybe$Nothing
          }

          function _String_fromList(chars) {
            return _List_toArray(chars).join('')
          }

          /**/
          function _Json_errorToString(error) {
            return elm$json$Json$Decode$errorToString(error)
          }
          //*/

          // CORE DECODERS

          function _Json_succeed(msg) {
            return {
              $: 0,
              a: msg,
            }
          }

          function _Json_fail(msg) {
            return {
              $: 1,
              a: msg,
            }
          }

          function _Json_decodePrim(decoder) {
            return { $: 2, b: decoder }
          }

          var _Json_decodeInt = _Json_decodePrim(function(value) {
            return typeof value !== 'number'
              ? _Json_expecting('an INT', value)
              : -2147483647 < value &&
                value < 2147483647 &&
                (value | 0) === value
              ? elm$core$Result$Ok(value)
              : isFinite(value) && !(value % 1)
              ? elm$core$Result$Ok(value)
              : _Json_expecting('an INT', value)
          })

          var _Json_decodeBool = _Json_decodePrim(function(value) {
            return typeof value === 'boolean'
              ? elm$core$Result$Ok(value)
              : _Json_expecting('a BOOL', value)
          })

          var _Json_decodeFloat = _Json_decodePrim(function(value) {
            return typeof value === 'number'
              ? elm$core$Result$Ok(value)
              : _Json_expecting('a FLOAT', value)
          })

          var _Json_decodeValue = _Json_decodePrim(function(value) {
            return elm$core$Result$Ok(_Json_wrap(value))
          })

          var _Json_decodeString = _Json_decodePrim(function(value) {
            return typeof value === 'string'
              ? elm$core$Result$Ok(value)
              : value instanceof String
              ? elm$core$Result$Ok(value + '')
              : _Json_expecting('a STRING', value)
          })

          function _Json_decodeList(decoder) {
            return { $: 3, b: decoder }
          }
          function _Json_decodeArray(decoder) {
            return { $: 4, b: decoder }
          }

          function _Json_decodeNull(value) {
            return { $: 5, c: value }
          }

          var _Json_decodeField = F2(function(field, decoder) {
            return {
              $: 6,
              d: field,
              b: decoder,
            }
          })

          var _Json_decodeIndex = F2(function(index, decoder) {
            return {
              $: 7,
              e: index,
              b: decoder,
            }
          })

          function _Json_decodeKeyValuePairs(decoder) {
            return {
              $: 8,
              b: decoder,
            }
          }

          function _Json_mapMany(f, decoders) {
            return {
              $: 9,
              f: f,
              g: decoders,
            }
          }

          var _Json_andThen = F2(function(callback, decoder) {
            return {
              $: 10,
              b: decoder,
              h: callback,
            }
          })

          function _Json_oneOf(decoders) {
            return {
              $: 11,
              g: decoders,
            }
          }

          // DECODING OBJECTS

          var _Json_map1 = F2(function(f, d1) {
            return _Json_mapMany(f, [d1])
          })

          var _Json_map2 = F3(function(f, d1, d2) {
            return _Json_mapMany(f, [d1, d2])
          })

          var _Json_map3 = F4(function(f, d1, d2, d3) {
            return _Json_mapMany(f, [d1, d2, d3])
          })

          var _Json_map4 = F5(function(f, d1, d2, d3, d4) {
            return _Json_mapMany(f, [d1, d2, d3, d4])
          })

          var _Json_map5 = F6(function(f, d1, d2, d3, d4, d5) {
            return _Json_mapMany(f, [d1, d2, d3, d4, d5])
          })

          var _Json_map6 = F7(function(f, d1, d2, d3, d4, d5, d6) {
            return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6])
          })

          var _Json_map7 = F8(function(f, d1, d2, d3, d4, d5, d6, d7) {
            return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6, d7])
          })

          var _Json_map8 = F9(function(f, d1, d2, d3, d4, d5, d6, d7, d8) {
            return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6, d7, d8])
          })

          // DECODE

          var _Json_runOnString = F2(function(decoder, string) {
            try {
              var value = JSON.parse(string)
              return _Json_runHelp(decoder, value)
            } catch (e) {
              return elm$core$Result$Err(
                A2(
                  elm$json$Json$Decode$Failure,
                  'This is not valid JSON! ' + e.message,
                  _Json_wrap(string),
                ),
              )
            }
          })

          var _Json_run = F2(function(decoder, value) {
            return _Json_runHelp(decoder, _Json_unwrap(value))
          })

          function _Json_runHelp(decoder, value) {
            switch (decoder.$) {
              case 2:
                return decoder.b(value)

              case 5:
                return value === null
                  ? elm$core$Result$Ok(decoder.c)
                  : _Json_expecting('null', value)

              case 3:
                if (!_Json_isArray(value)) {
                  return _Json_expecting('a LIST', value)
                }
                return _Json_runArrayDecoder(
                  decoder.b,
                  value,
                  _List_fromArray,
                )

              case 4:
                if (!_Json_isArray(value)) {
                  return _Json_expecting('an ARRAY', value)
                }
                return _Json_runArrayDecoder(
                  decoder.b,
                  value,
                  _Json_toElmArray,
                )

              case 6:
                var field = decoder.d
                if (
                  typeof value !== 'object' ||
                  value === null ||
                  !(field in value)
                ) {
                  return _Json_expecting(
                    'an OBJECT with a field named `' + field + '`',
                    value,
                  )
                }
                var result = _Json_runHelp(decoder.b, value[field])
                return elm$core$Result$isOk(result)
                  ? result
                  : elm$core$Result$Err(
                      A2(elm$json$Json$Decode$Field, field, result.a),
                    )

              case 7:
                var index = decoder.e
                if (!_Json_isArray(value)) {
                  return _Json_expecting('an ARRAY', value)
                }
                if (index >= value.length) {
                  return _Json_expecting(
                    'a LONGER array. Need index ' +
                      index +
                      ' but only see ' +
                      value.length +
                      ' entries',
                    value,
                  )
                }
                var result = _Json_runHelp(decoder.b, value[index])
                return elm$core$Result$isOk(result)
                  ? result
                  : elm$core$Result$Err(
                      A2(elm$json$Json$Decode$Index, index, result.a),
                    )

              case 8:
                if (
                  typeof value !== 'object' ||
                  value === null ||
                  _Json_isArray(value)
                ) {
                  return _Json_expecting('an OBJECT', value)
                }

                var keyValuePairs = _List_Nil
                // TODO test perf of Object.keys and switch when support is good enough
                for (var key in value) {
                  if (value.hasOwnProperty(key)) {
                    var result = _Json_runHelp(decoder.b, value[key])
                    if (!elm$core$Result$isOk(result)) {
                      return elm$core$Result$Err(
                        A2(elm$json$Json$Decode$Field, key, result.a),
                      )
                    }
                    keyValuePairs = _List_Cons(
                      _Utils_Tuple2(key, result.a),
                      keyValuePairs,
                    )
                  }
                }
                return elm$core$Result$Ok(
                  elm$core$List$reverse(keyValuePairs),
                )

              case 9:
                var answer = decoder.f
                var decoders = decoder.g
                for (var i = 0; i < decoders.length; i++) {
                  var result = _Json_runHelp(decoders[i], value)
                  if (!elm$core$Result$isOk(result)) {
                    return result
                  }
                  answer = answer(result.a)
                }
                return elm$core$Result$Ok(answer)

              case 10:
                var result = _Json_runHelp(decoder.b, value)
                return !elm$core$Result$isOk(result)
                  ? result
                  : _Json_runHelp(decoder.h(result.a), value)

              case 11:
                var errors = _List_Nil
                for (
                  var temp = decoder.g;
                  temp.b;
                  temp = temp.b // WHILE_CONS
                ) {
                  var result = _Json_runHelp(temp.a, value)
                  if (elm$core$Result$isOk(result)) {
                    return result
                  }
                  errors = _List_Cons(result.a, errors)
                }
                return elm$core$Result$Err(
                  elm$json$Json$Decode$OneOf(
                    elm$core$List$reverse(errors),
                  ),
                )

              case 1:
                return elm$core$Result$Err(
                  A2(
                    elm$json$Json$Decode$Failure,
                    decoder.a,
                    _Json_wrap(value),
                  ),
                )

              case 0:
                return elm$core$Result$Ok(decoder.a)
            }
          }

          function _Json_runArrayDecoder(decoder, value, toElmValue) {
            var len = value.length
            var array = new Array(len)
            for (var i = 0; i < len; i++) {
              var result = _Json_runHelp(decoder, value[i])
              if (!elm$core$Result$isOk(result)) {
                return elm$core$Result$Err(
                  A2(elm$json$Json$Decode$Index, i, result.a),
                )
              }
              array[i] = result.a
            }
            return elm$core$Result$Ok(toElmValue(array))
          }

          function _Json_isArray(value) {
            return (
              Array.isArray(value) ||
              (typeof FileList !== 'undefined' &&
                value instanceof FileList)
            )
          }

          function _Json_toElmArray(array) {
            return A2(elm$core$Array$initialize, array.length, function(
              i,
            ) {
              return array[i]
            })
          }

          function _Json_expecting(type, value) {
            return elm$core$Result$Err(
              A2(
                elm$json$Json$Decode$Failure,
                'Expecting ' + type,
                _Json_wrap(value),
              ),
            )
          }

          // EQUALITY

          function _Json_equality(x, y) {
            if (x === y) {
              return true
            }

            if (x.$ !== y.$) {
              return false
            }

            switch (x.$) {
              case 0:
              case 1:
                return x.a === y.a

              case 2:
                return x.b === y.b

              case 5:
                return x.c === y.c

              case 3:
              case 4:
              case 8:
                return _Json_equality(x.b, y.b)

              case 6:
                return x.d === y.d && _Json_equality(x.b, y.b)

              case 7:
                return x.e === y.e && _Json_equality(x.b, y.b)

              case 9:
                return x.f === y.f && _Json_listEquality(x.g, y.g)

              case 10:
                return x.h === y.h && _Json_equality(x.b, y.b)

              case 11:
                return _Json_listEquality(x.g, y.g)
            }
          }

          function _Json_listEquality(aDecoders, bDecoders) {
            var len = aDecoders.length
            if (len !== bDecoders.length) {
              return false
            }
            for (var i = 0; i < len; i++) {
              if (!_Json_equality(aDecoders[i], bDecoders[i])) {
                return false
              }
            }
            return true
          }

          // ENCODE

          var _Json_encode = F2(function(indentLevel, value) {
            return (
              JSON.stringify(_Json_unwrap(value), null, indentLevel) + ''
            )
          })

          function _Json_wrap(value) {
            return { $: 0, a: value }
          }
          function _Json_unwrap(value) {
            return value.a
          }

          function _Json_wrap_UNUSED(value) {
            return value
          }
          function _Json_unwrap_UNUSED(value) {
            return value
          }

          function _Json_emptyArray() {
            return []
          }
          function _Json_emptyObject() {
            return {}
          }

          var _Json_addField = F3(function(key, value, object) {
            object[key] = _Json_unwrap(value)
            return object
          })

          function _Json_addEntry(func) {
            return F2(function(entry, array) {
              array.push(_Json_unwrap(func(entry)))
              return array
            })
          }

          var _Json_encodeNull = _Json_wrap(null)

          function _Process_sleep(time) {
            return _Scheduler_binding(function(callback) {
              var id = setTimeout(function() {
                callback(_Scheduler_succeed(_Utils_Tuple0))
              }, time)

              return function() {
                clearTimeout(id)
              }
            })
          }

          // PROGRAMS

          var _Platform_worker = F4(function(
            impl,
            flagDecoder,
            debugMetadata,
            args,
          ) {
            return _Platform_initialize(
              flagDecoder,
              args,
              impl.init,
              impl.update,
              impl.subscriptions,
              function() {
                return function() {}
              },
            )
          })

          // INITIALIZE A PROGRAM

          function _Platform_initialize(
            flagDecoder,
            args,
            init,
            update,
            subscriptions,
            stepperBuilder,
          ) {
            var result = A2(
              _Json_run,
              flagDecoder,
              _Json_wrap(args ? args['flags'] : undefined),
            )
            elm$core$Result$isOk(result) ||
              _Debug_crash(2 /**/, _Json_errorToString(result.a) /**/)
            var managers = {}
            result = init(result.a)
            var model = result.a
            var stepper = stepperBuilder(sendToApp, model)
            var ports = _Platform_setupEffects(managers, sendToApp)

            function sendToApp(msg, viewMetadata) {
              result = A2(update, msg, model)
              stepper((model = result.a), viewMetadata)
              _Platform_dispatchEffects(
                managers,
                result.b,
                subscriptions(model),
              )
            }

            _Platform_dispatchEffects(
              managers,
              result.b,
              subscriptions(model),
            )

            return ports ? { ports: ports } : {}
          }

          // TRACK PRELOADS
          //
          // This is used by code in elm/browser and elm/http
          // to register any HTTP requests that are triggered by init.
          //

          var _Platform_preload

          function _Platform_registerPreload(url) {
            _Platform_preload.add(url)
          }

          // EFFECT MANAGERS

          var _Platform_effectManagers = {}

          function _Platform_setupEffects(managers, sendToApp) {
            var ports

            // setup all necessary effect managers
            for (var key in _Platform_effectManagers) {
              var manager = _Platform_effectManagers[key]

              if (manager.a) {
                ports = ports || {}
                ports[key] = manager.a(key, sendToApp)
              }

              managers[key] = _Platform_instantiateManager(
                manager,
                sendToApp,
              )
            }

            return ports
          }

          function _Platform_createManager(
            init,
            onEffects,
            onSelfMsg,
            cmdMap,
            subMap,
          ) {
            return {
              b: init,
              c: onEffects,
              d: onSelfMsg,
              e: cmdMap,
              f: subMap,
            }
          }

          function _Platform_instantiateManager(info, sendToApp) {
            var router = {
              g: sendToApp,
              h: undefined,
            }

            var onEffects = info.c
            var onSelfMsg = info.d
            var cmdMap = info.e
            var subMap = info.f

            function loop(state) {
              return A2(
                _Scheduler_andThen,
                loop,
                _Scheduler_receive(function(msg) {
                  var value = msg.a

                  if (msg.$ === 0) {
                    return A3(onSelfMsg, router, value, state)
                  }

                  return cmdMap && subMap
                    ? A4(onEffects, router, value.i, value.j, state)
                    : A3(
                        onEffects,
                        router,
                        cmdMap ? value.i : value.j,
                        state,
                      )
                }),
              )
            }

            return (router.h = _Scheduler_rawSpawn(
              A2(_Scheduler_andThen, loop, info.b),
            ))
          }

          // ROUTING

          var _Platform_sendToApp = F2(function(router, msg) {
            return _Scheduler_binding(function(callback) {
              router.g(msg)
              callback(_Scheduler_succeed(_Utils_Tuple0))
            })
          })

          var _Platform_sendToSelf = F2(function(router, msg) {
            return A2(_Scheduler_send, router.h, {
              $: 0,
              a: msg,
            })
          })

          // BAGS

          function _Platform_leaf(home) {
            return function(value) {
              return {
                $: 1,
                k: home,
                l: value,
              }
            }
          }

          function _Platform_batch(list) {
            return {
              $: 2,
              m: list,
            }
          }

          var _Platform_map = F2(function(tagger, bag) {
            return {
              $: 3,
              n: tagger,
              o: bag,
            }
          })

          // PIPE BAGS INTO EFFECT MANAGERS

          function _Platform_dispatchEffects(managers, cmdBag, subBag) {
            var effectsDict = {}
            _Platform_gatherEffects(true, cmdBag, effectsDict, null)
            _Platform_gatherEffects(false, subBag, effectsDict, null)

            for (var home in managers) {
              _Scheduler_rawSend(managers[home], {
                $: 'fx',
                a: effectsDict[home] || { i: _List_Nil, j: _List_Nil },
              })
            }
          }

          function _Platform_gatherEffects(
            isCmd,
            bag,
            effectsDict,
            taggers,
          ) {
            switch (bag.$) {
              case 1:
                var home = bag.k
                var effect = _Platform_toEffect(
                  isCmd,
                  home,
                  taggers,
                  bag.l,
                )
                effectsDict[home] = _Platform_insert(
                  isCmd,
                  effect,
                  effectsDict[home],
                )
                return

              case 2:
                for (
                  var list = bag.m;
                  list.b;
                  list = list.b // WHILE_CONS
                ) {
                  _Platform_gatherEffects(
                    isCmd,
                    list.a,
                    effectsDict,
                    taggers,
                  )
                }
                return

              case 3:
                _Platform_gatherEffects(isCmd, bag.o, effectsDict, {
                  p: bag.n,
                  q: taggers,
                })
                return
            }
          }

          function _Platform_toEffect(isCmd, home, taggers, value) {
            function applyTaggers(x) {
              for (var temp = taggers; temp; temp = temp.q) {
                x = temp.p(x)
              }
              return x
            }

            var map = isCmd
              ? _Platform_effectManagers[home].e
              : _Platform_effectManagers[home].f

            return A2(map, applyTaggers, value)
          }

          function _Platform_insert(isCmd, newEffect, effects) {
            effects = effects || { i: _List_Nil, j: _List_Nil }

            isCmd
              ? (effects.i = _List_Cons(newEffect, effects.i))
              : (effects.j = _List_Cons(newEffect, effects.j))

            return effects
          }

          // PORTS

          function _Platform_checkPortName(name) {
            if (_Platform_effectManagers[name]) {
              _Debug_crash(3, name)
            }
          }

          // OUTGOING PORTS

          function _Platform_outgoingPort(name, converter) {
            _Platform_checkPortName(name)
            _Platform_effectManagers[name] = {
              e: _Platform_outgoingPortMap,
              r: converter,
              a: _Platform_setupOutgoingPort,
            }
            return _Platform_leaf(name)
          }

          var _Platform_outgoingPortMap = F2(function(tagger, value) {
            return value
          })

          function _Platform_setupOutgoingPort(name) {
            var subs = []
            var converter = _Platform_effectManagers[name].r

            // CREATE MANAGER

            var init = _Process_sleep(0)

            _Platform_effectManagers[name].b = init
            _Platform_effectManagers[name].c = F3(function(
              router,
              cmdList,
              state,
            ) {
              for (
                ;
                cmdList.b;
                cmdList = cmdList.b // WHILE_CONS
              ) {
                // grab a separate reference to subs in case unsubscribe is called
                var currentSubs = subs
                var value = _Json_unwrap(converter(cmdList.a))
                for (var i = 0; i < currentSubs.length; i++) {
                  currentSubs[i](value)
                }
              }
              return init
            })

            // PUBLIC API

            function subscribe(callback) {
              subs.push(callback)
            }

            function unsubscribe(callback) {
              // copy subs into a new array in case unsubscribe is called within a
              // subscribed callback
              subs = subs.slice()
              var index = subs.indexOf(callback)
              if (index >= 0) {
                subs.splice(index, 1)
              }
            }

            return {
              subscribe: subscribe,
              unsubscribe: unsubscribe,
            }
          }

          // INCOMING PORTS

          function _Platform_incomingPort(name, converter) {
            _Platform_checkPortName(name)
            _Platform_effectManagers[name] = {
              f: _Platform_incomingPortMap,
              r: converter,
              a: _Platform_setupIncomingPort,
            }
            return _Platform_leaf(name)
          }

          var _Platform_incomingPortMap = F2(function(
            tagger,
            finalTagger,
          ) {
            return function(value) {
              return tagger(finalTagger(value))
            }
          })

          function _Platform_setupIncomingPort(name, sendToApp) {
            var subs = _List_Nil
            var converter = _Platform_effectManagers[name].r

            // CREATE MANAGER

            var init = _Scheduler_succeed(null)

            _Platform_effectManagers[name].b = init
            _Platform_effectManagers[name].c = F3(function(
              router,
              subList,
              state,
            ) {
              subs = subList
              return init
            })

            // PUBLIC API

            function send(incomingValue) {
              var result = A2(
                _Json_run,
                converter,
                _Json_wrap(incomingValue),
              )

              elm$core$Result$isOk(result) ||
                _Debug_crash(4, name, result.a)

              var value = result.a
              for (
                var temp = subs;
                temp.b;
                temp = temp.b // WHILE_CONS
              ) {
                sendToApp(temp.a(value))
              }
            }

            return { send: send }
          }

          // EXPORT ELM MODULES
          //
          // Have DEBUG and PROD versions so that we can (1) give nicer errors in
          // debug mode and (2) not pay for the bits needed for that in prod mode.
          //

          function _Platform_export_UNUSED(exports) {
            scope['Elm']
              ? _Platform_mergeExportsProd(scope['Elm'], exports)
              : (scope['Elm'] = exports)
          }

          function _Platform_mergeExportsProd(obj, exports) {
            for (var name in exports) {
              name in obj
                ? name == 'init'
                  ? _Debug_crash(6)
                  : _Platform_mergeExportsProd(obj[name], exports[name])
                : (obj[name] = exports[name])
            }
          }

          function _Platform_export(exports) {
            scope['Elm']
              ? _Platform_mergeExportsDebug('Elm', scope['Elm'], exports)
              : (scope['Elm'] = exports)
          }

          function _Platform_mergeExportsDebug(moduleName, obj, exports) {
            for (var name in exports) {
              name in obj
                ? name == 'init'
                  ? _Debug_crash(6, moduleName)
                  : _Platform_mergeExportsDebug(
                      moduleName + '.' + name,
                      obj[name],
                      exports[name],
                    )
                : (obj[name] = exports[name])
            }
          }

          // HELPERS

          var _VirtualDom_divertHrefToApp

          var _VirtualDom_doc =
            typeof document !== 'undefined' ? document : {}

          function _VirtualDom_appendChild(parent, child) {
            parent.appendChild(child)
          }

          var _VirtualDom_init = F4(function(
            virtualNode,
            flagDecoder,
            debugMetadata,
            args,
          ) {
            // NOTE: this function needs _Platform_export available to work

            /**_UNUSED/
	var node = args['node'];
	//*/
            /**/
            var node =
              args && args['node'] ? args['node'] : _Debug_crash(0)
            //*/

            node.parentNode.replaceChild(
              _VirtualDom_render(virtualNode, function() {}),
              node,
            )

            return {}
          })

          // TEXT

          function _VirtualDom_text(string) {
            return {
              $: 0,
              a: string,
            }
          }

          // NODE

          var _VirtualDom_nodeNS = F2(function(namespace, tag) {
            return F2(function(factList, kidList) {
              for (
                var kids = [], descendantsCount = 0;
                kidList.b;
                kidList = kidList.b // WHILE_CONS
              ) {
                var kid = kidList.a
                descendantsCount += kid.b || 0
                kids.push(kid)
              }
              descendantsCount += kids.length

              return {
                $: 1,
                c: tag,
                d: _VirtualDom_organizeFacts(factList),
                e: kids,
                f: namespace,
                b: descendantsCount,
              }
            })
          })

          var _VirtualDom_node = _VirtualDom_nodeNS(undefined)

          // KEYED NODE

          var _VirtualDom_keyedNodeNS = F2(function(namespace, tag) {
            return F2(function(factList, kidList) {
              for (
                var kids = [], descendantsCount = 0;
                kidList.b;
                kidList = kidList.b // WHILE_CONS
              ) {
                var kid = kidList.a
                descendantsCount += kid.b.b || 0
                kids.push(kid)
              }
              descendantsCount += kids.length

              return {
                $: 2,
                c: tag,
                d: _VirtualDom_organizeFacts(factList),
                e: kids,
                f: namespace,
                b: descendantsCount,
              }
            })
          })

          var _VirtualDom_keyedNode = _VirtualDom_keyedNodeNS(undefined)

          // CUSTOM

          function _VirtualDom_custom(factList, model, render, diff) {
            return {
              $: 3,
              d: _VirtualDom_organizeFacts(factList),
              g: model,
              h: render,
              i: diff,
            }
          }

          // MAP

          var _VirtualDom_map = F2(function(tagger, node) {
            return {
              $: 4,
              j: tagger,
              k: node,
              b: 1 + (node.b || 0),
            }
          })

          // LAZY

          function _VirtualDom_thunk(refs, thunk) {
            return {
              $: 5,
              l: refs,
              m: thunk,
              k: undefined,
            }
          }

          var _VirtualDom_lazy = F2(function(func, a) {
            return _VirtualDom_thunk([func, a], function() {
              return func(a)
            })
          })

          var _VirtualDom_lazy2 = F3(function(func, a, b) {
            return _VirtualDom_thunk([func, a, b], function() {
              return A2(func, a, b)
            })
          })

          var _VirtualDom_lazy3 = F4(function(func, a, b, c) {
            return _VirtualDom_thunk([func, a, b, c], function() {
              return A3(func, a, b, c)
            })
          })

          var _VirtualDom_lazy4 = F5(function(func, a, b, c, d) {
            return _VirtualDom_thunk([func, a, b, c, d], function() {
              return A4(func, a, b, c, d)
            })
          })

          var _VirtualDom_lazy5 = F6(function(func, a, b, c, d, e) {
            return _VirtualDom_thunk([func, a, b, c, d, e], function() {
              return A5(func, a, b, c, d, e)
            })
          })

          var _VirtualDom_lazy6 = F7(function(func, a, b, c, d, e, f) {
            return _VirtualDom_thunk([func, a, b, c, d, e, f], function() {
              return A6(func, a, b, c, d, e, f)
            })
          })

          var _VirtualDom_lazy7 = F8(function(func, a, b, c, d, e, f, g) {
            return _VirtualDom_thunk(
              [func, a, b, c, d, e, f, g],
              function() {
                return A7(func, a, b, c, d, e, f, g)
              },
            )
          })

          var _VirtualDom_lazy8 = F9(function(
            func,
            a,
            b,
            c,
            d,
            e,
            f,
            g,
            h,
          ) {
            return _VirtualDom_thunk(
              [func, a, b, c, d, e, f, g, h],
              function() {
                return A8(func, a, b, c, d, e, f, g, h)
              },
            )
          })

          // FACTS

          var _VirtualDom_on = F2(function(key, handler) {
            return {
              $: 'a0',
              n: key,
              o: handler,
            }
          })
          var _VirtualDom_style = F2(function(key, value) {
            return {
              $: 'a1',
              n: key,
              o: value,
            }
          })
          var _VirtualDom_property = F2(function(key, value) {
            return {
              $: 'a2',
              n: key,
              o: value,
            }
          })
          var _VirtualDom_attribute = F2(function(key, value) {
            return {
              $: 'a3',
              n: key,
              o: value,
            }
          })
          var _VirtualDom_attributeNS = F3(function(
            namespace,
            key,
            value,
          ) {
            return {
              $: 'a4',
              n: key,
              o: { f: namespace, o: value },
            }
          })

          // XSS ATTACK VECTOR CHECKS

          function _VirtualDom_noScript(tag) {
            return tag == 'script' ? 'p' : tag
          }

          function _VirtualDom_noOnOrFormAction(key) {
            return /^(on|formAction$)/i.test(key) ? 'data-' + key : key
          }

          function _VirtualDom_noInnerHtmlOrFormAction(key) {
            return key == 'innerHTML' || key == 'formAction'
              ? 'data-' + key
              : key
          }

          function _VirtualDom_noJavaScriptUri_UNUSED(value) {
            return /^javascript:/i.test(value.replace(/\s/g, ''))
              ? ''
              : value
          }

          function _VirtualDom_noJavaScriptUri(value) {
            return /^javascript:/i.test(value.replace(/\s/g, ''))
              ? 'javascript:alert("This is an XSS vector. Please use ports or web components instead.")'
              : value
          }

          function _VirtualDom_noJavaScriptOrHtmlUri_UNUSED(value) {
            return /^\s*(javascript:|data:text\/html)/i.test(value)
              ? ''
              : value
          }

          function _VirtualDom_noJavaScriptOrHtmlUri(value) {
            return /^\s*(javascript:|data:text\/html)/i.test(value)
              ? 'javascript:alert("This is an XSS vector. Please use ports or web components instead.")'
              : value
          }

          // MAP FACTS

          var _VirtualDom_mapAttribute = F2(function(func, attr) {
            return attr.$ === 'a0'
              ? A2(
                  _VirtualDom_on,
                  attr.n,
                  _VirtualDom_mapHandler(func, attr.o),
                )
              : attr
          })

          function _VirtualDom_mapHandler(func, handler) {
            var tag = elm$virtual_dom$VirtualDom$toHandlerInt(handler)

            // 0 = Normal
            // 1 = MayStopPropagation
            // 2 = MayPreventDefault
            // 3 = Custom

            return {
              $: handler.$,
              a: !tag
                ? A2(elm$json$Json$Decode$map, func, handler.a)
                : A3(
                    elm$json$Json$Decode$map2,
                    tag < 3
                      ? _VirtualDom_mapEventTuple
                      : _VirtualDom_mapEventRecord,
                    elm$json$Json$Decode$succeed(func),
                    handler.a,
                  ),
            }
          }

          var _VirtualDom_mapEventTuple = F2(function(func, tuple) {
            return _Utils_Tuple2(func(tuple.a), tuple.b)
          })

          var _VirtualDom_mapEventRecord = F2(function(func, record) {
            return {
              message: func(record.message),
              stopPropagation: record.stopPropagation,
              preventDefault: record.preventDefault,
            }
          })

          // ORGANIZE FACTS

          function _VirtualDom_organizeFacts(factList) {
            for (
              var facts = {};
              factList.b;
              factList = factList.b // WHILE_CONS
            ) {
              var entry = factList.a

              var tag = entry.$
              var key = entry.n
              var value = entry.o

              if (tag === 'a2') {
                key === 'className'
                  ? _VirtualDom_addClass(facts, key, _Json_unwrap(value))
                  : (facts[key] = _Json_unwrap(value))

                continue
              }

              var subFacts = facts[tag] || (facts[tag] = {})
              tag === 'a3' && key === 'class'
                ? _VirtualDom_addClass(subFacts, key, value)
                : (subFacts[key] = value)
            }

            return facts
          }

          function _VirtualDom_addClass(object, key, newClass) {
            var classes = object[key]
            object[key] = classes ? classes + ' ' + newClass : newClass
          }

          // RENDER

          function _VirtualDom_render(vNode, eventNode) {
            var tag = vNode.$

            if (tag === 5) {
              return _VirtualDom_render(
                vNode.k || (vNode.k = vNode.m()),
                eventNode,
              )
            }

            if (tag === 0) {
              return _VirtualDom_doc.createTextNode(vNode.a)
            }

            if (tag === 4) {
              var subNode = vNode.k
              var tagger = vNode.j

              while (subNode.$ === 4) {
                typeof tagger !== 'object'
                  ? (tagger = [tagger, subNode.j])
                  : tagger.push(subNode.j)

                subNode = subNode.k
              }

              var subEventRoot = { j: tagger, p: eventNode }
              var domNode = _VirtualDom_render(subNode, subEventRoot)
              domNode.elm_event_node_ref = subEventRoot
              return domNode
            }

            if (tag === 3) {
              var domNode = vNode.h(vNode.g)
              _VirtualDom_applyFacts(domNode, eventNode, vNode.d)
              return domNode
            }

            // at this point `tag` must be 1 or 2

            var domNode = vNode.f
              ? _VirtualDom_doc.createElementNS(vNode.f, vNode.c)
              : _VirtualDom_doc.createElement(vNode.c)

            if (_VirtualDom_divertHrefToApp && vNode.c == 'a') {
              domNode.addEventListener(
                'click',
                _VirtualDom_divertHrefToApp(domNode),
              )
            }

            _VirtualDom_applyFacts(domNode, eventNode, vNode.d)

            for (var kids = vNode.e, i = 0; i < kids.length; i++) {
              _VirtualDom_appendChild(
                domNode,
                _VirtualDom_render(
                  tag === 1 ? kids[i] : kids[i].b,
                  eventNode,
                ),
              )
            }

            return domNode
          }

          // APPLY FACTS

          function _VirtualDom_applyFacts(domNode, eventNode, facts) {
            for (var key in facts) {
              var value = facts[key]

              key === 'a1'
                ? _VirtualDom_applyStyles(domNode, value)
                : key === 'a0'
                ? _VirtualDom_applyEvents(domNode, eventNode, value)
                : key === 'a3'
                ? _VirtualDom_applyAttrs(domNode, value)
                : key === 'a4'
                ? _VirtualDom_applyAttrsNS(domNode, value)
                : ((key !== 'value' && key !== 'checked') ||
                    domNode[key] !== value) &&
                  (domNode[key] = value)
            }
          }

          // APPLY STYLES

          function _VirtualDom_applyStyles(domNode, styles) {
            var domNodeStyle = domNode.style

            for (var key in styles) {
              domNodeStyle[key] = styles[key]
            }
          }

          // APPLY ATTRS

          function _VirtualDom_applyAttrs(domNode, attrs) {
            for (var key in attrs) {
              var value = attrs[key]
              typeof value !== 'undefined'
                ? domNode.setAttribute(key, value)
                : domNode.removeAttribute(key)
            }
          }

          // APPLY NAMESPACED ATTRS

          function _VirtualDom_applyAttrsNS(domNode, nsAttrs) {
            for (var key in nsAttrs) {
              var pair = nsAttrs[key]
              var namespace = pair.f
              var value = pair.o

              typeof value !== 'undefined'
                ? domNode.setAttributeNS(namespace, key, value)
                : domNode.removeAttributeNS(namespace, key)
            }
          }

          // APPLY EVENTS

          function _VirtualDom_applyEvents(domNode, eventNode, events) {
            var allCallbacks = domNode.elmFs || (domNode.elmFs = {})

            for (var key in events) {
              var newHandler = events[key]
              var oldCallback = allCallbacks[key]

              if (!newHandler) {
                domNode.removeEventListener(key, oldCallback)
                allCallbacks[key] = undefined
                continue
              }

              if (oldCallback) {
                var oldHandler = oldCallback.q
                if (oldHandler.$ === newHandler.$) {
                  oldCallback.q = newHandler
                  continue
                }
                domNode.removeEventListener(key, oldCallback)
              }

              oldCallback = _VirtualDom_makeCallback(eventNode, newHandler)
              domNode.addEventListener(
                key,
                oldCallback,
                _VirtualDom_passiveSupported && {
                  passive:
                    elm$virtual_dom$VirtualDom$toHandlerInt(newHandler) <
                    2,
                },
              )
              allCallbacks[key] = oldCallback
            }
          }

          // PASSIVE EVENTS

          var _VirtualDom_passiveSupported

          try {
            window.addEventListener(
              't',
              null,
              Object.defineProperty({}, 'passive', {
                get: function() {
                  _VirtualDom_passiveSupported = true
                },
              }),
            )
          } catch (e) {}

          // EVENT HANDLERS

          function _VirtualDom_makeCallback(eventNode, initialHandler) {
            function callback(event) {
              var handler = callback.q
              var result = _Json_runHelp(handler.a, event)

              if (!elm$core$Result$isOk(result)) {
                return
              }

              var tag = elm$virtual_dom$VirtualDom$toHandlerInt(handler)

              // 0 = Normal
              // 1 = MayStopPropagation
              // 2 = MayPreventDefault
              // 3 = Custom

              var value = result.a
              var message = !tag
                ? value
                : tag < 3
                ? value.a
                : value.message
              var stopPropagation =
                tag == 1 ? value.b : tag == 3 && value.stopPropagation
              var currentEventNode = (stopPropagation &&
                event.stopPropagation(),
              (tag == 2 ? value.b : tag == 3 && value.preventDefault) &&
                event.preventDefault(),
              eventNode)
              var tagger
              var i
              while ((tagger = currentEventNode.j)) {
                if (typeof tagger == 'function') {
                  message = tagger(message)
                } else {
                  for (var i = tagger.length; i--; ) {
                    message = tagger[i](message)
                  }
                }
                currentEventNode = currentEventNode.p
              }
              currentEventNode(message, stopPropagation) // stopPropagation implies isSync
            }

            callback.q = initialHandler

            return callback
          }

          function _VirtualDom_equalEvents(x, y) {
            return x.$ == y.$ && _Json_equality(x.a, y.a)
          }

          // DIFF

          // TODO: Should we do patches like in iOS?
          //
          // type Patch
          //   = At Int Patch
          //   | Batch (List Patch)
          //   | Change ...
          //
          // How could it not be better?
          //
          function _VirtualDom_diff(x, y) {
            var patches = []
            _VirtualDom_diffHelp(x, y, patches, 0)
            return patches
          }

          function _VirtualDom_pushPatch(patches, type, index, data) {
            var patch = {
              $: type,
              r: index,
              s: data,
              t: undefined,
              u: undefined,
            }
            patches.push(patch)
            return patch
          }

          function _VirtualDom_diffHelp(x, y, patches, index) {
            if (x === y) {
              return
            }

            var xType = x.$
            var yType = y.$

            // Bail if you run into different types of nodes. Implies that the
            // structure has changed significantly and it's not worth a diff.
            if (xType !== yType) {
              if (xType === 1 && yType === 2) {
                y = _VirtualDom_dekey(y)
                yType = 1
              } else {
                _VirtualDom_pushPatch(patches, 0, index, y)
                return
              }
            }

            // Now we know that both nodes are the same $.
            switch (yType) {
              case 5:
                var xRefs = x.l
                var yRefs = y.l
                var i = xRefs.length
                var same = i === yRefs.length
                while (same && i--) {
                  same = xRefs[i] === yRefs[i]
                }
                if (same) {
                  y.k = x.k
                  return
                }
                y.k = y.m()
                var subPatches = []
                _VirtualDom_diffHelp(x.k, y.k, subPatches, 0)
                subPatches.length > 0 &&
                  _VirtualDom_pushPatch(patches, 1, index, subPatches)
                return

              case 4:
                // gather nested taggers
                var xTaggers = x.j
                var yTaggers = y.j
                var nesting = false

                var xSubNode = x.k
                while (xSubNode.$ === 4) {
                  nesting = true

                  typeof xTaggers !== 'object'
                    ? (xTaggers = [xTaggers, xSubNode.j])
                    : xTaggers.push(xSubNode.j)

                  xSubNode = xSubNode.k
                }

                var ySubNode = y.k
                while (ySubNode.$ === 4) {
                  nesting = true

                  typeof yTaggers !== 'object'
                    ? (yTaggers = [yTaggers, ySubNode.j])
                    : yTaggers.push(ySubNode.j)

                  ySubNode = ySubNode.k
                }

                // Just bail if different numbers of taggers. This implies the
                // structure of the virtual DOM has changed.
                if (nesting && xTaggers.length !== yTaggers.length) {
                  _VirtualDom_pushPatch(patches, 0, index, y)
                  return
                }

                // check if taggers are "the same"
                if (
                  nesting
                    ? !_VirtualDom_pairwiseRefEqual(xTaggers, yTaggers)
                    : xTaggers !== yTaggers
                ) {
                  _VirtualDom_pushPatch(patches, 2, index, yTaggers)
                }

                // diff everything below the taggers
                _VirtualDom_diffHelp(
                  xSubNode,
                  ySubNode,
                  patches,
                  index + 1,
                )
                return

              case 0:
                if (x.a !== y.a) {
                  _VirtualDom_pushPatch(patches, 3, index, y.a)
                }
                return

              case 1:
                _VirtualDom_diffNodes(
                  x,
                  y,
                  patches,
                  index,
                  _VirtualDom_diffKids,
                )
                return

              case 2:
                _VirtualDom_diffNodes(
                  x,
                  y,
                  patches,
                  index,
                  _VirtualDom_diffKeyedKids,
                )
                return

              case 3:
                if (x.h !== y.h) {
                  _VirtualDom_pushPatch(patches, 0, index, y)
                  return
                }

                var factsDiff = _VirtualDom_diffFacts(x.d, y.d)
                factsDiff &&
                  _VirtualDom_pushPatch(patches, 4, index, factsDiff)

                var patch = y.i(x.g, y.g)
                patch && _VirtualDom_pushPatch(patches, 5, index, patch)

                return
            }
          }

          // assumes the incoming arrays are the same length
          function _VirtualDom_pairwiseRefEqual(as, bs) {
            for (var i = 0; i < as.length; i++) {
              if (as[i] !== bs[i]) {
                return false
              }
            }

            return true
          }

          function _VirtualDom_diffNodes(x, y, patches, index, diffKids) {
            // Bail if obvious indicators have changed. Implies more serious
            // structural changes such that it's not worth it to diff.
            if (x.c !== y.c || x.f !== y.f) {
              _VirtualDom_pushPatch(patches, 0, index, y)
              return
            }

            var factsDiff = _VirtualDom_diffFacts(x.d, y.d)
            factsDiff &&
              _VirtualDom_pushPatch(patches, 4, index, factsDiff)

            diffKids(x, y, patches, index)
          }

          // DIFF FACTS

          // TODO Instead of creating a new diff object, it's possible to just test if
          // there *is* a diff. During the actual patch, do the diff again and make the
          // modifications directly. This way, there's no new allocations. Worth it?
          function _VirtualDom_diffFacts(x, y, category) {
            var diff

            // look for changes and removals
            for (var xKey in x) {
              if (
                xKey === 'a1' ||
                xKey === 'a0' ||
                xKey === 'a3' ||
                xKey === 'a4'
              ) {
                var subDiff = _VirtualDom_diffFacts(
                  x[xKey],
                  y[xKey] || {},
                  xKey,
                )
                if (subDiff) {
                  diff = diff || {}
                  diff[xKey] = subDiff
                }
                continue
              }

              // remove if not in the new facts
              if (!(xKey in y)) {
                diff = diff || {}
                diff[xKey] = !category
                  ? typeof x[xKey] === 'string'
                    ? ''
                    : null
                  : category === 'a1'
                  ? ''
                  : category === 'a0' || category === 'a3'
                  ? undefined
                  : { f: x[xKey].f, o: undefined }

                continue
              }

              var xValue = x[xKey]
              var yValue = y[xKey]

              // reference equal, so don't worry about it
              if (
                (xValue === yValue &&
                  xKey !== 'value' &&
                  xKey !== 'checked') ||
                (category === 'a0' &&
                  _VirtualDom_equalEvents(xValue, yValue))
              ) {
                continue
              }

              diff = diff || {}
              diff[xKey] = yValue
            }

            // add new stuff
            for (var yKey in y) {
              if (!(yKey in x)) {
                diff = diff || {}
                diff[yKey] = y[yKey]
              }
            }

            return diff
          }

          // DIFF KIDS

          function _VirtualDom_diffKids(xParent, yParent, patches, index) {
            var xKids = xParent.e
            var yKids = yParent.e

            var xLen = xKids.length
            var yLen = yKids.length

            // FIGURE OUT IF THERE ARE INSERTS OR REMOVALS

            if (xLen > yLen) {
              _VirtualDom_pushPatch(patches, 6, index, {
                v: yLen,
                i: xLen - yLen,
              })
            } else if (xLen < yLen) {
              _VirtualDom_pushPatch(patches, 7, index, {
                v: xLen,
                e: yKids,
              })
            }

            // PAIRWISE DIFF EVERYTHING ELSE

            for (
              var minLen = xLen < yLen ? xLen : yLen, i = 0;
              i < minLen;
              i++
            ) {
              var xKid = xKids[i]
              _VirtualDom_diffHelp(xKid, yKids[i], patches, ++index)
              index += xKid.b || 0
            }
          }

          // KEYED DIFF

          function _VirtualDom_diffKeyedKids(
            xParent,
            yParent,
            patches,
            rootIndex,
          ) {
            var localPatches = []

            var changes = {} // Dict String Entry
            var inserts = [] // Array { index : Int, entry : Entry }
            // type Entry = { tag : String, vnode : VNode, index : Int, data : _ }

            var xKids = xParent.e
            var yKids = yParent.e
            var xLen = xKids.length
            var yLen = yKids.length
            var xIndex = 0
            var yIndex = 0

            var index = rootIndex

            while (xIndex < xLen && yIndex < yLen) {
              var x = xKids[xIndex]
              var y = yKids[yIndex]

              var xKey = x.a
              var yKey = y.a
              var xNode = x.b
              var yNode = y.b

              var newMatch = undefined
              var oldMatch = undefined

              // check if keys match

              if (xKey === yKey) {
                index++
                _VirtualDom_diffHelp(xNode, yNode, localPatches, index)
                index += xNode.b || 0

                xIndex++
                yIndex++
                continue
              }

              // look ahead 1 to detect insertions and removals.

              var xNext = xKids[xIndex + 1]
              var yNext = yKids[yIndex + 1]

              if (xNext) {
                var xNextKey = xNext.a
                var xNextNode = xNext.b
                oldMatch = yKey === xNextKey
              }

              if (yNext) {
                var yNextKey = yNext.a
                var yNextNode = yNext.b
                newMatch = xKey === yNextKey
              }

              // swap x and y
              if (newMatch && oldMatch) {
                index++
                _VirtualDom_diffHelp(xNode, yNextNode, localPatches, index)
                _VirtualDom_insertNode(
                  changes,
                  localPatches,
                  xKey,
                  yNode,
                  yIndex,
                  inserts,
                )
                index += xNode.b || 0

                index++
                _VirtualDom_removeNode(
                  changes,
                  localPatches,
                  xKey,
                  xNextNode,
                  index,
                )
                index += xNextNode.b || 0

                xIndex += 2
                yIndex += 2
                continue
              }

              // insert y
              if (newMatch) {
                index++
                _VirtualDom_insertNode(
                  changes,
                  localPatches,
                  yKey,
                  yNode,
                  yIndex,
                  inserts,
                )
                _VirtualDom_diffHelp(xNode, yNextNode, localPatches, index)
                index += xNode.b || 0

                xIndex += 1
                yIndex += 2
                continue
              }

              // remove x
              if (oldMatch) {
                index++
                _VirtualDom_removeNode(
                  changes,
                  localPatches,
                  xKey,
                  xNode,
                  index,
                )
                index += xNode.b || 0

                index++
                _VirtualDom_diffHelp(xNextNode, yNode, localPatches, index)
                index += xNextNode.b || 0

                xIndex += 2
                yIndex += 1
                continue
              }

              // remove x, insert y
              if (xNext && xNextKey === yNextKey) {
                index++
                _VirtualDom_removeNode(
                  changes,
                  localPatches,
                  xKey,
                  xNode,
                  index,
                )
                _VirtualDom_insertNode(
                  changes,
                  localPatches,
                  yKey,
                  yNode,
                  yIndex,
                  inserts,
                )
                index += xNode.b || 0

                index++
                _VirtualDom_diffHelp(
                  xNextNode,
                  yNextNode,
                  localPatches,
                  index,
                )
                index += xNextNode.b || 0

                xIndex += 2
                yIndex += 2
                continue
              }

              break
            }

            // eat up any remaining nodes with removeNode and insertNode

            while (xIndex < xLen) {
              index++
              var x = xKids[xIndex]
              var xNode = x.b
              _VirtualDom_removeNode(
                changes,
                localPatches,
                x.a,
                xNode,
                index,
              )
              index += xNode.b || 0
              xIndex++
            }

            while (yIndex < yLen) {
              var endInserts = endInserts || []
              var y = yKids[yIndex]
              _VirtualDom_insertNode(
                changes,
                localPatches,
                y.a,
                y.b,
                undefined,
                endInserts,
              )
              yIndex++
            }

            if (
              localPatches.length > 0 ||
              inserts.length > 0 ||
              endInserts
            ) {
              _VirtualDom_pushPatch(patches, 8, rootIndex, {
                w: localPatches,
                x: inserts,
                y: endInserts,
              })
            }
          }

          // CHANGES FROM KEYED DIFF

          var _VirtualDom_POSTFIX = '_elmW6BL'

          function _VirtualDom_insertNode(
            changes,
            localPatches,
            key,
            vnode,
            yIndex,
            inserts,
          ) {
            var entry = changes[key]

            // never seen this key before
            if (!entry) {
              entry = {
                c: 0,
                z: vnode,
                r: yIndex,
                s: undefined,
              }

              inserts.push({ r: yIndex, A: entry })
              changes[key] = entry

              return
            }

            // this key was removed earlier, a match!
            if (entry.c === 1) {
              inserts.push({ r: yIndex, A: entry })

              entry.c = 2
              var subPatches = []
              _VirtualDom_diffHelp(entry.z, vnode, subPatches, entry.r)
              entry.r = yIndex
              entry.s.s = {
                w: subPatches,
                A: entry,
              }

              return
            }

            // this key has already been inserted or moved, a duplicate!
            _VirtualDom_insertNode(
              changes,
              localPatches,
              key + _VirtualDom_POSTFIX,
              vnode,
              yIndex,
              inserts,
            )
          }

          function _VirtualDom_removeNode(
            changes,
            localPatches,
            key,
            vnode,
            index,
          ) {
            var entry = changes[key]

            // never seen this key before
            if (!entry) {
              var patch = _VirtualDom_pushPatch(
                localPatches,
                9,
                index,
                undefined,
              )

              changes[key] = {
                c: 1,
                z: vnode,
                r: index,
                s: patch,
              }

              return
            }

            // this key was inserted earlier, a match!
            if (entry.c === 0) {
              entry.c = 2
              var subPatches = []
              _VirtualDom_diffHelp(vnode, entry.z, subPatches, index)

              _VirtualDom_pushPatch(localPatches, 9, index, {
                w: subPatches,
                A: entry,
              })

              return
            }

            // this key has already been removed or moved, a duplicate!
            _VirtualDom_removeNode(
              changes,
              localPatches,
              key + _VirtualDom_POSTFIX,
              vnode,
              index,
            )
          }

          // ADD DOM NODES
          //
          // Each DOM node has an "index" assigned in order of traversal. It is important
          // to minimize our crawl over the actual DOM, so these indexes (along with the
          // descendantsCount of virtual nodes) let us skip touching entire subtrees of
          // the DOM if we know there are no patches there.

          function _VirtualDom_addDomNodes(
            domNode,
            vNode,
            patches,
            eventNode,
          ) {
            _VirtualDom_addDomNodesHelp(
              domNode,
              vNode,
              patches,
              0,
              0,
              vNode.b,
              eventNode,
            )
          }

          // assumes `patches` is non-empty and indexes increase monotonically.
          function _VirtualDom_addDomNodesHelp(
            domNode,
            vNode,
            patches,
            i,
            low,
            high,
            eventNode,
          ) {
            var patch = patches[i]
            var index = patch.r

            while (index === low) {
              var patchType = patch.$

              if (patchType === 1) {
                _VirtualDom_addDomNodes(
                  domNode,
                  vNode.k,
                  patch.s,
                  eventNode,
                )
              } else if (patchType === 8) {
                patch.t = domNode
                patch.u = eventNode

                var subPatches = patch.s.w
                if (subPatches.length > 0) {
                  _VirtualDom_addDomNodesHelp(
                    domNode,
                    vNode,
                    subPatches,
                    0,
                    low,
                    high,
                    eventNode,
                  )
                }
              } else if (patchType === 9) {
                patch.t = domNode
                patch.u = eventNode

                var data = patch.s
                if (data) {
                  data.A.s = domNode
                  var subPatches = data.w
                  if (subPatches.length > 0) {
                    _VirtualDom_addDomNodesHelp(
                      domNode,
                      vNode,
                      subPatches,
                      0,
                      low,
                      high,
                      eventNode,
                    )
                  }
                }
              } else {
                patch.t = domNode
                patch.u = eventNode
              }

              i++

              if (!(patch = patches[i]) || (index = patch.r) > high) {
                return i
              }
            }

            var tag = vNode.$

            if (tag === 4) {
              var subNode = vNode.k

              while (subNode.$ === 4) {
                subNode = subNode.k
              }

              return _VirtualDom_addDomNodesHelp(
                domNode,
                subNode,
                patches,
                i,
                low + 1,
                high,
                domNode.elm_event_node_ref,
              )
            }

            // tag must be 1 or 2 at this point

            var vKids = vNode.e
            var childNodes = domNode.childNodes
            for (var j = 0; j < vKids.length; j++) {
              low++
              var vKid = tag === 1 ? vKids[j] : vKids[j].b
              var nextLow = low + (vKid.b || 0)
              if (low <= index && index <= nextLow) {
                i = _VirtualDom_addDomNodesHelp(
                  childNodes[j],
                  vKid,
                  patches,
                  i,
                  low,
                  nextLow,
                  eventNode,
                )
                if (!(patch = patches[i]) || (index = patch.r) > high) {
                  return i
                }
              }
              low = nextLow
            }
            return i
          }

          // APPLY PATCHES

          function _VirtualDom_applyPatches(
            rootDomNode,
            oldVirtualNode,
            patches,
            eventNode,
          ) {
            if (patches.length === 0) {
              return rootDomNode
            }

            _VirtualDom_addDomNodes(
              rootDomNode,
              oldVirtualNode,
              patches,
              eventNode,
            )
            return _VirtualDom_applyPatchesHelp(rootDomNode, patches)
          }

          function _VirtualDom_applyPatchesHelp(rootDomNode, patches) {
            for (var i = 0; i < patches.length; i++) {
              var patch = patches[i]
              var localDomNode = patch.t
              var newNode = _VirtualDom_applyPatch(localDomNode, patch)
              if (localDomNode === rootDomNode) {
                rootDomNode = newNode
              }
            }
            return rootDomNode
          }

          function _VirtualDom_applyPatch(domNode, patch) {
            switch (patch.$) {
              case 0:
                return _VirtualDom_applyPatchRedraw(
                  domNode,
                  patch.s,
                  patch.u,
                )

              case 4:
                _VirtualDom_applyFacts(domNode, patch.u, patch.s)
                return domNode

              case 3:
                domNode.replaceData(0, domNode.length, patch.s)
                return domNode

              case 1:
                return _VirtualDom_applyPatchesHelp(domNode, patch.s)

              case 2:
                if (domNode.elm_event_node_ref) {
                  domNode.elm_event_node_ref.j = patch.s
                } else {
                  domNode.elm_event_node_ref = { j: patch.s, p: patch.u }
                }
                return domNode

              case 6:
                var data = patch.s
                for (var i = 0; i < data.i; i++) {
                  domNode.removeChild(domNode.childNodes[data.v])
                }
                return domNode

              case 7:
                var data = patch.s
                var kids = data.e
                var i = data.v
                var theEnd = domNode.childNodes[i]
                for (; i < kids.length; i++) {
                  domNode.insertBefore(
                    _VirtualDom_render(kids[i], patch.u),
                    theEnd,
                  )
                }
                return domNode

              case 9:
                var data = patch.s
                if (!data) {
                  domNode.parentNode.removeChild(domNode)
                  return domNode
                }
                var entry = data.A
                if (typeof entry.r !== 'undefined') {
                  domNode.parentNode.removeChild(domNode)
                }
                entry.s = _VirtualDom_applyPatchesHelp(domNode, data.w)
                return domNode

              case 8:
                return _VirtualDom_applyPatchReorder(domNode, patch)

              case 5:
                return patch.s(domNode)

              default:
                _Debug_crash(10) // 'Ran into an unknown patch!'
            }
          }

          function _VirtualDom_applyPatchRedraw(
            domNode,
            vNode,
            eventNode,
          ) {
            var parentNode = domNode.parentNode
            var newNode = _VirtualDom_render(vNode, eventNode)

            if (!newNode.elm_event_node_ref) {
              newNode.elm_event_node_ref = domNode.elm_event_node_ref
            }

            if (parentNode && newNode !== domNode) {
              parentNode.replaceChild(newNode, domNode)
            }
            return newNode
          }

          function _VirtualDom_applyPatchReorder(domNode, patch) {
            var data = patch.s

            // remove end inserts
            var frag = _VirtualDom_applyPatchReorderEndInsertsHelp(
              data.y,
              patch,
            )

            // removals
            domNode = _VirtualDom_applyPatchesHelp(domNode, data.w)

            // inserts
            var inserts = data.x
            for (var i = 0; i < inserts.length; i++) {
              var insert = inserts[i]
              var entry = insert.A
              var node =
                entry.c === 2
                  ? entry.s
                  : _VirtualDom_render(entry.z, patch.u)
              domNode.insertBefore(node, domNode.childNodes[insert.r])
            }

            // add end inserts
            if (frag) {
              _VirtualDom_appendChild(domNode, frag)
            }

            return domNode
          }

          function _VirtualDom_applyPatchReorderEndInsertsHelp(
            endInserts,
            patch,
          ) {
            if (!endInserts) {
              return
            }

            var frag = _VirtualDom_doc.createDocumentFragment()
            for (var i = 0; i < endInserts.length; i++) {
              var insert = endInserts[i]
              var entry = insert.A
              _VirtualDom_appendChild(
                frag,
                entry.c === 2
                  ? entry.s
                  : _VirtualDom_render(entry.z, patch.u),
              )
            }
            return frag
          }

          function _VirtualDom_virtualize(node) {
            // TEXT NODES

            if (node.nodeType === 3) {
              return _VirtualDom_text(node.textContent)
            }

            // WEIRD NODES

            if (node.nodeType !== 1) {
              return _VirtualDom_text('')
            }

            // ELEMENT NODES

            var attrList = _List_Nil
            var attrs = node.attributes
            for (var i = attrs.length; i--; ) {
              var attr = attrs[i]
              var name = attr.name
              var value = attr.value
              attrList = _List_Cons(
                A2(_VirtualDom_attribute, name, value),
                attrList,
              )
            }

            var tag = node.tagName.toLowerCase()
            var kidList = _List_Nil
            var kids = node.childNodes

            for (var i = kids.length; i--; ) {
              kidList = _List_Cons(
                _VirtualDom_virtualize(kids[i]),
                kidList,
              )
            }
            return A3(_VirtualDom_node, tag, attrList, kidList)
          }

          function _VirtualDom_dekey(keyedNode) {
            var keyedKids = keyedNode.e
            var len = keyedKids.length
            var kids = new Array(len)
            for (var i = 0; i < len; i++) {
              kids[i] = keyedKids[i].b
            }

            return {
              $: 1,
              c: keyedNode.c,
              d: keyedNode.d,
              e: kids,
              f: keyedNode.f,
              b: keyedNode.b,
            }
          }

          var _Bitwise_and = F2(function(a, b) {
            return a & b
          })

          var _Bitwise_or = F2(function(a, b) {
            return a | b
          })

          var _Bitwise_xor = F2(function(a, b) {
            return a ^ b
          })

          function _Bitwise_complement(a) {
            return ~a
          }

          var _Bitwise_shiftLeftBy = F2(function(offset, a) {
            return a << offset
          })

          var _Bitwise_shiftRightBy = F2(function(offset, a) {
            return a >> offset
          })

          var _Bitwise_shiftRightZfBy = F2(function(offset, a) {
            return a >>> offset
          })

          // HELPERS

          function _Debugger_unsafeCoerce(value) {
            return value
          }

          // PROGRAMS

          var _Debugger_element = F4(function(
            impl,
            flagDecoder,
            debugMetadata,
            args,
          ) {
            return _Platform_initialize(
              flagDecoder,
              args,
              A3(
                elm$browser$Debugger$Main$wrapInit,
                _Json_wrap(debugMetadata),
                _Debugger_popout(),
                impl.init,
              ),
              elm$browser$Debugger$Main$wrapUpdate(impl.update),
              elm$browser$Debugger$Main$wrapSubs(impl.subscriptions),
              function(sendToApp, initialModel) {
                var view = impl.view
                var title = _VirtualDom_doc.title
                var domNode =
                  args && args['node'] ? args['node'] : _Debug_crash(0)
                var currNode = _VirtualDom_virtualize(domNode)
                var currBlocker = elm$browser$Debugger$Main$toBlockerType(
                  initialModel,
                )
                var currPopout

                var cornerNode = _VirtualDom_doc.createElement('div')
                domNode.parentNode.insertBefore(
                  cornerNode,
                  domNode.nextSibling,
                )
                var cornerCurr = _VirtualDom_virtualize(cornerNode)

                initialModel.popout.a = sendToApp

                return _Browser_makeAnimator(initialModel, function(
                  model,
                ) {
                  var nextNode = A2(
                    _VirtualDom_map,
                    elm$browser$Debugger$Main$UserMsg,
                    view(elm$browser$Debugger$Main$getUserModel(model)),
                  )
                  var patches = _VirtualDom_diff(currNode, nextNode)
                  domNode = _VirtualDom_applyPatches(
                    domNode,
                    currNode,
                    patches,
                    sendToApp,
                  )
                  currNode = nextNode

                  // update blocker

                  var nextBlocker = elm$browser$Debugger$Main$toBlockerType(
                    model,
                  )
                  _Debugger_updateBlocker(currBlocker, nextBlocker)
                  currBlocker = nextBlocker

                  // view corner

                  if (!model.popout.b) {
                    var cornerNext = elm$browser$Debugger$Main$cornerView(
                      model,
                    )
                    var cornerPatches = _VirtualDom_diff(
                      cornerCurr,
                      cornerNext,
                    )
                    cornerNode = _VirtualDom_applyPatches(
                      cornerNode,
                      cornerCurr,
                      cornerPatches,
                      sendToApp,
                    )
                    cornerCurr = cornerNext
                    currPopout = undefined
                    return
                  }

                  // view popout

                  _VirtualDom_doc = model.popout.b // SWITCH TO POPOUT DOC
                  currPopout ||
                    (currPopout = _VirtualDom_virtualize(model.popout.b))
                  var nextPopout = elm$browser$Debugger$Main$popoutView(
                    model,
                  )
                  var popoutPatches = _VirtualDom_diff(
                    currPopout,
                    nextPopout,
                  )
                  _VirtualDom_applyPatches(
                    model.popout.b.body,
                    currPopout,
                    popoutPatches,
                    sendToApp,
                  )
                  currPopout = nextPopout
                  _VirtualDom_doc = document // SWITCH BACK TO NORMAL DOC
                })
              },
            )
          })

          var _Debugger_document = F4(function(
            impl,
            flagDecoder,
            debugMetadata,
            args,
          ) {
            return _Platform_initialize(
              flagDecoder,
              args,
              A3(
                elm$browser$Debugger$Main$wrapInit,
                _Json_wrap(debugMetadata),
                _Debugger_popout(),
                impl.init,
              ),
              elm$browser$Debugger$Main$wrapUpdate(impl.update),
              elm$browser$Debugger$Main$wrapSubs(impl.subscriptions),
              function(sendToApp, initialModel) {
                var divertHrefToApp =
                  impl.setup &&
                  impl.setup(function(x) {
                    return sendToApp(elm$browser$Debugger$Main$UserMsg(x))
                  })
                var view = impl.view
                var title = _VirtualDom_doc.title
                var bodyNode = _VirtualDom_doc.body
                var currNode = _VirtualDom_virtualize(bodyNode)
                var currBlocker = elm$browser$Debugger$Main$toBlockerType(
                  initialModel,
                )
                var currPopout

                initialModel.popout.a = sendToApp

                return _Browser_makeAnimator(initialModel, function(
                  model,
                ) {
                  _VirtualDom_divertHrefToApp = divertHrefToApp
                  var doc = view(
                    elm$browser$Debugger$Main$getUserModel(model),
                  )
                  var nextNode = _VirtualDom_node('body')(_List_Nil)(
                    _Utils_ap(
                      A2(
                        elm$core$List$map,
                        _VirtualDom_map(elm$browser$Debugger$Main$UserMsg),
                        doc.body,
                      ),
                      _List_Cons(
                        elm$browser$Debugger$Main$cornerView(model),
                        _List_Nil,
                      ),
                    ),
                  )
                  var patches = _VirtualDom_diff(currNode, nextNode)
                  bodyNode = _VirtualDom_applyPatches(
                    bodyNode,
                    currNode,
                    patches,
                    sendToApp,
                  )
                  currNode = nextNode
                  _VirtualDom_divertHrefToApp = 0
                  title !== doc.title &&
                    (_VirtualDom_doc.title = title = doc.title)

                  // update blocker

                  var nextBlocker = elm$browser$Debugger$Main$toBlockerType(
                    model,
                  )
                  _Debugger_updateBlocker(currBlocker, nextBlocker)
                  currBlocker = nextBlocker

                  // view popout

                  if (!model.popout.b) {
                    currPopout = undefined
                    return
                  }

                  _VirtualDom_doc = model.popout.b // SWITCH TO POPOUT DOC
                  currPopout ||
                    (currPopout = _VirtualDom_virtualize(model.popout.b))
                  var nextPopout = elm$browser$Debugger$Main$popoutView(
                    model,
                  )
                  var popoutPatches = _VirtualDom_diff(
                    currPopout,
                    nextPopout,
                  )
                  _VirtualDom_applyPatches(
                    model.popout.b.body,
                    currPopout,
                    popoutPatches,
                    sendToApp,
                  )
                  currPopout = nextPopout
                  _VirtualDom_doc = document // SWITCH BACK TO NORMAL DOC
                })
              },
            )
          })

          function _Debugger_popout() {
            return {
              b: undefined,
              a: undefined,
            }
          }

          function _Debugger_isOpen(popout) {
            return !!popout.b
          }

          function _Debugger_open(popout) {
            return _Scheduler_binding(function(callback) {
              _Debugger_openWindow(popout)
              callback(_Scheduler_succeed(_Utils_Tuple0))
            })
          }

          function _Debugger_openWindow(popout) {
            var w = 900,
              h = 360,
              x = screen.width - w,
              y = screen.height - h
            var debuggerWindow = window.open(
              '',
              '',
              'width=' + w + ',height=' + h + ',left=' + x + ',top=' + y,
            )
            var doc = debuggerWindow.document
            doc.title = 'Elm Debugger'

            // handle arrow keys
            doc.addEventListener('keydown', function(event) {
              event.metaKey &&
                event.which === 82 &&
                window.location.reload()
              event.which === 38 &&
                (popout.a(elm$browser$Debugger$Main$Up),
                event.preventDefault())
              event.which === 40 &&
                (popout.a(elm$browser$Debugger$Main$Down),
                event.preventDefault())
            })

            // handle window close
            window.addEventListener('unload', close)
            debuggerWindow.addEventListener('unload', function() {
              popout.b = undefined
              popout.a(elm$browser$Debugger$Main$NoOp)
              window.removeEventListener('unload', close)
            })
            function close() {
              popout.b = undefined
              popout.a(elm$browser$Debugger$Main$NoOp)
              debuggerWindow.close()
            }

            // register new window
            popout.b = doc
          }

          // SCROLL

          function _Debugger_scroll(popout) {
            return _Scheduler_binding(function(callback) {
              if (popout.b) {
                var msgs = popout.b.getElementById('elm-debugger-sidebar')
                if (msgs) {
                  msgs.scrollTop = msgs.scrollHeight
                }
              }
              callback(_Scheduler_succeed(_Utils_Tuple0))
            })
          }

          // UPLOAD

          function _Debugger_upload() {
            return _Scheduler_binding(function(callback) {
              var element = document.createElement('input')
              element.setAttribute('type', 'file')
              element.setAttribute('accept', 'text/json')
              element.style.display = 'none'
              element.addEventListener('change', function(event) {
                var fileReader = new FileReader()
                fileReader.onload = function(e) {
                  callback(_Scheduler_succeed(e.target.result))
                }
                fileReader.readAsText(event.target.files[0])
                document.body.removeChild(element)
              })
              document.body.appendChild(element)
              element.click()
            })
          }

          // DOWNLOAD

          var _Debugger_download = F2(function(historyLength, json) {
            return _Scheduler_binding(function(callback) {
              var fileName = 'history-' + historyLength + '.txt'
              var jsonString = JSON.stringify(json)
              var mime = 'text/plain;charset=utf-8'
              var done = _Scheduler_succeed(_Utils_Tuple0)

              // for IE10+
              if (navigator.msSaveBlob) {
                navigator.msSaveBlob(
                  new Blob([jsonString], { type: mime }),
                  fileName,
                )
                return callback(done)
              }

              // for HTML5
              var element = document.createElement('a')
              element.setAttribute(
                'href',
                'data:' + mime + ',' + encodeURIComponent(jsonString),
              )
              element.setAttribute('download', fileName)
              element.style.display = 'none'
              document.body.appendChild(element)
              element.click()
              document.body.removeChild(element)
              callback(done)
            })
          })

          // POPOUT CONTENT

          function _Debugger_messageToString(value) {
            if (typeof value === 'boolean') {
              return value ? 'True' : 'False'
            }

            if (typeof value === 'number') {
              return value + ''
            }

            if (typeof value === 'string') {
              return '"' + _Debugger_addSlashes(value, false) + '"'
            }

            if (value instanceof String) {
              return "'" + _Debugger_addSlashes(value, true) + "'"
            }

            if (
              typeof value !== 'object' ||
              value === null ||
              !('$' in value)
            ) {
              return '…'
            }

            if (typeof value.$ === 'number') {
              return '…'
            }

            var code = value.$.charCodeAt(0)
            if (
              code === 0x23 /* # */ ||
              /* a */ (0x61 <= code && code <= 0x7a) /* z */
            ) {
              return '…'
            }

            if (
              [
                'Array_elm_builtin',
                'Set_elm_builtin',
                'RBNode_elm_builtin',
                'RBEmpty_elm_builtin',
              ].indexOf(value.$) >= 0
            ) {
              return '…'
            }

            var keys = Object.keys(value)
            switch (keys.length) {
              case 1:
                return value.$
              case 2:
                return value.$ + ' ' + _Debugger_messageToString(value.a)
              default:
                return (
                  value.$ +
                  ' … ' +
                  _Debugger_messageToString(value[keys[keys.length - 1]])
                )
            }
          }

          function _Debugger_init(value) {
            if (typeof value === 'boolean') {
              return A3(
                elm$browser$Debugger$Expando$Constructor,
                elm$core$Maybe$Just(value ? 'True' : 'False'),
                true,
                _List_Nil,
              )
            }

            if (typeof value === 'number') {
              return elm$browser$Debugger$Expando$Primitive(value + '')
            }

            if (typeof value === 'string') {
              return elm$browser$Debugger$Expando$S(
                '"' + _Debugger_addSlashes(value, false) + '"',
              )
            }

            if (value instanceof String) {
              return elm$browser$Debugger$Expando$S(
                "'" + _Debugger_addSlashes(value, true) + "'",
              )
            }

            if (typeof value === 'object' && '$' in value) {
              var tag = value.$

              if (tag === '::' || tag === '[]') {
                return A3(
                  elm$browser$Debugger$Expando$Sequence,
                  elm$browser$Debugger$Expando$ListSeq,
                  true,
                  A2(elm$core$List$map, _Debugger_init, value),
                )
              }

              if (tag === 'Set_elm_builtin') {
                return A3(
                  elm$browser$Debugger$Expando$Sequence,
                  elm$browser$Debugger$Expando$SetSeq,
                  true,
                  A3(
                    elm$core$Set$foldr,
                    _Debugger_initCons,
                    _List_Nil,
                    value,
                  ),
                )
              }

              if (
                tag === 'RBNode_elm_builtin' ||
                tag == 'RBEmpty_elm_builtin'
              ) {
                return A2(
                  elm$browser$Debugger$Expando$Dictionary,
                  true,
                  A3(
                    elm$core$Dict$foldr,
                    _Debugger_initKeyValueCons,
                    _List_Nil,
                    value,
                  ),
                )
              }

              if (tag === 'Array_elm_builtin') {
                return A3(
                  elm$browser$Debugger$Expando$Sequence,
                  elm$browser$Debugger$Expando$ArraySeq,
                  true,
                  A3(
                    elm$core$Array$foldr,
                    _Debugger_initCons,
                    _List_Nil,
                    value,
                  ),
                )
              }

              if (typeof tag === 'number') {
                return elm$browser$Debugger$Expando$Primitive(
                  '<internals>',
                )
              }

              var char = tag.charCodeAt(0)
              if (char === 35 || (65 <= char && char <= 90)) {
                var list = _List_Nil
                for (var i in value) {
                  if (i === '$') continue
                  list = _List_Cons(_Debugger_init(value[i]), list)
                }
                return A3(
                  elm$browser$Debugger$Expando$Constructor,
                  char === 35
                    ? elm$core$Maybe$Nothing
                    : elm$core$Maybe$Just(tag),
                  true,
                  elm$core$List$reverse(list),
                )
              }

              return elm$browser$Debugger$Expando$Primitive('<internals>')
            }

            if (typeof value === 'object') {
              var dict = elm$core$Dict$empty
              for (var i in value) {
                dict = A3(
                  elm$core$Dict$insert,
                  i,
                  _Debugger_init(value[i]),
                  dict,
                )
              }
              return A2(elm$browser$Debugger$Expando$Record, true, dict)
            }

            return elm$browser$Debugger$Expando$Primitive('<internals>')
          }

          var _Debugger_initCons = F2(function initConsHelp(value, list) {
            return _List_Cons(_Debugger_init(value), list)
          })

          var _Debugger_initKeyValueCons = F3(function(key, value, list) {
            return _List_Cons(
              _Utils_Tuple2(_Debugger_init(key), _Debugger_init(value)),
              list,
            )
          })

          function _Debugger_addSlashes(str, isChar) {
            var s = str
              .replace(/\\/g, '\\\\')
              .replace(/\n/g, '\\n')
              .replace(/\t/g, '\\t')
              .replace(/\r/g, '\\r')
              .replace(/\v/g, '\\v')
              .replace(/\0/g, '\\0')
            if (isChar) {
              return s.replace(/\'/g, "\\'")
            } else {
              return s.replace(/\"/g, '\\"')
            }
          }

          // BLOCK EVENTS

          function _Debugger_updateBlocker(oldBlocker, newBlocker) {
            if (oldBlocker === newBlocker) return

            var oldEvents = _Debugger_blockerToEvents(oldBlocker)
            var newEvents = _Debugger_blockerToEvents(newBlocker)

            // remove old blockers
            for (var i = 0; i < oldEvents.length; i++) {
              document.removeEventListener(
                oldEvents[i],
                _Debugger_blocker,
                true,
              )
            }

            // add new blockers
            for (var i = 0; i < newEvents.length; i++) {
              document.addEventListener(
                newEvents[i],
                _Debugger_blocker,
                true,
              )
            }
          }

          function _Debugger_blocker(event) {
            if (
              event.type === 'keydown' &&
              event.metaKey &&
              event.which === 82
            ) {
              return
            }

            var isScroll =
              event.type === 'scroll' || event.type === 'wheel'
            for (var node = event.target; node; node = node.parentNode) {
              if (
                isScroll
                  ? node.id === 'elm-debugger-details'
                  : node.id === 'elm-debugger-overlay'
              ) {
                return
              }
            }

            event.stopPropagation()
            event.preventDefault()
          }

          function _Debugger_blockerToEvents(blocker) {
            return blocker === elm$browser$Debugger$Overlay$BlockNone
              ? []
              : blocker === elm$browser$Debugger$Overlay$BlockMost
              ? _Debugger_mostEvents
              : _Debugger_allEvents
          }

          var _Debugger_mostEvents = [
            'click',
            'dblclick',
            'mousemove',
            'mouseup',
            'mousedown',
            'mouseenter',
            'mouseleave',
            'touchstart',
            'touchend',
            'touchcancel',
            'touchmove',
            'pointerdown',
            'pointerup',
            'pointerover',
            'pointerout',
            'pointerenter',
            'pointerleave',
            'pointermove',
            'pointercancel',
            'dragstart',
            'drag',
            'dragend',
            'dragenter',
            'dragover',
            'dragleave',
            'drop',
            'keyup',
            'keydown',
            'keypress',
            'input',
            'change',
            'focus',
            'blur',
          ]

          var _Debugger_allEvents = _Debugger_mostEvents.concat(
            'wheel',
            'scroll',
          )

          // ELEMENT

          var _Debugger_element

          var _Browser_element =
            _Debugger_element ||
            F4(function(impl, flagDecoder, debugMetadata, args) {
              return _Platform_initialize(
                flagDecoder,
                args,
                impl.init,
                impl.update,
                impl.subscriptions,
                function(sendToApp, initialModel) {
                  var view = impl.view
                  /**_UNUSED/
			var domNode = args['node'];
			//*/
                  /**/
                  var domNode =
                    args && args['node'] ? args['node'] : _Debug_crash(0)
                  //*/
                  var currNode = _VirtualDom_virtualize(domNode)

                  return _Browser_makeAnimator(initialModel, function(
                    model,
                  ) {
                    var nextNode = view(model)
                    var patches = _VirtualDom_diff(currNode, nextNode)
                    domNode = _VirtualDom_applyPatches(
                      domNode,
                      currNode,
                      patches,
                      sendToApp,
                    )
                    currNode = nextNode
                  })
                },
              )
            })

          // DOCUMENT

          var _Debugger_document

          var _Browser_document =
            _Debugger_document ||
            F4(function(impl, flagDecoder, debugMetadata, args) {
              return _Platform_initialize(
                flagDecoder,
                args,
                impl.init,
                impl.update,
                impl.subscriptions,
                function(sendToApp, initialModel) {
                  var divertHrefToApp = impl.setup && impl.setup(sendToApp)
                  var view = impl.view
                  var title = _VirtualDom_doc.title
                  var bodyNode = _VirtualDom_doc.body
                  var currNode = _VirtualDom_virtualize(bodyNode)
                  return _Browser_makeAnimator(initialModel, function(
                    model,
                  ) {
                    _VirtualDom_divertHrefToApp = divertHrefToApp
                    var doc = view(model)
                    var nextNode = _VirtualDom_node('body')(_List_Nil)(
                      doc.body,
                    )
                    var patches = _VirtualDom_diff(currNode, nextNode)
                    bodyNode = _VirtualDom_applyPatches(
                      bodyNode,
                      currNode,
                      patches,
                      sendToApp,
                    )
                    currNode = nextNode
                    _VirtualDom_divertHrefToApp = 0
                    title !== doc.title &&
                      (_VirtualDom_doc.title = title = doc.title)
                  })
                },
              )
            })

          // ANIMATION

          var _Browser_cancelAnimationFrame =
            typeof cancelAnimationFrame !== 'undefined'
              ? cancelAnimationFrame
              : function(id) {
                  clearTimeout(id)
                }

          var _Browser_requestAnimationFrame =
            typeof requestAnimationFrame !== 'undefined'
              ? requestAnimationFrame
              : function(callback) {
                  return setTimeout(callback, 1000 / 60)
                }

          function _Browser_makeAnimator(model, draw) {
            draw(model)

            var state = 0

            function updateIfNeeded() {
              state =
                state === 1
                  ? 0
                  : (_Browser_requestAnimationFrame(updateIfNeeded),
                    draw(model),
                    1)
            }

            return function(nextModel, isSync) {
              model = nextModel

              isSync
                ? (draw(model), state === 2 && (state = 1))
                : (state === 0 &&
                    _Browser_requestAnimationFrame(updateIfNeeded),
                  (state = 2))
            }
          }

          // APPLICATION

          function _Browser_application(impl) {
            var onUrlChange = impl.onUrlChange
            var onUrlRequest = impl.onUrlRequest
            var key = function() {
              key.a(onUrlChange(_Browser_getUrl()))
            }

            return _Browser_document({
              setup: function(sendToApp) {
                key.a = sendToApp
                _Browser_window.addEventListener('popstate', key)
                _Browser_window.navigator.userAgent.indexOf('Trident') <
                  0 || _Browser_window.addEventListener('hashchange', key)

                return F2(function(domNode, event) {
                  if (
                    !event.ctrlKey &&
                    !event.metaKey &&
                    !event.shiftKey &&
                    event.button < 1 &&
                    !domNode.target &&
                    !domNode.hasAttribute('download')
                  ) {
                    event.preventDefault()
                    var href = domNode.href
                    var curr = _Browser_getUrl()
                    var next = elm$url$Url$fromString(href).a
                    sendToApp(
                      onUrlRequest(
                        next &&
                          curr.protocol === next.protocol &&
                          curr.host === next.host &&
                          curr.port_.a === next.port_.a
                          ? elm$browser$Browser$Internal(next)
                          : elm$browser$Browser$External(href),
                      ),
                    )
                  }
                })
              },
              init: function(flags) {
                return A3(impl.init, flags, _Browser_getUrl(), key)
              },
              view: impl.view,
              update: impl.update,
              subscriptions: impl.subscriptions,
            })
          }

          function _Browser_getUrl() {
            return (
              elm$url$Url$fromString(_VirtualDom_doc.location.href).a ||
              _Debug_crash(1)
            )
          }

          var _Browser_go = F2(function(key, n) {
            return A2(
              elm$core$Task$perform,
              elm$core$Basics$never,
              _Scheduler_binding(function() {
                n && history.go(n)
                key()
              }),
            )
          })

          var _Browser_pushUrl = F2(function(key, url) {
            return A2(
              elm$core$Task$perform,
              elm$core$Basics$never,
              _Scheduler_binding(function() {
                history.pushState({}, '', url)
                key()
              }),
            )
          })

          var _Browser_replaceUrl = F2(function(key, url) {
            return A2(
              elm$core$Task$perform,
              elm$core$Basics$never,
              _Scheduler_binding(function() {
                history.replaceState({}, '', url)
                key()
              }),
            )
          })

          // GLOBAL EVENTS

          var _Browser_fakeNode = {
            addEventListener: function() {},
            removeEventListener: function() {},
          }
          var _Browser_doc =
            typeof document !== 'undefined' ? document : _Browser_fakeNode
          var _Browser_window =
            typeof window !== 'undefined' ? window : _Browser_fakeNode

          var _Browser_on = F3(function(node, eventName, sendToSelf) {
            return _Scheduler_spawn(
              _Scheduler_binding(function(callback) {
                function handler(event) {
                  _Scheduler_rawSpawn(sendToSelf(event))
                }
                node.addEventListener(
                  eventName,
                  handler,
                  _VirtualDom_passiveSupported && { passive: true },
                )
                return function() {
                  node.removeEventListener(eventName, handler)
                }
              }),
            )
          })

          var _Browser_decodeEvent = F2(function(decoder, event) {
            var result = _Json_runHelp(decoder, event)
            return elm$core$Result$isOk(result)
              ? elm$core$Maybe$Just(result.a)
              : elm$core$Maybe$Nothing
          })

          // PAGE VISIBILITY

          function _Browser_visibilityInfo() {
            return typeof _VirtualDom_doc.hidden !== 'undefined'
              ? { hidden: 'hidden', change: 'visibilitychange' }
              : typeof _VirtualDom_doc.mozHidden !== 'undefined'
              ? { hidden: 'mozHidden', change: 'mozvisibilitychange' }
              : typeof _VirtualDom_doc.msHidden !== 'undefined'
              ? { hidden: 'msHidden', change: 'msvisibilitychange' }
              : typeof _VirtualDom_doc.webkitHidden !== 'undefined'
              ? {
                  hidden: 'webkitHidden',
                  change: 'webkitvisibilitychange',
                }
              : { hidden: 'hidden', change: 'visibilitychange' }
          }

          // ANIMATION FRAMES

          function _Browser_rAF() {
            return _Scheduler_binding(function(callback) {
              var id = _Browser_requestAnimationFrame(function() {
                callback(_Scheduler_succeed(Date.now()))
              })

              return function() {
                _Browser_cancelAnimationFrame(id)
              }
            })
          }

          function _Browser_now() {
            return _Scheduler_binding(function(callback) {
              callback(_Scheduler_succeed(Date.now()))
            })
          }

          // DOM STUFF

          function _Browser_withNode(id, doStuff) {
            return _Scheduler_binding(function(callback) {
              _Browser_requestAnimationFrame(function() {
                var node = document.getElementById(id)
                callback(
                  node
                    ? _Scheduler_succeed(doStuff(node))
                    : _Scheduler_fail(
                        elm$browser$Browser$Dom$NotFound(id),
                      ),
                )
              })
            })
          }

          function _Browser_withWindow(doStuff) {
            return _Scheduler_binding(function(callback) {
              _Browser_requestAnimationFrame(function() {
                callback(_Scheduler_succeed(doStuff()))
              })
            })
          }

          // FOCUS and BLUR

          var _Browser_call = F2(function(functionName, id) {
            return _Browser_withNode(id, function(node) {
              node[functionName]()
              return _Utils_Tuple0
            })
          })

          // WINDOW VIEWPORT

          function _Browser_getViewport() {
            return {
              scene: _Browser_getScene(),
              viewport: {
                x: _Browser_window.pageXOffset,
                y: _Browser_window.pageYOffset,
                width: _Browser_doc.documentElement.clientWidth,
                height: _Browser_doc.documentElement.clientHeight,
              },
            }
          }

          function _Browser_getScene() {
            var body = _Browser_doc.body
            var elem = _Browser_doc.documentElement
            return {
              width: Math.max(
                body.scrollWidth,
                body.offsetWidth,
                elem.scrollWidth,
                elem.offsetWidth,
                elem.clientWidth,
              ),
              height: Math.max(
                body.scrollHeight,
                body.offsetHeight,
                elem.scrollHeight,
                elem.offsetHeight,
                elem.clientHeight,
              ),
            }
          }

          var _Browser_setViewport = F2(function(x, y) {
            return _Browser_withWindow(function() {
              _Browser_window.scroll(x, y)
              return _Utils_Tuple0
            })
          })

          // ELEMENT VIEWPORT

          function _Browser_getViewportOf(id) {
            return _Browser_withNode(id, function(node) {
              return {
                scene: {
                  width: node.scrollWidth,
                  height: node.scrollHeight,
                },
                viewport: {
                  x: node.scrollLeft,
                  y: node.scrollTop,
                  width: node.clientWidth,
                  height: node.clientHeight,
                },
              }
            })
          }

          var _Browser_setViewportOf = F3(function(id, x, y) {
            return _Browser_withNode(id, function(node) {
              node.scrollLeft = x
              node.scrollTop = y
              return _Utils_Tuple0
            })
          })

          // ELEMENT

          function _Browser_getElement(id) {
            return _Browser_withNode(id, function(node) {
              var rect = node.getBoundingClientRect()
              var x = _Browser_window.pageXOffset
              var y = _Browser_window.pageYOffset
              return {
                scene: _Browser_getScene(),
                viewport: {
                  x: x,
                  y: y,
                  width: _Browser_doc.documentElement.clientWidth,
                  height: _Browser_doc.documentElement.clientHeight,
                },
                element: {
                  x: x + rect.left,
                  y: y + rect.top,
                  width: rect.width,
                  height: rect.height,
                },
              }
            })
          }

          // LOAD and RELOAD

          function _Browser_reload(skipCache) {
            return A2(
              elm$core$Task$perform,
              elm$core$Basics$never,
              _Scheduler_binding(function(callback) {
                _VirtualDom_doc.location.reload(skipCache)
              }),
            )
          }

          function _Browser_load(url) {
            return A2(
              elm$core$Task$perform,
              elm$core$Basics$never,
              _Scheduler_binding(function(callback) {
                try {
                  _Browser_window.location = url
                } catch (err) {
                  // Only Firefox can throw a NS_ERROR_MALFORMED_URI exception here.
                  // Other browsers reload the page, so let's be consistent about that.
                  _VirtualDom_doc.location.reload(false)
                }
              }),
            )
          }
          var elm$core$Basics$apR = F2(function(x, f) {
            return f(x)
          })
          var elm$core$Dict$RBEmpty_elm_builtin = {
            $: 'RBEmpty_elm_builtin',
          }
          var elm$core$Dict$empty = elm$core$Dict$RBEmpty_elm_builtin
          var elm$core$Dict$Black = { $: 'Black' }
          var elm$core$Dict$RBNode_elm_builtin = F5(function(
            a,
            b,
            c,
            d,
            e,
          ) {
            return {
              $: 'RBNode_elm_builtin',
              a: a,
              b: b,
              c: c,
              d: d,
              e: e,
            }
          })
          var elm$core$Elm$JsArray$foldr = _JsArray_foldr
          var elm$core$Array$foldr = F3(function(func, baseCase, _n0) {
            var tree = _n0.c
            var tail = _n0.d
            var helper = F2(function(node, acc) {
              if (node.$ === 'SubTree') {
                var subTree = node.a
                return A3(elm$core$Elm$JsArray$foldr, helper, acc, subTree)
              } else {
                var values = node.a
                return A3(elm$core$Elm$JsArray$foldr, func, acc, values)
              }
            })
            return A3(
              elm$core$Elm$JsArray$foldr,
              helper,
              A3(elm$core$Elm$JsArray$foldr, func, baseCase, tail),
              tree,
            )
          })
          var elm$core$Basics$EQ = { $: 'EQ' }
          var elm$core$Basics$LT = { $: 'LT' }
          var elm$core$List$cons = _List_cons
          var elm$core$Array$toList = function(array) {
            return A3(
              elm$core$Array$foldr,
              elm$core$List$cons,
              _List_Nil,
              array,
            )
          }
          var elm$core$Basics$GT = { $: 'GT' }
          var elm$core$Dict$foldr = F3(function(func, acc, t) {
            foldr: while (true) {
              if (t.$ === 'RBEmpty_elm_builtin') {
                return acc
              } else {
                var key = t.b
                var value = t.c
                var left = t.d
                var right = t.e
                var $temp$func = func,
                  $temp$acc = A3(
                    func,
                    key,
                    value,
                    A3(elm$core$Dict$foldr, func, acc, right),
                  ),
                  $temp$t = left
                func = $temp$func
                acc = $temp$acc
                t = $temp$t
                continue foldr
              }
            }
          })
          var elm$core$Dict$toList = function(dict) {
            return A3(
              elm$core$Dict$foldr,
              F3(function(key, value, list) {
                return A2(
                  elm$core$List$cons,
                  _Utils_Tuple2(key, value),
                  list,
                )
              }),
              _List_Nil,
              dict,
            )
          }
          var elm$core$Dict$keys = function(dict) {
            return A3(
              elm$core$Dict$foldr,
              F3(function(key, value, keyList) {
                return A2(elm$core$List$cons, key, keyList)
              }),
              _List_Nil,
              dict,
            )
          }
          var elm$core$Set$toList = function(_n0) {
            var dict = _n0.a
            return elm$core$Dict$keys(dict)
          }
          var elm$core$Basics$compare = _Utils_compare
          var elm$core$Dict$Red = { $: 'Red' }
          var elm$core$Dict$balance = F5(function(
            color,
            key,
            value,
            left,
            right,
          ) {
            if (right.$ === 'RBNode_elm_builtin' && right.a.$ === 'Red') {
              var _n1 = right.a
              var rK = right.b
              var rV = right.c
              var rLeft = right.d
              var rRight = right.e
              if (left.$ === 'RBNode_elm_builtin' && left.a.$ === 'Red') {
                var _n3 = left.a
                var lK = left.b
                var lV = left.c
                var lLeft = left.d
                var lRight = left.e
                return A5(
                  elm$core$Dict$RBNode_elm_builtin,
                  elm$core$Dict$Red,
                  key,
                  value,
                  A5(
                    elm$core$Dict$RBNode_elm_builtin,
                    elm$core$Dict$Black,
                    lK,
                    lV,
                    lLeft,
                    lRight,
                  ),
                  A5(
                    elm$core$Dict$RBNode_elm_builtin,
                    elm$core$Dict$Black,
                    rK,
                    rV,
                    rLeft,
                    rRight,
                  ),
                )
              } else {
                return A5(
                  elm$core$Dict$RBNode_elm_builtin,
                  color,
                  rK,
                  rV,
                  A5(
                    elm$core$Dict$RBNode_elm_builtin,
                    elm$core$Dict$Red,
                    key,
                    value,
                    left,
                    rLeft,
                  ),
                  rRight,
                )
              }
            } else {
              if (
                left.$ === 'RBNode_elm_builtin' &&
                left.a.$ === 'Red' &&
                left.d.$ === 'RBNode_elm_builtin' &&
                left.d.a.$ === 'Red'
              ) {
                var _n5 = left.a
                var lK = left.b
                var lV = left.c
                var _n6 = left.d
                var _n7 = _n6.a
                var llK = _n6.b
                var llV = _n6.c
                var llLeft = _n6.d
                var llRight = _n6.e
                var lRight = left.e
                return A5(
                  elm$core$Dict$RBNode_elm_builtin,
                  elm$core$Dict$Red,
                  lK,
                  lV,
                  A5(
                    elm$core$Dict$RBNode_elm_builtin,
                    elm$core$Dict$Black,
                    llK,
                    llV,
                    llLeft,
                    llRight,
                  ),
                  A5(
                    elm$core$Dict$RBNode_elm_builtin,
                    elm$core$Dict$Black,
                    key,
                    value,
                    lRight,
                    right,
                  ),
                )
              } else {
                return A5(
                  elm$core$Dict$RBNode_elm_builtin,
                  color,
                  key,
                  value,
                  left,
                  right,
                )
              }
            }
          })
          var elm$core$Dict$insertHelp = F3(function(key, value, dict) {
            if (dict.$ === 'RBEmpty_elm_builtin') {
              return A5(
                elm$core$Dict$RBNode_elm_builtin,
                elm$core$Dict$Red,
                key,
                value,
                elm$core$Dict$RBEmpty_elm_builtin,
                elm$core$Dict$RBEmpty_elm_builtin,
              )
            } else {
              var nColor = dict.a
              var nKey = dict.b
              var nValue = dict.c
              var nLeft = dict.d
              var nRight = dict.e
              var _n1 = A2(elm$core$Basics$compare, key, nKey)
              switch (_n1.$) {
                case 'LT':
                  return A5(
                    elm$core$Dict$balance,
                    nColor,
                    nKey,
                    nValue,
                    A3(elm$core$Dict$insertHelp, key, value, nLeft),
                    nRight,
                  )
                case 'EQ':
                  return A5(
                    elm$core$Dict$RBNode_elm_builtin,
                    nColor,
                    nKey,
                    value,
                    nLeft,
                    nRight,
                  )
                default:
                  return A5(
                    elm$core$Dict$balance,
                    nColor,
                    nKey,
                    nValue,
                    nLeft,
                    A3(elm$core$Dict$insertHelp, key, value, nRight),
                  )
              }
            }
          })
          var elm$core$Dict$insert = F3(function(key, value, dict) {
            var _n0 = A3(elm$core$Dict$insertHelp, key, value, dict)
            if (_n0.$ === 'RBNode_elm_builtin' && _n0.a.$ === 'Red') {
              var _n1 = _n0.a
              var k = _n0.b
              var v = _n0.c
              var l = _n0.d
              var r = _n0.e
              return A5(
                elm$core$Dict$RBNode_elm_builtin,
                elm$core$Dict$Black,
                k,
                v,
                l,
                r,
              )
            } else {
              var x = _n0
              return x
            }
          })
          var elm$core$List$foldl = F3(function(func, acc, list) {
            foldl: while (true) {
              if (!list.b) {
                return acc
              } else {
                var x = list.a
                var xs = list.b
                var $temp$func = func,
                  $temp$acc = A2(func, x, acc),
                  $temp$list = xs
                func = $temp$func
                acc = $temp$acc
                list = $temp$list
                continue foldl
              }
            }
          })
          var elm$core$Dict$fromList = function(assocs) {
            return A3(
              elm$core$List$foldl,
              F2(function(_n0, dict) {
                var key = _n0.a
                var value = _n0.b
                return A3(elm$core$Dict$insert, key, value, dict)
              }),
              elm$core$Dict$empty,
              assocs,
            )
          }
          var elm$core$Basics$add = _Basics_add
          var elm$core$Basics$gt = _Utils_gt
          var elm$core$List$reverse = function(list) {
            return A3(
              elm$core$List$foldl,
              elm$core$List$cons,
              _List_Nil,
              list,
            )
          }
          var elm$core$List$foldrHelper = F4(function(fn, acc, ctr, ls) {
            if (!ls.b) {
              return acc
            } else {
              var a = ls.a
              var r1 = ls.b
              if (!r1.b) {
                return A2(fn, a, acc)
              } else {
                var b = r1.a
                var r2 = r1.b
                if (!r2.b) {
                  return A2(fn, a, A2(fn, b, acc))
                } else {
                  var c = r2.a
                  var r3 = r2.b
                  if (!r3.b) {
                    return A2(fn, a, A2(fn, b, A2(fn, c, acc)))
                  } else {
                    var d = r3.a
                    var r4 = r3.b
                    var res =
                      ctr > 500
                        ? A3(
                            elm$core$List$foldl,
                            fn,
                            acc,
                            elm$core$List$reverse(r4),
                          )
                        : A4(
                            elm$core$List$foldrHelper,
                            fn,
                            acc,
                            ctr + 1,
                            r4,
                          )
                    return A2(fn, a, A2(fn, b, A2(fn, c, A2(fn, d, res))))
                  }
                }
              }
            }
          })
          var elm$core$List$foldr = F3(function(fn, acc, ls) {
            return A4(elm$core$List$foldrHelper, fn, acc, 0, ls)
          })
          var elm$core$List$map = F2(function(f, xs) {
            return A3(
              elm$core$List$foldr,
              F2(function(x, acc) {
                return A2(elm$core$List$cons, f(x), acc)
              }),
              _List_Nil,
              xs,
            )
          })
          var author$project$ItemLookup$fromList = function(itemList) {
            return elm$core$Dict$fromList(
              A2(
                elm$core$List$map,
                function(item) {
                  return _Utils_Tuple2(item.id, item)
                },
                itemList,
              ),
            )
          }
          var author$project$Main$InitReceived = { $: 'InitReceived' }
          var annaghi$dnd_list$DnDList$Draggable = function(a) {
            return { $: 'Draggable', a: a }
          }
          var annaghi$dnd_list$DnDList$GotDragged = function(a) {
            return { $: 'GotDragged', a: a }
          }
          var elm$browser$Browser$External = function(a) {
            return { $: 'External', a: a }
          }
          var elm$browser$Browser$Internal = function(a) {
            return { $: 'Internal', a: a }
          }
          var elm$browser$Browser$Dom$NotFound = function(a) {
            return { $: 'NotFound', a: a }
          }
          var elm$core$Basics$never = function(_n0) {
            never: while (true) {
              var nvr = _n0.a
              var $temp$_n0 = nvr
              _n0 = $temp$_n0
              continue never
            }
          }
          var elm$core$Maybe$Just = function(a) {
            return { $: 'Just', a: a }
          }
          var elm$core$Maybe$Nothing = { $: 'Nothing' }
          var elm$core$Basics$False = { $: 'False' }
          var elm$core$Basics$True = { $: 'True' }
          var elm$core$Result$isOk = function(result) {
            if (result.$ === 'Ok') {
              return true
            } else {
              return false
            }
          }
          var elm$core$Basics$identity = function(x) {
            return x
          }
          var elm$core$Task$Perform = function(a) {
            return { $: 'Perform', a: a }
          }
          var elm$core$Task$succeed = _Scheduler_succeed
          var elm$core$Task$init = elm$core$Task$succeed(_Utils_Tuple0)
          var elm$core$Task$andThen = _Scheduler_andThen
          var elm$core$Task$map = F2(function(func, taskA) {
            return A2(
              elm$core$Task$andThen,
              function(a) {
                return elm$core$Task$succeed(func(a))
              },
              taskA,
            )
          })
          var elm$core$Task$map2 = F3(function(func, taskA, taskB) {
            return A2(
              elm$core$Task$andThen,
              function(a) {
                return A2(
                  elm$core$Task$andThen,
                  function(b) {
                    return elm$core$Task$succeed(A2(func, a, b))
                  },
                  taskB,
                )
              },
              taskA,
            )
          })
          var elm$core$Task$sequence = function(tasks) {
            return A3(
              elm$core$List$foldr,
              elm$core$Task$map2(elm$core$List$cons),
              elm$core$Task$succeed(_List_Nil),
              tasks,
            )
          }
          var elm$core$Array$branchFactor = 32
          var elm$core$Array$Array_elm_builtin = F4(function(a, b, c, d) {
            return { $: 'Array_elm_builtin', a: a, b: b, c: c, d: d }
          })
          var elm$core$Basics$ceiling = _Basics_ceiling
          var elm$core$Basics$fdiv = _Basics_fdiv
          var elm$core$Basics$logBase = F2(function(base, number) {
            return _Basics_log(number) / _Basics_log(base)
          })
          var elm$core$Basics$toFloat = _Basics_toFloat
          var elm$core$Array$shiftStep = elm$core$Basics$ceiling(
            A2(elm$core$Basics$logBase, 2, elm$core$Array$branchFactor),
          )
          var elm$core$Elm$JsArray$empty = _JsArray_empty
          var elm$core$Array$empty = A4(
            elm$core$Array$Array_elm_builtin,
            0,
            elm$core$Array$shiftStep,
            elm$core$Elm$JsArray$empty,
            elm$core$Elm$JsArray$empty,
          )
          var elm$core$Array$Leaf = function(a) {
            return { $: 'Leaf', a: a }
          }
          var elm$core$Array$SubTree = function(a) {
            return { $: 'SubTree', a: a }
          }
          var elm$core$Elm$JsArray$initializeFromList = _JsArray_initializeFromList
          var elm$core$Array$compressNodes = F2(function(nodes, acc) {
            compressNodes: while (true) {
              var _n0 = A2(
                elm$core$Elm$JsArray$initializeFromList,
                elm$core$Array$branchFactor,
                nodes,
              )
              var node = _n0.a
              var remainingNodes = _n0.b
              var newAcc = A2(
                elm$core$List$cons,
                elm$core$Array$SubTree(node),
                acc,
              )
              if (!remainingNodes.b) {
                return elm$core$List$reverse(newAcc)
              } else {
                var $temp$nodes = remainingNodes,
                  $temp$acc = newAcc
                nodes = $temp$nodes
                acc = $temp$acc
                continue compressNodes
              }
            }
          })
          var elm$core$Basics$eq = _Utils_equal
          var elm$core$Tuple$first = function(_n0) {
            var x = _n0.a
            return x
          }
          var elm$core$Array$treeFromBuilder = F2(function(
            nodeList,
            nodeListSize,
          ) {
            treeFromBuilder: while (true) {
              var newNodeSize = elm$core$Basics$ceiling(
                nodeListSize / elm$core$Array$branchFactor,
              )
              if (newNodeSize === 1) {
                return A2(
                  elm$core$Elm$JsArray$initializeFromList,
                  elm$core$Array$branchFactor,
                  nodeList,
                ).a
              } else {
                var $temp$nodeList = A2(
                    elm$core$Array$compressNodes,
                    nodeList,
                    _List_Nil,
                  ),
                  $temp$nodeListSize = newNodeSize
                nodeList = $temp$nodeList
                nodeListSize = $temp$nodeListSize
                continue treeFromBuilder
              }
            }
          })
          var elm$core$Basics$apL = F2(function(f, x) {
            return f(x)
          })
          var elm$core$Basics$floor = _Basics_floor
          var elm$core$Basics$max = F2(function(x, y) {
            return _Utils_cmp(x, y) > 0 ? x : y
          })
          var elm$core$Basics$mul = _Basics_mul
          var elm$core$Basics$sub = _Basics_sub
          var elm$core$Elm$JsArray$length = _JsArray_length
          var elm$core$Array$builderToArray = F2(function(
            reverseNodeList,
            builder,
          ) {
            if (!builder.nodeListSize) {
              return A4(
                elm$core$Array$Array_elm_builtin,
                elm$core$Elm$JsArray$length(builder.tail),
                elm$core$Array$shiftStep,
                elm$core$Elm$JsArray$empty,
                builder.tail,
              )
            } else {
              var treeLen =
                builder.nodeListSize * elm$core$Array$branchFactor
              var depth = elm$core$Basics$floor(
                A2(
                  elm$core$Basics$logBase,
                  elm$core$Array$branchFactor,
                  treeLen - 1,
                ),
              )
              var correctNodeList = reverseNodeList
                ? elm$core$List$reverse(builder.nodeList)
                : builder.nodeList
              var tree = A2(
                elm$core$Array$treeFromBuilder,
                correctNodeList,
                builder.nodeListSize,
              )
              return A4(
                elm$core$Array$Array_elm_builtin,
                elm$core$Elm$JsArray$length(builder.tail) + treeLen,
                A2(
                  elm$core$Basics$max,
                  5,
                  depth * elm$core$Array$shiftStep,
                ),
                tree,
                builder.tail,
              )
            }
          })
          var elm$core$Basics$idiv = _Basics_idiv
          var elm$core$Basics$lt = _Utils_lt
          var elm$core$Elm$JsArray$initialize = _JsArray_initialize
          var elm$core$Array$initializeHelp = F5(function(
            fn,
            fromIndex,
            len,
            nodeList,
            tail,
          ) {
            initializeHelp: while (true) {
              if (fromIndex < 0) {
                return A2(elm$core$Array$builderToArray, false, {
                  nodeList: nodeList,
                  nodeListSize: (len / elm$core$Array$branchFactor) | 0,
                  tail: tail,
                })
              } else {
                var leaf = elm$core$Array$Leaf(
                  A3(
                    elm$core$Elm$JsArray$initialize,
                    elm$core$Array$branchFactor,
                    fromIndex,
                    fn,
                  ),
                )
                var $temp$fn = fn,
                  $temp$fromIndex =
                    fromIndex - elm$core$Array$branchFactor,
                  $temp$len = len,
                  $temp$nodeList = A2(elm$core$List$cons, leaf, nodeList),
                  $temp$tail = tail
                fn = $temp$fn
                fromIndex = $temp$fromIndex
                len = $temp$len
                nodeList = $temp$nodeList
                tail = $temp$tail
                continue initializeHelp
              }
            }
          })
          var elm$core$Basics$le = _Utils_le
          var elm$core$Basics$remainderBy = _Basics_remainderBy
          var elm$core$Array$initialize = F2(function(len, fn) {
            if (len <= 0) {
              return elm$core$Array$empty
            } else {
              var tailLen = len % elm$core$Array$branchFactor
              var tail = A3(
                elm$core$Elm$JsArray$initialize,
                tailLen,
                len - tailLen,
                fn,
              )
              var initialFromIndex =
                len - tailLen - elm$core$Array$branchFactor
              return A5(
                elm$core$Array$initializeHelp,
                fn,
                initialFromIndex,
                len,
                _List_Nil,
                tail,
              )
            }
          })
          var elm$core$Result$Err = function(a) {
            return { $: 'Err', a: a }
          }
          var elm$core$Result$Ok = function(a) {
            return { $: 'Ok', a: a }
          }
          var elm$json$Json$Decode$Failure = F2(function(a, b) {
            return { $: 'Failure', a: a, b: b }
          })
          var elm$json$Json$Decode$Field = F2(function(a, b) {
            return { $: 'Field', a: a, b: b }
          })
          var elm$json$Json$Decode$Index = F2(function(a, b) {
            return { $: 'Index', a: a, b: b }
          })
          var elm$json$Json$Decode$OneOf = function(a) {
            return { $: 'OneOf', a: a }
          }
          var elm$core$Basics$and = _Basics_and
          var elm$core$Basics$append = _Utils_append
          var elm$core$Basics$or = _Basics_or
          var elm$core$Char$toCode = _Char_toCode
          var elm$core$Char$isLower = function(_char) {
            var code = elm$core$Char$toCode(_char)
            return 97 <= code && code <= 122
          }
          var elm$core$Char$isUpper = function(_char) {
            var code = elm$core$Char$toCode(_char)
            return code <= 90 && 65 <= code
          }
          var elm$core$Char$isAlpha = function(_char) {
            return (
              elm$core$Char$isLower(_char) || elm$core$Char$isUpper(_char)
            )
          }
          var elm$core$Char$isDigit = function(_char) {
            var code = elm$core$Char$toCode(_char)
            return code <= 57 && 48 <= code
          }
          var elm$core$Char$isAlphaNum = function(_char) {
            return (
              elm$core$Char$isLower(_char) ||
              (elm$core$Char$isUpper(_char) ||
                elm$core$Char$isDigit(_char))
            )
          }
          var elm$core$List$length = function(xs) {
            return A3(
              elm$core$List$foldl,
              F2(function(_n0, i) {
                return i + 1
              }),
              0,
              xs,
            )
          }
          var elm$core$List$map2 = _List_map2
          var elm$core$List$rangeHelp = F3(function(lo, hi, list) {
            rangeHelp: while (true) {
              if (_Utils_cmp(lo, hi) < 1) {
                var $temp$lo = lo,
                  $temp$hi = hi - 1,
                  $temp$list = A2(elm$core$List$cons, hi, list)
                lo = $temp$lo
                hi = $temp$hi
                list = $temp$list
                continue rangeHelp
              } else {
                return list
              }
            }
          })
          var elm$core$List$range = F2(function(lo, hi) {
            return A3(elm$core$List$rangeHelp, lo, hi, _List_Nil)
          })
          var elm$core$List$indexedMap = F2(function(f, xs) {
            return A3(
              elm$core$List$map2,
              f,
              A2(elm$core$List$range, 0, elm$core$List$length(xs) - 1),
              xs,
            )
          })
          var elm$core$String$all = _String_all
          var elm$core$String$fromInt = _String_fromNumber
          var elm$core$String$join = F2(function(sep, chunks) {
            return A2(_String_join, sep, _List_toArray(chunks))
          })
          var elm$core$String$uncons = _String_uncons
          var elm$core$String$split = F2(function(sep, string) {
            return _List_fromArray(A2(_String_split, sep, string))
          })
          var elm$json$Json$Decode$indent = function(str) {
            return A2(
              elm$core$String$join,
              '\n    ',
              A2(elm$core$String$split, '\n', str),
            )
          }
          var elm$json$Json$Encode$encode = _Json_encode
          var elm$json$Json$Decode$errorOneOf = F2(function(i, error) {
            return (
              '\n\n(' +
              (elm$core$String$fromInt(i + 1) +
                (') ' +
                  elm$json$Json$Decode$indent(
                    elm$json$Json$Decode$errorToString(error),
                  )))
            )
          })
          var elm$json$Json$Decode$errorToString = function(error) {
            return A2(
              elm$json$Json$Decode$errorToStringHelp,
              error,
              _List_Nil,
            )
          }
          var elm$json$Json$Decode$errorToStringHelp = F2(function(
            error,
            context,
          ) {
            errorToStringHelp: while (true) {
              switch (error.$) {
                case 'Field':
                  var f = error.a
                  var err = error.b
                  var isSimple = (function() {
                    var _n1 = elm$core$String$uncons(f)
                    if (_n1.$ === 'Nothing') {
                      return false
                    } else {
                      var _n2 = _n1.a
                      var _char = _n2.a
                      var rest = _n2.b
                      return (
                        elm$core$Char$isAlpha(_char) &&
                        A2(
                          elm$core$String$all,
                          elm$core$Char$isAlphaNum,
                          rest,
                        )
                      )
                    }
                  })()
                  var fieldName = isSimple ? '.' + f : "['" + (f + "']")
                  var $temp$error = err,
                    $temp$context = A2(
                      elm$core$List$cons,
                      fieldName,
                      context,
                    )
                  error = $temp$error
                  context = $temp$context
                  continue errorToStringHelp
                case 'Index':
                  var i = error.a
                  var err = error.b
                  var indexName = '[' + (elm$core$String$fromInt(i) + ']')
                  var $temp$error = err,
                    $temp$context = A2(
                      elm$core$List$cons,
                      indexName,
                      context,
                    )
                  error = $temp$error
                  context = $temp$context
                  continue errorToStringHelp
                case 'OneOf':
                  var errors = error.a
                  if (!errors.b) {
                    return (
                      'Ran into a Json.Decode.oneOf with no possibilities' +
                      (function() {
                        if (!context.b) {
                          return '!'
                        } else {
                          return (
                            ' at json' +
                            A2(
                              elm$core$String$join,
                              '',
                              elm$core$List$reverse(context),
                            )
                          )
                        }
                      })()
                    )
                  } else {
                    if (!errors.b.b) {
                      var err = errors.a
                      var $temp$error = err,
                        $temp$context = context
                      error = $temp$error
                      context = $temp$context
                      continue errorToStringHelp
                    } else {
                      var starter = (function() {
                        if (!context.b) {
                          return 'Json.Decode.oneOf'
                        } else {
                          return (
                            'The Json.Decode.oneOf at json' +
                            A2(
                              elm$core$String$join,
                              '',
                              elm$core$List$reverse(context),
                            )
                          )
                        }
                      })()
                      var introduction =
                        starter +
                        (' failed in the following ' +
                          (elm$core$String$fromInt(
                            elm$core$List$length(errors),
                          ) +
                            ' ways:'))
                      return A2(
                        elm$core$String$join,
                        '\n\n',
                        A2(
                          elm$core$List$cons,
                          introduction,
                          A2(
                            elm$core$List$indexedMap,
                            elm$json$Json$Decode$errorOneOf,
                            errors,
                          ),
                        ),
                      )
                    }
                  }
                default:
                  var msg = error.a
                  var json = error.b
                  var introduction = (function() {
                    if (!context.b) {
                      return 'Problem with the given value:\n\n'
                    } else {
                      return (
                        'Problem with the value at json' +
                        (A2(
                          elm$core$String$join,
                          '',
                          elm$core$List$reverse(context),
                        ) +
                          ':\n\n    ')
                      )
                    }
                  })()
                  return (
                    introduction +
                    (elm$json$Json$Decode$indent(
                      A2(elm$json$Json$Encode$encode, 4, json),
                    ) +
                      ('\n\n' + msg))
                  )
              }
            }
          })
          var elm$core$Platform$sendToApp = _Platform_sendToApp
          var elm$core$Task$spawnCmd = F2(function(router, _n0) {
            var task = _n0.a
            return _Scheduler_spawn(
              A2(
                elm$core$Task$andThen,
                elm$core$Platform$sendToApp(router),
                task,
              ),
            )
          })
          var elm$core$Task$onEffects = F3(function(
            router,
            commands,
            state,
          ) {
            return A2(
              elm$core$Task$map,
              function(_n0) {
                return _Utils_Tuple0
              },
              elm$core$Task$sequence(
                A2(
                  elm$core$List$map,
                  elm$core$Task$spawnCmd(router),
                  commands,
                ),
              ),
            )
          })
          var elm$core$Task$onSelfMsg = F3(function(_n0, _n1, _n2) {
            return elm$core$Task$succeed(_Utils_Tuple0)
          })
          var elm$core$Task$cmdMap = F2(function(tagger, _n0) {
            var task = _n0.a
            return elm$core$Task$Perform(
              A2(elm$core$Task$map, tagger, task),
            )
          })
          _Platform_effectManagers['Task'] = _Platform_createManager(
            elm$core$Task$init,
            elm$core$Task$onEffects,
            elm$core$Task$onSelfMsg,
            elm$core$Task$cmdMap,
          )
          var elm$core$Task$command = _Platform_leaf('Task')
          var elm$core$Task$perform = F2(function(toMessage, task) {
            return elm$core$Task$command(
              elm$core$Task$Perform(
                A2(elm$core$Task$map, toMessage, task),
              ),
            )
          })
          var elm$json$Json$Decode$map = _Json_map1
          var elm$browser$Debugger$Expando$ArraySeq = { $: 'ArraySeq' }
          var elm$browser$Debugger$Expando$Constructor = F3(function(
            a,
            b,
            c,
          ) {
            return { $: 'Constructor', a: a, b: b, c: c }
          })
          var elm$browser$Debugger$Expando$Dictionary = F2(function(a, b) {
            return { $: 'Dictionary', a: a, b: b }
          })
          var elm$browser$Debugger$Expando$ListSeq = { $: 'ListSeq' }
          var elm$browser$Debugger$Expando$Primitive = function(a) {
            return { $: 'Primitive', a: a }
          }
          var elm$browser$Debugger$Expando$Record = F2(function(a, b) {
            return { $: 'Record', a: a, b: b }
          })
          var elm$browser$Debugger$Expando$S = function(a) {
            return { $: 'S', a: a }
          }
          var elm$browser$Debugger$Expando$Sequence = F3(function(
            a,
            b,
            c,
          ) {
            return { $: 'Sequence', a: a, b: b, c: c }
          })
          var elm$browser$Debugger$Expando$SetSeq = { $: 'SetSeq' }
          var elm$browser$Debugger$Main$Down = { $: 'Down' }
          var elm$browser$Debugger$Main$NoOp = { $: 'NoOp' }
          var elm$browser$Debugger$Main$Up = { $: 'Up' }
          var elm$browser$Debugger$Main$UserMsg = function(a) {
            return { $: 'UserMsg', a: a }
          }
          var elm$browser$Debugger$History$size = function(history) {
            return history.numMessages
          }
          var elm$browser$Debugger$Main$Export = { $: 'Export' }
          var elm$browser$Debugger$Main$Import = { $: 'Import' }
          var elm$browser$Debugger$Main$Open = { $: 'Open' }
          var elm$browser$Debugger$Main$OverlayMsg = function(a) {
            return { $: 'OverlayMsg', a: a }
          }
          var elm$browser$Debugger$Main$Resume = { $: 'Resume' }
          var elm$browser$Debugger$Main$isPaused = function(state) {
            if (state.$ === 'Running') {
              return false
            } else {
              return true
            }
          }
          var elm$browser$Debugger$Overlay$Accept = function(a) {
            return { $: 'Accept', a: a }
          }
          var elm$browser$Debugger$Overlay$Choose = F2(function(a, b) {
            return { $: 'Choose', a: a, b: b }
          })
          var elm$browser$Debugger$Overlay$goodNews1 =
            '\nThe good news is that having values like this in your message type is not\nso great in the long run. You are better off using simpler data, like\n'
          var elm$browser$Debugger$Overlay$goodNews2 =
            '\nfunction can pattern match on that data and call whatever functions, JSON\ndecoders, etc. you need. This makes the code much more explicit and easy to\nfollow for other readers (or you in a few months!)\n'
          var elm$json$Json$Decode$map2 = _Json_map2
          var elm$json$Json$Decode$succeed = _Json_succeed
          var elm$virtual_dom$VirtualDom$toHandlerInt = function(handler) {
            switch (handler.$) {
              case 'Normal':
                return 0
              case 'MayStopPropagation':
                return 1
              case 'MayPreventDefault':
                return 2
              default:
                return 3
            }
          }
          var elm$html$Html$code = _VirtualDom_node('code')
          var elm$virtual_dom$VirtualDom$text = _VirtualDom_text
          var elm$html$Html$text = elm$virtual_dom$VirtualDom$text
          var elm$browser$Debugger$Overlay$viewCode = function(name) {
            return A2(
              elm$html$Html$code,
              _List_Nil,
              _List_fromArray([elm$html$Html$text(name)]),
            )
          }
          var elm$browser$Debugger$Overlay$addCommas = function(items) {
            if (!items.b) {
              return ''
            } else {
              if (!items.b.b) {
                var item = items.a
                return item
              } else {
                if (!items.b.b.b) {
                  var item1 = items.a
                  var _n1 = items.b
                  var item2 = _n1.a
                  return item1 + (' and ' + item2)
                } else {
                  var lastItem = items.a
                  var otherItems = items.b
                  return A2(
                    elm$core$String$join,
                    ', ',
                    _Utils_ap(
                      otherItems,
                      _List_fromArray([' and ' + lastItem]),
                    ),
                  )
                }
              }
            }
          }
          var elm$browser$Debugger$Overlay$problemToString = function(
            problem,
          ) {
            switch (problem.$) {
              case 'Function':
                return 'functions'
              case 'Decoder':
                return 'JSON decoders'
              case 'Task':
                return 'tasks'
              case 'Process':
                return 'processes'
              case 'Socket':
                return 'web sockets'
              case 'Request':
                return 'HTTP requests'
              case 'Program':
                return 'programs'
              default:
                return 'virtual DOM values'
            }
          }
          var elm$html$Html$li = _VirtualDom_node('li')
          var elm$browser$Debugger$Overlay$viewProblemType = function(
            _n0,
          ) {
            var name = _n0.name
            var problems = _n0.problems
            return A2(
              elm$html$Html$li,
              _List_Nil,
              _List_fromArray([
                elm$browser$Debugger$Overlay$viewCode(name),
                elm$html$Html$text(
                  ' can contain ' +
                    (elm$browser$Debugger$Overlay$addCommas(
                      A2(
                        elm$core$List$map,
                        elm$browser$Debugger$Overlay$problemToString,
                        problems,
                      ),
                    ) +
                      '.'),
                ),
              ]),
            )
          }
          var elm$html$Html$a = _VirtualDom_node('a')
          var elm$html$Html$p = _VirtualDom_node('p')
          var elm$html$Html$ul = _VirtualDom_node('ul')
          var elm$json$Json$Encode$string = _Json_wrap
          var elm$html$Html$Attributes$stringProperty = F2(function(
            key,
            string,
          ) {
            return A2(
              _VirtualDom_property,
              key,
              elm$json$Json$Encode$string(string),
            )
          })
          var elm$html$Html$Attributes$href = function(url) {
            return A2(
              elm$html$Html$Attributes$stringProperty,
              'href',
              _VirtualDom_noJavaScriptUri(url),
            )
          }
          var elm$browser$Debugger$Overlay$viewBadMetadata = function(
            _n0,
          ) {
            var message = _n0.message
            var problems = _n0.problems
            return _List_fromArray([
              A2(
                elm$html$Html$p,
                _List_Nil,
                _List_fromArray([
                  elm$html$Html$text('The '),
                  elm$browser$Debugger$Overlay$viewCode(message),
                  elm$html$Html$text(
                    ' type of your program cannot be reliably serialized for history files.',
                  ),
                ]),
              ),
              A2(
                elm$html$Html$p,
                _List_Nil,
                _List_fromArray([
                  elm$html$Html$text(
                    'Functions cannot be serialized, nor can values that contain functions. This is a problem in these places:',
                  ),
                ]),
              ),
              A2(
                elm$html$Html$ul,
                _List_Nil,
                A2(
                  elm$core$List$map,
                  elm$browser$Debugger$Overlay$viewProblemType,
                  problems,
                ),
              ),
              A2(
                elm$html$Html$p,
                _List_Nil,
                _List_fromArray([
                  elm$html$Html$text(
                    elm$browser$Debugger$Overlay$goodNews1,
                  ),
                  A2(
                    elm$html$Html$a,
                    _List_fromArray([
                      elm$html$Html$Attributes$href(
                        'https://guide.elm-lang.org/types/union_types.html',
                      ),
                    ]),
                    _List_fromArray([elm$html$Html$text('union types')]),
                  ),
                  elm$html$Html$text(
                    ', in your messages. From there, your ',
                  ),
                  elm$browser$Debugger$Overlay$viewCode('update'),
                  elm$html$Html$text(
                    elm$browser$Debugger$Overlay$goodNews2,
                  ),
                ]),
              ),
            ])
          }
          var elm$browser$Debugger$Overlay$Cancel = { $: 'Cancel' }
          var elm$browser$Debugger$Overlay$Proceed = { $: 'Proceed' }
          var elm$html$Html$button = _VirtualDom_node('button')
          var elm$html$Html$div = _VirtualDom_node('div')
          var elm$virtual_dom$VirtualDom$style = _VirtualDom_style
          var elm$html$Html$Attributes$style = elm$virtual_dom$VirtualDom$style
          var elm$virtual_dom$VirtualDom$Normal = function(a) {
            return { $: 'Normal', a: a }
          }
          var elm$virtual_dom$VirtualDom$on = _VirtualDom_on
          var elm$html$Html$Events$on = F2(function(event, decoder) {
            return A2(
              elm$virtual_dom$VirtualDom$on,
              event,
              elm$virtual_dom$VirtualDom$Normal(decoder),
            )
          })
          var elm$html$Html$Events$onClick = function(msg) {
            return A2(
              elm$html$Html$Events$on,
              'click',
              elm$json$Json$Decode$succeed(msg),
            )
          }
          var elm$browser$Debugger$Overlay$viewButtons = function(
            buttons,
          ) {
            var btn = F2(function(msg, string) {
              return A2(
                elm$html$Html$button,
                _List_fromArray([
                  A2(
                    elm$html$Html$Attributes$style,
                    'margin-right',
                    '20px',
                  ),
                  elm$html$Html$Events$onClick(msg),
                ]),
                _List_fromArray([elm$html$Html$text(string)]),
              )
            })
            var buttonNodes = (function() {
              if (buttons.$ === 'Accept') {
                var proceed = buttons.a
                return _List_fromArray([
                  A2(btn, elm$browser$Debugger$Overlay$Proceed, proceed),
                ])
              } else {
                var cancel = buttons.a
                var proceed = buttons.b
                return _List_fromArray([
                  A2(btn, elm$browser$Debugger$Overlay$Cancel, cancel),
                  A2(btn, elm$browser$Debugger$Overlay$Proceed, proceed),
                ])
              }
            })()
            return A2(
              elm$html$Html$div,
              _List_fromArray([
                A2(elm$html$Html$Attributes$style, 'height', '60px'),
                A2(elm$html$Html$Attributes$style, 'line-height', '60px'),
                A2(elm$html$Html$Attributes$style, 'text-align', 'right'),
                A2(
                  elm$html$Html$Attributes$style,
                  'background-color',
                  'rgb(50, 50, 50)',
                ),
              ]),
              buttonNodes,
            )
          }
          var elm$virtual_dom$VirtualDom$map = _VirtualDom_map
          var elm$html$Html$map = elm$virtual_dom$VirtualDom$map
          var elm$html$Html$Attributes$id = elm$html$Html$Attributes$stringProperty(
            'id',
          )
          var elm$browser$Debugger$Overlay$viewMessage = F4(function(
            config,
            title,
            details,
            buttons,
          ) {
            return A2(
              elm$html$Html$div,
              _List_fromArray([
                elm$html$Html$Attributes$id('elm-debugger-overlay'),
                A2(elm$html$Html$Attributes$style, 'position', 'fixed'),
                A2(elm$html$Html$Attributes$style, 'top', '0'),
                A2(elm$html$Html$Attributes$style, 'left', '0'),
                A2(elm$html$Html$Attributes$style, 'width', '100%'),
                A2(elm$html$Html$Attributes$style, 'height', '100%'),
                A2(elm$html$Html$Attributes$style, 'color', 'white'),
                A2(
                  elm$html$Html$Attributes$style,
                  'pointer-events',
                  'none',
                ),
                A2(
                  elm$html$Html$Attributes$style,
                  'font-family',
                  "'Trebuchet MS', 'Lucida Grande', 'Bitstream Vera Sans', 'Helvetica Neue', sans-serif",
                ),
                A2(
                  elm$html$Html$Attributes$style,
                  'z-index',
                  '2147483647',
                ),
              ]),
              _List_fromArray([
                A2(
                  elm$html$Html$div,
                  _List_fromArray([
                    A2(
                      elm$html$Html$Attributes$style,
                      'position',
                      'absolute',
                    ),
                    A2(elm$html$Html$Attributes$style, 'width', '600px'),
                    A2(elm$html$Html$Attributes$style, 'height', '100%'),
                    A2(
                      elm$html$Html$Attributes$style,
                      'padding-left',
                      'calc(50% - 300px)',
                    ),
                    A2(
                      elm$html$Html$Attributes$style,
                      'padding-right',
                      'calc(50% - 300px)',
                    ),
                    A2(
                      elm$html$Html$Attributes$style,
                      'background-color',
                      'rgba(200, 200, 200, 0.7)',
                    ),
                    A2(
                      elm$html$Html$Attributes$style,
                      'pointer-events',
                      'auto',
                    ),
                  ]),
                  _List_fromArray([
                    A2(
                      elm$html$Html$div,
                      _List_fromArray([
                        A2(
                          elm$html$Html$Attributes$style,
                          'font-size',
                          '36px',
                        ),
                        A2(
                          elm$html$Html$Attributes$style,
                          'height',
                          '80px',
                        ),
                        A2(
                          elm$html$Html$Attributes$style,
                          'background-color',
                          'rgb(50, 50, 50)',
                        ),
                        A2(
                          elm$html$Html$Attributes$style,
                          'padding-left',
                          '22px',
                        ),
                        A2(
                          elm$html$Html$Attributes$style,
                          'vertical-align',
                          'middle',
                        ),
                        A2(
                          elm$html$Html$Attributes$style,
                          'line-height',
                          '80px',
                        ),
                      ]),
                      _List_fromArray([elm$html$Html$text(title)]),
                    ),
                    A2(
                      elm$html$Html$div,
                      _List_fromArray([
                        elm$html$Html$Attributes$id(
                          'elm-debugger-details',
                        ),
                        A2(
                          elm$html$Html$Attributes$style,
                          'padding',
                          ' 8px 20px',
                        ),
                        A2(
                          elm$html$Html$Attributes$style,
                          'overflow-y',
                          'auto',
                        ),
                        A2(
                          elm$html$Html$Attributes$style,
                          'max-height',
                          'calc(100% - 156px)',
                        ),
                        A2(
                          elm$html$Html$Attributes$style,
                          'background-color',
                          'rgb(61, 61, 61)',
                        ),
                      ]),
                      details,
                    ),
                    A2(
                      elm$html$Html$map,
                      config.wrap,
                      elm$browser$Debugger$Overlay$viewButtons(buttons),
                    ),
                  ]),
                ),
              ]),
            )
          })
          var elm$html$Html$span = _VirtualDom_node('span')
          var elm$browser$Debugger$Overlay$button = F2(function(
            msg,
            label,
          ) {
            return A2(
              elm$html$Html$span,
              _List_fromArray([
                elm$html$Html$Events$onClick(msg),
                A2(elm$html$Html$Attributes$style, 'cursor', 'pointer'),
              ]),
              _List_fromArray([elm$html$Html$text(label)]),
            )
          })
          var elm$browser$Debugger$Overlay$viewImportExport = F3(function(
            props,
            importMsg,
            exportMsg,
          ) {
            return A2(
              elm$html$Html$div,
              props,
              _List_fromArray([
                A2(
                  elm$browser$Debugger$Overlay$button,
                  importMsg,
                  'Import',
                ),
                elm$html$Html$text(' / '),
                A2(
                  elm$browser$Debugger$Overlay$button,
                  exportMsg,
                  'Export',
                ),
              ]),
            )
          })
          var elm$browser$Debugger$Overlay$viewMiniControls = F2(function(
            config,
            numMsgs,
          ) {
            return A2(
              elm$html$Html$div,
              _List_fromArray([
                A2(elm$html$Html$Attributes$style, 'position', 'fixed'),
                A2(elm$html$Html$Attributes$style, 'bottom', '0'),
                A2(elm$html$Html$Attributes$style, 'right', '6px'),
                A2(elm$html$Html$Attributes$style, 'border-radius', '4px'),
                A2(
                  elm$html$Html$Attributes$style,
                  'background-color',
                  'rgb(61, 61, 61)',
                ),
                A2(elm$html$Html$Attributes$style, 'color', 'white'),
                A2(
                  elm$html$Html$Attributes$style,
                  'font-family',
                  'monospace',
                ),
                A2(
                  elm$html$Html$Attributes$style,
                  'pointer-events',
                  'auto',
                ),
                A2(
                  elm$html$Html$Attributes$style,
                  'z-index',
                  '2147483647',
                ),
              ]),
              _List_fromArray([
                A2(
                  elm$html$Html$div,
                  _List_fromArray([
                    A2(elm$html$Html$Attributes$style, 'padding', '6px'),
                    A2(
                      elm$html$Html$Attributes$style,
                      'cursor',
                      'pointer',
                    ),
                    A2(
                      elm$html$Html$Attributes$style,
                      'text-align',
                      'center',
                    ),
                    A2(
                      elm$html$Html$Attributes$style,
                      'min-width',
                      '24ch',
                    ),
                    elm$html$Html$Events$onClick(config.open),
                  ]),
                  _List_fromArray([
                    elm$html$Html$text(
                      'Explore History (' +
                        (elm$core$String$fromInt(numMsgs) + ')'),
                    ),
                  ]),
                ),
                A3(
                  elm$browser$Debugger$Overlay$viewImportExport,
                  _List_fromArray([
                    A2(elm$html$Html$Attributes$style, 'padding', '4px 0'),
                    A2(
                      elm$html$Html$Attributes$style,
                      'font-size',
                      '0.8em',
                    ),
                    A2(
                      elm$html$Html$Attributes$style,
                      'text-align',
                      'center',
                    ),
                    A2(
                      elm$html$Html$Attributes$style,
                      'background-color',
                      'rgb(50, 50, 50)',
                    ),
                  ]),
                  config.importHistory,
                  config.exportHistory,
                ),
              ]),
            )
          })
          var elm$browser$Debugger$Overlay$explanationBad =
            '\nThe messages in this history do not match the messages handled by your\nprogram. I noticed changes in the following types:\n'
          var elm$browser$Debugger$Overlay$explanationRisky =
            '\nThis history seems old. It will work with this program, but some\nmessages have been added since the history was created:\n'
          var elm$core$List$intersperse = F2(function(sep, xs) {
            if (!xs.b) {
              return _List_Nil
            } else {
              var hd = xs.a
              var tl = xs.b
              var step = F2(function(x, rest) {
                return A2(
                  elm$core$List$cons,
                  sep,
                  A2(elm$core$List$cons, x, rest),
                )
              })
              var spersed = A3(elm$core$List$foldr, step, _List_Nil, tl)
              return A2(elm$core$List$cons, hd, spersed)
            }
          })
          var elm$browser$Debugger$Overlay$viewMention = F2(function(
            tags,
            verbed,
          ) {
            var _n0 = A2(
              elm$core$List$map,
              elm$browser$Debugger$Overlay$viewCode,
              elm$core$List$reverse(tags),
            )
            if (!_n0.b) {
              return elm$html$Html$text('')
            } else {
              if (!_n0.b.b) {
                var tag = _n0.a
                return A2(
                  elm$html$Html$li,
                  _List_Nil,
                  _List_fromArray([
                    elm$html$Html$text(verbed),
                    tag,
                    elm$html$Html$text('.'),
                  ]),
                )
              } else {
                if (!_n0.b.b.b) {
                  var tag2 = _n0.a
                  var _n1 = _n0.b
                  var tag1 = _n1.a
                  return A2(
                    elm$html$Html$li,
                    _List_Nil,
                    _List_fromArray([
                      elm$html$Html$text(verbed),
                      tag1,
                      elm$html$Html$text(' and '),
                      tag2,
                      elm$html$Html$text('.'),
                    ]),
                  )
                } else {
                  var lastTag = _n0.a
                  var otherTags = _n0.b
                  return A2(
                    elm$html$Html$li,
                    _List_Nil,
                    A2(
                      elm$core$List$cons,
                      elm$html$Html$text(verbed),
                      _Utils_ap(
                        A2(
                          elm$core$List$intersperse,
                          elm$html$Html$text(', '),
                          elm$core$List$reverse(otherTags),
                        ),
                        _List_fromArray([
                          elm$html$Html$text(', and '),
                          lastTag,
                          elm$html$Html$text('.'),
                        ]),
                      ),
                    ),
                  )
                }
              }
            }
          })
          var elm$browser$Debugger$Overlay$viewChange = function(change) {
            return A2(
              elm$html$Html$li,
              _List_fromArray([
                A2(elm$html$Html$Attributes$style, 'margin', '8px 0'),
              ]),
              (function() {
                if (change.$ === 'AliasChange') {
                  var name = change.a
                  return _List_fromArray([
                    A2(
                      elm$html$Html$span,
                      _List_fromArray([
                        A2(
                          elm$html$Html$Attributes$style,
                          'font-size',
                          '1.5em',
                        ),
                      ]),
                      _List_fromArray([
                        elm$browser$Debugger$Overlay$viewCode(name),
                      ]),
                    ),
                  ])
                } else {
                  var name = change.a
                  var removed = change.b.removed
                  var changed = change.b.changed
                  var added = change.b.added
                  var argsMatch = change.b.argsMatch
                  return _List_fromArray([
                    A2(
                      elm$html$Html$span,
                      _List_fromArray([
                        A2(
                          elm$html$Html$Attributes$style,
                          'font-size',
                          '1.5em',
                        ),
                      ]),
                      _List_fromArray([
                        elm$browser$Debugger$Overlay$viewCode(name),
                      ]),
                    ),
                    A2(
                      elm$html$Html$ul,
                      _List_fromArray([
                        A2(
                          elm$html$Html$Attributes$style,
                          'list-style-type',
                          'disc',
                        ),
                        A2(
                          elm$html$Html$Attributes$style,
                          'padding-left',
                          '2em',
                        ),
                      ]),
                      _List_fromArray([
                        A2(
                          elm$browser$Debugger$Overlay$viewMention,
                          removed,
                          'Removed ',
                        ),
                        A2(
                          elm$browser$Debugger$Overlay$viewMention,
                          changed,
                          'Changed ',
                        ),
                        A2(
                          elm$browser$Debugger$Overlay$viewMention,
                          added,
                          'Added ',
                        ),
                      ]),
                    ),
                    argsMatch
                      ? elm$html$Html$text('')
                      : elm$html$Html$text(
                          'This may be due to the fact that the type variable names changed.',
                        ),
                  ])
                }
              })(),
            )
          }
          var elm$browser$Debugger$Overlay$viewReport = F2(function(
            isBad,
            report,
          ) {
            switch (report.$) {
              case 'CorruptHistory':
                return _List_fromArray([
                  elm$html$Html$text(
                    'Looks like this history file is corrupt. I cannot understand it.',
                  ),
                ])
              case 'VersionChanged':
                var old = report.a
                var _new = report.b
                return _List_fromArray([
                  elm$html$Html$text(
                    'This history was created with Elm ' +
                      (old +
                        (', but you are using Elm ' +
                          (_new + ' right now.'))),
                  ),
                ])
              case 'MessageChanged':
                var old = report.a
                var _new = report.b
                return _List_fromArray([
                  elm$html$Html$text(
                    'To import some other history, the overall message type must' +
                      ' be the same. The old history has ',
                  ),
                  elm$browser$Debugger$Overlay$viewCode(old),
                  elm$html$Html$text(
                    ' messages, but the new program works with ',
                  ),
                  elm$browser$Debugger$Overlay$viewCode(_new),
                  elm$html$Html$text(' messages.'),
                ])
              default:
                var changes = report.a
                return _List_fromArray([
                  A2(
                    elm$html$Html$p,
                    _List_Nil,
                    _List_fromArray([
                      elm$html$Html$text(
                        isBad
                          ? elm$browser$Debugger$Overlay$explanationBad
                          : elm$browser$Debugger$Overlay$explanationRisky,
                      ),
                    ]),
                  ),
                  A2(
                    elm$html$Html$ul,
                    _List_fromArray([
                      A2(
                        elm$html$Html$Attributes$style,
                        'list-style-type',
                        'none',
                      ),
                      A2(
                        elm$html$Html$Attributes$style,
                        'padding-left',
                        '20px',
                      ),
                    ]),
                    A2(
                      elm$core$List$map,
                      elm$browser$Debugger$Overlay$viewChange,
                      changes,
                    ),
                  ),
                ])
            }
          })
          var elm$browser$Debugger$Overlay$view = F5(function(
            config,
            isPaused,
            isOpen,
            numMsgs,
            state,
          ) {
            switch (state.$) {
              case 'None':
                return isOpen
                  ? elm$html$Html$text('')
                  : isPaused
                  ? A2(
                      elm$html$Html$div,
                      _List_fromArray([
                        A2(
                          elm$html$Html$Attributes$style,
                          'width',
                          '100%',
                        ),
                        A2(
                          elm$html$Html$Attributes$style,
                          'height',
                          '100%',
                        ),
                        A2(
                          elm$html$Html$Attributes$style,
                          'cursor',
                          'pointer',
                        ),
                        A2(
                          elm$html$Html$Attributes$style,
                          'text-align',
                          'center',
                        ),
                        A2(
                          elm$html$Html$Attributes$style,
                          'pointer-events',
                          'auto',
                        ),
                        A2(
                          elm$html$Html$Attributes$style,
                          'background-color',
                          'rgba(200, 200, 200, 0.7)',
                        ),
                        A2(
                          elm$html$Html$Attributes$style,
                          'color',
                          'white',
                        ),
                        A2(
                          elm$html$Html$Attributes$style,
                          'font-family',
                          "'Trebuchet MS', 'Lucida Grande', 'Bitstream Vera Sans', 'Helvetica Neue', sans-serif",
                        ),
                        A2(
                          elm$html$Html$Attributes$style,
                          'z-index',
                          '2147483646',
                        ),
                        elm$html$Html$Events$onClick(config.resume),
                      ]),
                      _List_fromArray([
                        A2(
                          elm$html$Html$div,
                          _List_fromArray([
                            A2(
                              elm$html$Html$Attributes$style,
                              'position',
                              'absolute',
                            ),
                            A2(
                              elm$html$Html$Attributes$style,
                              'top',
                              'calc(50% - 40px)',
                            ),
                            A2(
                              elm$html$Html$Attributes$style,
                              'font-size',
                              '80px',
                            ),
                            A2(
                              elm$html$Html$Attributes$style,
                              'line-height',
                              '80px',
                            ),
                            A2(
                              elm$html$Html$Attributes$style,
                              'height',
                              '80px',
                            ),
                            A2(
                              elm$html$Html$Attributes$style,
                              'width',
                              '100%',
                            ),
                          ]),
                          _List_fromArray([
                            elm$html$Html$text('Click to Resume'),
                          ]),
                        ),
                        A2(
                          elm$browser$Debugger$Overlay$viewMiniControls,
                          config,
                          numMsgs,
                        ),
                      ]),
                    )
                  : A2(
                      elm$browser$Debugger$Overlay$viewMiniControls,
                      config,
                      numMsgs,
                    )
              case 'BadMetadata':
                var badMetadata_ = state.a
                return A4(
                  elm$browser$Debugger$Overlay$viewMessage,
                  config,
                  'Cannot use Import or Export',
                  elm$browser$Debugger$Overlay$viewBadMetadata(
                    badMetadata_,
                  ),
                  elm$browser$Debugger$Overlay$Accept('Ok'),
                )
              case 'BadImport':
                var report = state.a
                return A4(
                  elm$browser$Debugger$Overlay$viewMessage,
                  config,
                  'Cannot Import History',
                  A2(
                    elm$browser$Debugger$Overlay$viewReport,
                    true,
                    report,
                  ),
                  elm$browser$Debugger$Overlay$Accept('Ok'),
                )
              default:
                var report = state.a
                return A4(
                  elm$browser$Debugger$Overlay$viewMessage,
                  config,
                  'Warning',
                  A2(
                    elm$browser$Debugger$Overlay$viewReport,
                    false,
                    report,
                  ),
                  A2(
                    elm$browser$Debugger$Overlay$Choose,
                    'Cancel',
                    'Import Anyway',
                  ),
                )
            }
          })
          var elm$browser$Debugger$Main$cornerView = function(model) {
            return A5(
              elm$browser$Debugger$Overlay$view,
              {
                exportHistory: elm$browser$Debugger$Main$Export,
                importHistory: elm$browser$Debugger$Main$Import,
                open: elm$browser$Debugger$Main$Open,
                resume: elm$browser$Debugger$Main$Resume,
                wrap: elm$browser$Debugger$Main$OverlayMsg,
              },
              elm$browser$Debugger$Main$isPaused(model.state),
              _Debugger_isOpen(model.popout),
              elm$browser$Debugger$History$size(model.history),
              model.overlay,
            )
          }
          var elm$browser$Debugger$Main$getCurrentModel = function(state) {
            if (state.$ === 'Running') {
              var model = state.a
              return model
            } else {
              var model = state.b
              return model
            }
          }
          var elm$browser$Debugger$Main$getUserModel = function(model) {
            return elm$browser$Debugger$Main$getCurrentModel(model.state)
          }
          var elm$browser$Debugger$Expando$Field = F2(function(a, b) {
            return { $: 'Field', a: a, b: b }
          })
          var elm$browser$Debugger$Expando$Index = F3(function(a, b, c) {
            return { $: 'Index', a: a, b: b, c: c }
          })
          var elm$browser$Debugger$Expando$Key = { $: 'Key' }
          var elm$browser$Debugger$Expando$None = { $: 'None' }
          var elm$browser$Debugger$Expando$Toggle = { $: 'Toggle' }
          var elm$browser$Debugger$Expando$Value = { $: 'Value' }
          var elm$browser$Debugger$Expando$blue = A2(
            elm$html$Html$Attributes$style,
            'color',
            'rgb(28, 0, 207)',
          )
          var elm$browser$Debugger$Expando$leftPad = function(maybeKey) {
            if (maybeKey.$ === 'Nothing') {
              return _List_Nil
            } else {
              return _List_fromArray([
                A2(elm$html$Html$Attributes$style, 'padding-left', '4ch'),
              ])
            }
          }
          var elm$browser$Debugger$Expando$makeArrow = function(arrow) {
            return A2(
              elm$html$Html$span,
              _List_fromArray([
                A2(elm$html$Html$Attributes$style, 'color', '#777'),
                A2(elm$html$Html$Attributes$style, 'padding-left', '2ch'),
                A2(elm$html$Html$Attributes$style, 'width', '2ch'),
                A2(
                  elm$html$Html$Attributes$style,
                  'display',
                  'inline-block',
                ),
              ]),
              _List_fromArray([elm$html$Html$text(arrow)]),
            )
          }
          var elm$browser$Debugger$Expando$purple = A2(
            elm$html$Html$Attributes$style,
            'color',
            'rgb(136, 19, 145)',
          )
          var elm$browser$Debugger$Expando$lineStarter = F3(function(
            maybeKey,
            maybeIsClosed,
            description,
          ) {
            var arrow = (function() {
              if (maybeIsClosed.$ === 'Nothing') {
                return elm$browser$Debugger$Expando$makeArrow('')
              } else {
                if (maybeIsClosed.a) {
                  return elm$browser$Debugger$Expando$makeArrow('▸')
                } else {
                  return elm$browser$Debugger$Expando$makeArrow('▾')
                }
              }
            })()
            if (maybeKey.$ === 'Nothing') {
              return A2(elm$core$List$cons, arrow, description)
            } else {
              var key = maybeKey.a
              return A2(
                elm$core$List$cons,
                arrow,
                A2(
                  elm$core$List$cons,
                  A2(
                    elm$html$Html$span,
                    _List_fromArray([elm$browser$Debugger$Expando$purple]),
                    _List_fromArray([elm$html$Html$text(key)]),
                  ),
                  A2(
                    elm$core$List$cons,
                    elm$html$Html$text(' = '),
                    description,
                  ),
                ),
              )
            }
          })
          var elm$browser$Debugger$Expando$red = A2(
            elm$html$Html$Attributes$style,
            'color',
            'rgb(196, 26, 22)',
          )
          var elm$browser$Debugger$Expando$seqTypeToString = F2(function(
            n,
            seqType,
          ) {
            switch (seqType.$) {
              case 'ListSeq':
                return 'List(' + (elm$core$String$fromInt(n) + ')')
              case 'SetSeq':
                return 'Set(' + (elm$core$String$fromInt(n) + ')')
              default:
                return 'Array(' + (elm$core$String$fromInt(n) + ')')
            }
          })
          var elm$core$String$slice = _String_slice
          var elm$core$String$left = F2(function(n, string) {
            return n < 1 ? '' : A3(elm$core$String$slice, 0, n, string)
          })
          var elm$core$String$length = _String_length
          var elm$core$Basics$negate = function(n) {
            return -n
          }
          var elm$core$String$right = F2(function(n, string) {
            return n < 1
              ? ''
              : A3(
                  elm$core$String$slice,
                  -n,
                  elm$core$String$length(string),
                  string,
                )
          })
          var elm$browser$Debugger$Expando$elideMiddle = function(str) {
            return elm$core$String$length(str) <= 18
              ? str
              : A2(elm$core$String$left, 8, str) +
                  ('...' + A2(elm$core$String$right, 8, str))
          }
          var elm$browser$Debugger$Expando$viewExtraTinyRecord = F3(
            function(length, starter, entries) {
              if (!entries.b) {
                return _Utils_Tuple2(
                  length + 1,
                  _List_fromArray([elm$html$Html$text('}')]),
                )
              } else {
                var field = entries.a
                var rest = entries.b
                var nextLength = length + elm$core$String$length(field) + 1
                if (nextLength > 18) {
                  return _Utils_Tuple2(
                    length + 2,
                    _List_fromArray([elm$html$Html$text('…}')]),
                  )
                } else {
                  var _n1 = A3(
                    elm$browser$Debugger$Expando$viewExtraTinyRecord,
                    nextLength,
                    ',',
                    rest,
                  )
                  var finalLength = _n1.a
                  var otherHtmls = _n1.b
                  return _Utils_Tuple2(
                    finalLength,
                    A2(
                      elm$core$List$cons,
                      elm$html$Html$text(starter),
                      A2(
                        elm$core$List$cons,
                        A2(
                          elm$html$Html$span,
                          _List_fromArray([
                            elm$browser$Debugger$Expando$purple,
                          ]),
                          _List_fromArray([elm$html$Html$text(field)]),
                        ),
                        otherHtmls,
                      ),
                    ),
                  )
                }
              }
            },
          )
          var elm$browser$Debugger$Expando$viewTinyHelp = function(str) {
            return _Utils_Tuple2(
              elm$core$String$length(str),
              _List_fromArray([elm$html$Html$text(str)]),
            )
          }
          var elm$core$Dict$isEmpty = function(dict) {
            if (dict.$ === 'RBEmpty_elm_builtin') {
              return true
            } else {
              return false
            }
          }
          var elm$core$Maybe$withDefault = F2(function(_default, maybe) {
            if (maybe.$ === 'Just') {
              var value = maybe.a
              return value
            } else {
              return _default
            }
          })
          var elm$browser$Debugger$Expando$viewExtraTiny = function(
            value,
          ) {
            if (value.$ === 'Record') {
              var record = value.b
              return A3(
                elm$browser$Debugger$Expando$viewExtraTinyRecord,
                0,
                '{',
                elm$core$Dict$keys(record),
              )
            } else {
              return elm$browser$Debugger$Expando$viewTiny(value)
            }
          }
          var elm$browser$Debugger$Expando$viewTiny = function(value) {
            switch (value.$) {
              case 'S':
                var stringRep = value.a
                var str = elm$browser$Debugger$Expando$elideMiddle(
                  stringRep,
                )
                return _Utils_Tuple2(
                  elm$core$String$length(str),
                  _List_fromArray([
                    A2(
                      elm$html$Html$span,
                      _List_fromArray([elm$browser$Debugger$Expando$red]),
                      _List_fromArray([elm$html$Html$text(str)]),
                    ),
                  ]),
                )
              case 'Primitive':
                var stringRep = value.a
                return _Utils_Tuple2(
                  elm$core$String$length(stringRep),
                  _List_fromArray([
                    A2(
                      elm$html$Html$span,
                      _List_fromArray([elm$browser$Debugger$Expando$blue]),
                      _List_fromArray([elm$html$Html$text(stringRep)]),
                    ),
                  ]),
                )
              case 'Sequence':
                var seqType = value.a
                var valueList = value.c
                return elm$browser$Debugger$Expando$viewTinyHelp(
                  A2(
                    elm$browser$Debugger$Expando$seqTypeToString,
                    elm$core$List$length(valueList),
                    seqType,
                  ),
                )
              case 'Dictionary':
                var keyValuePairs = value.b
                return elm$browser$Debugger$Expando$viewTinyHelp(
                  'Dict(' +
                    (elm$core$String$fromInt(
                      elm$core$List$length(keyValuePairs),
                    ) +
                      ')'),
                )
              case 'Record':
                var record = value.b
                return elm$browser$Debugger$Expando$viewTinyRecord(record)
              default:
                if (!value.c.b) {
                  var maybeName = value.a
                  return elm$browser$Debugger$Expando$viewTinyHelp(
                    A2(elm$core$Maybe$withDefault, 'Unit', maybeName),
                  )
                } else {
                  var maybeName = value.a
                  var valueList = value.c
                  return elm$browser$Debugger$Expando$viewTinyHelp(
                    (function() {
                      if (maybeName.$ === 'Nothing') {
                        return (
                          'Tuple(' +
                          (elm$core$String$fromInt(
                            elm$core$List$length(valueList),
                          ) +
                            ')')
                        )
                      } else {
                        var name = maybeName.a
                        return name + ' …'
                      }
                    })(),
                  )
                }
            }
          }
          var elm$browser$Debugger$Expando$viewTinyRecord = function(
            record,
          ) {
            return elm$core$Dict$isEmpty(record)
              ? _Utils_Tuple2(
                  2,
                  _List_fromArray([elm$html$Html$text('{}')]),
                )
              : A3(
                  elm$browser$Debugger$Expando$viewTinyRecordHelp,
                  0,
                  '{ ',
                  elm$core$Dict$toList(record),
                )
          }
          var elm$browser$Debugger$Expando$viewTinyRecordHelp = F3(
            function(length, starter, entries) {
              if (!entries.b) {
                return _Utils_Tuple2(
                  length + 2,
                  _List_fromArray([elm$html$Html$text(' }')]),
                )
              } else {
                var _n1 = entries.a
                var field = _n1.a
                var value = _n1.b
                var rest = entries.b
                var fieldLen = elm$core$String$length(field)
                var _n2 = elm$browser$Debugger$Expando$viewExtraTiny(value)
                var valueLen = _n2.a
                var valueHtmls = _n2.b
                var newLength = length + fieldLen + valueLen + 5
                if (newLength > 60) {
                  return _Utils_Tuple2(
                    length + 4,
                    _List_fromArray([elm$html$Html$text(', … }')]),
                  )
                } else {
                  var _n3 = A3(
                    elm$browser$Debugger$Expando$viewTinyRecordHelp,
                    newLength,
                    ', ',
                    rest,
                  )
                  var finalLength = _n3.a
                  var otherHtmls = _n3.b
                  return _Utils_Tuple2(
                    finalLength,
                    A2(
                      elm$core$List$cons,
                      elm$html$Html$text(starter),
                      A2(
                        elm$core$List$cons,
                        A2(
                          elm$html$Html$span,
                          _List_fromArray([
                            elm$browser$Debugger$Expando$purple,
                          ]),
                          _List_fromArray([elm$html$Html$text(field)]),
                        ),
                        A2(
                          elm$core$List$cons,
                          elm$html$Html$text(' = '),
                          A2(
                            elm$core$List$cons,
                            A2(elm$html$Html$span, _List_Nil, valueHtmls),
                            otherHtmls,
                          ),
                        ),
                      ),
                    ),
                  )
                }
              }
            },
          )
          var elm$core$Basics$composeL = F3(function(g, f, x) {
            return g(f(x))
          })
          var elm$core$Tuple$second = function(_n0) {
            var y = _n0.b
            return y
          }
          var elm$browser$Debugger$Expando$view = F2(function(
            maybeKey,
            expando,
          ) {
            switch (expando.$) {
              case 'S':
                var stringRep = expando.a
                return A2(
                  elm$html$Html$div,
                  elm$browser$Debugger$Expando$leftPad(maybeKey),
                  A3(
                    elm$browser$Debugger$Expando$lineStarter,
                    maybeKey,
                    elm$core$Maybe$Nothing,
                    _List_fromArray([
                      A2(
                        elm$html$Html$span,
                        _List_fromArray([
                          elm$browser$Debugger$Expando$red,
                        ]),
                        _List_fromArray([elm$html$Html$text(stringRep)]),
                      ),
                    ]),
                  ),
                )
              case 'Primitive':
                var stringRep = expando.a
                return A2(
                  elm$html$Html$div,
                  elm$browser$Debugger$Expando$leftPad(maybeKey),
                  A3(
                    elm$browser$Debugger$Expando$lineStarter,
                    maybeKey,
                    elm$core$Maybe$Nothing,
                    _List_fromArray([
                      A2(
                        elm$html$Html$span,
                        _List_fromArray([
                          elm$browser$Debugger$Expando$blue,
                        ]),
                        _List_fromArray([elm$html$Html$text(stringRep)]),
                      ),
                    ]),
                  ),
                )
              case 'Sequence':
                var seqType = expando.a
                var isClosed = expando.b
                var valueList = expando.c
                return A4(
                  elm$browser$Debugger$Expando$viewSequence,
                  maybeKey,
                  seqType,
                  isClosed,
                  valueList,
                )
              case 'Dictionary':
                var isClosed = expando.a
                var keyValuePairs = expando.b
                return A3(
                  elm$browser$Debugger$Expando$viewDictionary,
                  maybeKey,
                  isClosed,
                  keyValuePairs,
                )
              case 'Record':
                var isClosed = expando.a
                var valueDict = expando.b
                return A3(
                  elm$browser$Debugger$Expando$viewRecord,
                  maybeKey,
                  isClosed,
                  valueDict,
                )
              default:
                var maybeName = expando.a
                var isClosed = expando.b
                var valueList = expando.c
                return A4(
                  elm$browser$Debugger$Expando$viewConstructor,
                  maybeKey,
                  maybeName,
                  isClosed,
                  valueList,
                )
            }
          })
          var elm$browser$Debugger$Expando$viewConstructor = F4(function(
            maybeKey,
            maybeName,
            isClosed,
            valueList,
          ) {
            var tinyArgs = A2(
              elm$core$List$map,
              A2(
                elm$core$Basics$composeL,
                elm$core$Tuple$second,
                elm$browser$Debugger$Expando$viewExtraTiny,
              ),
              valueList,
            )
            var description = (function() {
              var _n7 = _Utils_Tuple2(maybeName, tinyArgs)
              if (_n7.a.$ === 'Nothing') {
                if (!_n7.b.b) {
                  var _n8 = _n7.a
                  return _List_fromArray([elm$html$Html$text('()')])
                } else {
                  var _n9 = _n7.a
                  var _n10 = _n7.b
                  var x = _n10.a
                  var xs = _n10.b
                  return A2(
                    elm$core$List$cons,
                    elm$html$Html$text('( '),
                    A2(
                      elm$core$List$cons,
                      A2(elm$html$Html$span, _List_Nil, x),
                      A3(
                        elm$core$List$foldr,
                        F2(function(args, rest) {
                          return A2(
                            elm$core$List$cons,
                            elm$html$Html$text(', '),
                            A2(
                              elm$core$List$cons,
                              A2(elm$html$Html$span, _List_Nil, args),
                              rest,
                            ),
                          )
                        }),
                        _List_fromArray([elm$html$Html$text(' )')]),
                        xs,
                      ),
                    ),
                  )
                }
              } else {
                if (!_n7.b.b) {
                  var name = _n7.a.a
                  return _List_fromArray([elm$html$Html$text(name)])
                } else {
                  var name = _n7.a.a
                  var _n11 = _n7.b
                  var x = _n11.a
                  var xs = _n11.b
                  return A2(
                    elm$core$List$cons,
                    elm$html$Html$text(name + ' '),
                    A2(
                      elm$core$List$cons,
                      A2(elm$html$Html$span, _List_Nil, x),
                      A3(
                        elm$core$List$foldr,
                        F2(function(args, rest) {
                          return A2(
                            elm$core$List$cons,
                            elm$html$Html$text(' '),
                            A2(
                              elm$core$List$cons,
                              A2(elm$html$Html$span, _List_Nil, args),
                              rest,
                            ),
                          )
                        }),
                        _List_Nil,
                        xs,
                      ),
                    ),
                  )
                }
              }
            })()
            var _n4 = (function() {
              if (!valueList.b) {
                return _Utils_Tuple2(
                  elm$core$Maybe$Nothing,
                  A2(elm$html$Html$div, _List_Nil, _List_Nil),
                )
              } else {
                if (!valueList.b.b) {
                  var entry = valueList.a
                  switch (entry.$) {
                    case 'S':
                      return _Utils_Tuple2(
                        elm$core$Maybe$Nothing,
                        A2(elm$html$Html$div, _List_Nil, _List_Nil),
                      )
                    case 'Primitive':
                      return _Utils_Tuple2(
                        elm$core$Maybe$Nothing,
                        A2(elm$html$Html$div, _List_Nil, _List_Nil),
                      )
                    case 'Sequence':
                      var subValueList = entry.c
                      return _Utils_Tuple2(
                        elm$core$Maybe$Just(isClosed),
                        isClosed
                          ? A2(elm$html$Html$div, _List_Nil, _List_Nil)
                          : A2(
                              elm$html$Html$map,
                              A2(
                                elm$browser$Debugger$Expando$Index,
                                elm$browser$Debugger$Expando$None,
                                0,
                              ),
                              elm$browser$Debugger$Expando$viewSequenceOpen(
                                subValueList,
                              ),
                            ),
                      )
                    case 'Dictionary':
                      var keyValuePairs = entry.b
                      return _Utils_Tuple2(
                        elm$core$Maybe$Just(isClosed),
                        isClosed
                          ? A2(elm$html$Html$div, _List_Nil, _List_Nil)
                          : A2(
                              elm$html$Html$map,
                              A2(
                                elm$browser$Debugger$Expando$Index,
                                elm$browser$Debugger$Expando$None,
                                0,
                              ),
                              elm$browser$Debugger$Expando$viewDictionaryOpen(
                                keyValuePairs,
                              ),
                            ),
                      )
                    case 'Record':
                      var record = entry.b
                      return _Utils_Tuple2(
                        elm$core$Maybe$Just(isClosed),
                        isClosed
                          ? A2(elm$html$Html$div, _List_Nil, _List_Nil)
                          : A2(
                              elm$html$Html$map,
                              A2(
                                elm$browser$Debugger$Expando$Index,
                                elm$browser$Debugger$Expando$None,
                                0,
                              ),
                              elm$browser$Debugger$Expando$viewRecordOpen(
                                record,
                              ),
                            ),
                      )
                    default:
                      var subValueList = entry.c
                      return _Utils_Tuple2(
                        elm$core$Maybe$Just(isClosed),
                        isClosed
                          ? A2(elm$html$Html$div, _List_Nil, _List_Nil)
                          : A2(
                              elm$html$Html$map,
                              A2(
                                elm$browser$Debugger$Expando$Index,
                                elm$browser$Debugger$Expando$None,
                                0,
                              ),
                              elm$browser$Debugger$Expando$viewConstructorOpen(
                                subValueList,
                              ),
                            ),
                      )
                  }
                } else {
                  return _Utils_Tuple2(
                    elm$core$Maybe$Just(isClosed),
                    isClosed
                      ? A2(elm$html$Html$div, _List_Nil, _List_Nil)
                      : elm$browser$Debugger$Expando$viewConstructorOpen(
                          valueList,
                        ),
                  )
                }
              }
            })()
            var maybeIsClosed = _n4.a
            var openHtml = _n4.b
            return A2(
              elm$html$Html$div,
              elm$browser$Debugger$Expando$leftPad(maybeKey),
              _List_fromArray([
                A2(
                  elm$html$Html$div,
                  _List_fromArray([
                    elm$html$Html$Events$onClick(
                      elm$browser$Debugger$Expando$Toggle,
                    ),
                  ]),
                  A3(
                    elm$browser$Debugger$Expando$lineStarter,
                    maybeKey,
                    maybeIsClosed,
                    description,
                  ),
                ),
                openHtml,
              ]),
            )
          })
          var elm$browser$Debugger$Expando$viewConstructorEntry = F2(
            function(index, value) {
              return A2(
                elm$html$Html$map,
                A2(
                  elm$browser$Debugger$Expando$Index,
                  elm$browser$Debugger$Expando$None,
                  index,
                ),
                A2(
                  elm$browser$Debugger$Expando$view,
                  elm$core$Maybe$Just(elm$core$String$fromInt(index)),
                  value,
                ),
              )
            },
          )
          var elm$browser$Debugger$Expando$viewConstructorOpen = function(
            valueList,
          ) {
            return A2(
              elm$html$Html$div,
              _List_Nil,
              A2(
                elm$core$List$indexedMap,
                elm$browser$Debugger$Expando$viewConstructorEntry,
                valueList,
              ),
            )
          }
          var elm$browser$Debugger$Expando$viewDictionary = F3(function(
            maybeKey,
            isClosed,
            keyValuePairs,
          ) {
            var starter =
              'Dict(' +
              (elm$core$String$fromInt(
                elm$core$List$length(keyValuePairs),
              ) +
                ')')
            return A2(
              elm$html$Html$div,
              elm$browser$Debugger$Expando$leftPad(maybeKey),
              _List_fromArray([
                A2(
                  elm$html$Html$div,
                  _List_fromArray([
                    elm$html$Html$Events$onClick(
                      elm$browser$Debugger$Expando$Toggle,
                    ),
                  ]),
                  A3(
                    elm$browser$Debugger$Expando$lineStarter,
                    maybeKey,
                    elm$core$Maybe$Just(isClosed),
                    _List_fromArray([elm$html$Html$text(starter)]),
                  ),
                ),
                isClosed
                  ? elm$html$Html$text('')
                  : elm$browser$Debugger$Expando$viewDictionaryOpen(
                      keyValuePairs,
                    ),
              ]),
            )
          })
          var elm$browser$Debugger$Expando$viewDictionaryEntry = F2(
            function(index, _n2) {
              var key = _n2.a
              var value = _n2.b
              switch (key.$) {
                case 'S':
                  var stringRep = key.a
                  return A2(
                    elm$html$Html$map,
                    A2(
                      elm$browser$Debugger$Expando$Index,
                      elm$browser$Debugger$Expando$Value,
                      index,
                    ),
                    A2(
                      elm$browser$Debugger$Expando$view,
                      elm$core$Maybe$Just(stringRep),
                      value,
                    ),
                  )
                case 'Primitive':
                  var stringRep = key.a
                  return A2(
                    elm$html$Html$map,
                    A2(
                      elm$browser$Debugger$Expando$Index,
                      elm$browser$Debugger$Expando$Value,
                      index,
                    ),
                    A2(
                      elm$browser$Debugger$Expando$view,
                      elm$core$Maybe$Just(stringRep),
                      value,
                    ),
                  )
                default:
                  return A2(
                    elm$html$Html$div,
                    _List_Nil,
                    _List_fromArray([
                      A2(
                        elm$html$Html$map,
                        A2(
                          elm$browser$Debugger$Expando$Index,
                          elm$browser$Debugger$Expando$Key,
                          index,
                        ),
                        A2(
                          elm$browser$Debugger$Expando$view,
                          elm$core$Maybe$Just('key'),
                          key,
                        ),
                      ),
                      A2(
                        elm$html$Html$map,
                        A2(
                          elm$browser$Debugger$Expando$Index,
                          elm$browser$Debugger$Expando$Value,
                          index,
                        ),
                        A2(
                          elm$browser$Debugger$Expando$view,
                          elm$core$Maybe$Just('value'),
                          value,
                        ),
                      ),
                    ]),
                  )
              }
            },
          )
          var elm$browser$Debugger$Expando$viewDictionaryOpen = function(
            keyValuePairs,
          ) {
            return A2(
              elm$html$Html$div,
              _List_Nil,
              A2(
                elm$core$List$indexedMap,
                elm$browser$Debugger$Expando$viewDictionaryEntry,
                keyValuePairs,
              ),
            )
          }
          var elm$browser$Debugger$Expando$viewRecord = F3(function(
            maybeKey,
            isClosed,
            record,
          ) {
            var _n1 = isClosed
              ? _Utils_Tuple3(
                  elm$browser$Debugger$Expando$viewTinyRecord(record).b,
                  elm$html$Html$text(''),
                  elm$html$Html$text(''),
                )
              : _Utils_Tuple3(
                  _List_fromArray([elm$html$Html$text('{')]),
                  elm$browser$Debugger$Expando$viewRecordOpen(record),
                  A2(
                    elm$html$Html$div,
                    elm$browser$Debugger$Expando$leftPad(
                      elm$core$Maybe$Just(_Utils_Tuple0),
                    ),
                    _List_fromArray([elm$html$Html$text('}')]),
                  ),
                )
            var start = _n1.a
            var middle = _n1.b
            var end = _n1.c
            return A2(
              elm$html$Html$div,
              elm$browser$Debugger$Expando$leftPad(maybeKey),
              _List_fromArray([
                A2(
                  elm$html$Html$div,
                  _List_fromArray([
                    elm$html$Html$Events$onClick(
                      elm$browser$Debugger$Expando$Toggle,
                    ),
                  ]),
                  A3(
                    elm$browser$Debugger$Expando$lineStarter,
                    maybeKey,
                    elm$core$Maybe$Just(isClosed),
                    start,
                  ),
                ),
                middle,
                end,
              ]),
            )
          })
          var elm$browser$Debugger$Expando$viewRecordEntry = function(
            _n0,
          ) {
            var field = _n0.a
            var value = _n0.b
            return A2(
              elm$html$Html$map,
              elm$browser$Debugger$Expando$Field(field),
              A2(
                elm$browser$Debugger$Expando$view,
                elm$core$Maybe$Just(field),
                value,
              ),
            )
          }
          var elm$browser$Debugger$Expando$viewRecordOpen = function(
            record,
          ) {
            return A2(
              elm$html$Html$div,
              _List_Nil,
              A2(
                elm$core$List$map,
                elm$browser$Debugger$Expando$viewRecordEntry,
                elm$core$Dict$toList(record),
              ),
            )
          }
          var elm$browser$Debugger$Expando$viewSequence = F4(function(
            maybeKey,
            seqType,
            isClosed,
            valueList,
          ) {
            var starter = A2(
              elm$browser$Debugger$Expando$seqTypeToString,
              elm$core$List$length(valueList),
              seqType,
            )
            return A2(
              elm$html$Html$div,
              elm$browser$Debugger$Expando$leftPad(maybeKey),
              _List_fromArray([
                A2(
                  elm$html$Html$div,
                  _List_fromArray([
                    elm$html$Html$Events$onClick(
                      elm$browser$Debugger$Expando$Toggle,
                    ),
                  ]),
                  A3(
                    elm$browser$Debugger$Expando$lineStarter,
                    maybeKey,
                    elm$core$Maybe$Just(isClosed),
                    _List_fromArray([elm$html$Html$text(starter)]),
                  ),
                ),
                isClosed
                  ? elm$html$Html$text('')
                  : elm$browser$Debugger$Expando$viewSequenceOpen(
                      valueList,
                    ),
              ]),
            )
          })
          var elm$browser$Debugger$Expando$viewSequenceOpen = function(
            values,
          ) {
            return A2(
              elm$html$Html$div,
              _List_Nil,
              A2(
                elm$core$List$indexedMap,
                elm$browser$Debugger$Expando$viewConstructorEntry,
                values,
              ),
            )
          }
          var elm$browser$Debugger$Main$ExpandoMsg = function(a) {
            return { $: 'ExpandoMsg', a: a }
          }
          var elm$html$Html$Attributes$class = elm$html$Html$Attributes$stringProperty(
            'className',
          )
          var elm$html$Html$Attributes$title = elm$html$Html$Attributes$stringProperty(
            'title',
          )
          var elm$browser$Debugger$History$viewMessage = F3(function(
            currentIndex,
            index,
            msg,
          ) {
            var messageName = _Debugger_messageToString(msg)
            var className = _Utils_eq(currentIndex, index)
              ? 'elm-debugger-entry elm-debugger-entry-selected'
              : 'elm-debugger-entry'
            return A2(
              elm$html$Html$div,
              _List_fromArray([
                elm$html$Html$Attributes$class(className),
                elm$html$Html$Events$onClick(index),
              ]),
              _List_fromArray([
                A2(
                  elm$html$Html$span,
                  _List_fromArray([
                    elm$html$Html$Attributes$title(messageName),
                    elm$html$Html$Attributes$class(
                      'elm-debugger-entry-content',
                    ),
                  ]),
                  _List_fromArray([elm$html$Html$text(messageName)]),
                ),
                A2(
                  elm$html$Html$span,
                  _List_fromArray([
                    elm$html$Html$Attributes$class(
                      'elm-debugger-entry-index',
                    ),
                  ]),
                  _List_fromArray([
                    elm$html$Html$text(elm$core$String$fromInt(index)),
                  ]),
                ),
              ]),
            )
          })
          var elm$virtual_dom$VirtualDom$lazy3 = _VirtualDom_lazy3
          var elm$html$Html$Lazy$lazy3 = elm$virtual_dom$VirtualDom$lazy3
          var elm$browser$Debugger$History$consMsg = F3(function(
            currentIndex,
            msg,
            _n0,
          ) {
            var index = _n0.a
            var rest = _n0.b
            return _Utils_Tuple2(
              index - 1,
              A2(
                elm$core$List$cons,
                A4(
                  elm$html$Html$Lazy$lazy3,
                  elm$browser$Debugger$History$viewMessage,
                  currentIndex,
                  index,
                  msg,
                ),
                rest,
              ),
            )
          })
          var elm$virtual_dom$VirtualDom$node = function(tag) {
            return _VirtualDom_node(_VirtualDom_noScript(tag))
          }
          var elm$html$Html$node = elm$virtual_dom$VirtualDom$node
          var elm$browser$Debugger$History$styles = A3(
            elm$html$Html$node,
            'style',
            _List_Nil,
            _List_fromArray([
              elm$html$Html$text(
                '\n\n.elm-debugger-entry {\n  cursor: pointer;\n  width: 100%;\n}\n\n.elm-debugger-entry:hover {\n  background-color: rgb(41, 41, 41);\n}\n\n.elm-debugger-entry-selected, .elm-debugger-entry-selected:hover {\n  background-color: rgb(10, 10, 10);\n}\n\n.elm-debugger-entry-content {\n  width: calc(100% - 7ch);\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 1ch;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n  display: inline-block;\n}\n\n.elm-debugger-entry-index {\n  color: #666;\n  width: 5ch;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-right: 1ch;\n  text-align: right;\n  display: block;\n  float: right;\n}\n\n',
              ),
            ]),
          )
          var elm$browser$Debugger$History$maxSnapshotSize = 64
          var elm$core$Elm$JsArray$foldl = _JsArray_foldl
          var elm$core$Array$foldl = F3(function(func, baseCase, _n0) {
            var tree = _n0.c
            var tail = _n0.d
            var helper = F2(function(node, acc) {
              if (node.$ === 'SubTree') {
                var subTree = node.a
                return A3(elm$core$Elm$JsArray$foldl, helper, acc, subTree)
              } else {
                var values = node.a
                return A3(elm$core$Elm$JsArray$foldl, func, acc, values)
              }
            })
            return A3(
              elm$core$Elm$JsArray$foldl,
              func,
              A3(elm$core$Elm$JsArray$foldl, helper, baseCase, tree),
              tail,
            )
          })
          var elm$browser$Debugger$History$viewSnapshot = F3(function(
            currentIndex,
            index,
            _n0,
          ) {
            var messages = _n0.messages
            return A2(
              elm$html$Html$div,
              _List_Nil,
              A3(
                elm$core$Array$foldl,
                elm$browser$Debugger$History$consMsg(currentIndex),
                _Utils_Tuple2(index - 1, _List_Nil),
                messages,
              ).b,
            )
          })
          var elm$browser$Debugger$History$consSnapshot = F3(function(
            currentIndex,
            snapshot,
            _n0,
          ) {
            var index = _n0.a
            var rest = _n0.b
            var nextIndex =
              index - elm$browser$Debugger$History$maxSnapshotSize
            var currentIndexHelp =
              _Utils_cmp(nextIndex, currentIndex) < 1 &&
              _Utils_cmp(currentIndex, index) < 0
                ? currentIndex
                : -1
            return _Utils_Tuple2(
              index - elm$browser$Debugger$History$maxSnapshotSize,
              A2(
                elm$core$List$cons,
                A4(
                  elm$html$Html$Lazy$lazy3,
                  elm$browser$Debugger$History$viewSnapshot,
                  currentIndexHelp,
                  index,
                  snapshot,
                ),
                rest,
              ),
            )
          })
          var elm$core$Array$length = function(_n0) {
            var len = _n0.a
            return len
          }
          var elm$browser$Debugger$History$viewSnapshots = F2(function(
            currentIndex,
            snapshots,
          ) {
            var highIndex =
              elm$browser$Debugger$History$maxSnapshotSize *
              elm$core$Array$length(snapshots)
            return A2(
              elm$html$Html$div,
              _List_Nil,
              A3(
                elm$core$Array$foldr,
                elm$browser$Debugger$History$consSnapshot(currentIndex),
                _Utils_Tuple2(highIndex, _List_Nil),
                snapshots,
              ).b,
            )
          })
          var elm$virtual_dom$VirtualDom$lazy2 = _VirtualDom_lazy2
          var elm$html$Html$Lazy$lazy2 = elm$virtual_dom$VirtualDom$lazy2
          var elm$browser$Debugger$History$view = F2(function(
            maybeIndex,
            _n0,
          ) {
            var snapshots = _n0.snapshots
            var recent = _n0.recent
            var numMessages = _n0.numMessages
            var _n1 = (function() {
              if (maybeIndex.$ === 'Nothing') {
                return _Utils_Tuple2(-1, 'calc(100% - 24px)')
              } else {
                var i = maybeIndex.a
                return _Utils_Tuple2(i, 'calc(100% - 54px)')
              }
            })()
            var index = _n1.a
            var height = _n1.b
            var newStuff = A3(
              elm$core$List$foldl,
              elm$browser$Debugger$History$consMsg(index),
              _Utils_Tuple2(numMessages - 1, _List_Nil),
              recent.messages,
            ).b
            var oldStuff = A3(
              elm$html$Html$Lazy$lazy2,
              elm$browser$Debugger$History$viewSnapshots,
              index,
              snapshots,
            )
            return A2(
              elm$html$Html$div,
              _List_fromArray([
                elm$html$Html$Attributes$id('elm-debugger-sidebar'),
                A2(elm$html$Html$Attributes$style, 'width', '100%'),
                A2(elm$html$Html$Attributes$style, 'overflow-y', 'auto'),
                A2(elm$html$Html$Attributes$style, 'height', height),
              ]),
              A2(
                elm$core$List$cons,
                elm$browser$Debugger$History$styles,
                A2(elm$core$List$cons, oldStuff, newStuff),
              ),
            )
          })
          var elm$browser$Debugger$Main$Jump = function(a) {
            return { $: 'Jump', a: a }
          }
          var elm$browser$Debugger$Main$resumeStyle =
            '\n\n.elm-debugger-resume {\n  width: 100%;\n  height: 30px;\n  line-height: 30px;\n  cursor: pointer;\n}\n\n.elm-debugger-resume:hover {\n  background-color: rgb(41, 41, 41);\n}\n\n'
          var elm$browser$Debugger$Main$viewResumeButton = function(
            maybeIndex,
          ) {
            if (maybeIndex.$ === 'Nothing') {
              return elm$html$Html$text('')
            } else {
              return A2(
                elm$html$Html$div,
                _List_fromArray([
                  elm$html$Html$Events$onClick(
                    elm$browser$Debugger$Main$Resume,
                  ),
                  elm$html$Html$Attributes$class('elm-debugger-resume'),
                ]),
                _List_fromArray([
                  elm$html$Html$text('Resume'),
                  A3(
                    elm$html$Html$node,
                    'style',
                    _List_Nil,
                    _List_fromArray([
                      elm$html$Html$text(
                        elm$browser$Debugger$Main$resumeStyle,
                      ),
                    ]),
                  ),
                ]),
              )
            }
          }
          var elm$browser$Debugger$Main$viewTextButton = F2(function(
            msg,
            label,
          ) {
            return A2(
              elm$html$Html$span,
              _List_fromArray([
                elm$html$Html$Events$onClick(msg),
                A2(elm$html$Html$Attributes$style, 'cursor', 'pointer'),
              ]),
              _List_fromArray([elm$html$Html$text(label)]),
            )
          })
          var elm$browser$Debugger$Main$playButton = function(maybeIndex) {
            return A2(
              elm$html$Html$div,
              _List_fromArray([
                A2(elm$html$Html$Attributes$style, 'width', '100%'),
                A2(elm$html$Html$Attributes$style, 'text-align', 'center'),
                A2(
                  elm$html$Html$Attributes$style,
                  'background-color',
                  'rgb(50, 50, 50)',
                ),
              ]),
              _List_fromArray([
                elm$browser$Debugger$Main$viewResumeButton(maybeIndex),
                A2(
                  elm$html$Html$div,
                  _List_fromArray([
                    A2(elm$html$Html$Attributes$style, 'width', '100%'),
                    A2(elm$html$Html$Attributes$style, 'height', '24px'),
                    A2(
                      elm$html$Html$Attributes$style,
                      'line-height',
                      '24px',
                    ),
                    A2(
                      elm$html$Html$Attributes$style,
                      'font-size',
                      '12px',
                    ),
                  ]),
                  _List_fromArray([
                    A2(
                      elm$browser$Debugger$Main$viewTextButton,
                      elm$browser$Debugger$Main$Import,
                      'Import',
                    ),
                    elm$html$Html$text(' / '),
                    A2(
                      elm$browser$Debugger$Main$viewTextButton,
                      elm$browser$Debugger$Main$Export,
                      'Export',
                    ),
                  ]),
                ),
              ]),
            )
          }
          var elm$browser$Debugger$Main$viewSidebar = F2(function(
            state,
            history,
          ) {
            var maybeIndex = (function() {
              if (state.$ === 'Running') {
                return elm$core$Maybe$Nothing
              } else {
                var index = state.a
                return elm$core$Maybe$Just(index)
              }
            })()
            return A2(
              elm$html$Html$div,
              _List_fromArray([
                A2(elm$html$Html$Attributes$style, 'display', 'block'),
                A2(elm$html$Html$Attributes$style, 'float', 'left'),
                A2(elm$html$Html$Attributes$style, 'width', '30ch'),
                A2(elm$html$Html$Attributes$style, 'height', '100%'),
                A2(elm$html$Html$Attributes$style, 'color', 'white'),
                A2(
                  elm$html$Html$Attributes$style,
                  'background-color',
                  'rgb(61, 61, 61)',
                ),
              ]),
              _List_fromArray([
                A2(
                  elm$html$Html$map,
                  elm$browser$Debugger$Main$Jump,
                  A2(
                    elm$browser$Debugger$History$view,
                    maybeIndex,
                    history,
                  ),
                ),
                elm$browser$Debugger$Main$playButton(maybeIndex),
              ]),
            )
          })
          var elm$browser$Debugger$Main$popoutView = function(_n0) {
            var history = _n0.history
            var state = _n0.state
            var expando = _n0.expando
            return A3(
              elm$html$Html$node,
              'body',
              _List_fromArray([
                A2(elm$html$Html$Attributes$style, 'margin', '0'),
                A2(elm$html$Html$Attributes$style, 'padding', '0'),
                A2(elm$html$Html$Attributes$style, 'width', '100%'),
                A2(elm$html$Html$Attributes$style, 'height', '100%'),
                A2(
                  elm$html$Html$Attributes$style,
                  'font-family',
                  'monospace',
                ),
                A2(elm$html$Html$Attributes$style, 'overflow', 'auto'),
              ]),
              _List_fromArray([
                A2(elm$browser$Debugger$Main$viewSidebar, state, history),
                A2(
                  elm$html$Html$map,
                  elm$browser$Debugger$Main$ExpandoMsg,
                  A2(
                    elm$html$Html$div,
                    _List_fromArray([
                      A2(
                        elm$html$Html$Attributes$style,
                        'display',
                        'block',
                      ),
                      A2(elm$html$Html$Attributes$style, 'float', 'left'),
                      A2(elm$html$Html$Attributes$style, 'height', '100%'),
                      A2(
                        elm$html$Html$Attributes$style,
                        'width',
                        'calc(100% - 30ch)',
                      ),
                      A2(elm$html$Html$Attributes$style, 'margin', '0'),
                      A2(
                        elm$html$Html$Attributes$style,
                        'overflow',
                        'auto',
                      ),
                      A2(
                        elm$html$Html$Attributes$style,
                        'cursor',
                        'default',
                      ),
                    ]),
                    _List_fromArray([
                      A2(
                        elm$browser$Debugger$Expando$view,
                        elm$core$Maybe$Nothing,
                        expando,
                      ),
                    ]),
                  ),
                ),
              ]),
            )
          }
          var elm$browser$Debugger$Overlay$BlockAll = { $: 'BlockAll' }
          var elm$browser$Debugger$Overlay$BlockMost = { $: 'BlockMost' }
          var elm$browser$Debugger$Overlay$BlockNone = { $: 'BlockNone' }
          var elm$browser$Debugger$Overlay$toBlockerType = F2(function(
            isPaused,
            state,
          ) {
            switch (state.$) {
              case 'None':
                return isPaused
                  ? elm$browser$Debugger$Overlay$BlockAll
                  : elm$browser$Debugger$Overlay$BlockNone
              case 'BadMetadata':
                return elm$browser$Debugger$Overlay$BlockMost
              case 'BadImport':
                return elm$browser$Debugger$Overlay$BlockMost
              default:
                return elm$browser$Debugger$Overlay$BlockMost
            }
          })
          var elm$browser$Debugger$Main$toBlockerType = function(model) {
            return A2(
              elm$browser$Debugger$Overlay$toBlockerType,
              elm$browser$Debugger$Main$isPaused(model.state),
              model.overlay,
            )
          }
          var elm$core$Dict$map = F2(function(func, dict) {
            if (dict.$ === 'RBEmpty_elm_builtin') {
              return elm$core$Dict$RBEmpty_elm_builtin
            } else {
              var color = dict.a
              var key = dict.b
              var value = dict.c
              var left = dict.d
              var right = dict.e
              return A5(
                elm$core$Dict$RBNode_elm_builtin,
                color,
                key,
                A2(func, key, value),
                A2(elm$core$Dict$map, func, left),
                A2(elm$core$Dict$map, func, right),
              )
            }
          })
          var elm$core$Dict$sizeHelp = F2(function(n, dict) {
            sizeHelp: while (true) {
              if (dict.$ === 'RBEmpty_elm_builtin') {
                return n
              } else {
                var left = dict.d
                var right = dict.e
                var $temp$n = A2(elm$core$Dict$sizeHelp, n + 1, right),
                  $temp$dict = left
                n = $temp$n
                dict = $temp$dict
                continue sizeHelp
              }
            }
          })
          var elm$core$Dict$size = function(dict) {
            return A2(elm$core$Dict$sizeHelp, 0, dict)
          }
          var elm$browser$Debugger$Expando$initHelp = F2(function(
            isOuter,
            expando,
          ) {
            switch (expando.$) {
              case 'S':
                return expando
              case 'Primitive':
                return expando
              case 'Sequence':
                var seqType = expando.a
                var isClosed = expando.b
                var items = expando.c
                return isOuter
                  ? A3(
                      elm$browser$Debugger$Expando$Sequence,
                      seqType,
                      false,
                      A2(
                        elm$core$List$map,
                        elm$browser$Debugger$Expando$initHelp(false),
                        items,
                      ),
                    )
                  : elm$core$List$length(items) <= 8
                  ? A3(
                      elm$browser$Debugger$Expando$Sequence,
                      seqType,
                      false,
                      items,
                    )
                  : expando
              case 'Dictionary':
                var isClosed = expando.a
                var keyValuePairs = expando.b
                return isOuter
                  ? A2(
                      elm$browser$Debugger$Expando$Dictionary,
                      false,
                      A2(
                        elm$core$List$map,
                        function(_n1) {
                          var k = _n1.a
                          var v = _n1.b
                          return _Utils_Tuple2(
                            k,
                            A2(
                              elm$browser$Debugger$Expando$initHelp,
                              false,
                              v,
                            ),
                          )
                        },
                        keyValuePairs,
                      ),
                    )
                  : elm$core$List$length(keyValuePairs) <= 8
                  ? A2(
                      elm$browser$Debugger$Expando$Dictionary,
                      false,
                      keyValuePairs,
                    )
                  : expando
              case 'Record':
                var isClosed = expando.a
                var entries = expando.b
                return isOuter
                  ? A2(
                      elm$browser$Debugger$Expando$Record,
                      false,
                      A2(
                        elm$core$Dict$map,
                        F2(function(_n2, v) {
                          return A2(
                            elm$browser$Debugger$Expando$initHelp,
                            false,
                            v,
                          )
                        }),
                        entries,
                      ),
                    )
                  : elm$core$Dict$size(entries) <= 4
                  ? A2(elm$browser$Debugger$Expando$Record, false, entries)
                  : expando
              default:
                var maybeName = expando.a
                var isClosed = expando.b
                var args = expando.c
                return isOuter
                  ? A3(
                      elm$browser$Debugger$Expando$Constructor,
                      maybeName,
                      false,
                      A2(
                        elm$core$List$map,
                        elm$browser$Debugger$Expando$initHelp(false),
                        args,
                      ),
                    )
                  : elm$core$List$length(args) <= 4
                  ? A3(
                      elm$browser$Debugger$Expando$Constructor,
                      maybeName,
                      false,
                      args,
                    )
                  : expando
            }
          })
          var elm$browser$Debugger$Expando$init = function(value) {
            return A2(
              elm$browser$Debugger$Expando$initHelp,
              true,
              _Debugger_init(value),
            )
          }
          var elm$browser$Debugger$History$History = F3(function(
            snapshots,
            recent,
            numMessages,
          ) {
            return {
              numMessages: numMessages,
              recent: recent,
              snapshots: snapshots,
            }
          })
          var elm$browser$Debugger$History$RecentHistory = F3(function(
            model,
            messages,
            numMessages,
          ) {
            return {
              messages: messages,
              model: model,
              numMessages: numMessages,
            }
          })
          var elm$browser$Debugger$History$empty = function(model) {
            return A3(
              elm$browser$Debugger$History$History,
              elm$core$Array$empty,
              A3(
                elm$browser$Debugger$History$RecentHistory,
                model,
                _List_Nil,
                0,
              ),
              0,
            )
          }
          var elm$browser$Debugger$Main$Running = function(a) {
            return { $: 'Running', a: a }
          }
          var elm$browser$Debugger$Metadata$Error = F2(function(
            message,
            problems,
          ) {
            return { message: message, problems: problems }
          })
          var elm$browser$Debugger$Metadata$Metadata = F2(function(
            versions,
            types,
          ) {
            return { types: types, versions: versions }
          })
          var elm$browser$Debugger$Metadata$Types = F3(function(
            message,
            aliases,
            unions,
          ) {
            return { aliases: aliases, message: message, unions: unions }
          })
          var elm$browser$Debugger$Metadata$Alias = F2(function(
            args,
            tipe,
          ) {
            return { args: args, tipe: tipe }
          })
          var elm$json$Json$Decode$field = _Json_decodeField
          var elm$json$Json$Decode$list = _Json_decodeList
          var elm$json$Json$Decode$string = _Json_decodeString
          var elm$browser$Debugger$Metadata$decodeAlias = A3(
            elm$json$Json$Decode$map2,
            elm$browser$Debugger$Metadata$Alias,
            A2(
              elm$json$Json$Decode$field,
              'args',
              elm$json$Json$Decode$list(elm$json$Json$Decode$string),
            ),
            A2(
              elm$json$Json$Decode$field,
              'type',
              elm$json$Json$Decode$string,
            ),
          )
          var elm$browser$Debugger$Metadata$Union = F2(function(
            args,
            tags,
          ) {
            return { args: args, tags: tags }
          })
          var elm$json$Json$Decode$keyValuePairs = _Json_decodeKeyValuePairs
          var elm$json$Json$Decode$dict = function(decoder) {
            return A2(
              elm$json$Json$Decode$map,
              elm$core$Dict$fromList,
              elm$json$Json$Decode$keyValuePairs(decoder),
            )
          }
          var elm$browser$Debugger$Metadata$decodeUnion = A3(
            elm$json$Json$Decode$map2,
            elm$browser$Debugger$Metadata$Union,
            A2(
              elm$json$Json$Decode$field,
              'args',
              elm$json$Json$Decode$list(elm$json$Json$Decode$string),
            ),
            A2(
              elm$json$Json$Decode$field,
              'tags',
              elm$json$Json$Decode$dict(
                elm$json$Json$Decode$list(elm$json$Json$Decode$string),
              ),
            ),
          )
          var elm$json$Json$Decode$map3 = _Json_map3
          var elm$browser$Debugger$Metadata$decodeTypes = A4(
            elm$json$Json$Decode$map3,
            elm$browser$Debugger$Metadata$Types,
            A2(
              elm$json$Json$Decode$field,
              'message',
              elm$json$Json$Decode$string,
            ),
            A2(
              elm$json$Json$Decode$field,
              'aliases',
              elm$json$Json$Decode$dict(
                elm$browser$Debugger$Metadata$decodeAlias,
              ),
            ),
            A2(
              elm$json$Json$Decode$field,
              'unions',
              elm$json$Json$Decode$dict(
                elm$browser$Debugger$Metadata$decodeUnion,
              ),
            ),
          )
          var elm$browser$Debugger$Metadata$Versions = function(elm) {
            return { elm: elm }
          }
          var elm$browser$Debugger$Metadata$decodeVersions = A2(
            elm$json$Json$Decode$map,
            elm$browser$Debugger$Metadata$Versions,
            A2(
              elm$json$Json$Decode$field,
              'elm',
              elm$json$Json$Decode$string,
            ),
          )
          var elm$browser$Debugger$Metadata$decoder = A3(
            elm$json$Json$Decode$map2,
            elm$browser$Debugger$Metadata$Metadata,
            A2(
              elm$json$Json$Decode$field,
              'versions',
              elm$browser$Debugger$Metadata$decodeVersions,
            ),
            A2(
              elm$json$Json$Decode$field,
              'types',
              elm$browser$Debugger$Metadata$decodeTypes,
            ),
          )
          var elm$browser$Debugger$Metadata$ProblemType = F2(function(
            name,
            problems,
          ) {
            return { name: name, problems: problems }
          })
          var elm$core$String$contains = _String_contains
          var elm$browser$Debugger$Metadata$hasProblem = F2(function(
            tipe,
            _n0,
          ) {
            var problem = _n0.a
            var token = _n0.b
            return A2(elm$core$String$contains, token, tipe)
              ? elm$core$Maybe$Just(problem)
              : elm$core$Maybe$Nothing
          })
          var elm$browser$Debugger$Metadata$Decoder = { $: 'Decoder' }
          var elm$browser$Debugger$Metadata$Function = { $: 'Function' }
          var elm$browser$Debugger$Metadata$Process = { $: 'Process' }
          var elm$browser$Debugger$Metadata$Program = { $: 'Program' }
          var elm$browser$Debugger$Metadata$Request = { $: 'Request' }
          var elm$browser$Debugger$Metadata$Socket = { $: 'Socket' }
          var elm$browser$Debugger$Metadata$Task = { $: 'Task' }
          var elm$browser$Debugger$Metadata$VirtualDom = {
            $: 'VirtualDom',
          }
          var elm$browser$Debugger$Metadata$problemTable = _List_fromArray(
            [
              _Utils_Tuple2(elm$browser$Debugger$Metadata$Function, '->'),
              _Utils_Tuple2(
                elm$browser$Debugger$Metadata$Decoder,
                'Json.Decode.Decoder',
              ),
              _Utils_Tuple2(
                elm$browser$Debugger$Metadata$Task,
                'Task.Task',
              ),
              _Utils_Tuple2(
                elm$browser$Debugger$Metadata$Process,
                'Process.Id',
              ),
              _Utils_Tuple2(
                elm$browser$Debugger$Metadata$Socket,
                'WebSocket.LowLevel.WebSocket',
              ),
              _Utils_Tuple2(
                elm$browser$Debugger$Metadata$Request,
                'Http.Request',
              ),
              _Utils_Tuple2(
                elm$browser$Debugger$Metadata$Program,
                'Platform.Program',
              ),
              _Utils_Tuple2(
                elm$browser$Debugger$Metadata$VirtualDom,
                'VirtualDom.Node',
              ),
              _Utils_Tuple2(
                elm$browser$Debugger$Metadata$VirtualDom,
                'VirtualDom.Attribute',
              ),
            ],
          )
          var elm$core$List$maybeCons = F3(function(f, mx, xs) {
            var _n0 = f(mx)
            if (_n0.$ === 'Just') {
              var x = _n0.a
              return A2(elm$core$List$cons, x, xs)
            } else {
              return xs
            }
          })
          var elm$core$List$filterMap = F2(function(f, xs) {
            return A3(
              elm$core$List$foldr,
              elm$core$List$maybeCons(f),
              _List_Nil,
              xs,
            )
          })
          var elm$browser$Debugger$Metadata$findProblems = function(tipe) {
            return A2(
              elm$core$List$filterMap,
              elm$browser$Debugger$Metadata$hasProblem(tipe),
              elm$browser$Debugger$Metadata$problemTable,
            )
          }
          var elm$browser$Debugger$Metadata$collectBadAliases = F3(
            function(name, _n0, list) {
              var tipe = _n0.tipe
              var _n1 = elm$browser$Debugger$Metadata$findProblems(tipe)
              if (!_n1.b) {
                return list
              } else {
                var problems = _n1
                return A2(
                  elm$core$List$cons,
                  A2(
                    elm$browser$Debugger$Metadata$ProblemType,
                    name,
                    problems,
                  ),
                  list,
                )
              }
            },
          )
          var elm$core$Dict$values = function(dict) {
            return A3(
              elm$core$Dict$foldr,
              F3(function(key, value, valueList) {
                return A2(elm$core$List$cons, value, valueList)
              }),
              _List_Nil,
              dict,
            )
          }
          var elm$core$List$append = F2(function(xs, ys) {
            if (!ys.b) {
              return xs
            } else {
              return A3(elm$core$List$foldr, elm$core$List$cons, ys, xs)
            }
          })
          var elm$core$List$concat = function(lists) {
            return A3(
              elm$core$List$foldr,
              elm$core$List$append,
              _List_Nil,
              lists,
            )
          }
          var elm$core$List$concatMap = F2(function(f, list) {
            return elm$core$List$concat(A2(elm$core$List$map, f, list))
          })
          var elm$browser$Debugger$Metadata$collectBadUnions = F3(function(
            name,
            _n0,
            list,
          ) {
            var tags = _n0.tags
            var _n1 = A2(
              elm$core$List$concatMap,
              elm$browser$Debugger$Metadata$findProblems,
              elm$core$List$concat(elm$core$Dict$values(tags)),
            )
            if (!_n1.b) {
              return list
            } else {
              var problems = _n1
              return A2(
                elm$core$List$cons,
                A2(
                  elm$browser$Debugger$Metadata$ProblemType,
                  name,
                  problems,
                ),
                list,
              )
            }
          })
          var elm$core$Dict$foldl = F3(function(func, acc, dict) {
            foldl: while (true) {
              if (dict.$ === 'RBEmpty_elm_builtin') {
                return acc
              } else {
                var key = dict.b
                var value = dict.c
                var left = dict.d
                var right = dict.e
                var $temp$func = func,
                  $temp$acc = A3(
                    func,
                    key,
                    value,
                    A3(elm$core$Dict$foldl, func, acc, left),
                  ),
                  $temp$dict = right
                func = $temp$func
                acc = $temp$acc
                dict = $temp$dict
                continue foldl
              }
            }
          })
          var elm$browser$Debugger$Metadata$isPortable = function(_n0) {
            var types = _n0.types
            var badAliases = A3(
              elm$core$Dict$foldl,
              elm$browser$Debugger$Metadata$collectBadAliases,
              _List_Nil,
              types.aliases,
            )
            var _n1 = A3(
              elm$core$Dict$foldl,
              elm$browser$Debugger$Metadata$collectBadUnions,
              badAliases,
              types.unions,
            )
            if (!_n1.b) {
              return elm$core$Maybe$Nothing
            } else {
              var problems = _n1
              return elm$core$Maybe$Just(
                A2(
                  elm$browser$Debugger$Metadata$Error,
                  types.message,
                  problems,
                ),
              )
            }
          }
          var elm$json$Json$Decode$decodeValue = _Json_run
          var elm$browser$Debugger$Metadata$decode = function(value) {
            var _n0 = A2(
              elm$json$Json$Decode$decodeValue,
              elm$browser$Debugger$Metadata$decoder,
              value,
            )
            if (_n0.$ === 'Err') {
              return elm$core$Result$Err(
                A2(
                  elm$browser$Debugger$Metadata$Error,
                  'The compiler is generating bad metadata. This is a compiler bug!',
                  _List_Nil,
                ),
              )
            } else {
              var metadata = _n0.a
              var _n1 = elm$browser$Debugger$Metadata$isPortable(metadata)
              if (_n1.$ === 'Nothing') {
                return elm$core$Result$Ok(metadata)
              } else {
                var error = _n1.a
                return elm$core$Result$Err(error)
              }
            }
          }
          var elm$browser$Debugger$Overlay$None = { $: 'None' }
          var elm$browser$Debugger$Overlay$none = elm$browser$Debugger$Overlay$None
          var elm$core$Platform$Cmd$map = _Platform_map
          var elm$browser$Debugger$Main$wrapInit = F4(function(
            metadata,
            popout,
            init,
            flags,
          ) {
            var _n0 = init(flags)
            var userModel = _n0.a
            var userCommands = _n0.b
            return _Utils_Tuple2(
              {
                expando: elm$browser$Debugger$Expando$init(userModel),
                history: elm$browser$Debugger$History$empty(userModel),
                metadata: elm$browser$Debugger$Metadata$decode(metadata),
                overlay: elm$browser$Debugger$Overlay$none,
                popout: popout,
                state: elm$browser$Debugger$Main$Running(userModel),
              },
              A2(
                elm$core$Platform$Cmd$map,
                elm$browser$Debugger$Main$UserMsg,
                userCommands,
              ),
            )
          })
          var elm$browser$Debugger$Main$getLatestModel = function(state) {
            if (state.$ === 'Running') {
              var model = state.a
              return model
            } else {
              var model = state.c
              return model
            }
          }
          var elm$core$Platform$Sub$map = _Platform_map
          var elm$browser$Debugger$Main$wrapSubs = F2(function(
            subscriptions,
            model,
          ) {
            return A2(
              elm$core$Platform$Sub$map,
              elm$browser$Debugger$Main$UserMsg,
              subscriptions(
                elm$browser$Debugger$Main$getLatestModel(model.state),
              ),
            )
          })
          var elm$core$Dict$get = F2(function(targetKey, dict) {
            get: while (true) {
              if (dict.$ === 'RBEmpty_elm_builtin') {
                return elm$core$Maybe$Nothing
              } else {
                var key = dict.b
                var value = dict.c
                var left = dict.d
                var right = dict.e
                var _n1 = A2(elm$core$Basics$compare, targetKey, key)
                switch (_n1.$) {
                  case 'LT':
                    var $temp$targetKey = targetKey,
                      $temp$dict = left
                    targetKey = $temp$targetKey
                    dict = $temp$dict
                    continue get
                  case 'EQ':
                    return elm$core$Maybe$Just(value)
                  default:
                    var $temp$targetKey = targetKey,
                      $temp$dict = right
                    targetKey = $temp$targetKey
                    dict = $temp$dict
                    continue get
                }
              }
            }
          })
          var elm$browser$Debugger$Expando$mergeDictHelp = F3(function(
            oldDict,
            key,
            value,
          ) {
            var _n12 = A2(elm$core$Dict$get, key, oldDict)
            if (_n12.$ === 'Nothing') {
              return value
            } else {
              var oldValue = _n12.a
              return A2(
                elm$browser$Debugger$Expando$mergeHelp,
                oldValue,
                value,
              )
            }
          })
          var elm$browser$Debugger$Expando$mergeHelp = F2(function(
            old,
            _new,
          ) {
            var _n3 = _Utils_Tuple2(old, _new)
            _n3$6: while (true) {
              switch (_n3.b.$) {
                case 'S':
                  return _new
                case 'Primitive':
                  return _new
                case 'Sequence':
                  if (_n3.a.$ === 'Sequence') {
                    var _n4 = _n3.a
                    var isClosed = _n4.b
                    var oldValues = _n4.c
                    var _n5 = _n3.b
                    var seqType = _n5.a
                    var newValues = _n5.c
                    return A3(
                      elm$browser$Debugger$Expando$Sequence,
                      seqType,
                      isClosed,
                      A2(
                        elm$browser$Debugger$Expando$mergeListHelp,
                        oldValues,
                        newValues,
                      ),
                    )
                  } else {
                    break _n3$6
                  }
                case 'Dictionary':
                  if (_n3.a.$ === 'Dictionary') {
                    var _n6 = _n3.a
                    var isClosed = _n6.a
                    var _n7 = _n3.b
                    var keyValuePairs = _n7.b
                    return A2(
                      elm$browser$Debugger$Expando$Dictionary,
                      isClosed,
                      keyValuePairs,
                    )
                  } else {
                    break _n3$6
                  }
                case 'Record':
                  if (_n3.a.$ === 'Record') {
                    var _n8 = _n3.a
                    var isClosed = _n8.a
                    var oldDict = _n8.b
                    var _n9 = _n3.b
                    var newDict = _n9.b
                    return A2(
                      elm$browser$Debugger$Expando$Record,
                      isClosed,
                      A2(
                        elm$core$Dict$map,
                        elm$browser$Debugger$Expando$mergeDictHelp(
                          oldDict,
                        ),
                        newDict,
                      ),
                    )
                  } else {
                    break _n3$6
                  }
                default:
                  if (_n3.a.$ === 'Constructor') {
                    var _n10 = _n3.a
                    var isClosed = _n10.b
                    var oldValues = _n10.c
                    var _n11 = _n3.b
                    var maybeName = _n11.a
                    var newValues = _n11.c
                    return A3(
                      elm$browser$Debugger$Expando$Constructor,
                      maybeName,
                      isClosed,
                      A2(
                        elm$browser$Debugger$Expando$mergeListHelp,
                        oldValues,
                        newValues,
                      ),
                    )
                  } else {
                    break _n3$6
                  }
              }
            }
            return _new
          })
          var elm$browser$Debugger$Expando$mergeListHelp = F2(function(
            olds,
            news,
          ) {
            var _n0 = _Utils_Tuple2(olds, news)
            if (!_n0.a.b) {
              return news
            } else {
              if (!_n0.b.b) {
                return news
              } else {
                var _n1 = _n0.a
                var x = _n1.a
                var xs = _n1.b
                var _n2 = _n0.b
                var y = _n2.a
                var ys = _n2.b
                return A2(
                  elm$core$List$cons,
                  A2(elm$browser$Debugger$Expando$mergeHelp, x, y),
                  A2(elm$browser$Debugger$Expando$mergeListHelp, xs, ys),
                )
              }
            }
          })
          var elm$browser$Debugger$Expando$merge = F2(function(
            value,
            expando,
          ) {
            return A2(
              elm$browser$Debugger$Expando$mergeHelp,
              expando,
              _Debugger_init(value),
            )
          })
          var elm$browser$Debugger$Expando$updateIndex = F3(function(
            n,
            func,
            list,
          ) {
            if (!list.b) {
              return _List_Nil
            } else {
              var x = list.a
              var xs = list.b
              return n <= 0
                ? A2(elm$core$List$cons, func(x), xs)
                : A2(
                    elm$core$List$cons,
                    x,
                    A3(
                      elm$browser$Debugger$Expando$updateIndex,
                      n - 1,
                      func,
                      xs,
                    ),
                  )
            }
          })
          var elm$core$Basics$not = _Basics_not
          var elm$core$Dict$getMin = function(dict) {
            getMin: while (true) {
              if (
                dict.$ === 'RBNode_elm_builtin' &&
                dict.d.$ === 'RBNode_elm_builtin'
              ) {
                var left = dict.d
                var $temp$dict = left
                dict = $temp$dict
                continue getMin
              } else {
                return dict
              }
            }
          }
          var elm$core$Dict$moveRedLeft = function(dict) {
            if (
              dict.$ === 'RBNode_elm_builtin' &&
              dict.d.$ === 'RBNode_elm_builtin' &&
              dict.e.$ === 'RBNode_elm_builtin'
            ) {
              if (
                dict.e.d.$ === 'RBNode_elm_builtin' &&
                dict.e.d.a.$ === 'Red'
              ) {
                var clr = dict.a
                var k = dict.b
                var v = dict.c
                var _n1 = dict.d
                var lClr = _n1.a
                var lK = _n1.b
                var lV = _n1.c
                var lLeft = _n1.d
                var lRight = _n1.e
                var _n2 = dict.e
                var rClr = _n2.a
                var rK = _n2.b
                var rV = _n2.c
                var rLeft = _n2.d
                var _n3 = rLeft.a
                var rlK = rLeft.b
                var rlV = rLeft.c
                var rlL = rLeft.d
                var rlR = rLeft.e
                var rRight = _n2.e
                return A5(
                  elm$core$Dict$RBNode_elm_builtin,
                  elm$core$Dict$Red,
                  rlK,
                  rlV,
                  A5(
                    elm$core$Dict$RBNode_elm_builtin,
                    elm$core$Dict$Black,
                    k,
                    v,
                    A5(
                      elm$core$Dict$RBNode_elm_builtin,
                      elm$core$Dict$Red,
                      lK,
                      lV,
                      lLeft,
                      lRight,
                    ),
                    rlL,
                  ),
                  A5(
                    elm$core$Dict$RBNode_elm_builtin,
                    elm$core$Dict$Black,
                    rK,
                    rV,
                    rlR,
                    rRight,
                  ),
                )
              } else {
                var clr = dict.a
                var k = dict.b
                var v = dict.c
                var _n4 = dict.d
                var lClr = _n4.a
                var lK = _n4.b
                var lV = _n4.c
                var lLeft = _n4.d
                var lRight = _n4.e
                var _n5 = dict.e
                var rClr = _n5.a
                var rK = _n5.b
                var rV = _n5.c
                var rLeft = _n5.d
                var rRight = _n5.e
                if (clr.$ === 'Black') {
                  return A5(
                    elm$core$Dict$RBNode_elm_builtin,
                    elm$core$Dict$Black,
                    k,
                    v,
                    A5(
                      elm$core$Dict$RBNode_elm_builtin,
                      elm$core$Dict$Red,
                      lK,
                      lV,
                      lLeft,
                      lRight,
                    ),
                    A5(
                      elm$core$Dict$RBNode_elm_builtin,
                      elm$core$Dict$Red,
                      rK,
                      rV,
                      rLeft,
                      rRight,
                    ),
                  )
                } else {
                  return A5(
                    elm$core$Dict$RBNode_elm_builtin,
                    elm$core$Dict$Black,
                    k,
                    v,
                    A5(
                      elm$core$Dict$RBNode_elm_builtin,
                      elm$core$Dict$Red,
                      lK,
                      lV,
                      lLeft,
                      lRight,
                    ),
                    A5(
                      elm$core$Dict$RBNode_elm_builtin,
                      elm$core$Dict$Red,
                      rK,
                      rV,
                      rLeft,
                      rRight,
                    ),
                  )
                }
              }
            } else {
              return dict
            }
          }
          var elm$core$Dict$moveRedRight = function(dict) {
            if (
              dict.$ === 'RBNode_elm_builtin' &&
              dict.d.$ === 'RBNode_elm_builtin' &&
              dict.e.$ === 'RBNode_elm_builtin'
            ) {
              if (
                dict.d.d.$ === 'RBNode_elm_builtin' &&
                dict.d.d.a.$ === 'Red'
              ) {
                var clr = dict.a
                var k = dict.b
                var v = dict.c
                var _n1 = dict.d
                var lClr = _n1.a
                var lK = _n1.b
                var lV = _n1.c
                var _n2 = _n1.d
                var _n3 = _n2.a
                var llK = _n2.b
                var llV = _n2.c
                var llLeft = _n2.d
                var llRight = _n2.e
                var lRight = _n1.e
                var _n4 = dict.e
                var rClr = _n4.a
                var rK = _n4.b
                var rV = _n4.c
                var rLeft = _n4.d
                var rRight = _n4.e
                return A5(
                  elm$core$Dict$RBNode_elm_builtin,
                  elm$core$Dict$Red,
                  lK,
                  lV,
                  A5(
                    elm$core$Dict$RBNode_elm_builtin,
                    elm$core$Dict$Black,
                    llK,
                    llV,
                    llLeft,
                    llRight,
                  ),
                  A5(
                    elm$core$Dict$RBNode_elm_builtin,
                    elm$core$Dict$Black,
                    k,
                    v,
                    lRight,
                    A5(
                      elm$core$Dict$RBNode_elm_builtin,
                      elm$core$Dict$Red,
                      rK,
                      rV,
                      rLeft,
                      rRight,
                    ),
                  ),
                )
              } else {
                var clr = dict.a
                var k = dict.b
                var v = dict.c
                var _n5 = dict.d
                var lClr = _n5.a
                var lK = _n5.b
                var lV = _n5.c
                var lLeft = _n5.d
                var lRight = _n5.e
                var _n6 = dict.e
                var rClr = _n6.a
                var rK = _n6.b
                var rV = _n6.c
                var rLeft = _n6.d
                var rRight = _n6.e
                if (clr.$ === 'Black') {
                  return A5(
                    elm$core$Dict$RBNode_elm_builtin,
                    elm$core$Dict$Black,
                    k,
                    v,
                    A5(
                      elm$core$Dict$RBNode_elm_builtin,
                      elm$core$Dict$Red,
                      lK,
                      lV,
                      lLeft,
                      lRight,
                    ),
                    A5(
                      elm$core$Dict$RBNode_elm_builtin,
                      elm$core$Dict$Red,
                      rK,
                      rV,
                      rLeft,
                      rRight,
                    ),
                  )
                } else {
                  return A5(
                    elm$core$Dict$RBNode_elm_builtin,
                    elm$core$Dict$Black,
                    k,
                    v,
                    A5(
                      elm$core$Dict$RBNode_elm_builtin,
                      elm$core$Dict$Red,
                      lK,
                      lV,
                      lLeft,
                      lRight,
                    ),
                    A5(
                      elm$core$Dict$RBNode_elm_builtin,
                      elm$core$Dict$Red,
                      rK,
                      rV,
                      rLeft,
                      rRight,
                    ),
                  )
                }
              }
            } else {
              return dict
            }
          }
          var elm$core$Dict$removeHelpPrepEQGT = F7(function(
            targetKey,
            dict,
            color,
            key,
            value,
            left,
            right,
          ) {
            if (left.$ === 'RBNode_elm_builtin' && left.a.$ === 'Red') {
              var _n1 = left.a
              var lK = left.b
              var lV = left.c
              var lLeft = left.d
              var lRight = left.e
              return A5(
                elm$core$Dict$RBNode_elm_builtin,
                color,
                lK,
                lV,
                lLeft,
                A5(
                  elm$core$Dict$RBNode_elm_builtin,
                  elm$core$Dict$Red,
                  key,
                  value,
                  lRight,
                  right,
                ),
              )
            } else {
              _n2$2: while (true) {
                if (
                  right.$ === 'RBNode_elm_builtin' &&
                  right.a.$ === 'Black'
                ) {
                  if (right.d.$ === 'RBNode_elm_builtin') {
                    if (right.d.a.$ === 'Black') {
                      var _n3 = right.a
                      var _n4 = right.d
                      var _n5 = _n4.a
                      return elm$core$Dict$moveRedRight(dict)
                    } else {
                      break _n2$2
                    }
                  } else {
                    var _n6 = right.a
                    var _n7 = right.d
                    return elm$core$Dict$moveRedRight(dict)
                  }
                } else {
                  break _n2$2
                }
              }
              return dict
            }
          })
          var elm$core$Dict$removeMin = function(dict) {
            if (
              dict.$ === 'RBNode_elm_builtin' &&
              dict.d.$ === 'RBNode_elm_builtin'
            ) {
              var color = dict.a
              var key = dict.b
              var value = dict.c
              var left = dict.d
              var lColor = left.a
              var lLeft = left.d
              var right = dict.e
              if (lColor.$ === 'Black') {
                if (
                  lLeft.$ === 'RBNode_elm_builtin' &&
                  lLeft.a.$ === 'Red'
                ) {
                  var _n3 = lLeft.a
                  return A5(
                    elm$core$Dict$RBNode_elm_builtin,
                    color,
                    key,
                    value,
                    elm$core$Dict$removeMin(left),
                    right,
                  )
                } else {
                  var _n4 = elm$core$Dict$moveRedLeft(dict)
                  if (_n4.$ === 'RBNode_elm_builtin') {
                    var nColor = _n4.a
                    var nKey = _n4.b
                    var nValue = _n4.c
                    var nLeft = _n4.d
                    var nRight = _n4.e
                    return A5(
                      elm$core$Dict$balance,
                      nColor,
                      nKey,
                      nValue,
                      elm$core$Dict$removeMin(nLeft),
                      nRight,
                    )
                  } else {
                    return elm$core$Dict$RBEmpty_elm_builtin
                  }
                }
              } else {
                return A5(
                  elm$core$Dict$RBNode_elm_builtin,
                  color,
                  key,
                  value,
                  elm$core$Dict$removeMin(left),
                  right,
                )
              }
            } else {
              return elm$core$Dict$RBEmpty_elm_builtin
            }
          }
          var elm$core$Dict$removeHelp = F2(function(targetKey, dict) {
            if (dict.$ === 'RBEmpty_elm_builtin') {
              return elm$core$Dict$RBEmpty_elm_builtin
            } else {
              var color = dict.a
              var key = dict.b
              var value = dict.c
              var left = dict.d
              var right = dict.e
              if (_Utils_cmp(targetKey, key) < 0) {
                if (
                  left.$ === 'RBNode_elm_builtin' &&
                  left.a.$ === 'Black'
                ) {
                  var _n4 = left.a
                  var lLeft = left.d
                  if (
                    lLeft.$ === 'RBNode_elm_builtin' &&
                    lLeft.a.$ === 'Red'
                  ) {
                    var _n6 = lLeft.a
                    return A5(
                      elm$core$Dict$RBNode_elm_builtin,
                      color,
                      key,
                      value,
                      A2(elm$core$Dict$removeHelp, targetKey, left),
                      right,
                    )
                  } else {
                    var _n7 = elm$core$Dict$moveRedLeft(dict)
                    if (_n7.$ === 'RBNode_elm_builtin') {
                      var nColor = _n7.a
                      var nKey = _n7.b
                      var nValue = _n7.c
                      var nLeft = _n7.d
                      var nRight = _n7.e
                      return A5(
                        elm$core$Dict$balance,
                        nColor,
                        nKey,
                        nValue,
                        A2(elm$core$Dict$removeHelp, targetKey, nLeft),
                        nRight,
                      )
                    } else {
                      return elm$core$Dict$RBEmpty_elm_builtin
                    }
                  }
                } else {
                  return A5(
                    elm$core$Dict$RBNode_elm_builtin,
                    color,
                    key,
                    value,
                    A2(elm$core$Dict$removeHelp, targetKey, left),
                    right,
                  )
                }
              } else {
                return A2(
                  elm$core$Dict$removeHelpEQGT,
                  targetKey,
                  A7(
                    elm$core$Dict$removeHelpPrepEQGT,
                    targetKey,
                    dict,
                    color,
                    key,
                    value,
                    left,
                    right,
                  ),
                )
              }
            }
          })
          var elm$core$Dict$removeHelpEQGT = F2(function(targetKey, dict) {
            if (dict.$ === 'RBNode_elm_builtin') {
              var color = dict.a
              var key = dict.b
              var value = dict.c
              var left = dict.d
              var right = dict.e
              if (_Utils_eq(targetKey, key)) {
                var _n1 = elm$core$Dict$getMin(right)
                if (_n1.$ === 'RBNode_elm_builtin') {
                  var minKey = _n1.b
                  var minValue = _n1.c
                  return A5(
                    elm$core$Dict$balance,
                    color,
                    minKey,
                    minValue,
                    left,
                    elm$core$Dict$removeMin(right),
                  )
                } else {
                  return elm$core$Dict$RBEmpty_elm_builtin
                }
              } else {
                return A5(
                  elm$core$Dict$balance,
                  color,
                  key,
                  value,
                  left,
                  A2(elm$core$Dict$removeHelp, targetKey, right),
                )
              }
            } else {
              return elm$core$Dict$RBEmpty_elm_builtin
            }
          })
          var elm$core$Dict$remove = F2(function(key, dict) {
            var _n0 = A2(elm$core$Dict$removeHelp, key, dict)
            if (_n0.$ === 'RBNode_elm_builtin' && _n0.a.$ === 'Red') {
              var _n1 = _n0.a
              var k = _n0.b
              var v = _n0.c
              var l = _n0.d
              var r = _n0.e
              return A5(
                elm$core$Dict$RBNode_elm_builtin,
                elm$core$Dict$Black,
                k,
                v,
                l,
                r,
              )
            } else {
              var x = _n0
              return x
            }
          })
          var elm$core$Dict$update = F3(function(
            targetKey,
            alter,
            dictionary,
          ) {
            var _n0 = alter(A2(elm$core$Dict$get, targetKey, dictionary))
            if (_n0.$ === 'Just') {
              var value = _n0.a
              return A3(elm$core$Dict$insert, targetKey, value, dictionary)
            } else {
              return A2(elm$core$Dict$remove, targetKey, dictionary)
            }
          })
          var elm$browser$Debugger$Expando$update = F2(function(
            msg,
            value,
          ) {
            switch (value.$) {
              case 'S':
                return value
              case 'Primitive':
                return value
              case 'Sequence':
                var seqType = value.a
                var isClosed = value.b
                var valueList = value.c
                switch (msg.$) {
                  case 'Toggle':
                    return A3(
                      elm$browser$Debugger$Expando$Sequence,
                      seqType,
                      !isClosed,
                      valueList,
                    )
                  case 'Index':
                    if (msg.a.$ === 'None') {
                      var _n3 = msg.a
                      var index = msg.b
                      var subMsg = msg.c
                      return A3(
                        elm$browser$Debugger$Expando$Sequence,
                        seqType,
                        isClosed,
                        A3(
                          elm$browser$Debugger$Expando$updateIndex,
                          index,
                          elm$browser$Debugger$Expando$update(subMsg),
                          valueList,
                        ),
                      )
                    } else {
                      return value
                    }
                  default:
                    return value
                }
              case 'Dictionary':
                var isClosed = value.a
                var keyValuePairs = value.b
                switch (msg.$) {
                  case 'Toggle':
                    return A2(
                      elm$browser$Debugger$Expando$Dictionary,
                      !isClosed,
                      keyValuePairs,
                    )
                  case 'Index':
                    var redirect = msg.a
                    var index = msg.b
                    var subMsg = msg.c
                    switch (redirect.$) {
                      case 'None':
                        return value
                      case 'Key':
                        return A2(
                          elm$browser$Debugger$Expando$Dictionary,
                          isClosed,
                          A3(
                            elm$browser$Debugger$Expando$updateIndex,
                            index,
                            function(_n6) {
                              var k = _n6.a
                              var v = _n6.b
                              return _Utils_Tuple2(
                                A2(
                                  elm$browser$Debugger$Expando$update,
                                  subMsg,
                                  k,
                                ),
                                v,
                              )
                            },
                            keyValuePairs,
                          ),
                        )
                      default:
                        return A2(
                          elm$browser$Debugger$Expando$Dictionary,
                          isClosed,
                          A3(
                            elm$browser$Debugger$Expando$updateIndex,
                            index,
                            function(_n7) {
                              var k = _n7.a
                              var v = _n7.b
                              return _Utils_Tuple2(
                                k,
                                A2(
                                  elm$browser$Debugger$Expando$update,
                                  subMsg,
                                  v,
                                ),
                              )
                            },
                            keyValuePairs,
                          ),
                        )
                    }
                  default:
                    return value
                }
              case 'Record':
                var isClosed = value.a
                var valueDict = value.b
                switch (msg.$) {
                  case 'Toggle':
                    return A2(
                      elm$browser$Debugger$Expando$Record,
                      !isClosed,
                      valueDict,
                    )
                  case 'Index':
                    return value
                  default:
                    var field = msg.a
                    var subMsg = msg.b
                    return A2(
                      elm$browser$Debugger$Expando$Record,
                      isClosed,
                      A3(
                        elm$core$Dict$update,
                        field,
                        elm$browser$Debugger$Expando$updateField(subMsg),
                        valueDict,
                      ),
                    )
                }
              default:
                var maybeName = value.a
                var isClosed = value.b
                var valueList = value.c
                switch (msg.$) {
                  case 'Toggle':
                    return A3(
                      elm$browser$Debugger$Expando$Constructor,
                      maybeName,
                      !isClosed,
                      valueList,
                    )
                  case 'Index':
                    if (msg.a.$ === 'None') {
                      var _n10 = msg.a
                      var index = msg.b
                      var subMsg = msg.c
                      return A3(
                        elm$browser$Debugger$Expando$Constructor,
                        maybeName,
                        isClosed,
                        A3(
                          elm$browser$Debugger$Expando$updateIndex,
                          index,
                          elm$browser$Debugger$Expando$update(subMsg),
                          valueList,
                        ),
                      )
                    } else {
                      return value
                    }
                  default:
                    return value
                }
            }
          })
          var elm$browser$Debugger$Expando$updateField = F2(function(
            msg,
            maybeExpando,
          ) {
            if (maybeExpando.$ === 'Nothing') {
              return maybeExpando
            } else {
              var expando = maybeExpando.a
              return elm$core$Maybe$Just(
                A2(elm$browser$Debugger$Expando$update, msg, expando),
              )
            }
          })
          var elm$browser$Debugger$History$Snapshot = F2(function(
            model,
            messages,
          ) {
            return { messages: messages, model: model }
          })
          var elm$core$Array$fromListHelp = F3(function(
            list,
            nodeList,
            nodeListSize,
          ) {
            fromListHelp: while (true) {
              var _n0 = A2(
                elm$core$Elm$JsArray$initializeFromList,
                elm$core$Array$branchFactor,
                list,
              )
              var jsArray = _n0.a
              var remainingItems = _n0.b
              if (
                _Utils_cmp(
                  elm$core$Elm$JsArray$length(jsArray),
                  elm$core$Array$branchFactor,
                ) < 0
              ) {
                return A2(elm$core$Array$builderToArray, true, {
                  nodeList: nodeList,
                  nodeListSize: nodeListSize,
                  tail: jsArray,
                })
              } else {
                var $temp$list = remainingItems,
                  $temp$nodeList = A2(
                    elm$core$List$cons,
                    elm$core$Array$Leaf(jsArray),
                    nodeList,
                  ),
                  $temp$nodeListSize = nodeListSize + 1
                list = $temp$list
                nodeList = $temp$nodeList
                nodeListSize = $temp$nodeListSize
                continue fromListHelp
              }
            }
          })
          var elm$core$Array$fromList = function(list) {
            if (!list.b) {
              return elm$core$Array$empty
            } else {
              return A3(elm$core$Array$fromListHelp, list, _List_Nil, 0)
            }
          }
          var elm$browser$Debugger$History$addRecent = F3(function(
            msg,
            newModel,
            _n0,
          ) {
            var model = _n0.model
            var messages = _n0.messages
            var numMessages = _n0.numMessages
            return _Utils_eq(
              numMessages,
              elm$browser$Debugger$History$maxSnapshotSize,
            )
              ? _Utils_Tuple2(
                  elm$core$Maybe$Just(
                    A2(
                      elm$browser$Debugger$History$Snapshot,
                      model,
                      elm$core$Array$fromList(messages),
                    ),
                  ),
                  A3(
                    elm$browser$Debugger$History$RecentHistory,
                    newModel,
                    _List_fromArray([msg]),
                    1,
                  ),
                )
              : _Utils_Tuple2(
                  elm$core$Maybe$Nothing,
                  A3(
                    elm$browser$Debugger$History$RecentHistory,
                    model,
                    A2(elm$core$List$cons, msg, messages),
                    numMessages + 1,
                  ),
                )
          })
          var elm$core$Bitwise$shiftRightZfBy = _Bitwise_shiftRightZfBy
          var elm$core$Array$bitMask =
            4294967295 >>> (32 - elm$core$Array$shiftStep)
          var elm$core$Basics$ge = _Utils_ge
          var elm$core$Bitwise$and = _Bitwise_and
          var elm$core$Elm$JsArray$push = _JsArray_push
          var elm$core$Elm$JsArray$singleton = _JsArray_singleton
          var elm$core$Elm$JsArray$unsafeGet = _JsArray_unsafeGet
          var elm$core$Elm$JsArray$unsafeSet = _JsArray_unsafeSet
          var elm$core$Array$insertTailInTree = F4(function(
            shift,
            index,
            tail,
            tree,
          ) {
            var pos = elm$core$Array$bitMask & (index >>> shift)
            if (_Utils_cmp(pos, elm$core$Elm$JsArray$length(tree)) > -1) {
              if (shift === 5) {
                return A2(
                  elm$core$Elm$JsArray$push,
                  elm$core$Array$Leaf(tail),
                  tree,
                )
              } else {
                var newSub = elm$core$Array$SubTree(
                  A4(
                    elm$core$Array$insertTailInTree,
                    shift - elm$core$Array$shiftStep,
                    index,
                    tail,
                    elm$core$Elm$JsArray$empty,
                  ),
                )
                return A2(elm$core$Elm$JsArray$push, newSub, tree)
              }
            } else {
              var value = A2(elm$core$Elm$JsArray$unsafeGet, pos, tree)
              if (value.$ === 'SubTree') {
                var subTree = value.a
                var newSub = elm$core$Array$SubTree(
                  A4(
                    elm$core$Array$insertTailInTree,
                    shift - elm$core$Array$shiftStep,
                    index,
                    tail,
                    subTree,
                  ),
                )
                return A3(
                  elm$core$Elm$JsArray$unsafeSet,
                  pos,
                  newSub,
                  tree,
                )
              } else {
                var newSub = elm$core$Array$SubTree(
                  A4(
                    elm$core$Array$insertTailInTree,
                    shift - elm$core$Array$shiftStep,
                    index,
                    tail,
                    elm$core$Elm$JsArray$singleton(value),
                  ),
                )
                return A3(
                  elm$core$Elm$JsArray$unsafeSet,
                  pos,
                  newSub,
                  tree,
                )
              }
            }
          })
          var elm$core$Bitwise$shiftLeftBy = _Bitwise_shiftLeftBy
          var elm$core$Array$unsafeReplaceTail = F2(function(
            newTail,
            _n0,
          ) {
            var len = _n0.a
            var startShift = _n0.b
            var tree = _n0.c
            var tail = _n0.d
            var originalTailLen = elm$core$Elm$JsArray$length(tail)
            var newTailLen = elm$core$Elm$JsArray$length(newTail)
            var newArrayLen = len + (newTailLen - originalTailLen)
            if (_Utils_eq(newTailLen, elm$core$Array$branchFactor)) {
              var overflow =
                _Utils_cmp(
                  newArrayLen >>> elm$core$Array$shiftStep,
                  1 << startShift,
                ) > 0
              if (overflow) {
                var newShift = startShift + elm$core$Array$shiftStep
                var newTree = A4(
                  elm$core$Array$insertTailInTree,
                  newShift,
                  len,
                  newTail,
                  elm$core$Elm$JsArray$singleton(
                    elm$core$Array$SubTree(tree),
                  ),
                )
                return A4(
                  elm$core$Array$Array_elm_builtin,
                  newArrayLen,
                  newShift,
                  newTree,
                  elm$core$Elm$JsArray$empty,
                )
              } else {
                return A4(
                  elm$core$Array$Array_elm_builtin,
                  newArrayLen,
                  startShift,
                  A4(
                    elm$core$Array$insertTailInTree,
                    startShift,
                    len,
                    newTail,
                    tree,
                  ),
                  elm$core$Elm$JsArray$empty,
                )
              }
            } else {
              return A4(
                elm$core$Array$Array_elm_builtin,
                newArrayLen,
                startShift,
                tree,
                newTail,
              )
            }
          })
          var elm$core$Array$push = F2(function(a, array) {
            var tail = array.d
            return A2(
              elm$core$Array$unsafeReplaceTail,
              A2(elm$core$Elm$JsArray$push, a, tail),
              array,
            )
          })
          var elm$browser$Debugger$History$add = F3(function(
            msg,
            model,
            _n0,
          ) {
            var snapshots = _n0.snapshots
            var recent = _n0.recent
            var numMessages = _n0.numMessages
            var _n1 = A3(
              elm$browser$Debugger$History$addRecent,
              msg,
              model,
              recent,
            )
            if (_n1.a.$ === 'Just') {
              var snapshot = _n1.a.a
              var newRecent = _n1.b
              return A3(
                elm$browser$Debugger$History$History,
                A2(elm$core$Array$push, snapshot, snapshots),
                newRecent,
                numMessages + 1,
              )
            } else {
              var _n2 = _n1.a
              var newRecent = _n1.b
              return A3(
                elm$browser$Debugger$History$History,
                snapshots,
                newRecent,
                numMessages + 1,
              )
            }
          })
          var elm$browser$Debugger$History$Stepping = F2(function(a, b) {
            return { $: 'Stepping', a: a, b: b }
          })
          var elm$browser$Debugger$History$Done = F2(function(a, b) {
            return { $: 'Done', a: a, b: b }
          })
          var elm$browser$Debugger$History$getHelp = F3(function(
            update,
            msg,
            getResult,
          ) {
            if (getResult.$ === 'Done') {
              return getResult
            } else {
              var n = getResult.a
              var model = getResult.b
              return !n
                ? A2(
                    elm$browser$Debugger$History$Done,
                    msg,
                    A2(update, msg, model).a,
                  )
                : A2(
                    elm$browser$Debugger$History$Stepping,
                    n - 1,
                    A2(update, msg, model).a,
                  )
            }
          })
          var elm$browser$Debugger$History$undone = function(getResult) {
            undone: while (true) {
              if (getResult.$ === 'Done') {
                var msg = getResult.a
                var model = getResult.b
                return _Utils_Tuple2(model, msg)
              } else {
                var $temp$getResult = getResult
                getResult = $temp$getResult
                continue undone
              }
            }
          }
          var elm$core$Array$getHelp = F3(function(shift, index, tree) {
            getHelp: while (true) {
              var pos = elm$core$Array$bitMask & (index >>> shift)
              var _n0 = A2(elm$core$Elm$JsArray$unsafeGet, pos, tree)
              if (_n0.$ === 'SubTree') {
                var subTree = _n0.a
                var $temp$shift = shift - elm$core$Array$shiftStep,
                  $temp$index = index,
                  $temp$tree = subTree
                shift = $temp$shift
                index = $temp$index
                tree = $temp$tree
                continue getHelp
              } else {
                var values = _n0.a
                return A2(
                  elm$core$Elm$JsArray$unsafeGet,
                  elm$core$Array$bitMask & index,
                  values,
                )
              }
            }
          })
          var elm$core$Array$tailIndex = function(len) {
            return (len >>> 5) << 5
          }
          var elm$core$Array$get = F2(function(index, _n0) {
            var len = _n0.a
            var startShift = _n0.b
            var tree = _n0.c
            var tail = _n0.d
            return index < 0 || _Utils_cmp(index, len) > -1
              ? elm$core$Maybe$Nothing
              : _Utils_cmp(index, elm$core$Array$tailIndex(len)) > -1
              ? elm$core$Maybe$Just(
                  A2(
                    elm$core$Elm$JsArray$unsafeGet,
                    elm$core$Array$bitMask & index,
                    tail,
                  ),
                )
              : elm$core$Maybe$Just(
                  A3(elm$core$Array$getHelp, startShift, index, tree),
                )
          })
          var elm$browser$Debugger$History$get = F3(function(
            update,
            index,
            history,
          ) {
            get: while (true) {
              var recent = history.recent
              var snapshotMax = history.numMessages - recent.numMessages
              if (_Utils_cmp(index, snapshotMax) > -1) {
                return elm$browser$Debugger$History$undone(
                  A3(
                    elm$core$List$foldr,
                    elm$browser$Debugger$History$getHelp(update),
                    A2(
                      elm$browser$Debugger$History$Stepping,
                      index - snapshotMax,
                      recent.model,
                    ),
                    recent.messages,
                  ),
                )
              } else {
                var _n0 = A2(
                  elm$core$Array$get,
                  (index / elm$browser$Debugger$History$maxSnapshotSize) |
                    0,
                  history.snapshots,
                )
                if (_n0.$ === 'Nothing') {
                  var $temp$update = update,
                    $temp$index = index,
                    $temp$history = history
                  update = $temp$update
                  index = $temp$index
                  history = $temp$history
                  continue get
                } else {
                  var model = _n0.a.model
                  var messages = _n0.a.messages
                  return elm$browser$Debugger$History$undone(
                    A3(
                      elm$core$Array$foldr,
                      elm$browser$Debugger$History$getHelp(update),
                      A2(
                        elm$browser$Debugger$History$Stepping,
                        index %
                          elm$browser$Debugger$History$maxSnapshotSize,
                        model,
                      ),
                      messages,
                    ),
                  )
                }
              }
            }
          })
          var elm$browser$Debugger$Main$Paused = F3(function(a, b, c) {
            return { $: 'Paused', a: a, b: b, c: c }
          })
          var elm$browser$Debugger$History$elmToJs = _Debugger_unsafeCoerce
          var elm$browser$Debugger$History$encodeHelp = F2(function(
            snapshot,
            allMessages,
          ) {
            return A3(
              elm$core$Array$foldl,
              elm$core$List$cons,
              allMessages,
              snapshot.messages,
            )
          })
          var elm$json$Json$Encode$list = F2(function(func, entries) {
            return _Json_wrap(
              A3(
                elm$core$List$foldl,
                _Json_addEntry(func),
                _Json_emptyArray(_Utils_Tuple0),
                entries,
              ),
            )
          })
          var elm$browser$Debugger$History$encode = function(_n0) {
            var snapshots = _n0.snapshots
            var recent = _n0.recent
            return A2(
              elm$json$Json$Encode$list,
              elm$browser$Debugger$History$elmToJs,
              A3(
                elm$core$Array$foldr,
                elm$browser$Debugger$History$encodeHelp,
                elm$core$List$reverse(recent.messages),
                snapshots,
              ),
            )
          }
          var elm$json$Json$Encode$object = function(pairs) {
            return _Json_wrap(
              A3(
                elm$core$List$foldl,
                F2(function(_n0, obj) {
                  var k = _n0.a
                  var v = _n0.b
                  return A3(_Json_addField, k, v, obj)
                }),
                _Json_emptyObject(_Utils_Tuple0),
                pairs,
              ),
            )
          }
          var elm$browser$Debugger$Metadata$encodeAlias = function(_n0) {
            var args = _n0.args
            var tipe = _n0.tipe
            return elm$json$Json$Encode$object(
              _List_fromArray([
                _Utils_Tuple2(
                  'args',
                  A2(
                    elm$json$Json$Encode$list,
                    elm$json$Json$Encode$string,
                    args,
                  ),
                ),
                _Utils_Tuple2('type', elm$json$Json$Encode$string(tipe)),
              ]),
            )
          }
          var elm$browser$Debugger$Metadata$encodeDict = F2(function(
            f,
            dict,
          ) {
            return elm$json$Json$Encode$object(
              elm$core$Dict$toList(
                A2(
                  elm$core$Dict$map,
                  F2(function(key, value) {
                    return f(value)
                  }),
                  dict,
                ),
              ),
            )
          })
          var elm$browser$Debugger$Metadata$encodeUnion = function(_n0) {
            var args = _n0.args
            var tags = _n0.tags
            return elm$json$Json$Encode$object(
              _List_fromArray([
                _Utils_Tuple2(
                  'args',
                  A2(
                    elm$json$Json$Encode$list,
                    elm$json$Json$Encode$string,
                    args,
                  ),
                ),
                _Utils_Tuple2(
                  'tags',
                  A2(
                    elm$browser$Debugger$Metadata$encodeDict,
                    elm$json$Json$Encode$list(elm$json$Json$Encode$string),
                    tags,
                  ),
                ),
              ]),
            )
          }
          var elm$browser$Debugger$Metadata$encodeTypes = function(_n0) {
            var message = _n0.message
            var unions = _n0.unions
            var aliases = _n0.aliases
            return elm$json$Json$Encode$object(
              _List_fromArray([
                _Utils_Tuple2(
                  'message',
                  elm$json$Json$Encode$string(message),
                ),
                _Utils_Tuple2(
                  'aliases',
                  A2(
                    elm$browser$Debugger$Metadata$encodeDict,
                    elm$browser$Debugger$Metadata$encodeAlias,
                    aliases,
                  ),
                ),
                _Utils_Tuple2(
                  'unions',
                  A2(
                    elm$browser$Debugger$Metadata$encodeDict,
                    elm$browser$Debugger$Metadata$encodeUnion,
                    unions,
                  ),
                ),
              ]),
            )
          }
          var elm$browser$Debugger$Metadata$encodeVersions = function(
            _n0,
          ) {
            var elm = _n0.elm
            return elm$json$Json$Encode$object(
              _List_fromArray([
                _Utils_Tuple2('elm', elm$json$Json$Encode$string(elm)),
              ]),
            )
          }
          var elm$browser$Debugger$Metadata$encode = function(_n0) {
            var versions = _n0.versions
            var types = _n0.types
            return elm$json$Json$Encode$object(
              _List_fromArray([
                _Utils_Tuple2(
                  'versions',
                  elm$browser$Debugger$Metadata$encodeVersions(versions),
                ),
                _Utils_Tuple2(
                  'types',
                  elm$browser$Debugger$Metadata$encodeTypes(types),
                ),
              ]),
            )
          }
          var elm$browser$Debugger$Main$download = F2(function(
            metadata,
            history,
          ) {
            var json = elm$json$Json$Encode$object(
              _List_fromArray([
                _Utils_Tuple2(
                  'metadata',
                  elm$browser$Debugger$Metadata$encode(metadata),
                ),
                _Utils_Tuple2(
                  'history',
                  elm$browser$Debugger$History$encode(history),
                ),
              ]),
            )
            var historyLength = elm$browser$Debugger$History$size(history)
            return A2(
              elm$core$Task$perform,
              function(_n0) {
                return elm$browser$Debugger$Main$NoOp
              },
              A2(_Debugger_download, historyLength, json),
            )
          })
          var elm$browser$Debugger$History$jsToElm = _Debugger_unsafeCoerce
          var elm$json$Json$Decode$value = _Json_decodeValue
          var elm$browser$Debugger$History$decoder = F2(function(
            initialModel,
            update,
          ) {
            var addMessage = F2(function(rawMsg, _n0) {
              var model = _n0.a
              var history = _n0.b
              var msg = elm$browser$Debugger$History$jsToElm(rawMsg)
              return _Utils_Tuple2(
                A2(update, msg, model),
                A3(elm$browser$Debugger$History$add, msg, model, history),
              )
            })
            var updateModel = function(rawMsgs) {
              return A3(
                elm$core$List$foldl,
                addMessage,
                _Utils_Tuple2(
                  initialModel,
                  elm$browser$Debugger$History$empty(initialModel),
                ),
                rawMsgs,
              )
            }
            return A2(
              elm$json$Json$Decode$map,
              updateModel,
              elm$json$Json$Decode$list(elm$json$Json$Decode$value),
            )
          })
          var elm$browser$Debugger$History$getInitialModel = function(
            _n0,
          ) {
            var snapshots = _n0.snapshots
            var recent = _n0.recent
            var _n1 = A2(elm$core$Array$get, 0, snapshots)
            if (_n1.$ === 'Just') {
              var model = _n1.a.model
              return model
            } else {
              return recent.model
            }
          }
          var elm$browser$Debugger$Overlay$BadImport = function(a) {
            return { $: 'BadImport', a: a }
          }
          var elm$browser$Debugger$Report$CorruptHistory = {
            $: 'CorruptHistory',
          }
          var elm$browser$Debugger$Overlay$corruptImport = elm$browser$Debugger$Overlay$BadImport(
            elm$browser$Debugger$Report$CorruptHistory,
          )
          var elm$core$Platform$Cmd$batch = _Platform_batch
          var elm$core$Platform$Cmd$none = elm$core$Platform$Cmd$batch(
            _List_Nil,
          )
          var elm$browser$Debugger$Main$loadNewHistory = F3(function(
            rawHistory,
            update,
            model,
          ) {
            var pureUserUpdate = F2(function(msg, userModel) {
              return A2(update, msg, userModel).a
            })
            var initialUserModel = elm$browser$Debugger$History$getInitialModel(
              model.history,
            )
            var decoder = A2(
              elm$browser$Debugger$History$decoder,
              initialUserModel,
              pureUserUpdate,
            )
            var _n0 = A2(
              elm$json$Json$Decode$decodeValue,
              decoder,
              rawHistory,
            )
            if (_n0.$ === 'Err') {
              return _Utils_Tuple2(
                _Utils_update(model, {
                  overlay: elm$browser$Debugger$Overlay$corruptImport,
                }),
                elm$core$Platform$Cmd$none,
              )
            } else {
              var _n1 = _n0.a
              var latestUserModel = _n1.a
              var newHistory = _n1.b
              return _Utils_Tuple2(
                _Utils_update(model, {
                  expando: elm$browser$Debugger$Expando$init(
                    latestUserModel,
                  ),
                  history: newHistory,
                  overlay: elm$browser$Debugger$Overlay$none,
                  state: elm$browser$Debugger$Main$Running(
                    latestUserModel,
                  ),
                }),
                elm$core$Platform$Cmd$none,
              )
            }
          })
          var elm$core$Basics$always = F2(function(a, _n0) {
            return a
          })
          var elm$browser$Debugger$Main$scroll = function(popout) {
            return A2(
              elm$core$Task$perform,
              elm$core$Basics$always(elm$browser$Debugger$Main$NoOp),
              _Debugger_scroll(popout),
            )
          }
          var elm$browser$Debugger$Main$Upload = function(a) {
            return { $: 'Upload', a: a }
          }
          var elm$browser$Debugger$Main$upload = A2(
            elm$core$Task$perform,
            elm$browser$Debugger$Main$Upload,
            _Debugger_upload(_Utils_Tuple0),
          )
          var elm$browser$Debugger$Overlay$BadMetadata = function(a) {
            return { $: 'BadMetadata', a: a }
          }
          var elm$browser$Debugger$Overlay$badMetadata = elm$browser$Debugger$Overlay$BadMetadata
          var elm$browser$Debugger$Main$withGoodMetadata = F2(function(
            model,
            func,
          ) {
            var _n0 = model.metadata
            if (_n0.$ === 'Ok') {
              var metadata = _n0.a
              return func(metadata)
            } else {
              var error = _n0.a
              return _Utils_Tuple2(
                _Utils_update(model, {
                  overlay: elm$browser$Debugger$Overlay$badMetadata(error),
                }),
                elm$core$Platform$Cmd$none,
              )
            }
          })
          var elm$browser$Debugger$Report$AliasChange = function(a) {
            return { $: 'AliasChange', a: a }
          }
          var elm$browser$Debugger$Metadata$checkAlias = F4(function(
            name,
            old,
            _new,
            changes,
          ) {
            return _Utils_eq(old.tipe, _new.tipe) &&
              _Utils_eq(old.args, _new.args)
              ? changes
              : A2(
                  elm$core$List$cons,
                  elm$browser$Debugger$Report$AliasChange(name),
                  changes,
                )
          })
          var elm$browser$Debugger$Metadata$addTag = F3(function(
            tag,
            _n0,
            changes,
          ) {
            return _Utils_update(changes, {
              added: A2(elm$core$List$cons, tag, changes.added),
            })
          })
          var elm$browser$Debugger$Metadata$checkTag = F4(function(
            tag,
            old,
            _new,
            changes,
          ) {
            return _Utils_eq(old, _new)
              ? changes
              : _Utils_update(changes, {
                  changed: A2(elm$core$List$cons, tag, changes.changed),
                })
          })
          var elm$browser$Debugger$Metadata$removeTag = F3(function(
            tag,
            _n0,
            changes,
          ) {
            return _Utils_update(changes, {
              removed: A2(elm$core$List$cons, tag, changes.removed),
            })
          })
          var elm$browser$Debugger$Report$UnionChange = F2(function(a, b) {
            return { $: 'UnionChange', a: a, b: b }
          })
          var elm$browser$Debugger$Report$TagChanges = F4(function(
            removed,
            changed,
            added,
            argsMatch,
          ) {
            return {
              added: added,
              argsMatch: argsMatch,
              changed: changed,
              removed: removed,
            }
          })
          var elm$browser$Debugger$Report$emptyTagChanges = function(
            argsMatch,
          ) {
            return A4(
              elm$browser$Debugger$Report$TagChanges,
              _List_Nil,
              _List_Nil,
              _List_Nil,
              argsMatch,
            )
          }
          var elm$browser$Debugger$Report$hasTagChanges = function(
            tagChanges,
          ) {
            return _Utils_eq(
              tagChanges,
              A4(
                elm$browser$Debugger$Report$TagChanges,
                _List_Nil,
                _List_Nil,
                _List_Nil,
                true,
              ),
            )
          }
          var elm$core$Dict$merge = F6(function(
            leftStep,
            bothStep,
            rightStep,
            leftDict,
            rightDict,
            initialResult,
          ) {
            var stepState = F3(function(rKey, rValue, _n0) {
              stepState: while (true) {
                var list = _n0.a
                var result = _n0.b
                if (!list.b) {
                  return _Utils_Tuple2(
                    list,
                    A3(rightStep, rKey, rValue, result),
                  )
                } else {
                  var _n2 = list.a
                  var lKey = _n2.a
                  var lValue = _n2.b
                  var rest = list.b
                  if (_Utils_cmp(lKey, rKey) < 0) {
                    var $temp$rKey = rKey,
                      $temp$rValue = rValue,
                      $temp$_n0 = _Utils_Tuple2(
                        rest,
                        A3(leftStep, lKey, lValue, result),
                      )
                    rKey = $temp$rKey
                    rValue = $temp$rValue
                    _n0 = $temp$_n0
                    continue stepState
                  } else {
                    if (_Utils_cmp(lKey, rKey) > 0) {
                      return _Utils_Tuple2(
                        list,
                        A3(rightStep, rKey, rValue, result),
                      )
                    } else {
                      return _Utils_Tuple2(
                        rest,
                        A4(bothStep, lKey, lValue, rValue, result),
                      )
                    }
                  }
                }
              }
            })
            var _n3 = A3(
              elm$core$Dict$foldl,
              stepState,
              _Utils_Tuple2(elm$core$Dict$toList(leftDict), initialResult),
              rightDict,
            )
            var leftovers = _n3.a
            var intermediateResult = _n3.b
            return A3(
              elm$core$List$foldl,
              F2(function(_n4, result) {
                var k = _n4.a
                var v = _n4.b
                return A3(leftStep, k, v, result)
              }),
              intermediateResult,
              leftovers,
            )
          })
          var elm$browser$Debugger$Metadata$checkUnion = F4(function(
            name,
            old,
            _new,
            changes,
          ) {
            var tagChanges = A6(
              elm$core$Dict$merge,
              elm$browser$Debugger$Metadata$removeTag,
              elm$browser$Debugger$Metadata$checkTag,
              elm$browser$Debugger$Metadata$addTag,
              old.tags,
              _new.tags,
              elm$browser$Debugger$Report$emptyTagChanges(
                _Utils_eq(old.args, _new.args),
              ),
            )
            return elm$browser$Debugger$Report$hasTagChanges(tagChanges)
              ? changes
              : A2(
                  elm$core$List$cons,
                  A2(
                    elm$browser$Debugger$Report$UnionChange,
                    name,
                    tagChanges,
                  ),
                  changes,
                )
          })
          var elm$browser$Debugger$Metadata$ignore = F3(function(
            key,
            value,
            report,
          ) {
            return report
          })
          var elm$browser$Debugger$Report$MessageChanged = F2(function(
            a,
            b,
          ) {
            return { $: 'MessageChanged', a: a, b: b }
          })
          var elm$browser$Debugger$Report$SomethingChanged = function(a) {
            return { $: 'SomethingChanged', a: a }
          }
          var elm$core$Basics$neq = _Utils_notEqual
          var elm$browser$Debugger$Metadata$checkTypes = F2(function(
            old,
            _new,
          ) {
            return !_Utils_eq(old.message, _new.message)
              ? A2(
                  elm$browser$Debugger$Report$MessageChanged,
                  old.message,
                  _new.message,
                )
              : elm$browser$Debugger$Report$SomethingChanged(
                  A6(
                    elm$core$Dict$merge,
                    elm$browser$Debugger$Metadata$ignore,
                    elm$browser$Debugger$Metadata$checkUnion,
                    elm$browser$Debugger$Metadata$ignore,
                    old.unions,
                    _new.unions,
                    A6(
                      elm$core$Dict$merge,
                      elm$browser$Debugger$Metadata$ignore,
                      elm$browser$Debugger$Metadata$checkAlias,
                      elm$browser$Debugger$Metadata$ignore,
                      old.aliases,
                      _new.aliases,
                      _List_Nil,
                    ),
                  ),
                )
          })
          var elm$browser$Debugger$Report$VersionChanged = F2(function(
            a,
            b,
          ) {
            return { $: 'VersionChanged', a: a, b: b }
          })
          var elm$browser$Debugger$Metadata$check = F2(function(
            old,
            _new,
          ) {
            return !_Utils_eq(old.versions.elm, _new.versions.elm)
              ? A2(
                  elm$browser$Debugger$Report$VersionChanged,
                  old.versions.elm,
                  _new.versions.elm,
                )
              : A2(
                  elm$browser$Debugger$Metadata$checkTypes,
                  old.types,
                  _new.types,
                )
          })
          var elm$browser$Debugger$Overlay$RiskyImport = F2(function(
            a,
            b,
          ) {
            return { $: 'RiskyImport', a: a, b: b }
          })
          var elm$browser$Debugger$Overlay$uploadDecoder = A3(
            elm$json$Json$Decode$map2,
            F2(function(x, y) {
              return _Utils_Tuple2(x, y)
            }),
            A2(
              elm$json$Json$Decode$field,
              'metadata',
              elm$browser$Debugger$Metadata$decoder,
            ),
            A2(
              elm$json$Json$Decode$field,
              'history',
              elm$json$Json$Decode$value,
            ),
          )
          var elm$browser$Debugger$Report$Fine = { $: 'Fine' }
          var elm$browser$Debugger$Report$Impossible = { $: 'Impossible' }
          var elm$browser$Debugger$Report$Risky = { $: 'Risky' }
          var elm$core$List$isEmpty = function(xs) {
            if (!xs.b) {
              return true
            } else {
              return false
            }
          }
          var elm$browser$Debugger$Report$some = function(list) {
            return !elm$core$List$isEmpty(list)
          }
          var elm$browser$Debugger$Report$evaluateChange = function(
            change,
          ) {
            if (change.$ === 'AliasChange') {
              return elm$browser$Debugger$Report$Impossible
            } else {
              var removed = change.b.removed
              var changed = change.b.changed
              var added = change.b.added
              var argsMatch = change.b.argsMatch
              return !argsMatch ||
                (elm$browser$Debugger$Report$some(changed) ||
                  elm$browser$Debugger$Report$some(removed))
                ? elm$browser$Debugger$Report$Impossible
                : elm$browser$Debugger$Report$some(added)
                ? elm$browser$Debugger$Report$Risky
                : elm$browser$Debugger$Report$Fine
            }
          }
          var elm$browser$Debugger$Report$worstCase = F2(function(
            status,
            statusList,
          ) {
            worstCase: while (true) {
              if (!statusList.b) {
                return status
              } else {
                switch (statusList.a.$) {
                  case 'Impossible':
                    var _n1 = statusList.a
                    return elm$browser$Debugger$Report$Impossible
                  case 'Risky':
                    var _n2 = statusList.a
                    var rest = statusList.b
                    var $temp$status = elm$browser$Debugger$Report$Risky,
                      $temp$statusList = rest
                    status = $temp$status
                    statusList = $temp$statusList
                    continue worstCase
                  default:
                    var _n3 = statusList.a
                    var rest = statusList.b
                    var $temp$status = status,
                      $temp$statusList = rest
                    status = $temp$status
                    statusList = $temp$statusList
                    continue worstCase
                }
              }
            }
          })
          var elm$browser$Debugger$Report$evaluate = function(report) {
            switch (report.$) {
              case 'CorruptHistory':
                return elm$browser$Debugger$Report$Impossible
              case 'VersionChanged':
                return elm$browser$Debugger$Report$Impossible
              case 'MessageChanged':
                return elm$browser$Debugger$Report$Impossible
              default:
                var changes = report.a
                return A2(
                  elm$browser$Debugger$Report$worstCase,
                  elm$browser$Debugger$Report$Fine,
                  A2(
                    elm$core$List$map,
                    elm$browser$Debugger$Report$evaluateChange,
                    changes,
                  ),
                )
            }
          }
          var elm$json$Json$Decode$decodeString = _Json_runOnString
          var elm$browser$Debugger$Overlay$assessImport = F2(function(
            metadata,
            jsonString,
          ) {
            var _n0 = A2(
              elm$json$Json$Decode$decodeString,
              elm$browser$Debugger$Overlay$uploadDecoder,
              jsonString,
            )
            if (_n0.$ === 'Err') {
              return elm$core$Result$Err(
                elm$browser$Debugger$Overlay$corruptImport,
              )
            } else {
              var _n1 = _n0.a
              var foreignMetadata = _n1.a
              var rawHistory = _n1.b
              var report = A2(
                elm$browser$Debugger$Metadata$check,
                foreignMetadata,
                metadata,
              )
              var _n2 = elm$browser$Debugger$Report$evaluate(report)
              switch (_n2.$) {
                case 'Impossible':
                  return elm$core$Result$Err(
                    elm$browser$Debugger$Overlay$BadImport(report),
                  )
                case 'Risky':
                  return elm$core$Result$Err(
                    A2(
                      elm$browser$Debugger$Overlay$RiskyImport,
                      report,
                      rawHistory,
                    ),
                  )
                default:
                  return elm$core$Result$Ok(rawHistory)
              }
            }
          })
          var elm$browser$Debugger$Overlay$close = F2(function(
            msg,
            state,
          ) {
            switch (state.$) {
              case 'None':
                return elm$core$Maybe$Nothing
              case 'BadMetadata':
                return elm$core$Maybe$Nothing
              case 'BadImport':
                return elm$core$Maybe$Nothing
              default:
                var rawHistory = state.b
                if (msg.$ === 'Cancel') {
                  return elm$core$Maybe$Nothing
                } else {
                  return elm$core$Maybe$Just(rawHistory)
                }
            }
          })
          var elm$browser$Debugger$Main$wrapUpdate = F3(function(
            update,
            msg,
            model,
          ) {
            wrapUpdate: while (true) {
              switch (msg.$) {
                case 'NoOp':
                  return _Utils_Tuple2(model, elm$core$Platform$Cmd$none)
                case 'UserMsg':
                  var userMsg = msg.a
                  var userModel = elm$browser$Debugger$Main$getLatestModel(
                    model.state,
                  )
                  var newHistory = A3(
                    elm$browser$Debugger$History$add,
                    userMsg,
                    userModel,
                    model.history,
                  )
                  var _n1 = A2(update, userMsg, userModel)
                  var newUserModel = _n1.a
                  var userCmds = _n1.b
                  var commands = A2(
                    elm$core$Platform$Cmd$map,
                    elm$browser$Debugger$Main$UserMsg,
                    userCmds,
                  )
                  var _n2 = model.state
                  if (_n2.$ === 'Running') {
                    return _Utils_Tuple2(
                      _Utils_update(model, {
                        expando: A2(
                          elm$browser$Debugger$Expando$merge,
                          newUserModel,
                          model.expando,
                        ),
                        history: newHistory,
                        state: elm$browser$Debugger$Main$Running(
                          newUserModel,
                        ),
                      }),
                      elm$core$Platform$Cmd$batch(
                        _List_fromArray([
                          commands,
                          elm$browser$Debugger$Main$scroll(model.popout),
                        ]),
                      ),
                    )
                  } else {
                    var index = _n2.a
                    var indexModel = _n2.b
                    return _Utils_Tuple2(
                      _Utils_update(model, {
                        history: newHistory,
                        state: A3(
                          elm$browser$Debugger$Main$Paused,
                          index,
                          indexModel,
                          newUserModel,
                        ),
                      }),
                      commands,
                    )
                  }
                case 'ExpandoMsg':
                  var eMsg = msg.a
                  return _Utils_Tuple2(
                    _Utils_update(model, {
                      expando: A2(
                        elm$browser$Debugger$Expando$update,
                        eMsg,
                        model.expando,
                      ),
                    }),
                    elm$core$Platform$Cmd$none,
                  )
                case 'Resume':
                  var _n3 = model.state
                  if (_n3.$ === 'Running') {
                    return _Utils_Tuple2(model, elm$core$Platform$Cmd$none)
                  } else {
                    var userModel = _n3.c
                    return _Utils_Tuple2(
                      _Utils_update(model, {
                        expando: A2(
                          elm$browser$Debugger$Expando$merge,
                          userModel,
                          model.expando,
                        ),
                        state: elm$browser$Debugger$Main$Running(
                          userModel,
                        ),
                      }),
                      elm$browser$Debugger$Main$scroll(model.popout),
                    )
                  }
                case 'Jump':
                  var index = msg.a
                  var _n4 = A3(
                    elm$browser$Debugger$History$get,
                    update,
                    index,
                    model.history,
                  )
                  var indexModel = _n4.a
                  var indexMsg = _n4.b
                  return _Utils_Tuple2(
                    _Utils_update(model, {
                      expando: A2(
                        elm$browser$Debugger$Expando$merge,
                        indexModel,
                        model.expando,
                      ),
                      state: A3(
                        elm$browser$Debugger$Main$Paused,
                        index,
                        indexModel,
                        elm$browser$Debugger$Main$getLatestModel(
                          model.state,
                        ),
                      ),
                    }),
                    elm$core$Platform$Cmd$none,
                  )
                case 'Open':
                  return _Utils_Tuple2(
                    model,
                    A2(
                      elm$core$Task$perform,
                      function(_n5) {
                        return elm$browser$Debugger$Main$NoOp
                      },
                      _Debugger_open(model.popout),
                    ),
                  )
                case 'Up':
                  var index = (function() {
                    var _n6 = model.state
                    if (_n6.$ === 'Paused') {
                      var i = _n6.a
                      return i
                    } else {
                      return elm$browser$Debugger$History$size(
                        model.history,
                      )
                    }
                  })()
                  if (index > 0) {
                    var $temp$update = update,
                      $temp$msg = elm$browser$Debugger$Main$Jump(
                        index - 1,
                      ),
                      $temp$model = model
                    update = $temp$update
                    msg = $temp$msg
                    model = $temp$model
                    continue wrapUpdate
                  } else {
                    return _Utils_Tuple2(model, elm$core$Platform$Cmd$none)
                  }
                case 'Down':
                  var _n7 = model.state
                  if (_n7.$ === 'Running') {
                    return _Utils_Tuple2(model, elm$core$Platform$Cmd$none)
                  } else {
                    var index = _n7.a
                    var userModel = _n7.c
                    if (
                      _Utils_eq(
                        index,
                        elm$browser$Debugger$History$size(model.history) -
                          1,
                      )
                    ) {
                      var $temp$update = update,
                        $temp$msg = elm$browser$Debugger$Main$Resume,
                        $temp$model = model
                      update = $temp$update
                      msg = $temp$msg
                      model = $temp$model
                      continue wrapUpdate
                    } else {
                      var $temp$update = update,
                        $temp$msg = elm$browser$Debugger$Main$Jump(
                          index + 1,
                        ),
                        $temp$model = model
                      update = $temp$update
                      msg = $temp$msg
                      model = $temp$model
                      continue wrapUpdate
                    }
                  }
                case 'Import':
                  return A2(
                    elm$browser$Debugger$Main$withGoodMetadata,
                    model,
                    function(_n8) {
                      return _Utils_Tuple2(
                        model,
                        elm$browser$Debugger$Main$upload,
                      )
                    },
                  )
                case 'Export':
                  return A2(
                    elm$browser$Debugger$Main$withGoodMetadata,
                    model,
                    function(metadata) {
                      return _Utils_Tuple2(
                        model,
                        A2(
                          elm$browser$Debugger$Main$download,
                          metadata,
                          model.history,
                        ),
                      )
                    },
                  )
                case 'Upload':
                  var jsonString = msg.a
                  return A2(
                    elm$browser$Debugger$Main$withGoodMetadata,
                    model,
                    function(metadata) {
                      var _n9 = A2(
                        elm$browser$Debugger$Overlay$assessImport,
                        metadata,
                        jsonString,
                      )
                      if (_n9.$ === 'Err') {
                        var newOverlay = _n9.a
                        return _Utils_Tuple2(
                          _Utils_update(model, { overlay: newOverlay }),
                          elm$core$Platform$Cmd$none,
                        )
                      } else {
                        var rawHistory = _n9.a
                        return A3(
                          elm$browser$Debugger$Main$loadNewHistory,
                          rawHistory,
                          update,
                          model,
                        )
                      }
                    },
                  )
                default:
                  var overlayMsg = msg.a
                  var _n10 = A2(
                    elm$browser$Debugger$Overlay$close,
                    overlayMsg,
                    model.overlay,
                  )
                  if (_n10.$ === 'Nothing') {
                    return _Utils_Tuple2(
                      _Utils_update(model, {
                        overlay: elm$browser$Debugger$Overlay$none,
                      }),
                      elm$core$Platform$Cmd$none,
                    )
                  } else {
                    var rawHistory = _n10.a
                    return A3(
                      elm$browser$Debugger$Main$loadNewHistory,
                      rawHistory,
                      update,
                      model,
                    )
                  }
              }
            }
          })
          var elm$core$Set$foldr = F3(function(func, initialState, _n0) {
            var dict = _n0.a
            return A3(
              elm$core$Dict$foldr,
              F3(function(key, _n1, state) {
                return A2(func, key, state)
              }),
              initialState,
              dict,
            )
          })
          var elm$core$String$dropLeft = F2(function(n, string) {
            return n < 1
              ? string
              : A3(
                  elm$core$String$slice,
                  n,
                  elm$core$String$length(string),
                  string,
                )
          })
          var elm$core$String$startsWith = _String_startsWith
          var elm$url$Url$Http = { $: 'Http' }
          var elm$url$Url$Https = { $: 'Https' }
          var elm$core$String$indexes = _String_indexes
          var elm$core$String$isEmpty = function(string) {
            return string === ''
          }
          var elm$core$String$toInt = _String_toInt
          var elm$url$Url$Url = F6(function(
            protocol,
            host,
            port_,
            path,
            query,
            fragment,
          ) {
            return {
              fragment: fragment,
              host: host,
              path: path,
              port_: port_,
              protocol: protocol,
              query: query,
            }
          })
          var elm$url$Url$chompBeforePath = F5(function(
            protocol,
            path,
            params,
            frag,
            str,
          ) {
            if (
              elm$core$String$isEmpty(str) ||
              A2(elm$core$String$contains, '@', str)
            ) {
              return elm$core$Maybe$Nothing
            } else {
              var _n0 = A2(elm$core$String$indexes, ':', str)
              if (!_n0.b) {
                return elm$core$Maybe$Just(
                  A6(
                    elm$url$Url$Url,
                    protocol,
                    str,
                    elm$core$Maybe$Nothing,
                    path,
                    params,
                    frag,
                  ),
                )
              } else {
                if (!_n0.b.b) {
                  var i = _n0.a
                  var _n1 = elm$core$String$toInt(
                    A2(elm$core$String$dropLeft, i + 1, str),
                  )
                  if (_n1.$ === 'Nothing') {
                    return elm$core$Maybe$Nothing
                  } else {
                    var port_ = _n1
                    return elm$core$Maybe$Just(
                      A6(
                        elm$url$Url$Url,
                        protocol,
                        A2(elm$core$String$left, i, str),
                        port_,
                        path,
                        params,
                        frag,
                      ),
                    )
                  }
                } else {
                  return elm$core$Maybe$Nothing
                }
              }
            }
          })
          var elm$url$Url$chompBeforeQuery = F4(function(
            protocol,
            params,
            frag,
            str,
          ) {
            if (elm$core$String$isEmpty(str)) {
              return elm$core$Maybe$Nothing
            } else {
              var _n0 = A2(elm$core$String$indexes, '/', str)
              if (!_n0.b) {
                return A5(
                  elm$url$Url$chompBeforePath,
                  protocol,
                  '/',
                  params,
                  frag,
                  str,
                )
              } else {
                var i = _n0.a
                return A5(
                  elm$url$Url$chompBeforePath,
                  protocol,
                  A2(elm$core$String$dropLeft, i, str),
                  params,
                  frag,
                  A2(elm$core$String$left, i, str),
                )
              }
            }
          })
          var elm$url$Url$chompBeforeFragment = F3(function(
            protocol,
            frag,
            str,
          ) {
            if (elm$core$String$isEmpty(str)) {
              return elm$core$Maybe$Nothing
            } else {
              var _n0 = A2(elm$core$String$indexes, '?', str)
              if (!_n0.b) {
                return A4(
                  elm$url$Url$chompBeforeQuery,
                  protocol,
                  elm$core$Maybe$Nothing,
                  frag,
                  str,
                )
              } else {
                var i = _n0.a
                return A4(
                  elm$url$Url$chompBeforeQuery,
                  protocol,
                  elm$core$Maybe$Just(
                    A2(elm$core$String$dropLeft, i + 1, str),
                  ),
                  frag,
                  A2(elm$core$String$left, i, str),
                )
              }
            }
          })
          var elm$url$Url$chompAfterProtocol = F2(function(protocol, str) {
            if (elm$core$String$isEmpty(str)) {
              return elm$core$Maybe$Nothing
            } else {
              var _n0 = A2(elm$core$String$indexes, '#', str)
              if (!_n0.b) {
                return A3(
                  elm$url$Url$chompBeforeFragment,
                  protocol,
                  elm$core$Maybe$Nothing,
                  str,
                )
              } else {
                var i = _n0.a
                return A3(
                  elm$url$Url$chompBeforeFragment,
                  protocol,
                  elm$core$Maybe$Just(
                    A2(elm$core$String$dropLeft, i + 1, str),
                  ),
                  A2(elm$core$String$left, i, str),
                )
              }
            }
          })
          var elm$url$Url$fromString = function(str) {
            return A2(elm$core$String$startsWith, 'http://', str)
              ? A2(
                  elm$url$Url$chompAfterProtocol,
                  elm$url$Url$Http,
                  A2(elm$core$String$dropLeft, 7, str),
                )
              : A2(elm$core$String$startsWith, 'https://', str)
              ? A2(
                  elm$url$Url$chompAfterProtocol,
                  elm$url$Url$Https,
                  A2(elm$core$String$dropLeft, 8, str),
                )
              : elm$core$Maybe$Nothing
          }
          var elm$browser$Browser$Dom$getElement = _Browser_getElement
          var elm$core$Task$onError = _Scheduler_onError
          var elm$core$Task$attempt = F2(function(resultToMessage, task) {
            return elm$core$Task$command(
              elm$core$Task$Perform(
                A2(
                  elm$core$Task$onError,
                  A2(
                    elm$core$Basics$composeL,
                    A2(
                      elm$core$Basics$composeL,
                      elm$core$Task$succeed,
                      resultToMessage,
                    ),
                    elm$core$Result$Err,
                  ),
                  A2(
                    elm$core$Task$andThen,
                    A2(
                      elm$core$Basics$composeL,
                      A2(
                        elm$core$Basics$composeL,
                        elm$core$Task$succeed,
                        resultToMessage,
                      ),
                      elm$core$Result$Ok,
                    ),
                    task,
                  ),
                ),
              ),
            )
          })
          var annaghi$dnd_list$DnDList$commands = F2(function(wrap, _n0) {
            var model = _n0.a
            if (model.$ === 'Nothing') {
              return elm$core$Platform$Cmd$none
            } else {
              var m = model.a
              var _n2 = m.element
              if (_n2.$ === 'Nothing') {
                return A2(
                  elm$core$Task$attempt,
                  A2(
                    elm$core$Basics$composeL,
                    wrap,
                    annaghi$dnd_list$DnDList$GotDragged,
                  ),
                  elm$browser$Browser$Dom$getElement(m.elementId),
                )
              } else {
                return elm$core$Platform$Cmd$none
              }
            }
          })
          var annaghi$dnd_list$DnDList$DragStart = F3(function(a, b, c) {
            return { $: 'DragStart', a: a, b: b, c: c }
          })
          var annaghi$dnd_list$DnDList$Position = F2(function(x, y) {
            return { x: x, y: y }
          })
          var elm$json$Json$Decode$int = _Json_decodeInt
          var annaghi$dnd_list$DnDList$pageX = A2(
            elm$json$Json$Decode$field,
            'pageX',
            elm$json$Json$Decode$int,
          )
          var annaghi$dnd_list$DnDList$pageY = A2(
            elm$json$Json$Decode$field,
            'pageY',
            elm$json$Json$Decode$int,
          )
          var elm$virtual_dom$VirtualDom$MayPreventDefault = function(a) {
            return { $: 'MayPreventDefault', a: a }
          }
          var elm$html$Html$Events$preventDefaultOn = F2(function(
            event,
            decoder,
          ) {
            return A2(
              elm$virtual_dom$VirtualDom$on,
              event,
              elm$virtual_dom$VirtualDom$MayPreventDefault(decoder),
            )
          })
          var annaghi$dnd_list$DnDList$dragEvents = F3(function(
            wrap,
            dragIndex,
            elementId,
          ) {
            return _List_fromArray([
              A2(
                elm$html$Html$Events$preventDefaultOn,
                'mousedown',
                A2(
                  elm$json$Json$Decode$map,
                  function(msg) {
                    return _Utils_Tuple2(msg, true)
                  },
                  A2(
                    elm$json$Json$Decode$map,
                    A2(
                      elm$core$Basics$composeL,
                      wrap,
                      A2(
                        annaghi$dnd_list$DnDList$DragStart,
                        dragIndex,
                        elementId,
                      ),
                    ),
                    A3(
                      elm$json$Json$Decode$map2,
                      annaghi$dnd_list$DnDList$Position,
                      annaghi$dnd_list$DnDList$pageX,
                      annaghi$dnd_list$DnDList$pageY,
                    ),
                  ),
                ),
              ),
            ])
          })
          var elm$core$Maybe$andThen = F2(function(callback, maybeValue) {
            if (maybeValue.$ === 'Just') {
              var value = maybeValue.a
              return callback(value)
            } else {
              return elm$core$Maybe$Nothing
            }
          })
          var elm$core$Maybe$map = F2(function(f, maybe) {
            if (maybe.$ === 'Just') {
              var value = maybe.a
              return elm$core$Maybe$Just(f(value))
            } else {
              return elm$core$Maybe$Nothing
            }
          })
          var annaghi$dnd_list$DnDList$draggedIndex = function(_n0) {
            var model = _n0.a
            return A2(
              elm$core$Maybe$andThen,
              function(m) {
                return A2(
                  elm$core$Maybe$map,
                  function(_n1) {
                    return m.dragIndex
                  },
                  m.element,
                )
              },
              model,
            )
          }
          var annaghi$dnd_list$DnDList$px = function(n) {
            return elm$core$String$fromInt(n) + 'px'
          }
          var annaghi$dnd_list$DnDList$translate = F2(function(x, y) {
            return (
              'translate3d(' +
              (annaghi$dnd_list$DnDList$px(x) +
                (', ' + (annaghi$dnd_list$DnDList$px(y) + ', 0)')))
            )
          })
          var elm$core$Basics$round = _Basics_round
          var annaghi$dnd_list$DnDList$draggedStyles = F2(function(
            movement,
            _n0,
          ) {
            var model = _n0.a
            if (model.$ === 'Nothing') {
              return _List_Nil
            } else {
              var m = model.a
              var _n2 = m.element
              if (_n2.$ === 'Just') {
                var element = _n2.a.element
                switch (movement.$) {
                  case 'Horizontal':
                    return _List_fromArray([
                      A2(
                        elm$html$Html$Attributes$style,
                        'position',
                        'absolute',
                      ),
                      A2(elm$html$Html$Attributes$style, 'top', '0'),
                      A2(elm$html$Html$Attributes$style, 'left', '0'),
                      A2(
                        elm$html$Html$Attributes$style,
                        'transform',
                        A2(
                          annaghi$dnd_list$DnDList$translate,
                          m.currentPosition.x -
                            m.startPosition.x +
                            elm$core$Basics$round(element.x),
                          elm$core$Basics$round(element.y),
                        ),
                      ),
                      A2(
                        elm$html$Html$Attributes$style,
                        'height',
                        annaghi$dnd_list$DnDList$px(
                          elm$core$Basics$round(element.height),
                        ),
                      ),
                      A2(
                        elm$html$Html$Attributes$style,
                        'width',
                        annaghi$dnd_list$DnDList$px(
                          elm$core$Basics$round(element.width),
                        ),
                      ),
                      A2(
                        elm$html$Html$Attributes$style,
                        'pointer-events',
                        'none',
                      ),
                    ])
                  case 'Vertical':
                    return _List_fromArray([
                      A2(
                        elm$html$Html$Attributes$style,
                        'position',
                        'absolute',
                      ),
                      A2(elm$html$Html$Attributes$style, 'left', '0'),
                      A2(elm$html$Html$Attributes$style, 'top', '0'),
                      A2(
                        elm$html$Html$Attributes$style,
                        'transform',
                        A2(
                          annaghi$dnd_list$DnDList$translate,
                          elm$core$Basics$round(element.x),
                          m.currentPosition.y -
                            m.startPosition.y +
                            elm$core$Basics$round(element.y),
                        ),
                      ),
                      A2(
                        elm$html$Html$Attributes$style,
                        'height',
                        annaghi$dnd_list$DnDList$px(
                          elm$core$Basics$round(element.height),
                        ),
                      ),
                      A2(
                        elm$html$Html$Attributes$style,
                        'width',
                        annaghi$dnd_list$DnDList$px(
                          elm$core$Basics$round(element.width),
                        ),
                      ),
                      A2(
                        elm$html$Html$Attributes$style,
                        'pointer-events',
                        'none',
                      ),
                    ])
                  default:
                    return _List_fromArray([
                      A2(
                        elm$html$Html$Attributes$style,
                        'position',
                        'absolute',
                      ),
                      A2(elm$html$Html$Attributes$style, 'left', '0'),
                      A2(elm$html$Html$Attributes$style, 'top', '0'),
                      A2(
                        elm$html$Html$Attributes$style,
                        'transform',
                        A2(
                          annaghi$dnd_list$DnDList$translate,
                          m.currentPosition.x -
                            m.startPosition.x +
                            elm$core$Basics$round(element.x),
                          m.currentPosition.y -
                            m.startPosition.y +
                            elm$core$Basics$round(element.y),
                        ),
                      ),
                      A2(
                        elm$html$Html$Attributes$style,
                        'height',
                        annaghi$dnd_list$DnDList$px(
                          elm$core$Basics$round(element.height),
                        ),
                      ),
                      A2(
                        elm$html$Html$Attributes$style,
                        'width',
                        annaghi$dnd_list$DnDList$px(
                          elm$core$Basics$round(element.width),
                        ),
                      ),
                      A2(
                        elm$html$Html$Attributes$style,
                        'pointer-events',
                        'none',
                      ),
                    ])
                }
              } else {
                return _List_Nil
              }
            }
          })
          var annaghi$dnd_list$DnDList$DragOver = function(a) {
            return { $: 'DragOver', a: a }
          }
          var annaghi$dnd_list$DnDList$dropEvents = F2(function(
            wrap,
            dropIndex,
          ) {
            return _List_fromArray([
              A2(
                elm$html$Html$Events$preventDefaultOn,
                'mouseover',
                A2(
                  elm$json$Json$Decode$map,
                  function(msg) {
                    return _Utils_Tuple2(msg, true)
                  },
                  elm$json$Json$Decode$succeed(
                    wrap(annaghi$dnd_list$DnDList$DragOver(dropIndex)),
                  ),
                ),
              ),
            ])
          })
          var annaghi$dnd_list$DnDList$Drag = function(a) {
            return { $: 'Drag', a: a }
          }
          var annaghi$dnd_list$DnDList$DragEnd = { $: 'DragEnd' }
          var elm$browser$Browser$Events$Document = { $: 'Document' }
          var elm$browser$Browser$Events$MySub = F3(function(a, b, c) {
            return { $: 'MySub', a: a, b: b, c: c }
          })
          var elm$browser$Browser$Events$State = F2(function(subs, pids) {
            return { pids: pids, subs: subs }
          })
          var elm$browser$Browser$Events$init = elm$core$Task$succeed(
            A2(
              elm$browser$Browser$Events$State,
              _List_Nil,
              elm$core$Dict$empty,
            ),
          )
          var elm$browser$Browser$Events$nodeToKey = function(node) {
            if (node.$ === 'Document') {
              return 'd_'
            } else {
              return 'w_'
            }
          }
          var elm$browser$Browser$Events$addKey = function(sub) {
            var node = sub.a
            var name = sub.b
            return _Utils_Tuple2(
              _Utils_ap(elm$browser$Browser$Events$nodeToKey(node), name),
              sub,
            )
          }
          var elm$browser$Browser$Events$Event = F2(function(key, event) {
            return { event: event, key: key }
          })
          var elm$core$Platform$sendToSelf = _Platform_sendToSelf
          var elm$browser$Browser$Events$spawn = F3(function(
            router,
            key,
            _n0,
          ) {
            var node = _n0.a
            var name = _n0.b
            var actualNode = (function() {
              if (node.$ === 'Document') {
                return _Browser_doc
              } else {
                return _Browser_window
              }
            })()
            return A2(
              elm$core$Task$map,
              function(value) {
                return _Utils_Tuple2(key, value)
              },
              A3(_Browser_on, actualNode, name, function(event) {
                return A2(
                  elm$core$Platform$sendToSelf,
                  router,
                  A2(elm$browser$Browser$Events$Event, key, event),
                )
              }),
            )
          })
          var elm$core$Dict$union = F2(function(t1, t2) {
            return A3(elm$core$Dict$foldl, elm$core$Dict$insert, t2, t1)
          })
          var elm$core$Process$kill = _Scheduler_kill
          var elm$browser$Browser$Events$onEffects = F3(function(
            router,
            subs,
            state,
          ) {
            var stepRight = F3(function(key, sub, _n6) {
              var deads = _n6.a
              var lives = _n6.b
              var news = _n6.c
              return _Utils_Tuple3(
                deads,
                lives,
                A2(
                  elm$core$List$cons,
                  A3(elm$browser$Browser$Events$spawn, router, key, sub),
                  news,
                ),
              )
            })
            var stepLeft = F3(function(_n4, pid, _n5) {
              var deads = _n5.a
              var lives = _n5.b
              var news = _n5.c
              return _Utils_Tuple3(
                A2(elm$core$List$cons, pid, deads),
                lives,
                news,
              )
            })
            var stepBoth = F4(function(key, pid, _n2, _n3) {
              var deads = _n3.a
              var lives = _n3.b
              var news = _n3.c
              return _Utils_Tuple3(
                deads,
                A3(elm$core$Dict$insert, key, pid, lives),
                news,
              )
            })
            var newSubs = A2(
              elm$core$List$map,
              elm$browser$Browser$Events$addKey,
              subs,
            )
            var _n0 = A6(
              elm$core$Dict$merge,
              stepLeft,
              stepBoth,
              stepRight,
              state.pids,
              elm$core$Dict$fromList(newSubs),
              _Utils_Tuple3(_List_Nil, elm$core$Dict$empty, _List_Nil),
            )
            var deadPids = _n0.a
            var livePids = _n0.b
            var makeNewPids = _n0.c
            return A2(
              elm$core$Task$andThen,
              function(pids) {
                return elm$core$Task$succeed(
                  A2(
                    elm$browser$Browser$Events$State,
                    newSubs,
                    A2(
                      elm$core$Dict$union,
                      livePids,
                      elm$core$Dict$fromList(pids),
                    ),
                  ),
                )
              },
              A2(
                elm$core$Task$andThen,
                function(_n1) {
                  return elm$core$Task$sequence(makeNewPids)
                },
                elm$core$Task$sequence(
                  A2(elm$core$List$map, elm$core$Process$kill, deadPids),
                ),
              ),
            )
          })
          var elm$browser$Browser$Events$onSelfMsg = F3(function(
            router,
            _n0,
            state,
          ) {
            var key = _n0.key
            var event = _n0.event
            var toMessage = function(_n2) {
              var subKey = _n2.a
              var _n3 = _n2.b
              var node = _n3.a
              var name = _n3.b
              var decoder = _n3.c
              return _Utils_eq(subKey, key)
                ? A2(_Browser_decodeEvent, decoder, event)
                : elm$core$Maybe$Nothing
            }
            var messages = A2(
              elm$core$List$filterMap,
              toMessage,
              state.subs,
            )
            return A2(
              elm$core$Task$andThen,
              function(_n1) {
                return elm$core$Task$succeed(state)
              },
              elm$core$Task$sequence(
                A2(
                  elm$core$List$map,
                  elm$core$Platform$sendToApp(router),
                  messages,
                ),
              ),
            )
          })
          var elm$browser$Browser$Events$subMap = F2(function(func, _n0) {
            var node = _n0.a
            var name = _n0.b
            var decoder = _n0.c
            return A3(
              elm$browser$Browser$Events$MySub,
              node,
              name,
              A2(elm$json$Json$Decode$map, func, decoder),
            )
          })
          _Platform_effectManagers[
            'Browser.Events'
          ] = _Platform_createManager(
            elm$browser$Browser$Events$init,
            elm$browser$Browser$Events$onEffects,
            elm$browser$Browser$Events$onSelfMsg,
            0,
            elm$browser$Browser$Events$subMap,
          )
          var elm$browser$Browser$Events$subscription = _Platform_leaf(
            'Browser.Events',
          )
          var elm$browser$Browser$Events$on = F3(function(
            node,
            name,
            decoder,
          ) {
            return elm$browser$Browser$Events$subscription(
              A3(elm$browser$Browser$Events$MySub, node, name, decoder),
            )
          })
          var elm$browser$Browser$Events$onMouseMove = A2(
            elm$browser$Browser$Events$on,
            elm$browser$Browser$Events$Document,
            'mousemove',
          )
          var elm$browser$Browser$Events$onMouseUp = A2(
            elm$browser$Browser$Events$on,
            elm$browser$Browser$Events$Document,
            'mouseup',
          )
          var elm$core$Platform$Sub$batch = _Platform_batch
          var elm$core$Platform$Sub$none = elm$core$Platform$Sub$batch(
            _List_Nil,
          )
          var annaghi$dnd_list$DnDList$subscriptions = F2(function(
            wrap,
            _n0,
          ) {
            var model = _n0.a
            if (model.$ === 'Nothing') {
              return elm$core$Platform$Sub$none
            } else {
              return elm$core$Platform$Sub$batch(
                _List_fromArray([
                  elm$browser$Browser$Events$onMouseMove(
                    A2(
                      elm$json$Json$Decode$map,
                      A2(
                        elm$core$Basics$composeL,
                        wrap,
                        annaghi$dnd_list$DnDList$Drag,
                      ),
                      A3(
                        elm$json$Json$Decode$map2,
                        annaghi$dnd_list$DnDList$Position,
                        annaghi$dnd_list$DnDList$pageX,
                        annaghi$dnd_list$DnDList$pageY,
                      ),
                    ),
                  ),
                  elm$browser$Browser$Events$onMouseUp(
                    elm$json$Json$Decode$succeed(
                      wrap(annaghi$dnd_list$DnDList$DragEnd),
                    ),
                  ),
                ]),
              )
            }
          })
          var annaghi$dnd_list$DnDList$rotateRecursive = function(list) {
            if (!list.b) {
              return _List_Nil
            } else {
              if (!list.b.b) {
                var x = list.a
                return _List_fromArray([x])
              } else {
                if (!list.b.b.b) {
                  var x = list.a
                  var _n1 = list.b
                  var y = _n1.a
                  return A2(elm$core$List$cons, y, _List_fromArray([x]))
                } else {
                  var x = list.a
                  var _n2 = list.b
                  var y = _n2.a
                  var rest = _n2.b
                  return A2(
                    elm$core$List$cons,
                    y,
                    annaghi$dnd_list$DnDList$rotateRecursive(
                      A2(elm$core$List$cons, x, rest),
                    ),
                  )
                }
              }
            }
          }
          var elm$core$List$drop = F2(function(n, list) {
            drop: while (true) {
              if (n <= 0) {
                return list
              } else {
                if (!list.b) {
                  return list
                } else {
                  var x = list.a
                  var xs = list.b
                  var $temp$n = n - 1,
                    $temp$list = xs
                  n = $temp$n
                  list = $temp$list
                  continue drop
                }
              }
            }
          })
          var elm$core$List$takeReverse = F3(function(n, list, kept) {
            takeReverse: while (true) {
              if (n <= 0) {
                return kept
              } else {
                if (!list.b) {
                  return kept
                } else {
                  var x = list.a
                  var xs = list.b
                  var $temp$n = n - 1,
                    $temp$list = xs,
                    $temp$kept = A2(elm$core$List$cons, x, kept)
                  n = $temp$n
                  list = $temp$list
                  kept = $temp$kept
                  continue takeReverse
                }
              }
            }
          })
          var elm$core$List$takeTailRec = F2(function(n, list) {
            return elm$core$List$reverse(
              A3(elm$core$List$takeReverse, n, list, _List_Nil),
            )
          })
          var elm$core$List$takeFast = F3(function(ctr, n, list) {
            if (n <= 0) {
              return _List_Nil
            } else {
              var _n0 = _Utils_Tuple2(n, list)
              _n0$1: while (true) {
                _n0$5: while (true) {
                  if (!_n0.b.b) {
                    return list
                  } else {
                    if (_n0.b.b.b) {
                      switch (_n0.a) {
                        case 1:
                          break _n0$1
                        case 2:
                          var _n2 = _n0.b
                          var x = _n2.a
                          var _n3 = _n2.b
                          var y = _n3.a
                          return _List_fromArray([x, y])
                        case 3:
                          if (_n0.b.b.b.b) {
                            var _n4 = _n0.b
                            var x = _n4.a
                            var _n5 = _n4.b
                            var y = _n5.a
                            var _n6 = _n5.b
                            var z = _n6.a
                            return _List_fromArray([x, y, z])
                          } else {
                            break _n0$5
                          }
                        default:
                          if (_n0.b.b.b.b && _n0.b.b.b.b.b) {
                            var _n7 = _n0.b
                            var x = _n7.a
                            var _n8 = _n7.b
                            var y = _n8.a
                            var _n9 = _n8.b
                            var z = _n9.a
                            var _n10 = _n9.b
                            var w = _n10.a
                            var tl = _n10.b
                            return ctr > 1000
                              ? A2(
                                  elm$core$List$cons,
                                  x,
                                  A2(
                                    elm$core$List$cons,
                                    y,
                                    A2(
                                      elm$core$List$cons,
                                      z,
                                      A2(
                                        elm$core$List$cons,
                                        w,
                                        A2(
                                          elm$core$List$takeTailRec,
                                          n - 4,
                                          tl,
                                        ),
                                      ),
                                    ),
                                  ),
                                )
                              : A2(
                                  elm$core$List$cons,
                                  x,
                                  A2(
                                    elm$core$List$cons,
                                    y,
                                    A2(
                                      elm$core$List$cons,
                                      z,
                                      A2(
                                        elm$core$List$cons,
                                        w,
                                        A3(
                                          elm$core$List$takeFast,
                                          ctr + 1,
                                          n - 4,
                                          tl,
                                        ),
                                      ),
                                    ),
                                  ),
                                )
                          } else {
                            break _n0$5
                          }
                      }
                    } else {
                      if (_n0.a === 1) {
                        break _n0$1
                      } else {
                        break _n0$5
                      }
                    }
                  }
                }
                return list
              }
              var _n1 = _n0.b
              var x = _n1.a
              return _List_fromArray([x])
            }
          })
          var elm$core$List$take = F2(function(n, list) {
            return A3(elm$core$List$takeFast, 0, n, list)
          })
          var annaghi$dnd_list$DnDList$rotate = F3(function(i, j, list) {
            var n = elm$core$List$length(list)
            var middle = A2(
              elm$core$List$take,
              j - i + 1,
              A2(elm$core$List$drop, i, list),
            )
            var end = elm$core$List$reverse(
              A2(
                elm$core$List$take,
                n - j - 1,
                elm$core$List$reverse(list),
              ),
            )
            var beginning = A2(elm$core$List$take, i, list)
            return _Utils_ap(
              beginning,
              _Utils_ap(
                annaghi$dnd_list$DnDList$rotateRecursive(middle),
                end,
              ),
            )
          })
          var annaghi$dnd_list$DnDList$reorder = F3(function(
            model,
            dropIndex,
            list,
          ) {
            if (model.$ === 'Just') {
              var m = model.a
              if (_Utils_cmp(m.dragIndex, dropIndex) < 0) {
                return A3(
                  annaghi$dnd_list$DnDList$rotate,
                  m.dragIndex,
                  dropIndex,
                  list,
                )
              } else {
                if (_Utils_cmp(m.dragIndex, dropIndex) > 0) {
                  var n = elm$core$List$length(list) - 1
                  return elm$core$List$reverse(
                    A3(
                      annaghi$dnd_list$DnDList$rotate,
                      n - m.dragIndex,
                      n - dropIndex,
                      elm$core$List$reverse(list),
                    ),
                  )
                } else {
                  return list
                }
              }
            } else {
              return list
            }
          })
          var annaghi$dnd_list$DnDList$update = F3(function(
            msg,
            _n0,
            list,
          ) {
            var model = _n0.a
            switch (msg.$) {
              case 'DragStart':
                var dragIndex = msg.a
                var elementId = msg.b
                var xy = msg.c
                return _Utils_Tuple2(
                  annaghi$dnd_list$DnDList$Draggable(
                    elm$core$Maybe$Just({
                      currentPosition: xy,
                      dragIndex: dragIndex,
                      dropIndex: dragIndex,
                      element: elm$core$Maybe$Nothing,
                      elementId: elementId,
                      startPosition: xy,
                    }),
                  ),
                  list,
                )
              case 'Drag':
                var xy = msg.a
                return _Utils_Tuple2(
                  annaghi$dnd_list$DnDList$Draggable(
                    A2(
                      elm$core$Maybe$map,
                      function(m) {
                        return _Utils_update(m, { currentPosition: xy })
                      },
                      model,
                    ),
                  ),
                  list,
                )
              case 'DragOver':
                var dropIndex = msg.a
                return _Utils_Tuple2(
                  annaghi$dnd_list$DnDList$Draggable(
                    A2(
                      elm$core$Maybe$map,
                      function(m) {
                        return _Utils_update(m, {
                          dragIndex: dropIndex,
                          dropIndex: dropIndex,
                        })
                      },
                      model,
                    ),
                  ),
                  A3(
                    annaghi$dnd_list$DnDList$reorder,
                    model,
                    dropIndex,
                    list,
                  ),
                )
              case 'DragEnd':
                return _Utils_Tuple2(
                  annaghi$dnd_list$DnDList$Draggable(
                    elm$core$Maybe$Nothing,
                  ),
                  list,
                )
              default:
                if (msg.a.$ === 'Err') {
                  return _Utils_Tuple2(
                    annaghi$dnd_list$DnDList$Draggable(model),
                    list,
                  )
                } else {
                  var element = msg.a.a
                  return _Utils_Tuple2(
                    annaghi$dnd_list$DnDList$Draggable(
                      A2(
                        elm$core$Maybe$map,
                        function(m) {
                          return _Utils_update(m, {
                            element: elm$core$Maybe$Just(element),
                          })
                        },
                        model,
                      ),
                    ),
                    list,
                  )
                }
            }
          })
          var annaghi$dnd_list$DnDList$create = function(_n0) {
            var message = _n0.message
            var movement = _n0.movement
            return {
              commands: annaghi$dnd_list$DnDList$commands(message),
              dragEvents: annaghi$dnd_list$DnDList$dragEvents(message),
              draggable: annaghi$dnd_list$DnDList$Draggable(
                elm$core$Maybe$Nothing,
              ),
              draggedIndex: annaghi$dnd_list$DnDList$draggedIndex,
              draggedStyles: annaghi$dnd_list$DnDList$draggedStyles(
                movement,
              ),
              dropEvents: annaghi$dnd_list$DnDList$dropEvents(message),
              subscriptions: annaghi$dnd_list$DnDList$subscriptions(
                message,
              ),
              update: annaghi$dnd_list$DnDList$update,
            }
          }
          var annaghi$dnd_list$DnDList$Free = { $: 'Free' }
          var author$project$Main$DndMsgReceived = function(a) {
            return { $: 'DndMsgReceived', a: a }
          }
          var author$project$Main$config = {
            message: author$project$Main$DndMsgReceived,
            movement: annaghi$dnd_list$DnDList$Free,
          }
          var author$project$Main$system = annaghi$dnd_list$DnDList$create(
            author$project$Main$config,
          )
          var author$project$ItemLookup$getById = F2(function(
            id,
            itemLookup,
          ) {
            return A2(elm$core$Dict$get, id, itemLookup)
          })
          var author$project$ItemLookup$rootItemId = 'i_root_item_id'
          var author$project$ItemLookup$getRoot = function(itemLookup) {
            return A2(
              author$project$ItemLookup$getById,
              author$project$ItemLookup$rootItemId,
              itemLookup,
            )
          }
          var author$project$ItemLookup$insertAll = F2(function(
            items,
            itemLookup,
          ) {
            return A3(
              elm$core$List$foldl,
              function(item) {
                return A2(elm$core$Dict$insert, item.id, item)
              },
              itemLookup,
              items,
            )
          })
          var elm$core$Maybe$destruct = F3(function(
            _default,
            func,
            maybe,
          ) {
            if (maybe.$ === 'Just') {
              var a = maybe.a
              return func(a)
            } else {
              return _default
            }
          })
          var elm$json$Json$Encode$null = _Json_encodeNull
          var author$project$Main$bulkItemDocs = _Platform_outgoingPort(
            'bulkItemDocs',
            elm$json$Json$Encode$list(function($) {
              return elm$json$Json$Encode$object(
                _List_fromArray([
                  _Utils_Tuple2(
                    'childIds',
                    elm$json$Json$Encode$list(elm$json$Json$Encode$string)(
                      $.childIds,
                    ),
                  ),
                  _Utils_Tuple2('id', elm$json$Json$Encode$string($.id)),
                  _Utils_Tuple2(
                    'pid',
                    (function($) {
                      return A3(
                        elm$core$Maybe$destruct,
                        elm$json$Json$Encode$null,
                        elm$json$Json$Encode$string,
                        $,
                      )
                    })($.pid),
                  ),
                  _Utils_Tuple2(
                    'rev',
                    (function($) {
                      return A3(
                        elm$core$Maybe$destruct,
                        elm$json$Json$Encode$null,
                        elm$json$Json$Encode$string,
                        $,
                      )
                    })($.rev),
                  ),
                  _Utils_Tuple2(
                    'title',
                    elm$json$Json$Encode$string($.title),
                  ),
                ]),
              )
            }),
          )
          var author$project$ItemLookup$toList = function(itemLookup) {
            return elm$core$Dict$values(itemLookup)
          }
          var author$project$Main$getItems = function(model) {
            return author$project$ItemLookup$toList(model.itemLookup)
          }
          var author$project$Main$toJsCache = _Platform_outgoingPort(
            'toJsCache',
            function($) {
              return elm$json$Json$Encode$object(
                _List_fromArray([
                  _Utils_Tuple2(
                    'items',
                    elm$json$Json$Encode$list(function($) {
                      return elm$json$Json$Encode$object(
                        _List_fromArray([
                          _Utils_Tuple2(
                            'childIds',
                            elm$json$Json$Encode$list(
                              elm$json$Json$Encode$string,
                            )($.childIds),
                          ),
                          _Utils_Tuple2(
                            'id',
                            elm$json$Json$Encode$string($.id),
                          ),
                          _Utils_Tuple2(
                            'pid',
                            (function($) {
                              return A3(
                                elm$core$Maybe$destruct,
                                elm$json$Json$Encode$null,
                                elm$json$Json$Encode$string,
                                $,
                              )
                            })($.pid),
                          ),
                          _Utils_Tuple2(
                            'rev',
                            (function($) {
                              return A3(
                                elm$core$Maybe$destruct,
                                elm$json$Json$Encode$null,
                                elm$json$Json$Encode$string,
                                $,
                              )
                            })($.rev),
                          ),
                          _Utils_Tuple2(
                            'title',
                            elm$json$Json$Encode$string($.title),
                          ),
                        ]),
                      )
                    })($.items),
                  ),
                  _Utils_Tuple2(
                    'maybeFocusedItemId',
                    (function($) {
                      return A3(
                        elm$core$Maybe$destruct,
                        elm$json$Json$Encode$null,
                        elm$json$Json$Encode$string,
                        $,
                      )
                    })($.maybeFocusedItemId),
                  ),
                ]),
              )
            },
          )
          var author$project$Main$cacheNewModel = function(model) {
            return author$project$Main$toJsCache({
              items: author$project$Main$getItems(model),
              maybeFocusedItemId: model.maybeFocusedItemId,
            })
          }
          var author$project$Main$FocusItemResultReceived = F2(function(
            a,
            b,
          ) {
            return { $: 'FocusItemResultReceived', a: a, b: b }
          })
          var author$project$Main$getItemDomId = function(item) {
            return 'item-id-' + item.id
          }
          var elm$browser$Browser$Dom$focus = _Browser_call('focus')
          var author$project$Main$focusMaybeItemCmd = function(maybeItem) {
            return A2(
              elm$core$Maybe$withDefault,
              elm$core$Platform$Cmd$none,
              A2(
                elm$core$Maybe$map,
                function(item) {
                  return A2(
                    elm$core$Task$attempt,
                    author$project$Main$FocusItemResultReceived(item),
                    elm$browser$Browser$Dom$focus(
                      author$project$Main$getItemDomId(item),
                    ),
                  )
                },
                maybeItem,
              ),
            )
          }
          var author$project$ItemLookup$getChildrenOfId = F2(function(
            parentId,
            itemLookup,
          ) {
            return A2(
              elm$core$Maybe$map,
              function(parent) {
                return A2(
                  elm$core$List$filterMap,
                  function(cid) {
                    return A2(
                      author$project$ItemLookup$getById,
                      cid,
                      itemLookup,
                    )
                  },
                  parent.childIds,
                )
              },
              A2(author$project$ItemLookup$getById, parentId, itemLookup),
            )
          })
          var author$project$ItemLookup$getRootItems = function(
            itemLookup,
          ) {
            return A2(
              author$project$ItemLookup$getChildrenOfId,
              author$project$ItemLookup$rootItemId,
              itemLookup,
            )
          }
          var author$project$Main$getRootItemsOrEmpty = function(model) {
            return A2(
              elm$core$Maybe$withDefault,
              _List_Nil,
              author$project$ItemLookup$getRootItems(model.itemLookup),
            )
          }
          var author$project$Main$getDisplayRootItems = function(model) {
            var _n0 = model.maybeDndItems
            if (_n0.$ === 'Just') {
              var items = _n0.a
              return items
            } else {
              return author$project$Main$getRootItemsOrEmpty(model)
            }
          }
          var author$project$Main$getRootItem = function(model) {
            return author$project$ItemLookup$getRoot(model.itemLookup)
          }
          var author$project$ItemLookup$toParentIdLookup = function(
            itemLookup,
          ) {
            return elm$core$Dict$fromList(
              A2(
                elm$core$List$concatMap,
                function(item) {
                  return A2(
                    elm$core$List$map,
                    function(cid) {
                      return _Utils_Tuple2(cid, item.id)
                    },
                    item.childIds,
                  )
                },
                author$project$ItemLookup$toList(itemLookup),
              ),
            )
          }
          var elm$core$Basics$composeR = F3(function(f, g, x) {
            return g(f(x))
          })
          var author$project$ItemLookup$getParentOfId = F2(function(
            id,
            itemLookup,
          ) {
            var parentIdLookup = author$project$ItemLookup$toParentIdLookup(
              itemLookup,
            )
            return A2(
              elm$core$Maybe$andThen,
              A2(
                elm$core$Basics$composeR,
                function(item) {
                  return A2(elm$core$Dict$get, item.id, parentIdLookup)
                },
                elm$core$Maybe$andThen(function(pid) {
                  return A2(
                    author$project$ItemLookup$getById,
                    pid,
                    itemLookup,
                  )
                }),
              ),
              A2(author$project$ItemLookup$getById, id, itemLookup),
            )
          })
          var elm_community$list_extra$List$Extra$findIndexHelp = F3(
            function(index, predicate, list) {
              findIndexHelp: while (true) {
                if (!list.b) {
                  return elm$core$Maybe$Nothing
                } else {
                  var x = list.a
                  var xs = list.b
                  if (predicate(x)) {
                    return elm$core$Maybe$Just(index)
                  } else {
                    var $temp$index = index + 1,
                      $temp$predicate = predicate,
                      $temp$list = xs
                    index = $temp$index
                    predicate = $temp$predicate
                    list = $temp$list
                    continue findIndexHelp
                  }
                }
              }
            },
          )
          var elm_community$list_extra$List$Extra$findIndex = elm_community$list_extra$List$Extra$findIndexHelp(
            0,
          )
          var elm_community$list_extra$List$Extra$splitAt = F2(function(
            n,
            xs,
          ) {
            return _Utils_Tuple2(
              A2(elm$core$List$take, n, xs),
              A2(elm$core$List$drop, n, xs),
            )
          })
          var elm_community$list_extra$List$Extra$uncons = function(list) {
            if (!list.b) {
              return elm$core$Maybe$Nothing
            } else {
              var first = list.a
              var rest = list.b
              return elm$core$Maybe$Just(_Utils_Tuple2(first, rest))
            }
          }
          var elm_community$list_extra$List$Extra$swapAt = F3(function(
            index1,
            index2,
            l,
          ) {
            swapAt: while (true) {
              if (_Utils_eq(index1, index2) || index1 < 0) {
                return l
              } else {
                if (_Utils_cmp(index1, index2) > 0) {
                  var $temp$index1 = index2,
                    $temp$index2 = index1,
                    $temp$l = l
                  index1 = $temp$index1
                  index2 = $temp$index2
                  l = $temp$l
                  continue swapAt
                } else {
                  var _n0 = A2(
                    elm_community$list_extra$List$Extra$splitAt,
                    index1,
                    l,
                  )
                  var part1 = _n0.a
                  var tail1 = _n0.b
                  var _n1 = A2(
                    elm_community$list_extra$List$Extra$splitAt,
                    index2 - index1,
                    tail1,
                  )
                  var head2 = _n1.a
                  var tail2 = _n1.b
                  var _n2 = _Utils_Tuple2(
                    elm_community$list_extra$List$Extra$uncons(head2),
                    elm_community$list_extra$List$Extra$uncons(tail2),
                  )
                  if (_n2.a.$ === 'Just' && _n2.b.$ === 'Just') {
                    var _n3 = _n2.a.a
                    var value1 = _n3.a
                    var part2 = _n3.b
                    var _n4 = _n2.b.a
                    var value2 = _n4.a
                    var part3 = _n4.b
                    return elm$core$List$concat(
                      _List_fromArray([
                        part1,
                        A2(elm$core$List$cons, value2, part2),
                        A2(elm$core$List$cons, value1, part3),
                      ]),
                    )
                  } else {
                    return l
                  }
                }
              }
            }
          })
          var author$project$Main$moveFocusedBy = F2(function(
            offset,
            model,
          ) {
            var updateIdx = F2(function(parent, focusedItemIdx) {
              var offsetIdx = focusedItemIdx + offset
              var maybeNewIdx =
                _Utils_cmp(
                  offsetIdx,
                  elm$core$List$length(parent.childIds),
                ) > -1 || offsetIdx < 0
                  ? elm$core$Maybe$Nothing
                  : elm$core$Maybe$Just(offsetIdx)
              return A2(
                elm$core$Maybe$map,
                function(finalIdx) {
                  return (function(newChildIds) {
                    return _Utils_update(parent, { childIds: newChildIds })
                  })(
                    A3(
                      elm_community$list_extra$List$Extra$swapAt,
                      focusedItemIdx,
                      finalIdx,
                      parent.childIds,
                    ),
                  )
                },
                maybeNewIdx,
              )
            })
            return A2(
              elm$core$Maybe$withDefault,
              _Utils_Tuple2(model, elm$core$Platform$Cmd$none),
              A2(
                elm$core$Maybe$map,
                function(updatedItem) {
                  return _Utils_Tuple2(
                    model,
                    author$project$Main$bulkItemDocs(
                      _List_fromArray([updatedItem]),
                    ),
                  )
                },
                A2(
                  elm$core$Maybe$andThen,
                  function(id) {
                    return A2(
                      elm$core$Maybe$andThen,
                      function(parent) {
                        return A2(
                          elm$core$Maybe$andThen,
                          updateIdx(parent),
                          A2(
                            elm_community$list_extra$List$Extra$findIndex,
                            elm$core$Basics$eq(id),
                            parent.childIds,
                          ),
                        )
                      },
                      A2(
                        author$project$ItemLookup$getParentOfId,
                        id,
                        model.itemLookup,
                      ),
                    )
                  },
                  model.maybeFocusedItemId,
                ),
              ),
            )
          })
          var elm$json$Json$Encode$int = _Json_wrap
          var author$project$Main$newItemDoc = _Platform_outgoingPort(
            'newItemDoc',
            function($) {
              var a = $.a
              var b = $.b
              return A2(
                elm$json$Json$Encode$list,
                elm$core$Basics$identity,
                _List_fromArray([
                  (function($) {
                    return elm$json$Json$Encode$object(
                      _List_fromArray([
                        _Utils_Tuple2(
                          'childIds',
                          elm$json$Json$Encode$list(
                            elm$json$Json$Encode$string,
                          )($.childIds),
                        ),
                        _Utils_Tuple2(
                          'id',
                          elm$json$Json$Encode$string($.id),
                        ),
                        _Utils_Tuple2(
                          'pid',
                          (function($) {
                            return A3(
                              elm$core$Maybe$destruct,
                              elm$json$Json$Encode$null,
                              elm$json$Json$Encode$string,
                              $,
                            )
                          })($.pid),
                        ),
                        _Utils_Tuple2(
                          'rev',
                          (function($) {
                            return A3(
                              elm$core$Maybe$destruct,
                              elm$json$Json$Encode$null,
                              elm$json$Json$Encode$string,
                              $,
                            )
                          })($.rev),
                        ),
                        _Utils_Tuple2(
                          'title',
                          elm$json$Json$Encode$string($.title),
                        ),
                      ]),
                    )
                  })(a),
                  elm$json$Json$Encode$int(b),
                ]),
              )
            },
          )
          var elm$core$Debug$log = _Debug_log
          var elm$core$List$head = function(list) {
            if (list.b) {
              var x = list.a
              var xs = list.b
              return elm$core$Maybe$Just(x)
            } else {
              return elm$core$Maybe$Nothing
            }
          }
          var elm_community$list_extra$List$Extra$getAt = F2(function(
            idx,
            xs,
          ) {
            return idx < 0
              ? elm$core$Maybe$Nothing
              : elm$core$List$head(A2(elm$core$List$drop, idx, xs))
          })
          var author$project$ItemLookup$getParentAndPrevPrevSibOf = F2(
            function(id, itemLookup) {
              return A2(
                elm$core$Maybe$andThen,
                function(parent) {
                  return A2(
                    elm$core$Maybe$map,
                    function(prevSib) {
                      return _Utils_Tuple3(id, parent, prevSib)
                    },
                    A2(
                      elm$core$Maybe$andThen,
                      function(cid) {
                        return A2(
                          author$project$ItemLookup$getById,
                          cid,
                          itemLookup,
                        )
                      },
                      A2(
                        elm$core$Maybe$andThen,
                        function(idx) {
                          return A2(
                            elm_community$list_extra$List$Extra$getAt,
                            idx - 1,
                            parent.childIds,
                          )
                        },
                        A2(
                          elm_community$list_extra$List$Extra$findIndex,
                          elm$core$Basics$eq(id),
                          parent.childIds,
                        ),
                      ),
                    ),
                  )
                },
                A2(
                  elm$core$Debug$log,
                  'getParentOfId',
                  A2(
                    author$project$ItemLookup$getParentOfId,
                    id,
                    itemLookup,
                  ),
                ),
              )
            },
          )
          var elm$core$List$filter = F2(function(isGood, list) {
            return A3(
              elm$core$List$foldr,
              F2(function(x, xs) {
                return isGood(x) ? A2(elm$core$List$cons, x, xs) : xs
              }),
              _List_Nil,
              list,
            )
          })
          var author$project$Main$onNestFocused = function(model) {
            var updateParents = F3(function(id, oldParent, newParent) {
              return _List_fromArray([
                _Utils_update(oldParent, {
                  childIds: A2(
                    elm$core$List$filter,
                    elm$core$Basics$neq(id),
                    oldParent.childIds,
                  ),
                }),
                _Utils_update(newParent, {
                  childIds: _Utils_ap(
                    newParent.childIds,
                    _List_fromArray([id]),
                  ),
                }),
              ])
            })
            return A2(
              elm$core$Maybe$withDefault,
              _Utils_Tuple2(model, elm$core$Platform$Cmd$none),
              A2(
                elm$core$Maybe$map,
                function(_n0) {
                  var id = _n0.a
                  var oldParent = _n0.b
                  var newParent = _n0.c
                  return (function(updatedItems) {
                    return _Utils_Tuple2(
                      model,
                      author$project$Main$bulkItemDocs(updatedItems),
                    )
                  })(A3(updateParents, id, oldParent, newParent))
                },
                A2(
                  elm$core$Maybe$andThen,
                  function(id) {
                    return A2(
                      author$project$ItemLookup$getParentAndPrevPrevSibOf,
                      id,
                      model.itemLookup,
                    )
                  },
                  model.maybeFocusedItemId,
                ),
              ),
            )
          }
          var author$project$ItemLookup$getParentAndGrandParentOf = F2(
            function(id, itemLookup) {
              return A2(
                elm$core$Maybe$andThen,
                function(parent) {
                  return A2(
                    elm$core$Maybe$map,
                    function(grandParent) {
                      return _Utils_Tuple3(id, parent, grandParent)
                    },
                    A2(
                      author$project$ItemLookup$getParentOfId,
                      parent.id,
                      itemLookup,
                    ),
                  )
                },
                A2(
                  author$project$ItemLookup$getParentOfId,
                  id,
                  itemLookup,
                ),
              )
            },
          )
          var author$project$Main$onUnnestFocused = function(model) {
            var updateParents = F3(function(id, parent, grandParent) {
              return A2(
                elm$core$Maybe$withDefault,
                _List_Nil,
                A2(
                  elm$core$Maybe$map,
                  function(parentIdx) {
                    return _List_fromArray([
                      _Utils_update(parent, {
                        childIds: A2(
                          elm$core$List$filter,
                          elm$core$Basics$neq(id),
                          parent.childIds,
                        ),
                      }),
                      _Utils_update(grandParent, {
                        childIds: (function(_n1) {
                          var pre = _n1.a
                          var post = _n1.b
                          return _Utils_ap(
                            pre,
                            _Utils_ap(_List_fromArray([id]), post),
                          )
                        })(
                          A2(
                            elm_community$list_extra$List$Extra$splitAt,
                            parentIdx + 1,
                            grandParent.childIds,
                          ),
                        ),
                      }),
                    ])
                  },
                  A2(
                    elm_community$list_extra$List$Extra$findIndex,
                    elm$core$Basics$eq(parent.id),
                    grandParent.childIds,
                  ),
                ),
              )
            })
            return A2(
              elm$core$Maybe$withDefault,
              _Utils_Tuple2(model, elm$core$Platform$Cmd$none),
              A2(
                elm$core$Maybe$map,
                function(_n0) {
                  var id = _n0.a
                  var parent = _n0.b
                  var grandParent = _n0.c
                  return (function(updatedItems) {
                    return _Utils_Tuple2(
                      model,
                      author$project$Main$bulkItemDocs(updatedItems),
                    )
                  })(A3(updateParents, id, parent, grandParent))
                },
                A2(
                  elm$core$Maybe$andThen,
                  function(id) {
                    return A2(
                      author$project$ItemLookup$getParentAndGrandParentOf,
                      id,
                      model.itemLookup,
                    )
                  },
                  model.maybeFocusedItemId,
                ),
              ),
            )
          }
          var author$project$Main$getItemById = F2(function(id, model) {
            return A2(
              author$project$ItemLookup$getById,
              id,
              model.itemLookup,
            )
          })
          var author$project$Main$refocusItemCmd = function(model) {
            return author$project$Main$focusMaybeItemCmd(
              A2(
                elm$core$Maybe$andThen,
                function(id) {
                  return A2(author$project$Main$getItemById, id, model)
                },
                model.maybeFocusedItemId,
              ),
            )
          }
          var elm_community$maybe_extra$Maybe$Extra$orElseLazy = F2(
            function(fma, mb) {
              if (mb.$ === 'Nothing') {
                return fma(_Utils_Tuple0)
              } else {
                return mb
              }
            },
          )
          var author$project$Main$refocusItemOrFirstCmd = function(model) {
            return author$project$Main$focusMaybeItemCmd(
              A2(
                elm_community$maybe_extra$Maybe$Extra$orElseLazy,
                function(_n0) {
                  return elm$core$List$head(
                    author$project$Main$getRootItemsOrEmpty(model),
                  )
                },
                A2(
                  elm$core$Maybe$andThen,
                  function(id) {
                    return A2(author$project$Main$getItemById, id, model)
                  },
                  model.maybeFocusedItemId,
                ),
              ),
            )
          }
          var author$project$Main$update = F2(function(message, model) {
            switch (message.$) {
              case 'NOP':
                return _Utils_Tuple2(model, elm$core$Platform$Cmd$none)
              case 'PouchItemChanged':
                var item = message.a
                var newModel = _Utils_update(model, {
                  itemLookup: A2(
                    author$project$ItemLookup$insertAll,
                    _List_fromArray([item]),
                    model.itemLookup,
                  ),
                  maybeDndItems: elm$core$Maybe$Nothing,
                })
                var _n1 = A2(
                  elm$core$Debug$log,
                  'maybeFocusedItemId',
                  model.maybeFocusedItemId,
                )
                return _Utils_Tuple2(
                  newModel,
                  elm$core$Platform$Cmd$batch(
                    _List_fromArray([
                      author$project$Main$cacheNewModel(newModel),
                      author$project$Main$refocusItemCmd(newModel),
                    ]),
                  ),
                )
              case 'AddItemClicked':
                return A2(
                  elm$core$Maybe$withDefault,
                  _Utils_Tuple2(model, elm$core$Platform$Cmd$none),
                  A2(
                    elm$core$Maybe$map,
                    function(rootItem) {
                      return _Utils_Tuple2(
                        model,
                        elm$core$Platform$Cmd$batch(
                          _List_fromArray([
                            author$project$Main$newItemDoc(
                              _Utils_Tuple2(
                                rootItem,
                                elm$core$List$length(rootItem.childIds),
                              ),
                            ),
                          ]),
                        ),
                      )
                    },
                    author$project$Main$getRootItem(model),
                  ),
                )
              case 'PouchItemsLoaded':
                var items = message.a
                var newModel = _Utils_update(model, {
                  itemLookup: author$project$ItemLookup$fromList(items),
                  maybeDndItems: elm$core$Maybe$Nothing,
                })
                return _Utils_Tuple2(
                  newModel,
                  elm$core$Platform$Cmd$batch(
                    _List_fromArray([
                      author$project$Main$cacheNewModel(newModel),
                      author$project$Main$refocusItemOrFirstCmd(newModel),
                    ]),
                  ),
                )
              case 'FocusItemResultReceived':
                var item = message.a
                var result = message.b
                if (result.$ === 'Err') {
                  var error = result.a
                  return _Utils_Tuple2(model, elm$core$Platform$Cmd$none)
                } else {
                  return _Utils_Tuple2(model, elm$core$Platform$Cmd$none)
                }
              case 'InitReceived':
                return _Utils_Tuple2(
                  model,
                  elm$core$Platform$Cmd$batch(
                    _List_fromArray([
                      author$project$Main$refocusItemOrFirstCmd(model),
                    ]),
                  ),
                )
              case 'FromJs':
                var _int = message.a
                return _Utils_Tuple2(model, elm$core$Platform$Cmd$none)
              case 'MouseUpReceived':
                var _n3 = A2(
                  elm$core$Debug$log,
                  'MouseUpReceived',
                  _Utils_Tuple0,
                )
                var _n4 = _Utils_Tuple2(
                  model.maybeDndItems,
                  author$project$ItemLookup$getRoot(model.itemLookup),
                )
                if (_n4.a.$ === 'Just' && _n4.b.$ === 'Just') {
                  var items = _n4.a.a
                  var root = _n4.b.a
                  var newRootChildIds = A2(
                    elm$core$List$map,
                    function($) {
                      return $.id
                    },
                    items,
                  )
                  if (!_Utils_eq(newRootChildIds, root.childIds)) {
                    var newRoot = _Utils_update(root, {
                      childIds: newRootChildIds,
                    })
                    var updatedItems = _List_fromArray([newRoot])
                    var newModel = _Utils_update(model, {
                      itemLookup: A2(
                        author$project$ItemLookup$insertAll,
                        updatedItems,
                        model.itemLookup,
                      ),
                      maybeDndItems: elm$core$Maybe$Nothing,
                    })
                    return _Utils_Tuple2(
                      newModel,
                      elm$core$Platform$Cmd$batch(
                        _List_fromArray([
                          author$project$Main$bulkItemDocs(updatedItems),
                        ]),
                      ),
                    )
                  } else {
                    return _Utils_Tuple2(model, elm$core$Platform$Cmd$none)
                  }
                } else {
                  return _Utils_Tuple2(model, elm$core$Platform$Cmd$none)
                }
              case 'DndMsgReceived':
                var msg = message.a
                var maybeIdx = A2(
                  elm$core$Debug$log,
                  'system.draggedIndex',
                  author$project$Main$system.draggedIndex(model.draggable),
                )
                var _n5 = A3(
                  author$project$Main$system.update,
                  msg,
                  model.draggable,
                  author$project$Main$getDisplayRootItems(model),
                )
                var draggable = _n5.a
                var rootItems = _n5.b
                return _Utils_Tuple2(
                  _Utils_update(model, {
                    draggable: draggable,
                    maybeDndItems: elm$core$Maybe$Just(rootItems),
                  }),
                  elm$core$Platform$Cmd$batch(
                    _List_fromArray([
                      author$project$Main$system.commands(model.draggable),
                      author$project$Main$focusMaybeItemCmd(
                        A2(
                          elm$core$Maybe$andThen,
                          function(idx) {
                            return elm$core$List$head(
                              A2(elm$core$List$drop, idx, rootItems),
                            )
                          },
                          maybeIdx,
                        ),
                      ),
                    ]),
                  ),
                )
              case 'ItemFocused':
                var item = message.a
                var newModel = _Utils_update(model, {
                  maybeFocusedItemId: elm$core$Maybe$Just(item.id),
                })
                return _Utils_Tuple2(
                  newModel,
                  elm$core$Platform$Cmd$batch(
                    _List_fromArray([
                      author$project$Main$cacheNewModel(newModel),
                    ]),
                  ),
                )
              case 'ItemLostFocus':
                var item = message.a
                var hadFocus = _Utils_eq(
                  elm$core$Maybe$Just(item.id),
                  model.maybeFocusedItemId,
                )
                var newModel = hadFocus
                  ? _Utils_update(model, {
                      maybeFocusedItemId: elm$core$Maybe$Nothing,
                    })
                  : model
                return _Utils_Tuple2(
                  newModel,
                  elm$core$Platform$Cmd$batch(
                    _List_fromArray([
                      author$project$Main$cacheNewModel(newModel),
                    ]),
                  ),
                )
              default:
                var keyEvent = message.a
                if (keyEvent.meta) {
                  var _n6 = keyEvent.key
                  switch (_n6) {
                    case 'ArrowLeft':
                      return author$project$Main$onUnnestFocused(model)
                    case 'ArrowRight':
                      return author$project$Main$onNestFocused(model)
                    case 'ArrowUp':
                      return A2(
                        author$project$Main$moveFocusedBy,
                        -1,
                        model,
                      )
                    case 'ArrowDown':
                      return A2(
                        author$project$Main$moveFocusedBy,
                        1,
                        model,
                      )
                    default:
                      return _Utils_Tuple2(
                        model,
                        elm$core$Platform$Cmd$none,
                      )
                  }
                } else {
                  return _Utils_Tuple2(model, elm$core$Platform$Cmd$none)
                }
            }
          })
          var author$project$Main$init = function(flags) {
            return A2(
              author$project$Main$update,
              author$project$Main$InitReceived,
              {
                draggable: author$project$Main$system.draggable,
                itemLookup: author$project$ItemLookup$fromList(
                  flags.items,
                ),
                maybeDndItems: elm$core$Maybe$Nothing,
                maybeFocusedItemId: flags.maybeFocusedItemId,
              },
            )
          }
          var author$project$Main$FromJs = function(a) {
            return { $: 'FromJs', a: a }
          }
          var author$project$Main$KeyDownReceived = function(a) {
            return { $: 'KeyDownReceived', a: a }
          }
          var author$project$Main$MouseUpReceived = {
            $: 'MouseUpReceived',
          }
          var author$project$Main$PouchItemChanged = function(a) {
            return { $: 'PouchItemChanged', a: a }
          }
          var author$project$Main$PouchItemsLoaded = function(a) {
            return { $: 'PouchItemsLoaded', a: a }
          }
          var author$project$Main$fromJs = _Platform_incomingPort(
            'fromJs',
            elm$json$Json$Decode$int,
          )
          var author$project$Main$KeyEvent = F3(function(key, ctrl, meta) {
            return { ctrl: ctrl, key: key, meta: meta }
          })
          var elm$json$Json$Decode$at = F2(function(fields, decoder) {
            return A3(
              elm$core$List$foldr,
              elm$json$Json$Decode$field,
              decoder,
              fields,
            )
          })
          var elm$json$Json$Decode$bool = _Json_decodeBool
          var author$project$Main$keyEventDecoder = A4(
            elm$json$Json$Decode$map3,
            author$project$Main$KeyEvent,
            A2(
              elm$json$Json$Decode$at,
              _List_fromArray(['key']),
              elm$json$Json$Decode$string,
            ),
            A2(
              elm$json$Json$Decode$at,
              _List_fromArray(['ctrlKey']),
              elm$json$Json$Decode$bool,
            ),
            A2(
              elm$json$Json$Decode$at,
              _List_fromArray(['metaKey']),
              elm$json$Json$Decode$bool,
            ),
          )
          var elm$json$Json$Decode$andThen = _Json_andThen
          var elm$json$Json$Decode$null = _Json_decodeNull
          var elm$json$Json$Decode$oneOf = _Json_oneOf
          var author$project$Main$pouchItemChanged = _Platform_incomingPort(
            'pouchItemChanged',
            A2(
              elm$json$Json$Decode$andThen,
              function(title) {
                return A2(
                  elm$json$Json$Decode$andThen,
                  function(rev) {
                    return A2(
                      elm$json$Json$Decode$andThen,
                      function(pid) {
                        return A2(
                          elm$json$Json$Decode$andThen,
                          function(id) {
                            return A2(
                              elm$json$Json$Decode$andThen,
                              function(childIds) {
                                return elm$json$Json$Decode$succeed({
                                  childIds: childIds,
                                  id: id,
                                  pid: pid,
                                  rev: rev,
                                  title: title,
                                })
                              },
                              A2(
                                elm$json$Json$Decode$field,
                                'childIds',
                                elm$json$Json$Decode$list(
                                  elm$json$Json$Decode$string,
                                ),
                              ),
                            )
                          },
                          A2(
                            elm$json$Json$Decode$field,
                            'id',
                            elm$json$Json$Decode$string,
                          ),
                        )
                      },
                      A2(
                        elm$json$Json$Decode$field,
                        'pid',
                        elm$json$Json$Decode$oneOf(
                          _List_fromArray([
                            elm$json$Json$Decode$null(
                              elm$core$Maybe$Nothing,
                            ),
                            A2(
                              elm$json$Json$Decode$map,
                              elm$core$Maybe$Just,
                              elm$json$Json$Decode$string,
                            ),
                          ]),
                        ),
                      ),
                    )
                  },
                  A2(
                    elm$json$Json$Decode$field,
                    'rev',
                    elm$json$Json$Decode$oneOf(
                      _List_fromArray([
                        elm$json$Json$Decode$null(elm$core$Maybe$Nothing),
                        A2(
                          elm$json$Json$Decode$map,
                          elm$core$Maybe$Just,
                          elm$json$Json$Decode$string,
                        ),
                      ]),
                    ),
                  ),
                )
              },
              A2(
                elm$json$Json$Decode$field,
                'title',
                elm$json$Json$Decode$string,
              ),
            ),
          )
          var author$project$Main$pouchItemsLoaded = _Platform_incomingPort(
            'pouchItemsLoaded',
            elm$json$Json$Decode$list(
              A2(
                elm$json$Json$Decode$andThen,
                function(title) {
                  return A2(
                    elm$json$Json$Decode$andThen,
                    function(rev) {
                      return A2(
                        elm$json$Json$Decode$andThen,
                        function(pid) {
                          return A2(
                            elm$json$Json$Decode$andThen,
                            function(id) {
                              return A2(
                                elm$json$Json$Decode$andThen,
                                function(childIds) {
                                  return elm$json$Json$Decode$succeed({
                                    childIds: childIds,
                                    id: id,
                                    pid: pid,
                                    rev: rev,
                                    title: title,
                                  })
                                },
                                A2(
                                  elm$json$Json$Decode$field,
                                  'childIds',
                                  elm$json$Json$Decode$list(
                                    elm$json$Json$Decode$string,
                                  ),
                                ),
                              )
                            },
                            A2(
                              elm$json$Json$Decode$field,
                              'id',
                              elm$json$Json$Decode$string,
                            ),
                          )
                        },
                        A2(
                          elm$json$Json$Decode$field,
                          'pid',
                          elm$json$Json$Decode$oneOf(
                            _List_fromArray([
                              elm$json$Json$Decode$null(
                                elm$core$Maybe$Nothing,
                              ),
                              A2(
                                elm$json$Json$Decode$map,
                                elm$core$Maybe$Just,
                                elm$json$Json$Decode$string,
                              ),
                            ]),
                          ),
                        ),
                      )
                    },
                    A2(
                      elm$json$Json$Decode$field,
                      'rev',
                      elm$json$Json$Decode$oneOf(
                        _List_fromArray([
                          elm$json$Json$Decode$null(
                            elm$core$Maybe$Nothing,
                          ),
                          A2(
                            elm$json$Json$Decode$map,
                            elm$core$Maybe$Just,
                            elm$json$Json$Decode$string,
                          ),
                        ]),
                      ),
                    ),
                  )
                },
                A2(
                  elm$json$Json$Decode$field,
                  'title',
                  elm$json$Json$Decode$string,
                ),
              ),
            ),
          )
          var elm$browser$Browser$Events$onKeyDown = A2(
            elm$browser$Browser$Events$on,
            elm$browser$Browser$Events$Document,
            'keydown',
          )
          var author$project$Main$subscriptions = function(model) {
            return elm$core$Platform$Sub$batch(
              _List_fromArray([
                author$project$Main$fromJs(author$project$Main$FromJs),
                author$project$Main$pouchItemsLoaded(
                  author$project$Main$PouchItemsLoaded,
                ),
                author$project$Main$pouchItemChanged(
                  author$project$Main$PouchItemChanged,
                ),
                author$project$Main$system.subscriptions(model.draggable),
                elm$browser$Browser$Events$onKeyDown(
                  A2(
                    elm$json$Json$Decode$map,
                    author$project$Main$KeyDownReceived,
                    author$project$Main$keyEventDecoder,
                  ),
                ),
                elm$browser$Browser$Events$onMouseUp(
                  elm$json$Json$Decode$succeed(
                    author$project$Main$MouseUpReceived,
                  ),
                ),
              ]),
            )
          }
          var author$project$Main$AddItemClicked = { $: 'AddItemClicked' }
          var author$project$Main$ItemFocused = function(a) {
            return { $: 'ItemFocused', a: a }
          }
          var author$project$Main$ItemLostFocus = function(a) {
            return { $: 'ItemLostFocus', a: a }
          }
          var author$project$V$t = elm$html$Html$text
          var author$project$ViewDndItemTree$getItemDomId = function(
            item,
          ) {
            return 'item-dnd-id-' + item.id
          }
          var elm$html$Html$Attributes$tabindex = function(n) {
            return A2(
              _VirtualDom_attribute,
              'tabIndex',
              elm$core$String$fromInt(n),
            )
          }
          var justgage$tachyons_elm$Tachyons$classes = function(
            stringList,
          ) {
            return elm$html$Html$Attributes$class(
              A2(elm$core$String$join, ' ', stringList),
            )
          }
          var justgage$tachyons_elm$Tachyons$Classes$b__black_50 =
            'b--black-50'
          var justgage$tachyons_elm$Tachyons$Classes$ba = 'ba'
          var justgage$tachyons_elm$Tachyons$Classes$br1 = 'br1'
          var justgage$tachyons_elm$Tachyons$Classes$mv2 = 'mv2'
          var justgage$tachyons_elm$Tachyons$Classes$pa3 = 'pa3'
          var author$project$ViewDndItemTree$viewItemWithTitle = F2(
            function(attrs, title) {
              return A2(
                elm$html$Html$div,
                A2(
                  elm$core$List$cons,
                  justgage$tachyons_elm$Tachyons$classes(
                    _List_fromArray([
                      justgage$tachyons_elm$Tachyons$Classes$pa3,
                      justgage$tachyons_elm$Tachyons$Classes$ba,
                      justgage$tachyons_elm$Tachyons$Classes$br1,
                      justgage$tachyons_elm$Tachyons$Classes$mv2,
                      justgage$tachyons_elm$Tachyons$Classes$b__black_50,
                    ]),
                  ),
                  A2(
                    elm$core$List$cons,
                    elm$html$Html$Attributes$tabindex(1),
                    attrs,
                  ),
                ),
                _List_fromArray([author$project$V$t(title)]),
              )
            },
          )
          var author$project$ViewDndItemTree$viewItem = F2(function(
            attrs,
            item,
          ) {
            return A2(
              author$project$ViewDndItemTree$viewItemWithTitle,
              attrs,
              item.title,
            )
          })
          var elm$html$Html$Events$onBlur = function(msg) {
            return A2(
              elm$html$Html$Events$on,
              'blur',
              elm$json$Json$Decode$succeed(msg),
            )
          }
          var elm$html$Html$Events$onFocus = function(msg) {
            return A2(
              elm$html$Html$Events$on,
              'focus',
              elm$json$Json$Decode$succeed(msg),
            )
          }
          var justgage$tachyons_elm$Tachyons$Classes$flex = 'flex'
          var justgage$tachyons_elm$Tachyons$Classes$flex_column =
            'flex-column'
          var justgage$tachyons_elm$Tachyons$Classes$flex_grow_1 =
            'flex-grow-1'
          var justgage$tachyons_elm$Tachyons$Classes$items_center =
            'items-center'
          var author$project$ViewDndItemTree$viewDraggableItem = F5(
            function(_n0, system, draggable, index, item) {
              var onFocusMsg = _n0.onFocusMsg
              var onBlurMsg = _n0.onBlurMsg
              var maybeDraggedIndex = system.draggedIndex(draggable)
              if (maybeDraggedIndex.$ === 'Nothing') {
                var itemDomId = author$project$ViewDndItemTree$getItemDomId(
                  item,
                )
                return A2(
                  elm$html$Html$div,
                  _List_fromArray([
                    elm$html$Html$Attributes$id(itemDomId),
                    justgage$tachyons_elm$Tachyons$classes(
                      _List_fromArray([
                        justgage$tachyons_elm$Tachyons$Classes$flex,
                        justgage$tachyons_elm$Tachyons$Classes$items_center,
                        justgage$tachyons_elm$Tachyons$Classes$pa3,
                        justgage$tachyons_elm$Tachyons$Classes$ba,
                        justgage$tachyons_elm$Tachyons$Classes$br1,
                        justgage$tachyons_elm$Tachyons$Classes$mv2,
                        justgage$tachyons_elm$Tachyons$Classes$b__black_50,
                      ]),
                    ),
                    elm$html$Html$Attributes$tabindex(0),
                    elm$html$Html$Events$onFocus(onFocusMsg(item)),
                    elm$html$Html$Events$onBlur(onBlurMsg(item)),
                  ]),
                  _List_fromArray([
                    A2(
                      elm$html$Html$div,
                      _List_fromArray([
                        justgage$tachyons_elm$Tachyons$classes(
                          _List_fromArray([
                            justgage$tachyons_elm$Tachyons$Classes$flex_grow_1,
                            justgage$tachyons_elm$Tachyons$Classes$flex,
                            justgage$tachyons_elm$Tachyons$Classes$flex_column,
                          ]),
                        ),
                      ]),
                      _List_fromArray([
                        A2(
                          elm$html$Html$div,
                          _List_fromArray([
                            justgage$tachyons_elm$Tachyons$classes(
                              _List_Nil,
                            ),
                          ]),
                          _List_fromArray([
                            author$project$V$t(item.title),
                          ]),
                        ),
                        A2(
                          elm$html$Html$div,
                          _List_Nil,
                          A2(
                            elm$core$List$map,
                            function(cid) {
                              return A2(
                                elm$html$Html$div,
                                _List_Nil,
                                _List_fromArray([author$project$V$t(cid)]),
                              )
                            },
                            item.childIds,
                          ),
                        ),
                      ]),
                    ),
                    A2(
                      elm$html$Html$div,
                      A2(
                        elm$core$List$cons,
                        justgage$tachyons_elm$Tachyons$classes(
                          _List_fromArray(['move']),
                        ),
                        A2(system.dragEvents, index, itemDomId),
                      ),
                      _List_fromArray([author$project$V$t('|||')]),
                    ),
                  ]),
                )
              } else {
                var draggedIndex = maybeDraggedIndex.a
                return !_Utils_eq(draggedIndex, index)
                  ? A2(
                      author$project$ViewDndItemTree$viewItem,
                      system.dropEvents(index),
                      item,
                    )
                  : A2(
                      author$project$ViewDndItemTree$viewItemWithTitle,
                      _List_Nil,
                      '[---------]',
                    )
              }
            },
          )
          var justgage$tachyons_elm$Tachyons$Classes$bg_white = 'bg-white'
          var justgage$tachyons_elm$Tachyons$Classes$o_80 = 'o-80'
          var author$project$ViewDndItemTree$viewDraggedItem = F3(function(
            system,
            draggable,
            items,
          ) {
            var maybeDraggedItem = A2(
              elm$core$Maybe$andThen,
              function(index) {
                return elm$core$List$head(
                  A2(elm$core$List$drop, index, items),
                )
              },
              system.draggedIndex(draggable),
            )
            if (maybeDraggedItem.$ === 'Just') {
              var item = maybeDraggedItem.a
              return A2(
                elm$html$Html$div,
                system.draggedStyles(draggable),
                _List_fromArray([
                  A2(
                    author$project$ViewDndItemTree$viewItem,
                    _List_fromArray([
                      justgage$tachyons_elm$Tachyons$classes(
                        _List_fromArray([
                          justgage$tachyons_elm$Tachyons$Classes$bg_white,
                          justgage$tachyons_elm$Tachyons$Classes$o_80,
                        ]),
                      ),
                    ]),
                    item,
                  ),
                ]),
              )
            } else {
              return elm$html$Html$text('')
            }
          })
          var elm$virtual_dom$VirtualDom$keyedNode = function(tag) {
            return _VirtualDom_keyedNode(_VirtualDom_noScript(tag))
          }
          var elm$html$Html$Keyed$node = elm$virtual_dom$VirtualDom$keyedNode
          var author$project$ViewDndItemTree$viewDndItemTree = F3(function(
            config,
            displayRootItems,
            draggable,
          ) {
            var getItemKey = function(item) {
              var _n0 = config.system.draggedIndex(draggable)
              if (_n0.$ === 'Just') {
                return 'dragging-' + item.id
              } else {
                return item.id
              }
            }
            return A2(
              elm$html$Html$div,
              _List_Nil,
              _List_fromArray([
                A3(
                  elm$html$Html$Keyed$node,
                  'div',
                  _List_fromArray([
                    justgage$tachyons_elm$Tachyons$classes(_List_Nil),
                  ]),
                  A2(
                    elm$core$List$indexedMap,
                    F2(function(idx, item) {
                      return _Utils_Tuple2(
                        getItemKey(item),
                        A5(
                          author$project$ViewDndItemTree$viewDraggableItem,
                          config,
                          config.system,
                          draggable,
                          idx,
                          item,
                        ),
                      )
                    }),
                    displayRootItems,
                  ),
                ),
                A3(
                  author$project$ViewDndItemTree$viewDraggedItem,
                  config.system,
                  draggable,
                  displayRootItems,
                ),
              ]),
            )
          })
          var justgage$tachyons_elm$Tachyons$Classes$dn = 'dn'
          var author$project$Main$viewDndItemTree = function(model) {
            var viewConfig = {
              onBlurMsg: author$project$Main$ItemLostFocus,
              onFocusMsg: author$project$Main$ItemFocused,
              system: author$project$Main$system,
            }
            return A2(
              elm$html$Html$div,
              _List_fromArray([
                justgage$tachyons_elm$Tachyons$classes(
                  _List_fromArray([
                    justgage$tachyons_elm$Tachyons$Classes$dn,
                  ]),
                ),
              ]),
              _List_fromArray([
                A3(
                  author$project$ViewDndItemTree$viewDndItemTree,
                  viewConfig,
                  author$project$Main$getDisplayRootItems(model),
                  model.draggable,
                ),
              ]),
            )
          }
          var author$project$V$noHtml = author$project$V$t('')
          var elm$virtual_dom$VirtualDom$attribute = F2(function(
            key,
            value,
          ) {
            return A2(
              _VirtualDom_attribute,
              _VirtualDom_noOnOrFormAction(key),
              _VirtualDom_noJavaScriptOrHtmlUri(value),
            )
          })
          var elm$html$Html$Attributes$attribute = elm$virtual_dom$VirtualDom$attribute
          var justgage$tachyons_elm$Tachyons$Classes$ml4 = 'ml4'
          var author$project$Main$viewTree = function(model) {
            var viewItemTitle = function(item) {
              return A2(
                elm$html$Html$div,
                _List_fromArray([
                  justgage$tachyons_elm$Tachyons$classes(
                    _List_fromArray([
                      justgage$tachyons_elm$Tachyons$Classes$mv2,
                      justgage$tachyons_elm$Tachyons$Classes$pa3,
                      justgage$tachyons_elm$Tachyons$Classes$ba,
                      justgage$tachyons_elm$Tachyons$Classes$b__black_50,
                      justgage$tachyons_elm$Tachyons$Classes$br1,
                    ]),
                  ),
                  elm$html$Html$Attributes$tabindex(0),
                  elm$html$Html$Attributes$id(
                    author$project$Main$getItemDomId(item),
                  ),
                  elm$html$Html$Events$onFocus(
                    author$project$Main$ItemFocused(item),
                  ),
                  elm$html$Html$Events$onBlur(
                    author$project$Main$ItemLostFocus(item),
                  ),
                  A2(
                    elm$html$Html$Attributes$attribute,
                    'data-is-focusable',
                    'true',
                  ),
                ]),
                _List_fromArray([author$project$V$t(item.title)]),
              )
            }
            var mRoot = author$project$Main$getRootItem(model)
            var getChildrenOfId = function(id) {
              return A2(
                elm$core$Maybe$withDefault,
                _List_Nil,
                A2(
                  author$project$ItemLookup$getChildrenOfId,
                  id,
                  model.itemLookup,
                ),
              )
            }
            var getChildren = function(item) {
              return getChildrenOfId(item.id)
            }
            var viewChildren = function(item) {
              return A2(elm$core$List$map, viewItem, getChildren(item))
            }
            var viewItem = function(item) {
              return A2(
                elm$html$Html$div,
                _List_Nil,
                _List_fromArray([
                  viewItemTitle(item),
                  A2(
                    elm$html$Html$div,
                    _List_fromArray([
                      justgage$tachyons_elm$Tachyons$classes(
                        _List_fromArray([
                          justgage$tachyons_elm$Tachyons$Classes$ml4,
                        ]),
                      ),
                    ]),
                    viewChildren(item),
                  ),
                ]),
              )
            }
            return A2(
              elm$core$Maybe$withDefault,
              author$project$V$noHtml,
              A2(
                elm$core$Maybe$map,
                A2(
                  elm$core$Basics$composeR,
                  viewChildren,
                  elm$html$Html$div(_List_Nil),
                ),
                mRoot,
              ),
            )
          }
          var justgage$tachyons_elm$Tachyons$Classes$center = 'center'
          var author$project$V$co = function(classNames) {
            return elm$html$Html$div(
              _List_fromArray([
                justgage$tachyons_elm$Tachyons$classes(
                  _Utils_ap(
                    _List_fromArray([
                      justgage$tachyons_elm$Tachyons$Classes$center,
                    ]),
                    classNames,
                  ),
                ),
              ]),
            )
          }
          var justgage$tachyons_elm$Tachyons$Classes$b__black_20 =
            'b--black-20'
          var justgage$tachyons_elm$Tachyons$Classes$f6 = 'f6'
          var justgage$tachyons_elm$Tachyons$Classes$measure = 'measure'
          var justgage$tachyons_elm$Tachyons$Classes$mh1 = 'mh1'
          var justgage$tachyons_elm$Tachyons$Classes$pt3 = 'pt3'
          var justgage$tachyons_elm$Tachyons$Classes$sans_serif =
            'sans-serif'
          var justgage$tachyons_elm$Tachyons$Classes$ttu = 'ttu'
          var author$project$Main$view = function(model) {
            return A2(
              author$project$V$co,
              _List_fromArray([
                justgage$tachyons_elm$Tachyons$Classes$sans_serif,
                justgage$tachyons_elm$Tachyons$Classes$measure,
                justgage$tachyons_elm$Tachyons$Classes$pt3,
                'us-none',
              ]),
              _List_fromArray([
                A2(
                  elm$html$Html$div,
                  _List_Nil,
                  _List_fromArray([
                    A2(
                      elm$html$Html$button,
                      _List_fromArray([
                        justgage$tachyons_elm$Tachyons$classes(
                          _List_fromArray([
                            justgage$tachyons_elm$Tachyons$Classes$br1,
                            justgage$tachyons_elm$Tachyons$Classes$ba,
                            justgage$tachyons_elm$Tachyons$Classes$b__black_20,
                            justgage$tachyons_elm$Tachyons$Classes$ttu,
                            justgage$tachyons_elm$Tachyons$Classes$mh1,
                            justgage$tachyons_elm$Tachyons$Classes$f6,
                          ]),
                        ),
                        elm$html$Html$Events$onClick(
                          author$project$Main$AddItemClicked,
                        ),
                      ]),
                      _List_fromArray([author$project$V$t('add new')]),
                    ),
                  ]),
                ),
                author$project$Main$viewTree(model),
                author$project$Main$viewDndItemTree(model),
              ]),
            )
          }
          var elm$browser$Browser$element = _Browser_element
          var author$project$Main$main = elm$browser$Browser$element({
            init: author$project$Main$init,
            subscriptions: author$project$Main$subscriptions,
            update: author$project$Main$update,
            view: author$project$Main$view,
          })
          _Platform_export({
            Main: {
              init: author$project$Main$main(
                A2(
                  elm$json$Json$Decode$andThen,
                  function(maybeFocusedItemId) {
                    return A2(
                      elm$json$Json$Decode$andThen,
                      function(items) {
                        return elm$json$Json$Decode$succeed({
                          items: items,
                          maybeFocusedItemId: maybeFocusedItemId,
                        })
                      },
                      A2(
                        elm$json$Json$Decode$field,
                        'items',
                        elm$json$Json$Decode$list(
                          A2(
                            elm$json$Json$Decode$andThen,
                            function(title) {
                              return A2(
                                elm$json$Json$Decode$andThen,
                                function(rev) {
                                  return A2(
                                    elm$json$Json$Decode$andThen,
                                    function(pid) {
                                      return A2(
                                        elm$json$Json$Decode$andThen,
                                        function(id) {
                                          return A2(
                                            elm$json$Json$Decode$andThen,
                                            function(childIds) {
                                              return elm$json$Json$Decode$succeed(
                                                {
                                                  childIds: childIds,
                                                  id: id,
                                                  pid: pid,
                                                  rev: rev,
                                                  title: title,
                                                },
                                              )
                                            },
                                            A2(
                                              elm$json$Json$Decode$field,
                                              'childIds',
                                              elm$json$Json$Decode$list(
                                                elm$json$Json$Decode$string,
                                              ),
                                            ),
                                          )
                                        },
                                        A2(
                                          elm$json$Json$Decode$field,
                                          'id',
                                          elm$json$Json$Decode$string,
                                        ),
                                      )
                                    },
                                    A2(
                                      elm$json$Json$Decode$field,
                                      'pid',
                                      elm$json$Json$Decode$oneOf(
                                        _List_fromArray([
                                          elm$json$Json$Decode$null(
                                            elm$core$Maybe$Nothing,
                                          ),
                                          A2(
                                            elm$json$Json$Decode$map,
                                            elm$core$Maybe$Just,
                                            elm$json$Json$Decode$string,
                                          ),
                                        ]),
                                      ),
                                    ),
                                  )
                                },
                                A2(
                                  elm$json$Json$Decode$field,
                                  'rev',
                                  elm$json$Json$Decode$oneOf(
                                    _List_fromArray([
                                      elm$json$Json$Decode$null(
                                        elm$core$Maybe$Nothing,
                                      ),
                                      A2(
                                        elm$json$Json$Decode$map,
                                        elm$core$Maybe$Just,
                                        elm$json$Json$Decode$string,
                                      ),
                                    ]),
                                  ),
                                ),
                              )
                            },
                            A2(
                              elm$json$Json$Decode$field,
                              'title',
                              elm$json$Json$Decode$string,
                            ),
                          ),
                        ),
                      ),
                    )
                  },
                  A2(
                    elm$json$Json$Decode$field,
                    'maybeFocusedItemId',
                    elm$json$Json$Decode$oneOf(
                      _List_fromArray([
                        elm$json$Json$Decode$null(elm$core$Maybe$Nothing),
                        A2(
                          elm$json$Json$Decode$map,
                          elm$core$Maybe$Just,
                          elm$json$Json$Decode$string,
                        ),
                      ]),
                    ),
                  ),
                ),
              )({
                versions: { elm: '0.19.0' },
                types: {
                  message: 'Main.Msg',
                  aliases: {
                    'ItemLookup.Item': {
                      args: [],
                      type:
                        '{ id : String.String, rev : Maybe.Maybe String.String, title : String.String, pid : Maybe.Maybe String.String, childIds : List.List String.String }',
                    },
                    'Main.KeyEvent': {
                      args: [],
                      type:
                        '{ key : String.String, ctrl : Basics.Bool, meta : Basics.Bool }',
                    },
                    'DnDList.Position': {
                      args: [],
                      type: '{ x : Basics.Int, y : Basics.Int }',
                    },
                    'Browser.Dom.Element': {
                      args: [],
                      type:
                        '{ scene : { width : Basics.Float, height : Basics.Float }, viewport : { x : Basics.Float, y : Basics.Float, width : Basics.Float, height : Basics.Float }, element : { x : Basics.Float, y : Basics.Float, width : Basics.Float, height : Basics.Float } }',
                    },
                  },
                  unions: {
                    'Main.Msg': {
                      args: [],
                      tags: {
                        NOP: [],
                        AddItemClicked: [],
                        FromJs: ['Basics.Int'],
                        FocusItemResultReceived: [
                          'ItemLookup.Item',
                          'Result.Result Browser.Dom.Error ()',
                        ],
                        DndMsgReceived: ['DnDList.Msg'],
                        ItemFocused: ['ItemLookup.Item'],
                        ItemLostFocus: ['ItemLookup.Item'],
                        KeyDownReceived: ['Main.KeyEvent'],
                        MouseUpReceived: [],
                        InitReceived: [],
                        PouchItemsLoaded: ['List.List ItemLookup.Item'],
                        PouchItemChanged: ['ItemLookup.Item'],
                      },
                    },
                    'DnDList.Msg': {
                      args: [],
                      tags: {
                        DragStart: [
                          'Basics.Int',
                          'String.String',
                          'DnDList.Position',
                        ],
                        Drag: ['DnDList.Position'],
                        DragOver: ['Basics.Int'],
                        DragEnd: [],
                        GotDragged: [
                          'Result.Result Browser.Dom.Error Browser.Dom.Element',
                        ],
                      },
                    },
                    'Browser.Dom.Error': {
                      args: [],
                      tags: { NotFound: ['String.String'] },
                    },
                    'Basics.Bool': {
                      args: [],
                      tags: { True: [], False: [] },
                    },
                    'Basics.Int': { args: [], tags: { Int: [] } },
                    'List.List': { args: ['a'], tags: {} },
                    'Maybe.Maybe': {
                      args: ['a'],
                      tags: { Just: ['a'], Nothing: [] },
                    },
                    'Result.Result': {
                      args: ['error', 'value'],
                      tags: { Ok: ['value'], Err: ['error'] },
                    },
                    'String.String': { args: [], tags: { String: [] } },
                    'Basics.Float': { args: [], tags: { Float: [] } },
                  },
                },
              }),
            },
          })

          //////////////////// HMR BEGIN ////////////////////

          /*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Original Author: Flux Xu @fluxxu
*/

          /*
    A note about the environment that this code runs in...

    assumed globals:
        - `module` (from Node.js module system and webpack)

    assumed in scope after injection into the Elm IIFE:
        - `scope` (has an 'Elm' property which contains the public Elm API)
        - various functions defined by Elm which we have to hook such as `_Platform_initialize` and `_Scheduler_binding`
 */

          if (module.hot) {
            ;(function() {
              'use strict'

              //polyfill for IE: https://github.com/fluxxu/elm-hot-loader/issues/16
              if (typeof Object.assign != 'function') {
                Object.assign = function(target) {
                  'use strict'
                  if (target == null) {
                    throw new TypeError(
                      'Cannot convert undefined or null to object',
                    )
                  }

                  target = Object(target)
                  for (var index = 1; index < arguments.length; index++) {
                    var source = arguments[index]
                    if (source != null) {
                      for (var key in source) {
                        if (
                          Object.prototype.hasOwnProperty.call(source, key)
                        ) {
                          target[key] = source[key]
                        }
                      }
                    }
                  }
                  return target
                }
              }

              var instances = module.hot.data
                ? module.hot.data.instances || {}
                : {}
              var uid = module.hot.data ? module.hot.data.uid || 0 : 0

              if (Object.keys(instances).length === 0) {
                console.log('[elm-hot] Enabled')
              }

              var cancellers = []

              // These 2 variables act as dynamically-scoped variables which are set only when the
              // Elm module's hooked init function is called.
              var initializingInstance = null
              var swappingInstance = null

              module.hot.accept()
              module.hot.dispose(function(data) {
                data.instances = instances
                data.uid = uid

                // Cleanup pending async tasks

                // First, make sure that no new tasks can be started until we finish replacing the code
                _Scheduler_binding = function() {
                  return _Scheduler_fail(
                    new Error('[elm-hot] Inactive Elm instance.'),
                  )
                }

                // Second, kill pending tasks belonging to the old instance
                if (cancellers.length) {
                  console.log(
                    '[elm-hot] Killing ' +
                      cancellers.length +
                      ' running processes...',
                  )
                  try {
                    cancellers.forEach(function(cancel) {
                      cancel()
                    })
                  } catch (e) {
                    console.warn(
                      '[elm-hot] Kill process error: ' + e.message,
                    )
                  }
                }
              })

              function getId() {
                return ++uid
              }

              function findPublicModules(parent, path) {
                var modules = []
                for (var key in parent) {
                  var child = parent[key]
                  var currentPath = path ? path + '.' + key : key
                  if ('init' in child) {
                    modules.push({
                      path: currentPath,
                      module: child,
                    })
                  } else {
                    modules = modules.concat(
                      findPublicModules(child, currentPath),
                    )
                  }
                }
                return modules
              }

              function registerInstance(
                domNode,
                flags,
                path,
                portSubscribes,
                portSends,
              ) {
                var id = getId()

                var instance = {
                  id: id,
                  path: path,
                  domNode: domNode,
                  flags: flags,
                  portSubscribes: portSubscribes,
                  portSends: portSends,
                  navKeyPath: null, // array of JS property names by which the Browser.Navigation.Key can be found in the model
                  lastState: null, // last Elm app state (root model)
                }

                return (instances[id] = instance)
              }

              function isFullscreenApp() {
                // Returns true if the Elm app will take over the entire DOM body.
                return (
                  typeof elm$browser$Browser$application !== 'undefined' ||
                  typeof elm$browser$Browser$document !== 'undefined'
                )
              }

              function wrapDomNode(node) {
                // When embedding an Elm app into a specific DOM node, Elm will replace the provided
                // DOM node with the Elm app's content. When the Elm app is compiled normally, the
                // original DOM node is reused (its attributes and content changes, but the object
                // in memory remains the same). But when compiled using `--debug`, Elm will completely
                // destroy the original DOM node and instead replace it with 2 brand new nodes: one
                // for your Elm app's content and the other for the Elm debugger UI. In this case,
                // if you held a reference to the DOM node provided for embedding, it would be orphaned
                // after Elm module initialization.
                //
                // So in order to make both cases consistent and isolate us from changes in how Elm
                // does this, we will insert a dummy node to wrap the node for embedding and hold
                // a reference to the dummy node.
                //
                // We will also put a tag on the dummy node so that the Elm developer knows who went
                // behind their back and rudely put stuff in their DOM.
                var dummyNode = document.createElement('div')
                dummyNode.setAttribute('data-elm-hot', 'true')
                var parentNode = node.parentNode
                parentNode.replaceChild(dummyNode, node)
                dummyNode.appendChild(node)
                return dummyNode
              }

              function wrapPublicModule(path, module) {
                var originalInit = module.init
                if (originalInit) {
                  module.init = function(args) {
                    var elm
                    var portSubscribes = {}
                    var portSends = {}
                    var domNode = null
                    var flags = null
                    if (typeof args !== 'undefined') {
                      // normal case
                      domNode =
                        args['node'] && !isFullscreenApp()
                          ? wrapDomNode(args['node'])
                          : document.body
                      flags = args['flags']
                    } else {
                      // rare case: Elm allows init to be called without any arguments at all
                      domNode = document.body
                      flags = undefined
                    }
                    initializingInstance = registerInstance(
                      domNode,
                      flags,
                      path,
                      portSubscribes,
                      portSends,
                    )
                    elm = originalInit(args)
                    wrapPorts(elm, portSubscribes, portSends)
                    initializingInstance = null
                    return elm
                  }
                } else {
                  console.error(
                    'Could not find a public module to wrap at path ' +
                      path,
                  )
                }
              }

              function swap(Elm, instance) {
                console.log(
                  '[elm-hot] Hot-swapping module: ' + instance.path,
                )

                swappingInstance = instance

                // remove from the DOM everything that had been created by the old Elm app
                var containerNode = instance.domNode
                while (containerNode.lastChild) {
                  containerNode.removeChild(containerNode.lastChild)
                }

                var m = getAt(instance.path.split('.'), Elm)
                var elm
                if (m) {
                  // prepare to initialize the new Elm module
                  var args = { flags: instance.flags }
                  if (containerNode === document.body) {
                    // fullscreen case: no additional args needed
                  } else {
                    // embed case: provide a new node for Elm to use
                    var nodeForEmbed = document.createElement('div')
                    containerNode.appendChild(nodeForEmbed)
                    args['node'] = nodeForEmbed
                  }

                  elm = m.init(args)

                  Object.keys(instance.portSubscribes).forEach(function(
                    portName,
                  ) {
                    if (
                      portName in elm.ports &&
                      'subscribe' in elm.ports[portName]
                    ) {
                      var handlers = instance.portSubscribes[portName]
                      if (!handlers.length) {
                        return
                      }
                      console.log(
                        '[elm-hot] Reconnect ' +
                          handlers.length +
                          " handler(s) to port '" +
                          portName +
                          "' (" +
                          instance.path +
                          ').',
                      )
                      handlers.forEach(function(handler) {
                        elm.ports[portName].subscribe(handler)
                      })
                    } else {
                      delete instance.portSubscribes[portName]
                      console.log(
                        '[elm-hot] Port was removed: ' + portName,
                      )
                    }
                  })

                  Object.keys(instance.portSends).forEach(function(
                    portName,
                  ) {
                    if (
                      portName in elm.ports &&
                      'send' in elm.ports[portName]
                    ) {
                      console.log(
                        '[elm-hot] Replace old port send with the new send',
                      )
                      instance.portSends[portName] =
                        elm.ports[portName].send
                    } else {
                      delete instance.portSends[portName]
                      console.log(
                        '[elm-hot] Port was removed: ' + portName,
                      )
                    }
                  })
                } else {
                  console.log(
                    '[elm-hot] Module was removed: ' + instance.path,
                  )
                }

                swappingInstance = null
              }

              function wrapPorts(elm, portSubscribes, portSends) {
                var portNames = Object.keys(elm.ports || {})
                //hook ports
                if (portNames.length) {
                  // hook outgoing ports
                  portNames
                    .filter(function(name) {
                      return 'subscribe' in elm.ports[name]
                    })
                    .forEach(function(portName) {
                      var port = elm.ports[portName]
                      var subscribe = port.subscribe
                      var unsubscribe = port.unsubscribe
                      elm.ports[portName] = Object.assign(port, {
                        subscribe: function(handler) {
                          console.log(
                            '[elm-hot] ports.' +
                              portName +
                              '.subscribe called.',
                          )
                          if (!portSubscribes[portName]) {
                            portSubscribes[portName] = [handler]
                          } else {
                            //TODO handle subscribing to single handler more than once?
                            portSubscribes[portName].push(handler)
                          }
                          return subscribe.call(port, handler)
                        },
                        unsubscribe: function(handler) {
                          console.log(
                            '[elm-hot] ports.' +
                              portName +
                              '.unsubscribe called.',
                          )
                          var list = portSubscribes[portName]
                          if (list && list.indexOf(handler) !== -1) {
                            list.splice(list.lastIndexOf(handler), 1)
                          } else {
                            console.warn(
                              '[elm-hot] ports.' +
                                portName +
                                '.unsubscribe: handler not subscribed',
                            )
                          }
                          return unsubscribe.call(port, handler)
                        },
                      })
                    })

                  // hook incoming ports
                  portNames
                    .filter(function(name) {
                      return 'send' in elm.ports[name]
                    })
                    .forEach(function(portName) {
                      var port = elm.ports[portName]
                      portSends[portName] = port.send
                      elm.ports[portName] = Object.assign(port, {
                        send: function(val) {
                          return portSends[portName].call(port, val)
                        },
                      })
                    })
                }
                return portSubscribes
              }

              /*
        Breadth-first search for a `Browser.Navigation.Key` in the user's app model.
        Returns the key and keypath or null if not found.
        */
              function findNavKey(rootModel) {
                var queue = []
                if (isDebuggerModel(rootModel)) {
                  /*
                 Extract the user's app model from the Elm Debugger's model. The Elm debugger
                 can hold multiple references to the user's model (e.g. in its "history"). So
                 we must be careful to only search within the "state" part of the Debugger.
                */
                  queue.push({
                    value: rootModel['state'],
                    keypath: ['state'],
                  })
                } else {
                  queue.push({ value: rootModel, keypath: [] })
                }

                while (queue.length !== 0) {
                  var item = queue.shift()

                  // The nav key is identified by a runtime tag added by the elm-hot injector.
                  if (item.value.hasOwnProperty('elm-hot-nav-key')) {
                    // found it!
                    return item
                  }

                  if (typeof item.value !== 'object') {
                    continue
                  }

                  for (var propName in item.value) {
                    if (!item.value.hasOwnProperty(propName)) continue
                    var newKeypath = item.keypath.slice()
                    newKeypath.push(propName)
                    queue.push({
                      value: item.value[propName],
                      keypath: newKeypath,
                    })
                  }
                }

                return null
              }

              function isDebuggerModel(model) {
                return (
                  model &&
                  model.hasOwnProperty('expando') &&
                  model.hasOwnProperty('state')
                )
              }

              function getAt(keyPath, obj) {
                return keyPath.reduce(function(xs, x) {
                  return xs && xs[x] ? xs[x] : null
                }, obj)
              }

              function removeNavKeyListeners(navKey) {
                window.removeEventListener('popstate', navKey.value)
                window.navigator.userAgent.indexOf('Trident') < 0 ||
                  window.removeEventListener('hashchange', navKey.value)
              }

              // hook program creation
              var initialize = _Platform_initialize
              _Platform_initialize = function(
                flagDecoder,
                args,
                init,
                update,
                subscriptions,
                stepperBuilder,
              ) {
                var instance = initializingInstance || swappingInstance
                var tryFirstRender = !!swappingInstance

                var hookedInit = function(args) {
                  var initialStateTuple = init(args)
                  if (swappingInstance) {
                    var oldModel = swappingInstance.lastState
                    var newModel = initialStateTuple.a

                    if (
                      typeof elm$browser$Browser$application !==
                      'undefined'
                    ) {
                      // attempt to find the Browser.Navigation.Key in the newly-constructed model
                      // and bring it along with the rest of the old data.
                      var newKeyLoc = findNavKey(newModel)
                      var error = null
                      if (newKeyLoc === null) {
                        error =
                          'could not find Browser.Navigation.Key in the new app model'
                      } else if (instance.navKeyPath === null) {
                        error =
                          'could not find Browser.Navigation.Key in the old app model.'
                      } else if (
                        newKeyLoc.keypath.toString() !==
                        instance.navKeyPath.toString()
                      ) {
                        error =
                          'the location of the Browser.Navigation.Key in the model has changed.'
                      } else {
                        var oldNavKey = getAt(
                          instance.navKeyPath,
                          oldModel,
                        )
                        if (oldNavKey === null) {
                          error =
                            'keypath ' +
                            instance.navKeyPath +
                            ' is invalid. Please report a bug.'
                        } else {
                          // remove event listeners attached to the old nav key
                          removeNavKeyListeners(oldNavKey)

                          // insert the new nav key into the old model in the exact same location
                          var parentKeyPath = newKeyLoc.keypath.slice(
                            0,
                            -1,
                          )
                          var lastSegment = newKeyLoc.keypath.slice(-1)[0]
                          var oldParent = getAt(parentKeyPath, oldModel)
                          oldParent[lastSegment] = newKeyLoc.value
                        }
                      }

                      if (error !== null) {
                        console.error(
                          '[elm-hot] Hot-swapping ' +
                            instance.path +
                            ' not possible: ' +
                            error,
                        )
                        oldModel = newModel
                      }
                    }

                    // the heart of the app state hot-swap
                    initialStateTuple.a = oldModel

                    // ignore any Cmds returned by the init during hot-swap
                    initialStateTuple.b = elm$core$Platform$Cmd$none
                  } else {
                    // capture the initial state for later
                    initializingInstance.lastState = initialStateTuple.a

                    // capture Browser.application's navigation key for later
                    if (
                      typeof elm$browser$Browser$application !==
                      'undefined'
                    ) {
                      var navKeyLoc = findNavKey(
                        initializingInstance.lastState,
                      )
                      if (!navKeyLoc) {
                        console.error(
                          '[elm-hot] Hot-swapping disabled for ' +
                            instance.path +
                            ': could not find Browser.Navigation.Key in your model.',
                        )
                        instance.navKeyPath = null
                      } else {
                        instance.navKeyPath = navKeyLoc.keypath
                      }
                    }
                  }

                  return initialStateTuple
                }

                var hookedStepperBuilder = function(sendToApp, model) {
                  var result
                  // first render may fail if shape of model changed too much
                  if (tryFirstRender) {
                    tryFirstRender = false
                    try {
                      result = stepperBuilder(sendToApp, model)
                    } catch (e) {
                      throw new Error(
                        '[elm-hot] Hot-swapping ' +
                          instance.path +
                          ' is not possible, please reload page. Error: ' +
                          e.message,
                      )
                    }
                  } else {
                    result = stepperBuilder(sendToApp, model)
                  }

                  return function(nextModel, isSync) {
                    if (instance) {
                      // capture the state after every step so that later we can restore from it during a hot-swap
                      instance.lastState = nextModel
                    }
                    return result(nextModel, isSync)
                  }
                }

                return initialize(
                  flagDecoder,
                  args,
                  hookedInit,
                  update,
                  subscriptions,
                  hookedStepperBuilder,
                )
              }

              // hook process creation
              var originalBinding = _Scheduler_binding
              _Scheduler_binding = function(originalCallback) {
                return originalBinding(function() {
                  // start the scheduled process, which may return a cancellation function.
                  var cancel = originalCallback.apply(this, arguments)
                  if (cancel) {
                    cancellers.push(cancel)
                    return function() {
                      cancellers.splice(cancellers.indexOf(cancel), 1)
                      return cancel()
                    }
                  }
                  return cancel
                })
              }

              scope['_elm_hot_loader_init'] = function(Elm) {
                // swap instances
                var removedInstances = []
                for (var id in instances) {
                  var instance = instances[id]
                  if (instance.domNode.parentNode) {
                    swap(Elm, instance)
                  } else {
                    removedInstances.push(id)
                  }
                }

                removedInstances.forEach(function(id) {
                  delete instance[id]
                })

                // wrap all public modules
                var publicModules = findPublicModules(Elm)
                publicModules.forEach(function(m) {
                  wrapPublicModule(m.path, m.module)
                })
              }
            })()

            scope['_elm_hot_loader_init'](scope['Elm'])
          }
          //////////////////// HMR END ////////////////////
        })(this)
      },
      {},
    ],
    '../node_modules/argsarray/index.js': [
      function(require, module, exports) {
        'use strict'

        module.exports = argsArray

        function argsArray(fun) {
          return function() {
            var len = arguments.length
            if (len) {
              var args = []
              var i = -1
              while (++i < len) {
                args[i] = arguments[i]
              }
              return fun.call(this, args)
            } else {
              return fun.call(this, [])
            }
          }
        }
      },
      {},
    ],
    '../node_modules/immediate/lib/browser.js': [
      function(require, module, exports) {
        var global = arguments[3]
        ;('use strict')
        var Mutation =
          global.MutationObserver || global.WebKitMutationObserver

        var scheduleDrain

        {
          if (Mutation) {
            var called = 0
            var observer = new Mutation(nextTick)
            var element = global.document.createTextNode('')
            observer.observe(element, {
              characterData: true,
            })
            scheduleDrain = function() {
              element.data = called = ++called % 2
            }
          } else if (
            !global.setImmediate &&
            typeof global.MessageChannel !== 'undefined'
          ) {
            var channel = new global.MessageChannel()
            channel.port1.onmessage = nextTick
            scheduleDrain = function() {
              channel.port2.postMessage(0)
            }
          } else if (
            'document' in global &&
            'onreadystatechange' in global.document.createElement('script')
          ) {
            scheduleDrain = function() {
              // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
              // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
              var scriptEl = global.document.createElement('script')
              scriptEl.onreadystatechange = function() {
                nextTick()

                scriptEl.onreadystatechange = null
                scriptEl.parentNode.removeChild(scriptEl)
                scriptEl = null
              }
              global.document.documentElement.appendChild(scriptEl)
            }
          } else {
            scheduleDrain = function() {
              setTimeout(nextTick, 0)
            }
          }
        }

        var draining
        var queue = []
        //named nextTick for less confusing stack traces
        function nextTick() {
          draining = true
          var i, oldQueue
          var len = queue.length
          while (len) {
            oldQueue = queue
            queue = []
            i = -1
            while (++i < len) {
              oldQueue[i]()
            }
            len = queue.length
          }
          draining = false
        }

        module.exports = immediate
        function immediate(task) {
          if (queue.push(task) === 1 && !draining) {
            scheduleDrain()
          }
        }
      },
      {},
    ],
    '../../../.config/yarn/global/node_modules/events/events.js': [
      function(require, module, exports) {
        // Copyright Joyent, Inc. and other Node contributors.
        //
        // Permission is hereby granted, free of charge, to any person obtaining a
        // copy of this software and associated documentation files (the
        // "Software"), to deal in the Software without restriction, including
        // without limitation the rights to use, copy, modify, merge, publish,
        // distribute, sublicense, and/or sell copies of the Software, and to permit
        // persons to whom the Software is furnished to do so, subject to the
        // following conditions:
        //
        // The above copyright notice and this permission notice shall be included
        // in all copies or substantial portions of the Software.
        //
        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
        // USE OR OTHER DEALINGS IN THE SOFTWARE.
        'use strict'

        var R = typeof Reflect === 'object' ? Reflect : null
        var ReflectApply =
          R && typeof R.apply === 'function'
            ? R.apply
            : function ReflectApply(target, receiver, args) {
                return Function.prototype.apply.call(
                  target,
                  receiver,
                  args,
                )
              }
        var ReflectOwnKeys

        if (R && typeof R.ownKeys === 'function') {
          ReflectOwnKeys = R.ownKeys
        } else if (Object.getOwnPropertySymbols) {
          ReflectOwnKeys = function ReflectOwnKeys(target) {
            return Object.getOwnPropertyNames(target).concat(
              Object.getOwnPropertySymbols(target),
            )
          }
        } else {
          ReflectOwnKeys = function ReflectOwnKeys(target) {
            return Object.getOwnPropertyNames(target)
          }
        }

        function ProcessEmitWarning(warning) {
          if (console && console.warn) console.warn(warning)
        }

        var NumberIsNaN =
          Number.isNaN ||
          function NumberIsNaN(value) {
            return value !== value
          }

        function EventEmitter() {
          EventEmitter.init.call(this)
        }

        module.exports = EventEmitter // Backwards-compat with node 0.10.x

        EventEmitter.EventEmitter = EventEmitter
        EventEmitter.prototype._events = undefined
        EventEmitter.prototype._eventsCount = 0
        EventEmitter.prototype._maxListeners = undefined // By default EventEmitters will print a warning if more than 10 listeners are
        // added to it. This is a useful default which helps finding memory leaks.

        var defaultMaxListeners = 10
        Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
          enumerable: true,
          get: function() {
            return defaultMaxListeners
          },
          set: function(arg) {
            if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
              throw new RangeError(
                'The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' +
                  arg +
                  '.',
              )
            }

            defaultMaxListeners = arg
          },
        })

        EventEmitter.init = function() {
          if (
            this._events === undefined ||
            this._events === Object.getPrototypeOf(this)._events
          ) {
            this._events = Object.create(null)
            this._eventsCount = 0
          }

          this._maxListeners = this._maxListeners || undefined
        } // Obviously not all Emitters should be limited to 10. This function allows
        // that to be increased. Set to zero for unlimited.

        EventEmitter.prototype.setMaxListeners = function setMaxListeners(
          n,
        ) {
          if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
            throw new RangeError(
              'The value of "n" is out of range. It must be a non-negative number. Received ' +
                n +
                '.',
            )
          }

          this._maxListeners = n
          return this
        }

        function $getMaxListeners(that) {
          if (that._maxListeners === undefined)
            return EventEmitter.defaultMaxListeners
          return that._maxListeners
        }

        EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
          return $getMaxListeners(this)
        }

        EventEmitter.prototype.emit = function emit(type) {
          var args = []

          for (var i = 1; i < arguments.length; i++)
            args.push(arguments[i])

          var doError = type === 'error'
          var events = this._events
          if (events !== undefined)
            doError = doError && events.error === undefined
          else if (!doError) return false // If there is no 'error' event listener then throw.

          if (doError) {
            var er
            if (args.length > 0) er = args[0]

            if (er instanceof Error) {
              // Note: The comments on the `throw` lines are intentional, they show
              // up in Node's output if this results in an unhandled exception.
              throw er // Unhandled 'error' event
            } // At least give some kind of context to the user

            var err = new Error(
              'Unhandled error.' + (er ? ' (' + er.message + ')' : ''),
            )
            err.context = er
            throw err // Unhandled 'error' event
          }

          var handler = events[type]
          if (handler === undefined) return false

          if (typeof handler === 'function') {
            ReflectApply(handler, this, args)
          } else {
            var len = handler.length
            var listeners = arrayClone(handler, len)

            for (var i = 0; i < len; ++i)
              ReflectApply(listeners[i], this, args)
          }

          return true
        }

        function _addListener(target, type, listener, prepend) {
          var m
          var events
          var existing

          if (typeof listener !== 'function') {
            throw new TypeError(
              'The "listener" argument must be of type Function. Received type ' +
                typeof listener,
            )
          }

          events = target._events

          if (events === undefined) {
            events = target._events = Object.create(null)
            target._eventsCount = 0
          } else {
            // To avoid recursion in the case that type === "newListener"! Before
            // adding it to the listeners, first emit "newListener".
            if (events.newListener !== undefined) {
              target.emit(
                'newListener',
                type,
                listener.listener ? listener.listener : listener,
              ) // Re-assign `events` because a newListener handler could have caused the
              // this._events to be assigned to a new object

              events = target._events
            }

            existing = events[type]
          }

          if (existing === undefined) {
            // Optimize the case of one listener. Don't need the extra array object.
            existing = events[type] = listener
            ++target._eventsCount
          } else {
            if (typeof existing === 'function') {
              // Adding the second element, need to change to array.
              existing = events[type] = prepend
                ? [listener, existing]
                : [existing, listener] // If we've already got an array, just append.
            } else if (prepend) {
              existing.unshift(listener)
            } else {
              existing.push(listener)
            } // Check for listener leak

            m = $getMaxListeners(target)

            if (m > 0 && existing.length > m && !existing.warned) {
              existing.warned = true // No error code for this since it is a Warning
              // eslint-disable-next-line no-restricted-syntax

              var w = new Error(
                'Possible EventEmitter memory leak detected. ' +
                  existing.length +
                  ' ' +
                  String(type) +
                  ' listeners ' +
                  'added. Use emitter.setMaxListeners() to ' +
                  'increase limit',
              )
              w.name = 'MaxListenersExceededWarning'
              w.emitter = target
              w.type = type
              w.count = existing.length
              ProcessEmitWarning(w)
            }
          }

          return target
        }

        EventEmitter.prototype.addListener = function addListener(
          type,
          listener,
        ) {
          return _addListener(this, type, listener, false)
        }

        EventEmitter.prototype.on = EventEmitter.prototype.addListener

        EventEmitter.prototype.prependListener = function prependListener(
          type,
          listener,
        ) {
          return _addListener(this, type, listener, true)
        }

        function onceWrapper() {
          var args = []

          for (var i = 0; i < arguments.length; i++)
            args.push(arguments[i])

          if (!this.fired) {
            this.target.removeListener(this.type, this.wrapFn)
            this.fired = true
            ReflectApply(this.listener, this.target, args)
          }
        }

        function _onceWrap(target, type, listener) {
          var state = {
            fired: false,
            wrapFn: undefined,
            target: target,
            type: type,
            listener: listener,
          }
          var wrapped = onceWrapper.bind(state)
          wrapped.listener = listener
          state.wrapFn = wrapped
          return wrapped
        }

        EventEmitter.prototype.once = function once(type, listener) {
          if (typeof listener !== 'function') {
            throw new TypeError(
              'The "listener" argument must be of type Function. Received type ' +
                typeof listener,
            )
          }

          this.on(type, _onceWrap(this, type, listener))
          return this
        }

        EventEmitter.prototype.prependOnceListener = function prependOnceListener(
          type,
          listener,
        ) {
          if (typeof listener !== 'function') {
            throw new TypeError(
              'The "listener" argument must be of type Function. Received type ' +
                typeof listener,
            )
          }

          this.prependListener(type, _onceWrap(this, type, listener))
          return this
        } // Emits a 'removeListener' event if and only if the listener was removed.

        EventEmitter.prototype.removeListener = function removeListener(
          type,
          listener,
        ) {
          var list, events, position, i, originalListener

          if (typeof listener !== 'function') {
            throw new TypeError(
              'The "listener" argument must be of type Function. Received type ' +
                typeof listener,
            )
          }

          events = this._events
          if (events === undefined) return this
          list = events[type]
          if (list === undefined) return this

          if (list === listener || list.listener === listener) {
            if (--this._eventsCount === 0)
              this._events = Object.create(null)
            else {
              delete events[type]
              if (events.removeListener)
                this.emit(
                  'removeListener',
                  type,
                  list.listener || listener,
                )
            }
          } else if (typeof list !== 'function') {
            position = -1

            for (i = list.length - 1; i >= 0; i--) {
              if (list[i] === listener || list[i].listener === listener) {
                originalListener = list[i].listener
                position = i
                break
              }
            }

            if (position < 0) return this
            if (position === 0) list.shift()
            else {
              spliceOne(list, position)
            }
            if (list.length === 1) events[type] = list[0]
            if (events.removeListener !== undefined)
              this.emit(
                'removeListener',
                type,
                originalListener || listener,
              )
          }

          return this
        }

        EventEmitter.prototype.off = EventEmitter.prototype.removeListener

        EventEmitter.prototype.removeAllListeners = function removeAllListeners(
          type,
        ) {
          var listeners, events, i
          events = this._events
          if (events === undefined) return this // not listening for removeListener, no need to emit

          if (events.removeListener === undefined) {
            if (arguments.length === 0) {
              this._events = Object.create(null)
              this._eventsCount = 0
            } else if (events[type] !== undefined) {
              if (--this._eventsCount === 0)
                this._events = Object.create(null)
              else delete events[type]
            }

            return this
          } // emit removeListener for all listeners on all events

          if (arguments.length === 0) {
            var keys = Object.keys(events)
            var key

            for (i = 0; i < keys.length; ++i) {
              key = keys[i]
              if (key === 'removeListener') continue
              this.removeAllListeners(key)
            }

            this.removeAllListeners('removeListener')
            this._events = Object.create(null)
            this._eventsCount = 0
            return this
          }

          listeners = events[type]

          if (typeof listeners === 'function') {
            this.removeListener(type, listeners)
          } else if (listeners !== undefined) {
            // LIFO order
            for (i = listeners.length - 1; i >= 0; i--) {
              this.removeListener(type, listeners[i])
            }
          }

          return this
        }

        function _listeners(target, type, unwrap) {
          var events = target._events
          if (events === undefined) return []
          var evlistener = events[type]
          if (evlistener === undefined) return []
          if (typeof evlistener === 'function')
            return unwrap
              ? [evlistener.listener || evlistener]
              : [evlistener]
          return unwrap
            ? unwrapListeners(evlistener)
            : arrayClone(evlistener, evlistener.length)
        }

        EventEmitter.prototype.listeners = function listeners(type) {
          return _listeners(this, type, true)
        }

        EventEmitter.prototype.rawListeners = function rawListeners(type) {
          return _listeners(this, type, false)
        }

        EventEmitter.listenerCount = function(emitter, type) {
          if (typeof emitter.listenerCount === 'function') {
            return emitter.listenerCount(type)
          } else {
            return listenerCount.call(emitter, type)
          }
        }

        EventEmitter.prototype.listenerCount = listenerCount

        function listenerCount(type) {
          var events = this._events

          if (events !== undefined) {
            var evlistener = events[type]

            if (typeof evlistener === 'function') {
              return 1
            } else if (evlistener !== undefined) {
              return evlistener.length
            }
          }

          return 0
        }

        EventEmitter.prototype.eventNames = function eventNames() {
          return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : []
        }

        function arrayClone(arr, n) {
          var copy = new Array(n)

          for (var i = 0; i < n; ++i) copy[i] = arr[i]

          return copy
        }

        function spliceOne(list, index) {
          for (; index + 1 < list.length; index++)
            list[index] = list[index + 1]

          list.pop()
        }

        function unwrapListeners(arr) {
          var ret = new Array(arr.length)

          for (var i = 0; i < ret.length; ++i) {
            ret[i] = arr[i].listener || arr[i]
          }

          return ret
        }
      },
      {},
    ],
    '../node_modules/inherits/inherits_browser.js': [
      function(require, module, exports) {
        if (typeof Object.create === 'function') {
          // implementation from standard node.js 'util' module
          module.exports = function inherits(ctor, superCtor) {
            ctor.super_ = superCtor
            ctor.prototype = Object.create(superCtor.prototype, {
              constructor: {
                value: ctor,
                enumerable: false,
                writable: true,
                configurable: true,
              },
            })
          }
        } else {
          // old school shim for old browsers
          module.exports = function inherits(ctor, superCtor) {
            ctor.super_ = superCtor
            var TempCtor = function() {}
            TempCtor.prototype = superCtor.prototype
            ctor.prototype = new TempCtor()
            ctor.prototype.constructor = ctor
          }
        }
      },
      {},
    ],
    '../node_modules/spark-md5/spark-md5.js': [
      function(require, module, exports) {
        var define
        ;(function(factory) {
          if (typeof exports === 'object') {
            // Node/CommonJS
            module.exports = factory()
          } else if (typeof define === 'function' && define.amd) {
            // AMD
            define(factory)
          } else {
            // Browser globals (with support for web workers)
            var glob

            try {
              glob = window
            } catch (e) {
              glob = self
            }

            glob.SparkMD5 = factory()
          }
        })(function(undefined) {
          'use strict'

          /*
           * Fastest md5 implementation around (JKM md5).
           * Credits: Joseph Myers
           *
           * @see http://www.myersdaily.org/joseph/javascript/md5-text.html
           * @see http://jsperf.com/md5-shootout/7
           */

          /* this function is much faster,
      so if possible we use it. Some IEs
      are the only ones I know of that
      need the idiotic second function,
      generated by an if clause.  */
          var add32 = function(a, b) {
              return (a + b) & 0xffffffff
            },
            hex_chr = [
              '0',
              '1',
              '2',
              '3',
              '4',
              '5',
              '6',
              '7',
              '8',
              '9',
              'a',
              'b',
              'c',
              'd',
              'e',
              'f',
            ]

          function cmn(q, a, b, x, s, t) {
            a = add32(add32(a, q), add32(x, t))
            return add32((a << s) | (a >>> (32 - s)), b)
          }

          function md5cycle(x, k) {
            var a = x[0],
              b = x[1],
              c = x[2],
              d = x[3]

            a += (((b & c) | (~b & d)) + k[0] - 680876936) | 0
            a = (((a << 7) | (a >>> 25)) + b) | 0
            d += (((a & b) | (~a & c)) + k[1] - 389564586) | 0
            d = (((d << 12) | (d >>> 20)) + a) | 0
            c += (((d & a) | (~d & b)) + k[2] + 606105819) | 0
            c = (((c << 17) | (c >>> 15)) + d) | 0
            b += (((c & d) | (~c & a)) + k[3] - 1044525330) | 0
            b = (((b << 22) | (b >>> 10)) + c) | 0
            a += (((b & c) | (~b & d)) + k[4] - 176418897) | 0
            a = (((a << 7) | (a >>> 25)) + b) | 0
            d += (((a & b) | (~a & c)) + k[5] + 1200080426) | 0
            d = (((d << 12) | (d >>> 20)) + a) | 0
            c += (((d & a) | (~d & b)) + k[6] - 1473231341) | 0
            c = (((c << 17) | (c >>> 15)) + d) | 0
            b += (((c & d) | (~c & a)) + k[7] - 45705983) | 0
            b = (((b << 22) | (b >>> 10)) + c) | 0
            a += (((b & c) | (~b & d)) + k[8] + 1770035416) | 0
            a = (((a << 7) | (a >>> 25)) + b) | 0
            d += (((a & b) | (~a & c)) + k[9] - 1958414417) | 0
            d = (((d << 12) | (d >>> 20)) + a) | 0
            c += (((d & a) | (~d & b)) + k[10] - 42063) | 0
            c = (((c << 17) | (c >>> 15)) + d) | 0
            b += (((c & d) | (~c & a)) + k[11] - 1990404162) | 0
            b = (((b << 22) | (b >>> 10)) + c) | 0
            a += (((b & c) | (~b & d)) + k[12] + 1804603682) | 0
            a = (((a << 7) | (a >>> 25)) + b) | 0
            d += (((a & b) | (~a & c)) + k[13] - 40341101) | 0
            d = (((d << 12) | (d >>> 20)) + a) | 0
            c += (((d & a) | (~d & b)) + k[14] - 1502002290) | 0
            c = (((c << 17) | (c >>> 15)) + d) | 0
            b += (((c & d) | (~c & a)) + k[15] + 1236535329) | 0
            b = (((b << 22) | (b >>> 10)) + c) | 0

            a += (((b & d) | (c & ~d)) + k[1] - 165796510) | 0
            a = (((a << 5) | (a >>> 27)) + b) | 0
            d += (((a & c) | (b & ~c)) + k[6] - 1069501632) | 0
            d = (((d << 9) | (d >>> 23)) + a) | 0
            c += (((d & b) | (a & ~b)) + k[11] + 643717713) | 0
            c = (((c << 14) | (c >>> 18)) + d) | 0
            b += (((c & a) | (d & ~a)) + k[0] - 373897302) | 0
            b = (((b << 20) | (b >>> 12)) + c) | 0
            a += (((b & d) | (c & ~d)) + k[5] - 701558691) | 0
            a = (((a << 5) | (a >>> 27)) + b) | 0
            d += (((a & c) | (b & ~c)) + k[10] + 38016083) | 0
            d = (((d << 9) | (d >>> 23)) + a) | 0
            c += (((d & b) | (a & ~b)) + k[15] - 660478335) | 0
            c = (((c << 14) | (c >>> 18)) + d) | 0
            b += (((c & a) | (d & ~a)) + k[4] - 405537848) | 0
            b = (((b << 20) | (b >>> 12)) + c) | 0
            a += (((b & d) | (c & ~d)) + k[9] + 568446438) | 0
            a = (((a << 5) | (a >>> 27)) + b) | 0
            d += (((a & c) | (b & ~c)) + k[14] - 1019803690) | 0
            d = (((d << 9) | (d >>> 23)) + a) | 0
            c += (((d & b) | (a & ~b)) + k[3] - 187363961) | 0
            c = (((c << 14) | (c >>> 18)) + d) | 0
            b += (((c & a) | (d & ~a)) + k[8] + 1163531501) | 0
            b = (((b << 20) | (b >>> 12)) + c) | 0
            a += (((b & d) | (c & ~d)) + k[13] - 1444681467) | 0
            a = (((a << 5) | (a >>> 27)) + b) | 0
            d += (((a & c) | (b & ~c)) + k[2] - 51403784) | 0
            d = (((d << 9) | (d >>> 23)) + a) | 0
            c += (((d & b) | (a & ~b)) + k[7] + 1735328473) | 0
            c = (((c << 14) | (c >>> 18)) + d) | 0
            b += (((c & a) | (d & ~a)) + k[12] - 1926607734) | 0
            b = (((b << 20) | (b >>> 12)) + c) | 0

            a += ((b ^ c ^ d) + k[5] - 378558) | 0
            a = (((a << 4) | (a >>> 28)) + b) | 0
            d += ((a ^ b ^ c) + k[8] - 2022574463) | 0
            d = (((d << 11) | (d >>> 21)) + a) | 0
            c += ((d ^ a ^ b) + k[11] + 1839030562) | 0
            c = (((c << 16) | (c >>> 16)) + d) | 0
            b += ((c ^ d ^ a) + k[14] - 35309556) | 0
            b = (((b << 23) | (b >>> 9)) + c) | 0
            a += ((b ^ c ^ d) + k[1] - 1530992060) | 0
            a = (((a << 4) | (a >>> 28)) + b) | 0
            d += ((a ^ b ^ c) + k[4] + 1272893353) | 0
            d = (((d << 11) | (d >>> 21)) + a) | 0
            c += ((d ^ a ^ b) + k[7] - 155497632) | 0
            c = (((c << 16) | (c >>> 16)) + d) | 0
            b += ((c ^ d ^ a) + k[10] - 1094730640) | 0
            b = (((b << 23) | (b >>> 9)) + c) | 0
            a += ((b ^ c ^ d) + k[13] + 681279174) | 0
            a = (((a << 4) | (a >>> 28)) + b) | 0
            d += ((a ^ b ^ c) + k[0] - 358537222) | 0
            d = (((d << 11) | (d >>> 21)) + a) | 0
            c += ((d ^ a ^ b) + k[3] - 722521979) | 0
            c = (((c << 16) | (c >>> 16)) + d) | 0
            b += ((c ^ d ^ a) + k[6] + 76029189) | 0
            b = (((b << 23) | (b >>> 9)) + c) | 0
            a += ((b ^ c ^ d) + k[9] - 640364487) | 0
            a = (((a << 4) | (a >>> 28)) + b) | 0
            d += ((a ^ b ^ c) + k[12] - 421815835) | 0
            d = (((d << 11) | (d >>> 21)) + a) | 0
            c += ((d ^ a ^ b) + k[15] + 530742520) | 0
            c = (((c << 16) | (c >>> 16)) + d) | 0
            b += ((c ^ d ^ a) + k[2] - 995338651) | 0
            b = (((b << 23) | (b >>> 9)) + c) | 0

            a += ((c ^ (b | ~d)) + k[0] - 198630844) | 0
            a = (((a << 6) | (a >>> 26)) + b) | 0
            d += ((b ^ (a | ~c)) + k[7] + 1126891415) | 0
            d = (((d << 10) | (d >>> 22)) + a) | 0
            c += ((a ^ (d | ~b)) + k[14] - 1416354905) | 0
            c = (((c << 15) | (c >>> 17)) + d) | 0
            b += ((d ^ (c | ~a)) + k[5] - 57434055) | 0
            b = (((b << 21) | (b >>> 11)) + c) | 0
            a += ((c ^ (b | ~d)) + k[12] + 1700485571) | 0
            a = (((a << 6) | (a >>> 26)) + b) | 0
            d += ((b ^ (a | ~c)) + k[3] - 1894986606) | 0
            d = (((d << 10) | (d >>> 22)) + a) | 0
            c += ((a ^ (d | ~b)) + k[10] - 1051523) | 0
            c = (((c << 15) | (c >>> 17)) + d) | 0
            b += ((d ^ (c | ~a)) + k[1] - 2054922799) | 0
            b = (((b << 21) | (b >>> 11)) + c) | 0
            a += ((c ^ (b | ~d)) + k[8] + 1873313359) | 0
            a = (((a << 6) | (a >>> 26)) + b) | 0
            d += ((b ^ (a | ~c)) + k[15] - 30611744) | 0
            d = (((d << 10) | (d >>> 22)) + a) | 0
            c += ((a ^ (d | ~b)) + k[6] - 1560198380) | 0
            c = (((c << 15) | (c >>> 17)) + d) | 0
            b += ((d ^ (c | ~a)) + k[13] + 1309151649) | 0
            b = (((b << 21) | (b >>> 11)) + c) | 0
            a += ((c ^ (b | ~d)) + k[4] - 145523070) | 0
            a = (((a << 6) | (a >>> 26)) + b) | 0
            d += ((b ^ (a | ~c)) + k[11] - 1120210379) | 0
            d = (((d << 10) | (d >>> 22)) + a) | 0
            c += ((a ^ (d | ~b)) + k[2] + 718787259) | 0
            c = (((c << 15) | (c >>> 17)) + d) | 0
            b += ((d ^ (c | ~a)) + k[9] - 343485551) | 0
            b = (((b << 21) | (b >>> 11)) + c) | 0

            x[0] = (a + x[0]) | 0
            x[1] = (b + x[1]) | 0
            x[2] = (c + x[2]) | 0
            x[3] = (d + x[3]) | 0
          }

          function md5blk(s) {
            var md5blks = [],
              i /* Andy King said do it this way. */

            for (i = 0; i < 64; i += 4) {
              md5blks[i >> 2] =
                s.charCodeAt(i) +
                (s.charCodeAt(i + 1) << 8) +
                (s.charCodeAt(i + 2) << 16) +
                (s.charCodeAt(i + 3) << 24)
            }
            return md5blks
          }

          function md5blk_array(a) {
            var md5blks = [],
              i /* Andy King said do it this way. */

            for (i = 0; i < 64; i += 4) {
              md5blks[i >> 2] =
                a[i] +
                (a[i + 1] << 8) +
                (a[i + 2] << 16) +
                (a[i + 3] << 24)
            }
            return md5blks
          }

          function md51(s) {
            var n = s.length,
              state = [1732584193, -271733879, -1732584194, 271733878],
              i,
              length,
              tail,
              tmp,
              lo,
              hi

            for (i = 64; i <= n; i += 64) {
              md5cycle(state, md5blk(s.substring(i - 64, i)))
            }
            s = s.substring(i - 64)
            length = s.length
            tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
            for (i = 0; i < length; i += 1) {
              tail[i >> 2] |= s.charCodeAt(i) << (i % 4 << 3)
            }
            tail[i >> 2] |= 0x80 << (i % 4 << 3)
            if (i > 55) {
              md5cycle(state, tail)
              for (i = 0; i < 16; i += 1) {
                tail[i] = 0
              }
            }

            // Beware that the final length might not fit in 32 bits so we take care of that
            tmp = n * 8
            tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/)
            lo = parseInt(tmp[2], 16)
            hi = parseInt(tmp[1], 16) || 0

            tail[14] = lo
            tail[15] = hi

            md5cycle(state, tail)
            return state
          }

          function md51_array(a) {
            var n = a.length,
              state = [1732584193, -271733879, -1732584194, 271733878],
              i,
              length,
              tail,
              tmp,
              lo,
              hi

            for (i = 64; i <= n; i += 64) {
              md5cycle(state, md5blk_array(a.subarray(i - 64, i)))
            }

            // Not sure if it is a bug, however IE10 will always produce a sub array of length 1
            // containing the last element of the parent array if the sub array specified starts
            // beyond the length of the parent array - weird.
            // https://connect.microsoft.com/IE/feedback/details/771452/typed-array-subarray-issue
            a = i - 64 < n ? a.subarray(i - 64) : new Uint8Array(0)

            length = a.length
            tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
            for (i = 0; i < length; i += 1) {
              tail[i >> 2] |= a[i] << (i % 4 << 3)
            }

            tail[i >> 2] |= 0x80 << (i % 4 << 3)
            if (i > 55) {
              md5cycle(state, tail)
              for (i = 0; i < 16; i += 1) {
                tail[i] = 0
              }
            }

            // Beware that the final length might not fit in 32 bits so we take care of that
            tmp = n * 8
            tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/)
            lo = parseInt(tmp[2], 16)
            hi = parseInt(tmp[1], 16) || 0

            tail[14] = lo
            tail[15] = hi

            md5cycle(state, tail)

            return state
          }

          function rhex(n) {
            var s = '',
              j
            for (j = 0; j < 4; j += 1) {
              s +=
                hex_chr[(n >> (j * 8 + 4)) & 0x0f] +
                hex_chr[(n >> (j * 8)) & 0x0f]
            }
            return s
          }

          function hex(x) {
            var i
            for (i = 0; i < x.length; i += 1) {
              x[i] = rhex(x[i])
            }
            return x.join('')
          }

          // In some cases the fast add32 function cannot be used..
          if (hex(md51('hello')) !== '5d41402abc4b2a76b9719d911017c592') {
            add32 = function(x, y) {
              var lsw = (x & 0xffff) + (y & 0xffff),
                msw = (x >> 16) + (y >> 16) + (lsw >> 16)
              return (msw << 16) | (lsw & 0xffff)
            }
          }

          // ---------------------------------------------------

          /**
           * ArrayBuffer slice polyfill.
           *
           * @see https://github.com/ttaubert/node-arraybuffer-slice
           */

          if (
            typeof ArrayBuffer !== 'undefined' &&
            !ArrayBuffer.prototype.slice
          ) {
            ;(function() {
              function clamp(val, length) {
                val = val | 0 || 0

                if (val < 0) {
                  return Math.max(val + length, 0)
                }

                return Math.min(val, length)
              }

              ArrayBuffer.prototype.slice = function(from, to) {
                var length = this.byteLength,
                  begin = clamp(from, length),
                  end = length,
                  num,
                  target,
                  targetArray,
                  sourceArray

                if (to !== undefined) {
                  end = clamp(to, length)
                }

                if (begin > end) {
                  return new ArrayBuffer(0)
                }

                num = end - begin
                target = new ArrayBuffer(num)
                targetArray = new Uint8Array(target)

                sourceArray = new Uint8Array(this, begin, num)
                targetArray.set(sourceArray)

                return target
              }
            })()
          }

          // ---------------------------------------------------

          /**
           * Helpers.
           */

          function toUtf8(str) {
            if (/[\u0080-\uFFFF]/.test(str)) {
              str = unescape(encodeURIComponent(str))
            }

            return str
          }

          function utf8Str2ArrayBuffer(str, returnUInt8Array) {
            var length = str.length,
              buff = new ArrayBuffer(length),
              arr = new Uint8Array(buff),
              i

            for (i = 0; i < length; i += 1) {
              arr[i] = str.charCodeAt(i)
            }

            return returnUInt8Array ? arr : buff
          }

          function arrayBuffer2Utf8Str(buff) {
            return String.fromCharCode.apply(null, new Uint8Array(buff))
          }

          function concatenateArrayBuffers(
            first,
            second,
            returnUInt8Array,
          ) {
            var result = new Uint8Array(
              first.byteLength + second.byteLength,
            )

            result.set(new Uint8Array(first))
            result.set(new Uint8Array(second), first.byteLength)

            return returnUInt8Array ? result : result.buffer
          }

          function hexToBinaryString(hex) {
            var bytes = [],
              length = hex.length,
              x

            for (x = 0; x < length - 1; x += 2) {
              bytes.push(parseInt(hex.substr(x, 2), 16))
            }

            return String.fromCharCode.apply(String, bytes)
          }

          // ---------------------------------------------------

          /**
           * SparkMD5 OOP implementation.
           *
           * Use this class to perform an incremental md5, otherwise use the
           * static methods instead.
           */

          function SparkMD5() {
            // call reset to init the instance
            this.reset()
          }

          /**
           * Appends a string.
           * A conversion will be applied if an utf8 string is detected.
           *
           * @param {String} str The string to be appended
           *
           * @return {SparkMD5} The instance itself
           */
          SparkMD5.prototype.append = function(str) {
            // Converts the string to utf8 bytes if necessary
            // Then append as binary
            this.appendBinary(toUtf8(str))

            return this
          }

          /**
           * Appends a binary string.
           *
           * @param {String} contents The binary string to be appended
           *
           * @return {SparkMD5} The instance itself
           */
          SparkMD5.prototype.appendBinary = function(contents) {
            this._buff += contents
            this._length += contents.length

            var length = this._buff.length,
              i

            for (i = 64; i <= length; i += 64) {
              md5cycle(this._hash, md5blk(this._buff.substring(i - 64, i)))
            }

            this._buff = this._buff.substring(i - 64)

            return this
          }

          /**
           * Finishes the incremental computation, reseting the internal state and
           * returning the result.
           *
           * @param {Boolean} raw True to get the raw string, false to get the hex string
           *
           * @return {String} The result
           */
          SparkMD5.prototype.end = function(raw) {
            var buff = this._buff,
              length = buff.length,
              i,
              tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              ret

            for (i = 0; i < length; i += 1) {
              tail[i >> 2] |= buff.charCodeAt(i) << (i % 4 << 3)
            }

            this._finish(tail, length)
            ret = hex(this._hash)

            if (raw) {
              ret = hexToBinaryString(ret)
            }

            this.reset()

            return ret
          }

          /**
           * Resets the internal state of the computation.
           *
           * @return {SparkMD5} The instance itself
           */
          SparkMD5.prototype.reset = function() {
            this._buff = ''
            this._length = 0
            this._hash = [1732584193, -271733879, -1732584194, 271733878]

            return this
          }

          /**
           * Gets the internal state of the computation.
           *
           * @return {Object} The state
           */
          SparkMD5.prototype.getState = function() {
            return {
              buff: this._buff,
              length: this._length,
              hash: this._hash,
            }
          }

          /**
           * Gets the internal state of the computation.
           *
           * @param {Object} state The state
           *
           * @return {SparkMD5} The instance itself
           */
          SparkMD5.prototype.setState = function(state) {
            this._buff = state.buff
            this._length = state.length
            this._hash = state.hash

            return this
          }

          /**
           * Releases memory used by the incremental buffer and other additional
           * resources. If you plan to use the instance again, use reset instead.
           */
          SparkMD5.prototype.destroy = function() {
            delete this._hash
            delete this._buff
            delete this._length
          }

          /**
           * Finish the final calculation based on the tail.
           *
           * @param {Array}  tail   The tail (will be modified)
           * @param {Number} length The length of the remaining buffer
           */
          SparkMD5.prototype._finish = function(tail, length) {
            var i = length,
              tmp,
              lo,
              hi

            tail[i >> 2] |= 0x80 << (i % 4 << 3)
            if (i > 55) {
              md5cycle(this._hash, tail)
              for (i = 0; i < 16; i += 1) {
                tail[i] = 0
              }
            }

            // Do the final computation based on the tail and length
            // Beware that the final length may not fit in 32 bits so we take care of that
            tmp = this._length * 8
            tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/)
            lo = parseInt(tmp[2], 16)
            hi = parseInt(tmp[1], 16) || 0

            tail[14] = lo
            tail[15] = hi
            md5cycle(this._hash, tail)
          }

          /**
           * Performs the md5 hash on a string.
           * A conversion will be applied if utf8 string is detected.
           *
           * @param {String}  str The string
           * @param {Boolean} raw True to get the raw string, false to get the hex string
           *
           * @return {String} The result
           */
          SparkMD5.hash = function(str, raw) {
            // Converts the string to utf8 bytes if necessary
            // Then compute it using the binary function
            return SparkMD5.hashBinary(toUtf8(str), raw)
          }

          /**
           * Performs the md5 hash on a binary string.
           *
           * @param {String}  content The binary string
           * @param {Boolean} raw     True to get the raw string, false to get the hex string
           *
           * @return {String} The result
           */
          SparkMD5.hashBinary = function(content, raw) {
            var hash = md51(content),
              ret = hex(hash)

            return raw ? hexToBinaryString(ret) : ret
          }

          // ---------------------------------------------------

          /**
           * SparkMD5 OOP implementation for array buffers.
           *
           * Use this class to perform an incremental md5 ONLY for array buffers.
           */
          SparkMD5.ArrayBuffer = function() {
            // call reset to init the instance
            this.reset()
          }

          /**
           * Appends an array buffer.
           *
           * @param {ArrayBuffer} arr The array to be appended
           *
           * @return {SparkMD5.ArrayBuffer} The instance itself
           */
          SparkMD5.ArrayBuffer.prototype.append = function(arr) {
            var buff = concatenateArrayBuffers(
                this._buff.buffer,
                arr,
                true,
              ),
              length = buff.length,
              i

            this._length += arr.byteLength

            for (i = 64; i <= length; i += 64) {
              md5cycle(this._hash, md5blk_array(buff.subarray(i - 64, i)))
            }

            this._buff =
              i - 64 < length
                ? new Uint8Array(buff.buffer.slice(i - 64))
                : new Uint8Array(0)

            return this
          }

          /**
           * Finishes the incremental computation, reseting the internal state and
           * returning the result.
           *
           * @param {Boolean} raw True to get the raw string, false to get the hex string
           *
           * @return {String} The result
           */
          SparkMD5.ArrayBuffer.prototype.end = function(raw) {
            var buff = this._buff,
              length = buff.length,
              tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              i,
              ret

            for (i = 0; i < length; i += 1) {
              tail[i >> 2] |= buff[i] << (i % 4 << 3)
            }

            this._finish(tail, length)
            ret = hex(this._hash)

            if (raw) {
              ret = hexToBinaryString(ret)
            }

            this.reset()

            return ret
          }

          /**
           * Resets the internal state of the computation.
           *
           * @return {SparkMD5.ArrayBuffer} The instance itself
           */
          SparkMD5.ArrayBuffer.prototype.reset = function() {
            this._buff = new Uint8Array(0)
            this._length = 0
            this._hash = [1732584193, -271733879, -1732584194, 271733878]

            return this
          }

          /**
           * Gets the internal state of the computation.
           *
           * @return {Object} The state
           */
          SparkMD5.ArrayBuffer.prototype.getState = function() {
            var state = SparkMD5.prototype.getState.call(this)

            // Convert buffer to a string
            state.buff = arrayBuffer2Utf8Str(state.buff)

            return state
          }

          /**
           * Gets the internal state of the computation.
           *
           * @param {Object} state The state
           *
           * @return {SparkMD5.ArrayBuffer} The instance itself
           */
          SparkMD5.ArrayBuffer.prototype.setState = function(state) {
            // Convert string to buffer
            state.buff = utf8Str2ArrayBuffer(state.buff, true)

            return SparkMD5.prototype.setState.call(this, state)
          }

          SparkMD5.ArrayBuffer.prototype.destroy =
            SparkMD5.prototype.destroy

          SparkMD5.ArrayBuffer.prototype._finish =
            SparkMD5.prototype._finish

          /**
           * Performs the md5 hash on an array buffer.
           *
           * @param {ArrayBuffer} arr The array buffer
           * @param {Boolean}     raw True to get the raw string, false to get the hex one
           *
           * @return {String} The result
           */
          SparkMD5.ArrayBuffer.hash = function(arr, raw) {
            var hash = md51_array(new Uint8Array(arr)),
              ret = hex(hash)

            return raw ? hexToBinaryString(ret) : ret
          }

          return SparkMD5
        })
      },
      {},
    ],
    '../node_modules/uuid/lib/rng-browser.js': [
      function(require, module, exports) {
        // Unique ID creation requires a high quality random # generator.  In the
        // browser this is a little complicated due to unknown quality of Math.random()
        // and inconsistent support for the `crypto` API.  We do the best we can via
        // feature-detection

        // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation.
        var getRandomValues =
          (typeof crypto != 'undefined' &&
            crypto.getRandomValues.bind(crypto)) ||
          (typeof msCrypto != 'undefined' &&
            msCrypto.getRandomValues.bind(msCrypto))
        if (getRandomValues) {
          // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto
          var rnds8 = new Uint8Array(16) // eslint-disable-line no-undef

          module.exports = function whatwgRNG() {
            getRandomValues(rnds8)
            return rnds8
          }
        } else {
          // Math.random()-based (RNG)
          //
          // If all else fails, use Math.random().  It's fast, but is of unspecified
          // quality.
          var rnds = new Array(16)

          module.exports = function mathRNG() {
            for (var i = 0, r; i < 16; i++) {
              if ((i & 0x03) === 0) r = Math.random() * 0x100000000
              rnds[i] = (r >>> ((i & 0x03) << 3)) & 0xff
            }

            return rnds
          }
        }
      },
      {},
    ],
    '../node_modules/uuid/lib/bytesToUuid.js': [
      function(require, module, exports) {
        /**
         * Convert array of 16 byte values to UUID string format of the form:
         * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
         */
        var byteToHex = []
        for (var i = 0; i < 256; ++i) {
          byteToHex[i] = (i + 0x100).toString(16).substr(1)
        }

        function bytesToUuid(buf, offset) {
          var i = offset || 0
          var bth = byteToHex
          return (
            bth[buf[i++]] +
            bth[buf[i++]] +
            bth[buf[i++]] +
            bth[buf[i++]] +
            '-' +
            bth[buf[i++]] +
            bth[buf[i++]] +
            '-' +
            bth[buf[i++]] +
            bth[buf[i++]] +
            '-' +
            bth[buf[i++]] +
            bth[buf[i++]] +
            '-' +
            bth[buf[i++]] +
            bth[buf[i++]] +
            bth[buf[i++]] +
            bth[buf[i++]] +
            bth[buf[i++]] +
            bth[buf[i++]]
          )
        }

        module.exports = bytesToUuid
      },
      {},
    ],
    '../node_modules/uuid/v1.js': [
      function(require, module, exports) {
        var rng = require('./lib/rng')
        var bytesToUuid = require('./lib/bytesToUuid')

        // **`v1()` - Generate time-based UUID**
        //
        // Inspired by https://github.com/LiosK/UUID.js
        // and http://docs.python.org/library/uuid.html

        var _nodeId
        var _clockseq

        // Previous uuid creation time
        var _lastMSecs = 0
        var _lastNSecs = 0

        // See https://github.com/broofa/node-uuid for API details
        function v1(options, buf, offset) {
          var i = (buf && offset) || 0
          var b = buf || []

          options = options || {}
          var node = options.node || _nodeId
          var clockseq =
            options.clockseq !== undefined ? options.clockseq : _clockseq

          // node and clockseq need to be initialized to random values if they're not
          // specified.  We do this lazily to minimize issues related to insufficient
          // system entropy.  See #189
          if (node == null || clockseq == null) {
            var seedBytes = rng()
            if (node == null) {
              // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
              node = _nodeId = [
                seedBytes[0] | 0x01,
                seedBytes[1],
                seedBytes[2],
                seedBytes[3],
                seedBytes[4],
                seedBytes[5],
              ]
            }
            if (clockseq == null) {
              // Per 4.2.2, randomize (14 bit) clockseq
              clockseq = _clockseq =
                ((seedBytes[6] << 8) | seedBytes[7]) & 0x3fff
            }
          }

          // UUID timestamps are 100 nano-second units since the Gregorian epoch,
          // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
          // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
          // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.
          var msecs =
            options.msecs !== undefined
              ? options.msecs
              : new Date().getTime()

          // Per 4.2.1.2, use count of uuid's generated during the current clock
          // cycle to simulate higher resolution clock
          var nsecs =
            options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1

          // Time since last uuid creation (in msecs)
          var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000

          // Per 4.2.1.2, Bump clockseq on clock regression
          if (dt < 0 && options.clockseq === undefined) {
            clockseq = (clockseq + 1) & 0x3fff
          }

          // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
          // time interval
          if (
            (dt < 0 || msecs > _lastMSecs) &&
            options.nsecs === undefined
          ) {
            nsecs = 0
          }

          // Per 4.2.1.2 Throw error if too many uuids are requested
          if (nsecs >= 10000) {
            throw new Error(
              "uuid.v1(): Can't create more than 10M uuids/sec",
            )
          }

          _lastMSecs = msecs
          _lastNSecs = nsecs
          _clockseq = clockseq

          // Per 4.1.4 - Convert from unix epoch to Gregorian epoch
          msecs += 12219292800000

          // `time_low`
          var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000
          b[i++] = (tl >>> 24) & 0xff
          b[i++] = (tl >>> 16) & 0xff
          b[i++] = (tl >>> 8) & 0xff
          b[i++] = tl & 0xff

          // `time_mid`
          var tmh = ((msecs / 0x100000000) * 10000) & 0xfffffff
          b[i++] = (tmh >>> 8) & 0xff
          b[i++] = tmh & 0xff

          // `time_high_and_version`
          b[i++] = ((tmh >>> 24) & 0xf) | 0x10 // include version
          b[i++] = (tmh >>> 16) & 0xff

          // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)
          b[i++] = (clockseq >>> 8) | 0x80

          // `clock_seq_low`
          b[i++] = clockseq & 0xff

          // `node`
          for (var n = 0; n < 6; ++n) {
            b[i + n] = node[n]
          }

          return buf ? buf : bytesToUuid(b)
        }

        module.exports = v1
      },
      {
        './lib/rng': '../node_modules/uuid/lib/rng-browser.js',
        './lib/bytesToUuid': '../node_modules/uuid/lib/bytesToUuid.js',
      },
    ],
    '../node_modules/uuid/v4.js': [
      function(require, module, exports) {
        var rng = require('./lib/rng')
        var bytesToUuid = require('./lib/bytesToUuid')

        function v4(options, buf, offset) {
          var i = (buf && offset) || 0

          if (typeof options == 'string') {
            buf = options === 'binary' ? new Array(16) : null
            options = null
          }
          options = options || {}

          var rnds = options.random || (options.rng || rng)()

          // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
          rnds[6] = (rnds[6] & 0x0f) | 0x40
          rnds[8] = (rnds[8] & 0x3f) | 0x80

          // Copy bytes to buffer, if provided
          if (buf) {
            for (var ii = 0; ii < 16; ++ii) {
              buf[i + ii] = rnds[ii]
            }
          }

          return buf || bytesToUuid(rnds)
        }

        module.exports = v4
      },
      {
        './lib/rng': '../node_modules/uuid/lib/rng-browser.js',
        './lib/bytesToUuid': '../node_modules/uuid/lib/bytesToUuid.js',
      },
    ],
    '../node_modules/uuid/index.js': [
      function(require, module, exports) {
        var v1 = require('./v1')
        var v4 = require('./v4')

        var uuid = v4
        uuid.v1 = v1
        uuid.v4 = v4

        module.exports = uuid
      },
      {
        './v1': '../node_modules/uuid/v1.js',
        './v4': '../node_modules/uuid/v4.js',
      },
    ],
    '../node_modules/vuvuzela/index.js': [
      function(require, module, exports) {
        'use strict'

        /**
         * Stringify/parse functions that don't operate
         * recursively, so they avoid call stack exceeded
         * errors.
         */
        exports.stringify = function stringify(input) {
          var queue = []
          queue.push({ obj: input })

          var res = ''
          var next,
            obj,
            prefix,
            val,
            i,
            arrayPrefix,
            keys,
            k,
            key,
            value,
            objPrefix
          while ((next = queue.pop())) {
            obj = next.obj
            prefix = next.prefix || ''
            val = next.val || ''
            res += prefix
            if (val) {
              res += val
            } else if (typeof obj !== 'object') {
              res +=
                typeof obj === 'undefined' ? null : JSON.stringify(obj)
            } else if (obj === null) {
              res += 'null'
            } else if (Array.isArray(obj)) {
              queue.push({ val: ']' })
              for (i = obj.length - 1; i >= 0; i--) {
                arrayPrefix = i === 0 ? '' : ','
                queue.push({ obj: obj[i], prefix: arrayPrefix })
              }
              queue.push({ val: '[' })
            } else {
              // object
              keys = []
              for (k in obj) {
                if (obj.hasOwnProperty(k)) {
                  keys.push(k)
                }
              }
              queue.push({ val: '}' })
              for (i = keys.length - 1; i >= 0; i--) {
                key = keys[i]
                value = obj[key]
                objPrefix = i > 0 ? ',' : ''
                objPrefix += JSON.stringify(key) + ':'
                queue.push({ obj: value, prefix: objPrefix })
              }
              queue.push({ val: '{' })
            }
          }
          return res
        }

        // Convenience function for the parse function.
        // This pop function is basically copied from
        // pouchCollate.parseIndexableString
        function pop(obj, stack, metaStack) {
          var lastMetaElement = metaStack[metaStack.length - 1]
          if (obj === lastMetaElement.element) {
            // popping a meta-element, e.g. an object whose value is another object
            metaStack.pop()
            lastMetaElement = metaStack[metaStack.length - 1]
          }
          var element = lastMetaElement.element
          var lastElementIndex = lastMetaElement.index
          if (Array.isArray(element)) {
            element.push(obj)
          } else if (lastElementIndex === stack.length - 2) {
            // obj with key+value
            var key = stack.pop()
            element[key] = obj
          } else {
            stack.push(obj) // obj with key only
          }
        }

        exports.parse = function(str) {
          var stack = []
          var metaStack = [] // stack for arrays and objects
          var i = 0
          var collationIndex, parsedNum, numChar
          var parsedString, lastCh, numConsecutiveSlashes, ch
          var arrayElement, objElement
          while (true) {
            collationIndex = str[i++]
            if (
              collationIndex === '}' ||
              collationIndex === ']' ||
              typeof collationIndex === 'undefined'
            ) {
              if (stack.length === 1) {
                return stack.pop()
              } else {
                pop(stack.pop(), stack, metaStack)
                continue
              }
            }
            switch (collationIndex) {
              case ' ':
              case '\t':
              case '\n':
              case ':':
              case ',':
                break
              case 'n':
                i += 3 // 'ull'
                pop(null, stack, metaStack)
                break
              case 't':
                i += 3 // 'rue'
                pop(true, stack, metaStack)
                break
              case 'f':
                i += 4 // 'alse'
                pop(false, stack, metaStack)
                break
              case '0':
              case '1':
              case '2':
              case '3':
              case '4':
              case '5':
              case '6':
              case '7':
              case '8':
              case '9':
              case '-':
                parsedNum = ''
                i--
                while (true) {
                  numChar = str[i++]
                  if (/[\d\.\-e\+]/.test(numChar)) {
                    parsedNum += numChar
                  } else {
                    i--
                    break
                  }
                }
                pop(parseFloat(parsedNum), stack, metaStack)
                break
              case '"':
                parsedString = ''
                lastCh = void 0
                numConsecutiveSlashes = 0
                while (true) {
                  ch = str[i++]
                  if (
                    ch !== '"' ||
                    (lastCh === '\\' && numConsecutiveSlashes % 2 === 1)
                  ) {
                    parsedString += ch
                    lastCh = ch
                    if (lastCh === '\\') {
                      numConsecutiveSlashes++
                    } else {
                      numConsecutiveSlashes = 0
                    }
                  } else {
                    break
                  }
                }
                pop(JSON.parse('"' + parsedString + '"'), stack, metaStack)
                break
              case '[':
                arrayElement = { element: [], index: stack.length }
                stack.push(arrayElement.element)
                metaStack.push(arrayElement)
                break
              case '{':
                objElement = { element: {}, index: stack.length }
                stack.push(objElement.element)
                metaStack.push(objElement)
                break
              default:
                throw new Error(
                  'unexpectedly reached end of input: ' + collationIndex,
                )
            }
          }
        }
      },
      {},
    ],
    '../../../.config/yarn/global/node_modules/process/browser.js': [
      function(require, module, exports) {
        // shim for using process in browser
        var process = (module.exports = {}) // cached from whatever global is present so that test runners that stub it
        // don't break things.  But we need to wrap it in a try catch in case it is
        // wrapped in strict mode code which doesn't define any globals.  It's inside a
        // function because try/catches deoptimize in certain engines.

        var cachedSetTimeout
        var cachedClearTimeout

        function defaultSetTimout() {
          throw new Error('setTimeout has not been defined')
        }

        function defaultClearTimeout() {
          throw new Error('clearTimeout has not been defined')
        }

        ;(function() {
          try {
            if (typeof setTimeout === 'function') {
              cachedSetTimeout = setTimeout
            } else {
              cachedSetTimeout = defaultSetTimout
            }
          } catch (e) {
            cachedSetTimeout = defaultSetTimout
          }

          try {
            if (typeof clearTimeout === 'function') {
              cachedClearTimeout = clearTimeout
            } else {
              cachedClearTimeout = defaultClearTimeout
            }
          } catch (e) {
            cachedClearTimeout = defaultClearTimeout
          }
        })()

        function runTimeout(fun) {
          if (cachedSetTimeout === setTimeout) {
            //normal enviroments in sane situations
            return setTimeout(fun, 0)
          } // if setTimeout wasn't available but was latter defined

          if (
            (cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) &&
            setTimeout
          ) {
            cachedSetTimeout = setTimeout
            return setTimeout(fun, 0)
          }

          try {
            // when when somebody has screwed with setTimeout but no I.E. maddness
            return cachedSetTimeout(fun, 0)
          } catch (e) {
            try {
              // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
              return cachedSetTimeout.call(null, fun, 0)
            } catch (e) {
              // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
              return cachedSetTimeout.call(this, fun, 0)
            }
          }
        }

        function runClearTimeout(marker) {
          if (cachedClearTimeout === clearTimeout) {
            //normal enviroments in sane situations
            return clearTimeout(marker)
          } // if clearTimeout wasn't available but was latter defined

          if (
            (cachedClearTimeout === defaultClearTimeout ||
              !cachedClearTimeout) &&
            clearTimeout
          ) {
            cachedClearTimeout = clearTimeout
            return clearTimeout(marker)
          }

          try {
            // when when somebody has screwed with setTimeout but no I.E. maddness
            return cachedClearTimeout(marker)
          } catch (e) {
            try {
              // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
              return cachedClearTimeout.call(null, marker)
            } catch (e) {
              // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
              // Some versions of I.E. have different rules for clearTimeout vs setTimeout
              return cachedClearTimeout.call(this, marker)
            }
          }
        }

        var queue = []
        var draining = false
        var currentQueue
        var queueIndex = -1

        function cleanUpNextTick() {
          if (!draining || !currentQueue) {
            return
          }

          draining = false

          if (currentQueue.length) {
            queue = currentQueue.concat(queue)
          } else {
            queueIndex = -1
          }

          if (queue.length) {
            drainQueue()
          }
        }

        function drainQueue() {
          if (draining) {
            return
          }

          var timeout = runTimeout(cleanUpNextTick)
          draining = true
          var len = queue.length

          while (len) {
            currentQueue = queue
            queue = []

            while (++queueIndex < len) {
              if (currentQueue) {
                currentQueue[queueIndex].run()
              }
            }

            queueIndex = -1
            len = queue.length
          }

          currentQueue = null
          draining = false
          runClearTimeout(timeout)
        }

        process.nextTick = function(fun) {
          var args = new Array(arguments.length - 1)

          if (arguments.length > 1) {
            for (var i = 1; i < arguments.length; i++) {
              args[i - 1] = arguments[i]
            }
          }

          queue.push(new Item(fun, args))

          if (queue.length === 1 && !draining) {
            runTimeout(drainQueue)
          }
        } // v8 likes predictible objects

        function Item(fun, array) {
          this.fun = fun
          this.array = array
        }

        Item.prototype.run = function() {
          this.fun.apply(null, this.array)
        }

        process.title = 'browser'
        process.browser = true
        process.env = {}
        process.argv = []
        process.version = '' // empty string to avoid regexp issues

        process.versions = {}

        function noop() {}

        process.on = noop
        process.addListener = noop
        process.once = noop
        process.off = noop
        process.removeListener = noop
        process.removeAllListeners = noop
        process.emit = noop
        process.prependListener = noop
        process.prependOnceListener = noop

        process.listeners = function(name) {
          return []
        }

        process.binding = function(name) {
          throw new Error('process.binding is not supported')
        }

        process.cwd = function() {
          return '/'
        }

        process.chdir = function(dir) {
          throw new Error('process.chdir is not supported')
        }

        process.umask = function() {
          return 0
        }
      },
      {},
    ],
    '../node_modules/pouchdb-browser/lib/index.es.js': [
      function(require, module, exports) {
        var global = arguments[3]
        var process = require('process')
        ;('use strict')

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.default = void 0

        var _argsarray = _interopRequireDefault(require('argsarray'))

        var _immediate = _interopRequireDefault(require('immediate'))

        var _events = require('events')

        var _inherits = _interopRequireDefault(require('inherits'))

        var _sparkMd = _interopRequireDefault(require('spark-md5'))

        var _uuid = _interopRequireDefault(require('uuid'))

        var _vuvuzela = _interopRequireDefault(require('vuvuzela'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        function isBinaryObject(object) {
          return (
            (typeof ArrayBuffer !== 'undefined' &&
              object instanceof ArrayBuffer) ||
            (typeof Blob !== 'undefined' && object instanceof Blob)
          )
        }

        function cloneArrayBuffer(buff) {
          if (typeof buff.slice === 'function') {
            return buff.slice(0)
          } // IE10-11 slice() polyfill

          var target = new ArrayBuffer(buff.byteLength)
          var targetArray = new Uint8Array(target)
          var sourceArray = new Uint8Array(buff)
          targetArray.set(sourceArray)
          return target
        }

        function cloneBinaryObject(object) {
          if (object instanceof ArrayBuffer) {
            return cloneArrayBuffer(object)
          }

          var size = object.size
          var type = object.type // Blob

          if (typeof object.slice === 'function') {
            return object.slice(0, size, type)
          } // PhantomJS slice() replacement

          return object.webkitSlice(0, size, type)
        } // most of this is borrowed from lodash.isPlainObject:
        // https://github.com/fis-components/lodash.isplainobject/
        // blob/29c358140a74f252aeb08c9eb28bef86f2217d4a/index.js

        var funcToString = Function.prototype.toString
        var objectCtorString = funcToString.call(Object)

        function isPlainObject(value) {
          var proto = Object.getPrototypeOf(value)
          /* istanbul ignore if */

          if (proto === null) {
            // not sure when this happens, but I guess it can
            return true
          }

          var Ctor = proto.constructor
          return (
            typeof Ctor == 'function' &&
            Ctor instanceof Ctor &&
            funcToString.call(Ctor) == objectCtorString
          )
        }

        function clone(object) {
          var newObject
          var i
          var len

          if (!object || typeof object !== 'object') {
            return object
          }

          if (Array.isArray(object)) {
            newObject = []

            for (i = 0, len = object.length; i < len; i++) {
              newObject[i] = clone(object[i])
            }

            return newObject
          } // special case: to avoid inconsistencies between IndexedDB
          // and other backends, we automatically stringify Dates

          if (object instanceof Date) {
            return object.toISOString()
          }

          if (isBinaryObject(object)) {
            return cloneBinaryObject(object)
          }

          if (!isPlainObject(object)) {
            return object // don't clone objects like Workers
          }

          newObject = {}

          for (i in object) {
            /* istanbul ignore else */
            if (Object.prototype.hasOwnProperty.call(object, i)) {
              var value = clone(object[i])

              if (typeof value !== 'undefined') {
                newObject[i] = value
              }
            }
          }

          return newObject
        }

        function once(fun) {
          var called = false
          return (0, _argsarray.default)(function(args) {
            /* istanbul ignore if */
            if (called) {
              // this is a smoke test and should never actually happen
              throw new Error('once called more than once')
            } else {
              called = true
              fun.apply(this, args)
            }
          })
        }

        function toPromise(func) {
          //create the function we will be returning
          return (0, _argsarray.default)(function(args) {
            // Clone arguments
            args = clone(args)
            var self = this // if the last argument is a function, assume its a callback

            var usedCB =
              typeof args[args.length - 1] === 'function'
                ? args.pop()
                : false
            var promise = new Promise(function(fulfill, reject) {
              var resp

              try {
                var callback = once(function(err, mesg) {
                  if (err) {
                    reject(err)
                  } else {
                    fulfill(mesg)
                  }
                }) // create a callback for this invocation
                // apply the function in the orig context

                args.push(callback)
                resp = func.apply(self, args)

                if (resp && typeof resp.then === 'function') {
                  fulfill(resp)
                }
              } catch (e) {
                reject(e)
              }
            }) // if there is a callback, call it back

            if (usedCB) {
              promise.then(function(result) {
                usedCB(null, result)
              }, usedCB)
            }

            return promise
          })
        }

        function logApiCall(self, name, args) {
          /* istanbul ignore if */
          if (self.constructor.listeners('debug').length) {
            var logArgs = ['api', self.name, name]

            for (var i = 0; i < args.length - 1; i++) {
              logArgs.push(args[i])
            }

            self.constructor.emit('debug', logArgs) // override the callback itself to log the response

            var origCallback = args[args.length - 1]

            args[args.length - 1] = function(err, res) {
              var responseArgs = ['api', self.name, name]
              responseArgs = responseArgs.concat(
                err ? ['error', err] : ['success', res],
              )
              self.constructor.emit('debug', responseArgs)
              origCallback(err, res)
            }
          }
        }

        function adapterFun(name, callback) {
          return toPromise(
            (0, _argsarray.default)(function(args) {
              if (this._closed) {
                return Promise.reject(new Error('database is closed'))
              }

              if (this._destroyed) {
                return Promise.reject(new Error('database is destroyed'))
              }

              var self = this
              logApiCall(self, name, args)

              if (!this.taskqueue.isReady) {
                return new Promise(function(fulfill, reject) {
                  self.taskqueue.addTask(function(failed) {
                    if (failed) {
                      reject(failed)
                    } else {
                      fulfill(self[name].apply(self, args))
                    }
                  })
                })
              }

              return callback.apply(this, args)
            }),
          )
        }

        function mangle(key) {
          return '$' + key
        }

        function unmangle(key) {
          return key.substring(1)
        }

        function Map$1() {
          this._store = {}
        }

        Map$1.prototype.get = function(key) {
          var mangled = mangle(key)
          return this._store[mangled]
        }

        Map$1.prototype.set = function(key, value) {
          var mangled = mangle(key)
          this._store[mangled] = value
          return true
        }

        Map$1.prototype.has = function(key) {
          var mangled = mangle(key)
          return mangled in this._store
        }

        Map$1.prototype.delete = function(key) {
          var mangled = mangle(key)
          var res = mangled in this._store
          delete this._store[mangled]
          return res
        }

        Map$1.prototype.forEach = function(cb) {
          var keys = Object.keys(this._store)

          for (var i = 0, len = keys.length; i < len; i++) {
            var key = keys[i]
            var value = this._store[key]
            key = unmangle(key)
            cb(value, key)
          }
        }

        Object.defineProperty(Map$1.prototype, 'size', {
          get: function() {
            return Object.keys(this._store).length
          },
        })

        function Set$1(array) {
          this._store = new Map$1() // init with an array

          if (array && Array.isArray(array)) {
            for (var i = 0, len = array.length; i < len; i++) {
              this.add(array[i])
            }
          }
        }

        Set$1.prototype.add = function(key) {
          return this._store.set(key, true)
        }

        Set$1.prototype.has = function(key) {
          return this._store.has(key)
        }

        Set$1.prototype.forEach = function(cb) {
          this._store.forEach(function(value, key) {
            cb(key)
          })
        }

        Object.defineProperty(Set$1.prototype, 'size', {
          get: function() {
            return this._store.size
          },
        })
        /* global Map,Set,Symbol */
        // Based on https://kangax.github.io/compat-table/es6/ we can sniff out
        // incomplete Map/Set implementations which would otherwise cause our tests to fail.
        // Notably they fail in IE11 and iOS 8.4, which this prevents.

        function supportsMapAndSet() {
          if (
            typeof Symbol === 'undefined' ||
            typeof Map === 'undefined' ||
            typeof Set === 'undefined'
          ) {
            return false
          }

          var prop = Object.getOwnPropertyDescriptor(Map, Symbol.species)
          return prop && 'get' in prop && Map[Symbol.species] === Map
        } // based on https://github.com/montagejs/collections

        var ExportedSet
        var ExportedMap
        {
          if (supportsMapAndSet()) {
            // prefer built-in Map/Set
            ExportedSet = Set
            ExportedMap = Map
          } else {
            // fall back to our polyfill
            ExportedSet = Set$1
            ExportedMap = Map$1
          }
        } // like underscore/lodash _.pick()

        function pick(obj, arr) {
          var res = {}

          for (var i = 0, len = arr.length; i < len; i++) {
            var prop = arr[i]

            if (prop in obj) {
              res[prop] = obj[prop]
            }
          }

          return res
        } // Most browsers throttle concurrent requests at 6, so it's silly
        // to shim _bulk_get by trying to launch potentially hundreds of requests
        // and then letting the majority time out. We can handle this ourselves.

        var MAX_NUM_CONCURRENT_REQUESTS = 6

        function identityFunction(x) {
          return x
        }

        function formatResultForOpenRevsGet(result) {
          return [
            {
              ok: result,
            },
          ]
        } // shim for P/CouchDB adapters that don't directly implement _bulk_get

        function bulkGet(db, opts, callback) {
          var requests = opts.docs // consolidate into one request per doc if possible

          var requestsById = new ExportedMap()
          requests.forEach(function(request) {
            if (requestsById.has(request.id)) {
              requestsById.get(request.id).push(request)
            } else {
              requestsById.set(request.id, [request])
            }
          })
          var numDocs = requestsById.size
          var numDone = 0
          var perDocResults = new Array(numDocs)

          function collapseResultsAndFinish() {
            var results = []
            perDocResults.forEach(function(res) {
              res.docs.forEach(function(info) {
                results.push({
                  id: res.id,
                  docs: [info],
                })
              })
            })
            callback(null, {
              results: results,
            })
          }

          function checkDone() {
            if (++numDone === numDocs) {
              collapseResultsAndFinish()
            }
          }

          function gotResult(docIndex, id, docs) {
            perDocResults[docIndex] = {
              id: id,
              docs: docs,
            }
            checkDone()
          }

          var allRequests = []
          requestsById.forEach(function(value, key) {
            allRequests.push(key)
          })
          var i = 0

          function nextBatch() {
            if (i >= allRequests.length) {
              return
            }

            var upTo = Math.min(
              i + MAX_NUM_CONCURRENT_REQUESTS,
              allRequests.length,
            )
            var batch = allRequests.slice(i, upTo)
            processBatch(batch, i)
            i += batch.length
          }

          function processBatch(batch, offset) {
            batch.forEach(function(docId, j) {
              var docIdx = offset + j
              var docRequests = requestsById.get(docId) // just use the first request as the "template"
              // TODO: The _bulk_get API allows for more subtle use cases than this,
              // but for now it is unlikely that there will be a mix of different
              // "atts_since" or "attachments" in the same request, since it's just
              // replicate.js that is using this for the moment.
              // Also, atts_since is aspirational, since we don't support it yet.

              var docOpts = pick(docRequests[0], [
                'atts_since',
                'attachments',
              ])
              docOpts.open_revs = docRequests.map(function(request) {
                // rev is optional, open_revs disallowed
                return request.rev
              }) // remove falsey / undefined revisions

              docOpts.open_revs = docOpts.open_revs.filter(
                identityFunction,
              )
              var formatResult = identityFunction

              if (docOpts.open_revs.length === 0) {
                delete docOpts.open_revs // when fetching only the "winning" leaf,
                // transform the result so it looks like an open_revs
                // request

                formatResult = formatResultForOpenRevsGet
              } // globally-supplied options

              ;['revs', 'attachments', 'binary', 'ajax', 'latest'].forEach(
                function(param) {
                  if (param in opts) {
                    docOpts[param] = opts[param]
                  }
                },
              )
              db.get(docId, docOpts, function(err, res) {
                var result
                /* istanbul ignore if */

                if (err) {
                  result = [
                    {
                      error: err,
                    },
                  ]
                } else {
                  result = formatResult(res)
                }

                gotResult(docIdx, docId, result)
                nextBatch()
              })
            })
          }

          nextBatch()
        }

        var hasLocal

        try {
          localStorage.setItem('_pouch_check_localstorage', 1)
          hasLocal = !!localStorage.getItem('_pouch_check_localstorage')
        } catch (e) {
          hasLocal = false
        }

        function hasLocalStorage() {
          return hasLocal
        } // Custom nextTick() shim for browsers. In node, this will just be process.nextTick(). We

        ;(0, _inherits.default)(Changes, _events.EventEmitter)
        /* istanbul ignore next */

        function attachBrowserEvents(self) {
          if (hasLocalStorage()) {
            addEventListener('storage', function(e) {
              self.emit(e.key)
            })
          }
        }

        function Changes() {
          _events.EventEmitter.call(this)

          this._listeners = {}
          attachBrowserEvents(this)
        }

        Changes.prototype.addListener = function(dbName, id, db, opts) {
          /* istanbul ignore if */
          if (this._listeners[id]) {
            return
          }

          var self = this
          var inprogress = false

          function eventFunction() {
            /* istanbul ignore if */
            if (!self._listeners[id]) {
              return
            }

            if (inprogress) {
              inprogress = 'waiting'
              return
            }

            inprogress = true
            var changesOpts = pick(opts, [
              'style',
              'include_docs',
              'attachments',
              'conflicts',
              'filter',
              'doc_ids',
              'view',
              'since',
              'query_params',
              'binary',
              'return_docs',
            ])
            /* istanbul ignore next */

            function onError() {
              inprogress = false
            }

            db.changes(changesOpts)
              .on('change', function(c) {
                if (c.seq > opts.since && !opts.cancelled) {
                  opts.since = c.seq
                  opts.onChange(c)
                }
              })
              .on('complete', function() {
                if (inprogress === 'waiting') {
                  ;(0, _immediate.default)(eventFunction)
                }

                inprogress = false
              })
              .on('error', onError)
          }

          this._listeners[id] = eventFunction
          this.on(dbName, eventFunction)
        }

        Changes.prototype.removeListener = function(dbName, id) {
          /* istanbul ignore if */
          if (!(id in this._listeners)) {
            return
          }

          _events.EventEmitter.prototype.removeListener.call(
            this,
            dbName,
            this._listeners[id],
          )

          delete this._listeners[id]
        }
        /* istanbul ignore next */

        Changes.prototype.notifyLocalWindows = function(dbName) {
          //do a useless change on a storage thing
          //in order to get other windows's listeners to activate
          if (hasLocalStorage()) {
            localStorage[dbName] = localStorage[dbName] === 'a' ? 'b' : 'a'
          }
        }

        Changes.prototype.notify = function(dbName) {
          this.emit(dbName)
          this.notifyLocalWindows(dbName)
        }

        function guardedConsole(method) {
          /* istanbul ignore else */
          if (
            typeof console !== 'undefined' &&
            typeof console[method] === 'function'
          ) {
            var args = Array.prototype.slice.call(arguments, 1)
            console[method].apply(console, args)
          }
        }

        function randomNumber(min, max) {
          var maxTimeout = 600000 // Hard-coded default of 10 minutes

          min = parseInt(min, 10) || 0
          max = parseInt(max, 10)

          if (max !== max || max <= min) {
            max = (min || 1) << 1 //doubling
          } else {
            max = max + 1
          } // In order to not exceed maxTimeout, pick a random value between half of maxTimeout and maxTimeout

          if (max > maxTimeout) {
            min = maxTimeout >> 1 // divide by two

            max = maxTimeout
          }

          var ratio = Math.random()
          var range = max - min
          return ~~(range * ratio + min) // ~~ coerces to an int, but fast.
        }

        function defaultBackOff(min) {
          var max = 0

          if (!min) {
            max = 2000
          }

          return randomNumber(min, max)
        } // designed to give info to browser users, who are disturbed
        // when they see http errors in the console

        function explainError(status, str) {
          guardedConsole(
            'info',
            'The above ' + status + ' is totally normal. ' + str,
          )
        }

        var assign
        {
          if (typeof Object.assign === 'function') {
            assign = Object.assign
          } else {
            // lite Object.assign polyfill based on
            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign
            assign = function(target) {
              var to = Object(target)

              for (var index = 1; index < arguments.length; index++) {
                var nextSource = arguments[index]

                if (nextSource != null) {
                  // Skip over if undefined or null
                  for (var nextKey in nextSource) {
                    // Avoid bugs when hasOwnProperty is shadowed
                    if (
                      Object.prototype.hasOwnProperty.call(
                        nextSource,
                        nextKey,
                      )
                    ) {
                      to[nextKey] = nextSource[nextKey]
                    }
                  }
                }
              }

              return to
            }
          }
        }
        var $inject_Object_assign = assign
        ;(0, _inherits.default)(PouchError, Error)

        function PouchError(status, error, reason) {
          Error.call(this, reason)
          this.status = status
          this.name = error
          this.message = reason
          this.error = true
        }

        PouchError.prototype.toString = function() {
          return JSON.stringify({
            status: this.status,
            name: this.name,
            message: this.message,
            reason: this.reason,
          })
        }

        var UNAUTHORIZED = new PouchError(
          401,
          'unauthorized',
          'Name or password is incorrect.',
        )
        var MISSING_BULK_DOCS = new PouchError(
          400,
          'bad_request',
          "Missing JSON list of 'docs'",
        )
        var MISSING_DOC = new PouchError(404, 'not_found', 'missing')
        var REV_CONFLICT = new PouchError(
          409,
          'conflict',
          'Document update conflict',
        )
        var INVALID_ID = new PouchError(
          400,
          'bad_request',
          '_id field must contain a string',
        )
        var MISSING_ID = new PouchError(
          412,
          'missing_id',
          '_id is required for puts',
        )
        var RESERVED_ID = new PouchError(
          400,
          'bad_request',
          'Only reserved document ids may start with underscore.',
        )
        var NOT_OPEN = new PouchError(
          412,
          'precondition_failed',
          'Database not open',
        )
        var UNKNOWN_ERROR = new PouchError(
          500,
          'unknown_error',
          'Database encountered an unknown error',
        )
        var BAD_ARG = new PouchError(
          500,
          'badarg',
          'Some query argument is invalid',
        )
        var INVALID_REQUEST = new PouchError(
          400,
          'invalid_request',
          'Request was invalid',
        )
        var QUERY_PARSE_ERROR = new PouchError(
          400,
          'query_parse_error',
          'Some query parameter is invalid',
        )
        var DOC_VALIDATION = new PouchError(
          500,
          'doc_validation',
          'Bad special document member',
        )
        var BAD_REQUEST = new PouchError(
          400,
          'bad_request',
          'Something wrong with the request',
        )
        var NOT_AN_OBJECT = new PouchError(
          400,
          'bad_request',
          'Document must be a JSON object',
        )
        var DB_MISSING = new PouchError(
          404,
          'not_found',
          'Database not found',
        )
        var IDB_ERROR = new PouchError(
          500,
          'indexed_db_went_bad',
          'unknown',
        )
        var WSQ_ERROR = new PouchError(500, 'web_sql_went_bad', 'unknown')
        var LDB_ERROR = new PouchError(
          500,
          'levelDB_went_went_bad',
          'unknown',
        )
        var FORBIDDEN = new PouchError(
          403,
          'forbidden',
          'Forbidden by design doc validate_doc_update function',
        )
        var INVALID_REV = new PouchError(
          400,
          'bad_request',
          'Invalid rev format',
        )
        var FILE_EXISTS = new PouchError(
          412,
          'file_exists',
          'The database could not be created, the file already exists.',
        )
        var MISSING_STUB = new PouchError(
          412,
          'missing_stub',
          "A pre-existing attachment stub wasn't found",
        )
        var INVALID_URL = new PouchError(
          413,
          'invalid_url',
          'Provided URL is invalid',
        )

        function createError(error, reason) {
          function CustomPouchError(reason) {
            // inherit error properties from our parent error manually
            // so as to allow proper JSON parsing.

            /* jshint ignore:start */
            for (var p in error) {
              if (typeof error[p] !== 'function') {
                this[p] = error[p]
              }
            }
            /* jshint ignore:end */

            if (reason !== undefined) {
              this.reason = reason
            }
          }

          CustomPouchError.prototype = PouchError.prototype
          return new CustomPouchError(reason)
        }

        function generateErrorFromResponse(err) {
          if (typeof err !== 'object') {
            var data = err
            err = UNKNOWN_ERROR
            err.data = data
          }

          if ('error' in err && err.error === 'conflict') {
            err.name = 'conflict'
            err.status = 409
          }

          if (!('name' in err)) {
            err.name = err.error || 'unknown'
          }

          if (!('status' in err)) {
            err.status = 500
          }

          if (!('message' in err)) {
            err.message = err.message || err.reason
          }

          return err
        }

        function tryFilter(filter, doc, req) {
          try {
            return !filter(doc, req)
          } catch (err) {
            var msg = 'Filter function threw: ' + err.toString()
            return createError(BAD_REQUEST, msg)
          }
        }

        function filterChange(opts) {
          var req = {}
          var hasFilter = opts.filter && typeof opts.filter === 'function'
          req.query = opts.query_params
          return function filter(change) {
            if (!change.doc) {
              // CSG sends events on the changes feed that don't have documents,
              // this hack makes a whole lot of existing code robust.
              change.doc = {}
            }

            var filterReturn =
              hasFilter && tryFilter(opts.filter, change.doc, req)

            if (typeof filterReturn === 'object') {
              return filterReturn
            }

            if (filterReturn) {
              return false
            }

            if (!opts.include_docs) {
              delete change.doc
            } else if (!opts.attachments) {
              for (var att in change.doc._attachments) {
                /* istanbul ignore else */
                if (change.doc._attachments.hasOwnProperty(att)) {
                  change.doc._attachments[att].stub = true
                }
              }
            }

            return true
          }
        }

        function flatten(arrs) {
          var res = []

          for (var i = 0, len = arrs.length; i < len; i++) {
            res = res.concat(arrs[i])
          }

          return res
        } // shim for Function.prototype.name,
        // Determine id an ID is valid
        //   - invalid IDs begin with an underescore that does not begin '_design' or
        //     '_local'
        //   - any other string value is a valid id
        // Returns the specific error object for each case

        function invalidIdError(id) {
          var err

          if (!id) {
            err = createError(MISSING_ID)
          } else if (typeof id !== 'string') {
            err = createError(INVALID_ID)
          } else if (/^_/.test(id) && !/^_(design|local)/.test(id)) {
            err = createError(RESERVED_ID)
          }

          if (err) {
            throw err
          }
        } // Checks if a PouchDB object is "remote" or not. This is

        function isRemote(db) {
          if (typeof db._remote === 'boolean') {
            return db._remote
          }
          /* istanbul ignore next */

          if (typeof db.type === 'function') {
            guardedConsole(
              'warn',
              'db.type() is deprecated and will be removed in ' +
                'a future version of PouchDB',
            )
            return db.type() === 'http'
          }
          /* istanbul ignore next */

          return false
        }

        function listenerCount(ee, type) {
          return 'listenerCount' in ee
            ? ee.listenerCount(type)
            : _events.EventEmitter.listenerCount(ee, type)
        }

        function parseDesignDocFunctionName(s) {
          if (!s) {
            return null
          }

          var parts = s.split('/')

          if (parts.length === 2) {
            return parts
          }

          if (parts.length === 1) {
            return [s, s]
          }

          return null
        }

        function normalizeDesignDocFunctionName(s) {
          var normalized = parseDesignDocFunctionName(s)
          return normalized ? normalized.join('/') : null
        } // originally parseUri 1.2.2, now patched by us
        // (c) Steven Levithan <stevenlevithan.com>
        // MIT License

        var keys = [
          'source',
          'protocol',
          'authority',
          'userInfo',
          'user',
          'password',
          'host',
          'port',
          'relative',
          'path',
          'directory',
          'file',
          'query',
          'anchor',
        ]
        var qName = 'queryKey'
        var qParser = /(?:^|&)([^&=]*)=?([^&]*)/g // use the "loose" parser

        /* eslint maxlen: 0, no-useless-escape: 0 */

        var parser = /^(?:(?![^:@]+:[^:@\/]*@)([^:\/?#.]+):)?(?:\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/

        function parseUri(str) {
          var m = parser.exec(str)
          var uri = {}
          var i = 14

          while (i--) {
            var key = keys[i]
            var value = m[i] || ''
            var encoded = ['user', 'password'].indexOf(key) !== -1
            uri[key] = encoded ? decodeURIComponent(value) : value
          }

          uri[qName] = {}
          uri[keys[12]].replace(qParser, function($0, $1, $2) {
            if ($1) {
              uri[qName][$1] = $2
            }
          })
          return uri
        } // Based on https://github.com/alexdavid/scope-eval v0.0.3
        // (source: https://unpkg.com/scope-eval@0.0.3/scope_eval.js)
        // This is basically just a wrapper around new Function()

        function scopeEval(source, scope) {
          var keys = []
          var values = []

          for (var key in scope) {
            if (scope.hasOwnProperty(key)) {
              keys.push(key)
              values.push(scope[key])
            }
          }

          keys.push(source)
          return Function.apply(null, keys).apply(null, values)
        } // this is essentially the "update sugar" function from daleharvey/pouchdb#1388
        // the diffFun tells us what delta to apply to the doc.  it either returns
        // the doc, or false if it doesn't need to do an update after all

        function upsert(db, docId, diffFun) {
          return new Promise(function(fulfill, reject) {
            db.get(docId, function(err, doc) {
              if (err) {
                /* istanbul ignore next */
                if (err.status !== 404) {
                  return reject(err)
                }

                doc = {}
              } // the user might change the _rev, so save it for posterity

              var docRev = doc._rev
              var newDoc = diffFun(doc)

              if (!newDoc) {
                // if the diffFun returns falsy, we short-circuit as
                // an optimization
                return fulfill({
                  updated: false,
                  rev: docRev,
                })
              } // users aren't allowed to modify these values,
              // so reset them here

              newDoc._id = docId
              newDoc._rev = docRev
              fulfill(tryAndPut(db, newDoc, diffFun))
            })
          })
        }

        function tryAndPut(db, doc, diffFun) {
          return db.put(doc).then(
            function(res) {
              return {
                updated: true,
                rev: res.rev,
              }
            },
            function(err) {
              /* istanbul ignore next */
              if (err.status !== 409) {
                throw err
              }

              return upsert(db, doc._id, diffFun)
            },
          )
        }

        var thisAtob = function(str) {
          return atob(str)
        }

        var thisBtoa = function(str) {
          return btoa(str)
        } // Abstracts constructing a Blob object, so it also works in older
        // browsers that don't support the native Blob constructor (e.g.
        // old QtWebKit versions, Android < 4.4).

        function createBlob(parts, properties) {
          /* global BlobBuilder,MSBlobBuilder,MozBlobBuilder,WebKitBlobBuilder */
          parts = parts || []
          properties = properties || {}

          try {
            return new Blob(parts, properties)
          } catch (e) {
            if (e.name !== 'TypeError') {
              throw e
            }

            var Builder =
              typeof BlobBuilder !== 'undefined'
                ? BlobBuilder
                : typeof MSBlobBuilder !== 'undefined'
                ? MSBlobBuilder
                : typeof MozBlobBuilder !== 'undefined'
                ? MozBlobBuilder
                : WebKitBlobBuilder
            var builder = new Builder()

            for (var i = 0; i < parts.length; i += 1) {
              builder.append(parts[i])
            }

            return builder.getBlob(properties.type)
          }
        } // From http://stackoverflow.com/questions/14967647/ (continues on next line)
        // encode-decode-image-with-base64-breaks-image (2013-04-21)

        function binaryStringToArrayBuffer(bin) {
          var length = bin.length
          var buf = new ArrayBuffer(length)
          var arr = new Uint8Array(buf)

          for (var i = 0; i < length; i++) {
            arr[i] = bin.charCodeAt(i)
          }

          return buf
        }

        function binStringToBluffer(binString, type) {
          return createBlob([binaryStringToArrayBuffer(binString)], {
            type: type,
          })
        }

        function b64ToBluffer(b64, type) {
          return binStringToBluffer(thisAtob(b64), type)
        } //Can't find original post, but this is close
        //http://stackoverflow.com/questions/6965107/ (continues on next line)
        //converting-between-strings-and-arraybuffers

        function arrayBufferToBinaryString(buffer) {
          var binary = ''
          var bytes = new Uint8Array(buffer)
          var length = bytes.byteLength

          for (var i = 0; i < length; i++) {
            binary += String.fromCharCode(bytes[i])
          }

          return binary
        } // shim for browsers that don't support it

        function readAsBinaryString(blob, callback) {
          var reader = new FileReader()
          var hasBinaryString =
            typeof reader.readAsBinaryString === 'function'

          reader.onloadend = function(e) {
            var result = e.target.result || ''

            if (hasBinaryString) {
              return callback(result)
            }

            callback(arrayBufferToBinaryString(result))
          }

          if (hasBinaryString) {
            reader.readAsBinaryString(blob)
          } else {
            reader.readAsArrayBuffer(blob)
          }
        }

        function blobToBinaryString(blobOrBuffer, callback) {
          readAsBinaryString(blobOrBuffer, function(bin) {
            callback(bin)
          })
        }

        function blobToBase64(blobOrBuffer, callback) {
          blobToBinaryString(blobOrBuffer, function(base64) {
            callback(thisBtoa(base64))
          })
        } // simplified API. universal browser support is assumed

        function readAsArrayBuffer(blob, callback) {
          var reader = new FileReader()

          reader.onloadend = function(e) {
            var result = e.target.result || new ArrayBuffer(0)
            callback(result)
          }

          reader.readAsArrayBuffer(blob)
        } // this is not used in the browser

        var setImmediateShim = global.setImmediate || global.setTimeout
        var MD5_CHUNK_SIZE = 32768

        function rawToBase64(raw) {
          return thisBtoa(raw)
        }

        function sliceBlob(blob, start, end) {
          if (blob.webkitSlice) {
            return blob.webkitSlice(start, end)
          }

          return blob.slice(start, end)
        }

        function appendBlob(buffer, blob, start, end, callback) {
          if (start > 0 || end < blob.size) {
            // only slice blob if we really need to
            blob = sliceBlob(blob, start, end)
          }

          readAsArrayBuffer(blob, function(arrayBuffer) {
            buffer.append(arrayBuffer)
            callback()
          })
        }

        function appendString(buffer, string, start, end, callback) {
          if (start > 0 || end < string.length) {
            // only create a substring if we really need to
            string = string.substring(start, end)
          }

          buffer.appendBinary(string)
          callback()
        }

        function binaryMd5(data, callback) {
          var inputIsString = typeof data === 'string'
          var len = inputIsString ? data.length : data.size
          var chunkSize = Math.min(MD5_CHUNK_SIZE, len)
          var chunks = Math.ceil(len / chunkSize)
          var currentChunk = 0
          var buffer = inputIsString
            ? new _sparkMd.default()
            : new _sparkMd.default.ArrayBuffer()
          var append = inputIsString ? appendString : appendBlob

          function next() {
            setImmediateShim(loadNextChunk)
          }

          function done() {
            var raw = buffer.end(true)
            var base64 = rawToBase64(raw)
            callback(base64)
            buffer.destroy()
          }

          function loadNextChunk() {
            var start = currentChunk * chunkSize
            var end = start + chunkSize
            currentChunk++

            if (currentChunk < chunks) {
              append(buffer, data, start, end, next)
            } else {
              append(buffer, data, start, end, done)
            }
          }

          loadNextChunk()
        }

        function stringMd5(string) {
          return _sparkMd.default.hash(string)
        }

        function rev$$1(doc, deterministic_revs) {
          var clonedDoc = clone(doc)

          if (!deterministic_revs) {
            return _uuid.default
              .v4()
              .replace(/-/g, '')
              .toLowerCase()
          }

          delete clonedDoc._rev_tree
          return stringMd5(JSON.stringify(clonedDoc))
        }

        var uuid = _uuid.default.v4 // We fetch all leafs of the revision tree, and sort them based on tree length
        // and whether they were deleted, undeleted documents with the longest revision
        // tree (most edits) win
        // The final sort algorithm is slightly documented in a sidebar here:
        // http://guide.couchdb.org/draft/conflicts.html

        function winningRev(metadata) {
          var winningId
          var winningPos
          var winningDeleted
          var toVisit = metadata.rev_tree.slice()
          var node

          while ((node = toVisit.pop())) {
            var tree = node.ids
            var branches = tree[2]
            var pos = node.pos

            if (branches.length) {
              // non-leaf
              for (var i = 0, len = branches.length; i < len; i++) {
                toVisit.push({
                  pos: pos + 1,
                  ids: branches[i],
                })
              }

              continue
            }

            var deleted = !!tree[1].deleted
            var id = tree[0] // sort by deleted, then pos, then id

            if (
              !winningId ||
              (winningDeleted !== deleted
                ? winningDeleted
                : winningPos !== pos
                ? winningPos < pos
                : winningId < id)
            ) {
              winningId = id
              winningPos = pos
              winningDeleted = deleted
            }
          }

          return winningPos + '-' + winningId
        } // Pretty much all below can be combined into a higher order function to
        // traverse revisions
        // The return value from the callback will be passed as context to all
        // children of that node

        function traverseRevTree(revs, callback) {
          var toVisit = revs.slice()
          var node

          while ((node = toVisit.pop())) {
            var pos = node.pos
            var tree = node.ids
            var branches = tree[2]
            var newCtx = callback(
              branches.length === 0,
              pos,
              tree[0],
              node.ctx,
              tree[1],
            )

            for (var i = 0, len = branches.length; i < len; i++) {
              toVisit.push({
                pos: pos + 1,
                ids: branches[i],
                ctx: newCtx,
              })
            }
          }
        }

        function sortByPos(a, b) {
          return a.pos - b.pos
        }

        function collectLeaves(revs) {
          var leaves = []
          traverseRevTree(revs, function(isLeaf, pos, id, acc, opts) {
            if (isLeaf) {
              leaves.push({
                rev: pos + '-' + id,
                pos: pos,
                opts: opts,
              })
            }
          })
          leaves.sort(sortByPos).reverse()

          for (var i = 0, len = leaves.length; i < len; i++) {
            delete leaves[i].pos
          }

          return leaves
        } // returns revs of all conflicts that is leaves such that
        // 1. are not deleted and
        // 2. are different than winning revision

        function collectConflicts(metadata) {
          var win = winningRev(metadata)
          var leaves = collectLeaves(metadata.rev_tree)
          var conflicts = []

          for (var i = 0, len = leaves.length; i < len; i++) {
            var leaf = leaves[i]

            if (leaf.rev !== win && !leaf.opts.deleted) {
              conflicts.push(leaf.rev)
            }
          }

          return conflicts
        } // compact a tree by marking its non-leafs as missing,
        // and return a list of revs to delete

        function compactTree(metadata) {
          var revs = []
          traverseRevTree(metadata.rev_tree, function(
            isLeaf,
            pos,
            revHash,
            ctx,
            opts,
          ) {
            if (opts.status === 'available' && !isLeaf) {
              revs.push(pos + '-' + revHash)
              opts.status = 'missing'
            }
          })
          return revs
        } // build up a list of all the paths to the leafs in this revision tree

        function rootToLeaf(revs) {
          var paths = []
          var toVisit = revs.slice()
          var node

          while ((node = toVisit.pop())) {
            var pos = node.pos
            var tree = node.ids
            var id = tree[0]
            var opts = tree[1]
            var branches = tree[2]
            var isLeaf = branches.length === 0
            var history = node.history ? node.history.slice() : []
            history.push({
              id: id,
              opts: opts,
            })

            if (isLeaf) {
              paths.push({
                pos: pos + 1 - history.length,
                ids: history,
              })
            }

            for (var i = 0, len = branches.length; i < len; i++) {
              toVisit.push({
                pos: pos + 1,
                ids: branches[i],
                history: history,
              })
            }
          }

          return paths.reverse()
        } // for a better overview of what this is doing, read:

        function sortByPos$1(a, b) {
          return a.pos - b.pos
        } // classic binary search

        function binarySearch(arr, item, comparator) {
          var low = 0
          var high = arr.length
          var mid

          while (low < high) {
            mid = (low + high) >>> 1

            if (comparator(arr[mid], item) < 0) {
              low = mid + 1
            } else {
              high = mid
            }
          }

          return low
        } // assuming the arr is sorted, insert the item in the proper place

        function insertSorted(arr, item, comparator) {
          var idx = binarySearch(arr, item, comparator)
          arr.splice(idx, 0, item)
        } // Turn a path as a flat array into a tree with a single branch.
        // If any should be stemmed from the beginning of the array, that's passed
        // in as the second argument

        function pathToTree(path, numStemmed) {
          var root
          var leaf

          for (var i = numStemmed, len = path.length; i < len; i++) {
            var node = path[i]
            var currentLeaf = [node.id, node.opts, []]

            if (leaf) {
              leaf[2].push(currentLeaf)
              leaf = currentLeaf
            } else {
              root = leaf = currentLeaf
            }
          }

          return root
        } // compare the IDs of two trees

        function compareTree(a, b) {
          return a[0] < b[0] ? -1 : 1
        } // Merge two trees together
        // The roots of tree1 and tree2 must be the same revision

        function mergeTree(in_tree1, in_tree2) {
          var queue = [
            {
              tree1: in_tree1,
              tree2: in_tree2,
            },
          ]
          var conflicts = false

          while (queue.length > 0) {
            var item = queue.pop()
            var tree1 = item.tree1
            var tree2 = item.tree2

            if (tree1[1].status || tree2[1].status) {
              tree1[1].status =
                tree1[1].status === 'available' ||
                tree2[1].status === 'available'
                  ? 'available'
                  : 'missing'
            }

            for (var i = 0; i < tree2[2].length; i++) {
              if (!tree1[2][0]) {
                conflicts = 'new_leaf'
                tree1[2][0] = tree2[2][i]
                continue
              }

              var merged = false

              for (var j = 0; j < tree1[2].length; j++) {
                if (tree1[2][j][0] === tree2[2][i][0]) {
                  queue.push({
                    tree1: tree1[2][j],
                    tree2: tree2[2][i],
                  })
                  merged = true
                }
              }

              if (!merged) {
                conflicts = 'new_branch'
                insertSorted(tree1[2], tree2[2][i], compareTree)
              }
            }
          }

          return {
            conflicts: conflicts,
            tree: in_tree1,
          }
        }

        function doMerge(tree, path, dontExpand) {
          var restree = []
          var conflicts = false
          var merged = false
          var res

          if (!tree.length) {
            return {
              tree: [path],
              conflicts: 'new_leaf',
            }
          }

          for (var i = 0, len = tree.length; i < len; i++) {
            var branch = tree[i]

            if (branch.pos === path.pos && branch.ids[0] === path.ids[0]) {
              // Paths start at the same position and have the same root, so they need
              // merged
              res = mergeTree(branch.ids, path.ids)
              restree.push({
                pos: branch.pos,
                ids: res.tree,
              })
              conflicts = conflicts || res.conflicts
              merged = true
            } else if (dontExpand !== true) {
              // The paths start at a different position, take the earliest path and
              // traverse up until it as at the same point from root as the path we
              // want to merge.  If the keys match we return the longer path with the
              // other merged After stemming we dont want to expand the trees
              var t1 = branch.pos < path.pos ? branch : path
              var t2 = branch.pos < path.pos ? path : branch
              var diff = t2.pos - t1.pos
              var candidateParents = []
              var trees = []
              trees.push({
                ids: t1.ids,
                diff: diff,
                parent: null,
                parentIdx: null,
              })

              while (trees.length > 0) {
                var item = trees.pop()

                if (item.diff === 0) {
                  if (item.ids[0] === t2.ids[0]) {
                    candidateParents.push(item)
                  }

                  continue
                }

                var elements = item.ids[2]

                for (
                  var j = 0, elementsLen = elements.length;
                  j < elementsLen;
                  j++
                ) {
                  trees.push({
                    ids: elements[j],
                    diff: item.diff - 1,
                    parent: item.ids,
                    parentIdx: j,
                  })
                }
              }

              var el = candidateParents[0]

              if (!el) {
                restree.push(branch)
              } else {
                res = mergeTree(el.ids, t2.ids)
                el.parent[2][el.parentIdx] = res.tree
                restree.push({
                  pos: t1.pos,
                  ids: t1.ids,
                })
                conflicts = conflicts || res.conflicts
                merged = true
              }
            } else {
              restree.push(branch)
            }
          } // We didnt find

          if (!merged) {
            restree.push(path)
          }

          restree.sort(sortByPos$1)
          return {
            tree: restree,
            conflicts: conflicts || 'internal_node',
          }
        } // To ensure we dont grow the revision tree infinitely, we stem old revisions

        function stem(tree, depth) {
          // First we break out the tree into a complete list of root to leaf paths
          var paths = rootToLeaf(tree)
          var stemmedRevs
          var result

          for (var i = 0, len = paths.length; i < len; i++) {
            // Then for each path, we cut off the start of the path based on the
            // `depth` to stem to, and generate a new set of flat trees
            var path = paths[i]
            var stemmed = path.ids
            var node

            if (stemmed.length > depth) {
              // only do the stemming work if we actually need to stem
              if (!stemmedRevs) {
                stemmedRevs = {} // avoid allocating this object unnecessarily
              }

              var numStemmed = stemmed.length - depth
              node = {
                pos: path.pos + numStemmed,
                ids: pathToTree(stemmed, numStemmed),
              }

              for (var s = 0; s < numStemmed; s++) {
                var rev = path.pos + s + '-' + stemmed[s].id
                stemmedRevs[rev] = true
              }
            } else {
              // no need to actually stem
              node = {
                pos: path.pos,
                ids: pathToTree(stemmed, 0),
              }
            } // Then we remerge all those flat trees together, ensuring that we dont
            // connect trees that would go beyond the depth limit

            if (result) {
              result = doMerge(result, node, true).tree
            } else {
              result = [node]
            }
          } // this is memory-heavy per Chrome profiler, avoid unless we actually stemmed

          if (stemmedRevs) {
            traverseRevTree(result, function(isLeaf, pos, revHash) {
              // some revisions may have been removed in a branch but not in another
              delete stemmedRevs[pos + '-' + revHash]
            })
          }

          return {
            tree: result,
            revs: stemmedRevs ? Object.keys(stemmedRevs) : [],
          }
        }

        function merge(tree, path, depth) {
          var newTree = doMerge(tree, path)
          var stemmed = stem(newTree.tree, depth)
          return {
            tree: stemmed.tree,
            stemmedRevs: stemmed.revs,
            conflicts: newTree.conflicts,
          }
        } // return true if a rev exists in the rev tree, false otherwise

        function revExists(revs, rev) {
          var toVisit = revs.slice()
          var splitRev = rev.split('-')
          var targetPos = parseInt(splitRev[0], 10)
          var targetId = splitRev[1]
          var node

          while ((node = toVisit.pop())) {
            if (node.pos === targetPos && node.ids[0] === targetId) {
              return true
            }

            var branches = node.ids[2]

            for (var i = 0, len = branches.length; i < len; i++) {
              toVisit.push({
                pos: node.pos + 1,
                ids: branches[i],
              })
            }
          }

          return false
        }

        function getTrees(node) {
          return node.ids
        } // check if a specific revision of a doc has been deleted
        //  - metadata: the metadata object from the doc store
        //  - rev: (optional) the revision to check. defaults to winning revision

        function isDeleted(metadata, rev) {
          if (!rev) {
            rev = winningRev(metadata)
          }

          var id = rev.substring(rev.indexOf('-') + 1)
          var toVisit = metadata.rev_tree.map(getTrees)
          var tree

          while ((tree = toVisit.pop())) {
            if (tree[0] === id) {
              return !!tree[1].deleted
            }

            toVisit = toVisit.concat(tree[2])
          }
        }

        function isLocalId(id) {
          return /^_local/.test(id)
        } // returns the current leaf node for a given revision

        function latest(rev, metadata) {
          var toVisit = metadata.rev_tree.slice()
          var node

          while ((node = toVisit.pop())) {
            var pos = node.pos
            var tree = node.ids
            var id = tree[0]
            var opts = tree[1]
            var branches = tree[2]
            var isLeaf = branches.length === 0
            var history = node.history ? node.history.slice() : []
            history.push({
              id: id,
              pos: pos,
              opts: opts,
            })

            if (isLeaf) {
              for (var i = 0, len = history.length; i < len; i++) {
                var historyNode = history[i]
                var historyRev = historyNode.pos + '-' + historyNode.id

                if (historyRev === rev) {
                  // return the rev of this leaf
                  return pos + '-' + id
                }
              }
            }

            for (var j = 0, l = branches.length; j < l; j++) {
              toVisit.push({
                pos: pos + 1,
                ids: branches[j],
                history: history,
              })
            }
          }
          /* istanbul ignore next */

          throw new Error(
            'Unable to resolve latest revision for id ' +
              metadata.id +
              ', rev ' +
              rev,
          )
        }

        ;(0, _inherits.default)(Changes$1, _events.EventEmitter)

        function tryCatchInChangeListener(self, change, pending, lastSeq) {
          // isolate try/catches to avoid V8 deoptimizations
          try {
            self.emit('change', change, pending, lastSeq)
          } catch (e) {
            guardedConsole('error', 'Error in .on("change", function):', e)
          }
        }

        function Changes$1(db, opts, callback) {
          _events.EventEmitter.call(this)

          var self = this
          this.db = db
          opts = opts ? clone(opts) : {}
          var complete = (opts.complete = once(function(err, resp) {
            if (err) {
              if (listenerCount(self, 'error') > 0) {
                self.emit('error', err)
              }
            } else {
              self.emit('complete', resp)
            }

            self.removeAllListeners()
            db.removeListener('destroyed', onDestroy)
          }))

          if (callback) {
            self.on('complete', function(resp) {
              callback(null, resp)
            })
            self.on('error', callback)
          }

          function onDestroy() {
            self.cancel()
          }

          db.once('destroyed', onDestroy)

          opts.onChange = function(change, pending, lastSeq) {
            /* istanbul ignore if */
            if (self.isCancelled) {
              return
            }

            tryCatchInChangeListener(self, change, pending, lastSeq)
          }

          var promise = new Promise(function(fulfill, reject) {
            opts.complete = function(err, res) {
              if (err) {
                reject(err)
              } else {
                fulfill(res)
              }
            }
          })
          self.once('cancel', function() {
            db.removeListener('destroyed', onDestroy)
            opts.complete(null, {
              status: 'cancelled',
            })
          })
          this.then = promise.then.bind(promise)
          this['catch'] = promise['catch'].bind(promise)
          this.then(function(result) {
            complete(null, result)
          }, complete)

          if (!db.taskqueue.isReady) {
            db.taskqueue.addTask(function(failed) {
              if (failed) {
                opts.complete(failed)
              } else if (self.isCancelled) {
                self.emit('cancel')
              } else {
                self.validateChanges(opts)
              }
            })
          } else {
            self.validateChanges(opts)
          }
        }

        Changes$1.prototype.cancel = function() {
          this.isCancelled = true

          if (this.db.taskqueue.isReady) {
            this.emit('cancel')
          }
        }

        function processChange(doc, metadata, opts) {
          var changeList = [
            {
              rev: doc._rev,
            },
          ]

          if (opts.style === 'all_docs') {
            changeList = collectLeaves(metadata.rev_tree).map(function(x) {
              return {
                rev: x.rev,
              }
            })
          }

          var change = {
            id: metadata.id,
            changes: changeList,
            doc: doc,
          }

          if (isDeleted(metadata, doc._rev)) {
            change.deleted = true
          }

          if (opts.conflicts) {
            change.doc._conflicts = collectConflicts(metadata)

            if (!change.doc._conflicts.length) {
              delete change.doc._conflicts
            }
          }

          return change
        }

        Changes$1.prototype.validateChanges = function(opts) {
          var callback = opts.complete
          var self = this
          /* istanbul ignore else */

          if (PouchDB._changesFilterPlugin) {
            PouchDB._changesFilterPlugin.validate(opts, function(err) {
              if (err) {
                return callback(err)
              }

              self.doChanges(opts)
            })
          } else {
            self.doChanges(opts)
          }
        }

        Changes$1.prototype.doChanges = function(opts) {
          var self = this
          var callback = opts.complete
          opts = clone(opts)

          if ('live' in opts && !('continuous' in opts)) {
            opts.continuous = opts.live
          }

          opts.processChange = processChange

          if (opts.since === 'latest') {
            opts.since = 'now'
          }

          if (!opts.since) {
            opts.since = 0
          }

          if (opts.since === 'now') {
            this.db.info().then(function(info) {
              /* istanbul ignore if */
              if (self.isCancelled) {
                callback(null, {
                  status: 'cancelled',
                })
                return
              }

              opts.since = info.update_seq
              self.doChanges(opts)
            }, callback)
            return
          }
          /* istanbul ignore else */

          if (PouchDB._changesFilterPlugin) {
            PouchDB._changesFilterPlugin.normalize(opts)

            if (PouchDB._changesFilterPlugin.shouldFilter(this, opts)) {
              return PouchDB._changesFilterPlugin.filter(this, opts)
            }
          } else {
            ;['doc_ids', 'filter', 'selector', 'view'].forEach(function(
              key,
            ) {
              if (key in opts) {
                guardedConsole(
                  'warn',
                  'The "' +
                    key +
                    '" option was passed in to changes/replicate, ' +
                    'but pouchdb-changes-filter plugin is not installed, so it ' +
                    'was ignored. Please install the plugin to enable filtering.',
                )
              }
            })
          }

          if (!('descending' in opts)) {
            opts.descending = false
          } // 0 and 1 should return 1 document

          opts.limit = opts.limit === 0 ? 1 : opts.limit
          opts.complete = callback

          var newPromise = this.db._changes(opts)
          /* istanbul ignore else */

          if (newPromise && typeof newPromise.cancel === 'function') {
            var cancel = self.cancel
            self.cancel = (0, _argsarray.default)(function(args) {
              newPromise.cancel()
              cancel.apply(this, args)
            })
          }
        }
        /*
         * A generic pouch adapter
         */

        function compare(left, right) {
          return left < right ? -1 : left > right ? 1 : 0
        } // Wrapper for functions that call the bulkdocs api with a single doc,
        // if the first result is an error, return an error

        function yankError(callback, docId) {
          return function(err, results) {
            if (err || (results[0] && results[0].error)) {
              err = err || results[0]
              err.docId = docId
              callback(err)
            } else {
              callback(null, results.length ? results[0] : results)
            }
          }
        } // clean docs given to us by the user

        function cleanDocs(docs) {
          for (var i = 0; i < docs.length; i++) {
            var doc = docs[i]

            if (doc._deleted) {
              delete doc._attachments // ignore atts for deleted docs
            } else if (doc._attachments) {
              // filter out extraneous keys from _attachments
              var atts = Object.keys(doc._attachments)

              for (var j = 0; j < atts.length; j++) {
                var att = atts[j]
                doc._attachments[att] = pick(doc._attachments[att], [
                  'data',
                  'digest',
                  'content_type',
                  'length',
                  'revpos',
                  'stub',
                ])
              }
            }
          }
        } // compare two docs, first by _id then by _rev

        function compareByIdThenRev(a, b) {
          var idCompare = compare(a._id, b._id)

          if (idCompare !== 0) {
            return idCompare
          }

          var aStart = a._revisions ? a._revisions.start : 0
          var bStart = b._revisions ? b._revisions.start : 0
          return compare(aStart, bStart)
        } // for every node in a revision tree computes its distance from the closest
        // leaf

        function computeHeight(revs) {
          var height = {}
          var edges = []
          traverseRevTree(revs, function(isLeaf, pos, id, prnt) {
            var rev = pos + '-' + id

            if (isLeaf) {
              height[rev] = 0
            }

            if (prnt !== undefined) {
              edges.push({
                from: prnt,
                to: rev,
              })
            }

            return rev
          })
          edges.reverse()
          edges.forEach(function(edge) {
            if (height[edge.from] === undefined) {
              height[edge.from] = 1 + height[edge.to]
            } else {
              height[edge.from] = Math.min(
                height[edge.from],
                1 + height[edge.to],
              )
            }
          })
          return height
        }

        function allDocsKeysParse(opts) {
          var keys =
            'limit' in opts
              ? opts.keys.slice(opts.skip, opts.limit + opts.skip)
              : opts.skip > 0
              ? opts.keys.slice(opts.skip)
              : opts.keys
          opts.keys = keys
          opts.skip = 0
          delete opts.limit

          if (opts.descending) {
            keys.reverse()
            opts.descending = false
          }
        } // all compaction is done in a queue, to avoid attaching
        // too many listeners at once

        function doNextCompaction(self) {
          var task = self._compactionQueue[0]
          var opts = task.opts
          var callback = task.callback
          self
            .get('_local/compaction')
            .catch(function() {
              return false
            })
            .then(function(doc) {
              if (doc && doc.last_seq) {
                opts.last_seq = doc.last_seq
              }

              self._compact(opts, function(err, res) {
                /* istanbul ignore if */
                if (err) {
                  callback(err)
                } else {
                  callback(null, res)
                }

                ;(0, _immediate.default)(function() {
                  self._compactionQueue.shift()

                  if (self._compactionQueue.length) {
                    doNextCompaction(self)
                  }
                })
              })
            })
        }

        function attachmentNameError(name) {
          if (name.charAt(0) === '_') {
            return (
              name +
              ' is not a valid attachment name, attachment ' +
              "names cannot start with '_'"
            )
          }

          return false
        }

        ;(0, _inherits.default)(AbstractPouchDB, _events.EventEmitter)

        function AbstractPouchDB() {
          _events.EventEmitter.call(this) // re-bind prototyped methods

          for (var p in AbstractPouchDB.prototype) {
            if (typeof this[p] === 'function') {
              this[p] = this[p].bind(this)
            }
          }
        }

        AbstractPouchDB.prototype.post = adapterFun('post', function(
          doc,
          opts,
          callback,
        ) {
          if (typeof opts === 'function') {
            callback = opts
            opts = {}
          }

          if (typeof doc !== 'object' || Array.isArray(doc)) {
            return callback(createError(NOT_AN_OBJECT))
          }

          this.bulkDocs(
            {
              docs: [doc],
            },
            opts,
            yankError(callback, doc._id),
          )
        })
        AbstractPouchDB.prototype.put = adapterFun('put', function(
          doc,
          opts,
          cb,
        ) {
          if (typeof opts === 'function') {
            cb = opts
            opts = {}
          }

          if (typeof doc !== 'object' || Array.isArray(doc)) {
            return cb(createError(NOT_AN_OBJECT))
          }

          invalidIdError(doc._id)

          if (isLocalId(doc._id) && typeof this._putLocal === 'function') {
            if (doc._deleted) {
              return this._removeLocal(doc, cb)
            } else {
              return this._putLocal(doc, cb)
            }
          }

          var self = this

          if (opts.force && doc._rev) {
            transformForceOptionToNewEditsOption()
            putDoc(function(err) {
              var result = err
                ? null
                : {
                    ok: true,
                    id: doc._id,
                    rev: doc._rev,
                  }
              cb(err, result)
            })
          } else {
            putDoc(cb)
          }

          function transformForceOptionToNewEditsOption() {
            var parts = doc._rev.split('-')

            var oldRevId = parts[1]
            var oldRevNum = parseInt(parts[0], 10)
            var newRevNum = oldRevNum + 1
            var newRevId = rev$$1()
            doc._revisions = {
              start: newRevNum,
              ids: [newRevId, oldRevId],
            }
            doc._rev = newRevNum + '-' + newRevId
            opts.new_edits = false
          }

          function putDoc(next) {
            if (
              typeof self._put === 'function' &&
              opts.new_edits !== false
            ) {
              self._put(doc, opts, next)
            } else {
              self.bulkDocs(
                {
                  docs: [doc],
                },
                opts,
                yankError(next, doc._id),
              )
            }
          }
        })
        AbstractPouchDB.prototype.putAttachment = adapterFun(
          'putAttachment',
          function(docId, attachmentId, rev, blob, type) {
            var api = this

            if (typeof type === 'function') {
              type = blob
              blob = rev
              rev = null
            } // Lets fix in https://github.com/pouchdb/pouchdb/issues/3267

            /* istanbul ignore if */

            if (typeof type === 'undefined') {
              type = blob
              blob = rev
              rev = null
            }

            if (!type) {
              guardedConsole(
                'warn',
                'Attachment',
                attachmentId,
                'on document',
                docId,
                'is missing content_type',
              )
            }

            function createAttachment(doc) {
              var prevrevpos = '_rev' in doc ? parseInt(doc._rev, 10) : 0
              doc._attachments = doc._attachments || {}
              doc._attachments[attachmentId] = {
                content_type: type,
                data: blob,
                revpos: ++prevrevpos,
              }
              return api.put(doc)
            }

            return api.get(docId).then(
              function(doc) {
                if (doc._rev !== rev) {
                  throw createError(REV_CONFLICT)
                }

                return createAttachment(doc)
              },
              function(err) {
                // create new doc

                /* istanbul ignore else */
                if (err.reason === MISSING_DOC.message) {
                  return createAttachment({
                    _id: docId,
                  })
                } else {
                  throw err
                }
              },
            )
          },
        )
        AbstractPouchDB.prototype.removeAttachment = adapterFun(
          'removeAttachment',
          function(docId, attachmentId, rev, callback) {
            var self = this
            self.get(docId, function(err, obj) {
              /* istanbul ignore if */
              if (err) {
                callback(err)
                return
              }

              if (obj._rev !== rev) {
                callback(createError(REV_CONFLICT))
                return
              }
              /* istanbul ignore if */

              if (!obj._attachments) {
                return callback()
              }

              delete obj._attachments[attachmentId]

              if (Object.keys(obj._attachments).length === 0) {
                delete obj._attachments
              }

              self.put(obj, callback)
            })
          },
        )
        AbstractPouchDB.prototype.remove = adapterFun('remove', function(
          docOrId,
          optsOrRev,
          opts,
          callback,
        ) {
          var doc

          if (typeof optsOrRev === 'string') {
            // id, rev, opts, callback style
            doc = {
              _id: docOrId,
              _rev: optsOrRev,
            }

            if (typeof opts === 'function') {
              callback = opts
              opts = {}
            }
          } else {
            // doc, opts, callback style
            doc = docOrId

            if (typeof optsOrRev === 'function') {
              callback = optsOrRev
              opts = {}
            } else {
              callback = opts
              opts = optsOrRev
            }
          }

          opts = opts || {}
          opts.was_delete = true
          var newDoc = {
            _id: doc._id,
            _rev: doc._rev || opts.rev,
          }
          newDoc._deleted = true

          if (
            isLocalId(newDoc._id) &&
            typeof this._removeLocal === 'function'
          ) {
            return this._removeLocal(doc, callback)
          }

          this.bulkDocs(
            {
              docs: [newDoc],
            },
            opts,
            yankError(callback, newDoc._id),
          )
        })
        AbstractPouchDB.prototype.revsDiff = adapterFun(
          'revsDiff',
          function(req, opts, callback) {
            if (typeof opts === 'function') {
              callback = opts
              opts = {}
            }

            var ids = Object.keys(req)

            if (!ids.length) {
              return callback(null, {})
            }

            var count = 0
            var missing = new ExportedMap()

            function addToMissing(id, revId) {
              if (!missing.has(id)) {
                missing.set(id, {
                  missing: [],
                })
              }

              missing.get(id).missing.push(revId)
            }

            function processDoc(id, rev_tree) {
              // Is this fast enough? Maybe we should switch to a set simulated by a map
              var missingForId = req[id].slice(0)
              traverseRevTree(rev_tree, function(
                isLeaf,
                pos,
                revHash,
                ctx,
                opts,
              ) {
                var rev = pos + '-' + revHash
                var idx = missingForId.indexOf(rev)

                if (idx === -1) {
                  return
                }

                missingForId.splice(idx, 1)
                /* istanbul ignore if */

                if (opts.status !== 'available') {
                  addToMissing(id, rev)
                }
              }) // Traversing the tree is synchronous, so now `missingForId` contains
              // revisions that were not found in the tree

              missingForId.forEach(function(rev) {
                addToMissing(id, rev)
              })
            }

            ids.map(function(id) {
              this._getRevisionTree(id, function(err, rev_tree) {
                if (
                  err &&
                  err.status === 404 &&
                  err.message === 'missing'
                ) {
                  missing.set(id, {
                    missing: req[id],
                  })
                } else if (err) {
                  /* istanbul ignore next */
                  return callback(err)
                } else {
                  processDoc(id, rev_tree)
                }

                if (++count === ids.length) {
                  // convert LazyMap to object
                  var missingObj = {}
                  missing.forEach(function(value, key) {
                    missingObj[key] = value
                  })
                  return callback(null, missingObj)
                }
              })
            }, this)
          },
        ) // _bulk_get API for faster replication, as described in
        // https://github.com/apache/couchdb-chttpd/pull/33
        // At the "abstract" level, it will just run multiple get()s in
        // parallel, because this isn't much of a performance cost
        // for local databases (except the cost of multiple transactions, which is
        // small). The http adapter overrides this in order
        // to do a more efficient single HTTP request.

        AbstractPouchDB.prototype.bulkGet = adapterFun('bulkGet', function(
          opts,
          callback,
        ) {
          bulkGet(this, opts, callback)
        }) // compact one document and fire callback
        // by compacting we mean removing all revisions which
        // are further from the leaf in revision tree than max_height

        AbstractPouchDB.prototype.compactDocument = adapterFun(
          'compactDocument',
          function(docId, maxHeight, callback) {
            var self = this

            this._getRevisionTree(docId, function(err, revTree) {
              /* istanbul ignore if */
              if (err) {
                return callback(err)
              }

              var height = computeHeight(revTree)
              var candidates = []
              var revs = []
              Object.keys(height).forEach(function(rev) {
                if (height[rev] > maxHeight) {
                  candidates.push(rev)
                }
              })
              traverseRevTree(revTree, function(
                isLeaf,
                pos,
                revHash,
                ctx,
                opts,
              ) {
                var rev = pos + '-' + revHash

                if (
                  opts.status === 'available' &&
                  candidates.indexOf(rev) !== -1
                ) {
                  revs.push(rev)
                }
              })

              self._doCompaction(docId, revs, callback)
            })
          },
        ) // compact the whole database using single document
        // compaction

        AbstractPouchDB.prototype.compact = adapterFun('compact', function(
          opts,
          callback,
        ) {
          if (typeof opts === 'function') {
            callback = opts
            opts = {}
          }

          var self = this
          opts = opts || {}
          self._compactionQueue = self._compactionQueue || []

          self._compactionQueue.push({
            opts: opts,
            callback: callback,
          })

          if (self._compactionQueue.length === 1) {
            doNextCompaction(self)
          }
        })

        AbstractPouchDB.prototype._compact = function(opts, callback) {
          var self = this
          var changesOpts = {
            return_docs: false,
            last_seq: opts.last_seq || 0,
          }
          var promises = []

          function onChange(row) {
            promises.push(self.compactDocument(row.id, 0))
          }

          function onComplete(resp) {
            var lastSeq = resp.last_seq
            Promise.all(promises)
              .then(function() {
                return upsert(
                  self,
                  '_local/compaction',
                  function deltaFunc(doc) {
                    if (!doc.last_seq || doc.last_seq < lastSeq) {
                      doc.last_seq = lastSeq
                      return doc
                    }

                    return false // somebody else got here first, don't update
                  },
                )
              })
              .then(function() {
                callback(null, {
                  ok: true,
                })
              })
              .catch(callback)
          }

          self
            .changes(changesOpts)
            .on('change', onChange)
            .on('complete', onComplete)
            .on('error', callback)
        }
        /* Begin api wrappers. Specific functionality to storage belongs in the
   _[method] */

        AbstractPouchDB.prototype.get = adapterFun('get', function(
          id,
          opts,
          cb,
        ) {
          if (typeof opts === 'function') {
            cb = opts
            opts = {}
          }

          if (typeof id !== 'string') {
            return cb(createError(INVALID_ID))
          }

          if (isLocalId(id) && typeof this._getLocal === 'function') {
            return this._getLocal(id, cb)
          }

          var leaves = [],
            self = this

          function finishOpenRevs() {
            var result = []
            var count = leaves.length
            /* istanbul ignore if */

            if (!count) {
              return cb(null, result)
            } // order with open_revs is unspecified

            leaves.forEach(function(leaf) {
              self.get(
                id,
                {
                  rev: leaf,
                  revs: opts.revs,
                  latest: opts.latest,
                  attachments: opts.attachments,
                  binary: opts.binary,
                },
                function(err, doc) {
                  if (!err) {
                    // using latest=true can produce duplicates
                    var existing

                    for (var i = 0, l = result.length; i < l; i++) {
                      if (result[i].ok && result[i].ok._rev === doc._rev) {
                        existing = true
                        break
                      }
                    }

                    if (!existing) {
                      result.push({
                        ok: doc,
                      })
                    }
                  } else {
                    result.push({
                      missing: leaf,
                    })
                  }

                  count--

                  if (!count) {
                    cb(null, result)
                  }
                },
              )
            })
          }

          if (opts.open_revs) {
            if (opts.open_revs === 'all') {
              this._getRevisionTree(id, function(err, rev_tree) {
                /* istanbul ignore if */
                if (err) {
                  return cb(err)
                }

                leaves = collectLeaves(rev_tree).map(function(leaf) {
                  return leaf.rev
                })
                finishOpenRevs()
              })
            } else {
              if (Array.isArray(opts.open_revs)) {
                leaves = opts.open_revs

                for (var i = 0; i < leaves.length; i++) {
                  var l = leaves[i] // looks like it's the only thing couchdb checks

                  if (!(typeof l === 'string' && /^\d+-/.test(l))) {
                    return cb(createError(INVALID_REV))
                  }
                }

                finishOpenRevs()
              } else {
                return cb(createError(UNKNOWN_ERROR, 'function_clause'))
              }
            }

            return // open_revs does not like other options
          }

          return this._get(id, opts, function(err, result) {
            if (err) {
              err.docId = id
              return cb(err)
            }

            var doc = result.doc
            var metadata = result.metadata
            var ctx = result.ctx

            if (opts.conflicts) {
              var conflicts = collectConflicts(metadata)

              if (conflicts.length) {
                doc._conflicts = conflicts
              }
            }

            if (isDeleted(metadata, doc._rev)) {
              doc._deleted = true
            }

            if (opts.revs || opts.revs_info) {
              var splittedRev = doc._rev.split('-')

              var revNo = parseInt(splittedRev[0], 10)
              var revHash = splittedRev[1]
              var paths = rootToLeaf(metadata.rev_tree)
              var path = null

              for (var i = 0; i < paths.length; i++) {
                var currentPath = paths[i]
                var hashIndex = currentPath.ids
                  .map(function(x) {
                    return x.id
                  })
                  .indexOf(revHash)
                var hashFoundAtRevPos = hashIndex === revNo - 1

                if (hashFoundAtRevPos || (!path && hashIndex !== -1)) {
                  path = currentPath
                }
              }

              var indexOfRev =
                path.ids
                  .map(function(x) {
                    return x.id
                  })
                  .indexOf(doc._rev.split('-')[1]) + 1
              var howMany = path.ids.length - indexOfRev
              path.ids.splice(indexOfRev, howMany)
              path.ids.reverse()

              if (opts.revs) {
                doc._revisions = {
                  start: path.pos + path.ids.length - 1,
                  ids: path.ids.map(function(rev) {
                    return rev.id
                  }),
                }
              }

              if (opts.revs_info) {
                var pos = path.pos + path.ids.length
                doc._revs_info = path.ids.map(function(rev) {
                  pos--
                  return {
                    rev: pos + '-' + rev.id,
                    status: rev.opts.status,
                  }
                })
              }
            }

            if (opts.attachments && doc._attachments) {
              var attachments = doc._attachments
              var count = Object.keys(attachments).length

              if (count === 0) {
                return cb(null, doc)
              }

              Object.keys(attachments).forEach(function(key) {
                this._getAttachment(
                  doc._id,
                  key,
                  attachments[key],
                  {
                    // Previously the revision handling was done in adapter.js
                    // getAttachment, however since idb-next doesnt we need to
                    // pass the rev through
                    rev: doc._rev,
                    binary: opts.binary,
                    ctx: ctx,
                  },
                  function(err, data) {
                    var att = doc._attachments[key]
                    att.data = data
                    delete att.stub
                    delete att.length

                    if (!--count) {
                      cb(null, doc)
                    }
                  },
                )
              }, self)
            } else {
              if (doc._attachments) {
                for (var key in doc._attachments) {
                  /* istanbul ignore else */
                  if (doc._attachments.hasOwnProperty(key)) {
                    doc._attachments[key].stub = true
                  }
                }
              }

              cb(null, doc)
            }
          })
        }) // TODO: I dont like this, it forces an extra read for every
        // attachment read and enforces a confusing api between
        // adapter.js and the adapter implementation

        AbstractPouchDB.prototype.getAttachment = adapterFun(
          'getAttachment',
          function(docId, attachmentId, opts, callback) {
            var self = this

            if (opts instanceof Function) {
              callback = opts
              opts = {}
            }

            this._get(docId, opts, function(err, res) {
              if (err) {
                return callback(err)
              }

              if (
                res.doc._attachments &&
                res.doc._attachments[attachmentId]
              ) {
                opts.ctx = res.ctx
                opts.binary = true

                self._getAttachment(
                  docId,
                  attachmentId,
                  res.doc._attachments[attachmentId],
                  opts,
                  callback,
                )
              } else {
                return callback(createError(MISSING_DOC))
              }
            })
          },
        )
        AbstractPouchDB.prototype.allDocs = adapterFun('allDocs', function(
          opts,
          callback,
        ) {
          if (typeof opts === 'function') {
            callback = opts
            opts = {}
          }

          opts.skip = typeof opts.skip !== 'undefined' ? opts.skip : 0

          if (opts.start_key) {
            opts.startkey = opts.start_key
          }

          if (opts.end_key) {
            opts.endkey = opts.end_key
          }

          if ('keys' in opts) {
            if (!Array.isArray(opts.keys)) {
              return callback(
                new TypeError('options.keys must be an array'),
              )
            }

            var incompatibleOpt = ['startkey', 'endkey', 'key'].filter(
              function(incompatibleOpt) {
                return incompatibleOpt in opts
              },
            )[0]

            if (incompatibleOpt) {
              callback(
                createError(
                  QUERY_PARSE_ERROR,
                  'Query parameter `' +
                    incompatibleOpt +
                    '` is not compatible with multi-get',
                ),
              )
              return
            }

            if (!isRemote(this)) {
              allDocsKeysParse(opts)

              if (opts.keys.length === 0) {
                return this._allDocs(
                  {
                    limit: 0,
                  },
                  callback,
                )
              }
            }
          }

          return this._allDocs(opts, callback)
        })

        AbstractPouchDB.prototype.changes = function(opts, callback) {
          if (typeof opts === 'function') {
            callback = opts
            opts = {}
          }

          opts = opts || {} // By default set return_docs to false if the caller has opts.live = true,
          // this will prevent us from collecting the set of changes indefinitely
          // resulting in growing memory

          opts.return_docs =
            'return_docs' in opts ? opts.return_docs : !opts.live
          return new Changes$1(this, opts, callback)
        }

        AbstractPouchDB.prototype.close = adapterFun('close', function(
          callback,
        ) {
          this._closed = true
          this.emit('closed')
          return this._close(callback)
        })
        AbstractPouchDB.prototype.info = adapterFun('info', function(
          callback,
        ) {
          var self = this

          this._info(function(err, info) {
            if (err) {
              return callback(err)
            } // assume we know better than the adapter, unless it informs us

            info.db_name = info.db_name || self.name
            info.auto_compaction = !!(
              self.auto_compaction && !isRemote(self)
            )
            info.adapter = self.adapter
            callback(null, info)
          })
        })
        AbstractPouchDB.prototype.id = adapterFun('id', function(
          callback,
        ) {
          return this._id(callback)
        })
        /* istanbul ignore next */

        AbstractPouchDB.prototype.type = function() {
          return typeof this._type === 'function'
            ? this._type()
            : this.adapter
        }

        AbstractPouchDB.prototype.bulkDocs = adapterFun(
          'bulkDocs',
          function(req, opts, callback) {
            if (typeof opts === 'function') {
              callback = opts
              opts = {}
            }

            opts = opts || {}

            if (Array.isArray(req)) {
              req = {
                docs: req,
              }
            }

            if (!req || !req.docs || !Array.isArray(req.docs)) {
              return callback(createError(MISSING_BULK_DOCS))
            }

            for (var i = 0; i < req.docs.length; ++i) {
              if (
                typeof req.docs[i] !== 'object' ||
                Array.isArray(req.docs[i])
              ) {
                return callback(createError(NOT_AN_OBJECT))
              }
            }

            var attachmentError
            req.docs.forEach(function(doc) {
              if (doc._attachments) {
                Object.keys(doc._attachments).forEach(function(name) {
                  attachmentError =
                    attachmentError || attachmentNameError(name)

                  if (!doc._attachments[name].content_type) {
                    guardedConsole(
                      'warn',
                      'Attachment',
                      name,
                      'on document',
                      doc._id,
                      'is missing content_type',
                    )
                  }
                })
              }
            })

            if (attachmentError) {
              return callback(createError(BAD_REQUEST, attachmentError))
            }

            if (!('new_edits' in opts)) {
              if ('new_edits' in req) {
                opts.new_edits = req.new_edits
              } else {
                opts.new_edits = true
              }
            }

            var adapter = this

            if (!opts.new_edits && !isRemote(adapter)) {
              // ensure revisions of the same doc are sorted, so that
              // the local adapter processes them correctly (#2935)
              req.docs.sort(compareByIdThenRev)
            }

            cleanDocs(req.docs) // in the case of conflicts, we want to return the _ids to the user
            // however, the underlying adapter may destroy the docs array, so
            // create a copy here

            var ids = req.docs.map(function(doc) {
              return doc._id
            })
            return this._bulkDocs(req, opts, function(err, res) {
              if (err) {
                return callback(err)
              }

              if (!opts.new_edits) {
                // this is what couch does when new_edits is false
                res = res.filter(function(x) {
                  return x.error
                })
              } // add ids for error/conflict responses (not required for CouchDB)

              if (!isRemote(adapter)) {
                for (var i = 0, l = res.length; i < l; i++) {
                  res[i].id = res[i].id || ids[i]
                }
              }

              callback(null, res)
            })
          },
        )
        AbstractPouchDB.prototype.registerDependentDatabase = adapterFun(
          'registerDependentDatabase',
          function(dependentDb, callback) {
            var depDB = new this.constructor(dependentDb, this.__opts)

            function diffFun(doc) {
              doc.dependentDbs = doc.dependentDbs || {}

              if (doc.dependentDbs[dependentDb]) {
                return false // no update required
              }

              doc.dependentDbs[dependentDb] = true
              return doc
            }

            upsert(this, '_local/_pouch_dependentDbs', diffFun)
              .then(function() {
                callback(null, {
                  db: depDB,
                })
              })
              .catch(callback)
          },
        )
        AbstractPouchDB.prototype.destroy = adapterFun('destroy', function(
          opts,
          callback,
        ) {
          if (typeof opts === 'function') {
            callback = opts
            opts = {}
          }

          var self = this
          var usePrefix = 'use_prefix' in self ? self.use_prefix : true

          function destroyDb() {
            // call destroy method of the particular adaptor
            self._destroy(opts, function(err, resp) {
              if (err) {
                return callback(err)
              }

              self._destroyed = true
              self.emit('destroyed')
              callback(
                null,
                resp || {
                  ok: true,
                },
              )
            })
          }

          if (isRemote(self)) {
            // no need to check for dependent DBs if it's a remote DB
            return destroyDb()
          }

          self.get('_local/_pouch_dependentDbs', function(err, localDoc) {
            if (err) {
              /* istanbul ignore if */
              if (err.status !== 404) {
                return callback(err)
              } else {
                // no dependencies
                return destroyDb()
              }
            }

            var dependentDbs = localDoc.dependentDbs
            var PouchDB = self.constructor
            var deletedMap = Object.keys(dependentDbs).map(function(name) {
              // use_prefix is only false in the browser

              /* istanbul ignore next */
              var trueName = usePrefix
                ? name.replace(new RegExp('^' + PouchDB.prefix), '')
                : name
              return new PouchDB(trueName, self.__opts).destroy()
            })
            Promise.all(deletedMap).then(destroyDb, callback)
          })
        })

        function TaskQueue() {
          this.isReady = false
          this.failed = false
          this.queue = []
        }

        TaskQueue.prototype.execute = function() {
          var fun

          if (this.failed) {
            while ((fun = this.queue.shift())) {
              fun(this.failed)
            }
          } else {
            while ((fun = this.queue.shift())) {
              fun()
            }
          }
        }

        TaskQueue.prototype.fail = function(err) {
          this.failed = err
          this.execute()
        }

        TaskQueue.prototype.ready = function(db) {
          this.isReady = true
          this.db = db
          this.execute()
        }

        TaskQueue.prototype.addTask = function(fun) {
          this.queue.push(fun)

          if (this.failed) {
            this.execute()
          }
        }

        function parseAdapter(name, opts) {
          var match = name.match(/([a-z-]*):\/\/(.*)/)

          if (match) {
            // the http adapter expects the fully qualified name
            return {
              name: /https?/.test(match[1])
                ? match[1] + '://' + match[2]
                : match[2],
              adapter: match[1],
            }
          }

          var adapters = PouchDB.adapters
          var preferredAdapters = PouchDB.preferredAdapters
          var prefix = PouchDB.prefix
          var adapterName = opts.adapter

          if (!adapterName) {
            // automatically determine adapter
            for (var i = 0; i < preferredAdapters.length; ++i) {
              adapterName = preferredAdapters[i] // check for browsers that have been upgraded from websql-only to websql+idb

              /* istanbul ignore if */

              if (
                adapterName === 'idb' &&
                'websql' in adapters &&
                hasLocalStorage() &&
                localStorage['_pouch__websqldb_' + prefix + name]
              ) {
                // log it, because this can be confusing during development
                guardedConsole(
                  'log',
                  'PouchDB is downgrading "' +
                    name +
                    '" to WebSQL to' +
                    ' avoid data loss, because it was already opened with WebSQL.',
                )
                continue // keep using websql to avoid user data loss
              }

              break
            }
          }

          var adapter = adapters[adapterName] // if adapter is invalid, then an error will be thrown later

          var usePrefix =
            adapter && 'use_prefix' in adapter ? adapter.use_prefix : true
          return {
            name: usePrefix ? prefix + name : name,
            adapter: adapterName,
          }
        } // OK, so here's the deal. Consider this code:
        //     var db1 = new PouchDB('foo');
        //     var db2 = new PouchDB('foo');
        //     db1.destroy();
        // ^ these two both need to emit 'destroyed' events,
        // as well as the PouchDB constructor itself.
        // So we have one db object (whichever one got destroy() called on it)
        // responsible for emitting the initial event, which then gets emitted
        // by the constructor, which then broadcasts it to any other dbs
        // that may have been created with the same name.

        function prepareForDestruction(self) {
          function onDestroyed(from_constructor) {
            self.removeListener('closed', onClosed)

            if (!from_constructor) {
              self.constructor.emit('destroyed', self.name)
            }
          }

          function onClosed() {
            self.removeListener('destroyed', onDestroyed)
            self.constructor.emit('unref', self)
          }

          self.once('destroyed', onDestroyed)
          self.once('closed', onClosed)
          self.constructor.emit('ref', self)
        }

        ;(0, _inherits.default)(PouchDB, AbstractPouchDB)

        function PouchDB(name, opts) {
          // In Node our test suite only tests this for PouchAlt unfortunately

          /* istanbul ignore if */
          if (!(this instanceof PouchDB)) {
            return new PouchDB(name, opts)
          }

          var self = this
          opts = opts || {}

          if (name && typeof name === 'object') {
            opts = name
            name = opts.name
            delete opts.name
          }

          if (opts.deterministic_revs === undefined) {
            opts.deterministic_revs = true
          }

          this.__opts = opts = clone(opts)
          self.auto_compaction = opts.auto_compaction
          self.prefix = PouchDB.prefix

          if (typeof name !== 'string') {
            throw new Error('Missing/invalid DB name')
          }

          var prefixedName = (opts.prefix || '') + name
          var backend = parseAdapter(prefixedName, opts)
          opts.name = backend.name
          opts.adapter = opts.adapter || backend.adapter
          self.name = name
          self._adapter = opts.adapter
          PouchDB.emit('debug', [
            'adapter',
            'Picked adapter: ',
            opts.adapter,
          ])

          if (
            !PouchDB.adapters[opts.adapter] ||
            !PouchDB.adapters[opts.adapter].valid()
          ) {
            throw new Error('Invalid Adapter: ' + opts.adapter)
          }

          AbstractPouchDB.call(self)
          self.taskqueue = new TaskQueue()
          self.adapter = opts.adapter
          PouchDB.adapters[opts.adapter].call(self, opts, function(err) {
            if (err) {
              return self.taskqueue.fail(err)
            }

            prepareForDestruction(self)
            self.emit('created', self)
            PouchDB.emit('created', self.name)
            self.taskqueue.ready(self)
          })
        } // AbortController was introduced quite a while after fetch and
        // isnt required for PouchDB to function so polyfill if needed

        var a =
          typeof AbortController !== 'undefined'
            ? AbortController
            : function() {
                return {
                  abort: function() {},
                }
              }
        var f$1 = fetch
        var h = Headers
        PouchDB.adapters = {}
        PouchDB.preferredAdapters = []
        PouchDB.prefix = '_pouch_'
        var eventEmitter = new _events.EventEmitter()

        function setUpEventEmitter(Pouch) {
          Object.keys(_events.EventEmitter.prototype).forEach(function(
            key,
          ) {
            if (
              typeof _events.EventEmitter.prototype[key] === 'function'
            ) {
              Pouch[key] = eventEmitter[key].bind(eventEmitter)
            }
          }) // these are created in constructor.js, and allow us to notify each DB with
          // the same name that it was destroyed, via the constructor object

          var destructListeners = (Pouch._destructionListeners = new ExportedMap())
          Pouch.on('ref', function onConstructorRef(db) {
            if (!destructListeners.has(db.name)) {
              destructListeners.set(db.name, [])
            }

            destructListeners.get(db.name).push(db)
          })
          Pouch.on('unref', function onConstructorUnref(db) {
            if (!destructListeners.has(db.name)) {
              return
            }

            var dbList = destructListeners.get(db.name)
            var pos = dbList.indexOf(db)

            if (pos < 0) {
              /* istanbul ignore next */
              return
            }

            dbList.splice(pos, 1)

            if (dbList.length > 1) {
              /* istanbul ignore next */
              destructListeners.set(db.name, dbList)
            } else {
              destructListeners.delete(db.name)
            }
          })
          Pouch.on('destroyed', function onConstructorDestroyed(name) {
            if (!destructListeners.has(name)) {
              return
            }

            var dbList = destructListeners.get(name)
            destructListeners.delete(name)
            dbList.forEach(function(db) {
              db.emit('destroyed', true)
            })
          })
        }

        setUpEventEmitter(PouchDB)

        PouchDB.adapter = function(id, obj, addToPreferredAdapters) {
          /* istanbul ignore else */
          if (obj.valid()) {
            PouchDB.adapters[id] = obj

            if (addToPreferredAdapters) {
              PouchDB.preferredAdapters.push(id)
            }
          }
        }

        PouchDB.plugin = function(obj) {
          if (typeof obj === 'function') {
            // function style for plugins
            obj(PouchDB)
          } else if (
            typeof obj !== 'object' ||
            Object.keys(obj).length === 0
          ) {
            throw new Error(
              'Invalid plugin: got "' +
                obj +
                '", expected an object or a function',
            )
          } else {
            Object.keys(obj).forEach(function(id) {
              // object style for plugins
              PouchDB.prototype[id] = obj[id]
            })
          }

          if (this.__defaults) {
            PouchDB.__defaults = $inject_Object_assign({}, this.__defaults)
          }

          return PouchDB
        }

        PouchDB.defaults = function(defaultOpts) {
          function PouchAlt(name, opts) {
            if (!(this instanceof PouchAlt)) {
              return new PouchAlt(name, opts)
            }

            opts = opts || {}

            if (name && typeof name === 'object') {
              opts = name
              name = opts.name
              delete opts.name
            }

            opts = $inject_Object_assign({}, PouchAlt.__defaults, opts)
            PouchDB.call(this, name, opts)
          }

          ;(0, _inherits.default)(PouchAlt, PouchDB)
          PouchAlt.preferredAdapters = PouchDB.preferredAdapters.slice()
          Object.keys(PouchDB).forEach(function(key) {
            if (!(key in PouchAlt)) {
              PouchAlt[key] = PouchDB[key]
            }
          }) // make default options transitive
          // https://github.com/pouchdb/pouchdb/issues/5922

          PouchAlt.__defaults = $inject_Object_assign(
            {},
            this.__defaults,
            defaultOpts,
          )
          return PouchAlt
        }

        PouchDB.fetch = function(url, opts) {
          return f$1(url, opts)
        } // managed automatically by set-version.js

        var version = '7.0.0' // this would just be "return doc[field]", but fields
        // can be "deep" due to dot notation

        function getFieldFromDoc(doc, parsedField) {
          var value = doc

          for (var i = 0, len = parsedField.length; i < len; i++) {
            var key = parsedField[i]
            value = value[key]

            if (!value) {
              break
            }
          }

          return value
        }

        function compare$1(left, right) {
          return left < right ? -1 : left > right ? 1 : 0
        } // Converts a string in dot notation to an array of its components, with backslash escaping

        function parseField(fieldName) {
          // fields may be deep (e.g. "foo.bar.baz"), so parse
          var fields = []
          var current = ''

          for (var i = 0, len = fieldName.length; i < len; i++) {
            var ch = fieldName[i]

            if (ch === '.') {
              if (i > 0 && fieldName[i - 1] === '\\') {
                // escaped delimiter
                current = current.substring(0, current.length - 1) + '.'
              } else {
                // not escaped, so delimiter
                fields.push(current)
                current = ''
              }
            } else {
              // normal character
              current += ch
            }
          }

          fields.push(current)
          return fields
        }

        var combinationFields = ['$or', '$nor', '$not']

        function isCombinationalField(field) {
          return combinationFields.indexOf(field) > -1
        }

        function getKey(obj) {
          return Object.keys(obj)[0]
        }

        function getValue(obj) {
          return obj[getKey(obj)]
        } // flatten an array of selectors joined by an $and operator

        function mergeAndedSelectors(selectors) {
          // sort to ensure that e.g. if the user specified
          // $and: [{$gt: 'a'}, {$gt: 'b'}], then it's collapsed into
          // just {$gt: 'b'}
          var res = {}
          selectors.forEach(function(selector) {
            Object.keys(selector).forEach(function(field) {
              var matcher = selector[field]

              if (typeof matcher !== 'object') {
                matcher = {
                  $eq: matcher,
                }
              }

              if (isCombinationalField(field)) {
                if (matcher instanceof Array) {
                  res[field] = matcher.map(function(m) {
                    return mergeAndedSelectors([m])
                  })
                } else {
                  res[field] = mergeAndedSelectors([matcher])
                }
              } else {
                var fieldMatchers = (res[field] = res[field] || {})
                Object.keys(matcher).forEach(function(operator) {
                  var value = matcher[operator]

                  if (operator === '$gt' || operator === '$gte') {
                    return mergeGtGte(operator, value, fieldMatchers)
                  } else if (operator === '$lt' || operator === '$lte') {
                    return mergeLtLte(operator, value, fieldMatchers)
                  } else if (operator === '$ne') {
                    return mergeNe(value, fieldMatchers)
                  } else if (operator === '$eq') {
                    return mergeEq(value, fieldMatchers)
                  }

                  fieldMatchers[operator] = value
                })
              }
            })
          })
          return res
        } // collapse logically equivalent gt/gte values

        function mergeGtGte(operator, value, fieldMatchers) {
          if (typeof fieldMatchers.$eq !== 'undefined') {
            return // do nothing
          }

          if (typeof fieldMatchers.$gte !== 'undefined') {
            if (operator === '$gte') {
              if (value > fieldMatchers.$gte) {
                // more specificity
                fieldMatchers.$gte = value
              }
            } else {
              // operator === '$gt'
              if (value >= fieldMatchers.$gte) {
                // more specificity
                delete fieldMatchers.$gte
                fieldMatchers.$gt = value
              }
            }
          } else if (typeof fieldMatchers.$gt !== 'undefined') {
            if (operator === '$gte') {
              if (value > fieldMatchers.$gt) {
                // more specificity
                delete fieldMatchers.$gt
                fieldMatchers.$gte = value
              }
            } else {
              // operator === '$gt'
              if (value > fieldMatchers.$gt) {
                // more specificity
                fieldMatchers.$gt = value
              }
            }
          } else {
            fieldMatchers[operator] = value
          }
        } // collapse logically equivalent lt/lte values

        function mergeLtLte(operator, value, fieldMatchers) {
          if (typeof fieldMatchers.$eq !== 'undefined') {
            return // do nothing
          }

          if (typeof fieldMatchers.$lte !== 'undefined') {
            if (operator === '$lte') {
              if (value < fieldMatchers.$lte) {
                // more specificity
                fieldMatchers.$lte = value
              }
            } else {
              // operator === '$gt'
              if (value <= fieldMatchers.$lte) {
                // more specificity
                delete fieldMatchers.$lte
                fieldMatchers.$lt = value
              }
            }
          } else if (typeof fieldMatchers.$lt !== 'undefined') {
            if (operator === '$lte') {
              if (value < fieldMatchers.$lt) {
                // more specificity
                delete fieldMatchers.$lt
                fieldMatchers.$lte = value
              }
            } else {
              // operator === '$gt'
              if (value < fieldMatchers.$lt) {
                // more specificity
                fieldMatchers.$lt = value
              }
            }
          } else {
            fieldMatchers[operator] = value
          }
        } // combine $ne values into one array

        function mergeNe(value, fieldMatchers) {
          if ('$ne' in fieldMatchers) {
            // there are many things this could "not" be
            fieldMatchers.$ne.push(value)
          } else {
            // doesn't exist yet
            fieldMatchers.$ne = [value]
          }
        } // add $eq into the mix

        function mergeEq(value, fieldMatchers) {
          // these all have less specificity than the $eq
          // TODO: check for user errors here
          delete fieldMatchers.$gt
          delete fieldMatchers.$gte
          delete fieldMatchers.$lt
          delete fieldMatchers.$lte
          delete fieldMatchers.$ne
          fieldMatchers.$eq = value
        } //
        // normalize the selector
        //

        function massageSelector(input) {
          var result = clone(input)
          var wasAnded = false

          if ('$and' in result) {
            result = mergeAndedSelectors(result['$and'])
            wasAnded = true
          }

          ;['$or', '$nor'].forEach(function(orOrNor) {
            if (orOrNor in result) {
              // message each individual selector
              // e.g. {foo: 'bar'} becomes {foo: {$eq: 'bar'}}
              result[orOrNor].forEach(function(subSelector) {
                var fields = Object.keys(subSelector)

                for (var i = 0; i < fields.length; i++) {
                  var field = fields[i]
                  var matcher = subSelector[field]

                  if (typeof matcher !== 'object' || matcher === null) {
                    subSelector[field] = {
                      $eq: matcher,
                    }
                  }
                }
              })
            }
          })

          if ('$not' in result) {
            //This feels a little like forcing, but it will work for now,
            //I would like to come back to this and make the merging of selectors a little more generic
            result['$not'] = mergeAndedSelectors([result['$not']])
          }

          var fields = Object.keys(result)

          for (var i = 0; i < fields.length; i++) {
            var field = fields[i]
            var matcher = result[field]

            if (typeof matcher !== 'object' || matcher === null) {
              matcher = {
                $eq: matcher,
              }
            } else if ('$ne' in matcher && !wasAnded) {
              // I put these in an array, since there may be more than one
              // but in the "mergeAnded" operation, I already take care of that
              matcher.$ne = [matcher.$ne]
            }

            result[field] = matcher
          }

          return result
        }

        function pad(str, padWith, upToLength) {
          var padding = ''
          var targetLength = upToLength - str.length
          /* istanbul ignore next */

          while (padding.length < targetLength) {
            padding += padWith
          }

          return padding
        }

        function padLeft(str, padWith, upToLength) {
          var padding = pad(str, padWith, upToLength)
          return padding + str
        }

        var MIN_MAGNITUDE = -324 // verified by -Number.MIN_VALUE

        var MAGNITUDE_DIGITS = 3 // ditto

        var SEP = '' // set to '_' for easier debugging

        function collate(a, b) {
          if (a === b) {
            return 0
          }

          a = normalizeKey(a)
          b = normalizeKey(b)
          var ai = collationIndex(a)
          var bi = collationIndex(b)

          if (ai - bi !== 0) {
            return ai - bi
          }

          switch (typeof a) {
            case 'number':
              return a - b

            case 'boolean':
              return a < b ? -1 : 1

            case 'string':
              return stringCollate(a, b)
          }

          return Array.isArray(a)
            ? arrayCollate(a, b)
            : objectCollate(a, b)
        } // couch considers null/NaN/Infinity/-Infinity === undefined,
        // for the purposes of mapreduce indexes. also, dates get stringified.

        function normalizeKey(key) {
          switch (typeof key) {
            case 'undefined':
              return null

            case 'number':
              if (key === Infinity || key === -Infinity || isNaN(key)) {
                return null
              }

              return key

            case 'object':
              var origKey = key

              if (Array.isArray(key)) {
                var len = key.length
                key = new Array(len)

                for (var i = 0; i < len; i++) {
                  key[i] = normalizeKey(origKey[i])
                }
                /* istanbul ignore next */
              } else if (key instanceof Date) {
                return key.toJSON()
              } else if (key !== null) {
                // generic object
                key = {}

                for (var k in origKey) {
                  if (origKey.hasOwnProperty(k)) {
                    var val = origKey[k]

                    if (typeof val !== 'undefined') {
                      key[k] = normalizeKey(val)
                    }
                  }
                }
              }
          }

          return key
        }

        function indexify(key) {
          if (key !== null) {
            switch (typeof key) {
              case 'boolean':
                return key ? 1 : 0

              case 'number':
                return numToIndexableString(key)

              case 'string':
                // We've to be sure that key does not contain \u0000
                // Do order-preserving replacements:
                // 0 -> 1, 1
                // 1 -> 1, 2
                // 2 -> 2, 2

                /* eslint-disable no-control-regex */
                return key
                  .replace(/\u0002/g, '\u0002\u0002')
                  .replace(/\u0001/g, '\u0001\u0002')
                  .replace(/\u0000/g, '\u0001\u0001')

              /* eslint-enable no-control-regex */

              case 'object':
                var isArray = Array.isArray(key)
                var arr = isArray ? key : Object.keys(key)
                var i = -1
                var len = arr.length
                var result = ''

                if (isArray) {
                  while (++i < len) {
                    result += toIndexableString(arr[i])
                  }
                } else {
                  while (++i < len) {
                    var objKey = arr[i]
                    result +=
                      toIndexableString(objKey) +
                      toIndexableString(key[objKey])
                  }
                }

                return result
            }
          }

          return ''
        } // convert the given key to a string that would be appropriate
        // for lexical sorting, e.g. within a database, where the
        // sorting is the same given by the collate() function.

        function toIndexableString(key) {
          var zero = '\u0000'
          key = normalizeKey(key)
          return collationIndex(key) + SEP + indexify(key) + zero
        }

        function parseNumber(str, i) {
          var originalIdx = i
          var num
          var zero = str[i] === '1'

          if (zero) {
            num = 0
            i++
          } else {
            var neg = str[i] === '0'
            i++
            var numAsString = ''
            var magAsString = str.substring(i, i + MAGNITUDE_DIGITS)
            var magnitude = parseInt(magAsString, 10) + MIN_MAGNITUDE
            /* istanbul ignore next */

            if (neg) {
              magnitude = -magnitude
            }

            i += MAGNITUDE_DIGITS

            while (true) {
              var ch = str[i]

              if (ch === '\u0000') {
                break
              } else {
                numAsString += ch
              }

              i++
            }

            numAsString = numAsString.split('.')

            if (numAsString.length === 1) {
              num = parseInt(numAsString, 10)
            } else {
              /* istanbul ignore next */
              num = parseFloat(numAsString[0] + '.' + numAsString[1])
            }
            /* istanbul ignore next */

            if (neg) {
              num = num - 10
            }
            /* istanbul ignore next */

            if (magnitude !== 0) {
              // parseFloat is more reliable than pow due to rounding errors
              // e.g. Number.MAX_VALUE would return Infinity if we did
              // num * Math.pow(10, magnitude);
              num = parseFloat(num + 'e' + magnitude)
            }
          }

          return {
            num: num,
            length: i - originalIdx,
          }
        } // move up the stack while parsing
        // this function moved outside of parseIndexableString for performance

        function pop(stack, metaStack) {
          var obj = stack.pop()

          if (metaStack.length) {
            var lastMetaElement = metaStack[metaStack.length - 1]

            if (obj === lastMetaElement.element) {
              // popping a meta-element, e.g. an object whose value is another object
              metaStack.pop()
              lastMetaElement = metaStack[metaStack.length - 1]
            }

            var element = lastMetaElement.element
            var lastElementIndex = lastMetaElement.index

            if (Array.isArray(element)) {
              element.push(obj)
            } else if (lastElementIndex === stack.length - 2) {
              // obj with key+value
              var key = stack.pop()
              element[key] = obj
            } else {
              stack.push(obj) // obj with key only
            }
          }
        }

        function parseIndexableString(str) {
          var stack = []
          var metaStack = [] // stack for arrays and objects

          var i = 0
          /*eslint no-constant-condition: ["error", { "checkLoops": false }]*/

          while (true) {
            var collationIndex = str[i++]

            if (collationIndex === '\u0000') {
              if (stack.length === 1) {
                return stack.pop()
              } else {
                pop(stack, metaStack)
                continue
              }
            }

            switch (collationIndex) {
              case '1':
                stack.push(null)
                break

              case '2':
                stack.push(str[i] === '1')
                i++
                break

              case '3':
                var parsedNum = parseNumber(str, i)
                stack.push(parsedNum.num)
                i += parsedNum.length
                break

              case '4':
                var parsedStr = ''
                /*eslint no-constant-condition: ["error", { "checkLoops": false }]*/

                while (true) {
                  var ch = str[i]

                  if (ch === '\u0000') {
                    break
                  }

                  parsedStr += ch
                  i++
                } // perform the reverse of the order-preserving replacement
                // algorithm (see above)

                /* eslint-disable no-control-regex */

                parsedStr = parsedStr
                  .replace(/\u0001\u0001/g, '\u0000')
                  .replace(/\u0001\u0002/g, '\u0001')
                  .replace(/\u0002\u0002/g, '\u0002')
                /* eslint-enable no-control-regex */

                stack.push(parsedStr)
                break

              case '5':
                var arrayElement = {
                  element: [],
                  index: stack.length,
                }
                stack.push(arrayElement.element)
                metaStack.push(arrayElement)
                break

              case '6':
                var objElement = {
                  element: {},
                  index: stack.length,
                }
                stack.push(objElement.element)
                metaStack.push(objElement)
                break

              /* istanbul ignore next */

              default:
                throw new Error(
                  'bad collationIndex or unexpectedly reached end of input: ' +
                    collationIndex,
                )
            }
          }
        }

        function arrayCollate(a, b) {
          var len = Math.min(a.length, b.length)

          for (var i = 0; i < len; i++) {
            var sort = collate(a[i], b[i])

            if (sort !== 0) {
              return sort
            }
          }

          return a.length === b.length ? 0 : a.length > b.length ? 1 : -1
        }

        function stringCollate(a, b) {
          // See: https://github.com/daleharvey/pouchdb/issues/40
          // This is incompatible with the CouchDB implementation, but its the
          // best we can do for now
          return a === b ? 0 : a > b ? 1 : -1
        }

        function objectCollate(a, b) {
          var ak = Object.keys(a),
            bk = Object.keys(b)
          var len = Math.min(ak.length, bk.length)

          for (var i = 0; i < len; i++) {
            // First sort the keys
            var sort = collate(ak[i], bk[i])

            if (sort !== 0) {
              return sort
            } // if the keys are equal sort the values

            sort = collate(a[ak[i]], b[bk[i]])

            if (sort !== 0) {
              return sort
            }
          }

          return ak.length === bk.length
            ? 0
            : ak.length > bk.length
            ? 1
            : -1
        } // The collation is defined by erlangs ordered terms
        // the atoms null, true, false come first, then numbers, strings,
        // arrays, then objects
        // null/undefined/NaN/Infinity/-Infinity are all considered null

        function collationIndex(x) {
          var id = ['boolean', 'number', 'string', 'object']
          var idx = id.indexOf(typeof x) //false if -1 otherwise true, but fast!!!!1

          if (~idx) {
            if (x === null) {
              return 1
            }

            if (Array.isArray(x)) {
              return 5
            }

            return idx < 3 ? idx + 2 : idx + 3
          }
          /* istanbul ignore next */

          if (Array.isArray(x)) {
            return 5
          }
        } // conversion:
        // x yyy zz...zz
        // x = 0 for negative, 1 for 0, 2 for positive
        // y = exponent (for negative numbers negated) moved so that it's >= 0
        // z = mantisse

        function numToIndexableString(num) {
          if (num === 0) {
            return '1'
          } // convert number to exponential format for easier and
          // more succinct string sorting

          var expFormat = num.toExponential().split(/e\+?/)
          var magnitude = parseInt(expFormat[1], 10)
          var neg = num < 0
          var result = neg ? '0' : '2' // first sort by magnitude
          // it's easier if all magnitudes are positive

          var magForComparison =
            (neg ? -magnitude : magnitude) - MIN_MAGNITUDE
          var magString = padLeft(
            magForComparison.toString(),
            '0',
            MAGNITUDE_DIGITS,
          )
          result += SEP + magString // then sort by the factor

          var factor = Math.abs(parseFloat(expFormat[0])) // [1..10)

          /* istanbul ignore next */

          if (neg) {
            // for negative reverse ordering
            factor = 10 - factor
          }

          var factorStr = factor.toFixed(20) // strip zeros from the end

          factorStr = factorStr.replace(/\.?0+$/, '')
          result += SEP + factorStr
          return result
        } // create a comparator based on the sort object

        function createFieldSorter(sort) {
          function getFieldValuesAsArray(doc) {
            return sort.map(function(sorting) {
              var fieldName = getKey(sorting)
              var parsedField = parseField(fieldName)
              var docFieldValue = getFieldFromDoc(doc, parsedField)
              return docFieldValue
            })
          }

          return function(aRow, bRow) {
            var aFieldValues = getFieldValuesAsArray(aRow.doc)
            var bFieldValues = getFieldValuesAsArray(bRow.doc)
            var collation = collate(aFieldValues, bFieldValues)

            if (collation !== 0) {
              return collation
            } // this is what mango seems to do

            return compare$1(aRow.doc._id, bRow.doc._id)
          }
        }

        function filterInMemoryFields(rows, requestDef, inMemoryFields) {
          rows = rows.filter(function(row) {
            return rowFilter(row.doc, requestDef.selector, inMemoryFields)
          })

          if (requestDef.sort) {
            // in-memory sort
            var fieldSorter = createFieldSorter(requestDef.sort)
            rows = rows.sort(fieldSorter)

            if (
              typeof requestDef.sort[0] !== 'string' &&
              getValue(requestDef.sort[0]) === 'desc'
            ) {
              rows = rows.reverse()
            }
          }

          if ('limit' in requestDef || 'skip' in requestDef) {
            // have to do the limit in-memory
            var skip = requestDef.skip || 0
            var limit =
              ('limit' in requestDef ? requestDef.limit : rows.length) +
              skip
            rows = rows.slice(skip, limit)
          }

          return rows
        }

        function rowFilter(doc, selector, inMemoryFields) {
          return inMemoryFields.every(function(field) {
            var matcher = selector[field]
            var parsedField = parseField(field)
            var docFieldValue = getFieldFromDoc(doc, parsedField)

            if (isCombinationalField(field)) {
              return matchCominationalSelector(field, matcher, doc)
            }

            return matchSelector(matcher, doc, parsedField, docFieldValue)
          })
        }

        function matchSelector(matcher, doc, parsedField, docFieldValue) {
          if (!matcher) {
            // no filtering necessary; this field is just needed for sorting
            return true
          }

          return Object.keys(matcher).every(function(userOperator) {
            var userValue = matcher[userOperator]
            return match(
              userOperator,
              doc,
              userValue,
              parsedField,
              docFieldValue,
            )
          })
        }

        function matchCominationalSelector(field, matcher, doc) {
          if (field === '$or') {
            return matcher.some(function(orMatchers) {
              return rowFilter(doc, orMatchers, Object.keys(orMatchers))
            })
          }

          if (field === '$not') {
            return !rowFilter(doc, matcher, Object.keys(matcher))
          } //`$nor`

          return !matcher.find(function(orMatchers) {
            return rowFilter(doc, orMatchers, Object.keys(orMatchers))
          })
        }

        function match(
          userOperator,
          doc,
          userValue,
          parsedField,
          docFieldValue,
        ) {
          if (!matchers[userOperator]) {
            throw new Error(
              'unknown operator "' +
                userOperator +
                '" - should be one of $eq, $lte, $lt, $gt, $gte, $exists, $ne, $in, ' +
                '$nin, $size, $mod, $regex, $elemMatch, $type, $allMatch or $all',
            )
          }

          return matchers[userOperator](
            doc,
            userValue,
            parsedField,
            docFieldValue,
          )
        }

        function fieldExists(docFieldValue) {
          return (
            typeof docFieldValue !== 'undefined' && docFieldValue !== null
          )
        }

        function fieldIsNotUndefined(docFieldValue) {
          return typeof docFieldValue !== 'undefined'
        }

        function modField(docFieldValue, userValue) {
          var divisor = userValue[0]
          var mod = userValue[1]

          if (divisor === 0) {
            throw new Error('Bad divisor, cannot divide by zero')
          }

          if (parseInt(divisor, 10) !== divisor) {
            throw new Error('Divisor is not an integer')
          }

          if (parseInt(mod, 10) !== mod) {
            throw new Error('Modulus is not an integer')
          }

          if (parseInt(docFieldValue, 10) !== docFieldValue) {
            return false
          }

          return docFieldValue % divisor === mod
        }

        function arrayContainsValue(docFieldValue, userValue) {
          return userValue.some(function(val) {
            if (docFieldValue instanceof Array) {
              return docFieldValue.indexOf(val) > -1
            }

            return docFieldValue === val
          })
        }

        function arrayContainsAllValues(docFieldValue, userValue) {
          return userValue.every(function(val) {
            return docFieldValue.indexOf(val) > -1
          })
        }

        function arraySize(docFieldValue, userValue) {
          return docFieldValue.length === userValue
        }

        function regexMatch(docFieldValue, userValue) {
          var re = new RegExp(userValue)
          return re.test(docFieldValue)
        }

        function typeMatch(docFieldValue, userValue) {
          switch (userValue) {
            case 'null':
              return docFieldValue === null

            case 'boolean':
              return typeof docFieldValue === 'boolean'

            case 'number':
              return typeof docFieldValue === 'number'

            case 'string':
              return typeof docFieldValue === 'string'

            case 'array':
              return docFieldValue instanceof Array

            case 'object':
              return {}.toString.call(docFieldValue) === '[object Object]'
          }

          throw new Error(
            userValue +
              ' not supported as a type.' +
              'Please use one of object, string, array, number, boolean or null.',
          )
        }

        var matchers = {
          $elemMatch: function(
            doc,
            userValue,
            parsedField,
            docFieldValue,
          ) {
            if (!Array.isArray(docFieldValue)) {
              return false
            }

            if (docFieldValue.length === 0) {
              return false
            }

            if (typeof docFieldValue[0] === 'object') {
              return docFieldValue.some(function(val) {
                return rowFilter(val, userValue, Object.keys(userValue))
              })
            }

            return docFieldValue.some(function(val) {
              return matchSelector(userValue, doc, parsedField, val)
            })
          },
          $allMatch: function(doc, userValue, parsedField, docFieldValue) {
            if (!Array.isArray(docFieldValue)) {
              return false
            }
            /* istanbul ignore next */

            if (docFieldValue.length === 0) {
              return false
            }

            if (typeof docFieldValue[0] === 'object') {
              return docFieldValue.every(function(val) {
                return rowFilter(val, userValue, Object.keys(userValue))
              })
            }

            return docFieldValue.every(function(val) {
              return matchSelector(userValue, doc, parsedField, val)
            })
          },
          $eq: function(doc, userValue, parsedField, docFieldValue) {
            return (
              fieldIsNotUndefined(docFieldValue) &&
              collate(docFieldValue, userValue) === 0
            )
          },
          $gte: function(doc, userValue, parsedField, docFieldValue) {
            return (
              fieldIsNotUndefined(docFieldValue) &&
              collate(docFieldValue, userValue) >= 0
            )
          },
          $gt: function(doc, userValue, parsedField, docFieldValue) {
            return (
              fieldIsNotUndefined(docFieldValue) &&
              collate(docFieldValue, userValue) > 0
            )
          },
          $lte: function(doc, userValue, parsedField, docFieldValue) {
            return (
              fieldIsNotUndefined(docFieldValue) &&
              collate(docFieldValue, userValue) <= 0
            )
          },
          $lt: function(doc, userValue, parsedField, docFieldValue) {
            return (
              fieldIsNotUndefined(docFieldValue) &&
              collate(docFieldValue, userValue) < 0
            )
          },
          $exists: function(doc, userValue, parsedField, docFieldValue) {
            //a field that is null is still considered to exist
            if (userValue) {
              return fieldIsNotUndefined(docFieldValue)
            }

            return !fieldIsNotUndefined(docFieldValue)
          },
          $mod: function(doc, userValue, parsedField, docFieldValue) {
            return (
              fieldExists(docFieldValue) &&
              modField(docFieldValue, userValue)
            )
          },
          $ne: function(doc, userValue, parsedField, docFieldValue) {
            return userValue.every(function(neValue) {
              return collate(docFieldValue, neValue) !== 0
            })
          },
          $in: function(doc, userValue, parsedField, docFieldValue) {
            return (
              fieldExists(docFieldValue) &&
              arrayContainsValue(docFieldValue, userValue)
            )
          },
          $nin: function(doc, userValue, parsedField, docFieldValue) {
            return (
              fieldExists(docFieldValue) &&
              !arrayContainsValue(docFieldValue, userValue)
            )
          },
          $size: function(doc, userValue, parsedField, docFieldValue) {
            return (
              fieldExists(docFieldValue) &&
              arraySize(docFieldValue, userValue)
            )
          },
          $all: function(doc, userValue, parsedField, docFieldValue) {
            return (
              Array.isArray(docFieldValue) &&
              arrayContainsAllValues(docFieldValue, userValue)
            )
          },
          $regex: function(doc, userValue, parsedField, docFieldValue) {
            return (
              fieldExists(docFieldValue) &&
              regexMatch(docFieldValue, userValue)
            )
          },
          $type: function(doc, userValue, parsedField, docFieldValue) {
            return typeMatch(docFieldValue, userValue)
          },
        } // return true if the given doc matches the supplied selector

        function matchesSelector(doc, selector) {
          /* istanbul ignore if */
          if (typeof selector !== 'object') {
            // match the CouchDB error message
            throw new Error('Selector error: expected a JSON object')
          }

          selector = massageSelector(selector)
          var row = {
            doc: doc,
          }
          var rowsMatched = filterInMemoryFields(
            [row],
            {
              selector: selector,
            },
            Object.keys(selector),
          )
          return rowsMatched && rowsMatched.length === 1
        }

        function evalFilter(input) {
          return scopeEval('"use strict";\nreturn ' + input + ';', {})
        }

        function evalView(input) {
          var code = [
            'return function(doc) {',
            '  "use strict";',
            '  var emitted = false;',
            '  var emit = function (a, b) {',
            '    emitted = true;',
            '  };',
            '  var view = ' + input + ';',
            '  view(doc);',
            '  if (emitted) {',
            '    return true;',
            '  }',
            '};',
          ].join('\n')
          return scopeEval(code, {})
        }

        function validate(opts, callback) {
          if (opts.selector) {
            if (opts.filter && opts.filter !== '_selector') {
              var filterName =
                typeof opts.filter === 'string' ? opts.filter : 'function'
              return callback(
                new Error(
                  'selector invalid for filter "' + filterName + '"',
                ),
              )
            }
          }

          callback()
        }

        function normalize(opts) {
          if (opts.view && !opts.filter) {
            opts.filter = '_view'
          }

          if (opts.selector && !opts.filter) {
            opts.filter = '_selector'
          }

          if (opts.filter && typeof opts.filter === 'string') {
            if (opts.filter === '_view') {
              opts.view = normalizeDesignDocFunctionName(opts.view)
            } else {
              opts.filter = normalizeDesignDocFunctionName(opts.filter)
            }
          }
        }

        function shouldFilter(changesHandler, opts) {
          return (
            opts.filter &&
            typeof opts.filter === 'string' &&
            !opts.doc_ids &&
            !isRemote(changesHandler.db)
          )
        }

        function filter(changesHandler, opts) {
          var callback = opts.complete

          if (opts.filter === '_view') {
            if (!opts.view || typeof opts.view !== 'string') {
              var err = createError(
                BAD_REQUEST,
                '`view` filter parameter not found or invalid.',
              )
              return callback(err)
            } // fetch a view from a design doc, make it behave like a filter

            var viewName = parseDesignDocFunctionName(opts.view)
            changesHandler.db.get('_design/' + viewName[0], function(
              err,
              ddoc,
            ) {
              /* istanbul ignore if */
              if (changesHandler.isCancelled) {
                return callback(null, {
                  status: 'cancelled',
                })
              }
              /* istanbul ignore next */

              if (err) {
                return callback(generateErrorFromResponse(err))
              }

              var mapFun =
                ddoc &&
                ddoc.views &&
                ddoc.views[viewName[1]] &&
                ddoc.views[viewName[1]].map

              if (!mapFun) {
                return callback(
                  createError(
                    MISSING_DOC,
                    ddoc.views
                      ? 'missing json key: ' + viewName[1]
                      : 'missing json key: views',
                  ),
                )
              }

              opts.filter = evalView(mapFun)
              changesHandler.doChanges(opts)
            })
          } else if (opts.selector) {
            opts.filter = function(doc) {
              return matchesSelector(doc, opts.selector)
            }

            changesHandler.doChanges(opts)
          } else {
            // fetch a filter from a design doc
            var filterName = parseDesignDocFunctionName(opts.filter)
            changesHandler.db.get('_design/' + filterName[0], function(
              err,
              ddoc,
            ) {
              /* istanbul ignore if */
              if (changesHandler.isCancelled) {
                return callback(null, {
                  status: 'cancelled',
                })
              }
              /* istanbul ignore next */

              if (err) {
                return callback(generateErrorFromResponse(err))
              }

              var filterFun =
                ddoc && ddoc.filters && ddoc.filters[filterName[1]]

              if (!filterFun) {
                return callback(
                  createError(
                    MISSING_DOC,
                    ddoc && ddoc.filters
                      ? 'missing json key: ' + filterName[1]
                      : 'missing json key: filters',
                  ),
                )
              }

              opts.filter = evalFilter(filterFun)
              changesHandler.doChanges(opts)
            })
          }
        }

        function applyChangesFilterPlugin(PouchDB) {
          PouchDB._changesFilterPlugin = {
            validate: validate,
            normalize: normalize,
            shouldFilter: shouldFilter,
            filter: filter,
          }
        } // TODO: remove from pouchdb-core (breaking)

        PouchDB.plugin(applyChangesFilterPlugin)
        PouchDB.version = version

        function toObject(array) {
          return array.reduce(function(obj, item) {
            obj[item] = true
            return obj
          }, {})
        } // List of top level reserved words for doc

        var reservedWords = toObject([
          '_id',
          '_rev',
          '_attachments',
          '_deleted',
          '_revisions',
          '_revs_info',
          '_conflicts',
          '_deleted_conflicts',
          '_local_seq',
          '_rev_tree', //replication documents
          '_replication_id',
          '_replication_state',
          '_replication_state_time',
          '_replication_state_reason',
          '_replication_stats', // Specific to Couchbase Sync Gateway
          '_removed',
        ]) // List of reserved words that should end up the document

        var dataWords = toObject([
          '_attachments', //replication documents
          '_replication_id',
          '_replication_state',
          '_replication_state_time',
          '_replication_state_reason',
          '_replication_stats',
        ])

        function parseRevisionInfo(rev) {
          if (!/^\d+-./.test(rev)) {
            return createError(INVALID_REV)
          }

          var idx = rev.indexOf('-')
          var left = rev.substring(0, idx)
          var right = rev.substring(idx + 1)
          return {
            prefix: parseInt(left, 10),
            id: right,
          }
        }

        function makeRevTreeFromRevisions(revisions, opts) {
          var pos = revisions.start - revisions.ids.length + 1
          var revisionIds = revisions.ids
          var ids = [revisionIds[0], opts, []]

          for (var i = 1, len = revisionIds.length; i < len; i++) {
            ids = [
              revisionIds[i],
              {
                status: 'missing',
              },
              [ids],
            ]
          }

          return [
            {
              pos: pos,
              ids: ids,
            },
          ]
        } // Preprocess documents, parse their revisions, assign an id and a
        // revision for new writes that are missing them, etc

        function parseDoc(doc, newEdits, dbOpts) {
          if (!dbOpts) {
            dbOpts = {
              deterministic_revs: true,
            }
          }

          var nRevNum
          var newRevId
          var revInfo
          var opts = {
            status: 'available',
          }

          if (doc._deleted) {
            opts.deleted = true
          }

          if (newEdits) {
            if (!doc._id) {
              doc._id = uuid()
            }

            newRevId = rev$$1(doc, dbOpts.deterministic_revs)

            if (doc._rev) {
              revInfo = parseRevisionInfo(doc._rev)

              if (revInfo.error) {
                return revInfo
              }

              doc._rev_tree = [
                {
                  pos: revInfo.prefix,
                  ids: [
                    revInfo.id,
                    {
                      status: 'missing',
                    },
                    [[newRevId, opts, []]],
                  ],
                },
              ]
              nRevNum = revInfo.prefix + 1
            } else {
              doc._rev_tree = [
                {
                  pos: 1,
                  ids: [newRevId, opts, []],
                },
              ]
              nRevNum = 1
            }
          } else {
            if (doc._revisions) {
              doc._rev_tree = makeRevTreeFromRevisions(
                doc._revisions,
                opts,
              )
              nRevNum = doc._revisions.start
              newRevId = doc._revisions.ids[0]
            }

            if (!doc._rev_tree) {
              revInfo = parseRevisionInfo(doc._rev)

              if (revInfo.error) {
                return revInfo
              }

              nRevNum = revInfo.prefix
              newRevId = revInfo.id
              doc._rev_tree = [
                {
                  pos: nRevNum,
                  ids: [newRevId, opts, []],
                },
              ]
            }
          }

          invalidIdError(doc._id)
          doc._rev = nRevNum + '-' + newRevId
          var result = {
            metadata: {},
            data: {},
          }

          for (var key in doc) {
            /* istanbul ignore else */
            if (Object.prototype.hasOwnProperty.call(doc, key)) {
              var specialKey = key[0] === '_'

              if (specialKey && !reservedWords[key]) {
                var error = createError(DOC_VALIDATION, key)
                error.message = DOC_VALIDATION.message + ': ' + key
                throw error
              } else if (specialKey && !dataWords[key]) {
                result.metadata[key.slice(1)] = doc[key]
              } else {
                result.data[key] = doc[key]
              }
            }
          }

          return result
        }

        function parseBase64(data) {
          try {
            return thisAtob(data)
          } catch (e) {
            var err = createError(
              BAD_ARG,
              'Attachment is not a valid base64 string',
            )
            return {
              error: err,
            }
          }
        }

        function preprocessString(att, blobType, callback) {
          var asBinary = parseBase64(att.data)

          if (asBinary.error) {
            return callback(asBinary.error)
          }

          att.length = asBinary.length

          if (blobType === 'blob') {
            att.data = binStringToBluffer(asBinary, att.content_type)
          } else if (blobType === 'base64') {
            att.data = thisBtoa(asBinary)
          } else {
            // binary
            att.data = asBinary
          }

          binaryMd5(asBinary, function(result) {
            att.digest = 'md5-' + result
            callback()
          })
        }

        function preprocessBlob(att, blobType, callback) {
          binaryMd5(att.data, function(md5) {
            att.digest = 'md5-' + md5 // size is for blobs (browser), length is for buffers (node)

            att.length = att.data.size || att.data.length || 0

            if (blobType === 'binary') {
              blobToBinaryString(att.data, function(binString) {
                att.data = binString
                callback()
              })
            } else if (blobType === 'base64') {
              blobToBase64(att.data, function(b64) {
                att.data = b64
                callback()
              })
            } else {
              callback()
            }
          })
        }

        function preprocessAttachment(att, blobType, callback) {
          if (att.stub) {
            return callback()
          }

          if (typeof att.data === 'string') {
            // input is a base64 string
            preprocessString(att, blobType, callback)
          } else {
            // input is a blob
            preprocessBlob(att, blobType, callback)
          }
        }

        function preprocessAttachments(docInfos, blobType, callback) {
          if (!docInfos.length) {
            return callback()
          }

          var docv = 0
          var overallErr
          docInfos.forEach(function(docInfo) {
            var attachments =
              docInfo.data && docInfo.data._attachments
                ? Object.keys(docInfo.data._attachments)
                : []
            var recv = 0

            if (!attachments.length) {
              return done()
            }

            function processedAttachment(err) {
              overallErr = err
              recv++

              if (recv === attachments.length) {
                done()
              }
            }

            for (var key in docInfo.data._attachments) {
              if (docInfo.data._attachments.hasOwnProperty(key)) {
                preprocessAttachment(
                  docInfo.data._attachments[key],
                  blobType,
                  processedAttachment,
                )
              }
            }
          })

          function done() {
            docv++

            if (docInfos.length === docv) {
              if (overallErr) {
                callback(overallErr)
              } else {
                callback()
              }
            }
          }
        }

        function updateDoc(
          revLimit,
          prev,
          docInfo,
          results,
          i,
          cb,
          writeDoc,
          newEdits,
        ) {
          if (
            revExists(prev.rev_tree, docInfo.metadata.rev) &&
            !newEdits
          ) {
            results[i] = docInfo
            return cb()
          } // sometimes this is pre-calculated. historically not always

          var previousWinningRev = prev.winningRev || winningRev(prev)
          var previouslyDeleted =
            'deleted' in prev
              ? prev.deleted
              : isDeleted(prev, previousWinningRev)
          var deleted =
            'deleted' in docInfo.metadata
              ? docInfo.metadata.deleted
              : isDeleted(docInfo.metadata)
          var isRoot = /^1-/.test(docInfo.metadata.rev)

          if (previouslyDeleted && !deleted && newEdits && isRoot) {
            var newDoc = docInfo.data
            newDoc._rev = previousWinningRev
            newDoc._id = docInfo.metadata.id
            docInfo = parseDoc(newDoc, newEdits)
          }

          var merged = merge(
            prev.rev_tree,
            docInfo.metadata.rev_tree[0],
            revLimit,
          )
          var inConflict =
            newEdits &&
            ((previouslyDeleted &&
              deleted &&
              merged.conflicts !== 'new_leaf') ||
              (!previouslyDeleted && merged.conflicts !== 'new_leaf') ||
              (previouslyDeleted &&
                !deleted &&
                merged.conflicts === 'new_branch'))

          if (inConflict) {
            var err = createError(REV_CONFLICT)
            results[i] = err
            return cb()
          }

          var newRev = docInfo.metadata.rev
          docInfo.metadata.rev_tree = merged.tree
          docInfo.stemmedRevs = merged.stemmedRevs || []
          /* istanbul ignore else */

          if (prev.rev_map) {
            docInfo.metadata.rev_map = prev.rev_map // used only by leveldb
          } // recalculate

          var winningRev$$1 = winningRev(docInfo.metadata)
          var winningRevIsDeleted = isDeleted(
            docInfo.metadata,
            winningRev$$1,
          ) // calculate the total number of documents that were added/removed,
          // from the perspective of total_rows/doc_count

          var delta =
            previouslyDeleted === winningRevIsDeleted
              ? 0
              : previouslyDeleted < winningRevIsDeleted
              ? -1
              : 1
          var newRevIsDeleted

          if (newRev === winningRev$$1) {
            // if the new rev is the same as the winning rev, we can reuse that value
            newRevIsDeleted = winningRevIsDeleted
          } else {
            // if they're not the same, then we need to recalculate
            newRevIsDeleted = isDeleted(docInfo.metadata, newRev)
          }

          writeDoc(
            docInfo,
            winningRev$$1,
            winningRevIsDeleted,
            newRevIsDeleted,
            true,
            delta,
            i,
            cb,
          )
        }

        function rootIsMissing(docInfo) {
          return docInfo.metadata.rev_tree[0].ids[1].status === 'missing'
        }

        function processDocs(
          revLimit,
          docInfos,
          api,
          fetchedDocs,
          tx,
          results,
          writeDoc,
          opts,
          overallCallback,
        ) {
          // Default to 1000 locally
          revLimit = revLimit || 1000

          function insertDoc(docInfo, resultsIdx, callback) {
            // Cant insert new deleted documents
            var winningRev$$1 = winningRev(docInfo.metadata)
            var deleted = isDeleted(docInfo.metadata, winningRev$$1)

            if ('was_delete' in opts && deleted) {
              results[resultsIdx] = createError(MISSING_DOC, 'deleted')
              return callback()
            } // 4712 - detect whether a new document was inserted with a _rev

            var inConflict = newEdits && rootIsMissing(docInfo)

            if (inConflict) {
              var err = createError(REV_CONFLICT)
              results[resultsIdx] = err
              return callback()
            }

            var delta = deleted ? 0 : 1
            writeDoc(
              docInfo,
              winningRev$$1,
              deleted,
              deleted,
              false,
              delta,
              resultsIdx,
              callback,
            )
          }

          var newEdits = opts.new_edits
          var idsToDocs = new ExportedMap()
          var docsDone = 0
          var docsToDo = docInfos.length

          function checkAllDocsDone() {
            if (++docsDone === docsToDo && overallCallback) {
              overallCallback()
            }
          }

          docInfos.forEach(function(currentDoc, resultsIdx) {
            if (currentDoc._id && isLocalId(currentDoc._id)) {
              var fun = currentDoc._deleted ? '_removeLocal' : '_putLocal'
              api[fun](
                currentDoc,
                {
                  ctx: tx,
                },
                function(err, res) {
                  results[resultsIdx] = err || res
                  checkAllDocsDone()
                },
              )
              return
            }

            var id = currentDoc.metadata.id

            if (idsToDocs.has(id)) {
              docsToDo-- // duplicate

              idsToDocs.get(id).push([currentDoc, resultsIdx])
            } else {
              idsToDocs.set(id, [[currentDoc, resultsIdx]])
            }
          }) // in the case of new_edits, the user can provide multiple docs
          // with the same id. these need to be processed sequentially

          idsToDocs.forEach(function(docs, id) {
            var numDone = 0

            function docWritten() {
              if (++numDone < docs.length) {
                nextDoc()
              } else {
                checkAllDocsDone()
              }
            }

            function nextDoc() {
              var value = docs[numDone]
              var currentDoc = value[0]
              var resultsIdx = value[1]

              if (fetchedDocs.has(id)) {
                updateDoc(
                  revLimit,
                  fetchedDocs.get(id),
                  currentDoc,
                  results,
                  resultsIdx,
                  docWritten,
                  writeDoc,
                  newEdits,
                )
              } else {
                // Ensure stemming applies to new writes as well
                var merged = merge(
                  [],
                  currentDoc.metadata.rev_tree[0],
                  revLimit,
                )
                currentDoc.metadata.rev_tree = merged.tree
                currentDoc.stemmedRevs = merged.stemmedRevs || []
                insertDoc(currentDoc, resultsIdx, docWritten)
              }
            }

            nextDoc()
          })
        } // IndexedDB requires a versioned database structure, so we use the
        // version here to manage migrations.

        var ADAPTER_VERSION = 5 // The object stores created for each database
        // DOC_STORE stores the document meta data, its revision history and state
        // Keyed by document id

        var DOC_STORE = 'document-store' // BY_SEQ_STORE stores a particular version of a document, keyed by its
        // sequence id

        var BY_SEQ_STORE = 'by-sequence' // Where we store attachments

        var ATTACH_STORE = 'attach-store' // Where we store many-to-many relations
        // between attachment digests and seqs

        var ATTACH_AND_SEQ_STORE = 'attach-seq-store' // Where we store database-wide meta data in a single record
        // keyed by id: META_STORE

        var META_STORE = 'meta-store' // Where we store local documents

        var LOCAL_STORE = 'local-store' // Where we detect blob support

        var DETECT_BLOB_SUPPORT_STORE = 'detect-blob-support'

        function safeJsonParse(str) {
          // This try/catch guards against stack overflow errors.
          // JSON.parse() is faster than vuvuzela.parse() but vuvuzela
          // cannot overflow.
          try {
            return JSON.parse(str)
          } catch (e) {
            /* istanbul ignore next */
            return _vuvuzela.default.parse(str)
          }
        }

        function safeJsonStringify(json) {
          try {
            return JSON.stringify(json)
          } catch (e) {
            /* istanbul ignore next */
            return _vuvuzela.default.stringify(json)
          }
        }

        function idbError(callback) {
          return function(evt) {
            var message = 'unknown_error'

            if (evt.target && evt.target.error) {
              message = evt.target.error.name || evt.target.error.message
            }

            callback(createError(IDB_ERROR, message, evt.type))
          }
        } // Unfortunately, the metadata has to be stringified
        // when it is put into the database, because otherwise
        // IndexedDB can throw errors for deeply-nested objects.
        // Originally we just used JSON.parse/JSON.stringify; now
        // we use this custom vuvuzela library that avoids recursion.
        // If we could do it all over again, we'd probably use a
        // format for the revision trees other than JSON.

        function encodeMetadata(metadata, winningRev, deleted) {
          return {
            data: safeJsonStringify(metadata),
            winningRev: winningRev,
            deletedOrLocal: deleted ? '1' : '0',
            seq: metadata.seq,
            // highest seq for this doc
            id: metadata.id,
          }
        }

        function decodeMetadata(storedObject) {
          if (!storedObject) {
            return null
          }

          var metadata = safeJsonParse(storedObject.data)
          metadata.winningRev = storedObject.winningRev
          metadata.deleted = storedObject.deletedOrLocal === '1'
          metadata.seq = storedObject.seq
          return metadata
        } // read the doc back out from the database. we don't store the
        // _id or _rev because we already have _doc_id_rev.

        function decodeDoc(doc) {
          if (!doc) {
            return doc
          }

          var idx = doc._doc_id_rev.lastIndexOf(':')

          doc._id = doc._doc_id_rev.substring(0, idx - 1)
          doc._rev = doc._doc_id_rev.substring(idx + 1)
          delete doc._doc_id_rev
          return doc
        } // Read a blob from the database, encoding as necessary
        // and translating from base64 if the IDB doesn't support
        // native Blobs

        function readBlobData(body, type, asBlob, callback) {
          if (asBlob) {
            if (!body) {
              callback(
                createBlob([''], {
                  type: type,
                }),
              )
            } else if (typeof body !== 'string') {
              // we have blob support
              callback(body)
            } else {
              // no blob support
              callback(b64ToBluffer(body, type))
            }
          } else {
            // as base64 string
            if (!body) {
              callback('')
            } else if (typeof body !== 'string') {
              // we have blob support
              readAsBinaryString(body, function(binary) {
                callback(thisBtoa(binary))
              })
            } else {
              // no blob support
              callback(body)
            }
          }
        }

        function fetchAttachmentsIfNecessary(doc, opts, txn, cb) {
          var attachments = Object.keys(doc._attachments || {})

          if (!attachments.length) {
            return cb && cb()
          }

          var numDone = 0

          function checkDone() {
            if (++numDone === attachments.length && cb) {
              cb()
            }
          }

          function fetchAttachment(doc, att) {
            var attObj = doc._attachments[att]
            var digest = attObj.digest
            var req = txn.objectStore(ATTACH_STORE).get(digest)

            req.onsuccess = function(e) {
              attObj.body = e.target.result.body
              checkDone()
            }
          }

          attachments.forEach(function(att) {
            if (opts.attachments && opts.include_docs) {
              fetchAttachment(doc, att)
            } else {
              doc._attachments[att].stub = true
              checkDone()
            }
          })
        } // IDB-specific postprocessing necessary because
        // we don't know whether we stored a true Blob or
        // a base64-encoded string, and if it's a Blob it
        // needs to be read outside of the transaction context

        function postProcessAttachments(results, asBlob) {
          return Promise.all(
            results.map(function(row) {
              if (row.doc && row.doc._attachments) {
                var attNames = Object.keys(row.doc._attachments)
                return Promise.all(
                  attNames.map(function(att) {
                    var attObj = row.doc._attachments[att]

                    if (!('body' in attObj)) {
                      // already processed
                      return
                    }

                    var body = attObj.body
                    var type = attObj.content_type
                    return new Promise(function(resolve) {
                      readBlobData(body, type, asBlob, function(data) {
                        row.doc._attachments[att] = $inject_Object_assign(
                          pick(attObj, ['digest', 'content_type']),
                          {
                            data: data,
                          },
                        )
                        resolve()
                      })
                    })
                  }),
                )
              }
            }),
          )
        }

        function compactRevs(revs, docId, txn) {
          var possiblyOrphanedDigests = []
          var seqStore = txn.objectStore(BY_SEQ_STORE)
          var attStore = txn.objectStore(ATTACH_STORE)
          var attAndSeqStore = txn.objectStore(ATTACH_AND_SEQ_STORE)
          var count = revs.length

          function checkDone() {
            count--

            if (!count) {
              // done processing all revs
              deleteOrphanedAttachments()
            }
          }

          function deleteOrphanedAttachments() {
            if (!possiblyOrphanedDigests.length) {
              return
            }

            possiblyOrphanedDigests.forEach(function(digest) {
              var countReq = attAndSeqStore
                .index('digestSeq')
                .count(
                  IDBKeyRange.bound(
                    digest + '::',
                    digest + '::\uffff',
                    false,
                    false,
                  ),
                )

              countReq.onsuccess = function(e) {
                var count = e.target.result

                if (!count) {
                  // orphaned
                  attStore.delete(digest)
                }
              }
            })
          }

          revs.forEach(function(rev) {
            var index = seqStore.index('_doc_id_rev')
            var key = docId + '::' + rev

            index.getKey(key).onsuccess = function(e) {
              var seq = e.target.result

              if (typeof seq !== 'number') {
                return checkDone()
              }

              seqStore.delete(seq)
              var cursor = attAndSeqStore
                .index('seq')
                .openCursor(IDBKeyRange.only(seq))

              cursor.onsuccess = function(event) {
                var cursor = event.target.result

                if (cursor) {
                  var digest = cursor.value.digestSeq.split('::')[0]
                  possiblyOrphanedDigests.push(digest)
                  attAndSeqStore.delete(cursor.primaryKey)
                  cursor.continue()
                } else {
                  // done
                  checkDone()
                }
              }
            }
          })
        }

        function openTransactionSafely(idb, stores, mode) {
          try {
            return {
              txn: idb.transaction(stores, mode),
            }
          } catch (err) {
            return {
              error: err,
            }
          }
        }

        var changesHandler = new Changes()

        function idbBulkDocs(dbOpts, req, opts, api, idb, callback) {
          var docInfos = req.docs
          var txn
          var docStore
          var bySeqStore
          var attachStore
          var attachAndSeqStore
          var metaStore
          var docInfoError
          var metaDoc

          for (var i = 0, len = docInfos.length; i < len; i++) {
            var doc = docInfos[i]

            if (doc._id && isLocalId(doc._id)) {
              continue
            }

            doc = docInfos[i] = parseDoc(doc, opts.new_edits, dbOpts)

            if (doc.error && !docInfoError) {
              docInfoError = doc
            }
          }

          if (docInfoError) {
            return callback(docInfoError)
          }

          var allDocsProcessed = false
          var docCountDelta = 0
          var results = new Array(docInfos.length)
          var fetchedDocs = new ExportedMap()
          var preconditionErrored = false
          var blobType = api._meta.blobSupport ? 'blob' : 'base64'
          preprocessAttachments(docInfos, blobType, function(err) {
            if (err) {
              return callback(err)
            }

            startTransaction()
          })

          function startTransaction() {
            var stores = [
              DOC_STORE,
              BY_SEQ_STORE,
              ATTACH_STORE,
              LOCAL_STORE,
              ATTACH_AND_SEQ_STORE,
              META_STORE,
            ]
            var txnResult = openTransactionSafely(idb, stores, 'readwrite')

            if (txnResult.error) {
              return callback(txnResult.error)
            }

            txn = txnResult.txn
            txn.onabort = idbError(callback)
            txn.ontimeout = idbError(callback)
            txn.oncomplete = complete
            docStore = txn.objectStore(DOC_STORE)
            bySeqStore = txn.objectStore(BY_SEQ_STORE)
            attachStore = txn.objectStore(ATTACH_STORE)
            attachAndSeqStore = txn.objectStore(ATTACH_AND_SEQ_STORE)
            metaStore = txn.objectStore(META_STORE)

            metaStore.get(META_STORE).onsuccess = function(e) {
              metaDoc = e.target.result
              updateDocCountIfReady()
            }

            verifyAttachments(function(err) {
              if (err) {
                preconditionErrored = true
                return callback(err)
              }

              fetchExistingDocs()
            })
          }

          function onAllDocsProcessed() {
            allDocsProcessed = true
            updateDocCountIfReady()
          }

          function idbProcessDocs() {
            processDocs(
              dbOpts.revs_limit,
              docInfos,
              api,
              fetchedDocs,
              txn,
              results,
              writeDoc,
              opts,
              onAllDocsProcessed,
            )
          }

          function updateDocCountIfReady() {
            if (!metaDoc || !allDocsProcessed) {
              return
            } // caching the docCount saves a lot of time in allDocs() and
            // info(), which is why we go to all the trouble of doing this

            metaDoc.docCount += docCountDelta
            metaStore.put(metaDoc)
          }

          function fetchExistingDocs() {
            if (!docInfos.length) {
              return
            }

            var numFetched = 0

            function checkDone() {
              if (++numFetched === docInfos.length) {
                idbProcessDocs()
              }
            }

            function readMetadata(event) {
              var metadata = decodeMetadata(event.target.result)

              if (metadata) {
                fetchedDocs.set(metadata.id, metadata)
              }

              checkDone()
            }

            for (var i = 0, len = docInfos.length; i < len; i++) {
              var docInfo = docInfos[i]

              if (docInfo._id && isLocalId(docInfo._id)) {
                checkDone() // skip local docs

                continue
              }

              var req = docStore.get(docInfo.metadata.id)
              req.onsuccess = readMetadata
            }
          }

          function complete() {
            if (preconditionErrored) {
              return
            }

            changesHandler.notify(api._meta.name)
            callback(null, results)
          }

          function verifyAttachment(digest, callback) {
            var req = attachStore.get(digest)

            req.onsuccess = function(e) {
              if (!e.target.result) {
                var err = createError(
                  MISSING_STUB,
                  'unknown stub attachment with digest ' + digest,
                )
                err.status = 412
                callback(err)
              } else {
                callback()
              }
            }
          }

          function verifyAttachments(finish) {
            var digests = []
            docInfos.forEach(function(docInfo) {
              if (docInfo.data && docInfo.data._attachments) {
                Object.keys(docInfo.data._attachments).forEach(function(
                  filename,
                ) {
                  var att = docInfo.data._attachments[filename]

                  if (att.stub) {
                    digests.push(att.digest)
                  }
                })
              }
            })

            if (!digests.length) {
              return finish()
            }

            var numDone = 0
            var err

            function checkDone() {
              if (++numDone === digests.length) {
                finish(err)
              }
            }

            digests.forEach(function(digest) {
              verifyAttachment(digest, function(attErr) {
                if (attErr && !err) {
                  err = attErr
                }

                checkDone()
              })
            })
          }

          function writeDoc(
            docInfo,
            winningRev$$1,
            winningRevIsDeleted,
            newRevIsDeleted,
            isUpdate,
            delta,
            resultsIdx,
            callback,
          ) {
            docInfo.metadata.winningRev = winningRev$$1
            docInfo.metadata.deleted = winningRevIsDeleted
            var doc = docInfo.data
            doc._id = docInfo.metadata.id
            doc._rev = docInfo.metadata.rev

            if (newRevIsDeleted) {
              doc._deleted = true
            }

            var hasAttachments =
              doc._attachments && Object.keys(doc._attachments).length

            if (hasAttachments) {
              return writeAttachments(
                docInfo,
                winningRev$$1,
                winningRevIsDeleted,
                isUpdate,
                resultsIdx,
                callback,
              )
            }

            docCountDelta += delta
            updateDocCountIfReady()
            finishDoc(
              docInfo,
              winningRev$$1,
              winningRevIsDeleted,
              isUpdate,
              resultsIdx,
              callback,
            )
          }

          function finishDoc(
            docInfo,
            winningRev$$1,
            winningRevIsDeleted,
            isUpdate,
            resultsIdx,
            callback,
          ) {
            var doc = docInfo.data
            var metadata = docInfo.metadata
            doc._doc_id_rev = metadata.id + '::' + metadata.rev
            delete doc._id
            delete doc._rev

            function afterPutDoc(e) {
              var revsToDelete = docInfo.stemmedRevs || []

              if (isUpdate && api.auto_compaction) {
                revsToDelete = revsToDelete.concat(
                  compactTree(docInfo.metadata),
                )
              }

              if (revsToDelete && revsToDelete.length) {
                compactRevs(revsToDelete, docInfo.metadata.id, txn)
              }

              metadata.seq = e.target.result // Current _rev is calculated from _rev_tree on read
              // delete metadata.rev;

              var metadataToStore = encodeMetadata(
                metadata,
                winningRev$$1,
                winningRevIsDeleted,
              )
              var metaDataReq = docStore.put(metadataToStore)
              metaDataReq.onsuccess = afterPutMetadata
            }

            function afterPutDocError(e) {
              // ConstraintError, need to update, not put (see #1638 for details)
              e.preventDefault() // avoid transaction abort

              e.stopPropagation() // avoid transaction onerror

              var index = bySeqStore.index('_doc_id_rev')
              var getKeyReq = index.getKey(doc._doc_id_rev)

              getKeyReq.onsuccess = function(e) {
                var putReq = bySeqStore.put(doc, e.target.result)
                putReq.onsuccess = afterPutDoc
              }
            }

            function afterPutMetadata() {
              results[resultsIdx] = {
                ok: true,
                id: metadata.id,
                rev: metadata.rev,
              }
              fetchedDocs.set(docInfo.metadata.id, docInfo.metadata)
              insertAttachmentMappings(docInfo, metadata.seq, callback)
            }

            var putReq = bySeqStore.put(doc)
            putReq.onsuccess = afterPutDoc
            putReq.onerror = afterPutDocError
          }

          function writeAttachments(
            docInfo,
            winningRev$$1,
            winningRevIsDeleted,
            isUpdate,
            resultsIdx,
            callback,
          ) {
            var doc = docInfo.data
            var numDone = 0
            var attachments = Object.keys(doc._attachments)

            function collectResults() {
              if (numDone === attachments.length) {
                finishDoc(
                  docInfo,
                  winningRev$$1,
                  winningRevIsDeleted,
                  isUpdate,
                  resultsIdx,
                  callback,
                )
              }
            }

            function attachmentSaved() {
              numDone++
              collectResults()
            }

            attachments.forEach(function(key) {
              var att = docInfo.data._attachments[key]

              if (!att.stub) {
                var data = att.data
                delete att.data
                att.revpos = parseInt(winningRev$$1, 10)
                var digest = att.digest
                saveAttachment(digest, data, attachmentSaved)
              } else {
                numDone++
                collectResults()
              }
            })
          } // map seqs to attachment digests, which
          // we will need later during compaction

          function insertAttachmentMappings(docInfo, seq, callback) {
            var attsAdded = 0
            var attsToAdd = Object.keys(docInfo.data._attachments || {})

            if (!attsToAdd.length) {
              return callback()
            }

            function checkDone() {
              if (++attsAdded === attsToAdd.length) {
                callback()
              }
            }

            function add(att) {
              var digest = docInfo.data._attachments[att].digest
              var req = attachAndSeqStore.put({
                seq: seq,
                digestSeq: digest + '::' + seq,
              })
              req.onsuccess = checkDone

              req.onerror = function(e) {
                // this callback is for a constaint error, which we ignore
                // because this docid/rev has already been associated with
                // the digest (e.g. when new_edits == false)
                e.preventDefault() // avoid transaction abort

                e.stopPropagation() // avoid transaction onerror

                checkDone()
              }
            }

            for (var i = 0; i < attsToAdd.length; i++) {
              add(attsToAdd[i]) // do in parallel
            }
          }

          function saveAttachment(digest, data, callback) {
            var getKeyReq = attachStore.count(digest)

            getKeyReq.onsuccess = function(e) {
              var count = e.target.result

              if (count) {
                return callback() // already exists
              }

              var newAtt = {
                digest: digest,
                body: data,
              }
              var putReq = attachStore.put(newAtt)
              putReq.onsuccess = callback
            }
          }
        } // Abstraction over IDBCursor and getAll()/getAllKeys() that allows us to batch our operations
        // while falling back to a normal IDBCursor operation on browsers that don't support getAll() or
        // getAllKeys(). This allows for a much faster implementation than just straight-up cursors, because
        // we're not processing each document one-at-a-time.

        function runBatchedCursor(
          objectStore,
          keyRange,
          descending,
          batchSize,
          onBatch,
        ) {
          if (batchSize === -1) {
            batchSize = 1000
          } // Bail out of getAll()/getAllKeys() in the following cases:
          // 1) either method is unsupported - we need both
          // 2) batchSize is 1 (might as well use IDBCursor)
          // 3) descending – no real way to do this via getAll()/getAllKeys()

          var useGetAll =
            typeof objectStore.getAll === 'function' &&
            typeof objectStore.getAllKeys === 'function' &&
            batchSize > 1 &&
            !descending
          var keysBatch
          var valuesBatch
          var pseudoCursor

          function onGetAll(e) {
            valuesBatch = e.target.result

            if (keysBatch) {
              onBatch(keysBatch, valuesBatch, pseudoCursor)
            }
          }

          function onGetAllKeys(e) {
            keysBatch = e.target.result

            if (valuesBatch) {
              onBatch(keysBatch, valuesBatch, pseudoCursor)
            }
          }

          function continuePseudoCursor() {
            if (!keysBatch.length) {
              // no more results
              return onBatch()
            } // fetch next batch, exclusive start

            var lastKey = keysBatch[keysBatch.length - 1]
            var newKeyRange

            if (keyRange && keyRange.upper) {
              try {
                newKeyRange = IDBKeyRange.bound(
                  lastKey,
                  keyRange.upper,
                  true,
                  keyRange.upperOpen,
                )
              } catch (e) {
                if (e.name === 'DataError' && e.code === 0) {
                  return onBatch() // we're done, startkey and endkey are equal
                }
              }
            } else {
              newKeyRange = IDBKeyRange.lowerBound(lastKey, true)
            }

            keyRange = newKeyRange
            keysBatch = null
            valuesBatch = null
            objectStore.getAll(keyRange, batchSize).onsuccess = onGetAll
            objectStore.getAllKeys(
              keyRange,
              batchSize,
            ).onsuccess = onGetAllKeys
          }

          function onCursor(e) {
            var cursor = e.target.result

            if (!cursor) {
              // done
              return onBatch()
            } // regular IDBCursor acts like a batch where batch size is always 1

            onBatch([cursor.key], [cursor.value], cursor)
          }

          if (useGetAll) {
            pseudoCursor = {
              continue: continuePseudoCursor,
            }
            objectStore.getAll(keyRange, batchSize).onsuccess = onGetAll
            objectStore.getAllKeys(
              keyRange,
              batchSize,
            ).onsuccess = onGetAllKeys
          } else if (descending) {
            objectStore.openCursor(keyRange, 'prev').onsuccess = onCursor
          } else {
            objectStore.openCursor(keyRange).onsuccess = onCursor
          }
        } // simple shim for objectStore.getAll(), falling back to IDBCursor

        function getAll(objectStore, keyRange, onSuccess) {
          if (typeof objectStore.getAll === 'function') {
            // use native getAll
            objectStore.getAll(keyRange).onsuccess = onSuccess
            return
          } // fall back to cursors

          var values = []

          function onCursor(e) {
            var cursor = e.target.result

            if (cursor) {
              values.push(cursor.value)
              cursor.continue()
            } else {
              onSuccess({
                target: {
                  result: values,
                },
              })
            }
          }

          objectStore.openCursor(keyRange).onsuccess = onCursor
        }

        function allDocsKeys(keys, docStore, onBatch) {
          // It's not guaranted to be returned in right order
          var valuesBatch = new Array(keys.length)
          var count = 0
          keys.forEach(function(key, index) {
            docStore.get(key).onsuccess = function(event) {
              if (event.target.result) {
                valuesBatch[index] = event.target.result
              } else {
                valuesBatch[index] = {
                  key: key,
                  error: 'not_found',
                }
              }

              count++

              if (count === keys.length) {
                onBatch(keys, valuesBatch, {})
              }
            }
          })
        }

        function createKeyRange(
          start,
          end,
          inclusiveEnd,
          key,
          descending,
        ) {
          try {
            if (start && end) {
              if (descending) {
                return IDBKeyRange.bound(end, start, !inclusiveEnd, false)
              } else {
                return IDBKeyRange.bound(start, end, false, !inclusiveEnd)
              }
            } else if (start) {
              if (descending) {
                return IDBKeyRange.upperBound(start)
              } else {
                return IDBKeyRange.lowerBound(start)
              }
            } else if (end) {
              if (descending) {
                return IDBKeyRange.lowerBound(end, !inclusiveEnd)
              } else {
                return IDBKeyRange.upperBound(end, !inclusiveEnd)
              }
            } else if (key) {
              return IDBKeyRange.only(key)
            }
          } catch (e) {
            return {
              error: e,
            }
          }

          return null
        }

        function idbAllDocs(opts, idb, callback) {
          var start = 'startkey' in opts ? opts.startkey : false
          var end = 'endkey' in opts ? opts.endkey : false
          var key = 'key' in opts ? opts.key : false
          var keys = 'keys' in opts ? opts.keys : false
          var skip = opts.skip || 0
          var limit = typeof opts.limit === 'number' ? opts.limit : -1
          var inclusiveEnd = opts.inclusive_end !== false
          var keyRange
          var keyRangeError

          if (!keys) {
            keyRange = createKeyRange(
              start,
              end,
              inclusiveEnd,
              key,
              opts.descending,
            )
            keyRangeError = keyRange && keyRange.error

            if (
              keyRangeError &&
              !(
                keyRangeError.name === 'DataError' &&
                keyRangeError.code === 0
              )
            ) {
              // DataError with error code 0 indicates start is less than end, so
              // can just do an empty query. Else need to throw
              return callback(
                createError(
                  IDB_ERROR,
                  keyRangeError.name,
                  keyRangeError.message,
                ),
              )
            }
          }

          var stores = [DOC_STORE, BY_SEQ_STORE, META_STORE]

          if (opts.attachments) {
            stores.push(ATTACH_STORE)
          }

          var txnResult = openTransactionSafely(idb, stores, 'readonly')

          if (txnResult.error) {
            return callback(txnResult.error)
          }

          var txn = txnResult.txn
          txn.oncomplete = onTxnComplete
          txn.onabort = idbError(callback)
          var docStore = txn.objectStore(DOC_STORE)
          var seqStore = txn.objectStore(BY_SEQ_STORE)
          var metaStore = txn.objectStore(META_STORE)
          var docIdRevIndex = seqStore.index('_doc_id_rev')
          var results = []
          var docCount
          var updateSeq

          metaStore.get(META_STORE).onsuccess = function(e) {
            docCount = e.target.result.docCount
          }
          /* istanbul ignore if */

          if (opts.update_seq) {
            getMaxUpdateSeq(seqStore, function(e) {
              if (e.target.result && e.target.result.length > 0) {
                updateSeq = e.target.result[0]
              }
            })
          }

          function getMaxUpdateSeq(objectStore, onSuccess) {
            function onCursor(e) {
              var cursor = e.target.result
              var maxKey = undefined

              if (cursor && cursor.key) {
                maxKey = cursor.key
              }

              return onSuccess({
                target: {
                  result: [maxKey],
                },
              })
            }

            objectStore.openCursor(null, 'prev').onsuccess = onCursor
          } // if the user specifies include_docs=true, then we don't
          // want to block the main cursor while we're fetching the doc

          function fetchDocAsynchronously(metadata, row, winningRev$$1) {
            var key = metadata.id + '::' + winningRev$$1

            docIdRevIndex.get(key).onsuccess = function onGetDoc(e) {
              row.doc = decodeDoc(e.target.result) || {}

              if (opts.conflicts) {
                var conflicts = collectConflicts(metadata)

                if (conflicts.length) {
                  row.doc._conflicts = conflicts
                }
              }

              fetchAttachmentsIfNecessary(row.doc, opts, txn)
            }
          }

          function allDocsInner(winningRev$$1, metadata) {
            var row = {
              id: metadata.id,
              key: metadata.id,
              value: {
                rev: winningRev$$1,
              },
            }
            var deleted = metadata.deleted

            if (deleted) {
              if (keys) {
                results.push(row) // deleted docs are okay with "keys" requests

                row.value.deleted = true
                row.doc = null
              }
            } else if (skip-- <= 0) {
              results.push(row)

              if (opts.include_docs) {
                fetchDocAsynchronously(metadata, row, winningRev$$1)
              }
            }
          }

          function processBatch(batchValues) {
            for (var i = 0, len = batchValues.length; i < len; i++) {
              if (results.length === limit) {
                break
              }

              var batchValue = batchValues[i]

              if (batchValue.error && keys) {
                // key was not found with "keys" requests
                results.push(batchValue)
                continue
              }

              var metadata = decodeMetadata(batchValue)
              var winningRev$$1 = metadata.winningRev
              allDocsInner(winningRev$$1, metadata)
            }
          }

          function onBatch(batchKeys, batchValues, cursor) {
            if (!cursor) {
              return
            }

            processBatch(batchValues)

            if (results.length < limit) {
              cursor.continue()
            }
          }

          function onGetAll(e) {
            var values = e.target.result

            if (opts.descending) {
              values = values.reverse()
            }

            processBatch(values)
          }

          function onResultsReady() {
            var returnVal = {
              total_rows: docCount,
              offset: opts.skip,
              rows: results,
            }
            /* istanbul ignore if */

            if (opts.update_seq && updateSeq !== undefined) {
              returnVal.update_seq = updateSeq
            }

            callback(null, returnVal)
          }

          function onTxnComplete() {
            if (opts.attachments) {
              postProcessAttachments(results, opts.binary).then(
                onResultsReady,
              )
            } else {
              onResultsReady()
            }
          } // don't bother doing any requests if start > end or limit === 0

          if (keyRangeError || limit === 0) {
            return
          }

          if (keys) {
            return allDocsKeys(opts.keys, docStore, onBatch)
          }

          if (limit === -1) {
            // just fetch everything
            return getAll(docStore, keyRange, onGetAll)
          } // else do a cursor
          // choose a batch size based on the skip, since we'll need to skip that many

          runBatchedCursor(
            docStore,
            keyRange,
            opts.descending,
            limit + skip,
            onBatch,
          )
        } //
        // Blobs are not supported in all versions of IndexedDB, notably
        // Chrome <37 and Android <5. In those versions, storing a blob will throw.
        //
        // Various other blob bugs exist in Chrome v37-42 (inclusive).
        // Detecting them is expensive and confusing to users, and Chrome 37-42
        // is at very low usage worldwide, so we do a hacky userAgent check instead.
        //
        // content-type bug: https://code.google.com/p/chromium/issues/detail?id=408120
        // 404 bug: https://code.google.com/p/chromium/issues/detail?id=447916
        // FileReader bug: https://code.google.com/p/chromium/issues/detail?id=447836
        //

        function checkBlobSupport(txn) {
          return new Promise(function(resolve) {
            var blob$$1 = createBlob([''])
            var req = txn
              .objectStore(DETECT_BLOB_SUPPORT_STORE)
              .put(blob$$1, 'key')

            req.onsuccess = function() {
              var matchedChrome = navigator.userAgent.match(
                /Chrome\/(\d+)/,
              )
              var matchedEdge = navigator.userAgent.match(/Edge\//) // MS Edge pretends to be Chrome 42:
              // https://msdn.microsoft.com/en-us/library/hh869301%28v=vs.85%29.aspx

              resolve(
                matchedEdge ||
                  !matchedChrome ||
                  parseInt(matchedChrome[1], 10) >= 43,
              )
            }

            req.onerror = txn.onabort = function(e) {
              // If the transaction aborts now its due to not being able to
              // write to the database, likely due to the disk being full
              e.preventDefault()
              e.stopPropagation()
              resolve(false)
            }
          }).catch(function() {
            return false // error, so assume unsupported
          })
        }

        function countDocs(txn, cb) {
          var index = txn.objectStore(DOC_STORE).index('deletedOrLocal')

          index.count(IDBKeyRange.only('0')).onsuccess = function(e) {
            cb(e.target.result)
          }
        } // This task queue ensures that IDB open calls are done in their own tick

        var running = false
        var queue = []

        function tryCode(fun, err, res, PouchDB) {
          try {
            fun(err, res)
          } catch (err) {
            // Shouldn't happen, but in some odd cases
            // IndexedDB implementations might throw a sync
            // error, in which case this will at least log it.
            PouchDB.emit('error', err)
          }
        }

        function applyNext() {
          if (running || !queue.length) {
            return
          }

          running = true
          queue.shift()()
        }

        function enqueueTask(action, callback, PouchDB) {
          queue.push(function runAction() {
            action(function runCallback(err, res) {
              tryCode(callback, err, res, PouchDB)
              running = false
              ;(0, _immediate.default)(function runNext() {
                applyNext(PouchDB)
              })
            })
          })
          applyNext()
        }

        function changes(opts, api, dbName, idb) {
          opts = clone(opts)

          if (opts.continuous) {
            var id = dbName + ':' + uuid()
            changesHandler.addListener(dbName, id, api, opts)
            changesHandler.notify(dbName)
            return {
              cancel: function() {
                changesHandler.removeListener(dbName, id)
              },
            }
          }

          var docIds = opts.doc_ids && new ExportedSet(opts.doc_ids)
          opts.since = opts.since || 0
          var lastSeq = opts.since
          var limit = 'limit' in opts ? opts.limit : -1

          if (limit === 0) {
            limit = 1 // per CouchDB _changes spec
          }

          var results = []
          var numResults = 0
          var filter = filterChange(opts)
          var docIdsToMetadata = new ExportedMap()
          var txn
          var bySeqStore
          var docStore
          var docIdRevIndex

          function onBatch(batchKeys, batchValues, cursor) {
            if (!cursor || !batchKeys.length) {
              // done
              return
            }

            var winningDocs = new Array(batchKeys.length)
            var metadatas = new Array(batchKeys.length)

            function processMetadataAndWinningDoc(metadata, winningDoc) {
              var change = opts.processChange(winningDoc, metadata, opts)
              lastSeq = change.seq = metadata.seq
              var filtered = filter(change)

              if (typeof filtered === 'object') {
                // anything but true/false indicates error
                return Promise.reject(filtered)
              }

              if (!filtered) {
                return Promise.resolve()
              }

              numResults++

              if (opts.return_docs) {
                results.push(change)
              } // process the attachment immediately
              // for the benefit of live listeners

              if (opts.attachments && opts.include_docs) {
                return new Promise(function(resolve) {
                  fetchAttachmentsIfNecessary(
                    winningDoc,
                    opts,
                    txn,
                    function() {
                      postProcessAttachments([change], opts.binary).then(
                        function() {
                          resolve(change)
                        },
                      )
                    },
                  )
                })
              } else {
                return Promise.resolve(change)
              }
            }

            function onBatchDone() {
              var promises = []

              for (var i = 0, len = winningDocs.length; i < len; i++) {
                if (numResults === limit) {
                  break
                }

                var winningDoc = winningDocs[i]

                if (!winningDoc) {
                  continue
                }

                var metadata = metadatas[i]
                promises.push(
                  processMetadataAndWinningDoc(metadata, winningDoc),
                )
              }

              Promise.all(promises)
                .then(function(changes) {
                  for (var i = 0, len = changes.length; i < len; i++) {
                    if (changes[i]) {
                      opts.onChange(changes[i])
                    }
                  }
                })
                .catch(opts.complete)

              if (numResults !== limit) {
                cursor.continue()
              }
            } // Fetch all metadatas/winningdocs from this batch in parallel, then process
            // them all only once all data has been collected. This is done in parallel
            // because it's faster than doing it one-at-a-time.

            var numDone = 0
            batchValues.forEach(function(value, i) {
              var doc = decodeDoc(value)
              var seq = batchKeys[i]
              fetchWinningDocAndMetadata(doc, seq, function(
                metadata,
                winningDoc,
              ) {
                metadatas[i] = metadata
                winningDocs[i] = winningDoc

                if (++numDone === batchKeys.length) {
                  onBatchDone()
                }
              })
            })
          }

          function onGetMetadata(doc, seq, metadata, cb) {
            if (metadata.seq !== seq) {
              // some other seq is later
              return cb()
            }

            if (metadata.winningRev === doc._rev) {
              // this is the winning doc
              return cb(metadata, doc)
            } // fetch winning doc in separate request

            var docIdRev = doc._id + '::' + metadata.winningRev
            var req = docIdRevIndex.get(docIdRev)

            req.onsuccess = function(e) {
              cb(metadata, decodeDoc(e.target.result))
            }
          }

          function fetchWinningDocAndMetadata(doc, seq, cb) {
            if (docIds && !docIds.has(doc._id)) {
              return cb()
            }

            var metadata = docIdsToMetadata.get(doc._id)

            if (metadata) {
              // cached
              return onGetMetadata(doc, seq, metadata, cb)
            } // metadata not cached, have to go fetch it

            docStore.get(doc._id).onsuccess = function(e) {
              metadata = decodeMetadata(e.target.result)
              docIdsToMetadata.set(doc._id, metadata)
              onGetMetadata(doc, seq, metadata, cb)
            }
          }

          function finish() {
            opts.complete(null, {
              results: results,
              last_seq: lastSeq,
            })
          }

          function onTxnComplete() {
            if (!opts.continuous && opts.attachments) {
              // cannot guarantee that postProcessing was already done,
              // so do it again
              postProcessAttachments(results).then(finish)
            } else {
              finish()
            }
          }

          var objectStores = [DOC_STORE, BY_SEQ_STORE]

          if (opts.attachments) {
            objectStores.push(ATTACH_STORE)
          }

          var txnResult = openTransactionSafely(
            idb,
            objectStores,
            'readonly',
          )

          if (txnResult.error) {
            return opts.complete(txnResult.error)
          }

          txn = txnResult.txn
          txn.onabort = idbError(opts.complete)
          txn.oncomplete = onTxnComplete
          bySeqStore = txn.objectStore(BY_SEQ_STORE)
          docStore = txn.objectStore(DOC_STORE)
          docIdRevIndex = bySeqStore.index('_doc_id_rev')
          var keyRange =
            opts.since && !opts.descending
              ? IDBKeyRange.lowerBound(opts.since, true)
              : null
          runBatchedCursor(
            bySeqStore,
            keyRange,
            opts.descending,
            limit,
            onBatch,
          )
        }

        var cachedDBs = new ExportedMap()
        var blobSupportPromise
        var openReqList = new ExportedMap()

        function IdbPouch(opts, callback) {
          var api = this
          enqueueTask(
            function(thisCallback) {
              init(api, opts, thisCallback)
            },
            callback,
            api.constructor,
          )
        }

        function init(api, opts, callback) {
          var dbName = opts.name
          var idb = null
          api._meta = null // called when creating a fresh new database

          function createSchema(db) {
            var docStore = db.createObjectStore(DOC_STORE, {
              keyPath: 'id',
            })
            db.createObjectStore(BY_SEQ_STORE, {
              autoIncrement: true,
            }).createIndex('_doc_id_rev', '_doc_id_rev', {
              unique: true,
            })
            db.createObjectStore(ATTACH_STORE, {
              keyPath: 'digest',
            })
            db.createObjectStore(META_STORE, {
              keyPath: 'id',
              autoIncrement: false,
            })
            db.createObjectStore(DETECT_BLOB_SUPPORT_STORE) // added in v2

            docStore.createIndex('deletedOrLocal', 'deletedOrLocal', {
              unique: false,
            }) // added in v3

            db.createObjectStore(LOCAL_STORE, {
              keyPath: '_id',
            }) // added in v4

            var attAndSeqStore = db.createObjectStore(
              ATTACH_AND_SEQ_STORE,
              {
                autoIncrement: true,
              },
            )
            attAndSeqStore.createIndex('seq', 'seq')
            attAndSeqStore.createIndex('digestSeq', 'digestSeq', {
              unique: true,
            })
          } // migration to version 2
          // unfortunately "deletedOrLocal" is a misnomer now that we no longer
          // store local docs in the main doc-store, but whaddyagonnado

          function addDeletedOrLocalIndex(txn, callback) {
            var docStore = txn.objectStore(DOC_STORE)
            docStore.createIndex('deletedOrLocal', 'deletedOrLocal', {
              unique: false,
            })

            docStore.openCursor().onsuccess = function(event) {
              var cursor = event.target.result

              if (cursor) {
                var metadata = cursor.value
                var deleted = isDeleted(metadata)
                metadata.deletedOrLocal = deleted ? '1' : '0'
                docStore.put(metadata)
                cursor.continue()
              } else {
                callback()
              }
            }
          } // migration to version 3 (part 1)

          function createLocalStoreSchema(db) {
            db.createObjectStore(LOCAL_STORE, {
              keyPath: '_id',
            }).createIndex('_doc_id_rev', '_doc_id_rev', {
              unique: true,
            })
          } // migration to version 3 (part 2)

          function migrateLocalStore(txn, cb) {
            var localStore = txn.objectStore(LOCAL_STORE)
            var docStore = txn.objectStore(DOC_STORE)
            var seqStore = txn.objectStore(BY_SEQ_STORE)
            var cursor = docStore.openCursor()

            cursor.onsuccess = function(event) {
              var cursor = event.target.result

              if (cursor) {
                var metadata = cursor.value
                var docId = metadata.id
                var local = isLocalId(docId)
                var rev = winningRev(metadata)

                if (local) {
                  var docIdRev = docId + '::' + rev // remove all seq entries
                  // associated with this docId

                  var start = docId + '::'
                  var end = docId + '::~'
                  var index = seqStore.index('_doc_id_rev')
                  var range = IDBKeyRange.bound(start, end, false, false)
                  var seqCursor = index.openCursor(range)

                  seqCursor.onsuccess = function(e) {
                    seqCursor = e.target.result

                    if (!seqCursor) {
                      // done
                      docStore.delete(cursor.primaryKey)
                      cursor.continue()
                    } else {
                      var data = seqCursor.value

                      if (data._doc_id_rev === docIdRev) {
                        localStore.put(data)
                      }

                      seqStore.delete(seqCursor.primaryKey)
                      seqCursor.continue()
                    }
                  }
                } else {
                  cursor.continue()
                }
              } else if (cb) {
                cb()
              }
            }
          } // migration to version 4 (part 1)

          function addAttachAndSeqStore(db) {
            var attAndSeqStore = db.createObjectStore(
              ATTACH_AND_SEQ_STORE,
              {
                autoIncrement: true,
              },
            )
            attAndSeqStore.createIndex('seq', 'seq')
            attAndSeqStore.createIndex('digestSeq', 'digestSeq', {
              unique: true,
            })
          } // migration to version 4 (part 2)

          function migrateAttsAndSeqs(txn, callback) {
            var seqStore = txn.objectStore(BY_SEQ_STORE)
            var attStore = txn.objectStore(ATTACH_STORE)
            var attAndSeqStore = txn.objectStore(ATTACH_AND_SEQ_STORE) // need to actually populate the table. this is the expensive part,
            // so as an optimization, check first that this database even
            // contains attachments

            var req = attStore.count()

            req.onsuccess = function(e) {
              var count = e.target.result

              if (!count) {
                return callback() // done
              }

              seqStore.openCursor().onsuccess = function(e) {
                var cursor = e.target.result

                if (!cursor) {
                  return callback() // done
                }

                var doc = cursor.value
                var seq = cursor.primaryKey
                var atts = Object.keys(doc._attachments || {})
                var digestMap = {}

                for (var j = 0; j < atts.length; j++) {
                  var att = doc._attachments[atts[j]]
                  digestMap[att.digest] = true // uniq digests, just in case
                }

                var digests = Object.keys(digestMap)

                for (j = 0; j < digests.length; j++) {
                  var digest = digests[j]
                  attAndSeqStore.put({
                    seq: seq,
                    digestSeq: digest + '::' + seq,
                  })
                }

                cursor.continue()
              }
            }
          } // migration to version 5
          // Instead of relying on on-the-fly migration of metadata,
          // this brings the doc-store to its modern form:
          // - metadata.winningrev
          // - metadata.seq
          // - stringify the metadata when storing it

          function migrateMetadata(txn) {
            function decodeMetadataCompat(storedObject) {
              if (!storedObject.data) {
                // old format, when we didn't store it stringified
                storedObject.deleted = storedObject.deletedOrLocal === '1'
                return storedObject
              }

              return decodeMetadata(storedObject)
            } // ensure that every metadata has a winningRev and seq,
            // which was previously created on-the-fly but better to migrate

            var bySeqStore = txn.objectStore(BY_SEQ_STORE)
            var docStore = txn.objectStore(DOC_STORE)
            var cursor = docStore.openCursor()

            cursor.onsuccess = function(e) {
              var cursor = e.target.result

              if (!cursor) {
                return // done
              }

              var metadata = decodeMetadataCompat(cursor.value)
              metadata.winningRev =
                metadata.winningRev || winningRev(metadata)

              function fetchMetadataSeq() {
                // metadata.seq was added post-3.2.0, so if it's missing,
                // we need to fetch it manually
                var start = metadata.id + '::'
                var end = metadata.id + '::\uffff'
                var req = bySeqStore
                  .index('_doc_id_rev')
                  .openCursor(IDBKeyRange.bound(start, end))
                var metadataSeq = 0

                req.onsuccess = function(e) {
                  var cursor = e.target.result

                  if (!cursor) {
                    metadata.seq = metadataSeq
                    return onGetMetadataSeq()
                  }

                  var seq = cursor.primaryKey

                  if (seq > metadataSeq) {
                    metadataSeq = seq
                  }

                  cursor.continue()
                }
              }

              function onGetMetadataSeq() {
                var metadataToStore = encodeMetadata(
                  metadata,
                  metadata.winningRev,
                  metadata.deleted,
                )
                var req = docStore.put(metadataToStore)

                req.onsuccess = function() {
                  cursor.continue()
                }
              }

              if (metadata.seq) {
                return onGetMetadataSeq()
              }

              fetchMetadataSeq()
            }
          }

          api._remote = false

          api.type = function() {
            return 'idb'
          }

          api._id = toPromise(function(callback) {
            callback(null, api._meta.instanceId)
          })

          api._bulkDocs = function idb_bulkDocs(req, reqOpts, callback) {
            idbBulkDocs(opts, req, reqOpts, api, idb, callback)
          } // First we look up the metadata in the ids database, then we fetch the
          // current revision(s) from the by sequence store

          api._get = function idb_get(id, opts, callback) {
            var doc
            var metadata
            var err
            var txn = opts.ctx

            if (!txn) {
              var txnResult = openTransactionSafely(
                idb,
                [DOC_STORE, BY_SEQ_STORE, ATTACH_STORE],
                'readonly',
              )

              if (txnResult.error) {
                return callback(txnResult.error)
              }

              txn = txnResult.txn
            }

            function finish() {
              callback(err, {
                doc: doc,
                metadata: metadata,
                ctx: txn,
              })
            }

            txn.objectStore(DOC_STORE).get(id).onsuccess = function(e) {
              metadata = decodeMetadata(e.target.result) // we can determine the result here if:
              // 1. there is no such document
              // 2. the document is deleted and we don't ask about specific rev
              // When we ask with opts.rev we expect the answer to be either
              // doc (possibly with _deleted=true) or missing error

              if (!metadata) {
                err = createError(MISSING_DOC, 'missing')
                return finish()
              }

              var rev

              if (!opts.rev) {
                rev = metadata.winningRev
                var deleted = isDeleted(metadata)

                if (deleted) {
                  err = createError(MISSING_DOC, 'deleted')
                  return finish()
                }
              } else {
                rev = opts.latest ? latest(opts.rev, metadata) : opts.rev
              }

              var objectStore = txn.objectStore(BY_SEQ_STORE)
              var key = metadata.id + '::' + rev

              objectStore
                .index('_doc_id_rev')
                .get(key).onsuccess = function(e) {
                doc = e.target.result

                if (doc) {
                  doc = decodeDoc(doc)
                }

                if (!doc) {
                  err = createError(MISSING_DOC, 'missing')
                  return finish()
                }

                finish()
              }
            }
          }

          api._getAttachment = function(
            docId,
            attachId,
            attachment,
            opts,
            callback,
          ) {
            var txn

            if (opts.ctx) {
              txn = opts.ctx
            } else {
              var txnResult = openTransactionSafely(
                idb,
                [DOC_STORE, BY_SEQ_STORE, ATTACH_STORE],
                'readonly',
              )

              if (txnResult.error) {
                return callback(txnResult.error)
              }

              txn = txnResult.txn
            }

            var digest = attachment.digest
            var type = attachment.content_type

            txn.objectStore(ATTACH_STORE).get(digest).onsuccess = function(
              e,
            ) {
              var body = e.target.result.body
              readBlobData(body, type, opts.binary, function(blobData) {
                callback(null, blobData)
              })
            }
          }

          api._info = function idb_info(callback) {
            var updateSeq
            var docCount
            var txnResult = openTransactionSafely(
              idb,
              [META_STORE, BY_SEQ_STORE],
              'readonly',
            )

            if (txnResult.error) {
              return callback(txnResult.error)
            }

            var txn = txnResult.txn

            txn
              .objectStore(META_STORE)
              .get(META_STORE).onsuccess = function(e) {
              docCount = e.target.result.docCount
            }

            txn
              .objectStore(BY_SEQ_STORE)
              .openCursor(null, 'prev').onsuccess = function(e) {
              var cursor = e.target.result
              updateSeq = cursor ? cursor.key : 0
            }

            txn.oncomplete = function() {
              callback(null, {
                doc_count: docCount,
                update_seq: updateSeq,
                // for debugging
                idb_attachment_format: api._meta.blobSupport
                  ? 'binary'
                  : 'base64',
              })
            }
          }

          api._allDocs = function idb_allDocs(opts, callback) {
            idbAllDocs(opts, idb, callback)
          }

          api._changes = function idbChanges(opts) {
            return changes(opts, api, dbName, idb)
          }

          api._close = function(callback) {
            // https://developer.mozilla.org/en-US/docs/IndexedDB/IDBDatabase#close
            // "Returns immediately and closes the connection in a separate thread..."
            idb.close()
            cachedDBs.delete(dbName)
            callback()
          }

          api._getRevisionTree = function(docId, callback) {
            var txnResult = openTransactionSafely(
              idb,
              [DOC_STORE],
              'readonly',
            )

            if (txnResult.error) {
              return callback(txnResult.error)
            }

            var txn = txnResult.txn
            var req = txn.objectStore(DOC_STORE).get(docId)

            req.onsuccess = function(event) {
              var doc = decodeMetadata(event.target.result)

              if (!doc) {
                callback(createError(MISSING_DOC))
              } else {
                callback(null, doc.rev_tree)
              }
            }
          } // This function removes revisions of document docId
          // which are listed in revs and sets this document
          // revision to to rev_tree

          api._doCompaction = function(docId, revs, callback) {
            var stores = [
              DOC_STORE,
              BY_SEQ_STORE,
              ATTACH_STORE,
              ATTACH_AND_SEQ_STORE,
            ]
            var txnResult = openTransactionSafely(idb, stores, 'readwrite')

            if (txnResult.error) {
              return callback(txnResult.error)
            }

            var txn = txnResult.txn
            var docStore = txn.objectStore(DOC_STORE)

            docStore.get(docId).onsuccess = function(event) {
              var metadata = decodeMetadata(event.target.result)
              traverseRevTree(metadata.rev_tree, function(
                isLeaf,
                pos,
                revHash,
                ctx,
                opts,
              ) {
                var rev = pos + '-' + revHash

                if (revs.indexOf(rev) !== -1) {
                  opts.status = 'missing'
                }
              })
              compactRevs(revs, docId, txn)
              var winningRev$$1 = metadata.winningRev
              var deleted = metadata.deleted
              txn
                .objectStore(DOC_STORE)
                .put(encodeMetadata(metadata, winningRev$$1, deleted))
            }

            txn.onabort = idbError(callback)

            txn.oncomplete = function() {
              callback()
            }
          }

          api._getLocal = function(id, callback) {
            var txnResult = openTransactionSafely(
              idb,
              [LOCAL_STORE],
              'readonly',
            )

            if (txnResult.error) {
              return callback(txnResult.error)
            }

            var tx = txnResult.txn
            var req = tx.objectStore(LOCAL_STORE).get(id)
            req.onerror = idbError(callback)

            req.onsuccess = function(e) {
              var doc = e.target.result

              if (!doc) {
                callback(createError(MISSING_DOC))
              } else {
                delete doc['_doc_id_rev'] // for backwards compat

                callback(null, doc)
              }
            }
          }

          api._putLocal = function(doc, opts, callback) {
            if (typeof opts === 'function') {
              callback = opts
              opts = {}
            }

            delete doc._revisions // ignore this, trust the rev

            var oldRev = doc._rev
            var id = doc._id

            if (!oldRev) {
              doc._rev = '0-1'
            } else {
              doc._rev = '0-' + (parseInt(oldRev.split('-')[1], 10) + 1)
            }

            var tx = opts.ctx
            var ret

            if (!tx) {
              var txnResult = openTransactionSafely(
                idb,
                [LOCAL_STORE],
                'readwrite',
              )

              if (txnResult.error) {
                return callback(txnResult.error)
              }

              tx = txnResult.txn
              tx.onerror = idbError(callback)

              tx.oncomplete = function() {
                if (ret) {
                  callback(null, ret)
                }
              }
            }

            var oStore = tx.objectStore(LOCAL_STORE)
            var req

            if (oldRev) {
              req = oStore.get(id)

              req.onsuccess = function(e) {
                var oldDoc = e.target.result

                if (!oldDoc || oldDoc._rev !== oldRev) {
                  callback(createError(REV_CONFLICT))
                } else {
                  // update
                  var req = oStore.put(doc)

                  req.onsuccess = function() {
                    ret = {
                      ok: true,
                      id: doc._id,
                      rev: doc._rev,
                    }

                    if (opts.ctx) {
                      // return immediately
                      callback(null, ret)
                    }
                  }
                }
              }
            } else {
              // new doc
              req = oStore.add(doc)

              req.onerror = function(e) {
                // constraint error, already exists
                callback(createError(REV_CONFLICT))
                e.preventDefault() // avoid transaction abort

                e.stopPropagation() // avoid transaction onerror
              }

              req.onsuccess = function() {
                ret = {
                  ok: true,
                  id: doc._id,
                  rev: doc._rev,
                }

                if (opts.ctx) {
                  // return immediately
                  callback(null, ret)
                }
              }
            }
          }

          api._removeLocal = function(doc, opts, callback) {
            if (typeof opts === 'function') {
              callback = opts
              opts = {}
            }

            var tx = opts.ctx

            if (!tx) {
              var txnResult = openTransactionSafely(
                idb,
                [LOCAL_STORE],
                'readwrite',
              )

              if (txnResult.error) {
                return callback(txnResult.error)
              }

              tx = txnResult.txn

              tx.oncomplete = function() {
                if (ret) {
                  callback(null, ret)
                }
              }
            }

            var ret
            var id = doc._id
            var oStore = tx.objectStore(LOCAL_STORE)
            var req = oStore.get(id)
            req.onerror = idbError(callback)

            req.onsuccess = function(e) {
              var oldDoc = e.target.result

              if (!oldDoc || oldDoc._rev !== doc._rev) {
                callback(createError(MISSING_DOC))
              } else {
                oStore.delete(id)
                ret = {
                  ok: true,
                  id: id,
                  rev: '0-0',
                }

                if (opts.ctx) {
                  // return immediately
                  callback(null, ret)
                }
              }
            }
          }

          api._destroy = function(opts, callback) {
            changesHandler.removeAllListeners(dbName) //Close open request for "dbName" database to fix ie delay.

            var openReq = openReqList.get(dbName)

            if (openReq && openReq.result) {
              openReq.result.close()
              cachedDBs.delete(dbName)
            }

            var req = indexedDB.deleteDatabase(dbName)

            req.onsuccess = function() {
              //Remove open request from the list.
              openReqList.delete(dbName)

              if (hasLocalStorage() && dbName in localStorage) {
                delete localStorage[dbName]
              }

              callback(null, {
                ok: true,
              })
            }

            req.onerror = idbError(callback)
          }

          var cached = cachedDBs.get(dbName)

          if (cached) {
            idb = cached.idb
            api._meta = cached.global
            return (0, _immediate.default)(function() {
              callback(null, api)
            })
          }

          var req = indexedDB.open(dbName, ADAPTER_VERSION)
          openReqList.set(dbName, req)

          req.onupgradeneeded = function(e) {
            var db = e.target.result

            if (e.oldVersion < 1) {
              return createSchema(db) // new db, initial schema
            } // do migrations

            var txn = e.currentTarget.transaction // these migrations have to be done in this function, before
            // control is returned to the event loop, because IndexedDB

            if (e.oldVersion < 3) {
              createLocalStoreSchema(db) // v2 -> v3
            }

            if (e.oldVersion < 4) {
              addAttachAndSeqStore(db) // v3 -> v4
            }

            var migrations = [
              addDeletedOrLocalIndex, // v1 -> v2
              migrateLocalStore, // v2 -> v3
              migrateAttsAndSeqs, // v3 -> v4
              migrateMetadata, // v4 -> v5
            ]
            var i = e.oldVersion

            function next() {
              var migration = migrations[i - 1]
              i++

              if (migration) {
                migration(txn, next)
              }
            }

            next()
          }

          req.onsuccess = function(e) {
            idb = e.target.result

            idb.onversionchange = function() {
              idb.close()
              cachedDBs.delete(dbName)
            }

            idb.onabort = function(e) {
              guardedConsole(
                'error',
                'Database has a global failure',
                e.target.error,
              )
              idb.close()
              cachedDBs.delete(dbName)
            } // Do a few setup operations (in parallel as much as possible):
            // 1. Fetch meta doc
            // 2. Check blob support
            // 3. Calculate docCount
            // 4. Generate an instanceId if necessary
            // 5. Store docCount and instanceId on meta doc

            var txn = idb.transaction(
              [META_STORE, DETECT_BLOB_SUPPORT_STORE, DOC_STORE],
              'readwrite',
            )
            var storedMetaDoc = false
            var metaDoc
            var docCount
            var blobSupport
            var instanceId

            function completeSetup() {
              if (typeof blobSupport === 'undefined' || !storedMetaDoc) {
                return
              }

              api._meta = {
                name: dbName,
                instanceId: instanceId,
                blobSupport: blobSupport,
              }
              cachedDBs.set(dbName, {
                idb: idb,
                global: api._meta,
              })
              callback(null, api)
            }

            function storeMetaDocIfReady() {
              if (
                typeof docCount === 'undefined' ||
                typeof metaDoc === 'undefined'
              ) {
                return
              }

              var instanceKey = dbName + '_id'

              if (instanceKey in metaDoc) {
                instanceId = metaDoc[instanceKey]
              } else {
                metaDoc[instanceKey] = instanceId = uuid()
              }

              metaDoc.docCount = docCount
              txn.objectStore(META_STORE).put(metaDoc)
            } //
            // fetch or generate the instanceId
            //

            txn
              .objectStore(META_STORE)
              .get(META_STORE).onsuccess = function(e) {
              metaDoc = e.target.result || {
                id: META_STORE,
              }
              storeMetaDocIfReady()
            } //
            // countDocs
            //

            countDocs(txn, function(count) {
              docCount = count
              storeMetaDocIfReady()
            }) //
            // check blob support
            //

            if (!blobSupportPromise) {
              // make sure blob support is only checked once
              blobSupportPromise = checkBlobSupport(txn)
            }

            blobSupportPromise.then(function(val) {
              blobSupport = val
              completeSetup()
            }) // only when the metadata put transaction has completed,
            // consider the setup done

            txn.oncomplete = function() {
              storedMetaDoc = true
              completeSetup()
            }

            txn.onabort = idbError(callback)
          }

          req.onerror = function() {
            var msg =
              'Failed to open indexedDB, are you in private browsing mode?'
            guardedConsole('error', msg)
            callback(createError(IDB_ERROR, msg))
          }
        }

        IdbPouch.valid = function() {
          // Following #7085 buggy idb versions (typically Safari < 10.1) are
          // considered valid.
          // On Firefox SecurityError is thrown while referencing indexedDB if cookies
          // are not allowed. `typeof indexedDB` also triggers the error.
          try {
            // some outdated implementations of IDB that appear on Samsung
            // and HTC Android devices <4.4 are missing IDBKeyRange
            return (
              typeof indexedDB !== 'undefined' &&
              typeof IDBKeyRange !== 'undefined'
            )
          } catch (e) {
            return false
          }
        }

        function IDBPouch(PouchDB) {
          PouchDB.adapter('idb', IdbPouch, true)
        } // dead simple promise pool, inspired by https://github.com/timdp/es6-promise-pool
        // but much smaller in code size. limits the number of concurrent promises that are executed

        function pool(promiseFactories, limit) {
          return new Promise(function(resolve, reject) {
            var running = 0
            var current = 0
            var done = 0
            var len = promiseFactories.length
            var err

            function runNext() {
              running++
              promiseFactories[current++]().then(onSuccess, onError)
            }

            function doNext() {
              if (++done === len) {
                /* istanbul ignore if */
                if (err) {
                  reject(err)
                } else {
                  resolve()
                }
              } else {
                runNextBatch()
              }
            }

            function onSuccess() {
              running--
              doNext()
            }
            /* istanbul ignore next */

            function onError(thisErr) {
              running--
              err = err || thisErr
              doNext()
            }

            function runNextBatch() {
              while (running < limit && current < len) {
                runNext()
              }
            }

            runNextBatch()
          })
        }

        var CHANGES_BATCH_SIZE = 25
        var MAX_SIMULTANEOUS_REVS = 50
        var CHANGES_TIMEOUT_BUFFER = 5000
        var DEFAULT_HEARTBEAT = 10000
        var supportsBulkGetMap = {}

        function readAttachmentsAsBlobOrBuffer(row) {
          var doc = row.doc || row.ok
          var atts = doc._attachments

          if (!atts) {
            return
          }

          Object.keys(atts).forEach(function(filename) {
            var att = atts[filename]
            att.data = b64ToBluffer(att.data, att.content_type)
          })
        }

        function encodeDocId(id) {
          if (/^_design/.test(id)) {
            return '_design/' + encodeURIComponent(id.slice(8))
          }

          if (/^_local/.test(id)) {
            return '_local/' + encodeURIComponent(id.slice(7))
          }

          return encodeURIComponent(id)
        }

        function preprocessAttachments$1(doc) {
          if (!doc._attachments || !Object.keys(doc._attachments)) {
            return Promise.resolve()
          }

          return Promise.all(
            Object.keys(doc._attachments).map(function(key) {
              var attachment = doc._attachments[key]

              if (attachment.data && typeof attachment.data !== 'string') {
                return new Promise(function(resolve) {
                  blobToBase64(attachment.data, resolve)
                }).then(function(b64) {
                  attachment.data = b64
                })
              }
            }),
          )
        }

        function hasUrlPrefix(opts) {
          if (!opts.prefix) {
            return false
          }

          var protocol = parseUri(opts.prefix).protocol
          return protocol === 'http' || protocol === 'https'
        } // Get all the information you possibly can about the URI given by name and
        // return it as a suitable object.

        function getHost(name, opts) {
          // encode db name if opts.prefix is a url (#5574)
          if (hasUrlPrefix(opts)) {
            var dbName = opts.name.substr(opts.prefix.length) // Ensure prefix has a trailing slash

            var prefix = opts.prefix.replace(/\/?$/, '/')
            name = prefix + encodeURIComponent(dbName)
          }

          var uri = parseUri(name)

          if (uri.user || uri.password) {
            uri.auth = {
              username: uri.user,
              password: uri.password,
            }
          } // Split the path part of the URI into parts using '/' as the delimiter
          // after removing any leading '/' and any trailing '/'

          var parts = uri.path.replace(/(^\/|\/$)/g, '').split('/')
          uri.db = parts.pop() // Prevent double encoding of URI component

          if (uri.db.indexOf('%') === -1) {
            uri.db = encodeURIComponent(uri.db)
          }

          uri.path = parts.join('/')
          return uri
        } // Generate a URL with the host data given by opts and the given path

        function genDBUrl(opts, path) {
          return genUrl(opts, opts.db + '/' + path)
        } // Generate a URL with the host data given by opts and the given path

        function genUrl(opts, path) {
          // If the host already has a path, then we need to have a path delimiter
          // Otherwise, the path delimiter is the empty string
          var pathDel = !opts.path ? '' : '/' // If the host already has a path, then we need to have a path delimiter
          // Otherwise, the path delimiter is the empty string

          return (
            opts.protocol +
            '://' +
            opts.host +
            (opts.port ? ':' + opts.port : '') +
            '/' +
            opts.path +
            pathDel +
            path
          )
        }

        function paramsToStr(params) {
          return (
            '?' +
            Object.keys(params)
              .map(function(k) {
                return k + '=' + encodeURIComponent(params[k])
              })
              .join('&')
          )
        }

        function shouldCacheBust(opts) {
          var ua =
            typeof navigator !== 'undefined' && navigator.userAgent
              ? navigator.userAgent.toLowerCase()
              : ''
          var isIE = ua.indexOf('msie') !== -1
          var isTrident = ua.indexOf('trident') !== -1
          var isEdge = ua.indexOf('edge') !== -1
          var isGET = !('method' in opts) || opts.method === 'GET'
          return (isIE || isTrident || isEdge) && isGET
        } // Implements the PouchDB API for dealing with CouchDB instances over HTTP

        function HttpPouch(opts, callback) {
          // The functions that will be publicly available for HttpPouch
          var api = this
          var host = getHost(opts.name, opts)
          var dbUrl = genDBUrl(host, '')
          opts = clone(opts)

          var ourFetch = function(url, options) {
            options = options || {}
            options.headers = options.headers || new h()

            if (opts.auth || host.auth) {
              var nAuth = opts.auth || host.auth
              var str = nAuth.username + ':' + nAuth.password
              var token = thisBtoa(unescape(encodeURIComponent(str)))
              options.headers.set('Authorization', 'Basic ' + token)
            }

            var headers = opts.headers || {}
            Object.keys(headers).forEach(function(key) {
              options.headers.append(key, headers[key])
            })
            /* istanbul ignore if */

            if (shouldCacheBust(options)) {
              url +=
                (url.indexOf('?') === -1 ? '?' : '&') +
                '_nonce=' +
                Date.now()
            }

            var fetchFun = opts.fetch || f$1
            return fetchFun(url, options)
          }

          function adapterFun$$1(name, fun) {
            return adapterFun(
              name,
              (0, _argsarray.default)(function(args) {
                setup()
                  .then(function() {
                    return fun.apply(this, args)
                  })
                  .catch(function(e) {
                    var callback = args.pop()
                    callback(e)
                  })
              }),
            ).bind(api)
          }

          function fetchJSON(url, options, callback) {
            var result = {}
            options = options || {}
            options.headers = options.headers || new h()

            if (!options.headers.get('Content-Type')) {
              options.headers.set('Content-Type', 'application/json')
            }

            if (!options.headers.get('Accept')) {
              options.headers.set('Accept', 'application/json')
            }

            return ourFetch(url, options)
              .then(function(response) {
                result.ok = response.ok
                result.status = response.status
                return response.json()
              })
              .then(function(json) {
                result.data = json

                if (!result.ok) {
                  result.data.status = result.status
                  var err = generateErrorFromResponse(result.data)

                  if (callback) {
                    return callback(err)
                  } else {
                    throw err
                  }
                }

                if (Array.isArray(result.data)) {
                  result.data = result.data.map(function(v) {
                    if (v.error || v.missing) {
                      return generateErrorFromResponse(v)
                    } else {
                      return v
                    }
                  })
                }

                if (callback) {
                  callback(null, result.data)
                } else {
                  return result
                }
              })
          }

          var setupPromise

          function setup() {
            if (opts.skip_setup) {
              return Promise.resolve()
            } // If there is a setup in process or previous successful setup
            // done then we will use that
            // If previous setups have been rejected we will try again

            if (setupPromise) {
              return setupPromise
            }

            setupPromise = fetchJSON(dbUrl)
              .catch(function(err) {
                if (err && err.status && err.status === 404) {
                  // Doesnt exist, create it
                  explainError(
                    404,
                    'PouchDB is just detecting if the remote exists.',
                  )
                  return fetchJSON(dbUrl, {
                    method: 'PUT',
                  })
                } else {
                  return Promise.reject(err)
                }
              })
              .catch(function(err) {
                // If we try to create a database that already exists, skipped in
                // istanbul since its catching a race condition.

                /* istanbul ignore if */
                if (err && err.status && err.status === 412) {
                  return true
                }

                return Promise.reject(err)
              })
            setupPromise.catch(function() {
              setupPromise = null
            })
            return setupPromise
          }

          ;(0, _immediate.default)(function() {
            callback(null, api)
          })
          api._remote = true
          /* istanbul ignore next */

          api.type = function() {
            return 'http'
          }

          api.id = adapterFun$$1('id', function(callback) {
            ourFetch(genUrl(host, ''))
              .then(function(response) {
                return response.json()
              })
              .then(function(result) {
                var uuid$$1 =
                  result && result.uuid
                    ? result.uuid + host.db
                    : genDBUrl(host, '')
                callback(null, uuid$$1)
              })
              .catch(function(err) {
                callback(err)
              })
          }) // Sends a POST request to the host calling the couchdb _compact function
          //    version: The version of CouchDB it is running

          api.compact = adapterFun$$1('compact', function(opts, callback) {
            if (typeof opts === 'function') {
              callback = opts
              opts = {}
            }

            opts = clone(opts)
            fetchJSON(genDBUrl(host, '_compact'), {
              method: 'POST',
            }).then(function() {
              function ping() {
                api.info(function(err, res) {
                  // CouchDB may send a "compact_running:true" if it's
                  // already compacting. PouchDB Server doesn't.

                  /* istanbul ignore else */
                  if (res && !res.compact_running) {
                    callback(null, {
                      ok: true,
                    })
                  } else {
                    setTimeout(ping, opts.interval || 200)
                  }
                })
              } // Ping the http if it's finished compaction

              ping()
            })
          })
          api.bulkGet = adapterFun('bulkGet', function(opts, callback) {
            var self = this

            function doBulkGet(cb) {
              var params = {}

              if (opts.revs) {
                params.revs = true
              }

              if (opts.attachments) {
                /* istanbul ignore next */
                params.attachments = true
              }

              if (opts.latest) {
                params.latest = true
              }

              fetchJSON(
                genDBUrl(host, '_bulk_get' + paramsToStr(params)),
                {
                  method: 'POST',
                  body: JSON.stringify({
                    docs: opts.docs,
                  }),
                },
              )
                .then(function(result) {
                  if (opts.attachments && opts.binary) {
                    result.data.results.forEach(function(res) {
                      res.docs.forEach(readAttachmentsAsBlobOrBuffer)
                    })
                  }

                  cb(null, result.data)
                })
                .catch(cb)
            }
            /* istanbul ignore next */

            function doBulkGetShim() {
              // avoid "url too long error" by splitting up into multiple requests
              var batchSize = MAX_SIMULTANEOUS_REVS
              var numBatches = Math.ceil(opts.docs.length / batchSize)
              var numDone = 0
              var results = new Array(numBatches)

              function onResult(batchNum) {
                return function(err, res) {
                  // err is impossible because shim returns a list of errs in that case
                  results[batchNum] = res.results

                  if (++numDone === numBatches) {
                    callback(null, {
                      results: flatten(results),
                    })
                  }
                }
              }

              for (var i = 0; i < numBatches; i++) {
                var subOpts = pick(opts, [
                  'revs',
                  'attachments',
                  'binary',
                  'latest',
                ])
                subOpts.docs = opts.docs.slice(
                  i * batchSize,
                  Math.min(opts.docs.length, (i + 1) * batchSize),
                )
                bulkGet(self, subOpts, onResult(i))
              }
            } // mark the whole database as either supporting or not supporting _bulk_get

            var dbUrl = genUrl(host, '')
            var supportsBulkGet = supportsBulkGetMap[dbUrl]
            /* istanbul ignore next */

            if (typeof supportsBulkGet !== 'boolean') {
              // check if this database supports _bulk_get
              doBulkGet(function(err, res) {
                if (err) {
                  supportsBulkGetMap[dbUrl] = false
                  explainError(
                    err.status,
                    'PouchDB is just detecting if the remote ' +
                      'supports the _bulk_get API.',
                  )
                  doBulkGetShim()
                } else {
                  supportsBulkGetMap[dbUrl] = true
                  callback(null, res)
                }
              })
            } else if (supportsBulkGet) {
              doBulkGet(callback)
            } else {
              doBulkGetShim()
            }
          }) // Calls GET on the host, which gets back a JSON string containing
          //    couchdb: A welcome string
          //    version: The version of CouchDB it is running

          api._info = function(callback) {
            setup()
              .then(function() {
                return ourFetch(genDBUrl(host, ''))
              })
              .then(function(response) {
                return response.json()
              })
              .then(function(info) {
                info.host = genDBUrl(host, '')
                callback(null, info)
              })
              .catch(callback)
          }

          api.fetch = function(path, options) {
            return setup().then(function() {
              return ourFetch(genDBUrl(host, path), options)
            })
          } // Get the document with the given id from the database given by host.
          // The id could be solely the _id in the database, or it may be a
          // _design/ID or _local/ID path

          api.get = adapterFun$$1('get', function(id, opts, callback) {
            // If no options were given, set the callback to the second parameter
            if (typeof opts === 'function') {
              callback = opts
              opts = {}
            }

            opts = clone(opts) // List of parameters to add to the GET request

            var params = {}

            if (opts.revs) {
              params.revs = true
            }

            if (opts.revs_info) {
              params.revs_info = true
            }

            if (opts.latest) {
              params.latest = true
            }

            if (opts.open_revs) {
              if (opts.open_revs !== 'all') {
                opts.open_revs = JSON.stringify(opts.open_revs)
              }

              params.open_revs = opts.open_revs
            }

            if (opts.rev) {
              params.rev = opts.rev
            }

            if (opts.conflicts) {
              params.conflicts = opts.conflicts
            }
            /* istanbul ignore if */

            if (opts.update_seq) {
              params.update_seq = opts.update_seq
            }

            id = encodeDocId(id)

            function fetchAttachments(doc) {
              var atts = doc._attachments
              var filenames = atts && Object.keys(atts)

              if (!atts || !filenames.length) {
                return
              } // we fetch these manually in separate XHRs, because
              // Sync Gateway would normally send it back as multipart/mixed,
              // which we cannot parse. Also, this is more efficient than
              // receiving attachments as base64-encoded strings.

              function fetchData(filename) {
                var att = atts[filename]

                var path =
                  encodeDocId(doc._id) +
                  '/' +
                  encodeAttachmentId(filename) +
                  '?rev=' +
                  doc._rev

                return ourFetch(genDBUrl(host, path))
                  .then(function(response) {
                    if (
                      typeof process !== 'undefined' &&
                      !process.browser
                    ) {
                      return response.buffer()
                    } else {
                      /* istanbul ignore next */
                      return response.blob()
                    }
                  })
                  .then(function(blob) {
                    if (opts.binary) {
                      // TODO: Can we remove this?
                      if (
                        typeof process !== 'undefined' &&
                        !process.browser
                      ) {
                        blob.type = att.content_type
                      }

                      return blob
                    }

                    return new Promise(function(resolve) {
                      blobToBase64(blob, resolve)
                    })
                  })
                  .then(function(data) {
                    delete att.stub
                    delete att.length
                    att.data = data
                  })
              }

              var promiseFactories = filenames.map(function(filename) {
                return function() {
                  return fetchData(filename)
                }
              }) // This limits the number of parallel xhr requests to 5 any time
              // to avoid issues with maximum browser request limits

              return pool(promiseFactories, 5)
            }

            function fetchAllAttachments(docOrDocs) {
              if (Array.isArray(docOrDocs)) {
                return Promise.all(
                  docOrDocs.map(function(doc) {
                    if (doc.ok) {
                      return fetchAttachments(doc.ok)
                    }
                  }),
                )
              }

              return fetchAttachments(docOrDocs)
            }

            var url = genDBUrl(host, id + paramsToStr(params))
            fetchJSON(url)
              .then(function(res) {
                return Promise.resolve()
                  .then(function() {
                    if (opts.attachments) {
                      return fetchAllAttachments(res.data)
                    }
                  })
                  .then(function() {
                    callback(null, res.data)
                  })
              })
              .catch(function(e) {
                e.docId = id
                callback(e)
              })
          }) // Delete the document given by doc from the database given by host.

          api.remove = adapterFun$$1('remove', function(
            docOrId,
            optsOrRev,
            opts,
            cb,
          ) {
            var doc

            if (typeof optsOrRev === 'string') {
              // id, rev, opts, callback style
              doc = {
                _id: docOrId,
                _rev: optsOrRev,
              }

              if (typeof opts === 'function') {
                cb = opts
                opts = {}
              }
            } else {
              // doc, opts, callback style
              doc = docOrId

              if (typeof optsOrRev === 'function') {
                cb = optsOrRev
                opts = {}
              } else {
                cb = opts
                opts = optsOrRev
              }
            }

            var rev = doc._rev || opts.rev
            var url = genDBUrl(host, encodeDocId(doc._id)) + '?rev=' + rev
            fetchJSON(
              url,
              {
                method: 'DELETE',
              },
              cb,
            ).catch(cb)
          })

          function encodeAttachmentId(attachmentId) {
            return attachmentId
              .split('/')
              .map(encodeURIComponent)
              .join('/')
          } // Get the attachment

          api.getAttachment = adapterFun$$1('getAttachment', function(
            docId,
            attachmentId,
            opts,
            callback,
          ) {
            if (typeof opts === 'function') {
              callback = opts
              opts = {}
            }

            var params = opts.rev ? '?rev=' + opts.rev : ''
            var url =
              genDBUrl(host, encodeDocId(docId)) +
              '/' +
              encodeAttachmentId(attachmentId) +
              params
            var contentType
            ourFetch(url, {
              method: 'GET',
            })
              .then(function(response) {
                contentType = response.headers.get('content-type')

                if (!response.ok) {
                  throw response
                } else {
                  if (typeof process !== 'undefined' && !process.browser) {
                    return response.buffer()
                  } else {
                    /* istanbul ignore next */
                    return response.blob()
                  }
                }
              })
              .then(function(blob) {
                // TODO: also remove
                if (typeof process !== 'undefined' && !process.browser) {
                  blob.type = contentType
                }

                callback(null, blob)
              })
              .catch(function(err) {
                callback(err)
              })
          }) // Remove the attachment given by the id and rev

          api.removeAttachment = adapterFun$$1(
            'removeAttachment',
            function(docId, attachmentId, rev, callback) {
              var url =
                genDBUrl(
                  host,
                  encodeDocId(docId) +
                    '/' +
                    encodeAttachmentId(attachmentId),
                ) +
                '?rev=' +
                rev
              fetchJSON(
                url,
                {
                  method: 'DELETE',
                },
                callback,
              ).catch(callback)
            },
          ) // Add the attachment given by blob and its contentType property
          // to the document with the given id, the revision given by rev, and
          // add it to the database given by host.

          api.putAttachment = adapterFun$$1('putAttachment', function(
            docId,
            attachmentId,
            rev,
            blob,
            type,
            callback,
          ) {
            if (typeof type === 'function') {
              callback = type
              type = blob
              blob = rev
              rev = null
            }

            var id =
              encodeDocId(docId) + '/' + encodeAttachmentId(attachmentId)
            var url = genDBUrl(host, id)

            if (rev) {
              url += '?rev=' + rev
            }

            if (typeof blob === 'string') {
              // input is assumed to be a base64 string
              var binary

              try {
                binary = thisAtob(blob)
              } catch (err) {
                return callback(
                  createError(
                    BAD_ARG,
                    'Attachment is not a valid base64 string',
                  ),
                )
              }

              blob = binary ? binStringToBluffer(binary, type) : ''
            } // Add the attachment

            fetchJSON(
              url,
              {
                headers: new h({
                  'Content-Type': type,
                }),
                method: 'PUT',
                body: blob,
              },
              callback,
            ).catch(callback)
          }) // Update/create multiple documents given by req in the database
          // given by host.

          api._bulkDocs = function(req, opts, callback) {
            // If new_edits=false then it prevents the database from creating
            // new revision numbers for the documents. Instead it just uses
            // the old ones. This is used in database replication.
            req.new_edits = opts.new_edits
            setup()
              .then(function() {
                return Promise.all(req.docs.map(preprocessAttachments$1))
              })
              .then(function() {
                // Update/create the documents
                return fetchJSON(
                  genDBUrl(host, '_bulk_docs'),
                  {
                    method: 'POST',
                    body: JSON.stringify(req),
                  },
                  callback,
                )
              })
              .catch(callback)
          } // Update/create document

          api._put = function(doc, opts, callback) {
            setup()
              .then(function() {
                return preprocessAttachments$1(doc)
              })
              .then(function() {
                return fetchJSON(genDBUrl(host, encodeDocId(doc._id)), {
                  method: 'PUT',
                  body: JSON.stringify(doc),
                })
              })
              .then(function(result) {
                callback(null, result.data)
              })
              .catch(function(err) {
                err.docId = doc && doc._id
                callback(err)
              })
          } // Get a listing of the documents in the database given
          // by host and ordered by increasing id.

          api.allDocs = adapterFun$$1('allDocs', function(opts, callback) {
            if (typeof opts === 'function') {
              callback = opts
              opts = {}
            }

            opts = clone(opts) // List of parameters to add to the GET request

            var params = {}
            var body
            var method = 'GET'

            if (opts.conflicts) {
              params.conflicts = true
            }
            /* istanbul ignore if */

            if (opts.update_seq) {
              params.update_seq = true
            }

            if (opts.descending) {
              params.descending = true
            }

            if (opts.include_docs) {
              params.include_docs = true
            } // added in CouchDB 1.6.0

            if (opts.attachments) {
              params.attachments = true
            }

            if (opts.key) {
              params.key = JSON.stringify(opts.key)
            }

            if (opts.start_key) {
              opts.startkey = opts.start_key
            }

            if (opts.startkey) {
              params.startkey = JSON.stringify(opts.startkey)
            }

            if (opts.end_key) {
              opts.endkey = opts.end_key
            }

            if (opts.endkey) {
              params.endkey = JSON.stringify(opts.endkey)
            }

            if (typeof opts.inclusive_end !== 'undefined') {
              params.inclusive_end = !!opts.inclusive_end
            }

            if (typeof opts.limit !== 'undefined') {
              params.limit = opts.limit
            }

            if (typeof opts.skip !== 'undefined') {
              params.skip = opts.skip
            }

            var paramStr = paramsToStr(params)

            if (typeof opts.keys !== 'undefined') {
              method = 'POST'
              body = {
                keys: opts.keys,
              }
            }

            fetchJSON(genDBUrl(host, '_all_docs' + paramStr), {
              method: method,
              body: JSON.stringify(body),
            })
              .then(function(result) {
                if (opts.include_docs && opts.attachments && opts.binary) {
                  result.data.rows.forEach(readAttachmentsAsBlobOrBuffer)
                }

                callback(null, result.data)
              })
              .catch(callback)
          }) // Get a list of changes made to documents in the database given by host.
          // TODO According to the README, there should be two other methods here,
          // api.changes.addListener and api.changes.removeListener.

          api._changes = function(opts) {
            // We internally page the results of a changes request, this means
            // if there is a large set of changes to be returned we can start
            // processing them quicker instead of waiting on the entire
            // set of changes to return and attempting to process them at once
            var batchSize =
              'batch_size' in opts ? opts.batch_size : CHANGES_BATCH_SIZE
            opts = clone(opts)

            if (opts.continuous && !('heartbeat' in opts)) {
              opts.heartbeat = DEFAULT_HEARTBEAT
            }

            var requestTimeout =
              'timeout' in opts ? opts.timeout : 30 * 1000 // ensure CHANGES_TIMEOUT_BUFFER applies

            if (
              'timeout' in opts &&
              opts.timeout &&
              requestTimeout - opts.timeout < CHANGES_TIMEOUT_BUFFER
            ) {
              requestTimeout = opts.timeout + CHANGES_TIMEOUT_BUFFER
            }
            /* istanbul ignore if */

            if (
              'heartbeat' in opts &&
              opts.heartbeat &&
              requestTimeout - opts.heartbeat < CHANGES_TIMEOUT_BUFFER
            ) {
              requestTimeout = opts.heartbeat + CHANGES_TIMEOUT_BUFFER
            }

            var params = {}

            if ('timeout' in opts && opts.timeout) {
              params.timeout = opts.timeout
            }

            var limit =
              typeof opts.limit !== 'undefined' ? opts.limit : false
            var leftToFetch = limit

            if (opts.style) {
              params.style = opts.style
            }

            if (
              opts.include_docs ||
              (opts.filter && typeof opts.filter === 'function')
            ) {
              params.include_docs = true
            }

            if (opts.attachments) {
              params.attachments = true
            }

            if (opts.continuous) {
              params.feed = 'longpoll'
            }

            if (opts.seq_interval) {
              params.seq_interval = opts.seq_interval
            }

            if (opts.conflicts) {
              params.conflicts = true
            }

            if (opts.descending) {
              params.descending = true
            }
            /* istanbul ignore if */

            if (opts.update_seq) {
              params.update_seq = true
            }

            if ('heartbeat' in opts) {
              // If the heartbeat value is false, it disables the default heartbeat
              if (opts.heartbeat) {
                params.heartbeat = opts.heartbeat
              }
            }

            if (opts.filter && typeof opts.filter === 'string') {
              params.filter = opts.filter
            }

            if (opts.view && typeof opts.view === 'string') {
              params.filter = '_view'
              params.view = opts.view
            } // If opts.query_params exists, pass it through to the changes request.
            // These parameters may be used by the filter on the source database.

            if (
              opts.query_params &&
              typeof opts.query_params === 'object'
            ) {
              for (var param_name in opts.query_params) {
                /* istanbul ignore else */
                if (opts.query_params.hasOwnProperty(param_name)) {
                  params[param_name] = opts.query_params[param_name]
                }
              }
            }

            var method = 'GET'
            var body

            if (opts.doc_ids) {
              // set this automagically for the user; it's annoying that couchdb
              // requires both a "filter" and a "doc_ids" param.
              params.filter = '_doc_ids'
              method = 'POST'
              body = {
                doc_ids: opts.doc_ids,
              }
            } else if (opts.selector) {
            /* istanbul ignore next */
              // set this automagically for the user, similar to above
              params.filter = '_selector'
              method = 'POST'
              body = {
                selector: opts.selector,
              }
            }

            var controller = new a()
            var lastFetchedSeq // Get all the changes starting wtih the one immediately after the
            // sequence number given by since.

            var fetchData = function(since, callback) {
              if (opts.aborted) {
                return
              }

              params.since = since // "since" can be any kind of json object in Cloudant/CouchDB 2.x

              /* istanbul ignore next */

              if (typeof params.since === 'object') {
                params.since = JSON.stringify(params.since)
              }

              if (opts.descending) {
                if (limit) {
                  params.limit = leftToFetch
                }
              } else {
                params.limit =
                  !limit || leftToFetch > batchSize
                    ? batchSize
                    : leftToFetch
              } // Set the options for the ajax call

              var url = genDBUrl(host, '_changes' + paramsToStr(params))
              var fetchOpts = {
                signal: controller.signal,
                method: method,
                body: JSON.stringify(body),
              }
              lastFetchedSeq = since
              /* istanbul ignore if */

              if (opts.aborted) {
                return
              } // Get the changes

              setup()
                .then(function() {
                  return fetchJSON(url, fetchOpts, callback)
                })
                .catch(callback)
            } // If opts.since exists, get all the changes from the sequence
            // number given by opts.since. Otherwise, get all the changes
            // from the sequence number 0.

            var results = {
              results: [],
            }

            var fetched = function(err, res) {
              if (opts.aborted) {
                return
              }

              var raw_results_length = 0 // If the result of the ajax call (res) contains changes (res.results)

              if (res && res.results) {
                raw_results_length = res.results.length
                results.last_seq = res.last_seq
                var pending = null
                var lastSeq = null // Attach 'pending' property if server supports it (CouchDB 2.0+)

                /* istanbul ignore if */

                if (typeof res.pending === 'number') {
                  pending = res.pending
                }

                if (
                  typeof results.last_seq === 'string' ||
                  typeof results.last_seq === 'number'
                ) {
                  lastSeq = results.last_seq
                } // For each change

                var req = {}
                req.query = opts.query_params
                res.results = res.results.filter(function(c) {
                  leftToFetch--
                  var ret = filterChange(opts)(c)

                  if (ret) {
                    if (
                      opts.include_docs &&
                      opts.attachments &&
                      opts.binary
                    ) {
                      readAttachmentsAsBlobOrBuffer(c)
                    }

                    if (opts.return_docs) {
                      results.results.push(c)
                    }

                    opts.onChange(c, pending, lastSeq)
                  }

                  return ret
                })
              } else if (err) {
                // In case of an error, stop listening for changes and call
                // opts.complete
                opts.aborted = true
                opts.complete(err)
                return
              } // The changes feed may have timed out with no results
              // if so reuse last update sequence

              if (res && res.last_seq) {
                lastFetchedSeq = res.last_seq
              }

              var finished =
                (limit && leftToFetch <= 0) ||
                (res && raw_results_length < batchSize) ||
                opts.descending

              if (
                (opts.continuous && !(limit && leftToFetch <= 0)) ||
                !finished
              ) {
                // Queue a call to fetch again with the newest sequence number
                ;(0, _immediate.default)(function() {
                  fetchData(lastFetchedSeq, fetched)
                })
              } else {
                // We're done, call the callback
                opts.complete(null, results)
              }
            }

            fetchData(opts.since || 0, fetched) // Return a method to cancel this method from processing any more

            return {
              cancel: function() {
                opts.aborted = true
                controller.abort()
              },
            }
          } // Given a set of document/revision IDs (given by req), tets the subset of
          // those that do NOT correspond to revisions stored in the database.
          // See http://wiki.apache.org/couchdb/HttpPostRevsDiff

          api.revsDiff = adapterFun$$1('revsDiff', function(
            req,
            opts,
            callback,
          ) {
            // If no options were given, set the callback to be the second parameter
            if (typeof opts === 'function') {
              callback = opts
              opts = {}
            } // Get the missing document/revision IDs

            fetchJSON(
              genDBUrl(host, '_revs_diff'),
              {
                method: 'POST',
                body: JSON.stringify(req),
              },
              callback,
            ).catch(callback)
          })

          api._close = function(callback) {
            callback()
          }

          api._destroy = function(options, callback) {
            fetchJSON(genDBUrl(host, ''), {
              method: 'DELETE',
            })
              .then(function(json) {
                callback(null, json)
              })
              .catch(function(err) {
                /* istanbul ignore if */
                if (err.status === 404) {
                  callback(null, {
                    ok: true,
                  })
                } else {
                  callback(err)
                }
              })
          }
        } // HttpPouch is a valid adapter.

        HttpPouch.valid = function() {
          return true
        }

        function HttpPouch$1(PouchDB) {
          PouchDB.adapter('http', HttpPouch, false)
          PouchDB.adapter('https', HttpPouch, false)
        }

        function QueryParseError(message) {
          this.status = 400
          this.name = 'query_parse_error'
          this.message = message
          this.error = true

          try {
            Error.captureStackTrace(this, QueryParseError)
          } catch (e) {}
        }

        ;(0, _inherits.default)(QueryParseError, Error)

        function NotFoundError(message) {
          this.status = 404
          this.name = 'not_found'
          this.message = message
          this.error = true

          try {
            Error.captureStackTrace(this, NotFoundError)
          } catch (e) {}
        }

        ;(0, _inherits.default)(NotFoundError, Error)

        function BuiltInError(message) {
          this.status = 500
          this.name = 'invalid_value'
          this.message = message
          this.error = true

          try {
            Error.captureStackTrace(this, BuiltInError)
          } catch (e) {}
        }

        ;(0, _inherits.default)(BuiltInError, Error)

        function promisedCallback(promise, callback) {
          if (callback) {
            promise.then(
              function(res) {
                ;(0, _immediate.default)(function() {
                  callback(null, res)
                })
              },
              function(reason) {
                ;(0, _immediate.default)(function() {
                  callback(reason)
                })
              },
            )
          }

          return promise
        }

        function callbackify(fun) {
          return (0, _argsarray.default)(function(args) {
            var cb = args.pop()
            var promise = fun.apply(this, args)

            if (typeof cb === 'function') {
              promisedCallback(promise, cb)
            }

            return promise
          })
        } // Promise finally util similar to Q.finally

        function fin(promise, finalPromiseFactory) {
          return promise.then(
            function(res) {
              return finalPromiseFactory().then(function() {
                return res
              })
            },
            function(reason) {
              return finalPromiseFactory().then(function() {
                throw reason
              })
            },
          )
        }

        function sequentialize(queue, promiseFactory) {
          return function() {
            var args = arguments
            var that = this
            return queue.add(function() {
              return promiseFactory.apply(that, args)
            })
          }
        } // uniq an array of strings, order not guaranteed
        // similar to underscore/lodash _.uniq

        function uniq(arr) {
          var theSet = new ExportedSet(arr)
          var result = new Array(theSet.size)
          var index = -1
          theSet.forEach(function(value) {
            result[++index] = value
          })
          return result
        }

        function mapToKeysArray(map) {
          var result = new Array(map.size)
          var index = -1
          map.forEach(function(value, key) {
            result[++index] = key
          })
          return result
        }

        function createBuiltInError(name) {
          var message =
            'builtin ' +
            name +
            ' function requires map values to be numbers' +
            ' or number arrays'
          return new BuiltInError(message)
        }

        function sum(values) {
          var result = 0

          for (var i = 0, len = values.length; i < len; i++) {
            var num = values[i]

            if (typeof num !== 'number') {
              if (Array.isArray(num)) {
                // lists of numbers are also allowed, sum them separately
                result = typeof result === 'number' ? [result] : result

                for (var j = 0, jLen = num.length; j < jLen; j++) {
                  var jNum = num[j]

                  if (typeof jNum !== 'number') {
                    throw createBuiltInError('_sum')
                  } else if (typeof result[j] === 'undefined') {
                    result.push(jNum)
                  } else {
                    result[j] += jNum
                  }
                }
              } else {
                // not array/number
                throw createBuiltInError('_sum')
              }
            } else if (typeof result === 'number') {
              result += num
            } else {
              // add number to array
              result[0] += num
            }
          }

          return result
        }

        var log = guardedConsole.bind(null, 'log')
        var isArray = Array.isArray
        var toJSON = JSON.parse

        function evalFunctionWithEval(func, emit) {
          return scopeEval('return (' + func.replace(/;\s*$/, '') + ');', {
            emit: emit,
            sum: sum,
            log: log,
            isArray: isArray,
            toJSON: toJSON,
          })
        }
        /*
         * Simple task queue to sequentialize actions. Assumes
         * callbacks will eventually fire (once).
         */

        function TaskQueue$1() {
          this.promise = new Promise(function(fulfill) {
            fulfill()
          })
        }

        TaskQueue$1.prototype.add = function(promiseFactory) {
          this.promise = this.promise
            .catch(function() {
              // just recover
            })
            .then(function() {
              return promiseFactory()
            })
          return this.promise
        }

        TaskQueue$1.prototype.finish = function() {
          return this.promise
        }

        function stringify(input) {
          if (!input) {
            return 'undefined' // backwards compat for empty reduce
          } // for backwards compat with mapreduce, functions/strings are stringified
          // as-is. everything else is JSON-stringified.

          switch (typeof input) {
            case 'function':
              // e.g. a mapreduce map
              return input.toString()

            case 'string':
              // e.g. a mapreduce built-in _reduce function
              return input.toString()

            default:
              // e.g. a JSON object in the case of mango queries
              return JSON.stringify(input)
          }
        }
        /* create a string signature for a view so we can cache it and uniq it */

        function createViewSignature(mapFun, reduceFun) {
          // the "undefined" part is for backwards compatibility
          return stringify(mapFun) + stringify(reduceFun) + 'undefined'
        }

        function createView(
          sourceDB,
          viewName,
          mapFun,
          reduceFun,
          temporary,
          localDocName,
        ) {
          var viewSignature = createViewSignature(mapFun, reduceFun)
          var cachedViews

          if (!temporary) {
            // cache this to ensure we don't try to update the same view twice
            cachedViews = sourceDB._cachedViews =
              sourceDB._cachedViews || {}

            if (cachedViews[viewSignature]) {
              return cachedViews[viewSignature]
            }
          }

          var promiseForView = sourceDB.info().then(function(info) {
            var depDbName =
              info.db_name +
              '-mrview-' +
              (temporary ? 'temp' : stringMd5(viewSignature)) // save the view name in the source db so it can be cleaned up if necessary
            // (e.g. when the _design doc is deleted, remove all associated view data)

            function diffFunction(doc) {
              doc.views = doc.views || {}
              var fullViewName = viewName

              if (fullViewName.indexOf('/') === -1) {
                fullViewName = viewName + '/' + viewName
              }

              var depDbs = (doc.views[fullViewName] =
                doc.views[fullViewName] || {})
              /* istanbul ignore if */

              if (depDbs[depDbName]) {
                return // no update necessary
              }

              depDbs[depDbName] = true
              return doc
            }

            return upsert(
              sourceDB,
              '_local/' + localDocName,
              diffFunction,
            ).then(function() {
              return sourceDB
                .registerDependentDatabase(depDbName)
                .then(function(res) {
                  var db = res.db
                  db.auto_compaction = true
                  var view = {
                    name: depDbName,
                    db: db,
                    sourceDB: sourceDB,
                    adapter: sourceDB.adapter,
                    mapFun: mapFun,
                    reduceFun: reduceFun,
                  }
                  return view.db
                    .get('_local/lastSeq')
                    .catch(function(err) {
                      /* istanbul ignore if */
                      if (err.status !== 404) {
                        throw err
                      }
                    })
                    .then(function(lastSeqDoc) {
                      view.seq = lastSeqDoc ? lastSeqDoc.seq : 0

                      if (cachedViews) {
                        view.db.once('destroyed', function() {
                          delete cachedViews[viewSignature]
                        })
                      }

                      return view
                    })
                })
            })
          })

          if (cachedViews) {
            cachedViews[viewSignature] = promiseForView
          }

          return promiseForView
        }

        var persistentQueues = {}
        var tempViewQueue = new TaskQueue$1()
        var CHANGES_BATCH_SIZE$1 = 50

        function parseViewName(name) {
          // can be either 'ddocname/viewname' or just 'viewname'
          // (where the ddoc name is the same)
          return name.indexOf('/') === -1 ? [name, name] : name.split('/')
        }

        function isGenOne(changes) {
          // only return true if the current change is 1-
          // and there are no other leafs
          return changes.length === 1 && /^1-/.test(changes[0].rev)
        }

        function emitError(db, e) {
          try {
            db.emit('error', e)
          } catch (err) {
            guardedConsole(
              'error',
              "The user's map/reduce function threw an uncaught error.\n" +
                'You can debug this error by doing:\n' +
                "myDatabase.on('error', function (err) { debugger; });\n" +
                'Please double-check your map/reduce function.',
            )
            guardedConsole('error', e)
          }
        }
        /**
         * Returns an "abstract" mapreduce object of the form:
         *
         *   {
         *     query: queryFun,
         *     viewCleanup: viewCleanupFun
         *   }
         *
         * Arguments are:
         *
         * localDoc: string
         *   This is for the local doc that gets saved in order to track the
         *   "dependent" DBs and clean them up for viewCleanup. It should be
         *   unique, so that indexer plugins don't collide with each other.
         * mapper: function (mapFunDef, emit)
         *   Returns a map function based on the mapFunDef, which in the case of
         *   normal map/reduce is just the de-stringified function, but may be
         *   something else, such as an object in the case of pouchdb-find.
         * reducer: function (reduceFunDef)
         *   Ditto, but for reducing. Modules don't have to support reducing
         *   (e.g. pouchdb-find).
         * ddocValidator: function (ddoc, viewName)
         *   Throws an error if the ddoc or viewName is not valid.
         *   This could be a way to communicate to the user that the configuration for the
         *   indexer is invalid.
         */

        function createAbstractMapReduce(
          localDocName,
          mapper,
          reducer,
          ddocValidator,
        ) {
          function tryMap(db, fun, doc) {
            // emit an event if there was an error thrown by a map function.
            // putting try/catches in a single function also avoids deoptimizations.
            try {
              fun(doc)
            } catch (e) {
              emitError(db, e)
            }
          }

          function tryReduce(db, fun, keys, values, rereduce) {
            // same as above, but returning the result or an error. there are two separate
            // functions to avoid extra memory allocations since the tryCode() case is used
            // for custom map functions (common) vs this function, which is only used for
            // custom reduce functions (rare)
            try {
              return {
                output: fun(keys, values, rereduce),
              }
            } catch (e) {
              emitError(db, e)
              return {
                error: e,
              }
            }
          }

          function sortByKeyThenValue(x, y) {
            var keyCompare = collate(x.key, y.key)
            return keyCompare !== 0
              ? keyCompare
              : collate(x.value, y.value)
          }

          function sliceResults(results, limit, skip) {
            skip = skip || 0

            if (typeof limit === 'number') {
              return results.slice(skip, limit + skip)
            } else if (skip > 0) {
              return results.slice(skip)
            }

            return results
          }

          function rowToDocId(row) {
            var val = row.value // Users can explicitly specify a joined doc _id, or it
            // defaults to the doc _id that emitted the key/value.

            var docId =
              (val && typeof val === 'object' && val._id) || row.id
            return docId
          }

          function readAttachmentsAsBlobOrBuffer(res) {
            res.rows.forEach(function(row) {
              var atts = row.doc && row.doc._attachments

              if (!atts) {
                return
              }

              Object.keys(atts).forEach(function(filename) {
                var att = atts[filename]
                atts[filename].data = b64ToBluffer(
                  att.data,
                  att.content_type,
                )
              })
            })
          }

          function postprocessAttachments(opts) {
            return function(res) {
              if (opts.include_docs && opts.attachments && opts.binary) {
                readAttachmentsAsBlobOrBuffer(res)
              }

              return res
            }
          }

          function addHttpParam(paramName, opts, params, asJson) {
            // add an http param from opts to params, optionally json-encoded
            var val = opts[paramName]

            if (typeof val !== 'undefined') {
              if (asJson) {
                val = encodeURIComponent(JSON.stringify(val))
              }

              params.push(paramName + '=' + val)
            }
          }

          function coerceInteger(integerCandidate) {
            if (typeof integerCandidate !== 'undefined') {
              var asNumber = Number(integerCandidate) // prevents e.g. '1foo' or '1.1' being coerced to 1

              if (
                !isNaN(asNumber) &&
                asNumber === parseInt(integerCandidate, 10)
              ) {
                return asNumber
              } else {
                return integerCandidate
              }
            }
          }

          function coerceOptions(opts) {
            opts.group_level = coerceInteger(opts.group_level)
            opts.limit = coerceInteger(opts.limit)
            opts.skip = coerceInteger(opts.skip)
            return opts
          }

          function checkPositiveInteger(number) {
            if (number) {
              if (typeof number !== 'number') {
                return new QueryParseError(
                  'Invalid value for integer: "' + number + '"',
                )
              }

              if (number < 0) {
                return new QueryParseError(
                  'Invalid value for positive integer: ' +
                    '"' +
                    number +
                    '"',
                )
              }
            }
          }

          function checkQueryParseError(options, fun) {
            var startkeyName = options.descending ? 'endkey' : 'startkey'
            var endkeyName = options.descending ? 'startkey' : 'endkey'

            if (
              typeof options[startkeyName] !== 'undefined' &&
              typeof options[endkeyName] !== 'undefined' &&
              collate(options[startkeyName], options[endkeyName]) > 0
            ) {
              throw new QueryParseError(
                'No rows can match your key range, ' +
                  'reverse your start_key and end_key or set {descending : true}',
              )
            } else if (fun.reduce && options.reduce !== false) {
              if (options.include_docs) {
                throw new QueryParseError(
                  '{include_docs:true} is invalid for reduce',
                )
              } else if (
                options.keys &&
                options.keys.length > 1 &&
                !options.group &&
                !options.group_level
              ) {
                throw new QueryParseError(
                  'Multi-key fetches for reduce views must use ' +
                    '{group: true}',
                )
              }
            }

            ;['group_level', 'limit', 'skip'].forEach(function(
              optionName,
            ) {
              var error = checkPositiveInteger(options[optionName])

              if (error) {
                throw error
              }
            })
          }

          function httpQuery(db, fun, opts) {
            // List of parameters to add to the PUT request
            var params = []
            var body
            var method = 'GET'
            var ok, status // If opts.reduce exists and is defined, then add it to the list
            // of parameters.
            // If reduce=false then the results are that of only the map function
            // not the final result of map and reduce.

            addHttpParam('reduce', opts, params)
            addHttpParam('include_docs', opts, params)
            addHttpParam('attachments', opts, params)
            addHttpParam('limit', opts, params)
            addHttpParam('descending', opts, params)
            addHttpParam('group', opts, params)
            addHttpParam('group_level', opts, params)
            addHttpParam('skip', opts, params)
            addHttpParam('stale', opts, params)
            addHttpParam('conflicts', opts, params)
            addHttpParam('startkey', opts, params, true)
            addHttpParam('start_key', opts, params, true)
            addHttpParam('endkey', opts, params, true)
            addHttpParam('end_key', opts, params, true)
            addHttpParam('inclusive_end', opts, params)
            addHttpParam('key', opts, params, true)
            addHttpParam('update_seq', opts, params) // Format the list of parameters into a valid URI query string

            params = params.join('&')
            params = params === '' ? '' : '?' + params // If keys are supplied, issue a POST to circumvent GET query string limits
            // see http://wiki.apache.org/couchdb/HTTP_view_API#Querying_Options

            if (typeof opts.keys !== 'undefined') {
              var MAX_URL_LENGTH = 2000 // according to http://stackoverflow.com/a/417184/680742,
              // the de facto URL length limit is 2000 characters

              var keysAsString =
                'keys=' + encodeURIComponent(JSON.stringify(opts.keys))

              if (
                keysAsString.length + params.length + 1 <=
                MAX_URL_LENGTH
              ) {
                // If the keys are short enough, do a GET. we do this to work around
                // Safari not understanding 304s on POSTs (see pouchdb/pouchdb#1239)
                params += (params[0] === '?' ? '&' : '?') + keysAsString
              } else {
                method = 'POST'

                if (typeof fun === 'string') {
                  body = {
                    keys: opts.keys,
                  }
                } else {
                  // fun is {map : mapfun}, so append to this
                  fun.keys = opts.keys
                }
              }
            } // We are referencing a query defined in the design doc

            if (typeof fun === 'string') {
              var parts = parseViewName(fun)
              return db
                .fetch(
                  '_design/' + parts[0] + '/_view/' + parts[1] + params,
                  {
                    headers: new h({
                      'Content-Type': 'application/json',
                    }),
                    method: method,
                    body: JSON.stringify(body),
                  },
                )
                .then(function(response) {
                  ok = response.ok
                  status = response.status
                  return response.json()
                })
                .then(function(result) {
                  if (!ok) {
                    result.status = status
                    throw generateErrorFromResponse(result)
                  } // fail the entire request if the result contains an error

                  result.rows.forEach(function(row) {
                    /* istanbul ignore if */
                    if (
                      row.value &&
                      row.value.error &&
                      row.value.error === 'builtin_reduce_error'
                    ) {
                      throw new Error(row.reason)
                    }
                  })
                  return result
                })
                .then(postprocessAttachments(opts))
            } // We are using a temporary view, terrible for performance, good for testing

            body = body || {}
            Object.keys(fun).forEach(function(key) {
              if (Array.isArray(fun[key])) {
                body[key] = fun[key]
              } else {
                body[key] = fun[key].toString()
              }
            })
            return db
              .fetch('_temp_view' + params, {
                headers: new h({
                  'Content-Type': 'application/json',
                }),
                method: 'POST',
                body: JSON.stringify(body),
              })
              .then(function(response) {
                ok = response.ok
                status = response.status
                return response.json()
              })
              .then(function(result) {
                if (!ok) {
                  result.status = status
                  throw generateErrorFromResponse(result)
                }

                return result
              })
              .then(postprocessAttachments(opts))
          } // custom adapters can define their own api._query
          // and override the default behavior

          /* istanbul ignore next */

          function customQuery(db, fun, opts) {
            return new Promise(function(resolve, reject) {
              db._query(fun, opts, function(err, res) {
                if (err) {
                  return reject(err)
                }

                resolve(res)
              })
            })
          } // custom adapters can define their own api._viewCleanup
          // and override the default behavior

          /* istanbul ignore next */

          function customViewCleanup(db) {
            return new Promise(function(resolve, reject) {
              db._viewCleanup(function(err, res) {
                if (err) {
                  return reject(err)
                }

                resolve(res)
              })
            })
          }

          function defaultsTo(value) {
            return function(reason) {
              /* istanbul ignore else */
              if (reason.status === 404) {
                return value
              } else {
                throw reason
              }
            }
          } // returns a promise for a list of docs to update, based on the input docId.
          // the order doesn't matter, because post-3.2.0, bulkDocs
          // is an atomic operation in all three adapters.

          function getDocsToPersist(docId, view, docIdsToChangesAndEmits) {
            var metaDocId = '_local/doc_' + docId
            var defaultMetaDoc = {
              _id: metaDocId,
              keys: [],
            }
            var docData = docIdsToChangesAndEmits.get(docId)
            var indexableKeysToKeyValues = docData[0]
            var changes = docData[1]

            function getMetaDoc() {
              if (isGenOne(changes)) {
                // generation 1, so we can safely assume initial state
                // for performance reasons (avoids unnecessary GETs)
                return Promise.resolve(defaultMetaDoc)
              }

              return view.db
                .get(metaDocId)
                .catch(defaultsTo(defaultMetaDoc))
            }

            function getKeyValueDocs(metaDoc) {
              if (!metaDoc.keys.length) {
                // no keys, no need for a lookup
                return Promise.resolve({
                  rows: [],
                })
              }

              return view.db.allDocs({
                keys: metaDoc.keys,
                include_docs: true,
              })
            }

            function processKeyValueDocs(metaDoc, kvDocsRes) {
              var kvDocs = []
              var oldKeys = new ExportedSet()

              for (var i = 0, len = kvDocsRes.rows.length; i < len; i++) {
                var row = kvDocsRes.rows[i]
                var doc = row.doc

                if (!doc) {
                  // deleted
                  continue
                }

                kvDocs.push(doc)
                oldKeys.add(doc._id)
                doc._deleted = !indexableKeysToKeyValues.has(doc._id)

                if (!doc._deleted) {
                  var keyValue = indexableKeysToKeyValues.get(doc._id)

                  if ('value' in keyValue) {
                    doc.value = keyValue.value
                  }
                }
              }

              var newKeys = mapToKeysArray(indexableKeysToKeyValues)
              newKeys.forEach(function(key) {
                if (!oldKeys.has(key)) {
                  // new doc
                  var kvDoc = {
                    _id: key,
                  }
                  var keyValue = indexableKeysToKeyValues.get(key)

                  if ('value' in keyValue) {
                    kvDoc.value = keyValue.value
                  }

                  kvDocs.push(kvDoc)
                }
              })
              metaDoc.keys = uniq(newKeys.concat(metaDoc.keys))
              kvDocs.push(metaDoc)
              return kvDocs
            }

            return getMetaDoc().then(function(metaDoc) {
              return getKeyValueDocs(metaDoc).then(function(kvDocsRes) {
                return processKeyValueDocs(metaDoc, kvDocsRes)
              })
            })
          } // updates all emitted key/value docs and metaDocs in the mrview database
          // for the given batch of documents from the source database

          function saveKeyValues(view, docIdsToChangesAndEmits, seq) {
            var seqDocId = '_local/lastSeq'
            return view.db
              .get(seqDocId)
              .catch(
                defaultsTo({
                  _id: seqDocId,
                  seq: 0,
                }),
              )
              .then(function(lastSeqDoc) {
                var docIds = mapToKeysArray(docIdsToChangesAndEmits)
                return Promise.all(
                  docIds.map(function(docId) {
                    return getDocsToPersist(
                      docId,
                      view,
                      docIdsToChangesAndEmits,
                    )
                  }),
                ).then(function(listOfDocsToPersist) {
                  var docsToPersist = flatten(listOfDocsToPersist)
                  lastSeqDoc.seq = seq
                  docsToPersist.push(lastSeqDoc) // write all docs in a single operation, update the seq once

                  return view.db.bulkDocs({
                    docs: docsToPersist,
                  })
                })
              })
          }

          function getQueue(view) {
            var viewName = typeof view === 'string' ? view : view.name
            var queue = persistentQueues[viewName]

            if (!queue) {
              queue = persistentQueues[viewName] = new TaskQueue$1()
            }

            return queue
          }

          function updateView(view) {
            return sequentialize(getQueue(view), function() {
              return updateViewInQueue(view)
            })()
          }

          function updateViewInQueue(view) {
            // bind the emit function once
            var mapResults
            var doc

            function emit(key, value) {
              var output = {
                id: doc._id,
                key: normalizeKey(key),
              } // Don't explicitly store the value unless it's defined and non-null.
              // This saves on storage space, because often people don't use it.

              if (typeof value !== 'undefined' && value !== null) {
                output.value = normalizeKey(value)
              }

              mapResults.push(output)
            }

            var mapFun = mapper(view.mapFun, emit)
            var currentSeq = view.seq || 0

            function processChange(docIdsToChangesAndEmits, seq) {
              return function() {
                return saveKeyValues(view, docIdsToChangesAndEmits, seq)
              }
            }

            var queue = new TaskQueue$1()

            function processNextBatch() {
              return view.sourceDB
                .changes({
                  return_docs: true,
                  conflicts: true,
                  include_docs: true,
                  style: 'all_docs',
                  since: currentSeq,
                  limit: CHANGES_BATCH_SIZE$1,
                })
                .then(processBatch)
            }

            function processBatch(response) {
              var results = response.results

              if (!results.length) {
                return
              }

              var docIdsToChangesAndEmits = createDocIdsToChangesAndEmits(
                results,
              )
              queue.add(processChange(docIdsToChangesAndEmits, currentSeq))

              if (results.length < CHANGES_BATCH_SIZE$1) {
                return
              }

              return processNextBatch()
            }

            function createDocIdsToChangesAndEmits(results) {
              var docIdsToChangesAndEmits = new ExportedMap()

              for (var i = 0, len = results.length; i < len; i++) {
                var change = results[i]

                if (change.doc._id[0] !== '_') {
                  mapResults = []
                  doc = change.doc

                  if (!doc._deleted) {
                    tryMap(view.sourceDB, mapFun, doc)
                  }

                  mapResults.sort(sortByKeyThenValue)
                  var indexableKeysToKeyValues = createIndexableKeysToKeyValues(
                    mapResults,
                  )
                  docIdsToChangesAndEmits.set(change.doc._id, [
                    indexableKeysToKeyValues,
                    change.changes,
                  ])
                }

                currentSeq = change.seq
              }

              return docIdsToChangesAndEmits
            }

            function createIndexableKeysToKeyValues(mapResults) {
              var indexableKeysToKeyValues = new ExportedMap()
              var lastKey

              for (var i = 0, len = mapResults.length; i < len; i++) {
                var emittedKeyValue = mapResults[i]
                var complexKey = [emittedKeyValue.key, emittedKeyValue.id]

                if (i > 0 && collate(emittedKeyValue.key, lastKey) === 0) {
                  complexKey.push(i) // dup key+id, so make it unique
                }

                indexableKeysToKeyValues.set(
                  toIndexableString(complexKey),
                  emittedKeyValue,
                )
                lastKey = emittedKeyValue.key
              }

              return indexableKeysToKeyValues
            }

            return processNextBatch()
              .then(function() {
                return queue.finish()
              })
              .then(function() {
                view.seq = currentSeq
              })
          }

          function reduceView(view, results, options) {
            if (options.group_level === 0) {
              delete options.group_level
            }

            var shouldGroup = options.group || options.group_level
            var reduceFun = reducer(view.reduceFun)
            var groups = []
            var lvl = isNaN(options.group_level)
              ? Number.POSITIVE_INFINITY
              : options.group_level
            results.forEach(function(e) {
              var last = groups[groups.length - 1]
              var groupKey = shouldGroup ? e.key : null // only set group_level for array keys

              if (shouldGroup && Array.isArray(groupKey)) {
                groupKey = groupKey.slice(0, lvl)
              }

              if (last && collate(last.groupKey, groupKey) === 0) {
                last.keys.push([e.key, e.id])
                last.values.push(e.value)
                return
              }

              groups.push({
                keys: [[e.key, e.id]],
                values: [e.value],
                groupKey: groupKey,
              })
            })
            results = []

            for (var i = 0, len = groups.length; i < len; i++) {
              var e = groups[i]
              var reduceTry = tryReduce(
                view.sourceDB,
                reduceFun,
                e.keys,
                e.values,
                false,
              )

              if (
                reduceTry.error &&
                reduceTry.error instanceof BuiltInError
              ) {
                // CouchDB returns an error if a built-in errors out
                throw reduceTry.error
              }

              results.push({
                // CouchDB just sets the value to null if a non-built-in errors out
                value: reduceTry.error ? null : reduceTry.output,
                key: e.groupKey,
              })
            } // no total_rows/offset when reducing

            return {
              rows: sliceResults(results, options.limit, options.skip),
            }
          }

          function queryView(view, opts) {
            return sequentialize(getQueue(view), function() {
              return queryViewInQueue(view, opts)
            })()
          }

          function queryViewInQueue(view, opts) {
            var totalRows
            var shouldReduce = view.reduceFun && opts.reduce !== false
            var skip = opts.skip || 0

            if (typeof opts.keys !== 'undefined' && !opts.keys.length) {
              // equivalent query
              opts.limit = 0
              delete opts.keys
            }

            function fetchFromView(viewOpts) {
              viewOpts.include_docs = true
              return view.db.allDocs(viewOpts).then(function(res) {
                totalRows = res.total_rows
                return res.rows.map(function(result) {
                  // implicit migration - in older versions of PouchDB,
                  // we explicitly stored the doc as {id: ..., key: ..., value: ...}
                  // this is tested in a migration test

                  /* istanbul ignore next */
                  if (
                    'value' in result.doc &&
                    typeof result.doc.value === 'object' &&
                    result.doc.value !== null
                  ) {
                    var keys = Object.keys(result.doc.value).sort() // this detection method is not perfect, but it's unlikely the user
                    // emitted a value which was an object with these 3 exact keys

                    var expectedKeys = ['id', 'key', 'value']

                    if (!(keys < expectedKeys || keys > expectedKeys)) {
                      return result.doc.value
                    }
                  }

                  var parsedKeyAndDocId = parseIndexableString(
                    result.doc._id,
                  )
                  return {
                    key: parsedKeyAndDocId[0],
                    id: parsedKeyAndDocId[1],
                    value: 'value' in result.doc ? result.doc.value : null,
                  }
                })
              })
            }

            function onMapResultsReady(rows) {
              var finalResults

              if (shouldReduce) {
                finalResults = reduceView(view, rows, opts)
              } else {
                finalResults = {
                  total_rows: totalRows,
                  offset: skip,
                  rows: rows,
                }
              }
              /* istanbul ignore if */

              if (opts.update_seq) {
                finalResults.update_seq = view.seq
              }

              if (opts.include_docs) {
                var docIds = uniq(rows.map(rowToDocId))
                return view.sourceDB
                  .allDocs({
                    keys: docIds,
                    include_docs: true,
                    conflicts: opts.conflicts,
                    attachments: opts.attachments,
                    binary: opts.binary,
                  })
                  .then(function(allDocsRes) {
                    var docIdsToDocs = new ExportedMap()
                    allDocsRes.rows.forEach(function(row) {
                      docIdsToDocs.set(row.id, row.doc)
                    })
                    rows.forEach(function(row) {
                      var docId = rowToDocId(row)
                      var doc = docIdsToDocs.get(docId)

                      if (doc) {
                        row.doc = doc
                      }
                    })
                    return finalResults
                  })
              } else {
                return finalResults
              }
            }

            if (typeof opts.keys !== 'undefined') {
              var keys = opts.keys
              var fetchPromises = keys.map(function(key) {
                var viewOpts = {
                  startkey: toIndexableString([key]),
                  endkey: toIndexableString([key, {}]),
                }
                /* istanbul ignore if */

                if (opts.update_seq) {
                  viewOpts.update_seq = true
                }

                return fetchFromView(viewOpts)
              })
              return Promise.all(fetchPromises)
                .then(flatten)
                .then(onMapResultsReady)
            } else {
              // normal query, no 'keys'
              var viewOpts = {
                descending: opts.descending,
              }
              /* istanbul ignore if */

              if (opts.update_seq) {
                viewOpts.update_seq = true
              }

              var startkey
              var endkey

              if ('start_key' in opts) {
                startkey = opts.start_key
              }

              if ('startkey' in opts) {
                startkey = opts.startkey
              }

              if ('end_key' in opts) {
                endkey = opts.end_key
              }

              if ('endkey' in opts) {
                endkey = opts.endkey
              }

              if (typeof startkey !== 'undefined') {
                viewOpts.startkey = opts.descending
                  ? toIndexableString([startkey, {}])
                  : toIndexableString([startkey])
              }

              if (typeof endkey !== 'undefined') {
                var inclusiveEnd = opts.inclusive_end !== false

                if (opts.descending) {
                  inclusiveEnd = !inclusiveEnd
                }

                viewOpts.endkey = toIndexableString(
                  inclusiveEnd ? [endkey, {}] : [endkey],
                )
              }

              if (typeof opts.key !== 'undefined') {
                var keyStart = toIndexableString([opts.key])
                var keyEnd = toIndexableString([opts.key, {}])

                if (viewOpts.descending) {
                  viewOpts.endkey = keyStart
                  viewOpts.startkey = keyEnd
                } else {
                  viewOpts.startkey = keyStart
                  viewOpts.endkey = keyEnd
                }
              }

              if (!shouldReduce) {
                if (typeof opts.limit === 'number') {
                  viewOpts.limit = opts.limit
                }

                viewOpts.skip = skip
              }

              return fetchFromView(viewOpts).then(onMapResultsReady)
            }
          }

          function httpViewCleanup(db) {
            return db
              .fetch('_view_cleanup', {
                headers: new h({
                  'Content-Type': 'application/json',
                }),
                method: 'POST',
              })
              .then(function(response) {
                return response.json()
              })
          }

          function localViewCleanup(db) {
            return db.get('_local/' + localDocName).then(
              function(metaDoc) {
                var docsToViews = new ExportedMap()
                Object.keys(metaDoc.views).forEach(function(fullViewName) {
                  var parts = parseViewName(fullViewName)
                  var designDocName = '_design/' + parts[0]
                  var viewName = parts[1]
                  var views = docsToViews.get(designDocName)

                  if (!views) {
                    views = new ExportedSet()
                    docsToViews.set(designDocName, views)
                  }

                  views.add(viewName)
                })
                var opts = {
                  keys: mapToKeysArray(docsToViews),
                  include_docs: true,
                }
                return db.allDocs(opts).then(function(res) {
                  var viewsToStatus = {}
                  res.rows.forEach(function(row) {
                    var ddocName = row.key.substring(8) // cuts off '_design/'

                    docsToViews.get(row.key).forEach(function(viewName) {
                      var fullViewName = ddocName + '/' + viewName
                      /* istanbul ignore if */

                      if (!metaDoc.views[fullViewName]) {
                        // new format, without slashes, to support PouchDB 2.2.0
                        // migration test in pouchdb's browser.migration.js verifies this
                        fullViewName = viewName
                      }

                      var viewDBNames = Object.keys(
                        metaDoc.views[fullViewName],
                      ) // design doc deleted, or view function nonexistent

                      var statusIsGood =
                        row.doc && row.doc.views && row.doc.views[viewName]
                      viewDBNames.forEach(function(viewDBName) {
                        viewsToStatus[viewDBName] =
                          viewsToStatus[viewDBName] || statusIsGood
                      })
                    })
                  })
                  var dbsToDelete = Object.keys(viewsToStatus).filter(
                    function(viewDBName) {
                      return !viewsToStatus[viewDBName]
                    },
                  )
                  var destroyPromises = dbsToDelete.map(function(
                    viewDBName,
                  ) {
                    return sequentialize(getQueue(viewDBName), function() {
                      return new db.constructor(
                        viewDBName,
                        db.__opts,
                      ).destroy()
                    })()
                  })
                  return Promise.all(destroyPromises).then(function() {
                    return {
                      ok: true,
                    }
                  })
                })
              },
              defaultsTo({
                ok: true,
              }),
            )
          }

          function queryPromised(db, fun, opts) {
            /* istanbul ignore next */
            if (typeof db._query === 'function') {
              return customQuery(db, fun, opts)
            }

            if (isRemote(db)) {
              return httpQuery(db, fun, opts)
            }

            if (typeof fun !== 'string') {
              // temp_view
              checkQueryParseError(opts, fun)
              tempViewQueue.add(function() {
                var createViewPromise = createView(
                  /* sourceDB */
                  db,
                  /* viewName */
                  'temp_view/temp_view',
                  /* mapFun */
                  fun.map,
                  /* reduceFun */
                  fun.reduce,
                  /* temporary */
                  true,
                  /* localDocName */
                  localDocName,
                )
                return createViewPromise.then(function(view) {
                  return fin(
                    updateView(view).then(function() {
                      return queryView(view, opts)
                    }),
                    function() {
                      return view.db.destroy()
                    },
                  )
                })
              })
              return tempViewQueue.finish()
            } else {
              // persistent view
              var fullViewName = fun
              var parts = parseViewName(fullViewName)
              var designDocName = parts[0]
              var viewName = parts[1]
              return db
                .get('_design/' + designDocName)
                .then(function(doc) {
                  var fun = doc.views && doc.views[viewName]

                  if (!fun) {
                    // basic validator; it's assumed that every subclass would want this
                    throw new NotFoundError(
                      'ddoc ' + doc._id + ' has no view named ' + viewName,
                    )
                  }

                  ddocValidator(doc, viewName)
                  checkQueryParseError(opts, fun)
                  var createViewPromise = createView(
                    /* sourceDB */
                    db,
                    /* viewName */
                    fullViewName,
                    /* mapFun */
                    fun.map,
                    /* reduceFun */
                    fun.reduce,
                    /* temporary */
                    false,
                    /* localDocName */
                    localDocName,
                  )
                  return createViewPromise.then(function(view) {
                    if (
                      opts.stale === 'ok' ||
                      opts.stale === 'update_after'
                    ) {
                      if (opts.stale === 'update_after') {
                        ;(0, _immediate.default)(function() {
                          updateView(view)
                        })
                      }

                      return queryView(view, opts)
                    } else {
                      // stale not ok
                      return updateView(view).then(function() {
                        return queryView(view, opts)
                      })
                    }
                  })
                })
            }
          }

          function abstractQuery(fun, opts, callback) {
            var db = this

            if (typeof opts === 'function') {
              callback = opts
              opts = {}
            }

            opts = opts ? coerceOptions(opts) : {}

            if (typeof fun === 'function') {
              fun = {
                map: fun,
              }
            }

            var promise = Promise.resolve().then(function() {
              return queryPromised(db, fun, opts)
            })
            promisedCallback(promise, callback)
            return promise
          }

          var abstractViewCleanup = callbackify(function() {
            var db = this
            /* istanbul ignore next */

            if (typeof db._viewCleanup === 'function') {
              return customViewCleanup(db)
            }

            if (isRemote(db)) {
              return httpViewCleanup(db)
            }

            return localViewCleanup(db)
          })
          return {
            query: abstractQuery,
            viewCleanup: abstractViewCleanup,
          }
        }

        var builtInReduce = {
          _sum: function(keys, values) {
            return sum(values)
          },
          _count: function(keys, values) {
            return values.length
          },
          _stats: function(keys, values) {
            // no need to implement rereduce=true, because Pouch
            // will never call it
            function sumsqr(values) {
              var _sumsqr = 0

              for (var i = 0, len = values.length; i < len; i++) {
                var num = values[i]
                _sumsqr += num * num
              }

              return _sumsqr
            }

            return {
              sum: sum(values),
              min: Math.min.apply(null, values),
              max: Math.max.apply(null, values),
              count: values.length,
              sumsqr: sumsqr(values),
            }
          },
        }

        function getBuiltIn(reduceFunString) {
          if (/^_sum/.test(reduceFunString)) {
            return builtInReduce._sum
          } else if (/^_count/.test(reduceFunString)) {
            return builtInReduce._count
          } else if (/^_stats/.test(reduceFunString)) {
            return builtInReduce._stats
          } else if (/^_/.test(reduceFunString)) {
            throw new Error(
              reduceFunString + ' is not a supported reduce function.',
            )
          }
        }

        function mapper(mapFun, emit) {
          // for temp_views one can use emit(doc, emit), see #38
          if (typeof mapFun === 'function' && mapFun.length === 2) {
            var origMap = mapFun
            return function(doc) {
              return origMap(doc, emit)
            }
          } else {
            return evalFunctionWithEval(mapFun.toString(), emit)
          }
        }

        function reducer(reduceFun) {
          var reduceFunString = reduceFun.toString()
          var builtIn = getBuiltIn(reduceFunString)

          if (builtIn) {
            return builtIn
          } else {
            return evalFunctionWithEval(reduceFunString)
          }
        }

        function ddocValidator(ddoc, viewName) {
          var fun = ddoc.views && ddoc.views[viewName]

          if (typeof fun.map !== 'string') {
            throw new NotFoundError(
              'ddoc ' +
                ddoc._id +
                ' has no string view named ' +
                viewName +
                ', instead found object of type: ' +
                typeof fun.map,
            )
          }
        }

        var localDocName = 'mrviews'
        var abstract = createAbstractMapReduce(
          localDocName,
          mapper,
          reducer,
          ddocValidator,
        )

        function query(fun, opts, callback) {
          return abstract.query.call(this, fun, opts, callback)
        }

        function viewCleanup(callback) {
          return abstract.viewCleanup.call(this, callback)
        }

        var mapreduce = {
          query: query,
          viewCleanup: viewCleanup,
        }

        function isGenOne$1(rev) {
          return /^1-/.test(rev)
        }

        function fileHasChanged(localDoc, remoteDoc, filename) {
          return (
            !localDoc._attachments ||
            !localDoc._attachments[filename] ||
            localDoc._attachments[filename].digest !==
              remoteDoc._attachments[filename].digest
          )
        }

        function getDocAttachments(db, doc) {
          var filenames = Object.keys(doc._attachments)
          return Promise.all(
            filenames.map(function(filename) {
              return db.getAttachment(doc._id, filename, {
                rev: doc._rev,
              })
            }),
          )
        }

        function getDocAttachmentsFromTargetOrSource(target, src, doc) {
          var doCheckForLocalAttachments =
            isRemote(src) && !isRemote(target)
          var filenames = Object.keys(doc._attachments)

          if (!doCheckForLocalAttachments) {
            return getDocAttachments(src, doc)
          }

          return target
            .get(doc._id)
            .then(function(localDoc) {
              return Promise.all(
                filenames.map(function(filename) {
                  if (fileHasChanged(localDoc, doc, filename)) {
                    return src.getAttachment(doc._id, filename)
                  }

                  return target.getAttachment(localDoc._id, filename)
                }),
              )
            })
            .catch(function(error) {
              /* istanbul ignore if */
              if (error.status !== 404) {
                throw error
              }

              return getDocAttachments(src, doc)
            })
        }

        function createBulkGetOpts(diffs) {
          var requests = []
          Object.keys(diffs).forEach(function(id) {
            var missingRevs = diffs[id].missing
            missingRevs.forEach(function(missingRev) {
              requests.push({
                id: id,
                rev: missingRev,
              })
            })
          })
          return {
            docs: requests,
            revs: true,
            latest: true,
          }
        } //
        // Fetch all the documents from the src as described in the "diffs",
        // which is a mapping of docs IDs to revisions. If the state ever
        // changes to "cancelled", then the returned promise will be rejected.
        // Else it will be resolved with a list of fetched documents.
        //

        function getDocs(src, target, diffs, state) {
          diffs = clone(diffs) // we do not need to modify this

          var resultDocs = [],
            ok = true

          function getAllDocs() {
            var bulkGetOpts = createBulkGetOpts(diffs)

            if (!bulkGetOpts.docs.length) {
              // optimization: skip empty requests
              return
            }

            return src
              .bulkGet(bulkGetOpts)
              .then(function(bulkGetResponse) {
                /* istanbul ignore if */
                if (state.cancelled) {
                  throw new Error('cancelled')
                }

                return Promise.all(
                  bulkGetResponse.results.map(function(bulkGetInfo) {
                    return Promise.all(
                      bulkGetInfo.docs.map(function(doc) {
                        var remoteDoc = doc.ok

                        if (doc.error) {
                          // when AUTO_COMPACTION is set, docs can be returned which look
                          // like this: {"missing":"1-7c3ac256b693c462af8442f992b83696"}
                          ok = false
                        }

                        if (!remoteDoc || !remoteDoc._attachments) {
                          return remoteDoc
                        }

                        return getDocAttachmentsFromTargetOrSource(
                          target,
                          src,
                          remoteDoc,
                        ).then(function(attachments) {
                          var filenames = Object.keys(
                            remoteDoc._attachments,
                          )
                          attachments.forEach(function(attachment, i) {
                            var att = remoteDoc._attachments[filenames[i]]
                            delete att.stub
                            delete att.length
                            att.data = attachment
                          })
                          return remoteDoc
                        })
                      }),
                    )
                  }),
                ).then(function(results) {
                  resultDocs = resultDocs.concat(
                    flatten(results).filter(Boolean),
                  )
                })
              })
          }

          function hasAttachments(doc) {
            return (
              doc._attachments && Object.keys(doc._attachments).length > 0
            )
          }

          function hasConflicts(doc) {
            return doc._conflicts && doc._conflicts.length > 0
          }

          function fetchRevisionOneDocs(ids) {
            // Optimization: fetch gen-1 docs and attachments in
            // a single request using _all_docs
            return src
              .allDocs({
                keys: ids,
                include_docs: true,
                conflicts: true,
              })
              .then(function(res) {
                if (state.cancelled) {
                  throw new Error('cancelled')
                }

                res.rows.forEach(function(row) {
                  if (
                    row.deleted ||
                    !row.doc ||
                    !isGenOne$1(row.value.rev) ||
                    hasAttachments(row.doc) ||
                    hasConflicts(row.doc)
                  ) {
                    // if any of these conditions apply, we need to fetch using get()
                    return
                  } // strip _conflicts array to appease CSG (#5793)

                  /* istanbul ignore if */

                  if (row.doc._conflicts) {
                    delete row.doc._conflicts
                  } // the doc we got back from allDocs() is sufficient

                  resultDocs.push(row.doc)
                  delete diffs[row.id]
                })
              })
          }

          function getRevisionOneDocs() {
            // filter out the generation 1 docs and get them
            // leaving the non-generation one docs to be got otherwise
            var ids = Object.keys(diffs).filter(function(id) {
              var missing = diffs[id].missing
              return missing.length === 1 && isGenOne$1(missing[0])
            })

            if (ids.length > 0) {
              return fetchRevisionOneDocs(ids)
            }
          }

          function returnResult() {
            return {
              ok: ok,
              docs: resultDocs,
            }
          }

          return Promise.resolve()
            .then(getRevisionOneDocs)
            .then(getAllDocs)
            .then(returnResult)
        }

        var CHECKPOINT_VERSION = 1
        var REPLICATOR = 'pouchdb' // This is an arbitrary number to limit the
        // amount of replication history we save in the checkpoint.
        // If we save too much, the checkpoing docs will become very big,
        // if we save fewer, we'll run a greater risk of having to
        // read all the changes from 0 when checkpoint PUTs fail
        // CouchDB 2.0 has a more involved history pruning,
        // but let's go for the simple version for now.

        var CHECKPOINT_HISTORY_SIZE = 5
        var LOWEST_SEQ = 0

        function updateCheckpoint(
          db,
          id,
          checkpoint,
          session,
          returnValue,
        ) {
          return db
            .get(id)
            .catch(function(err) {
              if (err.status === 404) {
                if (db.adapter === 'http' || db.adapter === 'https') {
                  explainError(
                    404,
                    'PouchDB is just checking if a remote checkpoint exists.',
                  )
                }

                return {
                  session_id: session,
                  _id: id,
                  history: [],
                  replicator: REPLICATOR,
                  version: CHECKPOINT_VERSION,
                }
              }

              throw err
            })
            .then(function(doc) {
              if (returnValue.cancelled) {
                return
              } // if the checkpoint has not changed, do not update

              if (doc.last_seq === checkpoint) {
                return
              } // Filter out current entry for this replication

              doc.history = (doc.history || []).filter(function(item) {
                return item.session_id !== session
              }) // Add the latest checkpoint to history

              doc.history.unshift({
                last_seq: checkpoint,
                session_id: session,
              }) // Just take the last pieces in history, to
              // avoid really big checkpoint docs.
              // see comment on history size above

              doc.history = doc.history.slice(0, CHECKPOINT_HISTORY_SIZE)
              doc.version = CHECKPOINT_VERSION
              doc.replicator = REPLICATOR
              doc.session_id = session
              doc.last_seq = checkpoint
              return db.put(doc).catch(function(err) {
                if (err.status === 409) {
                  // retry; someone is trying to write a checkpoint simultaneously
                  return updateCheckpoint(
                    db,
                    id,
                    checkpoint,
                    session,
                    returnValue,
                  )
                }

                throw err
              })
            })
        }

        function Checkpointer(src, target, id, returnValue, opts) {
          this.src = src
          this.target = target
          this.id = id
          this.returnValue = returnValue
          this.opts = opts || {}
        }

        Checkpointer.prototype.writeCheckpoint = function(
          checkpoint,
          session,
        ) {
          var self = this
          return this.updateTarget(checkpoint, session).then(function() {
            return self.updateSource(checkpoint, session)
          })
        }

        Checkpointer.prototype.updateTarget = function(
          checkpoint,
          session,
        ) {
          if (this.opts.writeTargetCheckpoint) {
            return updateCheckpoint(
              this.target,
              this.id,
              checkpoint,
              session,
              this.returnValue,
            )
          } else {
            return Promise.resolve(true)
          }
        }

        Checkpointer.prototype.updateSource = function(
          checkpoint,
          session,
        ) {
          if (this.opts.writeSourceCheckpoint) {
            var self = this
            return updateCheckpoint(
              this.src,
              this.id,
              checkpoint,
              session,
              this.returnValue,
            ).catch(function(err) {
              if (isForbiddenError(err)) {
                self.opts.writeSourceCheckpoint = false
                return true
              }

              throw err
            })
          } else {
            return Promise.resolve(true)
          }
        }

        var comparisons = {
          undefined: function(targetDoc, sourceDoc) {
            // This is the previous comparison function
            if (collate(targetDoc.last_seq, sourceDoc.last_seq) === 0) {
              return sourceDoc.last_seq
            }
            /* istanbul ignore next */

            return 0
          },
          '1': function(targetDoc, sourceDoc) {
            // This is the comparison function ported from CouchDB
            return compareReplicationLogs(sourceDoc, targetDoc).last_seq
          },
        }

        Checkpointer.prototype.getCheckpoint = function() {
          var self = this

          if (
            self.opts &&
            self.opts.writeSourceCheckpoint &&
            !self.opts.writeTargetCheckpoint
          ) {
            return self.src
              .get(self.id)
              .then(function(sourceDoc) {
                return sourceDoc.last_seq || LOWEST_SEQ
              })
              .catch(function(err) {
                /* istanbul ignore if */
                if (err.status !== 404) {
                  throw err
                }

                return LOWEST_SEQ
              })
          }

          return self.target
            .get(self.id)
            .then(function(targetDoc) {
              if (
                self.opts &&
                self.opts.writeTargetCheckpoint &&
                !self.opts.writeSourceCheckpoint
              ) {
                return targetDoc.last_seq || LOWEST_SEQ
              }

              return self.src.get(self.id).then(
                function(sourceDoc) {
                  // Since we can't migrate an old version doc to a new one
                  // (no session id), we just go with the lowest seq in this case

                  /* istanbul ignore if */
                  if (targetDoc.version !== sourceDoc.version) {
                    return LOWEST_SEQ
                  }

                  var version

                  if (targetDoc.version) {
                    version = targetDoc.version.toString()
                  } else {
                    version = 'undefined'
                  }

                  if (version in comparisons) {
                    return comparisons[version](targetDoc, sourceDoc)
                  }
                  /* istanbul ignore next */

                  return LOWEST_SEQ
                },
                function(err) {
                  if (err.status === 404 && targetDoc.last_seq) {
                    return self.src
                      .put({
                        _id: self.id,
                        last_seq: LOWEST_SEQ,
                      })
                      .then(
                        function() {
                          return LOWEST_SEQ
                        },
                        function(err) {
                          if (isForbiddenError(err)) {
                            self.opts.writeSourceCheckpoint = false
                            return targetDoc.last_seq
                          }
                          /* istanbul ignore next */

                          return LOWEST_SEQ
                        },
                      )
                  }

                  throw err
                },
              )
            })
            .catch(function(err) {
              if (err.status !== 404) {
                throw err
              }

              return LOWEST_SEQ
            })
        } // This checkpoint comparison is ported from CouchDBs source
        // they come from here:
        // https://github.com/apache/couchdb-couch-replicator/blob/master/src/couch_replicator.erl#L863-L906

        function compareReplicationLogs(srcDoc, tgtDoc) {
          if (srcDoc.session_id === tgtDoc.session_id) {
            return {
              last_seq: srcDoc.last_seq,
              history: srcDoc.history,
            }
          }

          return compareReplicationHistory(srcDoc.history, tgtDoc.history)
        }

        function compareReplicationHistory(sourceHistory, targetHistory) {
          // the erlang loop via function arguments is not so easy to repeat in JS
          // therefore, doing this as recursion
          var S = sourceHistory[0]
          var sourceRest = sourceHistory.slice(1)
          var T = targetHistory[0]
          var targetRest = targetHistory.slice(1)

          if (!S || targetHistory.length === 0) {
            return {
              last_seq: LOWEST_SEQ,
              history: [],
            }
          }

          var sourceId = S.session_id
          /* istanbul ignore if */

          if (hasSessionId(sourceId, targetHistory)) {
            return {
              last_seq: S.last_seq,
              history: sourceHistory,
            }
          }

          var targetId = T.session_id

          if (hasSessionId(targetId, sourceRest)) {
            return {
              last_seq: T.last_seq,
              history: targetRest,
            }
          }

          return compareReplicationHistory(sourceRest, targetRest)
        }

        function hasSessionId(sessionId, history) {
          var props = history[0]
          var rest = history.slice(1)

          if (!sessionId || history.length === 0) {
            return false
          }

          if (sessionId === props.session_id) {
            return true
          }

          return hasSessionId(sessionId, rest)
        }

        function isForbiddenError(err) {
          return (
            typeof err.status === 'number' &&
            Math.floor(err.status / 100) === 4
          )
        }

        var STARTING_BACK_OFF = 0

        function backOff(opts, returnValue, error, callback) {
          if (opts.retry === false) {
            returnValue.emit('error', error)
            returnValue.removeAllListeners()
            return
          }
          /* istanbul ignore if */

          if (typeof opts.back_off_function !== 'function') {
            opts.back_off_function = defaultBackOff
          }

          returnValue.emit('requestError', error)

          if (
            returnValue.state === 'active' ||
            returnValue.state === 'pending'
          ) {
            returnValue.emit('paused', error)
            returnValue.state = 'stopped'

            var backOffSet = function backoffTimeSet() {
              opts.current_back_off = STARTING_BACK_OFF
            }

            var removeBackOffSetter = function removeBackOffTimeSet() {
              returnValue.removeListener('active', backOffSet)
            }

            returnValue.once('paused', removeBackOffSetter)
            returnValue.once('active', backOffSet)
          }

          opts.current_back_off =
            opts.current_back_off || STARTING_BACK_OFF
          opts.current_back_off = opts.back_off_function(
            opts.current_back_off,
          )
          setTimeout(callback, opts.current_back_off)
        }

        function sortObjectPropertiesByKey(queryParams) {
          return Object.keys(queryParams)
            .sort(collate)
            .reduce(function(result, key) {
              result[key] = queryParams[key]
              return result
            }, {})
        } // Generate a unique id particular to this replication.
        // Not guaranteed to align perfectly with CouchDB's rep ids.

        function generateReplicationId(src, target, opts) {
          var docIds = opts.doc_ids ? opts.doc_ids.sort(collate) : ''
          var filterFun = opts.filter ? opts.filter.toString() : ''
          var queryParams = ''
          var filterViewName = ''
          var selector = '' // possibility for checkpoints to be lost here as behaviour of
          // JSON.stringify is not stable (see #6226)

          /* istanbul ignore if */

          if (opts.selector) {
            selector = JSON.stringify(opts.selector)
          }

          if (opts.filter && opts.query_params) {
            queryParams = JSON.stringify(
              sortObjectPropertiesByKey(opts.query_params),
            )
          }

          if (opts.filter && opts.filter === '_view') {
            filterViewName = opts.view.toString()
          }

          return Promise.all([src.id(), target.id()])
            .then(function(res) {
              var queryData =
                res[0] +
                res[1] +
                filterFun +
                filterViewName +
                queryParams +
                docIds +
                selector
              return new Promise(function(resolve) {
                binaryMd5(queryData, resolve)
              })
            })
            .then(function(md5sum) {
              // can't use straight-up md5 alphabet, because
              // the char '/' is interpreted as being for attachments,
              // and + is also not url-safe
              md5sum = md5sum.replace(/\//g, '.').replace(/\+/g, '_')
              return '_local/' + md5sum
            })
        }

        function replicate(src, target, opts, returnValue, result) {
          var batches = [] // list of batches to be processed

          var currentBatch // the batch currently being processed

          var pendingBatch = {
            seq: 0,
            changes: [],
            docs: [],
          } // next batch, not yet ready to be processed

          var writingCheckpoint = false // true while checkpoint is being written

          var changesCompleted = false // true when all changes received

          var replicationCompleted = false // true when replication has completed

          var last_seq = 0
          var continuous = opts.continuous || opts.live || false
          var batch_size = opts.batch_size || 100
          var batches_limit = opts.batches_limit || 10
          var changesPending = false // true while src.changes is running

          var doc_ids = opts.doc_ids
          var selector = opts.selector
          var repId
          var checkpointer
          var changedDocs = [] // Like couchdb, every replication gets a unique session id

          var session = uuid()
          result = result || {
            ok: true,
            start_time: new Date().toISOString(),
            docs_read: 0,
            docs_written: 0,
            doc_write_failures: 0,
            errors: [],
          }
          var changesOpts = {}
          returnValue.ready(src, target)

          function initCheckpointer() {
            if (checkpointer) {
              return Promise.resolve()
            }

            return generateReplicationId(src, target, opts).then(function(
              res,
            ) {
              repId = res
              var checkpointOpts = {}

              if (opts.checkpoint === false) {
                checkpointOpts = {
                  writeSourceCheckpoint: false,
                  writeTargetCheckpoint: false,
                }
              } else if (opts.checkpoint === 'source') {
                checkpointOpts = {
                  writeSourceCheckpoint: true,
                  writeTargetCheckpoint: false,
                }
              } else if (opts.checkpoint === 'target') {
                checkpointOpts = {
                  writeSourceCheckpoint: false,
                  writeTargetCheckpoint: true,
                }
              } else {
                checkpointOpts = {
                  writeSourceCheckpoint: true,
                  writeTargetCheckpoint: true,
                }
              }

              checkpointer = new Checkpointer(
                src,
                target,
                repId,
                returnValue,
                checkpointOpts,
              )
            })
          }

          function writeDocs() {
            changedDocs = []

            if (currentBatch.docs.length === 0) {
              return
            }

            var docs = currentBatch.docs
            var bulkOpts = {
              timeout: opts.timeout,
            }
            return target
              .bulkDocs(
                {
                  docs: docs,
                  new_edits: false,
                },
                bulkOpts,
              )
              .then(
                function(res) {
                  /* istanbul ignore if */
                  if (returnValue.cancelled) {
                    completeReplication()
                    throw new Error('cancelled')
                  } // `res` doesn't include full documents (which live in `docs`), so we create a map of
                  // (id -> error), and check for errors while iterating over `docs`

                  var errorsById = Object.create(null)
                  res.forEach(function(res) {
                    if (res.error) {
                      errorsById[res.id] = res
                    }
                  })
                  var errorsNo = Object.keys(errorsById).length
                  result.doc_write_failures += errorsNo
                  result.docs_written += docs.length - errorsNo
                  docs.forEach(function(doc) {
                    var error = errorsById[doc._id]

                    if (error) {
                      result.errors.push(error) // Normalize error name. i.e. 'Unauthorized' -> 'unauthorized' (eg Sync Gateway)

                      var errorName = (error.name || '').toLowerCase()

                      if (
                        errorName === 'unauthorized' ||
                        errorName === 'forbidden'
                      ) {
                        returnValue.emit('denied', clone(error))
                      } else {
                        throw error
                      }
                    } else {
                      changedDocs.push(doc)
                    }
                  })
                },
                function(err) {
                  result.doc_write_failures += docs.length
                  throw err
                },
              )
          }

          function finishBatch() {
            if (currentBatch.error) {
              throw new Error('There was a problem getting docs.')
            }

            result.last_seq = last_seq = currentBatch.seq
            var outResult = clone(result)

            if (changedDocs.length) {
              outResult.docs = changedDocs // Attach 'pending' property if server supports it (CouchDB 2.0+)

              /* istanbul ignore if */

              if (typeof currentBatch.pending === 'number') {
                outResult.pending = currentBatch.pending
                delete currentBatch.pending
              }

              returnValue.emit('change', outResult)
            }

            writingCheckpoint = true
            return checkpointer
              .writeCheckpoint(currentBatch.seq, session)
              .then(function() {
                writingCheckpoint = false
                /* istanbul ignore if */

                if (returnValue.cancelled) {
                  completeReplication()
                  throw new Error('cancelled')
                }

                currentBatch = undefined
                getChanges()
              })
              .catch(function(err) {
                onCheckpointError(err)
                throw err
              })
          }

          function getDiffs() {
            var diff = {}
            currentBatch.changes.forEach(function(change) {
              // Couchbase Sync Gateway emits these, but we can ignore them

              /* istanbul ignore if */
              if (change.id === '_user/') {
                return
              }

              diff[change.id] = change.changes.map(function(x) {
                return x.rev
              })
            })
            return target.revsDiff(diff).then(function(diffs) {
              /* istanbul ignore if */
              if (returnValue.cancelled) {
                completeReplication()
                throw new Error('cancelled')
              } // currentBatch.diffs elements are deleted as the documents are written

              currentBatch.diffs = diffs
            })
          }

          function getBatchDocs() {
            return getDocs(
              src,
              target,
              currentBatch.diffs,
              returnValue,
            ).then(function(got) {
              currentBatch.error = !got.ok
              got.docs.forEach(function(doc) {
                delete currentBatch.diffs[doc._id]
                result.docs_read++
                currentBatch.docs.push(doc)
              })
            })
          }

          function startNextBatch() {
            if (returnValue.cancelled || currentBatch) {
              return
            }

            if (batches.length === 0) {
              processPendingBatch(true)
              return
            }

            currentBatch = batches.shift()
            getDiffs()
              .then(getBatchDocs)
              .then(writeDocs)
              .then(finishBatch)
              .then(startNextBatch)
              .catch(function(err) {
                abortReplication(
                  'batch processing terminated with error',
                  err,
                )
              })
          }

          function processPendingBatch(immediate) {
            if (pendingBatch.changes.length === 0) {
              if (batches.length === 0 && !currentBatch) {
                if ((continuous && changesOpts.live) || changesCompleted) {
                  returnValue.state = 'pending'
                  returnValue.emit('paused')
                }

                if (changesCompleted) {
                  completeReplication()
                }
              }

              return
            }

            if (
              immediate ||
              changesCompleted ||
              pendingBatch.changes.length >= batch_size
            ) {
              batches.push(pendingBatch)
              pendingBatch = {
                seq: 0,
                changes: [],
                docs: [],
              }

              if (
                returnValue.state === 'pending' ||
                returnValue.state === 'stopped'
              ) {
                returnValue.state = 'active'
                returnValue.emit('active')
              }

              startNextBatch()
            }
          }

          function abortReplication(reason, err) {
            if (replicationCompleted) {
              return
            }

            if (!err.message) {
              err.message = reason
            }

            result.ok = false
            result.status = 'aborting'
            batches = []
            pendingBatch = {
              seq: 0,
              changes: [],
              docs: [],
            }
            completeReplication(err)
          }

          function completeReplication(fatalError) {
            if (replicationCompleted) {
              return
            }
            /* istanbul ignore if */

            if (returnValue.cancelled) {
              result.status = 'cancelled'

              if (writingCheckpoint) {
                return
              }
            }

            result.status = result.status || 'complete'
            result.end_time = new Date().toISOString()
            result.last_seq = last_seq
            replicationCompleted = true

            if (fatalError) {
              // need to extend the error because Firefox considers ".result" read-only
              fatalError = createError(fatalError)
              fatalError.result = result // Normalize error name. i.e. 'Unauthorized' -> 'unauthorized' (eg Sync Gateway)

              var errorName = (fatalError.name || '').toLowerCase()

              if (
                errorName === 'unauthorized' ||
                errorName === 'forbidden'
              ) {
                returnValue.emit('error', fatalError)
                returnValue.removeAllListeners()
              } else {
                backOff(opts, returnValue, fatalError, function() {
                  replicate(src, target, opts, returnValue)
                })
              }
            } else {
              returnValue.emit('complete', result)
              returnValue.removeAllListeners()
            }
          }

          function onChange(change, pending, lastSeq) {
            /* istanbul ignore if */
            if (returnValue.cancelled) {
              return completeReplication()
            } // Attach 'pending' property if server supports it (CouchDB 2.0+)

            /* istanbul ignore if */

            if (typeof pending === 'number') {
              pendingBatch.pending = pending
            }

            var filter = filterChange(opts)(change)

            if (!filter) {
              return
            }

            pendingBatch.seq = change.seq || lastSeq
            pendingBatch.changes.push(change)
            ;(0, _immediate.default)(function() {
              processPendingBatch(batches.length === 0 && changesOpts.live)
            })
          }

          function onChangesComplete(changes) {
            changesPending = false
            /* istanbul ignore if */

            if (returnValue.cancelled) {
              return completeReplication()
            } // if no results were returned then we're done,
            // else fetch more

            if (changes.results.length > 0) {
              changesOpts.since =
                changes.results[changes.results.length - 1].seq
              getChanges()
              processPendingBatch(true)
            } else {
              var complete = function() {
                if (continuous) {
                  changesOpts.live = true
                  getChanges()
                } else {
                  changesCompleted = true
                }

                processPendingBatch(true)
              } // update the checkpoint so we start from the right seq next time

              if (!currentBatch && changes.results.length === 0) {
                writingCheckpoint = true
                checkpointer
                  .writeCheckpoint(changes.last_seq, session)
                  .then(function() {
                    writingCheckpoint = false
                    result.last_seq = last_seq = changes.last_seq
                    complete()
                  })
                  .catch(onCheckpointError)
              } else {
                complete()
              }
            }
          }

          function onChangesError(err) {
            changesPending = false
            /* istanbul ignore if */

            if (returnValue.cancelled) {
              return completeReplication()
            }

            abortReplication('changes rejected', err)
          }

          function getChanges() {
            if (
              !(
                !changesPending &&
                !changesCompleted &&
                batches.length < batches_limit
              )
            ) {
              return
            }

            changesPending = true

            function abortChanges() {
              changes.cancel()
            }

            function removeListener() {
              returnValue.removeListener('cancel', abortChanges)
            }

            if (returnValue._changes) {
              // remove old changes() and listeners
              returnValue.removeListener(
                'cancel',
                returnValue._abortChanges,
              )

              returnValue._changes.cancel()
            }

            returnValue.once('cancel', abortChanges)
            var changes = src.changes(changesOpts).on('change', onChange)
            changes.then(removeListener, removeListener)
            changes.then(onChangesComplete).catch(onChangesError)

            if (opts.retry) {
              // save for later so we can cancel if necessary
              returnValue._changes = changes
              returnValue._abortChanges = abortChanges
            }
          }

          function startChanges() {
            initCheckpointer()
              .then(function() {
                /* istanbul ignore if */
                if (returnValue.cancelled) {
                  completeReplication()
                  return
                }

                return checkpointer
                  .getCheckpoint()
                  .then(function(checkpoint) {
                    last_seq = checkpoint
                    changesOpts = {
                      since: last_seq,
                      limit: batch_size,
                      batch_size: batch_size,
                      style: 'all_docs',
                      doc_ids: doc_ids,
                      selector: selector,
                      return_docs: true, // required so we know when we're done
                    }

                    if (opts.filter) {
                      if (typeof opts.filter !== 'string') {
                        // required for the client-side filter in onChange
                        changesOpts.include_docs = true
                      } else {
                        // ddoc filter
                        changesOpts.filter = opts.filter
                      }
                    }

                    if ('heartbeat' in opts) {
                      changesOpts.heartbeat = opts.heartbeat
                    }

                    if ('timeout' in opts) {
                      changesOpts.timeout = opts.timeout
                    }

                    if (opts.query_params) {
                      changesOpts.query_params = opts.query_params
                    }

                    if (opts.view) {
                      changesOpts.view = opts.view
                    }

                    getChanges()
                  })
              })
              .catch(function(err) {
                abortReplication('getCheckpoint rejected with ', err)
              })
          }
          /* istanbul ignore next */

          function onCheckpointError(err) {
            writingCheckpoint = false
            abortReplication('writeCheckpoint completed with error', err)
          }
          /* istanbul ignore if */

          if (returnValue.cancelled) {
            // cancelled immediately
            completeReplication()
            return
          }

          if (!returnValue._addedListeners) {
            returnValue.once('cancel', completeReplication)

            if (typeof opts.complete === 'function') {
              returnValue.once('error', opts.complete)
              returnValue.once('complete', function(result) {
                opts.complete(null, result)
              })
            }

            returnValue._addedListeners = true
          }

          if (typeof opts.since === 'undefined') {
            startChanges()
          } else {
            initCheckpointer()
              .then(function() {
                writingCheckpoint = true
                return checkpointer.writeCheckpoint(opts.since, session)
              })
              .then(function() {
                writingCheckpoint = false
                /* istanbul ignore if */

                if (returnValue.cancelled) {
                  completeReplication()
                  return
                }

                last_seq = opts.since
                startChanges()
              })
              .catch(onCheckpointError)
          }
        } // We create a basic promise so the caller can cancel the replication possibly
        // before we have actually started listening to changes etc

        ;(0, _inherits.default)(Replication, _events.EventEmitter)

        function Replication() {
          _events.EventEmitter.call(this)

          this.cancelled = false
          this.state = 'pending'
          var self = this
          var promise = new Promise(function(fulfill, reject) {
            self.once('complete', fulfill)
            self.once('error', reject)
          })

          self.then = function(resolve, reject) {
            return promise.then(resolve, reject)
          }

          self.catch = function(reject) {
            return promise.catch(reject)
          } // As we allow error handling via "error" event as well,
          // put a stub in here so that rejecting never throws UnhandledError.

          self.catch(function() {})
        }

        Replication.prototype.cancel = function() {
          this.cancelled = true
          this.state = 'cancelled'
          this.emit('cancel')
        }

        Replication.prototype.ready = function(src, target) {
          var self = this

          if (self._readyCalled) {
            return
          }

          self._readyCalled = true

          function onDestroy() {
            self.cancel()
          }

          src.once('destroyed', onDestroy)
          target.once('destroyed', onDestroy)

          function cleanup() {
            src.removeListener('destroyed', onDestroy)
            target.removeListener('destroyed', onDestroy)
          }

          self.once('complete', cleanup)
        }

        function toPouch(db, opts) {
          var PouchConstructor = opts.PouchConstructor

          if (typeof db === 'string') {
            return new PouchConstructor(db, opts)
          } else {
            return db
          }
        }

        function replicateWrapper(src, target, opts, callback) {
          if (typeof opts === 'function') {
            callback = opts
            opts = {}
          }

          if (typeof opts === 'undefined') {
            opts = {}
          }

          if (opts.doc_ids && !Array.isArray(opts.doc_ids)) {
            throw createError(
              BAD_REQUEST,
              '`doc_ids` filter parameter is not a list.',
            )
          }

          opts.complete = callback
          opts = clone(opts)
          opts.continuous = opts.continuous || opts.live
          opts.retry = 'retry' in opts ? opts.retry : false
          /*jshint validthis:true */

          opts.PouchConstructor = opts.PouchConstructor || this
          var replicateRet = new Replication(opts)
          var srcPouch = toPouch(src, opts)
          var targetPouch = toPouch(target, opts)
          replicate(srcPouch, targetPouch, opts, replicateRet)
          return replicateRet
        }

        ;(0, _inherits.default)(Sync, _events.EventEmitter)

        function sync(src, target, opts, callback) {
          if (typeof opts === 'function') {
            callback = opts
            opts = {}
          }

          if (typeof opts === 'undefined') {
            opts = {}
          }

          opts = clone(opts)
          /*jshint validthis:true */

          opts.PouchConstructor = opts.PouchConstructor || this
          src = toPouch(src, opts)
          target = toPouch(target, opts)
          return new Sync(src, target, opts, callback)
        }

        function Sync(src, target, opts, callback) {
          var self = this
          this.canceled = false
          var optsPush = opts.push
            ? $inject_Object_assign({}, opts, opts.push)
            : opts
          var optsPull = opts.pull
            ? $inject_Object_assign({}, opts, opts.pull)
            : opts
          this.push = replicateWrapper(src, target, optsPush)
          this.pull = replicateWrapper(target, src, optsPull)
          this.pushPaused = true
          this.pullPaused = true

          function pullChange(change) {
            self.emit('change', {
              direction: 'pull',
              change: change,
            })
          }

          function pushChange(change) {
            self.emit('change', {
              direction: 'push',
              change: change,
            })
          }

          function pushDenied(doc) {
            self.emit('denied', {
              direction: 'push',
              doc: doc,
            })
          }

          function pullDenied(doc) {
            self.emit('denied', {
              direction: 'pull',
              doc: doc,
            })
          }

          function pushPaused() {
            self.pushPaused = true
            /* istanbul ignore if */

            if (self.pullPaused) {
              self.emit('paused')
            }
          }

          function pullPaused() {
            self.pullPaused = true
            /* istanbul ignore if */

            if (self.pushPaused) {
              self.emit('paused')
            }
          }

          function pushActive() {
            self.pushPaused = false
            /* istanbul ignore if */

            if (self.pullPaused) {
              self.emit('active', {
                direction: 'push',
              })
            }
          }

          function pullActive() {
            self.pullPaused = false
            /* istanbul ignore if */

            if (self.pushPaused) {
              self.emit('active', {
                direction: 'pull',
              })
            }
          }

          var removed = {}

          function removeAll(type) {
            // type is 'push' or 'pull'
            return function(event, func) {
              var isChange =
                event === 'change' &&
                (func === pullChange || func === pushChange)
              var isDenied =
                event === 'denied' &&
                (func === pullDenied || func === pushDenied)
              var isPaused =
                event === 'paused' &&
                (func === pullPaused || func === pushPaused)
              var isActive =
                event === 'active' &&
                (func === pullActive || func === pushActive)

              if (isChange || isDenied || isPaused || isActive) {
                if (!(event in removed)) {
                  removed[event] = {}
                }

                removed[event][type] = true

                if (Object.keys(removed[event]).length === 2) {
                  // both push and pull have asked to be removed
                  self.removeAllListeners(event)
                }
              }
            }
          }

          if (opts.live) {
            this.push.on('complete', self.pull.cancel.bind(self.pull))
            this.pull.on('complete', self.push.cancel.bind(self.push))
          }

          function addOneListener(ee, event, listener) {
            if (ee.listeners(event).indexOf(listener) == -1) {
              ee.on(event, listener)
            }
          }

          this.on('newListener', function(event) {
            if (event === 'change') {
              addOneListener(self.pull, 'change', pullChange)
              addOneListener(self.push, 'change', pushChange)
            } else if (event === 'denied') {
              addOneListener(self.pull, 'denied', pullDenied)
              addOneListener(self.push, 'denied', pushDenied)
            } else if (event === 'active') {
              addOneListener(self.pull, 'active', pullActive)
              addOneListener(self.push, 'active', pushActive)
            } else if (event === 'paused') {
              addOneListener(self.pull, 'paused', pullPaused)
              addOneListener(self.push, 'paused', pushPaused)
            }
          })
          this.on('removeListener', function(event) {
            if (event === 'change') {
              self.pull.removeListener('change', pullChange)
              self.push.removeListener('change', pushChange)
            } else if (event === 'denied') {
              self.pull.removeListener('denied', pullDenied)
              self.push.removeListener('denied', pushDenied)
            } else if (event === 'active') {
              self.pull.removeListener('active', pullActive)
              self.push.removeListener('active', pushActive)
            } else if (event === 'paused') {
              self.pull.removeListener('paused', pullPaused)
              self.push.removeListener('paused', pushPaused)
            }
          })
          this.pull.on('removeListener', removeAll('pull'))
          this.push.on('removeListener', removeAll('push'))
          var promise = Promise.all([this.push, this.pull]).then(
            function(resp) {
              var out = {
                push: resp[0],
                pull: resp[1],
              }
              self.emit('complete', out)

              if (callback) {
                callback(null, out)
              }

              self.removeAllListeners()
              return out
            },
            function(err) {
              self.cancel()

              if (callback) {
                // if there's a callback, then the callback can receive
                // the error event
                callback(err)
              } else {
                // if there's no callback, then we're safe to emit an error
                // event, which would otherwise throw an unhandled error
                // due to 'error' being a special event in EventEmitters
                self.emit('error', err)
              }

              self.removeAllListeners()

              if (callback) {
                // no sense throwing if we're already emitting an 'error' event
                throw err
              }
            },
          )

          this.then = function(success, err) {
            return promise.then(success, err)
          }

          this.catch = function(err) {
            return promise.catch(err)
          }
        }

        Sync.prototype.cancel = function() {
          if (!this.canceled) {
            this.canceled = true
            this.push.cancel()
            this.pull.cancel()
          }
        }

        function replication(PouchDB) {
          PouchDB.replicate = replicateWrapper
          PouchDB.sync = sync
          Object.defineProperty(PouchDB.prototype, 'replicate', {
            get: function() {
              var self = this

              if (typeof this.replicateMethods === 'undefined') {
                this.replicateMethods = {
                  from: function(other, opts, callback) {
                    return self.constructor.replicate(
                      other,
                      self,
                      opts,
                      callback,
                    )
                  },
                  to: function(other, opts, callback) {
                    return self.constructor.replicate(
                      self,
                      other,
                      opts,
                      callback,
                    )
                  },
                }
              }

              return this.replicateMethods
            },
          })

          PouchDB.prototype.sync = function(dbName, opts, callback) {
            return this.constructor.sync(this, dbName, opts, callback)
          }
        }

        PouchDB.plugin(IDBPouch)
          .plugin(HttpPouch$1)
          .plugin(mapreduce)
          .plugin(replication)
        var _default = PouchDB
        exports.default = _default
      },
      {
        argsarray: '../node_modules/argsarray/index.js',
        immediate: '../node_modules/immediate/lib/browser.js',
        events:
          '../../../.config/yarn/global/node_modules/events/events.js',
        inherits: '../node_modules/inherits/inherits_browser.js',
        'spark-md5': '../node_modules/spark-md5/spark-md5.js',
        uuid: '../node_modules/uuid/index.js',
        vuvuzela: '../node_modules/vuvuzela/index.js',
        process:
          '../../../.config/yarn/global/node_modules/process/browser.js',
      },
    ],
    '../node_modules/nanoid/index.browser.js': [
      function(require, module, exports) {
        if ('development' !== 'production') {
          if (
            typeof self === 'undefined' ||
            (!self.crypto && !self.msCrypto)
          ) {
            throw new Error(
              'Your browser does not have secure random generator. ' +
                'If you don’t need unpredictable IDs, you can use nanoid/non-secure.',
            )
          }
        }

        var crypto = self.crypto || self.msCrypto
        /*
         * This alphabet uses a-z A-Z 0-9 _- symbols.
         * Symbols order was changed for better gzip compression.
         */

        var url =
          'Uint8ArdomValuesObj012345679BCDEFGHIJKLMNPQRSTWXYZ_cfghkpqvwxyz-'

        module.exports = function(size) {
          size = size || 21
          var id = ''
          var bytes = crypto.getRandomValues(new Uint8Array(size))

          while (0 < size--) {
            id += url[bytes[size] & 63]
          }

          return id
        }
      },
      {},
    ],
    '../node_modules/faker/lib/fake.js': [
      function(require, module, exports) {
        /*
  fake.js - generator method for combining faker methods based on string input

*/

        function Fake(faker) {
          /**
           * Generator method for combining faker methods based on string input
           *
           * __Example:__
           *
           * ```
           * console.log(faker.fake('{{name.lastName}}, {{name.firstName}} {{name.suffix}}'));
           * //outputs: "Marks, Dean Sr."
           * ```
           *
           * This will interpolate the format string with the value of methods
           * [name.lastName]{@link faker.name.lastName}, [name.firstName]{@link faker.name.firstName},
           * and [name.suffix]{@link faker.name.suffix}
           *
           * @method faker.fake
           * @param {string} str
           */
          this.fake = function fake(str) {
            // setup default response as empty string
            var res = ''

            // if incoming str parameter is not provided, return error message
            if (typeof str !== 'string' || str.length === 0) {
              res = 'string parameter is required!'
              return res
            }

            // find first matching {{ and }}
            var start = str.search('{{')
            var end = str.search('}}')

            // if no {{ and }} is found, we are done
            if (start === -1 && end === -1) {
              return str
            }

            // console.log('attempting to parse', str);

            // extract method name from between the {{ }} that we found
            // for example: {{name.firstName}}
            var token = str.substr(start + 2, end - start - 2)
            var method = token.replace('}}', '').replace('{{', '')

            // console.log('method', method)

            // extract method parameters
            var regExp = /\(([^)]+)\)/
            var matches = regExp.exec(method)
            var parameters = ''
            if (matches) {
              method = method.replace(regExp, '')
              parameters = matches[1]
            }

            // split the method into module and function
            var parts = method.split('.')

            if (typeof faker[parts[0]] === 'undefined') {
              throw new Error('Invalid module: ' + parts[0])
            }

            if (typeof faker[parts[0]][parts[1]] === 'undefined') {
              throw new Error(
                'Invalid method: ' + parts[0] + '.' + parts[1],
              )
            }

            // assign the function from the module.function namespace
            var fn = faker[parts[0]][parts[1]]

            // If parameters are populated here, they are always going to be of string type
            // since we might actually be dealing with an object or array,
            // we always attempt to the parse the incoming parameters into JSON
            var params
            // Note: we experience a small performance hit here due to JSON.parse try / catch
            // If anyone actually needs to optimize this specific code path, please open a support issue on github
            try {
              params = JSON.parse(parameters)
            } catch (err) {
              // since JSON.parse threw an error, assume parameters was actually a string
              params = parameters
            }

            var result
            if (typeof params === 'string' && params.length === 0) {
              result = fn.call(this)
            } else {
              result = fn.call(this, params)
            }

            // replace the found tag with the returned fake value
            res = str.replace('{{' + token + '}}', result)

            // return the response recursively until we are done finding all tags
            return fake(res)
          }

          return this
        }

        module['exports'] = Fake
      },
      {},
    ],
    '../node_modules/faker/vendor/mersenne.js': [
      function(require, module, exports) {
        // this program is a JavaScript version of Mersenne Twister, with concealment and encapsulation in class,
        // an almost straight conversion from the original program, mt19937ar.c,
        // translated by y. okada on July 17, 2006.
        // and modified a little at july 20, 2006, but there are not any substantial differences.
        // in this program, procedure descriptions and comments of original source code were not removed.
        // lines commented with //c// were originally descriptions of c procedure. and a few following lines are appropriate JavaScript descriptions.
        // lines commented with /* and */ are original comments.
        // lines commented with // are additional comments in this JavaScript version.
        // before using this version, create at least one instance of MersenneTwister19937 class, and initialize the each state, given below in c comments, of all the instances.
        /*
   A C-program for MT19937, with initialization improved 2002/1/26.
   Coded by Takuji Nishimura and Makoto Matsumoto.

   Before using, initialize the state by using init_genrand(seed)
   or init_by_array(init_key, key_length).

   Copyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,
   All rights reserved.

   Redistribution and use in source and binary forms, with or without
   modification, are permitted provided that the following conditions
   are met:

     1. Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.

     2. Redistributions in binary form must reproduce the above copyright
        notice, this list of conditions and the following disclaimer in the
        documentation and/or other materials provided with the distribution.

     3. The names of its contributors may not be used to endorse or promote
        products derived from this software without specific prior written
        permission.

   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
   A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
   EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
   PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


   Any feedback is very welcome.
   http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html
   email: m-mat @ math.sci.hiroshima-u.ac.jp (remove space)
*/

        function MersenneTwister19937() {
          /* constants should be scoped inside the class */
          var N, M, MATRIX_A, UPPER_MASK, LOWER_MASK
          /* Period parameters */
          //c//#define N 624
          //c//#define M 397
          //c//#define MATRIX_A 0x9908b0dfUL   /* constant vector a */
          //c//#define UPPER_MASK 0x80000000UL /* most significant w-r bits */
          //c//#define LOWER_MASK 0x7fffffffUL /* least significant r bits */
          N = 624
          M = 397
          MATRIX_A = 0x9908b0df /* constant vector a */
          UPPER_MASK = 0x80000000 /* most significant w-r bits */
          LOWER_MASK = 0x7fffffff /* least significant r bits */
          //c//static unsigned long mt[N]; /* the array for the state vector  */
          //c//static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */
          var mt = new Array(N) /* the array for the state vector  */
          var mti = N + 1 /* mti==N+1 means mt[N] is not initialized */

          function unsigned32(n1) {
            // returns a 32-bits unsiged integer from an operand to which applied a bit operator.
            return n1 < 0 ? (n1 ^ UPPER_MASK) + UPPER_MASK : n1
          }

          function subtraction32(n1, n2) {
            // emulates lowerflow of a c 32-bits unsiged integer variable, instead of the operator -. these both arguments must be non-negative integers expressible using unsigned 32 bits.
            return n1 < n2
              ? unsigned32((0x100000000 - (n2 - n1)) & 0xffffffff)
              : n1 - n2
          }

          function addition32(n1, n2) {
            // emulates overflow of a c 32-bits unsiged integer variable, instead of the operator +. these both arguments must be non-negative integers expressible using unsigned 32 bits.
            return unsigned32((n1 + n2) & 0xffffffff)
          }

          function multiplication32(n1, n2) {
            // emulates overflow of a c 32-bits unsiged integer variable, instead of the operator *. these both arguments must be non-negative integers expressible using unsigned 32 bits.
            var sum = 0
            for (var i = 0; i < 32; ++i) {
              if ((n1 >>> i) & 0x1) {
                sum = addition32(sum, unsigned32(n2 << i))
              }
            }
            return sum
          }

          /* initializes mt[N] with a seed */
          //c//void init_genrand(unsigned long s)
          this.init_genrand = function(s) {
            //c//mt[0]= s & 0xffffffff;
            mt[0] = unsigned32(s & 0xffffffff)
            for (mti = 1; mti < N; mti++) {
              mt[mti] =
                //c//(1812433253 * (mt[mti-1] ^ (mt[mti-1] >> 30)) + mti);
                addition32(
                  multiplication32(
                    1812433253,
                    unsigned32(mt[mti - 1] ^ (mt[mti - 1] >>> 30)),
                  ),
                  mti,
                )
              /* See Knuth TAOCP Vol2. 3rd Ed. P.106 for multiplier. */
              /* In the previous versions, MSBs of the seed affect   */
              /* only MSBs of the array mt[].                        */
              /* 2002/01/09 modified by Makoto Matsumoto             */
              //c//mt[mti] &= 0xffffffff;
              mt[mti] = unsigned32(mt[mti] & 0xffffffff)
              /* for >32 bit machines */
            }
          }

          /* initialize by an array with array-length */
          /* init_key is the array for initializing keys */
          /* key_length is its length */
          /* slight change for C++, 2004/2/26 */
          //c//void init_by_array(unsigned long init_key[], int key_length)
          this.init_by_array = function(init_key, key_length) {
            //c//int i, j, k;
            var i, j, k
            //c//init_genrand(19650218);
            this.init_genrand(19650218)
            i = 1
            j = 0
            k = N > key_length ? N : key_length
            for (; k; k--) {
              //c//mt[i] = (mt[i] ^ ((mt[i-1] ^ (mt[i-1] >> 30)) * 1664525))
              //c//	+ init_key[j] + j; /* non linear */
              mt[i] = addition32(
                addition32(
                  unsigned32(
                    mt[i] ^
                      multiplication32(
                        unsigned32(mt[i - 1] ^ (mt[i - 1] >>> 30)),
                        1664525,
                      ),
                  ),
                  init_key[j],
                ),
                j,
              )
              mt[i] =
                //c//mt[i] &= 0xffffffff; /* for WORDSIZE > 32 machines */
                unsigned32(mt[i] & 0xffffffff)
              i++
              j++
              if (i >= N) {
                mt[0] = mt[N - 1]
                i = 1
              }
              if (j >= key_length) j = 0
            }
            for (k = N - 1; k; k--) {
              //c//mt[i] = (mt[i] ^ ((mt[i-1] ^ (mt[i-1] >> 30)) * 1566083941))
              //c//- i; /* non linear */
              mt[i] = subtraction32(
                unsigned32(
                  (dbg = mt[i]) ^
                    multiplication32(
                      unsigned32(mt[i - 1] ^ (mt[i - 1] >>> 30)),
                      1566083941,
                    ),
                ),
                i,
              )
              //c//mt[i] &= 0xffffffff; /* for WORDSIZE > 32 machines */
              mt[i] = unsigned32(mt[i] & 0xffffffff)
              i++
              if (i >= N) {
                mt[0] = mt[N - 1]
                i = 1
              }
            }
            mt[0] = 0x80000000 /* MSB is 1; assuring non-zero initial array */
          }

          /* moved outside of genrand_int32() by jwatte 2010-11-17; generate less garbage */
          var mag01 = [0x0, MATRIX_A]

          /* generates a random number on [0,0xffffffff]-interval */
          //c//unsigned long genrand_int32(void)
          this.genrand_int32 = function() {
            //c//unsigned long y;
            //c//static unsigned long mag01[2]={0x0UL, MATRIX_A};
            var y
            /* mag01[x] = x * MATRIX_A  for x=0,1 */

            if (mti >= N) {
              /* generate N words at one time */
              //c//int kk;
              var kk

              if (mti == N + 1)
                /* if init_genrand() has not been called, */
                //c//init_genrand(5489); /* a default initial seed is used */
                this.init_genrand(
                  5489,
                ) /* a default initial seed is used */

              for (kk = 0; kk < N - M; kk++) {
                //c//y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
                //c//mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
                y = unsigned32(
                  (mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK),
                )
                mt[kk] = unsigned32(
                  mt[kk + M] ^ (y >>> 1) ^ mag01[y & 0x1],
                )
              }
              for (; kk < N - 1; kk++) {
                //c//y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
                //c//mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
                y = unsigned32(
                  (mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK),
                )
                mt[kk] = unsigned32(
                  mt[kk + (M - N)] ^ (y >>> 1) ^ mag01[y & 0x1],
                )
              }
              //c//y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
              //c//mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
              y = unsigned32(
                (mt[N - 1] & UPPER_MASK) | (mt[0] & LOWER_MASK),
              )
              mt[N - 1] = unsigned32(
                mt[M - 1] ^ (y >>> 1) ^ mag01[y & 0x1],
              )
              mti = 0
            }

            y = mt[mti++]

            /* Tempering */
            //c//y ^= (y >> 11);
            //c//y ^= (y << 7) & 0x9d2c5680;
            //c//y ^= (y << 15) & 0xefc60000;
            //c//y ^= (y >> 18);
            y = unsigned32(y ^ (y >>> 11))
            y = unsigned32(y ^ ((y << 7) & 0x9d2c5680))
            y = unsigned32(y ^ ((y << 15) & 0xefc60000))
            y = unsigned32(y ^ (y >>> 18))

            return y
          }

          /* generates a random number on [0,0x7fffffff]-interval */
          //c//long genrand_int31(void)
          this.genrand_int31 = function() {
            //c//return (genrand_int32()>>1);
            return this.genrand_int32() >>> 1
          }

          /* generates a random number on [0,1]-real-interval */
          //c//double genrand_real1(void)
          this.genrand_real1 = function() {
            //c//return genrand_int32()*(1.0/4294967295.0);
            return this.genrand_int32() * (1.0 / 4294967295.0)
            /* divided by 2^32-1 */
          }

          /* generates a random number on [0,1)-real-interval */
          //c//double genrand_real2(void)
          this.genrand_real2 = function() {
            //c//return genrand_int32()*(1.0/4294967296.0);
            return this.genrand_int32() * (1.0 / 4294967296.0)
            /* divided by 2^32 */
          }

          /* generates a random number on (0,1)-real-interval */
          //c//double genrand_real3(void)
          this.genrand_real3 = function() {
            //c//return ((genrand_int32()) + 0.5)*(1.0/4294967296.0);
            return (this.genrand_int32() + 0.5) * (1.0 / 4294967296.0)
            /* divided by 2^32 */
          }

          /* generates a random number on [0,1) with 53-bit resolution*/
          //c//double genrand_res53(void)
          this.genrand_res53 = function() {
            //c//unsigned long a=genrand_int32()>>5, b=genrand_int32()>>6;
            var a = this.genrand_int32() >>> 5,
              b = this.genrand_int32() >>> 6
            return (a * 67108864.0 + b) * (1.0 / 9007199254740992.0)
          }
          /* These real versions are due to Isaku Wada, 2002/01/09 added */
        }

        //  Exports: Public API

        //  Export the twister class
        exports.MersenneTwister19937 = MersenneTwister19937

        //  Export a simplified function to generate random numbers
        var gen = new MersenneTwister19937()
        gen.init_genrand(new Date().getTime() % 1000000000)

        // Added max, min range functionality, Marak Squires Sept 11 2014
        exports.rand = function(max, min) {
          if (max === undefined) {
            min = 0
            max = 32768
          }
          return Math.floor(gen.genrand_real2() * (max - min) + min)
        }
        exports.seed = function(S) {
          if (typeof S != 'number') {
            throw new Error(
              'seed(S) must take numeric argument; is ' + typeof S,
            )
          }
          gen.init_genrand(S)
        }
        exports.seed_array = function(A) {
          if (typeof A != 'object') {
            throw new Error(
              'seed_array(A) must take array of numbers; is ' + typeof A,
            )
          }
          gen.init_by_array(A)
        }
      },
      {},
    ],
    '../node_modules/faker/lib/random.js': [
      function(require, module, exports) {
        var mersenne = require('../vendor/mersenne')

        /**
         *
         * @namespace faker.random
         */
        function Random(faker, seed) {
          // Use a user provided seed if it exists
          if (seed) {
            if (Array.isArray(seed) && seed.length) {
              mersenne.seed_array(seed)
            } else {
              mersenne.seed(seed)
            }
          }
          /**
           * returns a single random number based on a max number or range
           *
           * @method faker.random.number
           * @param {mixed} options
           */
          this.number = function(options) {
            if (typeof options === 'number') {
              options = {
                max: options,
              }
            }

            options = options || {}

            if (typeof options.min === 'undefined') {
              options.min = 0
            }

            if (typeof options.max === 'undefined') {
              options.max = 99999
            }
            if (typeof options.precision === 'undefined') {
              options.precision = 1
            }

            // Make the range inclusive of the max value
            var max = options.max
            if (max >= 0) {
              max += options.precision
            }

            var randomNumber =
              options.precision *
              Math.floor(
                mersenne.rand(
                  max / options.precision,
                  options.min / options.precision,
                ),
              )

            return randomNumber
          }

          /**
           * takes an array and returns a random element of the array
           *
           * @method faker.random.arrayElement
           * @param {array} array
           */
          this.arrayElement = function(array) {
            array = array || ['a', 'b', 'c']
            var r = faker.random.number({ max: array.length - 1 })
            return array[r]
          }

          /**
           * takes an object and returns the randomly key or value
           *
           * @method faker.random.objectElement
           * @param {object} object
           * @param {mixed} field
           */
          this.objectElement = function(object, field) {
            object = object || { foo: 'bar', too: 'car' }
            var array = Object.keys(object)
            var key = faker.random.arrayElement(array)

            return field === 'key' ? key : object[key]
          }

          /**
           * uuid
           *
           * @method faker.random.uuid
           */
          this.uuid = function() {
            var self = this
            var RFC4122_TEMPLATE = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'
            var replacePlaceholders = function(placeholder) {
              var random = self.number({ min: 0, max: 15 })
              var value =
                placeholder == 'x' ? random : (random & 0x3) | 0x8
              return value.toString(16)
            }
            return RFC4122_TEMPLATE.replace(/[xy]/g, replacePlaceholders)
          }

          /**
           * boolean
           *
           * @method faker.random.boolean
           */
          this.boolean = function() {
            return !!faker.random.number(1)
          }

          // TODO: have ability to return specific type of word? As in: noun, adjective, verb, etc
          /**
           * word
           *
           * @method faker.random.word
           * @param {string} type
           */
          this.word = function randomWord(type) {
            var wordMethods = [
              'commerce.department',
              'commerce.productName',
              'commerce.productAdjective',
              'commerce.productMaterial',
              'commerce.product',
              'commerce.color',

              'company.catchPhraseAdjective',
              'company.catchPhraseDescriptor',
              'company.catchPhraseNoun',
              'company.bsAdjective',
              'company.bsBuzz',
              'company.bsNoun',
              'address.streetSuffix',
              'address.county',
              'address.country',
              'address.state',

              'finance.accountName',
              'finance.transactionType',
              'finance.currencyName',

              'hacker.noun',
              'hacker.verb',
              'hacker.adjective',
              'hacker.ingverb',
              'hacker.abbreviation',

              'name.jobDescriptor',
              'name.jobArea',
              'name.jobType',
            ]

            // randomly pick from the many faker methods that can generate words
            var randomWordMethod = faker.random.arrayElement(wordMethods)
            return faker.fake('{{' + randomWordMethod + '}}')
          }

          /**
           * randomWords
           *
           * @method faker.random.words
           * @param {number} count defaults to a random value between 1 and 3
           */
          this.words = function randomWords(count) {
            var words = []
            if (typeof count === 'undefined') {
              count = faker.random.number({ min: 1, max: 3 })
            }
            for (var i = 0; i < count; i++) {
              words.push(faker.random.word())
            }
            return words.join(' ')
          }

          /**
           * locale
           *
           * @method faker.random.image
           */
          this.image = function randomImage() {
            return faker.image.image()
          }

          /**
           * locale
           *
           * @method faker.random.locale
           */
          this.locale = function randomLocale() {
            return faker.random.arrayElement(Object.keys(faker.locales))
          }

          /**
           * alphaNumeric
           *
           * @method faker.random.alphaNumeric
           * @param {number} count defaults to 1
           */
          this.alphaNumeric = function alphaNumeric(count) {
            if (typeof count === 'undefined') {
              count = 1
            }

            var wholeString = ''
            for (var i = 0; i < count; i++) {
              wholeString += faker.random.arrayElement([
                '0',
                '1',
                '2',
                '3',
                '4',
                '5',
                '6',
                '7',
                '8',
                '9',
                'a',
                'b',
                'c',
                'd',
                'e',
                'f',
                'g',
                'h',
                'i',
                'j',
                'k',
                'l',
                'm',
                'n',
                'o',
                'p',
                'q',
                'r',
                's',
                't',
                'u',
                'v',
                'w',
                'x',
                'y',
                'z',
              ])
            }

            return wholeString
          }

          return this
        }

        module['exports'] = Random
      },
      { '../vendor/mersenne': '../node_modules/faker/vendor/mersenne.js' },
    ],
    '../node_modules/faker/lib/helpers.js': [
      function(require, module, exports) {
        /**
         *
         * @namespace faker.helpers
         */
        var Helpers = function(faker) {
          var self = this

          /**
           * backword-compatibility
           *
           * @method faker.helpers.randomize
           * @param {array} array
           */
          self.randomize = function(array) {
            array = array || ['a', 'b', 'c']
            return faker.random.arrayElement(array)
          }

          /**
           * slugifies string
           *
           * @method faker.helpers.slugify
           * @param {string} string
           */
          self.slugify = function(string) {
            string = string || ''
            return string.replace(/ /g, '-').replace(/[^\w\.\-]+/g, '')
          }

          /**
           * parses string for a symbol and replace it with a random number from 1-10
           *
           * @method faker.helpers.replaceSymbolWithNumber
           * @param {string} string
           * @param {string} symbol defaults to `"#"`
           */
          self.replaceSymbolWithNumber = function(string, symbol) {
            string = string || ''
            // default symbol is '#'
            if (symbol === undefined) {
              symbol = '#'
            }

            var str = ''
            for (var i = 0; i < string.length; i++) {
              if (string.charAt(i) == symbol) {
                str += faker.random.number(9)
              } else {
                str += string.charAt(i)
              }
            }
            return str
          }

          /**
           * parses string for symbols (numbers or letters) and replaces them appropriately
           *
           * @method faker.helpers.replaceSymbols
           * @param {string} string
           */
          self.replaceSymbols = function(string) {
            string = string || ''
            var alpha = [
              'A',
              'B',
              'C',
              'D',
              'E',
              'F',
              'G',
              'H',
              'I',
              'J',
              'K',
              'L',
              'M',
              'N',
              'O',
              'P',
              'Q',
              'R',
              'S',
              'T',
              'U',
              'V',
              'W',
              'X',
              'Y',
              'Z',
            ]
            var str = ''

            for (var i = 0; i < string.length; i++) {
              if (string.charAt(i) == '#') {
                str += faker.random.number(9)
              } else if (string.charAt(i) == '?') {
                str += faker.random.arrayElement(alpha)
              } else {
                str += string.charAt(i)
              }
            }
            return str
          }

          /**
           * takes an array and returns it randomized
           *
           * @method faker.helpers.shuffle
           * @param {array} o
           */
          self.shuffle = function(o) {
            if (typeof o === 'undefined' || o.length === 0) {
              return []
            }
            o = o || ['a', 'b', 'c']
            for (
              var j, x, i = o.length - 1;
              i;
              j = faker.random.number(i), x = o[--i], o[i] = o[j], o[j] = x
            );
            return o
          }

          /**
           * mustache
           *
           * @method faker.helpers.mustache
           * @param {string} str
           * @param {object} data
           */
          self.mustache = function(str, data) {
            if (typeof str === 'undefined') {
              return ''
            }
            for (var p in data) {
              var re = new RegExp('{{' + p + '}}', 'g')
              str = str.replace(re, data[p])
            }
            return str
          }

          /**
           * createCard
           *
           * @method faker.helpers.createCard
           */
          self.createCard = function() {
            return {
              name: faker.name.findName(),
              username: faker.internet.userName(),
              email: faker.internet.email(),
              address: {
                streetA: faker.address.streetName(),
                streetB: faker.address.streetAddress(),
                streetC: faker.address.streetAddress(true),
                streetD: faker.address.secondaryAddress(),
                city: faker.address.city(),
                state: faker.address.state(),
                country: faker.address.country(),
                zipcode: faker.address.zipCode(),
                geo: {
                  lat: faker.address.latitude(),
                  lng: faker.address.longitude(),
                },
              },
              phone: faker.phone.phoneNumber(),
              website: faker.internet.domainName(),
              company: {
                name: faker.company.companyName(),
                catchPhrase: faker.company.catchPhrase(),
                bs: faker.company.bs(),
              },
              posts: [
                {
                  words: faker.lorem.words(),
                  sentence: faker.lorem.sentence(),
                  sentences: faker.lorem.sentences(),
                  paragraph: faker.lorem.paragraph(),
                },
                {
                  words: faker.lorem.words(),
                  sentence: faker.lorem.sentence(),
                  sentences: faker.lorem.sentences(),
                  paragraph: faker.lorem.paragraph(),
                },
                {
                  words: faker.lorem.words(),
                  sentence: faker.lorem.sentence(),
                  sentences: faker.lorem.sentences(),
                  paragraph: faker.lorem.paragraph(),
                },
              ],
              accountHistory: [
                faker.helpers.createTransaction(),
                faker.helpers.createTransaction(),
                faker.helpers.createTransaction(),
              ],
            }
          }

          /**
           * contextualCard
           *
           * @method faker.helpers.contextualCard
           */
          self.contextualCard = function() {
            var name = faker.name.firstName(),
              userName = faker.internet.userName(name)
            return {
              name: name,
              username: userName,
              avatar: faker.internet.avatar(),
              email: faker.internet.email(userName),
              dob: faker.date.past(
                50,
                new Date('Sat Sep 20 1992 21:35:02 GMT+0200 (CEST)'),
              ),
              phone: faker.phone.phoneNumber(),
              address: {
                street: faker.address.streetName(true),
                suite: faker.address.secondaryAddress(),
                city: faker.address.city(),
                zipcode: faker.address.zipCode(),
                geo: {
                  lat: faker.address.latitude(),
                  lng: faker.address.longitude(),
                },
              },
              website: faker.internet.domainName(),
              company: {
                name: faker.company.companyName(),
                catchPhrase: faker.company.catchPhrase(),
                bs: faker.company.bs(),
              },
            }
          }

          /**
           * userCard
           *
           * @method faker.helpers.userCard
           */
          self.userCard = function() {
            return {
              name: faker.name.findName(),
              username: faker.internet.userName(),
              email: faker.internet.email(),
              address: {
                street: faker.address.streetName(true),
                suite: faker.address.secondaryAddress(),
                city: faker.address.city(),
                zipcode: faker.address.zipCode(),
                geo: {
                  lat: faker.address.latitude(),
                  lng: faker.address.longitude(),
                },
              },
              phone: faker.phone.phoneNumber(),
              website: faker.internet.domainName(),
              company: {
                name: faker.company.companyName(),
                catchPhrase: faker.company.catchPhrase(),
                bs: faker.company.bs(),
              },
            }
          }

          /**
           * createTransaction
           *
           * @method faker.helpers.createTransaction
           */
          self.createTransaction = function() {
            return {
              amount: faker.finance.amount(),
              date: new Date(2012, 1, 2), //TODO: add a ranged date method
              business: faker.company.companyName(),
              name: [
                faker.finance.accountName(),
                faker.finance.mask(),
              ].join(' '),
              type: self.randomize(
                faker.definitions.finance.transaction_type,
              ),
              account: faker.finance.account(),
            }
          }

          return self
        }

        /*
String.prototype.capitalize = function () { //v1.0
    return this.replace(/\w+/g, function (a) {
        return a.charAt(0).toUpperCase() + a.substr(1).toLowerCase();
    });
};
*/

        module['exports'] = Helpers
      },
      {},
    ],
    '../node_modules/faker/lib/name.js': [
      function(require, module, exports) {
        /**
         *
         * @namespace faker.name
         */
        function Name(faker) {
          /**
           * firstName
           *
           * @method firstName
           * @param {mixed} gender
           * @memberof faker.name
           */
          this.firstName = function(gender) {
            if (
              typeof faker.definitions.name.male_first_name !==
                'undefined' &&
              typeof faker.definitions.name.female_first_name !==
                'undefined'
            ) {
              // some locale datasets ( like ru ) have first_name split by gender. since the name.first_name field does not exist in these datasets,
              // we must randomly pick a name from either gender array so faker.name.firstName will return the correct locale data ( and not fallback )
              if (typeof gender !== 'number') {
                gender = faker.random.number(1)
              }
              if (gender === 0) {
                return faker.random.arrayElement(
                  faker.locales[faker.locale].name.male_first_name,
                )
              } else {
                return faker.random.arrayElement(
                  faker.locales[faker.locale].name.female_first_name,
                )
              }
            }
            return faker.random.arrayElement(
              faker.definitions.name.first_name,
            )
          }

          /**
           * lastName
           *
           * @method lastName
           * @param {mixed} gender
           * @memberof faker.name
           */
          this.lastName = function(gender) {
            if (
              typeof faker.definitions.name.male_last_name !==
                'undefined' &&
              typeof faker.definitions.name.female_last_name !==
                'undefined'
            ) {
              // some locale datasets ( like ru ) have last_name split by gender. i have no idea how last names can have genders, but also i do not speak russian
              // see above comment of firstName method
              if (typeof gender !== 'number') {
                gender = faker.random.number(1)
              }
              if (gender === 0) {
                return faker.random.arrayElement(
                  faker.locales[faker.locale].name.male_last_name,
                )
              } else {
                return faker.random.arrayElement(
                  faker.locales[faker.locale].name.female_last_name,
                )
              }
            }
            return faker.random.arrayElement(
              faker.definitions.name.last_name,
            )
          }

          /**
           * findName
           *
           * @method findName
           * @param {string} firstName
           * @param {string} lastName
           * @param {mixed} gender
           * @memberof faker.name
           */
          this.findName = function(firstName, lastName, gender) {
            var r = faker.random.number(8)
            var prefix, suffix
            // in particular locales first and last names split by gender,
            // thus we keep consistency by passing 0 as male and 1 as female
            if (typeof gender !== 'number') {
              gender = faker.random.number(1)
            }
            firstName = firstName || faker.name.firstName(gender)
            lastName = lastName || faker.name.lastName(gender)
            switch (r) {
              case 0:
                prefix = faker.name.prefix(gender)
                if (prefix) {
                  return prefix + ' ' + firstName + ' ' + lastName
                }
              case 1:
                suffix = faker.name.suffix(gender)
                if (suffix) {
                  return firstName + ' ' + lastName + ' ' + suffix
                }
            }

            return firstName + ' ' + lastName
          }

          /**
           * jobTitle
           *
           * @method jobTitle
           * @memberof faker.name
           */
          this.jobTitle = function() {
            return (
              faker.name.jobDescriptor() +
              ' ' +
              faker.name.jobArea() +
              ' ' +
              faker.name.jobType()
            )
          }

          /**
           * prefix
           *
           * @method prefix
           * @param {mixed} gender
           * @memberof faker.name
           */
          this.prefix = function(gender) {
            if (
              typeof faker.definitions.name.male_prefix !== 'undefined' &&
              typeof faker.definitions.name.female_prefix !== 'undefined'
            ) {
              if (typeof gender !== 'number') {
                gender = faker.random.number(1)
              }
              if (gender === 0) {
                return faker.random.arrayElement(
                  faker.locales[faker.locale].name.male_prefix,
                )
              } else {
                return faker.random.arrayElement(
                  faker.locales[faker.locale].name.female_prefix,
                )
              }
            }
            return faker.random.arrayElement(faker.definitions.name.prefix)
          }

          /**
           * suffix
           *
           * @method suffix
           * @memberof faker.name
           */
          this.suffix = function() {
            return faker.random.arrayElement(faker.definitions.name.suffix)
          }

          /**
           * title
           *
           * @method title
           * @memberof faker.name
           */
          this.title = function() {
            var descriptor = faker.random.arrayElement(
                faker.definitions.name.title.descriptor,
              ),
              level = faker.random.arrayElement(
                faker.definitions.name.title.level,
              ),
              job = faker.random.arrayElement(
                faker.definitions.name.title.job,
              )

            return descriptor + ' ' + level + ' ' + job
          }

          /**
           * jobDescriptor
           *
           * @method jobDescriptor
           * @memberof faker.name
           */
          this.jobDescriptor = function() {
            return faker.random.arrayElement(
              faker.definitions.name.title.descriptor,
            )
          }

          /**
           * jobArea
           *
           * @method jobArea
           * @memberof faker.name
           */
          this.jobArea = function() {
            return faker.random.arrayElement(
              faker.definitions.name.title.level,
            )
          }

          /**
           * jobType
           *
           * @method jobType
           * @memberof faker.name
           */
          this.jobType = function() {
            return faker.random.arrayElement(
              faker.definitions.name.title.job,
            )
          }
        }

        module['exports'] = Name
      },
      {},
    ],
    '../node_modules/faker/lib/address.js': [
      function(require, module, exports) {
        /**
         *
         * @namespace faker.address
         */
        function Address(faker) {
          var f = faker.fake,
            Helpers = faker.helpers

          /**
           * Generates random zipcode from format. If format is not specified, the
           * locale's zip format is used.
           *
           * @method faker.address.zipCode
           * @param {String} format
           */
          this.zipCode = function(format) {
            // if zip format is not specified, use the zip format defined for the locale
            if (typeof format === 'undefined') {
              var localeFormat = faker.definitions.address.postcode
              if (typeof localeFormat === 'string') {
                format = localeFormat
              } else {
                format = faker.random.arrayElement(localeFormat)
              }
            }
            return Helpers.replaceSymbols(format)
          }

          /**
           * Generates a random localized city name. The format string can contain any
           * method provided by faker wrapped in `{{}}`, e.g. `{{name.firstName}}` in
           * order to build the city name.
           *
           * If no format string is provided one of the following is randomly used:
           *
           * * `{{address.cityPrefix}} {{name.firstName}}{{address.citySuffix}}`
           * * `{{address.cityPrefix}} {{name.firstName}}`
           * * `{{name.firstName}}{{address.citySuffix}}`
           * * `{{name.lastName}}{{address.citySuffix}}`
           *
           * @method faker.address.city
           * @param {String} format
           */
          this.city = function(format) {
            var formats = [
              '{{address.cityPrefix}} {{name.firstName}}{{address.citySuffix}}',
              '{{address.cityPrefix}} {{name.firstName}}',
              '{{name.firstName}}{{address.citySuffix}}',
              '{{name.lastName}}{{address.citySuffix}}',
            ]

            if (typeof format !== 'number') {
              format = faker.random.number(formats.length - 1)
            }

            return f(formats[format])
          }

          /**
           * Return a random localized city prefix
           * @method faker.address.cityPrefix
           */
          this.cityPrefix = function() {
            return faker.random.arrayElement(
              faker.definitions.address.city_prefix,
            )
          }

          /**
           * Return a random localized city suffix
           *
           * @method faker.address.citySuffix
           */
          this.citySuffix = function() {
            return faker.random.arrayElement(
              faker.definitions.address.city_suffix,
            )
          }

          /**
           * Returns a random localized street name
           *
           * @method faker.address.streetName
           */
          this.streetName = function() {
            var result
            var suffix = faker.address.streetSuffix()
            if (suffix !== '') {
              suffix = ' ' + suffix
            }

            switch (faker.random.number(1)) {
              case 0:
                result = faker.name.lastName() + suffix
                break
              case 1:
                result = faker.name.firstName() + suffix
                break
            }
            return result
          }

          //
          // TODO: change all these methods that accept a boolean to instead accept an options hash.
          //
          /**
           * Returns a random localized street address
           *
           * @method faker.address.streetAddress
           * @param {Boolean} useFullAddress
           */
          this.streetAddress = function(useFullAddress) {
            if (useFullAddress === undefined) {
              useFullAddress = false
            }
            var address = ''
            switch (faker.random.number(2)) {
              case 0:
                address =
                  Helpers.replaceSymbolWithNumber('#####') +
                  ' ' +
                  faker.address.streetName()
                break
              case 1:
                address =
                  Helpers.replaceSymbolWithNumber('####') +
                  ' ' +
                  faker.address.streetName()
                break
              case 2:
                address =
                  Helpers.replaceSymbolWithNumber('###') +
                  ' ' +
                  faker.address.streetName()
                break
            }
            return useFullAddress
              ? address + ' ' + faker.address.secondaryAddress()
              : address
          }

          /**
           * streetSuffix
           *
           * @method faker.address.streetSuffix
           */
          this.streetSuffix = function() {
            return faker.random.arrayElement(
              faker.definitions.address.street_suffix,
            )
          }

          /**
           * streetPrefix
           *
           * @method faker.address.streetPrefix
           */
          this.streetPrefix = function() {
            return faker.random.arrayElement(
              faker.definitions.address.street_prefix,
            )
          }

          /**
           * secondaryAddress
           *
           * @method faker.address.secondaryAddress
           */
          this.secondaryAddress = function() {
            return Helpers.replaceSymbolWithNumber(
              faker.random.arrayElement(['Apt. ###', 'Suite ###']),
            )
          }

          /**
           * county
           *
           * @method faker.address.county
           */
          this.county = function() {
            return faker.random.arrayElement(
              faker.definitions.address.county,
            )
          }

          /**
           * country
           *
           * @method faker.address.country
           */
          this.country = function() {
            return faker.random.arrayElement(
              faker.definitions.address.country,
            )
          }

          /**
           * countryCode
           *
           * @method faker.address.countryCode
           */
          this.countryCode = function() {
            return faker.random.arrayElement(
              faker.definitions.address.country_code,
            )
          }

          /**
           * state
           *
           * @method faker.address.state
           * @param {Boolean} useAbbr
           */
          this.state = function(useAbbr) {
            return faker.random.arrayElement(
              faker.definitions.address.state,
            )
          }

          /**
           * stateAbbr
           *
           * @method faker.address.stateAbbr
           */
          this.stateAbbr = function() {
            return faker.random.arrayElement(
              faker.definitions.address.state_abbr,
            )
          }

          /**
           * latitude
           *
           * @method faker.address.latitude
           */
          this.latitude = function() {
            return (
              faker.random.number(180 * 10000) / 10000.0 -
              90.0
            ).toFixed(4)
          }

          /**
           * longitude
           *
           * @method faker.address.longitude
           */
          this.longitude = function() {
            return (
              faker.random.number(360 * 10000) / 10000.0 -
              180.0
            ).toFixed(4)
          }

          return this
        }

        module.exports = Address
      },
      {},
    ],
    '../node_modules/faker/lib/company.js': [
      function(require, module, exports) {
        /**
         *
         * @namespace faker.company
         */
        var Company = function(faker) {
          var self = this
          var f = faker.fake

          /**
           * suffixes
           *
           * @method faker.company.suffixes
           */
          this.suffixes = function() {
            // Don't want the source array exposed to modification, so return a copy
            return faker.definitions.company.suffix.slice(0)
          }

          /**
           * companyName
           *
           * @method faker.company.companyName
           * @param {string} format
           */
          this.companyName = function(format) {
            var formats = [
              '{{name.lastName}} {{company.companySuffix}}',
              '{{name.lastName}} - {{name.lastName}}',
              '{{name.lastName}}, {{name.lastName}} and {{name.lastName}}',
            ]

            if (typeof format !== 'number') {
              format = faker.random.number(formats.length - 1)
            }

            return f(formats[format])
          }

          /**
           * companySuffix
           *
           * @method faker.company.companySuffix
           */
          this.companySuffix = function() {
            return faker.random.arrayElement(faker.company.suffixes())
          }

          /**
           * catchPhrase
           *
           * @method faker.company.catchPhrase
           */
          this.catchPhrase = function() {
            return f(
              '{{company.catchPhraseAdjective}} {{company.catchPhraseDescriptor}} {{company.catchPhraseNoun}}',
            )
          }

          /**
           * bs
           *
           * @method faker.company.bs
           */
          this.bs = function() {
            return f(
              '{{company.bsAdjective}} {{company.bsBuzz}} {{company.bsNoun}}',
            )
          }

          /**
           * catchPhraseAdjective
           *
           * @method faker.company.catchPhraseAdjective
           */
          this.catchPhraseAdjective = function() {
            return faker.random.arrayElement(
              faker.definitions.company.adjective,
            )
          }

          /**
           * catchPhraseDescriptor
           *
           * @method faker.company.catchPhraseDescriptor
           */
          this.catchPhraseDescriptor = function() {
            return faker.random.arrayElement(
              faker.definitions.company.descriptor,
            )
          }

          /**
           * catchPhraseNoun
           *
           * @method faker.company.catchPhraseNoun
           */
          this.catchPhraseNoun = function() {
            return faker.random.arrayElement(
              faker.definitions.company.noun,
            )
          }

          /**
           * bsAdjective
           *
           * @method faker.company.bsAdjective
           */
          this.bsAdjective = function() {
            return faker.random.arrayElement(
              faker.definitions.company.bs_adjective,
            )
          }

          /**
           * bsBuzz
           *
           * @method faker.company.bsBuzz
           */
          this.bsBuzz = function() {
            return faker.random.arrayElement(
              faker.definitions.company.bs_verb,
            )
          }

          /**
           * bsNoun
           *
           * @method faker.company.bsNoun
           */
          this.bsNoun = function() {
            return faker.random.arrayElement(
              faker.definitions.company.bs_noun,
            )
          }
        }

        module['exports'] = Company
      },
      {},
    ],
    '../node_modules/faker/lib/iban.js': [
      function(require, module, exports) {
        module['exports'] = {
          alpha: [
            'A',
            'B',
            'C',
            'D',
            'E',
            'F',
            'G',
            'H',
            'I',
            'J',
            'K',
            'L',
            'M',
            'N',
            'O',
            'P',
            'Q',
            'R',
            'S',
            'T',
            'U',
            'V',
            'W',
            'X',
            'Y',
            'Z',
          ],
          pattern10: [
            '01',
            '02',
            '03',
            '04',
            '05',
            '06',
            '07',
            '08',
            '09',
          ],
          pattern100: [
            '001',
            '002',
            '003',
            '004',
            '005',
            '006',
            '007',
            '008',
            '009',
          ],
          toDigitString: function(str) {
            return str.replace(/[A-Z]/gi, function(match) {
              return match.toUpperCase().charCodeAt(0) - 55
            })
          },
          mod97: function(digitStr) {
            var m = 0
            for (var i = 0; i < digitStr.length; i++) {
              m = (m * 10 + (digitStr[i] | 0)) % 97
            }
            return m
          },
          formats: [
            {
              country: 'AL',
              total: 28,
              bban: [
                {
                  type: 'n',
                  count: 8,
                },
                {
                  type: 'c',
                  count: 16,
                },
              ],
              format: 'ALkk bbbs sssx cccc cccc cccc cccc',
            },
            {
              country: 'AD',
              total: 24,
              bban: [
                {
                  type: 'n',
                  count: 8,
                },
                {
                  type: 'c',
                  count: 12,
                },
              ],
              format: 'ADkk bbbb ssss cccc cccc cccc',
            },
            {
              country: 'AT',
              total: 20,
              bban: [
                {
                  type: 'n',
                  count: 5,
                },
                {
                  type: 'n',
                  count: 11,
                },
              ],
              format: 'ATkk bbbb bccc cccc cccc',
            },
            {
              country: 'AZ',
              total: 28,
              bban: [
                {
                  type: 'c',
                  count: 4,
                },
                {
                  type: 'n',
                  count: 20,
                },
              ],
              format: 'AZkk bbbb cccc cccc cccc cccc cccc',
            },
            {
              country: 'BH',
              total: 22,
              bban: [
                {
                  type: 'a',
                  count: 4,
                },
                {
                  type: 'c',
                  count: 14,
                },
              ],
              format: 'BHkk bbbb cccc cccc cccc cc',
            },
            {
              country: 'BE',
              total: 16,
              bban: [
                {
                  type: 'n',
                  count: 3,
                },
                {
                  type: 'n',
                  count: 9,
                },
              ],
              format: 'BEkk bbbc cccc ccxx',
            },
            {
              country: 'BA',
              total: 20,
              bban: [
                {
                  type: 'n',
                  count: 6,
                },
                {
                  type: 'n',
                  count: 10,
                },
              ],
              format: 'BAkk bbbs sscc cccc ccxx',
            },
            {
              country: 'BR',
              total: 29,
              bban: [
                {
                  type: 'n',
                  count: 13,
                },
                {
                  type: 'n',
                  count: 10,
                },
                {
                  type: 'a',
                  count: 1,
                },
                {
                  type: 'c',
                  count: 1,
                },
              ],
              format: 'BRkk bbbb bbbb ssss sccc cccc ccct n',
            },
            {
              country: 'BG',
              total: 22,
              bban: [
                {
                  type: 'a',
                  count: 4,
                },
                {
                  type: 'n',
                  count: 6,
                },
                {
                  type: 'c',
                  count: 8,
                },
              ],
              format: 'BGkk bbbb ssss ddcc cccc cc',
            },
            {
              country: 'CR',
              total: 21,
              bban: [
                {
                  type: 'n',
                  count: 3,
                },
                {
                  type: 'n',
                  count: 14,
                },
              ],
              format: 'CRkk bbbc cccc cccc cccc c',
            },
            {
              country: 'HR',
              total: 21,
              bban: [
                {
                  type: 'n',
                  count: 7,
                },
                {
                  type: 'n',
                  count: 10,
                },
              ],
              format: 'HRkk bbbb bbbc cccc cccc c',
            },
            {
              country: 'CY',
              total: 28,
              bban: [
                {
                  type: 'n',
                  count: 8,
                },
                {
                  type: 'c',
                  count: 16,
                },
              ],
              format: 'CYkk bbbs ssss cccc cccc cccc cccc',
            },
            {
              country: 'CZ',
              total: 24,
              bban: [
                {
                  type: 'n',
                  count: 10,
                },
                {
                  type: 'n',
                  count: 10,
                },
              ],
              format: 'CZkk bbbb ssss sscc cccc cccc',
            },
            {
              country: 'DK',
              total: 18,
              bban: [
                {
                  type: 'n',
                  count: 4,
                },
                {
                  type: 'n',
                  count: 10,
                },
              ],
              format: 'DKkk bbbb cccc cccc cc',
            },
            {
              country: 'DO',
              total: 28,
              bban: [
                {
                  type: 'a',
                  count: 4,
                },
                {
                  type: 'n',
                  count: 20,
                },
              ],
              format: 'DOkk bbbb cccc cccc cccc cccc cccc',
            },
            {
              country: 'TL',
              total: 23,
              bban: [
                {
                  type: 'n',
                  count: 3,
                },
                {
                  type: 'n',
                  count: 16,
                },
              ],
              format: 'TLkk bbbc cccc cccc cccc cxx',
            },
            {
              country: 'EE',
              total: 20,
              bban: [
                {
                  type: 'n',
                  count: 4,
                },
                {
                  type: 'n',
                  count: 12,
                },
              ],
              format: 'EEkk bbss cccc cccc cccx',
            },
            {
              country: 'FO',
              total: 18,
              bban: [
                {
                  type: 'n',
                  count: 4,
                },
                {
                  type: 'n',
                  count: 10,
                },
              ],
              format: 'FOkk bbbb cccc cccc cx',
            },
            {
              country: 'FI',
              total: 18,
              bban: [
                {
                  type: 'n',
                  count: 6,
                },
                {
                  type: 'n',
                  count: 8,
                },
              ],
              format: 'FIkk bbbb bbcc cccc cx',
            },
            {
              country: 'FR',
              total: 27,
              bban: [
                {
                  type: 'n',
                  count: 10,
                },
                {
                  type: 'c',
                  count: 11,
                },
                {
                  type: 'n',
                  count: 2,
                },
              ],
              format: 'FRkk bbbb bggg ggcc cccc cccc cxx',
            },
            {
              country: 'GE',
              total: 22,
              bban: [
                {
                  type: 'c',
                  count: 2,
                },
                {
                  type: 'n',
                  count: 16,
                },
              ],
              format: 'GEkk bbcc cccc cccc cccc cc',
            },
            {
              country: 'DE',
              total: 22,
              bban: [
                {
                  type: 'n',
                  count: 8,
                },
                {
                  type: 'n',
                  count: 10,
                },
              ],
              format: 'DEkk bbbb bbbb cccc cccc cc',
            },
            {
              country: 'GI',
              total: 23,
              bban: [
                {
                  type: 'a',
                  count: 4,
                },
                {
                  type: 'c',
                  count: 15,
                },
              ],
              format: 'GIkk bbbb cccc cccc cccc ccc',
            },
            {
              country: 'GR',
              total: 27,
              bban: [
                {
                  type: 'n',
                  count: 7,
                },
                {
                  type: 'c',
                  count: 16,
                },
              ],
              format: 'GRkk bbbs sssc cccc cccc cccc ccc',
            },
            {
              country: 'GL',
              total: 18,
              bban: [
                {
                  type: 'n',
                  count: 4,
                },
                {
                  type: 'n',
                  count: 10,
                },
              ],
              format: 'GLkk bbbb cccc cccc cc',
            },
            {
              country: 'GT',
              total: 28,
              bban: [
                {
                  type: 'c',
                  count: 4,
                },
                {
                  type: 'c',
                  count: 4,
                },
                {
                  type: 'c',
                  count: 16,
                },
              ],
              format: 'GTkk bbbb mmtt cccc cccc cccc cccc',
            },
            {
              country: 'HU',
              total: 28,
              bban: [
                {
                  type: 'n',
                  count: 8,
                },
                {
                  type: 'n',
                  count: 16,
                },
              ],
              format: 'HUkk bbbs sssk cccc cccc cccc cccx',
            },
            {
              country: 'IS',
              total: 26,
              bban: [
                {
                  type: 'n',
                  count: 6,
                },
                {
                  type: 'n',
                  count: 16,
                },
              ],
              format: 'ISkk bbbb sscc cccc iiii iiii ii',
            },
            {
              country: 'IE',
              total: 22,
              bban: [
                {
                  type: 'c',
                  count: 4,
                },
                {
                  type: 'n',
                  count: 6,
                },
                {
                  type: 'n',
                  count: 8,
                },
              ],
              format: 'IEkk aaaa bbbb bbcc cccc cc',
            },
            {
              country: 'IL',
              total: 23,
              bban: [
                {
                  type: 'n',
                  count: 6,
                },
                {
                  type: 'n',
                  count: 13,
                },
              ],
              format: 'ILkk bbbn nncc cccc cccc ccc',
            },
            {
              country: 'IT',
              total: 27,
              bban: [
                {
                  type: 'a',
                  count: 1,
                },
                {
                  type: 'n',
                  count: 10,
                },
                {
                  type: 'c',
                  count: 12,
                },
              ],
              format: 'ITkk xaaa aabb bbbc cccc cccc ccc',
            },
            {
              country: 'JO',
              total: 30,
              bban: [
                {
                  type: 'a',
                  count: 4,
                },
                {
                  type: 'n',
                  count: 4,
                },
                {
                  type: 'n',
                  count: 18,
                },
              ],
              format: 'JOkk bbbb nnnn cccc cccc cccc cccc cc',
            },
            {
              country: 'KZ',
              total: 20,
              bban: [
                {
                  type: 'n',
                  count: 3,
                },
                {
                  type: 'c',
                  count: 13,
                },
              ],
              format: 'KZkk bbbc cccc cccc cccc',
            },
            {
              country: 'XK',
              total: 20,
              bban: [
                {
                  type: 'n',
                  count: 4,
                },
                {
                  type: 'n',
                  count: 12,
                },
              ],
              format: 'XKkk bbbb cccc cccc cccc',
            },
            {
              country: 'KW',
              total: 30,
              bban: [
                {
                  type: 'a',
                  count: 4,
                },
                {
                  type: 'c',
                  count: 22,
                },
              ],
              format: 'KWkk bbbb cccc cccc cccc cccc cccc cc',
            },
            {
              country: 'LV',
              total: 21,
              bban: [
                {
                  type: 'a',
                  count: 4,
                },
                {
                  type: 'c',
                  count: 13,
                },
              ],
              format: 'LVkk bbbb cccc cccc cccc c',
            },
            {
              country: 'LB',
              total: 28,
              bban: [
                {
                  type: 'n',
                  count: 4,
                },
                {
                  type: 'c',
                  count: 20,
                },
              ],
              format: 'LBkk bbbb cccc cccc cccc cccc cccc',
            },
            {
              country: 'LI',
              total: 21,
              bban: [
                {
                  type: 'n',
                  count: 5,
                },
                {
                  type: 'c',
                  count: 12,
                },
              ],
              format: 'LIkk bbbb bccc cccc cccc c',
            },
            {
              country: 'LT',
              total: 20,
              bban: [
                {
                  type: 'n',
                  count: 5,
                },
                {
                  type: 'n',
                  count: 11,
                },
              ],
              format: 'LTkk bbbb bccc cccc cccc',
            },
            {
              country: 'LU',
              total: 20,
              bban: [
                {
                  type: 'n',
                  count: 3,
                },
                {
                  type: 'c',
                  count: 13,
                },
              ],
              format: 'LUkk bbbc cccc cccc cccc',
            },
            {
              country: 'MK',
              total: 19,
              bban: [
                {
                  type: 'n',
                  count: 3,
                },
                {
                  type: 'c',
                  count: 10,
                },
                {
                  type: 'n',
                  count: 2,
                },
              ],
              format: 'MKkk bbbc cccc cccc cxx',
            },
            {
              country: 'MT',
              total: 31,
              bban: [
                {
                  type: 'a',
                  count: 4,
                },
                {
                  type: 'n',
                  count: 5,
                },
                {
                  type: 'c',
                  count: 18,
                },
              ],
              format: 'MTkk bbbb ssss sccc cccc cccc cccc ccc',
            },
            {
              country: 'MR',
              total: 27,
              bban: [
                {
                  type: 'n',
                  count: 10,
                },
                {
                  type: 'n',
                  count: 13,
                },
              ],
              format: 'MRkk bbbb bsss sscc cccc cccc cxx',
            },
            {
              country: 'MU',
              total: 30,
              bban: [
                {
                  type: 'a',
                  count: 4,
                },
                {
                  type: 'n',
                  count: 4,
                },
                {
                  type: 'n',
                  count: 15,
                },
                {
                  type: 'a',
                  count: 3,
                },
              ],
              format: 'MUkk bbbb bbss cccc cccc cccc 000d dd',
            },
            {
              country: 'MC',
              total: 27,
              bban: [
                {
                  type: 'n',
                  count: 10,
                },
                {
                  type: 'c',
                  count: 11,
                },
                {
                  type: 'n',
                  count: 2,
                },
              ],
              format: 'MCkk bbbb bsss sscc cccc cccc cxx',
            },
            {
              country: 'MD',
              total: 24,
              bban: [
                {
                  type: 'c',
                  count: 2,
                },
                {
                  type: 'c',
                  count: 18,
                },
              ],
              format: 'MDkk bbcc cccc cccc cccc cccc',
            },
            {
              country: 'ME',
              total: 22,
              bban: [
                {
                  type: 'n',
                  count: 3,
                },
                {
                  type: 'n',
                  count: 15,
                },
              ],
              format: 'MEkk bbbc cccc cccc cccc xx',
            },
            {
              country: 'NL',
              total: 18,
              bban: [
                {
                  type: 'a',
                  count: 4,
                },
                {
                  type: 'n',
                  count: 10,
                },
              ],
              format: 'NLkk bbbb cccc cccc cc',
            },
            {
              country: 'NO',
              total: 15,
              bban: [
                {
                  type: 'n',
                  count: 4,
                },
                {
                  type: 'n',
                  count: 7,
                },
              ],
              format: 'NOkk bbbb cccc ccx',
            },
            {
              country: 'PK',
              total: 24,
              bban: [
                {
                  type: 'c',
                  count: 4,
                },
                {
                  type: 'n',
                  count: 16,
                },
              ],
              format: 'PKkk bbbb cccc cccc cccc cccc',
            },
            {
              country: 'PS',
              total: 29,
              bban: [
                {
                  type: 'c',
                  count: 4,
                },
                {
                  type: 'n',
                  count: 9,
                },
                {
                  type: 'n',
                  count: 12,
                },
              ],
              format: 'PSkk bbbb xxxx xxxx xccc cccc cccc c',
            },
            {
              country: 'PL',
              total: 28,
              bban: [
                {
                  type: 'n',
                  count: 8,
                },
                {
                  type: 'n',
                  count: 16,
                },
              ],
              format: 'PLkk bbbs sssx cccc cccc cccc cccc',
            },
            {
              country: 'PT',
              total: 25,
              bban: [
                {
                  type: 'n',
                  count: 8,
                },
                {
                  type: 'n',
                  count: 13,
                },
              ],
              format: 'PTkk bbbb ssss cccc cccc cccx x',
            },
            {
              country: 'QA',
              total: 29,
              bban: [
                {
                  type: 'a',
                  count: 4,
                },
                {
                  type: 'c',
                  count: 21,
                },
              ],
              format: 'QAkk bbbb cccc cccc cccc cccc cccc c',
            },
            {
              country: 'RO',
              total: 24,
              bban: [
                {
                  type: 'a',
                  count: 4,
                },
                {
                  type: 'c',
                  count: 16,
                },
              ],
              format: 'ROkk bbbb cccc cccc cccc cccc',
            },
            {
              country: 'SM',
              total: 27,
              bban: [
                {
                  type: 'a',
                  count: 1,
                },
                {
                  type: 'n',
                  count: 10,
                },
                {
                  type: 'c',
                  count: 12,
                },
              ],
              format: 'SMkk xaaa aabb bbbc cccc cccc ccc',
            },
            {
              country: 'SA',
              total: 24,
              bban: [
                {
                  type: 'n',
                  count: 2,
                },
                {
                  type: 'c',
                  count: 18,
                },
              ],
              format: 'SAkk bbcc cccc cccc cccc cccc',
            },
            {
              country: 'RS',
              total: 22,
              bban: [
                {
                  type: 'n',
                  count: 3,
                },
                {
                  type: 'n',
                  count: 15,
                },
              ],
              format: 'RSkk bbbc cccc cccc cccc xx',
            },
            {
              country: 'SK',
              total: 24,
              bban: [
                {
                  type: 'n',
                  count: 10,
                },
                {
                  type: 'n',
                  count: 10,
                },
              ],
              format: 'SKkk bbbb ssss sscc cccc cccc',
            },
            {
              country: 'SI',
              total: 19,
              bban: [
                {
                  type: 'n',
                  count: 5,
                },
                {
                  type: 'n',
                  count: 10,
                },
              ],
              format: 'SIkk bbss sccc cccc cxx',
            },
            {
              country: 'ES',
              total: 24,
              bban: [
                {
                  type: 'n',
                  count: 10,
                },
                {
                  type: 'n',
                  count: 10,
                },
              ],
              format: 'ESkk bbbb gggg xxcc cccc cccc',
            },
            {
              country: 'SE',
              total: 24,
              bban: [
                {
                  type: 'n',
                  count: 3,
                },
                {
                  type: 'n',
                  count: 17,
                },
              ],
              format: 'SEkk bbbc cccc cccc cccc cccc',
            },
            {
              country: 'CH',
              total: 21,
              bban: [
                {
                  type: 'n',
                  count: 5,
                },
                {
                  type: 'c',
                  count: 12,
                },
              ],
              format: 'CHkk bbbb bccc cccc cccc c',
            },
            {
              country: 'TN',
              total: 24,
              bban: [
                {
                  type: 'n',
                  count: 5,
                },
                {
                  type: 'n',
                  count: 15,
                },
              ],
              format: 'TNkk bbss sccc cccc cccc cccc',
            },
            {
              country: 'TR',
              total: 26,
              bban: [
                {
                  type: 'n',
                  count: 5,
                },
                {
                  type: 'c',
                  count: 1,
                },
                {
                  type: 'c',
                  count: 16,
                },
              ],
              format: 'TRkk bbbb bxcc cccc cccc cccc cc',
            },
            {
              country: 'AE',
              total: 23,
              bban: [
                {
                  type: 'n',
                  count: 3,
                },
                {
                  type: 'n',
                  count: 16,
                },
              ],
              format: 'AEkk bbbc cccc cccc cccc ccc',
            },
            {
              country: 'GB',
              total: 22,
              bban: [
                {
                  type: 'a',
                  count: 4,
                },
                {
                  type: 'n',
                  count: 6,
                },
                {
                  type: 'n',
                  count: 8,
                },
              ],
              format: 'GBkk bbbb ssss sscc cccc cc',
            },
            {
              country: 'VG',
              total: 24,
              bban: [
                {
                  type: 'c',
                  count: 4,
                },
                {
                  type: 'n',
                  count: 16,
                },
              ],
              format: 'VGkk bbbb cccc cccc cccc cccc',
            },
          ],
          iso3166: [
            'AC',
            'AD',
            'AE',
            'AF',
            'AG',
            'AI',
            'AL',
            'AM',
            'AN',
            'AO',
            'AQ',
            'AR',
            'AS',
            'AT',
            'AU',
            'AW',
            'AX',
            'AZ',
            'BA',
            'BB',
            'BD',
            'BE',
            'BF',
            'BG',
            'BH',
            'BI',
            'BJ',
            'BL',
            'BM',
            'BN',
            'BO',
            'BQ',
            'BR',
            'BS',
            'BT',
            'BU',
            'BV',
            'BW',
            'BY',
            'BZ',
            'CA',
            'CC',
            'CD',
            'CE',
            'CF',
            'CG',
            'CH',
            'CI',
            'CK',
            'CL',
            'CM',
            'CN',
            'CO',
            'CP',
            'CR',
            'CS',
            'CS',
            'CU',
            'CV',
            'CW',
            'CX',
            'CY',
            'CZ',
            'DD',
            'DE',
            'DG',
            'DJ',
            'DK',
            'DM',
            'DO',
            'DZ',
            'EA',
            'EC',
            'EE',
            'EG',
            'EH',
            'ER',
            'ES',
            'ET',
            'EU',
            'FI',
            'FJ',
            'FK',
            'FM',
            'FO',
            'FR',
            'FX',
            'GA',
            'GB',
            'GD',
            'GE',
            'GF',
            'GG',
            'GH',
            'GI',
            'GL',
            'GM',
            'GN',
            'GP',
            'GQ',
            'GR',
            'GS',
            'GT',
            'GU',
            'GW',
            'GY',
            'HK',
            'HM',
            'HN',
            'HR',
            'HT',
            'HU',
            'IC',
            'ID',
            'IE',
            'IL',
            'IM',
            'IN',
            'IO',
            'IQ',
            'IR',
            'IS',
            'IT',
            'JE',
            'JM',
            'JO',
            'JP',
            'KE',
            'KG',
            'KH',
            'KI',
            'KM',
            'KN',
            'KP',
            'KR',
            'KW',
            'KY',
            'KZ',
            'LA',
            'LB',
            'LC',
            'LI',
            'LK',
            'LR',
            'LS',
            'LT',
            'LU',
            'LV',
            'LY',
            'MA',
            'MC',
            'MD',
            'ME',
            'MF',
            'MG',
            'MH',
            'MK',
            'ML',
            'MM',
            'MN',
            'MO',
            'MP',
            'MQ',
            'MR',
            'MS',
            'MT',
            'MU',
            'MV',
            'MW',
            'MX',
            'MY',
            'MZ',
            'NA',
            'NC',
            'NE',
            'NF',
            'NG',
            'NI',
            'NL',
            'NO',
            'NP',
            'NR',
            'NT',
            'NU',
            'NZ',
            'OM',
            'PA',
            'PE',
            'PF',
            'PG',
            'PH',
            'PK',
            'PL',
            'PM',
            'PN',
            'PR',
            'PS',
            'PT',
            'PW',
            'PY',
            'QA',
            'RE',
            'RO',
            'RS',
            'RU',
            'RW',
            'SA',
            'SB',
            'SC',
            'SD',
            'SE',
            'SG',
            'SH',
            'SI',
            'SJ',
            'SK',
            'SL',
            'SM',
            'SN',
            'SO',
            'SR',
            'SS',
            'ST',
            'SU',
            'SV',
            'SX',
            'SY',
            'SZ',
            'TA',
            'TC',
            'TD',
            'TF',
            'TG',
            'TH',
            'TJ',
            'TK',
            'TL',
            'TM',
            'TN',
            'TO',
            'TR',
            'TT',
            'TV',
            'TW',
            'TZ',
            'UA',
            'UG',
            'UM',
            'US',
            'UY',
            'UZ',
            'VA',
            'VC',
            'VE',
            'VG',
            'VI',
            'VN',
            'VU',
            'WF',
            'WS',
            'YE',
            'YT',
            'YU',
            'ZA',
            'ZM',
            'ZR',
            'ZW',
          ],
        }
      },
      {},
    ],
    '../node_modules/faker/lib/finance.js': [
      function(require, module, exports) {
        /**
         * @namespace faker.finance
         */
        var Finance = function(faker) {
          var ibanLib = require('./iban')
          var Helpers = faker.helpers,
            self = this

          /**
           * account
           *
           * @method faker.finance.account
           * @param {number} length
           */
          self.account = function(length) {
            length = length || 8

            var template = ''

            for (var i = 0; i < length; i++) {
              template = template + '#'
            }
            length = null
            return Helpers.replaceSymbolWithNumber(template)
          }

          /**
           * accountName
           *
           * @method faker.finance.accountName
           */
          self.accountName = function() {
            return [
              Helpers.randomize(faker.definitions.finance.account_type),
              'Account',
            ].join(' ')
          }

          /**
           * mask
           *
           * @method faker.finance.mask
           * @param {number} length
           * @param {boolean} parens
           * @param {boolean} ellipsis
           */
          self.mask = function(length, parens, ellipsis) {
            //set defaults
            length =
              length == 0 || !length || typeof length == 'undefined'
                ? 4
                : length
            parens = parens === null ? true : parens
            ellipsis = ellipsis === null ? true : ellipsis

            //create a template for length
            var template = ''

            for (var i = 0; i < length; i++) {
              template = template + '#'
            }

            //prefix with ellipsis
            template = ellipsis ? ['...', template].join('') : template

            template = parens ? ['(', template, ')'].join('') : template

            //generate random numbers
            template = Helpers.replaceSymbolWithNumber(template)

            return template
          }

          //min and max take in minimum and maximum amounts, dec is the decimal place you want rounded to, symbol is $, €, £, etc
          //NOTE: this returns a string representation of the value, if you want a number use parseFloat and no symbol

          /**
           * amount
           *
           * @method faker.finance.amount
           * @param {number} min
           * @param {number} max
           * @param {number} dec
           * @param {string} symbol
           *
           * @return {string}
           */
          self.amount = function(min, max, dec, symbol) {
            min = min || 0
            max = max || 1000
            dec = dec === undefined ? 2 : dec
            symbol = symbol || ''
            var randValue = faker.random.number({
              max: max,
              min: min,
              precision: Math.pow(10, -dec),
            })

            return symbol + randValue.toFixed(dec)
          }

          /**
           * transactionType
           *
           * @method faker.finance.transactionType
           */
          self.transactionType = function() {
            return Helpers.randomize(
              faker.definitions.finance.transaction_type,
            )
          }

          /**
           * currencyCode
           *
           * @method faker.finance.currencyCode
           */
          self.currencyCode = function() {
            return faker.random.objectElement(
              faker.definitions.finance.currency,
            )['code']
          }

          /**
           * currencyName
           *
           * @method faker.finance.currencyName
           */
          self.currencyName = function() {
            return faker.random.objectElement(
              faker.definitions.finance.currency,
              'key',
            )
          }

          /**
           * currencySymbol
           *
           * @method faker.finance.currencySymbol
           */
          self.currencySymbol = function() {
            var symbol

            while (!symbol) {
              symbol = faker.random.objectElement(
                faker.definitions.finance.currency,
              )['symbol']
            }
            return symbol
          }

          /**
           * bitcoinAddress
           *
           * @method  faker.finance.bitcoinAddress
           */
          self.bitcoinAddress = function() {
            var addressLength = faker.random.number({ min: 27, max: 34 })

            var address = faker.random.arrayElement(['1', '3'])

            for (var i = 0; i < addressLength - 1; i++)
              address += faker.random.alphaNumeric().toUpperCase()

            return address
          }

          /**
           * iban
           *
           * @method  faker.finance.iban
           */
          self.iban = function(formatted) {
            var ibanFormat = faker.random.arrayElement(ibanLib.formats)
            var s = ''
            var count = 0
            for (var b = 0; b < ibanFormat.bban.length; b++) {
              var bban = ibanFormat.bban[b]
              var c = bban.count
              count += bban.count
              while (c > 0) {
                if (bban.type == 'a') {
                  s += faker.random.arrayElement(ibanLib.alpha)
                } else if (bban.type == 'c') {
                  if (faker.random.number(100) < 80) {
                    s += faker.random.number(9)
                  } else {
                    s += faker.random.arrayElement(ibanLib.alpha)
                  }
                } else {
                  if (c >= 3 && faker.random.number(100) < 30) {
                    if (faker.random.boolean()) {
                      s += faker.random.arrayElement(ibanLib.pattern100)
                      c -= 2
                    } else {
                      s += faker.random.arrayElement(ibanLib.pattern10)
                      c--
                    }
                  } else {
                    s += faker.random.number(9)
                  }
                }
                c--
              }
              s = s.substring(0, count)
            }
            var checksum =
              98 -
              ibanLib.mod97(
                ibanLib.toDigitString(s + ibanFormat.country + '00'),
              )
            if (checksum < 10) {
              checksum = '0' + checksum
            }
            var iban = ibanFormat.country + checksum + s
            return formatted ? iban.match(/.{1,4}/g).join(' ') : iban
          }

          /**
           * bic
           *
           * @method  faker.finance.bic
           */
          self.bic = function() {
            var vowels = ['A', 'E', 'I', 'O', 'U']
            var prob = faker.random.number(100)
            return (
              Helpers.replaceSymbols('???') +
              faker.random.arrayElement(vowels) +
              faker.random.arrayElement(ibanLib.iso3166) +
              Helpers.replaceSymbols('?') +
              '1' +
              (prob < 10
                ? Helpers.replaceSymbols(
                    '?' + faker.random.arrayElement(vowels) + '?',
                  )
                : prob < 40
                ? Helpers.replaceSymbols('###')
                : '')
            )
          }
        }

        module['exports'] = Finance
      },
      { './iban': '../node_modules/faker/lib/iban.js' },
    ],
    '../node_modules/faker/lib/image.js': [
      function(require, module, exports) {
        /**
         *
         * @namespace faker.image
         */
        var Image = function(faker) {
          var self = this

          /**
           * image
           *
           * @param {number} width
           * @param {number} height
           * @param {boolean} randomize
           * @method faker.image.image
           */
          self.image = function(width, height, randomize) {
            var categories = [
              'abstract',
              'animals',
              'business',
              'cats',
              'city',
              'food',
              'nightlife',
              'fashion',
              'people',
              'nature',
              'sports',
              'technics',
              'transport',
            ]
            return self[faker.random.arrayElement(categories)](
              width,
              height,
              randomize,
            )
          }
          /**
           * avatar
           *
           * @method faker.image.avatar
           */
          self.avatar = function() {
            return faker.internet.avatar()
          }
          /**
           * imageUrl
           *
           * @param {number} width
           * @param {number} height
           * @param {string} category
           * @param {boolean} randomize
           * @method faker.image.imageUrl
           */
          self.imageUrl = function(
            width,
            height,
            category,
            randomize,
            https,
          ) {
            var width = width || 640
            var height = height || 480
            var protocol = 'http://'
            if (typeof https !== 'undefined' && https === true) {
              protocol = 'https://'
            }
            var url = protocol + 'lorempixel.com/' + width + '/' + height
            if (typeof category !== 'undefined') {
              url += '/' + category
            }

            if (randomize) {
              url += '?' + faker.random.number()
            }

            return url
          }
          /**
           * abstract
           *
           * @param {number} width
           * @param {number} height
           * @param {boolean} randomize
           * @method faker.image.abstract
           */
          self.abstract = function(width, height, randomize) {
            return faker.image.imageUrl(
              width,
              height,
              'abstract',
              randomize,
            )
          }
          /**
           * animals
           *
           * @param {number} width
           * @param {number} height
           * @param {boolean} randomize
           * @method faker.image.animals
           */
          self.animals = function(width, height, randomize) {
            return faker.image.imageUrl(
              width,
              height,
              'animals',
              randomize,
            )
          }
          /**
           * business
           *
           * @param {number} width
           * @param {number} height
           * @param {boolean} randomize
           * @method faker.image.business
           */
          self.business = function(width, height, randomize) {
            return faker.image.imageUrl(
              width,
              height,
              'business',
              randomize,
            )
          }
          /**
           * cats
           *
           * @param {number} width
           * @param {number} height
           * @param {boolean} randomize
           * @method faker.image.cats
           */
          self.cats = function(width, height, randomize) {
            return faker.image.imageUrl(width, height, 'cats', randomize)
          }
          /**
           * city
           *
           * @param {number} width
           * @param {number} height
           * @param {boolean} randomize
           * @method faker.image.city
           */
          self.city = function(width, height, randomize) {
            return faker.image.imageUrl(width, height, 'city', randomize)
          }
          /**
           * food
           *
           * @param {number} width
           * @param {number} height
           * @param {boolean} randomize
           * @method faker.image.food
           */
          self.food = function(width, height, randomize) {
            return faker.image.imageUrl(width, height, 'food', randomize)
          }
          /**
           * nightlife
           *
           * @param {number} width
           * @param {number} height
           * @param {boolean} randomize
           * @method faker.image.nightlife
           */
          self.nightlife = function(width, height, randomize) {
            return faker.image.imageUrl(
              width,
              height,
              'nightlife',
              randomize,
            )
          }
          /**
           * fashion
           *
           * @param {number} width
           * @param {number} height
           * @param {boolean} randomize
           * @method faker.image.fashion
           */
          self.fashion = function(width, height, randomize) {
            return faker.image.imageUrl(
              width,
              height,
              'fashion',
              randomize,
            )
          }
          /**
           * people
           *
           * @param {number} width
           * @param {number} height
           * @param {boolean} randomize
           * @method faker.image.people
           */
          self.people = function(width, height, randomize) {
            return faker.image.imageUrl(width, height, 'people', randomize)
          }
          /**
           * nature
           *
           * @param {number} width
           * @param {number} height
           * @param {boolean} randomize
           * @method faker.image.nature
           */
          self.nature = function(width, height, randomize) {
            return faker.image.imageUrl(width, height, 'nature', randomize)
          }
          /**
           * sports
           *
           * @param {number} width
           * @param {number} height
           * @param {boolean} randomize
           * @method faker.image.sports
           */
          self.sports = function(width, height, randomize) {
            return faker.image.imageUrl(width, height, 'sports', randomize)
          }
          /**
           * technics
           *
           * @param {number} width
           * @param {number} height
           * @param {boolean} randomize
           * @method faker.image.technics
           */
          self.technics = function(width, height, randomize) {
            return faker.image.imageUrl(
              width,
              height,
              'technics',
              randomize,
            )
          }
          /**
           * transport
           *
           * @param {number} width
           * @param {number} height
           * @param {boolean} randomize
           * @method faker.image.transport
           */
          self.transport = function(width, height, randomize) {
            return faker.image.imageUrl(
              width,
              height,
              'transport',
              randomize,
            )
          }
          /**
           * dataUri
           *
           * @param {number} width
           * @param {number} height
           * @method faker.image.dataurl
           */
          self.dataUri = function(width, height) {
            var rawPrefix = 'data:image/svg+xml;charset=UTF-8,'
            var svgString =
              '<svg xmlns="http://www.w3.org/2000/svg" version="1.1" baseProfile="full" width="' +
              width +
              '" height="' +
              height +
              '"> <rect width="100%" height="100%" fill="grey"/>  <text x="0" y="20" font-size="20" text-anchor="start" fill="white">' +
              width +
              'x' +
              height +
              '</text> </svg>'
            return rawPrefix + encodeURIComponent(svgString)
          }
        }

        module['exports'] = Image
      },
      {},
    ],
    '../node_modules/faker/lib/lorem.js': [
      function(require, module, exports) {
        /**
         *
         * @namespace faker.lorem
         */
        var Lorem = function(faker) {
          var self = this
          var Helpers = faker.helpers

          /**
           * word
           *
           * @method faker.lorem.word
           * @param {number} num
           */
          self.word = function(num) {
            return faker.random.arrayElement(faker.definitions.lorem.words)
          }

          /**
           * generates a space separated list of words
           *
           * @method faker.lorem.words
           * @param {number} num number of words, defaults to 3
           */
          self.words = function(num) {
            if (typeof num == 'undefined') {
              num = 3
            }
            var words = []
            for (var i = 0; i < num; i++) {
              words.push(faker.lorem.word())
            }
            return words.join(' ')
          }

          /**
           * sentence
           *
           * @method faker.lorem.sentence
           * @param {number} wordCount defaults to a random number between 3 and 10
           * @param {number} range
           */
          self.sentence = function(wordCount, range) {
            if (typeof wordCount == 'undefined') {
              wordCount = faker.random.number({ min: 3, max: 10 })
            }
            // if (typeof range == 'undefined') { range = 7; }

            // strange issue with the node_min_test failing for captialize, please fix and add faker.lorem.back
            //return  faker.lorem.words(wordCount + Helpers.randomNumber(range)).join(' ').capitalize();

            var sentence = faker.lorem.words(wordCount)
            return (
              sentence.charAt(0).toUpperCase() + sentence.slice(1) + '.'
            )
          }

          /**
           * slug
           *
           * @method faker.lorem.slug
           * @param {number} wordCount number of words, defaults to 3
           */
          self.slug = function(wordCount) {
            var words = faker.lorem.words(wordCount)
            return Helpers.slugify(words)
          }

          /**
           * sentences
           *
           * @method faker.lorem.sentences
           * @param {number} sentenceCount defautls to a random number between 2 and 6
           * @param {string} separator defaults to `' '`
           */
          self.sentences = function(sentenceCount, separator) {
            if (typeof sentenceCount === 'undefined') {
              sentenceCount = faker.random.number({ min: 2, max: 6 })
            }
            if (typeof separator == 'undefined') {
              separator = ' '
            }
            var sentences = []
            for (sentenceCount; sentenceCount > 0; sentenceCount--) {
              sentences.push(faker.lorem.sentence())
            }
            return sentences.join(separator)
          }

          /**
           * paragraph
           *
           * @method faker.lorem.paragraph
           * @param {number} sentenceCount defaults to 3
           */
          self.paragraph = function(sentenceCount) {
            if (typeof sentenceCount == 'undefined') {
              sentenceCount = 3
            }
            return faker.lorem.sentences(
              sentenceCount + faker.random.number(3),
            )
          }

          /**
           * paragraphs
           *
           * @method faker.lorem.paragraphs
           * @param {number} paragraphCount defaults to 3
           * @param {string} separator defaults to `'\n \r'`
           */
          self.paragraphs = function(paragraphCount, separator) {
            if (typeof separator === 'undefined') {
              separator = '\n \r'
            }
            if (typeof paragraphCount == 'undefined') {
              paragraphCount = 3
            }
            var paragraphs = []
            for (paragraphCount; paragraphCount > 0; paragraphCount--) {
              paragraphs.push(faker.lorem.paragraph())
            }
            return paragraphs.join(separator)
          }

          /**
           * returns random text based on a random lorem method
           *
           * @method faker.lorem.text
           * @param {number} times
           */
          self.text = function loremText(times) {
            var loremMethods = [
              'lorem.word',
              'lorem.words',
              'lorem.sentence',
              'lorem.sentences',
              'lorem.paragraph',
              'lorem.paragraphs',
              'lorem.lines',
            ]
            var randomLoremMethod = faker.random.arrayElement(loremMethods)
            return faker.fake('{{' + randomLoremMethod + '}}')
          }

          /**
           * returns lines of lorem separated by `'\n'`
           *
           * @method faker.lorem.lines
           * @param {number} lineCount defaults to a random number between 1 and 5
           */
          self.lines = function lines(lineCount) {
            if (typeof lineCount === 'undefined') {
              lineCount = faker.random.number({ min: 1, max: 5 })
            }
            return faker.lorem.sentences(lineCount, '\n')
          }

          return self
        }

        module['exports'] = Lorem
      },
      {},
    ],
    '../node_modules/faker/lib/hacker.js': [
      function(require, module, exports) {
        /**
         *
         * @namespace faker.hacker
         */
        var Hacker = function(faker) {
          var self = this

          /**
           * abbreviation
           *
           * @method faker.hacker.abbreviation
           */
          self.abbreviation = function() {
            return faker.random.arrayElement(
              faker.definitions.hacker.abbreviation,
            )
          }

          /**
           * adjective
           *
           * @method faker.hacker.adjective
           */
          self.adjective = function() {
            return faker.random.arrayElement(
              faker.definitions.hacker.adjective,
            )
          }

          /**
           * noun
           *
           * @method faker.hacker.noun
           */
          self.noun = function() {
            return faker.random.arrayElement(faker.definitions.hacker.noun)
          }

          /**
           * verb
           *
           * @method faker.hacker.verb
           */
          self.verb = function() {
            return faker.random.arrayElement(faker.definitions.hacker.verb)
          }

          /**
           * ingverb
           *
           * @method faker.hacker.ingverb
           */
          self.ingverb = function() {
            return faker.random.arrayElement(
              faker.definitions.hacker.ingverb,
            )
          }

          /**
           * phrase
           *
           * @method faker.hacker.phrase
           */
          self.phrase = function() {
            var data = {
              abbreviation: self.abbreviation,
              adjective: self.adjective,
              ingverb: self.ingverb,
              noun: self.noun,
              verb: self.verb,
            }

            var phrase = faker.random.arrayElement([
              'If we {{verb}} the {{noun}}, we can get to the {{abbreviation}} {{noun}} through the {{adjective}} {{abbreviation}} {{noun}}!',
              'We need to {{verb}} the {{adjective}} {{abbreviation}} {{noun}}!',
              'Try to {{verb}} the {{abbreviation}} {{noun}}, maybe it will {{verb}} the {{adjective}} {{noun}}!',
              "You can't {{verb}} the {{noun}} without {{ingverb}} the {{adjective}} {{abbreviation}} {{noun}}!",
              'Use the {{adjective}} {{abbreviation}} {{noun}}, then you can {{verb}} the {{adjective}} {{noun}}!',
              'The {{abbreviation}} {{noun}} is down, {{verb}} the {{adjective}} {{noun}} so we can {{verb}} the {{abbreviation}} {{noun}}!',
              "{{ingverb}} the {{noun}} won't do anything, we need to {{verb}} the {{adjective}} {{abbreviation}} {{noun}}!",
              "I'll {{verb}} the {{adjective}} {{abbreviation}} {{noun}}, that should {{noun}} the {{abbreviation}} {{noun}}!",
            ])

            return faker.helpers.mustache(phrase, data)
          }

          return self
        }

        module['exports'] = Hacker
      },
      {},
    ],
    '../node_modules/faker/vendor/user-agent.js': [
      function(require, module, exports) {
        /*

Copyright (c) 2012-2014 Jeffrey Mealo

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
documentation files (the "Software"), to deal in the Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and
to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the
Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

------------------------------------------------------------------------------------------------------------------------

Based loosely on Luka Pusic's PHP Script: http://360percents.com/posts/php-random-user-agent-generator/

The license for that script is as follows:

"THE BEER-WARE LICENSE" (Revision 42):

<pusic93@gmail.com> wrote this file. As long as you retain this notice you can do whatever you want with this stuff.
If we meet some day, and you think this stuff is worth it, you can buy me a beer in return. Luka Pusic
*/

        function rnd(a, b) {
          //calling rnd() with no arguments is identical to rnd(0, 100)
          a = a || 0
          b = b || 100

          if (typeof b === 'number' && typeof a === 'number') {
            //rnd(int min, int max) returns integer between min, max
            return (function(min, max) {
              if (min > max) {
                throw new RangeError(
                  'expected min <= max; got min = ' +
                    min +
                    ', max = ' +
                    max,
                )
              }
              return Math.floor(Math.random() * (max - min + 1)) + min
            })(a, b)
          }

          if (Object.prototype.toString.call(a) === '[object Array]') {
            //returns a random element from array (a), even weighting
            return a[Math.floor(Math.random() * a.length)]
          }

          if (a && typeof a === 'object') {
            //returns a random key from the passed object; keys are weighted by the decimal probability in their value
            return (function(obj) {
              var rand = rnd(0, 100) / 100,
                min = 0,
                max = 0,
                key,
                return_val

              for (key in obj) {
                if (obj.hasOwnProperty(key)) {
                  max = obj[key] + min
                  return_val = key
                  if (rand >= min && rand <= max) {
                    break
                  }
                  min = min + obj[key]
                }
              }

              return return_val
            })(a)
          }

          throw new TypeError(
            'Invalid arguments passed to rnd. (' +
              (b ? a + ', ' + b : a) +
              ')',
          )
        }

        function randomLang() {
          return rnd([
            'AB',
            'AF',
            'AN',
            'AR',
            'AS',
            'AZ',
            'BE',
            'BG',
            'BN',
            'BO',
            'BR',
            'BS',
            'CA',
            'CE',
            'CO',
            'CS',
            'CU',
            'CY',
            'DA',
            'DE',
            'EL',
            'EN',
            'EO',
            'ES',
            'ET',
            'EU',
            'FA',
            'FI',
            'FJ',
            'FO',
            'FR',
            'FY',
            'GA',
            'GD',
            'GL',
            'GV',
            'HE',
            'HI',
            'HR',
            'HT',
            'HU',
            'HY',
            'ID',
            'IS',
            'IT',
            'JA',
            'JV',
            'KA',
            'KG',
            'KO',
            'KU',
            'KW',
            'KY',
            'LA',
            'LB',
            'LI',
            'LN',
            'LT',
            'LV',
            'MG',
            'MK',
            'MN',
            'MO',
            'MS',
            'MT',
            'MY',
            'NB',
            'NE',
            'NL',
            'NN',
            'NO',
            'OC',
            'PL',
            'PT',
            'RM',
            'RO',
            'RU',
            'SC',
            'SE',
            'SK',
            'SL',
            'SO',
            'SQ',
            'SR',
            'SV',
            'SW',
            'TK',
            'TR',
            'TY',
            'UK',
            'UR',
            'UZ',
            'VI',
            'VO',
            'YI',
            'ZH',
          ])
        }

        function randomBrowserAndOS() {
          var browser = rnd({
              chrome: 0.45132810566,
              iexplorer: 0.27477061836,
              firefox: 0.19384170608,
              safari: 0.06186781118,
              opera: 0.01574236955,
            }),
            os = {
              chrome: { win: 0.89, mac: 0.09, lin: 0.02 },
              firefox: { win: 0.83, mac: 0.16, lin: 0.01 },
              opera: { win: 0.91, mac: 0.03, lin: 0.06 },
              safari: { win: 0.04, mac: 0.96 },
              iexplorer: ['win'],
            }

          return [browser, rnd(os[browser])]
        }

        function randomProc(arch) {
          var procs = {
            lin: ['i686', 'x86_64'],
            mac: {
              Intel: 0.48,
              PPC: 0.01,
              'U; Intel': 0.48,
              'U; PPC': 0.01,
            },
            win: ['', 'WOW64', 'Win64; x64'],
          }
          return rnd(procs[arch])
        }

        function randomRevision(dots) {
          var return_val = ''
          //generate a random revision
          //dots = 2 returns .x.y where x & y are between 0 and 9
          for (var x = 0; x < dots; x++) {
            return_val += '.' + rnd(0, 9)
          }
          return return_val
        }

        var version_string = {
          net: function() {
            return [
              rnd(1, 4),
              rnd(0, 9),
              rnd(10000, 99999),
              rnd(0, 9),
            ].join('.')
          },
          nt: function() {
            return rnd(5, 6) + '.' + rnd(0, 3)
          },
          ie: function() {
            return rnd(7, 11)
          },
          trident: function() {
            return rnd(3, 7) + '.' + rnd(0, 1)
          },
          osx: function(delim) {
            return [10, rnd(5, 10), rnd(0, 9)].join(delim || '.')
          },
          chrome: function() {
            return [rnd(13, 39), 0, rnd(800, 899), 0].join('.')
          },
          presto: function() {
            return '2.9.' + rnd(160, 190)
          },
          presto2: function() {
            return rnd(10, 12) + '.00'
          },
          safari: function() {
            return rnd(531, 538) + '.' + rnd(0, 2) + '.' + rnd(0, 2)
          },
        }

        var browser = {
          firefox: function firefox(arch) {
            //https://developer.mozilla.org/en-US/docs/Gecko_user_agent_string_reference
            var firefox_ver = rnd(5, 15) + randomRevision(2),
              gecko_ver = 'Gecko/20100101 Firefox/' + firefox_ver,
              proc = randomProc(arch),
              os_ver =
                arch === 'win'
                  ? '(Windows NT ' +
                    version_string.nt() +
                    (proc ? '; ' + proc : '')
                  : arch === 'mac'
                  ? '(Macintosh; ' +
                    proc +
                    ' Mac OS X ' +
                    version_string.osx()
                  : '(X11; Linux ' + proc

            return (
              'Mozilla/5.0 ' +
              os_ver +
              '; rv:' +
              firefox_ver.slice(0, -2) +
              ') ' +
              gecko_ver
            )
          },

          iexplorer: function iexplorer() {
            var ver = version_string.ie()

            if (ver >= 11) {
              //http://msdn.microsoft.com/en-us/library/ie/hh869301(v=vs.85).aspx
              return (
                'Mozilla/5.0 (Windows NT 6.' +
                rnd(1, 3) +
                '; Trident/7.0; ' +
                rnd(['Touch; ', '']) +
                'rv:11.0) like Gecko'
              )
            }

            //http://msdn.microsoft.com/en-us/library/ie/ms537503(v=vs.85).aspx
            return (
              'Mozilla/5.0 (compatible; MSIE ' +
              ver +
              '.0; Windows NT ' +
              version_string.nt() +
              '; Trident/' +
              version_string.trident() +
              (rnd(0, 1) === 1
                ? '; .NET CLR ' + version_string.net()
                : '') +
              ')'
            )
          },

          opera: function opera(arch) {
            //http://www.opera.com/docs/history/
            var presto_ver =
                ' Presto/' +
                version_string.presto() +
                ' Version/' +
                version_string.presto2() +
                ')',
              os_ver =
                arch === 'win'
                  ? '(Windows NT ' +
                    version_string.nt() +
                    '; U; ' +
                    randomLang() +
                    presto_ver
                  : arch === 'lin'
                  ? '(X11; Linux ' +
                    randomProc(arch) +
                    '; U; ' +
                    randomLang() +
                    presto_ver
                  : '(Macintosh; Intel Mac OS X ' +
                    version_string.osx() +
                    ' U; ' +
                    randomLang() +
                    ' Presto/' +
                    version_string.presto() +
                    ' Version/' +
                    version_string.presto2() +
                    ')'

            return 'Opera/' + rnd(9, 14) + '.' + rnd(0, 99) + ' ' + os_ver
          },

          safari: function safari(arch) {
            var safari = version_string.safari(),
              ver = rnd(4, 7) + '.' + rnd(0, 1) + '.' + rnd(0, 10),
              os_ver =
                arch === 'mac'
                  ? '(Macintosh; ' +
                    randomProc('mac') +
                    ' Mac OS X ' +
                    version_string.osx('_') +
                    ' rv:' +
                    rnd(2, 6) +
                    '.0; ' +
                    randomLang() +
                    ') '
                  : '(Windows; U; Windows NT ' + version_string.nt() + ')'

            return (
              'Mozilla/5.0 ' +
              os_ver +
              'AppleWebKit/' +
              safari +
              ' (KHTML, like Gecko) Version/' +
              ver +
              ' Safari/' +
              safari
            )
          },

          chrome: function chrome(arch) {
            var safari = version_string.safari(),
              os_ver =
                arch === 'mac'
                  ? '(Macintosh; ' +
                    randomProc('mac') +
                    ' Mac OS X ' +
                    version_string.osx('_') +
                    ') '
                  : arch === 'win'
                  ? '(Windows; U; Windows NT ' + version_string.nt() + ')'
                  : '(X11; Linux ' + randomProc(arch)

            return (
              'Mozilla/5.0 ' +
              os_ver +
              ' AppleWebKit/' +
              safari +
              ' (KHTML, like Gecko) Chrome/' +
              version_string.chrome() +
              ' Safari/' +
              safari
            )
          },
        }

        exports.generate = function generate() {
          var random = randomBrowserAndOS()
          return browser[random[0]](random[1])
        }
      },
      {},
    ],
    '../node_modules/faker/lib/internet.js': [
      function(require, module, exports) {
        var random_ua = require('../vendor/user-agent')

        /**
         *
         * @namespace faker.internet
         */
        var Internet = function(faker) {
          var self = this
          /**
           * avatar
           *
           * @method faker.internet.avatar
           */
          self.avatar = function() {
            return faker.random.arrayElement(
              faker.definitions.internet.avatar_uri,
            )
          }

          self.avatar.schema = {
            description: 'Generates a URL for an avatar.',
            sampleResults: [
              'https://s3.amazonaws.com/uifaces/faces/twitter/igorgarybaldi/128.jpg',
            ],
          }

          /**
           * email
           *
           * @method faker.internet.email
           * @param {string} firstName
           * @param {string} lastName
           * @param {string} provider
           */
          self.email = function(firstName, lastName, provider) {
            provider =
              provider ||
              faker.random.arrayElement(
                faker.definitions.internet.free_email,
              )
            return (
              faker.helpers.slugify(
                faker.internet.userName(firstName, lastName),
              ) +
              '@' +
              provider
            )
          }

          self.email.schema = {
            description:
              'Generates a valid email address based on optional input criteria',
            sampleResults: ['foo.bar@gmail.com'],
            properties: {
              firstName: {
                type: 'string',
                required: false,
                description: 'The first name of the user',
              },
              lastName: {
                type: 'string',
                required: false,
                description: 'The last name of the user',
              },
              provider: {
                type: 'string',
                required: false,
                description: 'The domain of the user',
              },
            },
          }
          /**
           * exampleEmail
           *
           * @method faker.internet.exampleEmail
           * @param {string} firstName
           * @param {string} lastName
           */
          self.exampleEmail = function(firstName, lastName) {
            var provider = faker.random.arrayElement(
              faker.definitions.internet.example_email,
            )
            return self.email(firstName, lastName, provider)
          }

          /**
           * userName
           *
           * @method faker.internet.userName
           * @param {string} firstName
           * @param {string} lastName
           */
          self.userName = function(firstName, lastName) {
            var result
            firstName = firstName || faker.name.firstName()
            lastName = lastName || faker.name.lastName()
            switch (faker.random.number(2)) {
              case 0:
                result = firstName + faker.random.number(99)
                break
              case 1:
                result =
                  firstName +
                  faker.random.arrayElement(['.', '_']) +
                  lastName
                break
              case 2:
                result =
                  firstName +
                  faker.random.arrayElement(['.', '_']) +
                  lastName +
                  faker.random.number(99)
                break
            }
            result = result.toString().replace(/'/g, '')
            result = result.replace(/ /g, '')
            return result
          }

          self.userName.schema = {
            description:
              'Generates a username based on one of several patterns. The pattern is chosen randomly.',
            sampleResults: [
              'Kirstin39',
              'Kirstin.Smith',
              'Kirstin.Smith39',
              'KirstinSmith',
              'KirstinSmith39',
            ],
            properties: {
              firstName: {
                type: 'string',
                required: false,
                description: 'The first name of the user',
              },
              lastName: {
                type: 'string',
                required: false,
                description: 'The last name of the user',
              },
            },
          }

          /**
           * protocol
           *
           * @method faker.internet.protocol
           */
          self.protocol = function() {
            var protocols = ['http', 'https']
            return faker.random.arrayElement(protocols)
          }

          self.protocol.schema = {
            description: 'Randomly generates http or https',
            sampleResults: ['https', 'http'],
          }

          /**
           * url
           *
           * @method faker.internet.url
           */
          self.url = function() {
            return (
              faker.internet.protocol() +
              '://' +
              faker.internet.domainName()
            )
          }

          self.url.schema = {
            description:
              'Generates a random URL. The URL could be secure or insecure.',
            sampleResults: ['http://rashawn.name', 'https://rashawn.name'],
          }

          /**
           * domainName
           *
           * @method faker.internet.domainName
           */
          self.domainName = function() {
            return (
              faker.internet.domainWord() +
              '.' +
              faker.internet.domainSuffix()
            )
          }

          self.domainName.schema = {
            description: 'Generates a random domain name.',
            sampleResults: ['marvin.org'],
          }

          /**
           * domainSuffix
           *
           * @method faker.internet.domainSuffix
           */
          self.domainSuffix = function() {
            return faker.random.arrayElement(
              faker.definitions.internet.domain_suffix,
            )
          }

          self.domainSuffix.schema = {
            description: 'Generates a random domain suffix.',
            sampleResults: ['net'],
          }

          /**
           * domainWord
           *
           * @method faker.internet.domainWord
           */
          self.domainWord = function() {
            return faker.name
              .firstName()
              .replace(/([\\~#&*{}/:<>?|\"'])/gi, '')
              .toLowerCase()
          }

          self.domainWord.schema = {
            description: 'Generates a random domain word.',
            sampleResults: ['alyce'],
          }

          /**
           * ip
           *
           * @method faker.internet.ip
           */
          self.ip = function() {
            var randNum = function() {
              return faker.random.number(255).toFixed(0)
            }

            var result = []
            for (var i = 0; i < 4; i++) {
              result[i] = randNum()
            }

            return result.join('.')
          }

          self.ip.schema = {
            description: 'Generates a random IP.',
            sampleResults: ['97.238.241.11'],
          }

          /**
           * ipv6
           *
           * @method faker.internet.ipv6
           */
          self.ipv6 = function() {
            var randHash = function() {
              var result = ''
              for (var i = 0; i < 4; i++) {
                result += faker.random.arrayElement([
                  '0',
                  '1',
                  '2',
                  '3',
                  '4',
                  '5',
                  '6',
                  '7',
                  '8',
                  '9',
                  'a',
                  'b',
                  'c',
                  'd',
                  'e',
                  'f',
                ])
              }
              return result
            }

            var result = []
            for (var i = 0; i < 8; i++) {
              result[i] = randHash()
            }
            return result.join(':')
          }

          self.ipv6.schema = {
            description: 'Generates a random IPv6 address.',
            sampleResults: ['2001:0db8:6276:b1a7:5213:22f1:25df:c8a0'],
          }

          /**
           * userAgent
           *
           * @method faker.internet.userAgent
           */
          self.userAgent = function() {
            return random_ua.generate()
          }

          self.userAgent.schema = {
            description: 'Generates a random user agent.',
            sampleResults: [
              'Mozilla/5.0 (Macintosh; U; PPC Mac OS X 10_7_5 rv:6.0; SL) AppleWebKit/532.0.1 (KHTML, like Gecko) Version/7.1.6 Safari/532.0.1',
            ],
          }

          /**
           * color
           *
           * @method faker.internet.color
           * @param {number} baseRed255
           * @param {number} baseGreen255
           * @param {number} baseBlue255
           */
          self.color = function(baseRed255, baseGreen255, baseBlue255) {
            baseRed255 = baseRed255 || 0
            baseGreen255 = baseGreen255 || 0
            baseBlue255 = baseBlue255 || 0
            // based on awesome response : http://stackoverflow.com/questions/43044/algorithm-to-randomly-generate-an-aesthetically-pleasing-color-palette
            var red = Math.floor(
              (faker.random.number(256) + baseRed255) / 2,
            )
            var green = Math.floor(
              (faker.random.number(256) + baseGreen255) / 2,
            )
            var blue = Math.floor(
              (faker.random.number(256) + baseBlue255) / 2,
            )
            var redStr = red.toString(16)
            var greenStr = green.toString(16)
            var blueStr = blue.toString(16)
            return (
              '#' +
              (redStr.length === 1 ? '0' : '') +
              redStr +
              (greenStr.length === 1 ? '0' : '') +
              greenStr +
              (blueStr.length === 1 ? '0' : '') +
              blueStr
            )
          }

          self.color.schema = {
            description: 'Generates a random hexadecimal color.',
            sampleResults: ['#06267f'],
            properties: {
              baseRed255: {
                type: 'number',
                required: false,
                description: 'The red value. Valid values are 0 - 255.',
              },
              baseGreen255: {
                type: 'number',
                required: false,
                description: 'The green value. Valid values are 0 - 255.',
              },
              baseBlue255: {
                type: 'number',
                required: false,
                description: 'The blue value. Valid values are 0 - 255.',
              },
            },
          }

          /**
           * mac
           *
           * @method faker.internet.mac
           */
          self.mac = function() {
            var i,
              mac = ''
            for (i = 0; i < 12; i++) {
              mac += faker.random.number(15).toString(16)
              if (i % 2 == 1 && i != 11) {
                mac += ':'
              }
            }
            return mac
          }

          self.mac.schema = {
            description: 'Generates a random mac address.',
            sampleResults: ['78:06:cc:ae:b3:81'],
          }

          /**
           * password
           *
           * @method faker.internet.password
           * @param {number} len
           * @param {boolean} memorable
           * @param {string} pattern
           * @param {string} prefix
           */
          self.password = function(len, memorable, pattern, prefix) {
            len = len || 15
            if (typeof memorable === 'undefined') {
              memorable = false
            }
            /*
             * password-generator ( function )
             * Copyright(c) 2011-2013 Bermi Ferrer <bermi@bermilabs.com>
             * MIT Licensed
             */
            var consonant, letter, password, vowel
            letter = /[a-zA-Z]$/
            vowel = /[aeiouAEIOU]$/
            consonant = /[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]$/
            var _password = function(length, memorable, pattern, prefix) {
              var char, n
              if (length == null) {
                length = 10
              }
              if (memorable == null) {
                memorable = true
              }
              if (pattern == null) {
                pattern = /\w/
              }
              if (prefix == null) {
                prefix = ''
              }
              if (prefix.length >= length) {
                return prefix
              }
              if (memorable) {
                if (prefix.match(consonant)) {
                  pattern = vowel
                } else {
                  pattern = consonant
                }
              }
              n = faker.random.number(94) + 33
              char = String.fromCharCode(n)
              if (memorable) {
                char = char.toLowerCase()
              }
              if (!char.match(pattern)) {
                return _password(length, memorable, pattern, prefix)
              }
              return _password(
                length,
                memorable,
                pattern,
                '' + prefix + char,
              )
            }
            return _password(len, memorable, pattern, prefix)
          }

          self.password.schema = {
            description: 'Generates a random password.',
            sampleResults: ['AM7zl6Mg', 'susejofe'],
            properties: {
              length: {
                type: 'number',
                required: false,
                description: 'The number of characters in the password.',
              },
              memorable: {
                type: 'boolean',
                required: false,
                description:
                  'Whether a password should be easy to remember.',
              },
              pattern: {
                type: 'regex',
                required: false,
                description:
                  'A regex to match each character of the password against. This parameter will be negated if the memorable setting is turned on.',
              },
              prefix: {
                type: 'string',
                required: false,
                description:
                  'A value to prepend to the generated password. The prefix counts towards the length of the password.',
              },
            },
          }
        }

        module['exports'] = Internet
      },
      {
        '../vendor/user-agent':
          '../node_modules/faker/vendor/user-agent.js',
      },
    ],
    '../node_modules/faker/lib/database.js': [
      function(require, module, exports) {
        /**
         *
         * @namespace faker.database
         */
        var Database = function(faker) {
          var self = this
          /**
           * column
           *
           * @method faker.database.column
           */
          self.column = function() {
            return faker.random.arrayElement(
              faker.definitions.database.column,
            )
          }

          self.column.schema = {
            description: 'Generates a column name.',
            sampleResults: ['id', 'title', 'createdAt'],
          }

          /**
           * type
           *
           * @method faker.database.type
           */
          self.type = function() {
            return faker.random.arrayElement(
              faker.definitions.database.type,
            )
          }

          self.type.schema = {
            description: 'Generates a column type.',
            sampleResults: ['byte', 'int', 'varchar', 'timestamp'],
          }

          /**
           * collation
           *
           * @method faker.database.collation
           */
          self.collation = function() {
            return faker.random.arrayElement(
              faker.definitions.database.collation,
            )
          }

          self.collation.schema = {
            description: 'Generates a collation.',
            sampleResults: ['utf8_unicode_ci', 'utf8_bin'],
          }

          /**
           * engine
           *
           * @method faker.database.engine
           */
          self.engine = function() {
            return faker.random.arrayElement(
              faker.definitions.database.engine,
            )
          }

          self.engine.schema = {
            description: 'Generates a storage engine.',
            sampleResults: ['MyISAM', 'InnoDB'],
          }
        }

        module['exports'] = Database
      },
      {},
    ],
    '../node_modules/faker/lib/phone_number.js': [
      function(require, module, exports) {
        /**
         *
         * @namespace faker.phone
         */
        var Phone = function(faker) {
          var self = this

          /**
           * phoneNumber
           *
           * @method faker.phone.phoneNumber
           * @param {string} format
           */
          self.phoneNumber = function(format) {
            format = format || faker.phone.phoneFormats()
            return faker.helpers.replaceSymbolWithNumber(format)
          }

          // FIXME: this is strange passing in an array index.
          /**
           * phoneNumberFormat
           *
           * @method faker.phone.phoneFormatsArrayIndex
           * @param phoneFormatsArrayIndex
           */
          self.phoneNumberFormat = function(phoneFormatsArrayIndex) {
            phoneFormatsArrayIndex = phoneFormatsArrayIndex || 0
            return faker.helpers.replaceSymbolWithNumber(
              faker.definitions.phone_number.formats[
                phoneFormatsArrayIndex
              ],
            )
          }

          /**
           * phoneFormats
           *
           * @method faker.phone.phoneFormats
           */
          self.phoneFormats = function() {
            return faker.random.arrayElement(
              faker.definitions.phone_number.formats,
            )
          }

          return self
        }

        module['exports'] = Phone
      },
      {},
    ],
    '../node_modules/faker/lib/date.js': [
      function(require, module, exports) {
        /**
         *
         * @namespace faker.date
         */
        var _Date = function(faker) {
          var self = this
          /**
           * past
           *
           * @method faker.date.past
           * @param {number} years
           * @param {date} refDate
           */
          self.past = function(years, refDate) {
            var date = refDate ? new Date(Date.parse(refDate)) : new Date()
            var range = {
              min: 1000,
              max: (years || 1) * 365 * 24 * 3600 * 1000,
            }

            var past = date.getTime()
            past -= faker.random.number(range) // some time from now to N years ago, in milliseconds
            date.setTime(past)

            return date
          }

          /**
           * future
           *
           * @method faker.date.future
           * @param {number} years
           * @param {date} refDate
           */
          self.future = function(years, refDate) {
            var date = refDate ? new Date(Date.parse(refDate)) : new Date()
            var range = {
              min: 1000,
              max: (years || 1) * 365 * 24 * 3600 * 1000,
            }

            var future = date.getTime()
            future += faker.random.number(range) // some time from now to N years later, in milliseconds
            date.setTime(future)

            return date
          }

          /**
           * between
           *
           * @method faker.date.between
           * @param {date} from
           * @param {date} to
           */
          self.between = function(from, to) {
            var fromMilli = Date.parse(from)
            var dateOffset = faker.random.number(
              Date.parse(to) - fromMilli,
            )

            var newDate = new Date(fromMilli + dateOffset)

            return newDate
          }

          /**
           * recent
           *
           * @method faker.date.recent
           * @param {number} days
           */
          self.recent = function(days) {
            var date = new Date()
            var range = {
              min: 1000,
              max: (days || 1) * 24 * 3600 * 1000,
            }

            var future = date.getTime()
            future -= faker.random.number(range) // some time from now to N days ago, in milliseconds
            date.setTime(future)

            return date
          }

          /**
           * month
           *
           * @method faker.date.month
           * @param {object} options
           */
          self.month = function(options) {
            options = options || {}

            var type = 'wide'
            if (options.abbr) {
              type = 'abbr'
            }
            if (
              options.context &&
              typeof faker.definitions.date.month[type + '_context'] !==
                'undefined'
            ) {
              type += '_context'
            }

            var source = faker.definitions.date.month[type]

            return faker.random.arrayElement(source)
          }

          /**
           * weekday
           *
           * @param {object} options
           * @method faker.date.weekday
           */
          self.weekday = function(options) {
            options = options || {}

            var type = 'wide'
            if (options.abbr) {
              type = 'abbr'
            }
            if (
              options.context &&
              typeof faker.definitions.date.weekday[type + '_context'] !==
                'undefined'
            ) {
              type += '_context'
            }

            var source = faker.definitions.date.weekday[type]

            return faker.random.arrayElement(source)
          }

          return self
        }

        module['exports'] = _Date
      },
      {},
    ],
    '../node_modules/faker/lib/commerce.js': [
      function(require, module, exports) {
        /**
         *
         * @namespace faker.commerce
         */
        var Commerce = function(faker) {
          var self = this

          /**
           * color
           *
           * @method faker.commerce.color
           */
          self.color = function() {
            return faker.random.arrayElement(
              faker.definitions.commerce.color,
            )
          }

          /**
           * department
           *
           * @method faker.commerce.department
           */
          self.department = function() {
            return faker.random.arrayElement(
              faker.definitions.commerce.department,
            )
          }

          /**
           * productName
           *
           * @method faker.commerce.productName
           */
          self.productName = function() {
            return (
              faker.commerce.productAdjective() +
              ' ' +
              faker.commerce.productMaterial() +
              ' ' +
              faker.commerce.product()
            )
          }

          /**
           * price
           *
           * @method faker.commerce.price
           * @param {number} min
           * @param {number} max
           * @param {number} dec
           * @param {string} symbol
           *
           * @return {string}
           */
          self.price = function(min, max, dec, symbol) {
            min = min || 0
            max = max || 1000
            dec = dec === undefined ? 2 : dec
            symbol = symbol || ''

            if (min < 0 || max < 0) {
              return symbol + 0.0
            }

            var randValue = faker.random.number({ max: max, min: min })

            return (
              symbol +
              (
                Math.round(randValue * Math.pow(10, dec)) /
                Math.pow(10, dec)
              ).toFixed(dec)
            )
          }

          /*
  self.categories = function(num) {
      var categories = [];

      do {
          var category = faker.random.arrayElement(faker.definitions.commerce.department);
          if(categories.indexOf(category) === -1) {
              categories.push(category);
          }
      } while(categories.length < num);

      return categories;
  };

  */
          /*
  self.mergeCategories = function(categories) {
      var separator = faker.definitions.separator || " &";
      // TODO: find undefined here
      categories = categories || faker.definitions.commerce.categories;
      var commaSeparated = categories.slice(0, -1).join(', ');

      return [commaSeparated, categories[categories.length - 1]].join(separator + " ");
  };
  */

          /**
           * productAdjective
           *
           * @method faker.commerce.productAdjective
           */
          self.productAdjective = function() {
            return faker.random.arrayElement(
              faker.definitions.commerce.product_name.adjective,
            )
          }

          /**
           * productMaterial
           *
           * @method faker.commerce.productMaterial
           */
          self.productMaterial = function() {
            return faker.random.arrayElement(
              faker.definitions.commerce.product_name.material,
            )
          }

          /**
           * product
           *
           * @method faker.commerce.product
           */
          self.product = function() {
            return faker.random.arrayElement(
              faker.definitions.commerce.product_name.product,
            )
          }

          return self
        }

        module['exports'] = Commerce
      },
      {},
    ],
    '../node_modules/faker/lib/system.js': [
      function(require, module, exports) {
        // generates fake data for many computer systems properties

        /**
         *
         * @namespace faker.system
         */
        function System(faker) {
          /**
           * generates a file name with extension or optional type
           *
           * @method faker.system.fileName
           * @param {string} ext
           * @param {string} type
           */
          this.fileName = function(ext, type) {
            var str = faker.fake('{{random.words}}.{{system.fileExt}}')
            str = str.replace(/ /g, '_')
            str = str.replace(/\,/g, '_')
            str = str.replace(/\-/g, '_')
            str = str.replace(/\\/g, '_')
            str = str.replace(/\//g, '_')
            str = str.toLowerCase()
            return str
          }

          /**
           * commonFileName
           *
           * @method faker.system.commonFileName
           * @param {string} ext
           * @param {string} type
           */
          this.commonFileName = function(ext, type) {
            var str =
              faker.random.words() +
              '.' +
              (ext || faker.system.commonFileExt())
            str = str.replace(/ /g, '_')
            str = str.replace(/\,/g, '_')
            str = str.replace(/\-/g, '_')
            str = str.replace(/\\/g, '_')
            str = str.replace(/\//g, '_')
            str = str.toLowerCase()
            return str
          }

          /**
           * mimeType
           *
           * @method faker.system.mimeType
           */
          this.mimeType = function() {
            return faker.random.arrayElement(
              Object.keys(faker.definitions.system.mimeTypes),
            )
          }

          /**
           * returns a commonly used file type
           *
           * @method faker.system.commonFileType
           */
          this.commonFileType = function() {
            var types = ['video', 'audio', 'image', 'text', 'application']
            return faker.random.arrayElement(types)
          }

          /**
           * returns a commonly used file extension based on optional type
           *
           * @method faker.system.commonFileExt
           * @param {string} type
           */
          this.commonFileExt = function(type) {
            var types = [
              'application/pdf',
              'audio/mpeg',
              'audio/wav',
              'image/png',
              'image/jpeg',
              'image/gif',
              'video/mp4',
              'video/mpeg',
              'text/html',
            ]
            return faker.system.fileExt(faker.random.arrayElement(types))
          }

          /**
           * returns any file type available as mime-type
           *
           * @method faker.system.fileType
           */
          this.fileType = function() {
            var types = []
            var mimes = faker.definitions.system.mimeTypes
            Object.keys(mimes).forEach(function(m) {
              var parts = m.split('/')
              if (types.indexOf(parts[0]) === -1) {
                types.push(parts[0])
              }
            })
            return faker.random.arrayElement(types)
          }

          /**
           * fileExt
           *
           * @method faker.system.fileExt
           * @param {string} mimeType
           */
          this.fileExt = function(mimeType) {
            var exts = []
            var mimes = faker.definitions.system.mimeTypes

            // get specific ext by mime-type
            if (typeof mimes[mimeType] === 'object') {
              return faker.random.arrayElement(mimes[mimeType].extensions)
            }

            // reduce mime-types to those with file-extensions
            Object.keys(mimes).forEach(function(m) {
              if (mimes[m].extensions instanceof Array) {
                mimes[m].extensions.forEach(function(ext) {
                  exts.push(ext)
                })
              }
            })
            return faker.random.arrayElement(exts)
          }

          /**
           * not yet implemented
           *
           * @method faker.system.directoryPath
           */
          this.directoryPath = function() {
            // TODO
          }

          /**
           * not yet implemented
           *
           * @method faker.system.filePath
           */
          this.filePath = function() {
            // TODO
          }

          /**
           * semver
           *
           * @method faker.system.semver
           */
          this.semver = function() {
            return [
              faker.random.number(9),
              faker.random.number(9),
              faker.random.number(9),
            ].join('.')
          }
        }

        module['exports'] = System
      },
      {},
    ],
    '../node_modules/faker/lib/index.js': [
      function(require, module, exports) {
        /*

   this index.js file is used for including the faker library as a CommonJS module, instead of a bundle

   you can include the faker library into your existing node.js application by requiring the entire /faker directory

    var faker = require(./faker);
    var randomName = faker.name.findName();

   you can also simply include the "faker.js" file which is the auto-generated bundled version of the faker library

    var faker = require(./customAppPath/faker);
    var randomName = faker.name.findName();


  if you plan on modifying the faker library you should be performing your changes in the /lib/ directory

*/

        /**
         *
         * @namespace faker
         */
        function Faker(opts) {
          var self = this

          opts = opts || {}

          // assign options
          var locales = self.locales || opts.locales || {}
          var locale = self.locale || opts.locale || 'en'
          var localeFallback =
            self.localeFallback || opts.localeFallback || 'en'

          self.locales = locales
          self.locale = locale
          self.localeFallback = localeFallback

          self.definitions = {}

          function bindAll(obj) {
            Object.keys(obj).forEach(function(meth) {
              if (typeof obj[meth] === 'function') {
                obj[meth] = obj[meth].bind(obj)
              }
            })
            return obj
          }

          var Fake = require('./fake')
          self.fake = new Fake(self).fake

          var Random = require('./random')
          self.random = bindAll(new Random(self))

          var Helpers = require('./helpers')
          self.helpers = new Helpers(self)

          var Name = require('./name')
          self.name = bindAll(new Name(self))

          var Address = require('./address')
          self.address = bindAll(new Address(self))

          var Company = require('./company')
          self.company = bindAll(new Company(self))

          var Finance = require('./finance')
          self.finance = bindAll(new Finance(self))

          var Image = require('./image')
          self.image = bindAll(new Image(self))

          var Lorem = require('./lorem')
          self.lorem = bindAll(new Lorem(self))

          var Hacker = require('./hacker')
          self.hacker = bindAll(new Hacker(self))

          var Internet = require('./internet')
          self.internet = bindAll(new Internet(self))

          var Database = require('./database')
          self.database = bindAll(new Database(self))

          var Phone = require('./phone_number')
          self.phone = bindAll(new Phone(self))

          var _Date = require('./date')
          self.date = bindAll(new _Date(self))

          var Commerce = require('./commerce')
          self.commerce = bindAll(new Commerce(self))

          var System = require('./system')
          self.system = bindAll(new System(self))

          var _definitions = {
            name: [
              'first_name',
              'last_name',
              'prefix',
              'suffix',
              'title',
              'male_first_name',
              'female_first_name',
              'male_middle_name',
              'female_middle_name',
              'male_last_name',
              'female_last_name',
            ],
            address: [
              'city_prefix',
              'city_suffix',
              'street_suffix',
              'county',
              'country',
              'country_code',
              'state',
              'state_abbr',
              'street_prefix',
              'postcode',
            ],
            company: [
              'adjective',
              'noun',
              'descriptor',
              'bs_adjective',
              'bs_noun',
              'bs_verb',
              'suffix',
            ],
            lorem: ['words'],
            hacker: [
              'abbreviation',
              'adjective',
              'noun',
              'verb',
              'ingverb',
            ],
            phone_number: ['formats'],
            finance: [
              'account_type',
              'transaction_type',
              'currency',
              'iban',
            ],
            internet: [
              'avatar_uri',
              'domain_suffix',
              'free_email',
              'example_email',
              'password',
            ],
            commerce: [
              'color',
              'department',
              'product_name',
              'price',
              'categories',
            ],
            database: ['collation', 'column', 'engine', 'type'],
            system: ['mimeTypes'],
            date: ['month', 'weekday'],
            title: '',
            separator: '',
          }

          // Create a Getter for all definitions.foo.bar properties
          Object.keys(_definitions).forEach(function(d) {
            if (typeof self.definitions[d] === 'undefined') {
              self.definitions[d] = {}
            }

            if (typeof _definitions[d] === 'string') {
              self.definitions[d] = _definitions[d]
              return
            }

            _definitions[d].forEach(function(p) {
              Object.defineProperty(self.definitions[d], p, {
                get: function() {
                  if (
                    typeof self.locales[self.locale][d] === 'undefined' ||
                    typeof self.locales[self.locale][d][p] === 'undefined'
                  ) {
                    // certain localization sets contain less data then others.
                    // in the case of a missing definition, use the default localeFallback to substitute the missing set data
                    // throw new Error('unknown property ' + d + p)
                    return self.locales[localeFallback][d][p]
                  } else {
                    // return localized data
                    return self.locales[self.locale][d][p]
                  }
                },
              })
            })
          })
        }

        Faker.prototype.seed = function(value) {
          var Random = require('./random')
          this.seedValue = value
          this.random = new Random(this, this.seedValue)
        }
        module['exports'] = Faker
      },
      {
        './fake': '../node_modules/faker/lib/fake.js',
        './random': '../node_modules/faker/lib/random.js',
        './helpers': '../node_modules/faker/lib/helpers.js',
        './name': '../node_modules/faker/lib/name.js',
        './address': '../node_modules/faker/lib/address.js',
        './company': '../node_modules/faker/lib/company.js',
        './finance': '../node_modules/faker/lib/finance.js',
        './image': '../node_modules/faker/lib/image.js',
        './lorem': '../node_modules/faker/lib/lorem.js',
        './hacker': '../node_modules/faker/lib/hacker.js',
        './internet': '../node_modules/faker/lib/internet.js',
        './database': '../node_modules/faker/lib/database.js',
        './phone_number': '../node_modules/faker/lib/phone_number.js',
        './date': '../node_modules/faker/lib/date.js',
        './commerce': '../node_modules/faker/lib/commerce.js',
        './system': '../node_modules/faker/lib/system.js',
      },
    ],
    '../node_modules/faker/lib/locales/az/address/country.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Akrotiri və Dekeliya',
          'Aland adaları',
          'Albaniya',
          'Almaniya',
          'Amerika Samoası',
          'Andorra',
          'Angilya',
          'Anqola',
          'Antiqua və Barbuda',
          'Argentina',
          'Aruba',
          'Avstraliya',
          'Avstriya',
          'Azərbaycan',
          'Baham adaları',
          'Banqladeş',
          'Barbados',
          'Belçika',
          'Beliz',
          'Belarus',
          'Benin',
          'Bermud adaları',
          'BƏƏ',
          'ABŞ',
          'Boliviya',
          'Bolqarıstan',
          'Bosniya və Herseqovina',
          'Botsvana',
          'Böyük Britaniya',
          'Braziliya',
          'Bruney',
          'Burkina-Faso',
          'Burundi',
          'Butan',
          'Bəhreyn',
          'Cersi',
          'Cəbəli-Tariq',
          'CAR',
          'Cənubi Sudan',
          'Cənubi Koreya',
          'Cibuti',
          'Çad',
          'Çexiya',
          'Monteneqro',
          'Çili',
          'ÇXR',
          'Danimarka',
          'Dominika',
          'Dominikan Respublikası',
          'Efiopiya',
          'Ekvador',
          'Ekvatorial Qvineya',
          'Eritreya',
          'Ermənistan',
          'Estoniya',
          'Əfqanıstan',
          'Əlcəzair',
          'Farer adaları',
          'Fələstin Dövləti',
          'Fici',
          'Kot-d’İvuar',
          'Filippin',
          'Finlandiya',
          'Folklend adaları',
          'Fransa',
          'Fransa Polineziyası',
          'Gernsi',
          'Gürcüstan',
          'Haiti',
          'Hindistan',
          'Honduras',
          'Honkonq',
          'Xorvatiya',
          'İndoneziya',
          'İordaniya',
          'İraq',
          'İran',
          'İrlandiya',
          'İslandiya',
          'İspaniya',
          'İsrail',
          'İsveç',
          'İsveçrə',
          'İtaliya',
          'Kabo-Verde',
          'Kamboca',
          'Kamerun',
          'Kanada',
          'Kayman adaları',
          'Keniya',
          'Kipr',
          'Kiribati',
          'Kokos adaları',
          'Kolumbiya',
          'Komor adaları',
          'Konqo Respublikası',
          'KDR',
          'Kosovo',
          'Kosta-Rika',
          'Kuba',
          'Kuk adaları',
          'Küveyt',
          'Qabon',
          'Qambiya',
          'Qana',
          'Qətər',
          'Qayana',
          'Qazaxıstan',
          'Qərbi Sahara',
          'Qırğızıstan',
          'Qrenada',
          'Qrenlandiya',
          'Quam',
          'Qvatemala',
          'Qvineya',
          'Qvineya-Bisau',
          'Laos',
          'Latviya',
          'Lesoto',
          'Liberiya',
          'Litva',
          'Livan',
          'Liviya',
          'Lixtenşteyn',
          'Lüksemburq',
          'Macarıstan',
          'Madaqaskar',
          'Makao',
          'Makedoniya',
          'Malavi',
          'Malayziya',
          'Maldiv adaları',
          'Mali',
          'Malta',
          'Marşall adaları',
          'Mavriki',
          'Mavritaniya',
          'Mayotta',
          'Meksika',
          'Men adası',
          'Mərakeş',
          'MAR',
          'Mikroneziya',
          'Milad adası',
          'Misir',
          'Myanma',
          'Moldova',
          'Monako',
          'Monqolustan',
          'Montserrat',
          'Mozambik',
          'Müqəddəs Yelena, Askenson və Tristan-da-Kunya adaları',
          'Namibiya',
          'Nauru',
          'Nepal',
          'Niderland',
          'Niderland Antil adaları',
          'Niger',
          'Nigeriya',
          'Nikaraqua',
          'Niue',
          'Norfolk adası',
          'Norveç',
          'Oman',
          'Özbəkistan',
          'Pakistan',
          'Palau',
          'Panama',
          'Papua-Yeni Qvineya',
          'Paraqvay',
          'Peru',
          'Pitkern adaları',
          'Polşa',
          'Portuqaliya',
          'Prednestroviya',
          'Puerto-Riko',
          'Ruanda',
          'Rumıniya',
          'Rusiya',
          'Salvador',
          'Samoa',
          'San-Marino',
          'San-Tome və Prinsipi',
          'Seneqal',
          'Sen-Bartelemi',
          'Sent-Kits və Nevis',
          'Sent-Lüsiya',
          'Sen-Marten',
          'Sen-Pyer və Mikelon',
          'Sent-Vinsent və Qrenadina',
          'Serbiya',
          'Seyşel adaları',
          'Səudiyyə Ərəbistanı',
          'Sinqapur',
          'Slovakiya',
          'Sloveniya',
          'Solomon adaları',
          'Somali',
          'Somalilend',
          'Sudan',
          'Surinam',
          'Suriya',
          'Svazilend',
          'Syerra-Leone',
          'Şərqi Timor',
          'Şimali Marian adaları',
          'Şpisbergen və Yan-Mayen',
          'Şri-Lanka',
          'Tacikistan',
          'Tanzaniya',
          'Tailand',
          'Çin Respublikası',
          'Törks və Kaykos adaları',
          'Tokelau',
          'Tonqa',
          'Toqo',
          'Trinidad və Tobaqo',
          'Tunis',
          'Tuvalu',
          'Türkiyə',
          'Türkmənistan',
          'Ukrayna',
          'Uollis və Futuna',
          'Uqanda',
          'Uruqvay',
          'Vanuatu',
          'Vatikan',
          'Venesuela',
          'Amerika Virgin adaları',
          'Britaniya Virgin adaları',
          'Vyetnam',
          'Yamayka',
          'Yaponiya',
          'Yeni Kaledoniya',
          'Yeni Zelandiya',
          'Yəmən',
          'Yunanıstan',
          'Zambiya',
          'Zimbabve',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/az/address/building_number.js': [
      function(require, module, exports) {
        module['exports'] = ['###']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/az/address/street_suffix.js': [
      function(require, module, exports) {
        module['exports'] = [
          'küç.',
          'küçəsi',
          'prospekti',
          'pr.',
          'sahəsi',
          'sh.',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/az/address/secondary_address.js': [
      function(require, module, exports) {
        module['exports'] = ['m. ###']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/az/address/postcode.js': [
      function(require, module, exports) {
        module['exports'] = ['AZ####']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/az/address/state.js': [
      function(require, module, exports) {
        module['exports'] = []
      },
      {},
    ],
    '../node_modules/faker/lib/locales/az/address/street_title.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Abbas Fətullayev',
          'Abbas Mirzə Şərifzadə',
          'Abbas Səhhət',
          'Abdulla Şaiq',
          'Afiyəddin Cəlilov',
          'Axundov',
          'Ağa Nemətulla',
          'Ağadadaş Qurbanov',
          'Akademik Həsən Əliyev',
          'Akademik Lətif İmanov',
          'Alı Mustafayev',
          'Almas İldırım',
          'Asəf Zeynallı',
          'Asif Əsədullayev',
          'Aşıq Alı',
          'Aşıq Ələsgər',
          'Azadlıq prospekti',
          'Bakıxanov',
          'Balababa Məcidov',
          'Balaəmi Dadaşov',
          'Behbud Şaxtantinski',
          'Bəkir Çobanzadə',
          'Bəsti Bağırova',
          'Bəşir Səfəroğlu',
          'Böyük Qala',
          'Cabir Əliyev',
          'Camal Hacıəliyev',
          'Cavadxan',
          'Cavanşir',
          'Ceyhun Səlimov',
          'Ceyhunbəy Hacıbəyli',
          'Cəbiyev',
          'Cəfər Xəndan',
          'Cəfər Cabbarlı',
          'Cəlal Qurbanov',
          'Cəlil Məmmədquluzadə',
          'Çingiz Mustafayev',
          'Çobanzadə',
          'Dadaş Bünyadzadə',
          'Dağlı Yunus',
          'Dilarə Əliyeva',
          'Elçin Əzimov',
          'Eldar və Abdulla Əlibəyovlar',
          'Elxan Həsənov',
          'Elşən Mehdiyev',
          'Elşən Süleymanov',
          'Etibar Bəkirov',
          'Əbdüləzəl Dəmirçizadə',
          'Əbdülhəsən Anaplı',
          'Əbdülkərim Əlizadə',
          'Əhməd bəy Ağaoğlu',
          'Əhməd Cavad',
          'Əhməd Cəmil',
          'Əhməd Mehbalıyev',
          'Əhməd Rəcəbli',
          'Əjdər Xanbabayev',
          'Əkrəm Cəfərov',
          'Ələsgər Qayıbov',
          'Əliağa Vahid',
          'Əli Bəy Hüseynzadə',
          'Əlimərdan bəy Topçubaşov',
          'Əliyar Əliyev',
          'Əlövsət Abdulrəhimov',
          'Əlövsət Quliyev',
          'Əmir Bağırov',
          'Əsəd Əhmədov',
          'Əşrəf Yunusov',
          'Əzim Əzimzadə',
          'Əziz Əliyev',
          'Heybət Heybətov',
          'Həqiqət Rzayeva',
          'Həmid Araslı',
          'Hənifə Ələsgərova',
          'Hərbçilər',
          'Həsənoğu',
          'Həsən Seyidbəyli',
          'Hətəm Allahverdiyev',
          'Həzi Aslanov',
          'Hüsü Hacıyev',
          'Hüseynqulu Sarabski',
          'Fətəli xan Xoyski',
          'Fəzail Bayramov',
          'Fikrət Əmirov',
          'Fuad İbrahimbəyov',
          'Fuad Yusifov',
          'General Əliağa Şıxlinski',
          'Gülayə Qədirbəyova',
          'Gənclik',
          'Xaqani',
          'Xan Şuşinski',
          'Xanlar',
          'Xudu Məmmədov',
          'İbrahimpaşa Dadaşov',
          'İdris Süleymanov',
          'İlqar Abbasov',
          'İlqar İsmayılov',
          'İmran Qasımov',
          'İnqilab İsmayılov',
          'İsfəndiyar Zülalov',
          'İslam Abışov',
          'İslam Səfərli',
          'İsmayıl bəy Qutqaşınlı',
          'İsmayıl Mirzəgülov',
          'İstiqlaliyyət',
          '28 May',
          'İsgəndərov',
          'İvan Turgenev',
          'İzmir',
          'İzzət Həmidov',
          'İzzət Orucova',
          'Kamal Rəhimov',
          'Kazım Kazımzadə',
          'Kazımağa Kərimov',
          'Kərəm İsmayılov',
          'Kiçik Qala',
          'Koroğlu Rəhimov',
          'Qaçaq Nəbi',
          'Qarabağ',
          'Qədirbəyov',
          'Qəzənfər Musabəyov',
          'Qəzənfər Vəliyev',
          'Leyla Məmmədbəyova',
          'Mahmud İbrahimov',
          'Malik Məmmədov',
          'Mehdi Abbasov',
          'Mehdi Mehdizadə',
          'Məhəmməd Əmin Rəsulzadə',
          'Məhəmməd Hadi',
          'Məhəmməd Xiyabani',
          'Məhəmməd ibn Hinduşah Naxçıvani',
          'Məhsəti Gəncəvi',
          'Məmmədyarov',
          'Mərdanov qardaşları',
          'Mətləb Ağayev',
          'Məşədi Hilal',
          'Məzahir Rüstəmov',
          'Mikayıl Müşviq',
          'Mingəçevir',
          'Mirəli Qaşqay',
          'Mirəli Seyidov',
          'Mirzağa Əliyev',
          'Mirzə İbrahimov',
          'Mirzə Mənsur',
          'Mirzə Mustafayev',
          'Murtuza Muxtarov',
          'Mustafa Topçubaşov',
          'Müqtədir Aydınbəyov',
          'Müslüm Maqomayev',
          'Müzəffər Həsənov',
          'Nabat Aşurbəyova',
          'Naxçıvani',
          'Naximov',
          'Nazim İsmaylov',
          'Neapol',
          'Neftçi Qurban Abbasov',
          'Neftçilər prospekti',
          'Nəcəfbəy Vəzirov',
          'Nəcəfqulu Rəfiyev',
          'Nəriman Nərimanov',
          'Nəsirəddin Tusi',
          'Nigar Rəfibəyli',
          'Niyazi',
          'Nizami',
          'Nizami Abdullayev',
          'Nobel prospekti',
          'Novruz',
          'Novruzov qardaşları',
          'Oqtay Vəliyev',
          'Parlament',
          'Puşkin',
          'Rafiq Ağayev',
          'Ramiz Qəmbərov',
          'Rəşid Behbudov',
          'Rəşid Məcidov',
          'Ruhulla Axundov',
          'Ruslan Allahverdiyev',
          'Rüstəm Rüstəmov',
          'Tahir Bağırov',
          'Tarzan Hacı Məmmədov',
          'Tbilisi prospekti',
          'Təbriz (Bakı)',
          'Təbriz Xəlilbəyli',
          'Tofiq Məmmədov',
          'Tolstoy',
          'Sabit Orucov',
          'Sabit Rəhman',
          'Sahib Hümmətov',
          'Salatın Əsgərova',
          'Sarayevo',
          'Seyid Əzim Şirvani',
          'Seyid Şuşinski',
          'Seyidov',
          'Səməd bəy Mehmandarov',
          'Səməd Vurğun',
          'Səttar Bəhlulzadə',
          'Sona xanım Vəlixanlı',
          'Sübhi Salayev',
          'Süleyman Əhmədov',
          'Süleyman Rəhimov',
          'Süleyman Rüstəm',
          'Süleyman Sani Axundov',
          'Süleyman Vəzirov',
          'Şahin Səmədov',
          'Şamil Əzizbəyov',
          'Şamil Kamilov',
          'Şeyx Şamil',
          'Şəfayət Mehdiyev',
          'Şəmsi Bədəlbəyli',
          'Şirin Mirzəyev',
          'Şıxəli Qurbanov',
          'Şövkət Ələkbərova',
          'Ülvi Bünyadzadə',
          'Üzeyir Hacıbəyov',
          'Vasif Əliyev',
          'Vəli Məmmədov',
          'Vladislav Plotnikov',
          'Vüqar Quliyev',
          'Vunq Tau',
          'Yaqub Əliyev',
          'Yaşar Abdullayev',
          'Yaşar Əliyev',
          'Yavər Əliyev',
          'Yesenin',
          'Yəhya Hüseynov',
          'Yılmaz Axundzadə',
          'Yüsif Eyvazov',
          'Yusif Qasımov',
          'Yusif Məmmədəliyev',
          'Yusif Səfərov',
          'Yusif Vəzir Çəmənzəminli',
          'Zahid Əliyev',
          'Zahid Xəlilov',
          'Zaur Kərimov',
          'Zavod',
          'Zərgərpalan',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/az/address/city_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Ağcabədi',
          'Ağdam',
          'Ağdaş',
          'Ağdərə',
          'Ağstafa',
          'Ağsu',
          'Astara',
          'Bakı',
          'Balakən',
          'Beyləqan',
          'Bərdə',
          'Biləsuvar',
          'Cəbrayıl',
          'Cəlilabad',
          'Culfa',
          'Daşkəsən',
          'Dəliməmmədli',
          'Füzuli',
          'Gədəbəy',
          'Gəncə',
          'Goranboy',
          'Göyçay',
          'Göygöl',
          'Göytəpə',
          'Hacıqabul',
          'Horadiz',
          'Xaçmaz',
          'Xankəndi',
          'Xocalı',
          'Xocavənd',
          'Xırdalan',
          'Xızı',
          'Xudat',
          'İmişli',
          'İsmayıllı',
          'Kəlbəcər',
          'Kürdəmir',
          'Qax',
          'Qazax',
          'Qəbələ',
          'Qobustan',
          'Qovlar',
          'Quba',
          'Qubadlı',
          'Qusar',
          'Laçın',
          'Lerik',
          'Lənkəran',
          'Liman',
          'Masallı',
          'Mingəçevir',
          'Naftalan',
          'Naxçıvan (şəhər)',
          'Neftçala',
          'Oğuz',
          'Ordubad',
          'Saatlı',
          'Sabirabad',
          'Salyan',
          'Samux',
          'Siyəzən',
          'Sumqayıt',
          'Şabran',
          'Şahbuz',
          'Şamaxı',
          'Şəki',
          'Şəmkir',
          'Şərur',
          'Şirvan',
          'Şuşa',
          'Tərtər',
          'Tovuz',
          'Ucar',
          'Yardımlı',
          'Yevlax',
          'Zaqatala',
          'Zəngilan',
          'Zərdab',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/az/address/city.js': [
      function(require, module, exports) {
        module['exports'] = ['#{Address.city_name}']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/az/address/street_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          '#{street_suffix} #{Address.street_title}',
          '#{Address.street_title} #{street_suffix}',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/az/address/street_address.js': [
      function(require, module, exports) {
        module['exports'] = ['#{street_name}, #{building_number}']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/az/address/default_country.js': [
      function(require, module, exports) {
        module['exports'] = ['Azərbaycan']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/az/address/index.js': [
      function(require, module, exports) {
        var address = {}
        module['exports'] = address
        address.country = require('./country')
        address.building_number = require('./building_number')
        address.street_suffix = require('./street_suffix')
        address.secondary_address = require('./secondary_address')
        address.postcode = require('./postcode')
        address.state = require('./state')
        address.street_title = require('./street_title')
        address.city_name = require('./city_name')
        address.city = require('./city')
        address.street_name = require('./street_name')
        address.street_address = require('./street_address')
        address.default_country = require('./default_country')
      },
      {
        './country':
          '../node_modules/faker/lib/locales/az/address/country.js',
        './building_number':
          '../node_modules/faker/lib/locales/az/address/building_number.js',
        './street_suffix':
          '../node_modules/faker/lib/locales/az/address/street_suffix.js',
        './secondary_address':
          '../node_modules/faker/lib/locales/az/address/secondary_address.js',
        './postcode':
          '../node_modules/faker/lib/locales/az/address/postcode.js',
        './state': '../node_modules/faker/lib/locales/az/address/state.js',
        './street_title':
          '../node_modules/faker/lib/locales/az/address/street_title.js',
        './city_name':
          '../node_modules/faker/lib/locales/az/address/city_name.js',
        './city': '../node_modules/faker/lib/locales/az/address/city.js',
        './street_name':
          '../node_modules/faker/lib/locales/az/address/street_name.js',
        './street_address':
          '../node_modules/faker/lib/locales/az/address/street_address.js',
        './default_country':
          '../node_modules/faker/lib/locales/az/address/default_country.js',
      },
    ],
    '../node_modules/faker/lib/locales/az/internet/free_email.js': [
      function(require, module, exports) {
        module['exports'] = [
          'box.az',
          'mail.az',
          'gmail.com',
          'yahoo.com',
          'hotmail.com',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/az/internet/domain_suffix.js': [
      function(require, module, exports) {
        module['exports'] = ['com', 'az', 'com.az', 'info', 'net', 'org']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/az/internet/index.js': [
      function(require, module, exports) {
        var internet = {}
        module['exports'] = internet
        internet.free_email = require('./free_email')
        internet.domain_suffix = require('./domain_suffix')
      },
      {
        './free_email':
          '../node_modules/faker/lib/locales/az/internet/free_email.js',
        './domain_suffix':
          '../node_modules/faker/lib/locales/az/internet/domain_suffix.js',
      },
    ],
    '../node_modules/faker/lib/locales/az/name/male_first_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Anar',
          'Amid',
          'Afəl',
          'Abbas',
          'Abdulla',
          'Adil',
          'Akif',
          'Aqil',
          'Bəhram',
          'Nurlan',
          'Rafiq',
          'Tərlan',
          'Zaur',
          'Emin',
          'Emil',
          'Kamran',
          'Elnur',
          'Natiq',
          'Rəşad',
          'Rəşid',
          'Tahir',
          'Əhməd',
          'Zahir',
          'İlham',
          'İlqar',
          'Nahid',
          'Nihad',
          'Faiq',
          'İxtiyar',
          'Şəhriyar',
          'Şaiq',
          'Bəxtiyar',
          'Bəhruz',
          'Tunar',
          'Nadir',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/az/name/male_last_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Əhmədov',
          'Ələkbərov',
          'Əliyev',
          'Vəliyev',
          'Soltanov',
          'Quliyev',
          'Məmmədov',
          'Xəlilov',
          'Nəzərov',
          'Rəhimov',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/az/name/female_first_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Anna',
          'Adeliya',
          'Afaq',
          'Afət',
          'Afərim',
          'Aidə',
          'Aygün',
          'Aynur',
          'Alsu',
          'Ayan',
          'Aytən',
          'Aygül',
          'Aydan',
          'Aylin',
          'Bahar',
          'Banu',
          'Bəyaz',
          'Billurə',
          'Cansu',
          'Ceyla',
          'Damla',
          'Dəniz',
          'Diana',
          'Dilarə',
          'Ella',
          'Elza',
          'Elyanora',
          'Ellada',
          'Elvira',
          'Elnarə',
          'Esmira',
          'Estella',
          'Fatimə',
          'Fəxriyyə',
          'Fərəh',
          'Fərqanə',
          'Fidan',
          'Firuzə',
          'Gövhər',
          'Günay',
          'Gülay',
          'Gülçin',
          'Gülər',
          'Gülsüm',
          'Humay',
          'Hüriyə',
          'Hülya',
          'Jalə',
          'Jasmin',
          'Kübra',
          'Ləman',
          'Lamiyə',
          'Lalə',
          'Liliya',
          'Laura',
          'Leyla',
          'Maya',
          'Mehriban',
          'Mələk',
          'Nuray',
          'Nurgün',
          'Nərgiz',
          'Nigar',
          'Ofelya',
          'Pəri',
          'Röya',
          'Səbinə',
          'Selcan',
          'Tansu',
          'Tuba',
          'Ülviyyə',
          'Ulduz',
          'Ülkər',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/az/name/female_last_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Qasımova',
          'Əfəndiyeva',
          'Soltanova',
          'Abdullayeva',
          'Rəşidova',
          'Ələkbərova',
          'Əliyeva',
          'Tahirova',
          'Seyidova',
          'Vəsiyeva',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/az/name/prefix.js': [
      function(require, module, exports) {
        module['exports'] = []
      },
      {},
    ],
    '../node_modules/faker/lib/locales/az/name/suffix.js': [
      function(require, module, exports) {
        module['exports'] = []
      },
      {},
    ],
    '../node_modules/faker/lib/locales/az/name/name.js': [
      function(require, module, exports) {
        module['exports'] = [
          '#{male_first_name}',
          '#{male_last_name} #{male_first_name}',
          '#{male_first_name} #{male_last_name}',
          '#{female_first_name}',
          '#{female_first_name} #{female_last_name}',
          '#{female_last_name} #{female_first_name}',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/az/name/index.js': [
      function(require, module, exports) {
        var name = {}
        module['exports'] = name
        name.male_first_name = require('./male_first_name')
        name.male_last_name = require('./male_last_name')
        name.female_first_name = require('./female_first_name')
        name.female_last_name = require('./female_last_name')
        name.prefix = require('./prefix')
        name.suffix = require('./suffix')
        name.name = require('./name')
      },
      {
        './male_first_name':
          '../node_modules/faker/lib/locales/az/name/male_first_name.js',
        './male_last_name':
          '../node_modules/faker/lib/locales/az/name/male_last_name.js',
        './female_first_name':
          '../node_modules/faker/lib/locales/az/name/female_first_name.js',
        './female_last_name':
          '../node_modules/faker/lib/locales/az/name/female_last_name.js',
        './prefix': '../node_modules/faker/lib/locales/az/name/prefix.js',
        './suffix': '../node_modules/faker/lib/locales/az/name/suffix.js',
        './name': '../node_modules/faker/lib/locales/az/name/name.js',
      },
    ],
    '../node_modules/faker/lib/locales/az/phone_number/formats.js': [
      function(require, module, exports) {
        module['exports'] = ['(9##)###-##-##']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/az/phone_number/index.js': [
      function(require, module, exports) {
        var phone_number = {}
        module['exports'] = phone_number
        phone_number.formats = require('./formats')
      },
      {
        './formats':
          '../node_modules/faker/lib/locales/az/phone_number/formats.js',
      },
    ],
    '../node_modules/faker/lib/locales/az/commerce/color.js': [
      function(require, module, exports) {
        module['exports'] = [
          'ala',
          'açıq bənövşəyi',
          'ağ',
          'mavi',
          'boz',
          'bənövşəyi',
          'göy rəng',
          'gümüşü',
          'kardinal',
          'narıncı',
          'qara',
          'qırmızı',
          'qəhvəyi',
          'tünd göy',
          'tünd qırmızı',
          'xlorofil',
          'yaşıl',
          'çəhrayı',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/az/commerce/department.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Kitablar',
          'Filmlər',
          'musiqi',
          'oyunlar',
          'Elektronika',
          'Kompyuterlər',
          'Ev',
          'садинструмент',
          'Səhiyyə',
          'gözəllik',
          'Oyuncaqlar',
          'uşaq üçün',
          'Geyim',
          'Ayyaqqabı',
          'bəzək',
          'İdman',
          'turizm',
          'Avtomobil',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/az/commerce/product_name.js': [
      function(require, module, exports) {
        module['exports'] = {
          adjective: [
            'Balaca',
            'Ergonomik',
            'Kobud',
            'İntellektual',
            'Möhtəşəm',
            'İnanılmaz',
            'Fantastik',
            'Əlverişli',
            'Parlaq',
            'Mükəmməl',
          ],
          material: [
            'Polad',
            'Ağac',
            'Beton',
            'Plastik',
            'Pambıq',
            'Qranit',
            'Rezin',
          ],
          product: [
            'Stul',
            'Avtomobil',
            'Kompyuter',
            'Beret',
            'Kulon',
            'Stol',
            'Sviter',
            'Kəmər',
          ],
        }
      },
      {},
    ],
    '../node_modules/faker/lib/locales/az/commerce/index.js': [
      function(require, module, exports) {
        var commerce = {}
        module['exports'] = commerce
        commerce.color = require('./color')
        commerce.department = require('./department')
        commerce.product_name = require('./product_name')
      },
      {
        './color':
          '../node_modules/faker/lib/locales/az/commerce/color.js',
        './department':
          '../node_modules/faker/lib/locales/az/commerce/department.js',
        './product_name':
          '../node_modules/faker/lib/locales/az/commerce/product_name.js',
      },
    ],
    '../node_modules/faker/lib/locales/az/company/prefix.js': [
      function(require, module, exports) {
        module['exports'] = ['ASC', 'MMC', 'QSC']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/az/company/suffix.js': [
      function(require, module, exports) {
        module['exports'] = []
      },
      {},
    ],
    '../node_modules/faker/lib/locales/az/company/name.js': [
      function(require, module, exports) {
        module['exports'] = [
          '#{prefix} #{Name.female_first_name}',
          '#{prefix} #{Name.male_first_name}',
          '#{prefix} #{Name.male_last_name}',
          '#{prefix} #{suffix}#{suffix}',
          '#{prefix} #{suffix}#{suffix}#{suffix}',
          '#{prefix} #{Address.city_name}#{suffix}',
          '#{prefix} #{Address.city_name}#{suffix}#{suffix}',
          '#{prefix} #{Address.city_name}#{suffix}#{suffix}#{suffix}',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/az/company/index.js': [
      function(require, module, exports) {
        var company = {}
        module['exports'] = company
        company.prefix = require('./prefix')
        company.suffix = require('./suffix')
        company.name = require('./name')
      },
      {
        './prefix':
          '../node_modules/faker/lib/locales/az/company/prefix.js',
        './suffix':
          '../node_modules/faker/lib/locales/az/company/suffix.js',
        './name': '../node_modules/faker/lib/locales/az/company/name.js',
      },
    ],
    '../node_modules/faker/lib/locales/az/date/month.js': [
      function(require, module, exports) {
        // source: http://unicode.org/cldr/trac/browser/tags/release-27/common/main/ru.xml#L1734
        module['exports'] = {
          wide: [
            'yanvar',
            'fevral',
            'mart',
            'aprel',
            'may',
            'iyun',
            'iyul',
            'avqust',
            'sentyabr',
            'oktyabr',
            'noyabr',
            'dekabr',
          ],
          wide_context: [
            'января',
            'февраля',
            'марта',
            'апреля',
            'мая',
            'июня',
            'июля',
            'августа',
            'сентября',
            'октября',
            'ноября',
            'декабря',
          ],
          abbr: [
            'янв.',
            'февр.',
            'март',
            'апр.',
            'май',
            'июнь',
            'июль',
            'авг.',
            'сент.',
            'окт.',
            'нояб.',
            'дек.',
          ],
          abbr_context: [
            'янв.',
            'февр.',
            'марта',
            'апр.',
            'мая',
            'июня',
            'июля',
            'авг.',
            'сент.',
            'окт.',
            'нояб.',
            'дек.',
          ],
        }
      },
      {},
    ],
    '../node_modules/faker/lib/locales/az/date/weekday.js': [
      function(require, module, exports) {
        // source: http://unicode.org/cldr/trac/browser/tags/release-27/common/main/ru.xml#L1825
        module['exports'] = {
          wide: [
            'Bazar',
            'Bazar ertəsi',
            'Çərşənbə axşamı',
            'Çərşənbə',
            'Cümə axşamı',
            'Cümə',
            'Şənbə',
          ],
          wide_context: [
            'воскресенье',
            'понедельник',
            'вторник',
            'среда',
            'четверг',
            'пятница',
            'суббота',
          ],
          abbr: ['Ba', 'BE', 'ÇA', 'Çə', 'CA', 'Cü', 'Şə'],
          abbr_context: ['вс', 'пн', 'вт', 'ср', 'чт', 'пт', 'сб'],
        }
      },
      {},
    ],
    '../node_modules/faker/lib/locales/az/date/index.js': [
      function(require, module, exports) {
        var date = {}
        module['exports'] = date
        date.month = require('./month')
        date.weekday = require('./weekday')
      },
      {
        './month': '../node_modules/faker/lib/locales/az/date/month.js',
        './weekday':
          '../node_modules/faker/lib/locales/az/date/weekday.js',
      },
    ],
    '../node_modules/faker/lib/locales/az/index.js': [
      function(require, module, exports) {
        var az = {}
        module['exports'] = az
        az.title = 'Azerbaijani'
        az.separator = ' və '
        az.address = require('./address')
        az.internet = require('./internet')
        az.name = require('./name')
        az.phone_number = require('./phone_number')
        az.commerce = require('./commerce')
        az.company = require('./company')
        az.date = require('./date')
      },
      {
        './address':
          '../node_modules/faker/lib/locales/az/address/index.js',
        './internet':
          '../node_modules/faker/lib/locales/az/internet/index.js',
        './name': '../node_modules/faker/lib/locales/az/name/index.js',
        './phone_number':
          '../node_modules/faker/lib/locales/az/phone_number/index.js',
        './commerce':
          '../node_modules/faker/lib/locales/az/commerce/index.js',
        './company':
          '../node_modules/faker/lib/locales/az/company/index.js',
        './date': '../node_modules/faker/lib/locales/az/date/index.js',
      },
    ],
    '../node_modules/faker/lib/locales/cz/address/country.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Afghánistán',
          'Albánie',
          'Alžírsko',
          'Andorra',
          'Angola',
          'Antigua a Barbuda',
          'Argentina',
          'Arménie',
          'Austrálie',
          'Ázerbájdžán',
          'Bahamy',
          'Bahrajn',
          'Bangladéš',
          'Barbados',
          'Belgie',
          'Belize',
          'Benin',
          'Bělorusko',
          'Bhútán',
          'Bolívie',
          'Bosna a Hercegovina',
          'Botswana',
          'Brazílie',
          'Brunej',
          'Bulharsko',
          'Burkina Faso',
          'Burundi',
          'Čad',
          'Černá Hora',
          'Česko',
          'Čína',
          'Dánsko',
          'DR Kongo',
          'Dominika',
          'Dominik',
          'Džibutsko',
          'Egypt',
          'Ekvádor',
          'Eritrea',
          'Estonsko',
          'Etiopie',
          'Fidži',
          'Filipíny',
          'Finsko',
          'Francie',
          'Gabon',
          'Gambie',
          'Gruzie',
          'Německo',
          'Ghana',
          'Grenada',
          'Guatemala',
          'Guinea',
          'Guinea-Bissau',
          'Guyana',
          'Haiti',
          'Honduras',
          'Chile',
          'Chorvatsko',
          'Indie',
          'Indonésie',
          'Irák',
          'Írán',
          'Irsko',
          'Island',
          'Itálie',
          'Izrael',
          'Jamajka',
          'Japonsko',
          'Jemen',
          'Jihoaf',
          'Jižní Korea',
          'Jižní Súdán',
          'Jordánsko',
          'Kambodža',
          'Kamerun',
          'Kanada',
          'Kapverdy',
          'Katar',
          'Kazachstán',
          'Keňa',
          'Kiribati',
          'Kolumbie',
          'Komory',
          'Kongo',
          'Kostarika',
          'Kuba',
          'Kuvajt',
          'Kypr',
          'Kyrgyzstán',
          'Laos',
          'Lesotho',
          'Libanon',
          'Libérie',
          'Libye',
          'Lichtenštejnsko',
          'Litva',
          'Lotyšsko',
          'Lucembursko',
          'Madagaskar',
          'Maďarsko',
          'Makedonie',
          'Malajsie',
          'Malawi',
          'Maledivy',
          'Mali',
          'Malta',
          'Maroko',
          'Marshallovy ostrovy',
          'Mauritánie',
          'Mauricius',
          'Mexiko',
          'Mikronésie',
          'Moldavsko',
          'Monako',
          'Mongolsko',
          'Mosambik',
          'Myanmar (Barma)',
          'Namibie',
          'Nauru',
          'Nepál',
          'Niger',
          'Nigérie',
          'Nikaragua',
          'Nizozemsko',
          'Norsko',
          'Nový Zéland',
          'Omán',
          'Pákistán',
          'Palau',
          'Palestina',
          'Panama',
          'Papua-Nová Guinea',
          'Paraguay',
          'Peru',
          'Pobřeží slonoviny',
          'Polsko',
          'Portugalsko',
          'Rakousko',
          'Rovníková Guinea',
          'Rumunsko',
          'Rusko',
          'Rwanda',
          'Řecko',
          'Salvador',
          'Samoa',
          'San Marino',
          'Saúdská Arábie',
          'Senegal',
          'Severní Korea',
          'Seychely',
          'Sierra Leone',
          'Singapur',
          'Slovensko',
          'Slovinsko',
          'Srbsko',
          'Středo',
          'Somálsko',
          'Surinam',
          'Súdán',
          'Svatá Lucie',
          'Svatý Kryštof a Nevis',
          'Svatý Tomáš a Princův ostrov',
          'Svatý Vincenc a Grenadiny',
          'Svazijsko',
          'Spojené arabské emiráty',
          'Spojené království',
          'Spojené státy americké',
          'Sýrie',
          'Šalamounovy ostrovy',
          'Španělsko',
          'Srí Lanka',
          'Švédsko',
          'Švýcarsko',
          'Tádžikistán',
          'Tanzanie',
          'Thajsko',
          'Togo',
          'Tonga',
          'Trinidad a Tobago',
          'Tunisko',
          'Turecko',
          'Turkmenistán',
          'Tuvalu',
          'Uganda',
          'Ukrajina',
          'Uruguay',
          'Uzbekistán',
          'Vanuatu',
          'Vatikán',
          'Venezuela',
          'Vietnam',
          'Východní Timor',
          'Zambie',
          'Zimbabwe',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/cz/address/building_number.js': [
      function(require, module, exports) {
        module['exports'] = ['#', '##', '###']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/cz/address/secondary_address.js': [
      function(require, module, exports) {
        module['exports'] = ['Apt. ###', 'Suite ###']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/cz/address/postcode.js': [
      function(require, module, exports) {
        module['exports'] = ['#####', '### ##', '###-##']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/cz/address/state.js': [
      function(require, module, exports) {
        module['exports'] = []
      },
      {},
    ],
    '../node_modules/faker/lib/locales/cz/address/state_abbr.js': [
      function(require, module, exports) {
        module['exports'] = []
      },
      {},
    ],
    '../node_modules/faker/lib/locales/cz/address/time_zone.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Pacific/Midway',
          'Pacific/Pago_Pago',
          'Pacific/Honolulu',
          'America/Juneau',
          'America/Los_Angeles',
          'America/Tijuana',
          'America/Denver',
          'America/Phoenix',
          'America/Chihuahua',
          'America/Mazatlan',
          'America/Chicago',
          'America/Regina',
          'America/Mexico_City',
          'America/Mexico_City',
          'America/Monterrey',
          'America/Guatemala',
          'America/New_York',
          'America/Indiana/Indianapolis',
          'America/Bogota',
          'America/Lima',
          'America/Lima',
          'America/Halifax',
          'America/Caracas',
          'America/La_Paz',
          'America/Santiago',
          'America/St_Johns',
          'America/Sao_Paulo',
          'America/Argentina/Buenos_Aires',
          'America/Guyana',
          'America/Godthab',
          'Atlantic/South_Georgia',
          'Atlantic/Azores',
          'Atlantic/Cape_Verde',
          'Europe/Dublin',
          'Europe/London',
          'Europe/Lisbon',
          'Europe/London',
          'Africa/Casablanca',
          'Africa/Monrovia',
          'Etc/UTC',
          'Europe/Belgrade',
          'Europe/Bratislava',
          'Europe/Budapest',
          'Europe/Ljubljana',
          'Europe/Prague',
          'Europe/Sarajevo',
          'Europe/Skopje',
          'Europe/Warsaw',
          'Europe/Zagreb',
          'Europe/Brussels',
          'Europe/Copenhagen',
          'Europe/Madrid',
          'Europe/Paris',
          'Europe/Amsterdam',
          'Europe/Berlin',
          'Europe/Berlin',
          'Europe/Rome',
          'Europe/Stockholm',
          'Europe/Vienna',
          'Africa/Algiers',
          'Europe/Bucharest',
          'Africa/Cairo',
          'Europe/Helsinki',
          'Europe/Kiev',
          'Europe/Riga',
          'Europe/Sofia',
          'Europe/Tallinn',
          'Europe/Vilnius',
          'Europe/Athens',
          'Europe/Istanbul',
          'Europe/Minsk',
          'Asia/Jerusalem',
          'Africa/Harare',
          'Africa/Johannesburg',
          'Europe/Moscow',
          'Europe/Moscow',
          'Europe/Moscow',
          'Asia/Kuwait',
          'Asia/Riyadh',
          'Africa/Nairobi',
          'Asia/Baghdad',
          'Asia/Tehran',
          'Asia/Muscat',
          'Asia/Muscat',
          'Asia/Baku',
          'Asia/Tbilisi',
          'Asia/Yerevan',
          'Asia/Kabul',
          'Asia/Yekaterinburg',
          'Asia/Karachi',
          'Asia/Karachi',
          'Asia/Tashkent',
          'Asia/Kolkata',
          'Asia/Kolkata',
          'Asia/Kolkata',
          'Asia/Kolkata',
          'Asia/Kathmandu',
          'Asia/Dhaka',
          'Asia/Dhaka',
          'Asia/Colombo',
          'Asia/Almaty',
          'Asia/Novosibirsk',
          'Asia/Rangoon',
          'Asia/Bangkok',
          'Asia/Bangkok',
          'Asia/Jakarta',
          'Asia/Krasnoyarsk',
          'Asia/Shanghai',
          'Asia/Chongqing',
          'Asia/Hong_Kong',
          'Asia/Urumqi',
          'Asia/Kuala_Lumpur',
          'Asia/Singapore',
          'Asia/Taipei',
          'Australia/Perth',
          'Asia/Irkutsk',
          'Asia/Ulaanbaatar',
          'Asia/Seoul',
          'Asia/Tokyo',
          'Asia/Tokyo',
          'Asia/Tokyo',
          'Asia/Yakutsk',
          'Australia/Darwin',
          'Australia/Adelaide',
          'Australia/Melbourne',
          'Australia/Melbourne',
          'Australia/Sydney',
          'Australia/Brisbane',
          'Australia/Hobart',
          'Asia/Vladivostok',
          'Pacific/Guam',
          'Pacific/Port_Moresby',
          'Asia/Magadan',
          'Asia/Magadan',
          'Pacific/Noumea',
          'Pacific/Fiji',
          'Asia/Kamchatka',
          'Pacific/Majuro',
          'Pacific/Auckland',
          'Pacific/Auckland',
          'Pacific/Tongatapu',
          'Pacific/Fakaofo',
          'Pacific/Apia',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/cz/address/city_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Abertamy',
          'Adamov',
          'Andělská Hora',
          'Aš',
          'Bakov nad Jizerou',
          'Bavorov',
          'Bechyně',
          'Bečov nad Teplou',
          'Bělá nad Radbuzou',
          'Bělá pod Bezdězem',
          'Benátky nad Jizerou',
          'Benešov',
          'Benešov nad Ploučnicí',
          'Beroun',
          'Bezdružice',
          'Bílina',
          'Bílovec',
          'Blansko',
          'Blatná',
          'Blovice',
          'Blšany',
          'Bochov',
          'Bohumín',
          'Bohušovice nad Ohří',
          'Bojkovice',
          'Bor',
          'Borohrádek',
          'Borovany',
          'Boskovice',
          'Boží Dar',
          'Brandýs nad Labem-Stará Boleslav',
          'Brandýs nad Orlicí',
          'Brno',
          'Broumov',
          'Brtnice',
          'Brumov-Bylnice',
          'Bruntál',
          'Brušperk',
          'Břeclav',
          'Březnice',
          'Březová',
          'Březová nad Svitavou',
          'Břidličná',
          'Bučovice',
          'Budišov nad Budišovkou',
          'Budyně nad Ohří',
          'Buštěhrad',
          'Bystré',
          'Bystřice',
          'Bystřice nad Pernštejnem',
          'Bystřice pod Hostýnem',
          'Bzenec',
          'Chabařovice',
          'Cheb',
          'Chlumec',
          'Chlumec nad Cidlinou',
          'Choceň',
          'Chodov',
          'Chomutov',
          'Chotěboř',
          'Chrast',
          'Chrastava',
          'Chropyně',
          'Chrudim',
          'Chřibská',
          'Chvaletice',
          'Chýnov',
          'Chyše',
          'Cvikov',
          'Čáslav',
          'Čelákovice',
          'Černošice',
          'Černošín',
          'Černovice',
          'Červená Řečice',
          'Červený Kostelec',
          'Česká Kamenice',
          'Česká Lípa',
          'Česká Skalice',
          'Česká Třebová',
          'České Budějovice',
          'České Velenice',
          'Český Brod',
          'Český Dub',
          'Český Krumlov',
          'Český Těšín',
          'Dačice',
          'Dašice',
          'Děčín',
          'Desná',
          'Deštná',
          'Dobrovice',
          'Dobruška',
          'Dobřany',
          'Dobřichovice',
          'Dobříš',
          'Doksy',
          'Dolní Benešov',
          'Dolní Bousov',
          'Dolní Kounice',
          'Dolní Poustevna',
          'Domažlice',
          'Dubá',
          'Dubí',
          'Dubňany',
          'Duchcov',
          'Dvůr Králové nad Labem',
          'Františkovy Lázně',
          'Frenštát pod Radhoštěm',
          'Frýdek-Místek',
          'Frýdlant',
          'Frýdlant nad Ostravicí',
          'Fryšták',
          'Fulnek',
          'Golčův Jeníkov',
          'Habartov',
          'Habry',
          'Hanušovice',
          'Harrachov',
          'Hartmanice',
          'Havířov',
          'Havlíčkův Brod',
          'Hejnice',
          'Heřmanův Městec',
          'Hlinsko',
          'Hluboká nad Vltavou',
          'Hlučín',
          'Hluk',
          'Hodkovice nad Mohelkou',
          'Hodonín',
          'Holešov',
          'Holice',
          'Holýšov',
          'Hora Svaté Kateřiny',
          'Horažďovice',
          'Horní Benešov',
          'Horní Blatná',
          'Horní Bříza',
          'Horní Cerekev',
          'Horní Jelení',
          'Horní Jiřetín',
          'Horní Planá',
          'Horní Slavkov',
          'Horšovský Týn',
          'Hořice',
          'Hořovice',
          'Hostinné',
          'Hostivice',
          'Hostomice',
          'Hostouň',
          'Hoštka',
          'Hradec Králové',
          'Hradec nad Moravicí',
          'Hrádek',
          'Hrádek nad Nisou',
          'Hranice (okres Cheb)',
          'Hranice (okres Přerov)',
          'Hrob',
          'Hrochův Týnec',
          'Hronov',
          'Hrotovice',
          'Hroznětín',
          'Hrušovany nad Jevišovkou',
          'Hulín',
          'Humpolec',
          'Husinec',
          'Hustopeče',
          'Ivančice',
          'Ivanovice na Hané',
          'Jablonec nad Jizerou',
          'Jablonec nad Nisou',
          'Jablonné nad Orlicí',
          'Jablonné v Podještědí',
          'Jablunkov',
          'Jáchymov',
          'Janov',
          'Janovice nad Úhlavou',
          'Janské Lázně',
          'Jaroměř',
          'Jaroměřice nad Rokytnou',
          'Javorník',
          'Jemnice',
          'Jesenice (okres Rakovník)',
          'Jeseník',
          'Jevíčko',
          'Jevišovice',
          'Jičín',
          'Jihlava',
          'Jilemnice',
          'Jílové',
          'Jílové u Prahy',
          'Jindřichův Hradec',
          'Jirkov',
          'Jiříkov',
          'Jistebnice',
          'Kadaň',
          'Kamenice nad Lipou',
          'Kamenický Šenov',
          'Kaplice',
          'Kardašova Řečice',
          'Karlovy Vary',
          'Karolinka',
          'Karviná',
          'Kasejovice',
          'Kašperské Hory',
          'Kaznějov',
          'Kdyně',
          'Kelč',
          'Kladno',
          'Kladruby',
          'Klášterec nad Ohří',
          'Klatovy',
          'Klecany',
          'Klimkovice',
          'Klobouky u Brna',
          'Kojetín',
          'Kolín',
          'Konice',
          'Kopidlno',
          'Kopřivnice',
          'Koryčany',
          'Kosmonosy',
          'Kostelec na Hané',
          'Kostelec nad Černými lesy',
          'Kostelec nad Labem',
          'Kostelec nad Orlicí',
          'Košťany',
          'Kouřim',
          'Kožlany',
          'Králíky',
          'Kralovice',
          'Kralupy nad Vltavou',
          'Králův Dvůr',
          'Kraslice',
          'Krásná Hora nad Vltavou',
          'Krásná Lípa',
          'Krásné Údolí',
          'Krásno',
          'Kravaře',
          'Krnov',
          'Kroměříž',
          'Krupka',
          'Kryry',
          'Kunovice',
          'Kunštát',
          'Kuřim',
          'Kutná Hora',
          'Kyjov',
          'Kynšperk nad Ohří',
          'Lanškroun',
          'Lanžhot',
          'Lázně Bělohrad',
          'Lázně Bohdaneč',
          'Lázně Kynžvart',
          'Ledeč nad Sázavou',
          'Ledvice',
          'Letohrad',
          'Letovice',
          'Libáň',
          'Libčice nad Vltavou',
          'Liběchov',
          'Liberec',
          'Libochovice',
          'Libušín',
          'Lipník nad Bečvou',
          'Lišov',
          'Litoměřice',
          'Litomyšl',
          'Litovel',
          'Litvínov',
          'Loket',
          'Lom',
          'Lomnice nad Lužnicí',
          'Lomnice nad Popelkou',
          'Loštice',
          'Loučná pod Klínovcem',
          'Louny',
          'Lovosice',
          'Luby',
          'Lučany nad Nisou',
          'Luhačovice',
          'Luže',
          'Lysá nad Labem',
          'Manětín',
          'Mariánské Lázně',
          'Mašťov',
          'Měčín',
          'Mělník',
          'Městec Králové',
          'Město Albrechtice',
          'Město Touškov',
          'Meziboří',
          'Meziměstí',
          'Mikulášovice',
          'Mikulov',
          'Miletín',
          'Milevsko',
          'Milovice',
          'Mimoň',
          'Miroslav',
          'Mirošov',
          'Mirotice',
          'Mirovice',
          'Mladá Boleslav',
          'Mladá Vožice',
          'Mnichovice',
          'Mnichovo Hradiště',
          'Mníšek pod Brdy',
          'Modřice',
          'Mohelnice',
          'Moravská Třebová',
          'Moravské Budějovice',
          'Moravský Beroun',
          'Moravský Krumlov',
          'Morkovice-Slížany',
          'Most',
          'Mšeno',
          'Mýto',
          'Náchod',
          'Nalžovské Hory',
          'Náměšť nad Oslavou',
          'Napajedla',
          'Nasavrky',
          'Nechanice',
          'Nejdek',
          'Němčice nad Hanou',
          'Nepomuk',
          'Neratovice',
          'Netolice',
          'Neveklov',
          'Nová Bystřice',
          'Nová Paka',
          'Nová Role',
          'Nová Včelnice',
          'Nové Hrady',
          'Nové Město na Moravě',
          'Nové Město nad Metují',
          'Nové Město pod Smrkem',
          'Nové Sedlo',
          'Nové Strašecí',
          'Nový Bor',
          'Nový Bydžov',
          'Nový Jičín',
          'Nový Knín',
          'Nymburk',
          'Nýrsko',
          'Nýřany',
          'Odolena Voda',
          'Odry',
          'Olešnice',
          'Olomouc',
          'Oloví',
          'Opava',
          'Opočno',
          'Orlová',
          'Osečná',
          'Osek',
          'Oslavany',
          'Ostrava',
          'Ostrov',
          'Otrokovice',
          'Pacov',
          'Pardubice',
          'Paskov',
          'Pec pod Sněžkou',
          'Pečky',
          'Pelhřimov',
          'Petřvald',
          'Pilníkov',
          'Písek',
          'Planá',
          'Planá nad Lužnicí',
          'Plánice',
          'Plasy',
          'Plesná',
          'Plumlov',
          'Plzeň',
          'Poběžovice',
          'Počátky',
          'Podbořany',
          'Poděbrady',
          'Podivín',
          'Pohořelice',
          'Police nad Metují',
          'Polička',
          'Polná',
          'Postoloprty',
          'Potštát',
          'Prachatice',
          'Praha',
          'Proseč',
          'Prostějov',
          'Protivín',
          'Přebuz',
          'Přelouč',
          'Přerov',
          'Přeštice',
          'Příbor',
          'Příbram',
          'Přibyslav',
          'Přimda',
          'Pyšely',
          'Rabí',
          'Radnice',
          'Rájec-Jestřebí',
          'Rajhrad',
          'Rakovník',
          'Ralsko',
          'Raspenava',
          'Rejštejn',
          'Rokycany',
          'Rokytnice nad Jizerou',
          'Rokytnice v Orlických horách',
          'Ronov nad Doubravou',
          'Rosice',
          'Rotava',
          'Roudnice nad Labem',
          'Rousínov',
          'Rovensko pod Troskami',
          'Roztoky',
          'Rožďalovice',
          'Rožmberk nad Vltavou',
          'Rožmitál pod Třemšínem',
          'Rožnov pod Radhoštěm',
          'Rtyně v Podkrkonoší',
          'Rudná',
          'Rudolfov',
          'Rumburk',
          'Rychnov nad Kněžnou',
          'Rychnov u Jablonce nad Nisou',
          'Rychvald',
          'Rýmařov',
          'Řevnice',
          'Říčany',
          'Sadská',
          'Sázava',
          'Seč',
          'Sedlčany',
          'Sedlec-Prčice',
          'Sedlice',
          'Semily',
          'Sezemice',
          'Sezimovo Ústí',
          'Skalná',
          'Skuteč',
          'Slaný',
          'Slatiňany',
          'Slavičín',
          'Slavkov u Brna',
          'Slavonice',
          'Slušovice',
          'Smečno',
          'Smiřice',
          'Smržovka',
          'Soběslav',
          'Sobotka',
          'Sokolov',
          'Solnice',
          'Spálené Poříčí',
          'Staňkov',
          'Staré Město (okres Šumperk)',
          'Staré Město (okres Uherské Hradiště)',
          'Stárkov',
          'Starý Plzenec',
          'Stochov',
          'Stod',
          'Strakonice',
          'Stráž nad Nežárkou',
          'Stráž pod Ralskem',
          'Strážnice',
          'Strážov',
          'Strmilov',
          'Stříbro',
          'Studénka',
          'Suchdol nad Lužnicí',
          'Sušice',
          'Světlá nad Sázavou',
          'Svitavy',
          'Svoboda nad Úpou',
          'Svratka',
          'Šenov',
          'Šlapanice',
          'Šluknov',
          'Špindlerův Mlýn',
          'Šternberk',
          'Štětí',
          'Štíty',
          'Štramberk',
          'Šumperk',
          'Švihov',
          'Tábor',
          'Tachov',
          'Tanvald',
          'Telč',
          'Teplá',
          'Teplice',
          'Teplice nad Metují',
          'Terezín',
          'Tišnov',
          'Toužim',
          'Tovačov',
          'Trhové Sviny',
          'Trhový Štěpánov',
          'Trmice',
          'Trutnov',
          'Třebechovice pod Orebem',
          'Třebenice',
          'Třebíč',
          'Třeboň',
          'Třemošná',
          'Třemošnice',
          'Třešť',
          'Třinec',
          'Turnov',
          'Týn nad Vltavou',
          'Týnec nad Labem',
          'Týnec nad Sázavou',
          'Týniště nad Orlicí',
          'Uherské Hradiště',
          'Uherský Brod',
          'Uherský Ostroh',
          'Uhlířské Janovice',
          'Újezd u Brna',
          'Unhošť',
          'Uničov',
          'Úpice',
          'Úsov',
          'Ústí nad Labem',
          'Ústí nad Orlicí',
          'Úštěk',
          'Úterý',
          'Úvaly',
          'Valašské Klobouky',
          'Valašské Meziříčí',
          'Valtice',
          'Vamberk',
          'Varnsdorf',
          'Vejprty',
          'Velešín',
          'Velká Bíteš',
          'Velká Bystřice',
          'Velké Bílovice',
          'Velké Hamry',
          'Velké Meziříčí',
          'Velké Opatovice',
          'Velké Pavlovice',
          'Velký Šenov',
          'Veltrusy',
          'Velvary',
          'Verneřice',
          'Veselí nad Lužnicí',
          'Veselí nad Moravou',
          'Vidnava',
          'Vimperk',
          'Vítkov',
          'Vizovice',
          'Vlachovo Březí',
          'Vlašim',
          'Vodňany',
          'Volary',
          'Volyně',
          'Votice',
          'Vracov',
          'Vratimov',
          'Vrbno pod Pradědem',
          'Vrchlabí',
          'Vroutek',
          'Vsetín',
          'Všeruby',
          'Výsluní',
          'Vysoké Mýto',
          'Vysoké nad Jizerou',
          'Vysoké Veselí',
          'Vyškov',
          'Vyšší Brod',
          'Zábřeh',
          'Zákupy',
          'Zásmuky',
          'Zbiroh',
          'Zbýšov',
          'Zdice',
          'Zlaté Hory',
          'Zlín',
          'Zliv',
          'Znojmo',
          'Zruč nad Sázavou',
          'Zubří',
          'Žacléř',
          'Žamberk',
          'Žandov',
          'Žatec',
          'Ždánice',
          'Žďár nad Sázavou',
          'Ždírec nad Doubravou',
          'Žebrák',
          'Železná Ruda',
          'Železnice',
          'Železný Brod',
          'Židlochovice',
          'Žirovnice',
          'Žlutice',
          'Žulová',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/cz/address/city.js': [
      function(require, module, exports) {
        module['exports'] = ['#{city_name}']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/cz/address/street.js': [
      function(require, module, exports) {
        module['exports'] = [
          '17. Listopadu',
          '17. Listopadu',
          '28. Pluku',
          '28. Října',
          '28. Října',
          '5. Května',
          '5. Května',
          '5. Máje',
          '7. Května',
          '8. Listopadu',
          '9. Května',
          'Achátová',
          'Adamova',
          'Adamovská',
          'Adélčina',
          'Africká',
          'Akademická',
          'Aksamitova',
          'Akátová',
          'Alabastrová',
          'Albertov',
          'Albrechtická',
          'Albánská',
          'Albíny Hochové',
          'Aldašínská',
          'Alej Českých Exulantů',
          'Aleny Santarové',
          'Aloisovská',
          'Aloisovská',
          'Aloisovská',
          'Altajská',
          'Alšovo Nábř.',
          'Alšovo Nábřeží',
          'Alšovy Sady',
          'Alžírská',
          'Ambrožova',
          'Americká',
          'Ametystová',
          'Amforová',
          'Amortova',
          'Ampérova',
          'Amurská',
          'Anastázova',
          'Anderleho',
          'Andersenova',
          'Andrštova',
          'Andělova',
          'Anenská',
          'Anenské Nám.',
          'Anenské Náměstí',
          'Anežky Malé',
          'Anežská',
          'Angelovova',
          'Anglická',
          'Angolská',
          'Anhaltova',
          'Ankarská',
          'Anny Drabíkové',
          'Anny Letenské',
          'Anny Rybníčkové',
          'Anny Čížkové',
          'Anny Čížkové',
          'Antala Staška',
          'Antonína Hodného',
          'Antonína Čermáka',
          'Antonínská',
          'Anýzová',
          'Apolinářská',
          'Arabská',
          'Aranžérská',
          'Arbesovo Nám.',
          'Arbesovo Náměstí',
          'Archangelská',
          'Archeologická',
          'Archimédova',
          'Archivní',
          'Argentinská',
          'Aristotelova',
          'Arkalycká',
          'Armádní',
          'Armádního Sboru',
          'Armády',
          'Arménská',
          'Arnošta Valenty',
          'Astlova',
          'Athénská',
          'Atletická',
          'Aubrechtové',
          'Augustinova',
          'Augustova',
          'Austova',
          'Aviatická',
          'Axmanova',
          'Azalková',
          'Azuritová',
          'Ašská',
          'Baarova',
          'Babická',
          'Babiččina',
          'Babočková',
          'Babská',
          'Babylonská',
          'Babákova',
          'Bachmačské Nám.',
          'Bachmačské Náměstí',
          'Bachova',
          'Bacháčkova',
          'Badeniho',
          'Badeniho',
          'Bajgarova',
          'Bajkalská',
          'Bajkonurská',
          'Bakalářská',
          'Bakovská',
          'Bakurinova',
          'Balabánova',
          'Balbínova',
          'Banskobystrická',
          'Baranova',
          'Barchovická',
          'Barešova',
          'Barrandova',
          'Barrandovská',
          'Bartolomějská',
          'Bartoňkova',
          'Bartoňova',
          'Bartoškova',
          'Bartoškova',
          'Bartoškova',
          'Bartákova',
          'Bartůňkova',
          'Barunčina',
          'Barvířská',
          'Barákova',
          'Basilejské Nám.',
          'Basilejské Náměstí',
          'Bassova',
          'Batelovská',
          'Batličkova',
          'Bavorovská',
          'Bavorská',
          'Bazalková',
          'Bazovského',
          'Bačetínská',
          'Baňská',
          'Baškirská',
          'Bašteckého',
          'Baštýřská',
          'Bažantní',
          'Beaufortova',
          'Bechlínská',
          'Bechyňova',
          'Bechyňská',
          'Beckovská',
          'Bedlová',
          'Bednářská',
          'Bedrnova',
          'Bedřichovská',
          'Beethovenova',
          'Beldova',
          'Belgická',
          'Bellova',
          'Bellušova',
          'Bendlova',
          'Bendova',
          'Benecká',
          'Benediktská',
          'Benešovská',
          'Benická',
          'Benkova',
          'Benákova',
          'Benátská',
          'Benáčanova',
          'Beníškové',
          'Beranových',
          'Bergerova',
          'Bergmanova',
          'Berkovská',
          'Berlínská',
          'Bermanova',
          'Bernartická',
          'Bernolákova',
          'Berounská',
          'Bertrámová',
          'Berylová',
          'Besední',
          'Beskydská',
          'Betlémská',
          'Betlémské Nám.',
          'Betlémské Náměstí',
          'Betáňská',
          'Bezdrevská',
          'Bezděkovská',
          'Bezinková',
          'Bezová',
          'Bezprašná',
          'Bečovská',
          'Bečvářova',
          'Bečvářská',
          'Bečvářská',
          'Beřkovická',
          'Bešťákova',
          'Bieblova',
          'Binarova',
          'Biskupcova',
          'Biskupská',
          'Biskupský Dvůr',
          'Blachutova',
          'Blahníkova',
          'Blahoslavova',
          'Blanická',
          'Blatenská',
          'Blatnická',
          'Blatovská',
          'Blatská',
          'Blattného',
          'Blažimská',
          'Blažkova',
          'Blažíčkova',
          'Blešnovská',
          'Blodkova',
          'Bludovická',
          'Blériotova',
          'Blšanecká',
          'Bobkova',
          'Bochovská',
          'Bodláková',
          'Bohdalec',
          'Bohdalec',
          'Bohdalecká',
          'Bohdalecká',
          'Bohdanečská',
          'Bohdašínská',
          'Bohnická',
          'Bohrova',
          'Bohumínská',
          'Bohuslava Martinů',
          'Bohuslava Martinů',
          'Bohuslava Ze Švamberka',
          'Bohuslavická',
          'Bohušovická',
          'Bohušovická',
          'Boháčova',
          'Bohúňova',
          'Bojanovická',
          'Bojasova',
          'Bojetická',
          'Boješická',
          'Bojkovická',
          'Bojovská',
          'Bojínková',
          'Bojčenkova',
          'Bolebořská',
          'Boleratická',
          'Boleslavova',
          'Boleslavská',
          'Boletická',
          'Bolevecká',
          'Bolinská',
          'Boloňská',
          'Bolzanova',
          'Bolívarova',
          'Borecká',
          'Borečkova',
          'Borodinská',
          'Borotínská',
          'Borovanská',
          'Borovanského',
          'Borovnická',
          'Borovská',
          'Borová',
          'Borošova',
          'Borská',
          'Borského',
          'Boršov',
          'Boršovská',
          'Borůvková',
          'Boseňská',
          'Botevova',
          'Botičská',
          'Botičská',
          'Boudova',
          'Bousovská',
          'Boučkova',
          'Bouřilova',
          'Boušova',
          'Bozděchova',
          'Boční I',
          'Boční Ii',
          'Bořanovická',
          'Bořetická',
          'Bořetínská',
          'Bořivojova',
          'Bořivojova',
          'Boříkova',
          'Bošická',
          'Bošilecká',
          'Bošínská',
          'Božanovská',
          'Božecká',
          'Božejovická',
          'Boženy Hofmeisterové',
          'Boženy Jandlové',
          'Boženy Němcové',
          'Boženy Němcové',
          'Boženy Stárkové',
          'Božetická',
          'Božetěchova',
          'Božkova',
          'Božkovská',
          'Božídarská',
          'Brabcova',
          'Bramboříková',
          'Branaldova',
          'Brandejsova',
          'Brandejsovo Nám.',
          'Brandejsovo Náměstí',
          'Brandlova',
          'Brandýská',
          'Branická',
          'Branická',
          'Branické Nám.',
          'Branické Náměstí',
          'Branislavova',
          'Branišovská',
          'Branská',
          'Bratislavská',
          'Bratranců Veverkových',
          'Bratří Dohalských',
          'Bratří Venclíků',
          'Bratří Čapků',
          'Bratříkovská',
          'Braunerova',
          'Braunova',
          'Braškovská',
          'Brdecká',
          'Brdičkova',
          'Brdlíkova',
          'Brechtova',
          'Brechtova',
          'Brehmova',
          'Breitcetlova',
          'Brichtova',
          'Brigádnická',
          'Brigádníků',
          'Brixiho',
          'Brodecká',
          'Brodecká',
          'Brodského',
          'Bromova',
          'Bronzová',
          'Broskvoňová',
          'Broumarská',
          'Broumovská',
          'Brozánská',
          'Brožíkova',
          'Brtecká',
          'Brtnická',
          'Brumovická',
          'Brunclíkova',
          'Brunelova',
          'Brunnerova',
          'Bruselská',
          'Brusinková',
          'Bruslařská',
          'Bryksova',
          'Brzická',
          'Brzorádových',
          'Brázdimská',
          'Brňovská',
          'Bubenečská',
          'Bubenečská',
          'Bubenská',
          'Bubenské Nábř.',
          'Bubenské Nábřeží',
          'Bubeníčkova',
          'Bublavská',
          'Bublíkova',
          'Bubnova',
          'Bucharova',
          'Buchlovská',
          'Buchovcova',
          'Budapešťská',
          'Budečská',
          'Budilova',
          'Budilovská',
          'Budovatelská',
          'Budyňská',
          'Budyšínská',
          'Budínova',
          'Budčická',
          'Budějovická',
          'Budějovická',
          'Bukolská',
          'Bukovecká',
          'Bukovinská',
          'Buková',
          'Bulharská',
          'Buližníková',
          'Bulovka',
          'Burdova',
          'Burešova',
          'Burianova',
          'Butovická',
          'Butovická',
          'Buzulucká',
          'Buštěhradská',
          'Bydhošťská',
          'Bydžovská',
          'Bydžovského',
          'Bylanská',
          'Bystrá',
          'Bystřická',
          'Bystřičná',
          'Byšická',
          'Byškovická',
          'Bzenecká',
          'Bártlova',
          'Bášťská',
          'Bílenecké Nám.',
          'Bílenecké Náměstí',
          'Bílinská',
          'Bílkova',
          'Bílkova',
          'Bílovská',
          'Bílá',
          'Bílčická',
          'Bínova',
          'Bítovská',
          'Böhmova',
          'Býšovská',
          'Běchorská',
          'Běchovická',
          'Běhounkova',
          'Bělehradská',
          'Bělehradská',
          'Bělehradská',
          'Bělečská',
          'Bělinského',
          'Bělocerkevská',
          'Bělocká',
          'Bělohorská',
          'Bělohorská',
          'Bělomlýnská',
          'Bělomlýnská',
          'Běloveská',
          'Běluňská',
          'Bělušická',
          'Bělásková',
          'Bělčická',
          'Bělčická',
          'Běžecká',
          'Běžná',
          'Břeclavská',
          'Břehová',
          'Břehová',
          'Břetislavova',
          'Břevnovská',
          'Březanova',
          'Březecká',
          'Březenská',
          'Březinova',
          'Březiněveská',
          'Březnická',
          'Březnová',
          'Březovická',
          'Březovského',
          'Březová',
          'Břečťanová',
          'Břežanská',
          'Břežánecká',
          'Břidlicová',
          'Břidličná',
          'Břízova',
          'Bříšťanská',
          'Cafourkova',
          'Cedrová',
          'Celetná',
          'Celniční',
          'Celsiova',
          'Cementářská',
          'Ceplechova',
          'Cerhenická',
          'Cerhýnská',
          'Cetyňská',
          'Chabařovická',
          'Chaberská',
          'Chabeřická',
          'Chabská',
          'Chalabalova',
          'Chaloupeckého',
          'Chaloupky',
          'Chaltická',
          'Chalupkova',
          'Chalupnická',
          'Chaplinovo Nám.',
          'Chaplinovo Náměstí',
          'Charkovská',
          'Charlese De Gaulla',
          'Charvátova',
          'Chatařská',
          'Chatová',
          'Chebská',
          'Chelčického',
          'Chemická',
          'Chilská',
          'Chittussiho',
          'Chladírenská',
          'Chlebovická',
          'Chlumecká',
          'Chlumecká',
          'Chlumecká',
          'Chlumova',
          'Chlumínská',
          'Chlumčanského',
          'Chlupova',
          'Chlupáčova',
          'Chládkova',
          'Chmelařská',
          'Chmelická',
          'Chmelová',
          'Chmelířova',
          'Choceradská',
          'Choceňská',
          'Chocholouškova',
          'Chocholova',
          'Chodecká',
          'Chodovecké Nám.',
          'Chodovecké Náměstí',
          'Chodovická',
          'Chodovská',
          'Chodovská',
          'Chodovská',
          'Chodská',
          'Cholupická',
          'Chomutovická',
          'Chomutovská',
          'Chopinova',
          'Choratická',
          'Chorošová',
          'Chorušická',
          'Chorvatská',
          'Chotečská',
          'Chotkova',
          'Chotouchovská',
          'Chotouňská',
          'Chotovická',
          'Chotutická',
          'Chotěbuzská',
          'Chotěnovská',
          'Chotětovská',
          'Chotěšovská',
          'Chovatelská',
          'Chrastavská',
          'Chrobolská',
          'Chrpová',
          'Chrudimská',
          'Chráněná',
          'Chrášťanská',
          'Chuchelská',
          'Chudenická',
          'Chudoměřická',
          'Churnajevova',
          'Churáňovská',
          'Chvaletická',
          'Chvaletická',
          'Chvalečská',
          'Chvalkovická',
          'Chvalova',
          'Chvalská',
          'Chvalská',
          'Chvalšovická',
          'Chvatěrubská',
          'Chvojenecká',
          'Chyjická',
          'Chýnická',
          'Chýnovská',
          'Chýňská',
          'Chřibská',
          'Cibulka',
          'Cidlinská',
          'Cigánkova',
          'Cihelná',
          'Cihlářova',
          'Cihlářská',
          'Cimburkova',
          'Ciolkovského',
          'Cirkusová',
          'Cisterciácká',
          'Citolibská',
          'Coriových',
          'Ctiborova',
          'Ctiněveská',
          'Ctiradova',
          'Ctěnická',
          'Cukerní',
          'Cukrovarnická',
          'Cukrovarská',
          'Cuřínova',
          'Cvikovská',
          'Cvičebná',
          'Cvrčkova',
          'Cvrčkova',
          'Cvrčkova',
          'Cyprichova',
          'Cíglerova',
          'Cílkova',
          'Cínovecká',
          'Církova',
          'Církvická',
          'Církvičná',
          'Císařská Louka',
          'Císařský Ostrov',
          'Císařský Ostrov',
          'Císařský Ostrov',
          'Cítovská',
          'Daimlerova',
          'Dalejská',
          'Dalejská',
          'Dalešická',
          'Daliborova',
          'Dalimilova',
          'Dalovická',
          'Dandova',
          'Danielova',
          'Dany Medřické',
          'Darwinova',
          'Dasnická',
          'Davelská',
          'Davidovičova',
          'Davídkova',
          'Davídkova',
          'Dačická',
          'Dačického',
          'Daňkova',
          'Dašická',
          'Daškova',
          'Dehtínská',
          'Dejvická',
          'Dejvická',
          'Demlova',
          'Demoliční',
          'Desenská',
          'Destinnové',
          'Destinové',
          'Devonská',
          'Deylova',
          'Deštná',
          'Dešťová',
          'Diabasová',
          'Diamantová',
          'Diblíkova',
          'Diblíkova',
          'Dienzenhoferovy Sady',
          'Dieselova',
          'Diskařská',
          'Diskařská',
          'Dismanova',
          'Dittrichova',
          'Divadelní',
          'Divadelní',
          'Divecká',
          'Diviznová',
          'Divišova',
          'Divišovská',
          'Divoká Šárka',
          'Divoká Šárka',
          'Dlabačov',
          'Dlabačov',
          'Dlouhá',
          'Dlážděná',
          'Do Blatin',
          'Do Borovin',
          'Do Chuchle',
          'Do Dolnic',
          'Do Dubin',
          'Do Dubče',
          'Do Hlinek',
          'Do Klukovic',
          'Do Kopečka',
          'Do Koutů',
          'Do Koutů',
          'Do Lipan',
          'Do Lipin',
          'Do Lipin',
          'Do Luk',
          'Do Panenek',
          'Do Podkovy',
          'Do Polí',
          'Do Potoků',
          'Do Píšovic',
          'Do Roklí',
          'Do Rybníčků',
          'Do Svépravic',
          'Do Vozovny',
          'Do Vrchu',
          'Do Vršku',
          'Do Zahrádek I',
          'Do Zahrádek I',
          'Do Zahrádek I',
          'Do Zahrádek Ii',
          'Do Zahrádek Ii',
          'Do Zátiší',
          'Do Údolí',
          'Do Újezda',
          'Do Čertous',
          'Do Čtvrti',
          'Do Říčan',
          'Dobevská',
          'Dobnerova',
          'Dobratická',
          'Dobronická',
          'Dobronická',
          'Dobropolská',
          'Dobrovická',
          'Dobrovolného',
          'Dobrovolského',
          'Dobrovského',
          'Dobrovízská',
          'Dobročovická',
          'Dobrošovská',
          'Dobrušská',
          'Dobřanská',
          'Dobřejovická',
          'Dobřenická',
          'Dobřichovská',
          'Dobšická',
          'Dobšínská',
          'Dohalická',
          'Doksanská',
          'Dolanská',
          'Dolejškova',
          'Doležalova',
          'Dolina',
          'Dolnobranská',
          'Dolnobřežanská',
          'Dolnocholupická',
          'Dolnojirčanská',
          'Dolnokrčská',
          'Dolnokřeslická',
          'Dolnomlýnská',
          'Dolnoměcholupská',
          'Dolnoměcholupská',
          'Dolnopočernická',
          'Dolnočernošická',
          'Dolní',
          'Dolní',
          'Dolní Chaloupky',
          'Dolomitová',
          'Dolská',
          'Dolákova',
          'Dolínecká',
          'Dolňanská',
          'Domanovická',
          'Domašínská',
          'Domažlická',
          'Dominova',
          'Dominínská',
          'Domkovská',
          'Domkářská',
          'Domousnická',
          'Donatellova',
          'Donovalská',
          'Donská',
          'Donátova',
          'Donínská',
          'Dopplerova',
          'Dopravní',
          'Dopraváků',
          'Dopraváků',
          'Dostihová',
          'Dostojevského',
          'Doubecká',
          'Doubická',
          'Doubravická',
          'Doubravská',
          'Doubravínova',
          'Doubravčická',
          'Doudlebská',
          'Doudova',
          'Doupovská',
          'Dr. Marodyho',
          'Dr. Zikmunda Wintra',
          'Dr.Zikmunda Wintra',
          'Dragounská',
          'Drahanská',
          'Drahanská',
          'Drahelická',
          'Drahelčická',
          'Drahobejlova',
          'Drahorádova',
          'Drahotická',
          'Drahotínská',
          'Drahovská',
          'Drahovská',
          'Drahoňovského',
          'Draženovská',
          'Draženovská',
          'Dražetická',
          'Dražická',
          'Dražického',
          'Dražického Nám.',
          'Dražického Náměstí',
          'Dražkovská',
          'Dreyerova',
          'Drimlova',
          'Drnovská',
          'Drobná',
          'Drtikolova',
          'Drtinova',
          'Druhanická',
          'Druhého Odboje',
          'Družicová',
          'Družnosti',
          'Družná',
          'Družstevní',
          'Družstevní Ochoz',
          'Družstevní Ochoz',
          'Drážní',
          'Drůbežnická',
          'Drůbežářská',
          'Dubanská',
          'Dubenecká',
          'Dubečská',
          'Dubečské Horky',
          'Dubinská',
          'Dubnická',
          'Dubnova',
          'Dubovická',
          'Dubová',
          'Dubrovnická',
          'Dubská',
          'Duchcovská',
          'Duchoslávka',
          'Dudkova',
          'Dudínská',
          'Duhová',
          'Dukelská',
          'Dukelských Hrdinů',
          'Dunajevského',
          'Dunajská',
          'Dunická',
          'Dunovského',
          'Durychova',
          'Durychova',
          'Dusíkova',
          'Duškova',
          'Duškova',
          'Dušní',
          'Dušní',
          'Dvorecká',
          'Dvorecké Nám.',
          'Dvorecké Náměstí',
          'Dvorní',
          'Dvorská',
          'Dvoudílná',
          'Dvouletky',
          'Dvouramenná',
          'Dvořeckého',
          'Dvořišťská',
          'Dvořákova',
          'Dvořákovo Nábř.',
          'Dvořákovo Nábřeží',
          'Dygrýnova',
          'Dyjská',
          'Dykova',
          'Dářská',
          'Dürerova',
          'Dýšinská',
          'Děbolínská',
          'Dědická',
          'Dědinova',
          'Dědinská',
          'Děkanská',
          'Děkanská Vinice I',
          'Děkanská Vinice Ii',
          'Dělená',
          'Dělnická',
          'Dělostřelecká',
          'Dětenická',
          'Dětská',
          'Dětský Ostrov',
          'Děvínská',
          'Děčínská',
          'Děčínská',
          'Dřevařská',
          'Dřevnická',
          'Dřevná',
          'Dřevčická',
          'Dřínovská',
          'Dřínová',
          'Dřítenská',
          'Eberlova',
          'Ebrova',
          'Edisonova',
          'Edvardova',
          'Egyptská',
          'Eichlerova',
          'Einsteinova',
          'Ejpovická',
          'Ekonomická',
          'Eledrova',
          'Elektrárenská',
          'Eliášova',
          'Eliášova',
          'Elišky Junkové',
          'Elišky Krásnohorské',
          'Elišky Krásnohorské',
          'Elišky Peškové',
          'Elišky Přemyslovny',
          'Ellnerové',
          'Elsnicovo Náměstí',
          'Emilie Hyblerové',
          'Emlerova',
          'Engelmüllerova',
          'Engelova',
          'Engelova',
          'Englerova',
          'Erbenova',
          'Erbenova',
          'Estonská',
          'Etiopská',
          'Euklidova',
          'Evropská',
          'Evropská',
          'Evropská',
          'Evropská',
          'Evropská',
          'Evy Olmerové',
          'Exnárova',
          'F.V.Veselého',
          'Fabiánova',
          'Fabiánská',
          'Fadějevova',
          'Fajmanové',
          'Fajtlova',
          'Falcká',
          'Faltysova',
          'Famfulíkova',
          'Fantova',
          'Faradayova',
          'Farkašova',
          'Farní',
          'Farská',
          'Farského',
          'Fastrova',
          'Federova',
          'Fejfarova',
          'Felberova',
          'Fenyklová',
          'Fetrovská',
          'Feřtekova',
          'Fialková',
          'Fibichova',
          'Fikerova',
          'Filipova',
          'Filipovského',
          'Filipíny Welserové',
          'Fillova',
          'Filmařská',
          'Filosofská',
          'Fingerova',
          'Finkovská',
          'Finská',
          'Firkušného',
          'Fischlova',
          'Fišerova',
          'Flemingovo Nám.',
          'Flemingovo Náměstí',
          'Flájská',
          'Flöglova',
          'Foerstrova',
          'Folmavská',
          'Formanská',
          'Formánkova',
          'Fořtova',
          'Fragnerova',
          'Francouzská',
          'Francouzská',
          'Francouzská',
          'Františka Diviše',
          'Františka Jansy',
          'Františka Kadlece',
          'Františka Křížka',
          'Františka Černého',
          'Františka Červeného',
          'Františka Šimáčka',
          'Františkova',
          'Franty Kocourka',
          'Frančíkova',
          'Freiwaldova',
          'Freyova',
          'Frimlova',
          'Fričova',
          'Froncova',
          'Frostova',
          'Froňkova',
          'Frydrychova',
          'Fryčovická',
          'Fráni Šrámka',
          'Frézařská',
          'Frýdecká',
          'Frýdlantská',
          'Fuchsova',
          'Fügnerovo Nám.',
          'Fügnerovo Náměstí',
          'Gabinova',
          'Gabčíkova',
          'Gagarinova',
          'Galandova',
          'Galileova',
          'Gallašova',
          'Galvaniho',
          'Gaussova',
          'Gdaňská',
          'Generála Janouška',
          'Generála Mejstříka',
          'Generála Píky',
          'Generála Šišky',
          'Generála Šišky',
          'Gensovská',
          'Geologická',
          'Gercenova',
          'Gerstnerova',
          'Ginzova',
          'Glazunovova',
          'Glinkova',
          'Glowackého',
          'Goetheho',
          'Gogolova',
          'Golfová',
          'Gollova',
          'Golčova',
          'Gončarenkova',
          'Gončarenkova',
          'Gorazdova',
          'Gotthardská',
          'Goyova',
          'Gočárova',
          'Grafická',
          'Grafitová',
          'Grammova',
          'Granátová',
          'Gregorova',
          'Grussova',
          'Gruzínská',
          'Gutfreundova',
          'Gutova',
          'Gymnasijní',
          'Gymnastická',
          'Habartická',
          'Habartická',
          'Habartovská',
          'Haberfeldova',
          'Habrovská',
          'Habrová',
          'Habřická',
          'Habřická',
          'Hackerova',
          'Hadovitá',
          'Hadravská',
          'Hajní',
          'Hakenova',
          'Halasova',
          'Halenkovská',
          'Halštatská',
          'Hamerská',
          'Hamplova',
          'Hamrová',
          'Hamsíkova',
          'Hankova',
          'Hanouškova',
          'Hanusova',
          'Hanušova',
          'Hanzelkova',
          'Hanzlíkova',
          'Harantova',
          'Harcovská',
          'Harlacherova',
          'Harmonická',
          'Harrachovská',
          'Hartenberská',
          'Hasičská',
          'Hasičů',
          'Hasova',
          'Hastrmanská',
          'Haunerova',
          'Hauptova',
          'Hausmannova',
          'Havanská',
          'Havelská',
          'Havelská Ulička',
          'Havlovického',
          'Havlovického',
          'Havlovská',
          'Havlínova',
          'Havlíčkova',
          'Havlíčkovo Nám.',
          'Havlíčkovo Náměstí',
          'Havlíčkovy Sady',
          'Havlůjové',
          'Havlůjové',
          'Havranická',
          'Havraní',
          'Havránkova',
          'Havířovská',
          'Havířská',
          'Haškova',
          'Hašlerova',
          'Haštalská',
          'Haštalské Nám.',
          'Haštalské Náměstí',
          'Heckelova',
          'Heineho',
          'Heinemannova',
          'Hejnická',
          'Hejnická',
          'Hejplíkova',
          'Hejtmanská',
          'Hejtmánkova',
          'Hekova',
          'Hekrova',
          'Heldova',
          'Heleny Malířové',
          'Hellichova',
          'Helmova',
          'Helsinská',
          'Helénská',
          'Hennerova',
          'Heranova',
          'Herbenova',
          'Herdovská',
          'Herlíkovická',
          'Hermanická',
          'Hermelínská',
          'Hermíny Týrlové',
          'Heroldovy Sady',
          'Herrmannova',
          'Herrova',
          'Hertzova',
          'Herálecká I',
          'Herálecká Ii',
          'Herálecká Iii',
          'Herálecká Iv',
          'Herčíkova',
          'Hevlínská',
          'Heydukova',
          'Heyrovského Nám.',
          'Heyrovského Nám.',
          'Heyrovského Náměstí',
          'Heyrovského Náměstí',
          'Hečkova',
          'Heřmanova',
          'Heřmánková',
          'Hildy Čihákové',
          'Hillebrantova',
          'Hilmarova',
          'Hiršlova',
          'Hlavatého',
          'Hlavenecká',
          'Hlavní',
          'Hlavova',
          'Hlaváčkova',
          'Hlaváčova',
          'Hlaďova',
          'Hledíková',
          'Hlinská',
          'Hlivická',
          'Hlohová',
          'Hloubětínská',
          'Hloubětínská',
          'Hlubocká',
          'Hluboká',
          'Hlubočepská',
          'Hlušičkova',
          'Hládkov',
          'Hládkov',
          'Hlávkova',
          'Hněvkovská',
          'Hněvkovského',
          'Hnězdenská',
          'Hoblířská',
          'Hodkovická',
          'Hodkovská',
          'Hodonínská',
          'Hodčina',
          'Hodějovská',
          'Hodějovská',
          'Hoděšovická',
          'Hofbauerova',
          'Hoffmannova',
          'Hokejová',
          'Hokešovo Nám.',
          'Hokešovo Náměstí',
          'Holandská',
          'Holekova',
          'Holenická',
          'Holenská',
          'Holečkova',
          'Holečkova',
          'Holešovické Nábřeží',
          'Holešovický Přístav',
          'Holická',
          'Hollarovo Nám.',
          'Hollarovo Náměstí',
          'Holohlavská',
          'Holotínská',
          'Holoubkova',
          'Holoubkovská',
          'Holubická',
          'Holubinková',
          'Holubkova',
          'Holubova',
          'Holubí',
          'Holušická',
          'Holyňská',
          'Holátova',
          'Holínská',
          'Holýšovská',
          'Holčovická',
          'Holšická',
          'Homolová',
          'Homérova',
          'Honzíkova',
          'Hornická',
          'Hornocholupická',
          'Hornocholupická',
          'Hornofova',
          'Hornokrčská',
          'Hornokřeslická',
          'Hornomlýnská',
          'Hornoměcholupská',
          'Hornoměcholupská',
          'Hornopočernická',
          'Horní',
          'Horní Chaloupky',
          'Horní Hrdlořezská',
          'Horní Stromky',
          'Horníčkova',
          'Horolezecká',
          'Horoměřická',
          'Horoměřická',
          'Horoušanská',
          'Horoušanská',
          'Horovo Nám.',
          'Horovo Náměstí',
          'Horská',
          'Horusická',
          'Horymírovo Nám.',
          'Horymírovo Náměstí',
          'Horákova',
          'Horáčkova',
          'Horčičkova',
          'Horňátecká',
          'Horšovská',
          'Horšovská',
          'Hospodářská',
          'Hostavická',
          'Hostavická',
          'Hostinského',
          'Hostivařská',
          'Hostivařské Nám.',
          'Hostivařské Náměstí',
          'Hostivická',
          'Hostivítova',
          'Hostišovská',
          'Hostouňská',
          'Hostošova',
          'Hostýnská',
          'Hostýnská',
          'Houbařská',
          'Houdova',
          'Hovorčovická',
          'Hořanská',
          'Hořejší Náb.',
          'Hořejší Nábřeží',
          'Hořejšího',
          'Hořelická',
          'Hořická',
          'Hořovského',
          'Hořínecká',
          'Hoškova',
          'Hoštická',
          'Hošťálkova',
          'Hrabačovská',
          'Hrabákova',
          'Hrachovská',
          'Hrad I. Nádvoří',
          'Hrad Ii. Nádvoří',
          'Hrad Iii. Nádvoří',
          'Hradební',
          'Hradecká',
          'Hradeckých',
          'Hradečkova',
          'Hradešínská',
          'Hradčanské Nám.',
          'Hradčanské Náměstí',
          'Hraniční',
          'Hrazanská',
          'Hrazanská',
          'Hrdinova',
          'Hrdličkova',
          'Hrdlořezská',
          'Hrdoňovická',
          'Hroncova',
          'Hronovská',
          'Hronětická',
          'Hrozenkovská',
          'Hroznová',
          'Hrozného',
          'Hrubého',
          'Hrubínova',
          'Hrudičkova',
          'Hrusická',
          'Hruškovská',
          'Hruškovská',
          'Hrušovanské Nám.',
          'Hrušovanské Náměstí',
          'Hrušovická',
          'Hrušovská',
          'Hrušínského',
          'Hrušňová',
          'Hrušňová',
          'Hrádková',
          'Hráského',
          'Huberova',
          'Hubičkova',
          'Hubáčkova',
          'Hudcova',
          'Hudební',
          'Hudečkova',
          'Hudečkova',
          'Hugo Haase',
          'Hulanova',
          'Hulická',
          'Humenecká',
          'Humpolecká',
          'Huntířovská',
          'Hurbanova',
          'Husařská',
          'Husinecká',
          'Husitská',
          'Husitská',
          'Husníkova',
          'Husova',
          'Husovo Nám.',
          'Husovo Náměstí',
          'Hustopečská',
          'Hutnická',
          'Huťská',
          'Hviezdoslavova',
          'Hviezdoslavova',
          'Hvozdecká',
          'Hvozdnická',
          'Hvozdíková',
          'Hvožďanská',
          'Hvězdonická',
          'Hvězdova',
          'Hvězdářská',
          'Hyacintová',
          'Hybernská',
          'Hybešova',
          'Hynaisova',
          'Hypšmanova',
          'Hábova',
          'Hájecká',
          'Hájenská',
          'Hájkova',
          'Hájovna U Podjezdu',
          'Hájovna V Šárce',
          'Hájová',
          'Hájíčkova',
          'Hájčí',
          'Hákova',
          'Hálkova',
          'Hálova',
          'Hálův Statek',
          'Högerova',
          'Hübnerové',
          'Hřbitovní',
          'Hřebenová',
          'Hřebíkova',
          'Hřenská',
          'Hřibojedská',
          'Hřibská',
          'Hříbková',
          'Hřídelecká',
          'Hůlkova',
          'Hůlkova',
          'Hůrská',
          'Ibsenova',
          'Imrychova',
          'Ingrišova',
          'Internacionální',
          'Irkutská',
          'Irská',
          'Irvingova',
          'Italská',
          'Italská',
          'Italská',
          'Ivančická',
          'Izraelská',
          'Izraelská',
          'Jabkenická',
          'Jablonecká',
          'Jablonecká',
          'Jablonského',
          'Jabloňová',
          'Jablunkovská',
          'Jagellonská',
          'Jagellonská',
          'Jahodnická',
          'Jahodová',
          'Jakobiho',
          'Jakubovská',
          'Jakubská',
          'Jakutská',
          'Jalodvorská',
          'Jalovcová',
          'Jaltská',
          'Jamborova',
          'Jamská',
          'Jana Bílka',
          'Jana Jindřicha',
          'Jana Karafiáta',
          'Jana Kašpara',
          'Jana Marka',
          'Jana Masaryka',
          'Jana Ouřady',
          'Jana Přibíka',
          'Jana Růžičky',
          'Jana Srba',
          'Jana Zajíce',
          'Jana Čerstvého',
          'Jana Želivského',
          'Janderova',
          'Jandova',
          'Janečkova',
          'Jankovcova',
          'Jankovská',
          'Janouchova',
          'Janouškova',
          'Janovická',
          'Janovská',
          'Janovského',
          'Jansenova',
          'Janského',
          'Jansova',
          'Jantarová',
          'Janákova',
          'Janáčkovo Nábř.',
          'Janáčkovo Nábř.',
          'Janáčkovo Nábřeží',
          'Janáčkovo Nábřeží',
          'Janýrova',
          'Jančova',
          'Jarešova',
          'Jarkovská',
          'Jarmily Novotné',
          'Jarní',
          'Jarníkova',
          'Jaromíra Jindry',
          'Jaromíra Vejvody',
          'Jaromírova',
          'Jaroměřská',
          'Jaroslava Foglara',
          'Jaroslava Švehly',
          'Jaroslavická',
          'Jasanová',
          'Jaselská',
          'Jaselská',
          'Jasenická',
          'Jasenná',
          'Jasmínová',
          'Jasná I',
          'Jasná Ii',
          'Jaspisová',
          'Jateční',
          'Jaurisova',
          'Jaurisova',
          'Javorenská',
          'Javornická',
          'Javorová',
          'Javorská',
          'Javořická',
          'Jašíkova',
          'Jažlovická',
          'Jedlová',
          'Jednostranná',
          'Jednostranná',
          'Jednotného Zemědělského Družstva',
          'Jednořadá',
          'Jelenovská',
          'Jelení',
          'Jelínkova',
          'Jemenská',
          'Jemnická',
          'Jenerálka',
          'Jenečská',
          'Jenišovská',
          'Jenská',
          'Jeníkovická',
          'Jenštejnská',
          'Jeremenkova',
          'Jeremenkova',
          'Jeremenkova',
          'Jeremiášova',
          'Jeremiášova',
          'Jerevanská',
          'Jeronýmova',
          'Jeruzalémská',
          'Jesenická',
          'Jeseniova',
          'Jestřebická',
          'Jetelová',
          'Jetřichovická',
          'Jevanská',
          'Jezdecká',
          'Jezdovická',
          'Jezerní',
          'Jezerská',
          'Jezevčí',
          'Ječná',
          'Jeřabinová',
          'Jeřabinová',
          'Jeřická',
          'Jeřábkova',
          'Jeřábnická',
          'Jeřábová',
          'Ješetická',
          'Ještědská',
          'Ježdíkova',
          'Ježkova',
          'Ježovická',
          'Ježovická',
          'Ježovská',
          'Jihlavská',
          'Jihovýchodní I',
          'Jihovýchodní Ii',
          'Jihovýchodní Iii',
          'Jihovýchodní Iv',
          'Jihovýchodní Ix',
          'Jihovýchodní V',
          'Jihovýchodní Vi',
          'Jihovýchodní Vii',
          'Jihovýchodní Viii',
          'Jihozápadní I',
          'Jihozápadní Ii',
          'Jihozápadní Iii',
          'Jihozápadní Iv',
          'Jihozápadní V',
          'Jihozápadní Vi',
          'Jihočeská',
          'Jilemnická',
          'Jilemnická',
          'Jilemnického',
          'Jilmová',
          'Jilská',
          'Jindrova',
          'Jindřicha Jindřicha',
          'Jindřicha Plachty',
          'Jindřichova',
          'Jindřišská',
          'Jinolická',
          'Jinonická',
          'Jinonická',
          'Jinočanská',
          'Jirenská',
          'Jirečkova',
          'Jirkovská',
          'Jirsákova',
          'Jirsíkova',
          'Jiránkova',
          'Jiráskovo Nám.',
          'Jiráskovo Náměstí',
          'Jirčanská',
          'Jiskrova',
          'Jistebnická',
          'Jitkovská',
          'Jitravská',
          'Jitravská',
          'Jitrocelová',
          'Jitřní',
          'Jivenská',
          'Jizerská',
          'Jičínská',
          'Jičínská',
          'Jiřická',
          'Jiřinková',
          'Jiřiny Štěpničkové',
          'Jiřská',
          'Jiřího Jandy',
          'Jiřího Mašína',
          'Jiřího Ze Vtelna',
          'Jiříčkova',
          'Jiříčkové',
          'Jižní I',
          'Jižní Ii',
          'Jižní Iii',
          'Jižní Iv',
          'Jižní Ix',
          'Jižní Nám.',
          'Jižní Náměstí',
          'Jižní Spojka',
          'Jižní Spojka',
          'Jižní Spojka',
          'Jižní Spojka',
          'Jižní V',
          'Jižní Vi',
          'Jižní Vii',
          'Jižní Viii',
          'Jižní Xi',
          'Jižní Xii',
          'Jižní Xiii',
          'Jižní Xiv',
          'Jižní Xv',
          'Jižní Xvi',
          'Jižní Xvii',
          'Johanitská',
          'Jordana Jovkova',
          'Jordánská',
          'Josefa Bíbrdlíka',
          'Josefa Houdka',
          'Josefa Houdka',
          'Josefa Kočího',
          'Josefa Němce',
          'Josefa Vašíčka',
          'Josefa Šimůnka',
          'Josefská',
          'José Martího',
          'Juarézova',
          'Jugoslávská',
          'Jugoslávských Partyzánů',
          'Jugoslávských Partyzánů',
          'Jungmannova',
          'Jungmannova',
          'Jungmannovo Náměstí',
          'Junácká',
          'Jupiterova',
          'Jurkovičova',
          'Juárezova',
          'Jzd',
          'Jáchymova',
          'Jáchymova',
          'Jáchymovská',
          'Jánošíkova',
          'Jánská',
          'Jánský Vršek',
          'Jíchova',
          'Jílkova',
          'Jílovická',
          'Jílovišťská',
          'Jílovská',
          'Jílovská',
          'Jílová',
          'Jírova',
          'Jírovcovo Nám.',
          'Jírovcovo Náměstí',
          'Jívanská',
          'Jívová',
          'K Austisu',
          'K Avii',
          'K Barrandovu',
          'K Bateriím',
          'K Bažantnici',
          'K Belvederu',
          'K Berance',
          'K Beranovu',
          'K Berounce',
          'K Beránku',
          'K Betonárně',
          'K Betáni',
          'K Blatovu',
          'K Bohnicím',
          'K Borovíčku',
          'K Botiči',
          'K Brance',
          'K Brnkám',
          'K Brusce',
          'K Brusce',
          'K Brůdku',
          'K Bílému Vrchu',
          'K Běchovicům',
          'K Březince',
          'K Březiněvsi',
          'K Břečkám',
          'K Celinám',
          'K Cementárně',
          'K Chabům',
          'K Chabům',
          'K Chaloupce',
          'K Chaloupkám',
          'K Chatám',
          'K Chmelnici',
          'K Chumberku',
          'K Cihelně',
          'K Cikánce',
          'K Cíli',
          'K Dalejím',
          'K Dobré Vodě',
          'K Dobré Vodě',
          'K Dolům',
          'K Drahani',
          'K Drahani',
          'K Drazdům',
          'K Drsnici',
          'K Dubinám',
          'K Dubovému Mlýnu',
          'K Dubu',
          'K Dubči',
          'K Dálnici',
          'K Dálnici',
          'K Dýmači',
          'K Děrám',
          'K Fantovu Mlýnu',
          'K Farkám',
          'K Fialce',
          'K Fišpance',
          'K Habrovce',
          'K Habru',
          'K Haltýři',
          'K Havlínu',
          'K Hluboké Cestě',
          'K Hlásku',
          'K Holyni',
          'K Holému Vrchu',
          'K Holému Vrchu',
          'K Homolce',
          'K Horkám',
          'K Horkám',
          'K Horkám',
          'K Horním Počernicím',
          'K Horoměřicům',
          'K Hořavce',
          'K Hradišti',
          'K Hrnčířům',
          'K Hrušovu',
          'K Hrušovu',
          'K Hrázi',
          'K Hutím',
          'K Hutím',
          'K Hutím',
          'K Hádku',
          'K Háječku',
          'K Háji',
          'K Háji',
          'K Hájku',
          'K Hájovně',
          'K Hájovně',
          'K Hájovně',
          'K Hájům',
          'K Hárunce',
          'K Interně',
          'K Jalovce',
          'K Jasánkám',
          'K Jelenu',
          'K Jelenám',
          'K Jezeru',
          'K Jezeru',
          'K Jezu',
          'K Jezírku',
          'K Jihu',
          'K Jihu',
          'K Jinočanům',
          'K Jinočanům',
          'K Jižnímu Městu',
          'K Juliáně',
          'K Jízdárně',
          'K Labeškám',
          'K Ladům',
          'K Lahovičkám',
          'K Lahovské',
          'K Lažance',
          'K Lesoparku',
          'K Lesu',
          'K Lesu',
          'K Lesíku',
          'K Letišti',
          'K Letňanům',
          'K Libuši',
          'K Lindě',
          'K Lipanům',
          'K Lipinám',
          'K Lipám',
          'K Lochkovu',
          'K Lomu',
          'K Louži',
          'K Luhu',
          'K Lukám',
          'K Lučinám',
          'K Lužinám',
          'K Ládví',
          'K Ládví',
          'K Lánu',
          'K Lávce',
          'K Lázním',
          'K Lípě',
          'K Markétě',
          'K Matěji',
          'K Mejtu',
          'K Metru',
          'K Metru',
          'K Milíčovu',
          'K Mlíčníku',
          'K Mlýnu',
          'K Modřanskému Nádraží',
          'K Mohyle',
          'K Moravině',
          'K Moravině',
          'K Mostku',
          'K Mostu',
          'K Motelu',
          'K Motolu',
          'K Mírám',
          'K Měcholupům',
          'K Měchurce',
          'K Nedvězí',
          'K Netlukám',
          'K Noskovně',
          'K Nouzovu',
          'K Nové Vsi',
          'K Nové Vsi',
          'K Nové Škole',
          'K Novému Dvoru',
          'K Novému Hradu',
          'K Novému Sídlišti',
          'K Novým Domkům',
          'K Nádraží',
          'K Nádrži',
          'K Náhonu',
          'K Náměstí',
          'K Náplavce',
          'K Náplavce',
          'K Návrší',
          'K Návrší',
          'K Návsi',
          'K Obci',
          'K Obecním Hájovnám',
          'K Oboře',
          'K Obsinám',
          'K Ochozu',
          'K Ohradě',
          'K Okrouhlíku',
          'K Olympiku',
          'K Opatřilce',
          'K Opatřilce',
          'K Oplocení',
          'K Orionce',
          'K Osmidomkům',
          'K Otočce',
          'K Ovčínu',
          'K Ovčínu',
          'K Padesátníku',
          'K Palečku',
          'K Panenkám',
          'K Parku',
          'K Pastvinám',
          'K Pazderkám',
          'K Pekárně',
          'K Peluňku',
          'K Petrově Komoře',
          'K Pitkovicům',
          'K Podchodu',
          'K Podjezdu',
          'K Podjezdu',
          'K Polím',
          'K Pomníku',
          'K Popelce',
          'K Popelce',
          'K Potoku',
          'K Poště',
          'K Pramenu',
          'K Prelátům',
          'K Prádelně',
          'K Průhonicům',
          'K Průhonu',
          'K Průmstavu',
          'K Pyramidce',
          'K Pérovně',
          'K Pískovně',
          'K Písnici',
          'K Přehradám',
          'K Přejezdu',
          'K Přístavišti',
          'K Přívozu',
          'K Radhošti',
          'K Radonicům',
          'K Radotínu',
          'K Radotínu',
          'K Remízku',
          'K Rokli',
          'K Rokytce',
          'K Rotundě',
          'K Rovinám',
          'K Rozkoši',
          'K Rozmezí',
          'K Roztokům',
          'K Rozvodně',
          'K Rukavičkárně',
          'K Rybníku',
          'K Rybníčku',
          'K Rybníčkům',
          'K Rybárně',
          'K Ryšánce',
          'K Ryšánce',
          'K Sadu',
          'K Safině',
          'K Samoobsluze',
          'K Samotě',
          'K Sedlišti',
          'K Sibřině',
          'K Sokolovně',
          'K Sopce',
          'K Sopce',
          'K Starému Bubenči',
          'K Starému Lomu',
          'K Stavebninám',
          'K Sukovu',
          'K Sádkám',
          'K Sádkám',
          'K Sídlišti',
          'K Sídlišti',
          'K Teplárně',
          'K Topolům',
          'K Topírně',
          'K Transformátoru',
          'K Trati',
          'K Trninám',
          'K Trnkám',
          'K Trníčku',
          'K Truhlářce',
          'K Tržišti',
          'K Tuchoměřicům',
          'K Táboru',
          'K Třebonicům',
          'K Třešňovce',
          'K Tůni',
          'K Ubytovnám',
          'K Uhříněvsi',
          'K Uhříněvsi',
          'K Učilišti',
          'K Valu',
          'K Vejvoďáku',
          'K Velké Ohradě',
          'K Velké Ohradě',
          'K Velkému Dvoru',
          'K Verneráku',
          'K Viaduktu',
          'K Vidouli',
          'K Vilkám',
          'K Vinici',
          'K Vinicím',
          'K Vinoři',
          'K Vizerce',
          'K Višňovce',
          'K Višňovce',
          'K Višňovému Sadu',
          'K Vltavě',
          'K Vlásence',
          'K Vodici',
          'K Vodojemu',
          'K Vodárně',
          'K Vodě',
          'K Vrbičkám',
          'K Vrbě',
          'K Vrcholu',
          'K Vrtilce',
          'K Vršíčku',
          'K Vyhlídce',
          'K Vysoké Cestě',
          'K Vystrkovu',
          'K Václavce',
          'K Vápence',
          'K Váze',
          'K Výboru',
          'K Výtopně',
          'K Výzkumným Ústavům',
          'K Větrolamu',
          'K Zabrkům',
          'K Zadní Kopanině',
          'K Zadní Kopanině',
          'K Zahradnictví',
          'K Zahradám',
          'K Zahrádkám',
          'K Zastávce',
          'K Zatáčce',
          'K Zelené Louce',
          'K Zeleným Domkům',
          'K Zelenči',
          'K Zámku',
          'K Zátiší',
          'K Závodišti',
          'K Závorám',
          'K Závěrce',
          'K Závětinám',
          'K Údolí',
          'K Údolí Hvězd',
          'K Újezdu',
          'K Ústavu',
          'K Úvozu',
          'K Černošicím',
          'K Červenému Dvoru',
          'K Červenému Dvoru',
          'K Červenému Dvoru',
          'K Červenému Vrchu',
          'K Čestlicům',
          'K Čihadlům',
          'K Ďáblicům',
          'K Řece',
          'K Řeporyjím',
          'K Řeporyjím',
          'K Říčanům',
          'K Šafránce',
          'K Šafránce',
          'K Šancím',
          'K Šeberovu',
          'K Šeberáku',
          'K Šedivce',
          'K Šubrtce',
          'K Železnici',
          'K Žižkovu',
          'Kabeláčova',
          'Kabešova',
          'Kabátové',
          'Kadaňská',
          'Kadeřávkovská',
          'Kafkova',
          'Kahovská',
          'Kaizlovy Sady',
          'Kakosova',
          'Kakostová',
          'Kalabisova',
          'Kalašova',
          'Kalinová',
          'Kališnická',
          'Kališťská',
          'Kalská',
          'Kalvodova',
          'Kamelova',
          'Kamencová',
          'Kamenická',
          'Kamenická',
          'Kamenitá',
          'Kamenná',
          'Kameníků',
          'Kamerunská',
          'Kampanova',
          'Kamzíková',
          'Kamýcká',
          'Kamýcká',
          'Kamýcká',
          'Kanadská',
          'Kandertova',
          'Kanovnická',
          'Kapitulská',
          'Kaplanova',
          'Kaplická',
          'Kapraďová',
          'Kaprova',
          'Kaprova',
          'Kapucínská',
          'Karafiátová',
          'Karasova',
          'Karasovská',
          'Kardausova',
          'Kardašovská',
          'Kardašovská',
          'Karenova',
          'Karfíkova',
          'Karla Engliše',
          'Karla Hlaváčka',
          'Karla Kryla',
          'Karla Křížka',
          'Karla Michala',
          'Karla Rachůnka',
          'Karla Tomáše',
          'Karla Zicha',
          'Karla Černého',
          'Karlická',
          'Karlova',
          'Karlovarská',
          'Karlovarská',
          'Karlovická',
          'Karlovo Nám.',
          'Karlovo Nám.',
          'Karlovo Náměstí',
          'Karlovo Náměstí',
          'Karlínské Nám.',
          'Karlínské Náměstí',
          'Karlštejnská',
          'Karmelitská',
          'Karolinská',
          'Karoliny Světlé',
          'Karpatská',
          'Kartounářů',
          'Kartouzská',
          'Kasalická',
          'Kateřinská',
          'Kateřinské Nám.',
          'Kateřinské Náměstí',
          'Katovická',
          'Katusická',
          'Kavkazská',
          'Kazaňská',
          'Kazašská',
          'Kazimírova',
          'Kaznějovská',
          'Kazín',
          'Kazínská',
          'Kačerovská',
          'Kačínská',
          'Kaňkova',
          'Kaňkovského',
          'Kaňovská',
          'Kašeho',
          'Kaškova',
          'Kašovická',
          'Kašparovo Nám.',
          'Kašparovo Náměstí',
          'Kašperská',
          'Kaštanová',
          'Kbelská',
          'Kbelská',
          'Kbelská',
          'Kbelská',
          'Kdoulová',
          'Ke Březině',
          'Ke Břvům',
          'Ke Cvičišti',
          'Ke Dračkám',
          'Ke Dráze',
          'Ke Dvoru',
          'Ke Džbánu',
          'Ke Garážím',
          'Ke Golfu',
          'Ke Goniu',
          'Ke Hlásce',
          'Ke Hrádku',
          'Ke Hrázi',
          'Ke Hrázi',
          'Ke Hřbitovu',
          'Ke Hřišti',
          'Ke Kablu',
          'Ke Kablu',
          'Ke Kalvárii',
          'Ke Kaménce',
          'Ke Kamínce',
          'Ke Kamýku',
          'Ke Kapličce',
          'Ke Kapslovně',
          'Ke Karlovu',
          'Ke Kateřinkám',
          'Ke Kazínu',
          'Ke Kašně',
          'Ke Kinu',
          'Ke Kladivům',
          'Ke Klimentce',
          'Ke Klubovně',
          'Ke Klínku',
          'Ke Klínku',
          'Ke Klíčovu',
          'Ke Koh-I-Nooru',
          'Ke Kolodějskému Zámku',
          'Ke Kolodějům',
          'Ke Kolonii',
          'Ke Konstruktivě',
          'Ke Kopečku',
          'Ke Korunce',
          'Ke Kostelu',
          'Ke Kostelíčku',
          'Ke Kotlářce',
          'Ke Koulce',
          'Ke Koupališti',
          'Ke Kovárně',
          'Ke Kozím Hřbetům',
          'Ke Královicům',
          'Ke Krči',
          'Ke Krčské Stráni',
          'Ke Kulišce',
          'Ke Kulturnímu Domu',
          'Ke Kurtům',
          'Ke Kyjovu',
          'Ke Kálku',
          'Ke Křížku',
          'Ke Křížkám',
          'Ke Lhoteckému Lesu',
          'Ke Mlýnku',
          'Ke Mlýnu',
          'Ke Mlýnu',
          'Ke Schodům',
          'Ke Skalce',
          'Ke Skalkám',
          'Ke Skladům',
          'Ke Sklárně',
          'Ke Skále',
          'Ke Slatinám',
          'Ke Slivenci',
          'Ke Smrčině',
          'Ke Smíchovu',
          'Ke Smíchovu',
          'Ke Splávku',
          'Ke Spofě',
          'Ke Spořilovu',
          'Ke Spálence',
          'Ke Srážku',
          'Ke Stadionu',
          'Ke Stanici',
          'Ke Starému Hřišti',
          'Ke Starým Rybníkům',
          'Ke Stinkovskému Rybníku',
          'Ke Strašnické',
          'Ke Strouze',
          'Ke Stráni',
          'Ke Strži',
          'Ke Studni',
          'Ke Studni',
          'Ke Studánce',
          'Ke Stupicím',
          'Ke Stáčírně',
          'Ke Stírce',
          'Ke Střelnici',
          'Ke Střelnici',
          'Ke Sv. Izidoru',
          'Ke Třem Mostům',
          'Ke Xaverovu',
          'Ke Zbraslavi',
          'Ke Zbrojnici',
          'Ke Zbuzanům',
          'Ke Zdibům',
          'Ke Zdravotnímu Středisku',
          'Ke Zděři',
          'Ke Zlatému Kopci',
          'Ke Zličínu',
          'Ke Znaku',
          'Ke Zvonici',
          'Ke Zvoničce',
          'Ke Školce',
          'Ke Škole',
          'Ke Šmejkalu',
          'Ke Štvanici',
          'Ke Štítu',
          'Ke Štěpcům',
          'Ke Štěrkovně',
          'Ke Švestkovce',
          'Kecova',
          'Kejhova',
          'Kejnická',
          'Kellnerova',
          'Keltská',
          'Keltů',
          'Kelvinova',
          'Kemrova',
          'Keplerova',
          'Keplerova',
          'Keramická',
          'Kesnerka',
          'Kestřanská',
          'Keteňská',
          'Kettnerova',
          'Keřová',
          'Khodlova',
          'Kischova',
          'Kišiněvská',
          'Kladenská',
          'Kladenská',
          'Kladenská',
          'Kladinovská',
          'Kladrubská',
          'Kladská',
          'Klamovka',
          'Klapkova',
          'Klapálkova',
          'Klatovská',
          'Klausova',
          'Klecandova',
          'Klecanská',
          'Klenečská',
          'Klenovická',
          'Klenovská',
          'Klenová',
          'Klečkova',
          'Klečákova',
          'Klešická',
          'Klicperova',
          'Klidná',
          'Klihařská',
          'Klikatá',
          'Klikatá',
          'Klimentská',
          'Klivarova',
          'Kloboukova',
          'Kloboučnická',
          'Kloknerova',
          'Klokotská',
          'Klostermannova',
          'Klouzková',
          'Kludských',
          'Klukovická',
          'Klánova',
          'Klánova',
          'Klánova',
          'Klánovická',
          'Klánovická',
          'Klárov',
          'Klášterecká',
          'Klášterská',
          'Klášterského',
          'Klímova',
          'Klímova',
          'Klínecká',
          'Klínovecká',
          'Klínová',
          'Klírova',
          'Klíčanská',
          'Klíčova',
          'Klíčovská',
          'Klíčovská',
          'Kmochova',
          'Knínická',
          'Kněževeská',
          'Kněžická',
          'Koberkova',
          'Kobrova',
          'Kobyliská',
          'Kobyliské Nám.',
          'Kobyliské Náměstí',
          'Kobylákova',
          'Kochanova',
          'Kocianova',
          'Koclířova',
          'Kocourova',
          'Kodaňská',
          'Kodicilova',
          'Kodymova',
          'Kohoutovská',
          'Kohoutových',
          'Kojetická',
          'Kojická',
          'Kokořínská',
          'Kolbenova',
          'Kolbenova',
          'Kolbenova',
          'Koldínova',
          'Kolejní',
          'Kolektivní',
          'Kolešovská',
          'Kollárova',
          'Kolmistrova',
          'Kolmá',
          'Kolocova',
          'Kolodějská',
          'Kolonie U Obecní Cihelny',
          'Kolonka',
          'Kolovečská',
          'Kolovratská',
          'Kolová',
          'Kolátorova',
          'Koláčkova',
          'Koláře Kaliny',
          'Kolářova',
          'Kolínova',
          'Kolínská',
          'Kolčavka',
          'Komenského Nám.',
          'Komenského Náměstí',
          'Komornická',
          'Komořanská',
          'Komořanská',
          'Komořanská',
          'Komunardů',
          'Komárkova',
          'Komárovská',
          'Koncová',
          'Konecchlumského',
          'Konečná',
          'Kongresová',
          'Konojedská',
          'Konopišťská',
          'Konopova',
          'Konopáskova',
          'Konstantinova',
          'Konvalinková',
          'Konviktská',
          'Konzumní',
          'Konzumní',
          'Koníčkovo Nám.',
          'Koníčkovo Náměstí',
          'Konětopská',
          'Koněvova',
          'Konšelská',
          'Konžská',
          'Kopalova',
          'Kopanina',
          'Kopanská',
          'Kopeckého',
          'Koperníkova',
          'Kopečná',
          'Kopretinová',
          'Kopřivnická',
          'Korandova',
          'Korandova',
          'Korunní',
          'Korunní',
          'Korunní',
          'Korunovační',
          'Korunovační',
          'Korybutova',
          'Korycanská',
          'Korytná',
          'Kosatcová',
          'Kosařova',
          'Kosmická',
          'Kosmonoská',
          'Kosova',
          'Kosořická',
          'Kosořská',
          'Kostelecká',
          'Kostelecká',
          'Kostelní',
          'Kostelní Náměstí',
          'Kostečná',
          'Kostková',
          'Kostlivého',
          'Kostnické Nám.',
          'Kostnické Náměstí',
          'Kostomlatská',
          'Kostrbova',
          'Kostřínská',
          'Kosárkovo Nábř.',
          'Kosárkovo Nábřeží',
          'Kosí',
          'Koterovská',
          'Koterovská',
          'Kotevní',
          'Kotlaska',
          'Kotlářka',
          'Kotorská',
          'Kotovka',
          'Kotrčová',
          'Kotršálova',
          'Kotíkova',
          'Kotěrova',
          'Koubkova',
          'Koubkova',
          'Koubova',
          'Koukolová',
          'Koulka',
          'Koulova',
          'Kounická',
          'Kounovská',
          'Koutská',
          'Kouřimská',
          'Kovanecká',
          'Kovařovicova',
          'Kovriginova',
          'Kováků',
          'Kovárenská',
          'Kovářova',
          'Kovářská',
          'Kováříkova',
          'Kozinova',
          'Kozinovo Náměstí',
          'Kozlova',
          'Kozlovská',
          'Kozmíkova',
          'Kozomínská',
          'Kozácká',
          'Kozákovská',
          'Kozáková',
          'Kozí',
          'Kočova',
          'Kořenského',
          'Košařova',
          'Košická',
          'Koštířova',
          'Košátecká',
          'Košíkářská',
          'Košířské Nám.',
          'Košířské Náměstí',
          'Košťálkova',
          'Koťátkova',
          'Koželužská',
          'Kožlanská',
          'Kožná',
          'Kožíškova',
          'Kpt. Nálepky',
          'Kpt. Stránského',
          'Krabošická',
          'Krahulčí',
          'Krajanská',
          'Krajní',
          'Krajová',
          'Krajánkova',
          'Krakovská',
          'Kralická',
          'Kralupská',
          'Krameriova',
          'Kramlova',
          'Kramolná',
          'Kramolínská',
          'Kramperova',
          'Kraslická',
          'Krasnická',
          'Krasnojarská',
          'Kratochvílova',
          'Krausova',
          'Krbická',
          'Krchlebská',
          'Krejnická',
          'Krejčího',
          'Kremličkova',
          'Kremnická',
          'Kremnická',
          'Krhanická',
          'Krhanická',
          'Kristiánova',
          'Kriváňská',
          'Krkonošská',
          'Krnovská',
          'Krnská',
          'Krocínova',
          'Krocínovská',
          'Kroftova',
          'Krohova',
          'Krokova',
          'Krolmusova',
          'Kropáčkova',
          'Krosenská',
          'Kroupova',
          'Kroupova',
          'Krouzova',
          'Krovova',
          'Krteňská',
          'Kruhová',
          'Krumlovská',
          'Krupkovo Nám.',
          'Krupkovo Náměstí',
          'Krupná',
          'Krupská',
          'Krušovická',
          'Kružberská',
          'Krylovecká',
          'Krylovecká',
          'Krymská',
          'Krynická',
          'Krystalová',
          'Kryšpínova',
          'Kryštofova',
          'Krále Václava Iv.',
          'Králodvorská',
          'Králova',
          'Královická',
          'Královny Žofie',
          'Královská Obora',
          'Královská Obora',
          'Krásnolipská',
          'Krásného',
          'Krásova',
          'Krátká',
          'Krátká',
          'Krátkého',
          'Krátký Lán',
          'Krčmářovská',
          'Krčská',
          'Krčínovo Nám.',
          'Krčínovo Náměstí',
          'Krčínská',
          'Krňovická',
          'Krškova',
          'Kubatova',
          'Kubaštova',
          'Kubelíkova',
          'Kubišova',
          'Kubištova',
          'Kubova',
          'Kubánské Nám.',
          'Kubánské Náměstí',
          'Kubíkova',
          'Kubínova',
          'Kuchařská',
          'Kudeříkové',
          'Kudrnova',
          'Kukelská',
          'Kukelská',
          'Kukulova',
          'Kukulova',
          'Kukučínova',
          'Kulhavého',
          'Kulhánkovská',
          'Kuncova',
          'Kundratka',
          'Kunešova',
          'Kunická',
          'Kunratická',
          'Kunratická Spojka',
          'Kunratická Spojka',
          'Kuní',
          'Kuní',
          'Kunínova',
          'Kunčická',
          'Kunětická',
          'Kupeckého',
          'Kupkova',
          'Kurandové',
          'Kurkova',
          'Kurta Konráda',
          'Kurzova',
          'Kurčatovova',
          'Kusá',
          'Kusého',
          'Kutilova',
          'Kutnauerovo Náměstí',
          'Kutnohorská',
          'Kutnohorská',
          'Kutrovická',
          'Kuttelwascherova',
          'Kutvirtova',
          'Kučerova',
          'Kučerové',
          'Kuťatská',
          'Kuželova',
          'Kvapilova',
          'Kvasinská',
          'Kvestorská',
          'Květinková',
          'Květinářská',
          'Květnická',
          'Květnová',
          'Květnového Povstání',
          'Květnového Povstání',
          'Květnového Vítězství',
          'Květnového Vítězství',
          'Květná',
          'Květoslavova',
          'Květová',
          'Kyjevská',
          'Kyjevská',
          'Kyjovská',
          'Kyjská',
          'Kyjská',
          'Kykalova',
          'Kymrova',
          'Kynická',
          'Kyselova',
          'Kyslíková',
          'Kysucká',
          'Kysúcká',
          'Kytlická',
          'Kytínská',
          'Kácovská',
          'Kádnerova',
          'Kálikova',
          'Kálmánova',
          'Káranská',
          'Křejpského',
          'Křelovická',
          'Křemelná',
          'Křemencova',
          'Křemenná',
          'Křemenáčová',
          'Křemílkova',
          'Křenická',
          'Křenova',
          'Křepelčí',
          'Křepelčí',
          'Křesadlova',
          'Křesanovská',
          'Křeslická',
          'Křesomyslova',
          'Křešínská',
          'Křimická',
          'Křimovská',
          'Křivatcová',
          'Křivenická',
          'Křivoklátská',
          'Křivá',
          'Křičkova',
          'Křišťanova',
          'Křišťálová',
          'Křižovnická',
          'Křižovnické Nám.',
          'Křižovnické Náměstí',
          'Křižíkova',
          'Křižíkova',
          'Křovinovo Nám.',
          'Křovinovo Náměstí',
          'Křtinská',
          'Kříženeckého Nám.',
          'Kříženeckého Náměstí',
          'Křížkovského',
          'Křížová',
          'Křížová',
          'Labská',
          'Labětínská',
          'Ladislava Coňka',
          'Ladova',
          'Laglerové',
          'Lahovská',
          'Lahovská',
          'Lamačova',
          'Langweilova',
          'Lannova',
          'Lanýžová',
          'Lanžhotská',
          'Lanžovská',
          'Laténská',
          'Laubova',
          'Laudonova',
          'Laudova',
          'Laurinova',
          'Lazarská',
          'Lazarská',
          'Lačnovská',
          'Lažanská',
          'Lažanská',
          'Lažanského',
          'Lebeděvova',
          'Ledařská',
          'Ledecká',
          'Ledečská',
          'Ledkovská',
          'Lednická',
          'Lednová',
          'Ledvická',
          'Ledvinova',
          'Ledč',
          'Ledčická',
          'Legerova',
          'Legerova',
          'Legerova',
          'Legerova',
          'Legionářů',
          'Lehárova',
          'Leitzova',
          'Leknínová',
          'Leopoldova',
          'Leskovecká',
          'Lesnická',
          'Lesného',
          'Lesní',
          'Lessnerova',
          'Lesáků',
          'Letců',
          'Letecká',
          'Letenská',
          'Letenské Nám.',
          'Letenské Nám.',
          'Letenské Náměstí',
          'Letenské Náměstí',
          'Letenské Sady',
          'Letní',
          'Letohradská',
          'Letovská',
          'Letňanská',
          'Letňanská',
          'Levandulová',
          'Levobřežní',
          'Levského',
          'Levá',
          'Lexova',
          'Lečkova',
          'Lešanská',
          'Lešenská',
          'Lešetínská',
          'Lešovská',
          'Leštínská',
          'Lhenická',
          'Lhotecká',
          'Lhotecká',
          'Lhotská',
          'Lhotákova',
          'Liberecká',
          'Liberijská',
          'Libečkova',
          'Libeňská',
          'Libeňský Ostrov',
          'Libeňský Ostrov',
          'Libeřská',
          'Libichovská',
          'Libická',
          'Libišanská',
          'Libišská',
          'Libkovská',
          'Liblická',
          'Liblická',
          'Libochovická',
          'Libocká',
          'Liborova',
          'Libotovská',
          'Libovická',
          'Libočanská',
          'Liboňovská',
          'Libošovická',
          'Libuňská',
          'Libušina',
          'Libušská',
          'Libušská',
          'Libušská',
          'Libušská',
          'Libáňská',
          'Libínská',
          'Libčanská',
          'Libčická',
          'Liběchovská',
          'Libědická',
          'Liběšická',
          'Libřická',
          'Lichá',
          'Lidečská',
          'Lidická',
          'Lidického',
          'Lihovarská',
          'Liliová',
          'Lilková',
          'Limuzská',
          'Limuzská',
          'Lindavská',
          'Lindleyova',
          'Lindnerova',
          'Linhartova',
          'Linhartská',
          'Lipanská',
          'Lipecká',
          'Lipenecká',
          'Lipenská',
          'Lipenská',
          'Lipenské Nám.',
          'Lipenské Náměstí',
          'Lipnická',
          'Lipoltická',
          'Lipovická',
          'Lipovská',
          'Lipová Alej',
          'Lipové Náměstí',
          'Lipského',
          'Lipí',
          'Lisabonská',
          'Lisabonská',
          'Listopadová',
          'Lisztova',
          'Litavská',
          'Litevská',
          'Litická',
          'Litochlebská',
          'Litoměřická',
          'Litoměřická',
          'Litovická',
          'Litošická',
          'Litošická',
          'Litožnická',
          'Litvínovská',
          'Litvínovská',
          'Livornská',
          'Lišanská',
          'Lišická',
          'Liškova',
          'Lišovická',
          'Liščí',
          'Liščí',
          'Lnářská',
          'Lobečská',
          'Lochenická',
          'Lochkovská',
          'Lochotínská',
          'Lodecká',
          'Lodní Mlýny',
          'Loděnická',
          'Lodžská',
          'Lodžská',
          'Lohenická',
          'Lohniského',
          'Lojovická',
          'Lojovická',
          'Lojovická',
          'Lolkova',
          'Lomařská',
          'Lomecká',
          'Lomená',
          'Lomnická',
          'Lomnického',
          'Lomová',
          'Londýnská',
          'Loosova',
          'Lopatecká',
          'Lopatecká',
          'Lopuchová',
          'Loretánská',
          'Loretánské Nám.',
          'Loretánské Náměstí',
          'Losinská',
          'Lotyšská',
          'Loucká',
          'Loudova',
          'Lounská',
          'Lounských',
          'Loutkářská',
          'Loučanská',
          'Loučimská',
          'Loučná',
          'Louňovická',
          'Lovecká',
          'Lovosická',
          'Lovosická',
          'Lovosická',
          'Lovčenská',
          'Lovčická',
          'Lozická',
          'Lošetická',
          'Lošáková',
          'Lstibořská',
          'Lubenecká',
          'Lublaňská',
          'Lublaňská',
          'Lublinská',
          'Lubnická',
          'Lucemburská',
          'Lucemburská',
          'Lucinková',
          'Ludmilina',
          'Ludvíkova',
          'Luhovská',
          'Lukavecká',
          'Lukavského',
          'Lukešova',
          'Lukešova',
          'Lukovská',
          'Lukášova',
          'Lumiérů',
          'Lumírova',
          'Lumírova',
          'Luníkovská',
          'Lupenická',
          'Lupáčova',
          'Lutínská',
          'Luční',
          'Luštěnická',
          'Lužanská',
          'Lužecká',
          'Lužická',
          'Lužnická',
          'Lužná',
          'Lužní',
          'Lužská',
          'Lvovská',
          'Lysinská',
          'Lysolajská',
          'Lysolajské Údolí',
          'Lyčkovo Nám.',
          'Lyčkovo Náměstí',
          'Lyžařská',
          'Ládevská',
          'Lánovská',
          'Lánská',
          'Lásenická',
          'Láskova',
          'Lázeňská',
          'Lékařská',
          'Lékořicová',
          'Líbalova',
          'Líbeznická',
          'Lípová',
          'Lískovická',
          'Lísková',
          'Líšnická',
          'Lýskova',
          'M. J. Lermontova',
          'Macešková',
          'Macharovo Nám.',
          'Macharovo Náměstí',
          'Machatého',
          'Machkova',
          'Machnova',
          'Machovcova',
          'Machovická',
          'Machovská',
          'Machuldova',
          'Macháčkova',
          'Madarova',
          'Madaťjanova',
          'Madridská',
          'Magd. Rettigové',
          'Magdalény Rettigové',
          'Magistrů',
          'Magnitogorská',
          'Mahenova',
          'Mahlerovy Sady',
          'Mahulenina',
          'Maiselova',
          'Maiselova',
          'Majerové',
          'Majerského',
          'Makedonská',
          'Makovská',
          'Makovského',
          'Maková',
          'Malachitová',
          'Malebná',
          'Malenická',
          'Malešická',
          'Malešická',
          'Malešická',
          'Malešické Nám.',
          'Malešické Náměstí',
          'Malešovská',
          'Malinová',
          'Maličká',
          'Malkovského',
          'Malletova',
          'Malletova',
          'Malobřevnovská',
          'Malostranské Nábř.',
          'Malostranské Nábřeží',
          'Malostranské Náměstí',
          'Malotická',
          'Malovická',
          'Maltézské Nám.',
          'Maltézské Náměstí',
          'Malá',
          'Malá Bylanská',
          'Malá Houdova',
          'Malá Klášterní',
          'Malá Lada',
          'Malá Michnovka',
          'Malá Plynární',
          'Malá Skloněná',
          'Malá Smidarská',
          'Malá Tyršovka',
          'Malá Xaveriova',
          'Malá Štupartská',
          'Malá Štěpánská',
          'Malátova',
          'Malé Nám.',
          'Malé Náměstí',
          'Malého',
          'Malínská',
          'Malířská',
          'Malý Dvůr',
          'Malý Okrouhlík',
          'Malšovická',
          'Malšovské Nám.',
          'Malšovské Náměstí',
          'Mandloňová',
          'Mandova',
          'Mansfeldova',
          'Manská Zahrada',
          'Mantovská',
          'Manželů Dostálových',
          'Manželů Kotrbových',
          'Manželů Lyčkových',
          'Marciho',
          'Marešova',
          'Marie Cibulkové',
          'Marie Podvalové',
          'Mariánská',
          'Mariánská',
          'Mariánské Hradby',
          'Mariánské Hradby',
          'Mariánské Nám.',
          'Mariánské Náměstí',
          'Markova',
          'Markupova',
          'Markušova',
          'Markvartická',
          'Markyta',
          'Markétská',
          'Maroldova',
          'Martinelliho',
          'Martinická',
          'Martinova',
          'Martinovská',
          'Martinská',
          'Marty Krásové',
          'Marvanova',
          'Maršovská',
          'Masarykovo Nábř.',
          'Masarykovo Nábř.',
          'Masarykovo Nábřeží',
          'Masarykovo Nábřeží',
          'Masná',
          'Matek',
          'Matenská',
          'Maternova',
          'Mateřská',
          'Mateřídoušková',
          'Matjuchinova',
          'Matoušova',
          'Mattioliho',
          'Matúškova',
          'Matěchova',
          'Matějkova',
          'Matějovského',
          'Matějská',
          'Maxovská',
          'Mazancova',
          'Mazovská',
          'Mazurská',
          'Maďarská',
          'Maňákova',
          'Mařatkova',
          'Mařákova',
          'Maříkova',
          'Mašatova',
          'Maškova',
          'Mašovická',
          'Maštěřovského',
          'Mašínova',
          'Mechovka',
          'Mechová',
          'Medinská',
          'Medkova',
          'Medlovská',
          'Medová',
          'Meduňková',
          'Meinlinova',
          'Mejstříkova',
          'Melantrichova',
          'Meliorační',
          'Melodická',
          'Melounová',
          'Menclova',
          'Mendelova',
          'Mendíků',
          'Menšíkova',
          'Menšíkovská',
          'Merhoutova',
          'Merkurova',
          'Meruňková',
          'Meskářova',
          'Meteorologická',
          'Meteorologická',
          'Metodějova',
          'Metujská',
          'Mexická',
          'Mezi Chatami',
          'Mezi Domky',
          'Mezi Domy',
          'Mezi Humny',
          'Mezi Lysinami',
          'Mezi Lány',
          'Mezi Poli',
          'Mezi Potoky',
          'Mezi Rolemi',
          'Mezi Rybníky',
          'Mezi Sklady',
          'Mezi Stráněmi',
          'Mezi Vodami',
          'Mezi Úvozy',
          'Mezi Školami',
          'Mezibranská',
          'Mezihorská',
          'Mezihoří',
          'Mezilehlá',
          'Mezilesní',
          'Mezilesí',
          'Meziluží',
          'Mezipolí',
          'Mezitraťová',
          'Mezitraťová',
          'Mezitraťová',
          'Mezivrší',
          'Meziškolská',
          'Mečislavova',
          'Mečovská',
          'Mečíková',
          'Michalovicova',
          'Michalská',
          'Michelangelova',
          'Michelská',
          'Michelská',
          'Michnova',
          'Michnovka',
          'Mickiewiczova',
          'Mikanova',
          'Mikova',
          'Mikovcova',
          'Mikovická',
          'Mikulandská',
          'Mikuleckého',
          'Mikulova',
          'Mikulovická',
          'Mikuláše Z Husi',
          'Mikulášská',
          'Mikulčická',
          'Mikšovského',
          'Milady Horákové',
          'Milady Horákové',
          'Milady Horákové',
          'Milady Horákové',
          'Milady Horákové',
          'Milana Kadlece',
          'Milenovská',
          'Milerova',
          'Miletická',
          'Miletínská',
          'Milevská',
          'Milevská',
          'Milešovská',
          'Milotická',
          'Milovická',
          'Milovická',
          'Milánská',
          'Milínská',
          'Milíčova',
          'Milíčovská',
          'Mimoňská',
          'Minaříkova',
          'Minerální',
          'Minická',
          'Minská',
          'Miranova',
          'Miroslava Hajna',
          'Miroslava Hamra',
          'Mirotická',
          'Mirotická',
          'Mirovická',
          'Mirošovická',
          'Mirošovská',
          'Mistrovská',
          'Mistřínská',
          'Miřetická',
          'Miškovická',
          'Mladenovova',
          'Mladoboleslavská',
          'Mladoboleslavská',
          'Mladoboleslavská',
          'Mladoboleslavská',
          'Mladoboleslavská',
          'Mladotická',
          'Mladotova',
          'Mladých',
          'Mladých Běchovic',
          'Mladčina',
          'Mladějovská',
          'Mlynářská',
          'Mládeže',
          'Mládežnická',
          'Mládkova',
          'Mládí',
          'Mlázovická',
          'Mlékárenská',
          'Mlýnská',
          'Mlýnská',
          'Mnichovická',
          'Mochovská',
          'Mochovská',
          'Modenská',
          'Modlanská',
          'Modletická',
          'Modletínská',
          'Modravská',
          'Modrá',
          'Modrého',
          'Modřanská',
          'Modřanská',
          'Modřanská',
          'Modřanská',
          'Modřínová',
          'Mohelnická',
          'Mohylová',
          'Mojmírova',
          'Mokrá',
          'Mokřanská',
          'Moldavská',
          'Molitorovská',
          'Molákova',
          'Mongolská',
          'Moravanská',
          'Moravanů',
          'Moravská',
          'Morseova',
          'Morstadtova',
          'Morušová',
          'Morušová',
          'Morávkova',
          'Moskevská',
          'Mostecká',
          'Motolská',
          'Moulíkova',
          'Moysesova',
          'Mozambická',
          'Mozartova',
          'Mošnova',
          'Možného',
          'Mramorová',
          'Mratínská',
          'Mračnická',
          'Mrkosova',
          'Mrkvičkova',
          'Mrákovská',
          'Mrázkova',
          'Mrázovka',
          'Mráčkova',
          'Mrštíkova',
          'Mrštíkova',
          'Muchomůrková',
          'Muchova',
          'Mukařovská',
          'Mukařovského',
          'Murgašova',
          'Murmanská',
          'Musilova',
          'Musorgského',
          'Musílkova',
          'Mutěnínská',
          'Muzejní',
          'Muzikova',
          'Muškova',
          'Mydlářka',
          'Myjavská',
          'Mylnerovka',
          'Myslbekova',
          'Myslbekova',
          'Myslivecká',
          'Myslivečkova',
          'Myslíkova',
          'Myslíkova',
          'Myšlínská',
          'Máchova',
          'Máchova',
          'Mádrova',
          'Májovková',
          'Májová',
          'Málkovská',
          'Mánesova',
          'Márova',
          'Máslova',
          'Máslovická',
          'Mátová',
          'Mílovská',
          'Mílová',
          'Mírová',
          'Mírového Hnutí',
          'Mírového Hnutí',
          'Místecká',
          'Míčova',
          'Míšeňská',
          'Míšovická',
          'Münzbergerových',
          'Mýtní',
          'Měchenická',
          'Měcholupská',
          'Měděnecká',
          'Mělická',
          'Mělnická',
          'Městská',
          'Měsíčková',
          'Měsíční',
          'Měšická',
          'Měšínská',
          'Mšecká',
          'Mšenská',
          'N. A. Někrasova',
          'Na Babách',
          'Na Babě',
          'Na Bahnech',
          'Na Balkáně',
          'Na Balkáně',
          'Na Bambouzku',
          'Na Baních',
          'Na Barikádách',
          'Na Bartoňce',
          'Na Bateriích',
          'Na Bateriích',
          'Na Bačálkách',
          'Na Baště Sv. Jiří',
          'Na Baště Sv. Ludmily',
          'Na Baště Sv. Tomáše',
          'Na Bendovce',
          'Na Benátkách',
          'Na Beránce',
          'Na Betonce',
          'Na Bečvářce',
          'Na Bitevní Pláni',
          'Na Blanici',
          'Na Blanseku',
          'Na Blatech',
          'Na Bluku',
          'Na Bohdalci',
          'Na Bojišti',
          'Na Boleslavce',
          'Na Borovém',
          'Na Botiči',
          'Na Botě',
          'Na Božkovně',
          'Na Brabenci',
          'Na Brázdě',
          'Na Bučance',
          'Na Bělici',
          'Na Bělidle',
          'Na Bělohorské Pláni',
          'Na Břehu',
          'Na Břevnovské Pláni',
          'Na Březince',
          'Na Celné',
          'Na Cestě',
          'Na Chmelnici',
          'Na Chobotě',
          'Na Chodovci',
          'Na Chvalce',
          'Na Chvalské Tvrzi',
          'Na Cihelně',
          'Na Cihlářce',
          'Na Cikorce',
          'Na Cikánce',
          'Na Cimbále',
          'Na Cípu',
          'Na Císařce',
          'Na Dionysce',
          'Na Dlouhé Mezi',
          'Na Dlouhé Mezi',
          'Na Dlouhé Mezi',
          'Na Dlouhé Mezi',
          'Na Dlouhém Lánu',
          'Na Dlážděnce',
          'Na Dlážděnce',
          'Na Dlážděnce',
          'Na Dlážděnce',
          'Na Dobešce',
          'Na Dobré Vodě',
          'Na Dolinách',
          'Na Dolinách',
          'Na Dolnici',
          'Na Dolíku',
          'Na Domovině',
          'Na Doubkové',
          'Na Drahách',
          'Na Dračkách',
          'Na Dračkách',
          'Na Dražkách',
          'Na Dubině',
          'Na Dvorcích',
          'Na Dyrince',
          'Na Dílcích',
          'Na Dílech',
          'Na Dědince',
          'Na Dědinách',
          'Na Děkance',
          'Na Děkance',
          'Na Dělostřílnách',
          'Na Džbánu',
          'Na Fabiánce',
          'Na Farkách',
          'Na Farkáně I',
          'Na Farkáně Ii',
          'Na Farkáně Iii',
          'Na Farkáně Iv',
          'Na Fialce I',
          'Na Fialce Ii',
          'Na Fidlovačce',
          'Na Fišerce',
          'Na Florenci',
          'Na Florenci',
          'Na Floře',
          'Na Folimance',
          'Na Formance',
          'Na Františku',
          'Na Groši',
          'Na Habrovce',
          'Na Habrové',
          'Na Hanspaulce',
          'Na Harfě',
          'Na Havránce',
          'Na Hlavní',
          'Na Hlinách',
          'Na Hloubětínské Vinici',
          'Na Hlídce',
          'Na Holém Vrchu',
          'Na Homolce',
          'Na Homoli',
          'Na Horce',
          'Na Horkách',
          'Na Hradním Vodovodu',
          'Na Hranicích',
          'Na Hranicích',
          'Na Hrobci',
          'Na Hroudě',
          'Na Hroudě',
          'Na Hrádku',
          'Na Hrázi',
          'Na Hubálce',
          'Na Humnech',
          'Na Hupech',
          'Na Hutmance',
          'Na Hutích',
          'Na Hutích',
          'Na Hvížďalce',
          'Na Hvězdárně',
          'Na Hádku',
          'Na Hájku',
          'Na Hřebenech I',
          'Na Hřebenech Ii',
          'Na Hřebenech Ii',
          'Na Hřebenkách',
          'Na Hůrce',
          'Na Jabloňce',
          'Na Jabloňce',
          'Na Jahodách',
          'Na Jarově',
          'Na Jelenách',
          'Na Jelenách',
          'Na Jetelce',
          'Na Jetelce',
          'Na Jezerce',
          'Na Jezerách',
          'Na Jitřence',
          'Na Jivinách',
          'Na Julisce',
          'Na Jílech',
          'Na Jílu',
          'Na Kameni',
          'Na Kampě',
          'Na Kapličce',
          'Na Karlovce',
          'Na Kavčích Horách',
          'Na Kazance',
          'Na Kačence',
          'Na Kačerově',
          'Na Kindlovce',
          'Na Klaudiánce',
          'Na Klaudiánce',
          'Na Kleovce',
          'Na Klikovce',
          'Na Klimentce',
          'Na Klášterním',
          'Na Klínech',
          'Na Klínech',
          'Na Klínku',
          'Na Knížce',
          'Na Kocourkách',
          'Na Kocínce',
          'Na Kodymce',
          'Na Kolejním Statku',
          'Na Komořsku',
          'Na Komořsku',
          'Na Konci',
          'Na Konečné',
          'Na Konvářce',
          'Na Kopanině',
          'Na Kopci',
          'Na Kopečku',
          'Na Kopytářce',
          'Na Korunce',
          'Na Korábě',
          'Na Korálově',
          'Na Kotlářce',
          'Na Koupaliště',
          'Na Kovárně',
          'Na Kozačce',
          'Na Kozinci',
          'Na Košince',
          'Na Košíku',
          'Na Kraji',
          'Na Krocínce',
          'Na Krutci',
          'Na Královce',
          'Na Královně',
          'Na Krčské Stráni',
          'Na Kuthence',
          'Na Kvintusce',
          'Na Květnici',
          'Na Kyjově',
          'Na Křemínku',
          'Na Křenkově',
          'Na Křečku',
          'Na Křivce',
          'Na Křivce',
          'Na Křivce',
          'Na Křivině',
          'Na Křtině',
          'Na Křídle',
          'Na Labuťce',
          'Na Labuťce I',
          'Na Labuťce Ii',
          'Na Labuťce Iii',
          'Na Labuťce Iv',
          'Na Ladách',
          'Na Lahovské',
          'Na Laurové',
          'Na Lepším',
          'Na Lhotech',
          'Na Lhotkách',
          'Na Libušince',
          'Na Losách',
          'Na Louce',
          'Na Loukoti',
          'Na Louži',
          'Na Loužku',
          'Na Luka',
          'Na Lukách',
          'Na Luzích',
          'Na Lučinách',
          'Na Lužci',
          'Na Lysinách',
          'Na Lysině',
          'Na Ládví',
          'Na Lánech',
          'Na Lávce',
          'Na Lázeňce',
          'Na Líše',
          'Na Malovance',
          'Na Malé Šárce',
          'Na Malém Klínu',
          'Na Maninách',
          'Na Manoušce',
          'Na Markvartce',
          'Na Marně',
          'Na Mezi',
          'Na Mlejnku',
          'Na Moklině',
          'Na Mokřině',
          'Na Moráni',
          'Na Močále',
          'Na Mrázovce',
          'Na Musilech',
          'Na Mírách',
          'Na Míčánce',
          'Na Míčánkách',
          'Na Mýtě',
          'Na Můstku',
          'Na Neklance',
          'Na Nežárce',
          'Na Nivách',
          'Na Novině',
          'Na Nové Silnici',
          'Na Náspu',
          'Na Návrati',
          'Na Návrší',
          'Na Návsi',
          'Na Obrátce',
          'Na Obrátce',
          'Na Odbočce',
          'Na Ohradě',
          'Na Okraji',
          'Na Okraji',
          'Na Okrouhlíku',
          'Na Okruhu',
          'Na Opyši',
          'Na Opyši',
          'Na Ostrohu',
          'Na Ostrově',
          'Na Ostrůvku',
          'Na Ovesníku',
          'Na Ovčinách',
          'Na Ovčáckém',
          'Na Ovčíně',
          'Na Ořechovce',
          'Na Padesátníku I',
          'Na Padesátníku Ii',
          'Na Padesátníku Iii',
          'Na Padesátníku Iv',
          'Na Padesátníku V',
          'Na Padesátém',
          'Na Pahorku',
          'Na Pahoubce',
          'Na Palouku',
          'Na Paloučku',
          'Na Pankráci',
          'Na Panorámě',
          'Na Parcelách',
          'Na Parkáně',
          'Na Parukářce',
          'Na Pasece',
          'Na Pasece',
          'Na Pastvinách',
          'Na Pavím Vrchu',
          'Na Pazderce',
          'Na Pecích',
          'Na Pernikářce',
          'Na Perštýně',
          'Na Petynce',
          'Na Petynce',
          'Na Petřinách',
          'Na Petřinách',
          'Na Placích',
          'Na Planině',
          'Na Plužině',
          'Na Plzeňce',
          'Na Plácku',
          'Na Pláni',
          'Na Plískavě',
          'Na Podkovce',
          'Na Pokraji',
          'Na Pokraji',
          'Na Poli',
          'Na Polníku',
          'Na Pomezí',
          'Na Pomezí',
          'Na Popelce',
          'Na Popelce',
          'Na Potůčku',
          'Na Poustkách',
          'Na Pozorce',
          'Na Poříčním Právu',
          'Na Poříčí',
          'Na Poříčí',
          'Na Požáru',
          'Na Požáru',
          'Na Pramenech',
          'Na Pramenech',
          'Na Prosecké Vyhlídce',
          'Na Proseku',
          'Na Prostřední Cestě',
          'Na Proutcích',
          'Na Provaznici',
          'Na Průhonu',
          'Na Průseku',
          'Na Pučálce',
          'Na Pískovně',
          'Na Písku',
          'Na Pískách',
          'Na Pěkné Vyhlídce',
          'Na Pěšinách',
          'Na Pěšinách',
          'Na Pěšině',
          'Na Předevsi',
          'Na Přesypu',
          'Na Přesypu',
          'Na Přídole',
          'Na Příkopě',
          'Na Příkopě',
          'Na Přívozích',
          'Na Příčce',
          'Na Příčné Mezi',
          'Na Radosti',
          'Na Radosti',
          'Na Rampách',
          'Na Rejdišti',
          'Na Roháčku',
          'Na Rokytce',
          'Na Rolích',
          'Na Rovinách',
          'Na Rovině',
          'Na Rovni',
          'Na Rovnosti',
          'Na Rovném',
          'Na Rozcestí',
          'Na Rozdílu',
          'Na Rozdílu',
          'Na Rozhledu',
          'Na Rozhraní',
          'Na Rozhraní',
          'Na Rozvodí',
          'Na Ročkově',
          'Na Rybníčku',
          'Na Rybářce',
          'Na Rybářce',
          'Na Rymáni',
          'Na Rynku',
          'Na Salabce',
          'Na Samotě',
          'Na Schodech',
          'Na Schůdkách',
          'Na Sedlišti',
          'Na Sekyrce',
          'Na Selském',
          'Na Seníku',
          'Na Skalce',
          'Na Skalách',
          'Na Sklonku',
          'Na Skále',
          'Na Slatince',
          'Na Slatinách',
          'Na Slatinách',
          'Na Slatinách',
          'Na Slavíkově',
          'Na Slovance',
          'Na Slupi',
          'Na Slupi',
          'Na Smetance',
          'Na Souvrati',
          'Na Souvrati',
          'Na Spojce',
          'Na Spádu',
          'Na Spáleništi',
          'Na Srpečku',
          'Na Srázu',
          'Na Srážku',
          'Na Staré',
          'Na Staré Cestě',
          'Na Staré Návsi',
          'Na Staré Silnici',
          'Na Staré Vinici',
          'Na Stezce',
          'Na Stezce',
          'Na Struze',
          'Na Stráni',
          'Na Stráňkách',
          'Na Stráži',
          'Na Stráži',
          'Na Strži',
          'Na Strži',
          'Na Stupních',
          'Na Stárce',
          'Na Stírce',
          'Na Střelnici',
          'Na Svahu',
          'Na Svěcence',
          'Na Sychrově',
          'Na Sychrově',
          'Na Sypkém',
          'Na Sypčině',
          'Na Sádce',
          'Na Terase',
          'Na Topolce',
          'Na Topolce',
          'Na Truhlářce',
          'Na Tržišti',
          'Na Tykačce',
          'Na Táboře',
          'Na Třebešíně',
          'Na Třebešíně',
          'Na Universitním Statku',
          'Na Usedlosti',
          'Na Vackově',
          'Na Valech',
          'Na Valentince',
          'Na Vartě',
          'Na Vaňhově',
          'Na Veselí',
          'Na Vidouli',
          'Na Viktorce',
          'Na Vinici',
          'Na Viničce',
          'Na Viničkách',
          'Na Viničních Horách',
          'Na Vinobraní',
          'Na Vinohradu',
          'Na Višňovce',
          'Na Vlasačce',
          'Na Vlastní Půdě',
          'Na Vlastním',
          'Na Vlku',
          'Na Vlčovce',
          'Na Volánové',
          'Na Vrchmezí',
          'Na Vrchmezí',
          'Na Vrchmezí',
          'Na Vrcholu',
          'Na Vrchu',
          'Na Vrchu',
          'Na Vrchách',
          'Na Vrchách',
          'Na Vrstevnici',
          'Na Vrstvách',
          'Na Vršku',
          'Na Vrškách',
          'Na Vrších',
          'Na Vrších',
          'Na Vydrholci',
          'Na Vyhlídce',
          'Na Vypichu',
          'Na Vypichu',
          'Na Vysoké I',
          'Na Vysoké I',
          'Na Vysoké Ii',
          'Na Vysočanských Vinicích',
          'Na Vysočině',
          'Na Václavce',
          'Na Vápence',
          'Na Vápenném',
          'Na Vítězné Pláni',
          'Na Výběžku',
          'Na Výhledech',
          'Na Výhonku',
          'Na Výrovně',
          'Na Výsledku I',
          'Na Výsledku Ii',
          'Na Výsluní',
          'Na Výspě',
          'Na Výspě',
          'Na Výstupu',
          'Na Výtoni',
          'Na Výši',
          'Na Výšince',
          'Na Výšinách',
          'Na Výšině',
          'Na Věnečku',
          'Na Větrníku',
          'Na Větrníku',
          'Na Větrově',
          'Na Větru',
          'Na Zahrádkách',
          'Na Zatlance',
          'Na Zavadilce',
          'Na Zbořenci',
          'Na Zderaze',
          'Na Zedníkové',
          'Na Zelené Louce',
          'Na Zemance',
          'Na Zkratce',
          'Na Zlatnici',
          'Na Zlaté',
          'Na Zlíchově',
          'Na Zlíchově',
          'Na Zmrzlíku',
          'Na Znělci',
          'Na Zvoničce',
          'Na Zábradlí',
          'Na Záhonech',
          'Na Zájezdu',
          'Na Zámecké',
          'Na Zámkách',
          'Na Zámyšli',
          'Na Zástřelu',
          'Na Zástřelu',
          'Na Zátorce',
          'Na Zátorách',
          'Na Závěji',
          'Na Úbočí',
          'Na Úhoru',
          'Na Úlehli',
          'Na Úseku',
          'Na Úspěchu',
          'Na Černé Hoře',
          'Na Černé Strouze',
          'Na Černém Vrchu',
          'Na Července',
          'Na Čečeličce',
          'Na Čihadle',
          'Na Čisté',
          'Na Říháku',
          'Na Šabatce',
          'Na Šachtě',
          'Na Šafránce',
          'Na Šancích',
          'Na Šedivé',
          'Na Šejdru',
          'Na Šejdru',
          'Na Šmukýřce',
          'Na Špejcharu',
          'Na Špitálce',
          'Na Špitálsku',
          'Na Štamberku',
          'Na Štěpnici',
          'Na Šubě',
          'Na Šumavě',
          'Na Šutce',
          'Na Švihance',
          'Na Šťáhlavce',
          'Na Žertvách',
          'Na Žvahově',
          'Naardenská',
          'Nad Akcízem',
          'Nad Akáty',
          'Nad Alejí',
          'Nad Belvederem',
          'Nad Belárií',
          'Nad Berounkou',
          'Nad Bertramkou',
          'Nad Botičem',
          'Nad Bořislavkou',
          'Nad Bořislavkou',
          'Nad Branickým Pivovarem',
          'Nad Brůdkem',
          'Nad Brůdkem',
          'Nad Buďánkami I',
          'Nad Buďánkami Ii',
          'Nad Buďánkami Iii',
          'Nad Cementárnou',
          'Nad Chaloupkami',
          'Nad Chuchlí',
          'Nad Cihelnou',
          'Nad Dalejským Údolím',
          'Nad Doly',
          'Nad Dolíky',
          'Nad Drahou',
          'Nad Dubovým Mlýnem',
          'Nad Dvorem',
          'Nad Dálnicí',
          'Nad Elektrárnou',
          'Nad Elektrárnou',
          'Nad Flajšnerkou',
          'Nad Habrovkou',
          'Nad Havlem',
          'Nad Helmrovkou',
          'Nad Hercovkou',
          'Nad Hercovkou',
          'Nad Hliníkem',
          'Nad Hliníkem',
          'Nad Horizontem',
          'Nad Hradním Potokem',
          'Nad Hradním Vodojemem',
          'Nad Husovými Sady',
          'Nad Hutěmi',
          'Nad Hutěmi',
          'Nad Hájem',
          'Nad Hřištěm',
          'Nad Jenerálkou',
          'Nad Jetelkou',
          'Nad Jezem',
          'Nad Jezerkou',
          'Nad Jordánkem',
          'Nad Kajetánkou',
          'Nad Kamínkou',
          'Nad Kaplankou',
          'Nad Kapličkou',
          'Nad Kavalírkou',
          'Nad Kazankou',
          'Nad Kazínem',
          'Nad Kelerkou',
          'Nad Kesnerkou',
          'Nad Klamovkou',
          'Nad Klikovkou',
          'Nad Klíčovem',
          'Nad Kolonií',
          'Nad Kolčavkou',
          'Nad Komornickou',
          'Nad Konečnou',
          'Nad Konvářkou',
          'Nad Kostelem',
          'Nad Kotlaskou I',
          'Nad Kotlaskou Ii',
          'Nad Kotlaskou Iii',
          'Nad Kotlaskou Iv',
          'Nad Kotlaskou V',
          'Nad Koulkou',
          'Nad Koupadly',
          'Nad Koupalištěm',
          'Nad Košinkou',
          'Nad Košíkem',
          'Nad Krocínkou',
          'Nad Krocínkou',
          'Nad Královskou Oborou',
          'Nad Kuliškou',
          'Nad Kundratkou',
          'Nad Kundratkou',
          'Nad Kundratkou',
          'Nad Křížkem',
          'Nad Laurovou',
          'Nad Lesem',
          'Nad Lesním Divadlem',
          'Nad Lesíkem',
          'Nad Libeňským Nádražím',
          'Nad Libeřským Potokem',
          'Nad Libušským Potokem',
          'Nad Libří',
          'Nad Lomem',
          'Nad Lomy',
          'Nad Lukami',
          'Nad Lávkou',
          'Nad Malým Mýtem',
          'Nad Manovkou',
          'Nad Markytou',
          'Nad Mazankou',
          'Nad Meandry',
          'Nad Mlynářkou',
          'Nad Mlýnem',
          'Nad Mlýnským Potokem',
          'Nad Mohylou',
          'Nad Mokřinou',
          'Nad Mostem',
          'Nad Motolskou Nemocnicí',
          'Nad Motolskou Nemocnicí',
          'Nad Mrázovkou',
          'Nad Mušlovkou',
          'Nad Mušlovkou',
          'Nad Novou Libní',
          'Nad Nuslemi',
          'Nad Nádražím',
          'Nad Nádrží',
          'Nad Náhonem',
          'Nad Náměstím',
          'Nad Návsí',
          'Nad Obcí I',
          'Nad Obcí Ii',
          'Nad Octárnou',
          'Nad Odbočkou',
          'Nad Ohradou',
          'Nad Okrouhlíkem',
          'Nad Olšinami',
          'Nad Olšinami',
          'Nad Ondřejovem',
          'Nad Opatovem',
          'Nad Ostrovem',
          'Nad Pahorkem',
          'Nad Palatou',
          'Nad Panenskou',
          'Nad Parkem',
          'Nad Parkánem',
          'Nad Paťankou',
          'Nad Pentlovkou',
          'Nad Petruskou',
          'Nad Petynkou',
          'Nad Plynovodem',
          'Nad Podbabskou Skálou',
          'Nad Pomníkem',
          'Nad Popelkou',
          'Nad Popelářkou',
          'Nad Potůčkem',
          'Nad Prahou',
          'Nad Pramenem',
          'Nad Primaskou',
          'Nad Primaskou',
          'Nad Propustí',
          'Nad Pruhy',
          'Nad Pískovnou',
          'Nad Přehradou',
          'Nad Přívozem',
          'Nad Radotínem',
          'Nad Rohatci',
          'Nad Roklí',
          'Nad Rokoskou',
          'Nad Rokytkou',
          'Nad Rybníkem',
          'Nad Rybníkem',
          'Nad Rybníčky',
          'Nad Ryšánkou',
          'Nad Rážákem',
          'Nad Sadem',
          'Nad Sady',
          'Nad Santoškou',
          'Nad Schody',
          'Nad Skálou',
          'Nad Slávií',
          'Nad Slávií',
          'Nad Smetankou',
          'Nad Sokolovnou',
          'Nad Soutokem',
          'Nad Soutokem',
          'Nad Splavem',
          'Nad Spádem',
          'Nad Spáleným Mlýnem',
          'Nad Stanicí',
          'Nad Starou Pískovnou',
          'Nad Statkem',
          'Nad Strakovkou',
          'Nad Strouhou',
          'Nad Strání',
          'Nad Strání',
          'Nad Studánkou',
          'Nad Svahem',
          'Nad Sýpkou',
          'Nad Tejnkou',
          'Nad Teplárnou',
          'Nad Topoly',
          'Nad Tratí',
          'Nad Trnkovem',
          'Nad Trojou',
          'Nad Turbovou',
          'Nad Třebešínem I',
          'Nad Třebešínem Ii',
          'Nad Třebešínem Ii',
          'Nad Třebešínem Iii',
          'Nad Třebešínem Iii',
          'Nad Vavrouškou',
          'Nad Vernerákem',
          'Nad Vinicí',
          'Nad Vinným Potokem',
          'Nad Vinným Potokem',
          'Nad Vinným Potokem',
          'Nad Vinohradem',
          'Nad Višňovkou',
          'Nad Vltavou',
          'Nad Vodovodem',
          'Nad Vodovodem',
          'Nad Vojenským Hřbitovem',
          'Nad Vokolky',
          'Nad Volyňkou',
          'Nad Vrbami',
          'Nad Vrstvami',
          'Nad Vršovskou Horou',
          'Nad Vsí',
          'Nad Vysočany',
          'Nad Václavkou',
          'Nad Výpustí',
          'Nad Výšinkou',
          'Nad Zahradnictvím',
          'Nad Zatáčkou',
          'Nad Zavážkou',
          'Nad Zbraslaví',
          'Nad Zbrojnicí',
          'Nad Zemankou',
          'Nad Zemankou',
          'Nad Zlatnicí',
          'Nad Zlíchovem',
          'Nad Záložnou',
          'Nad Zámečkem',
          'Nad Zámečnicí',
          'Nad Zátiším',
          'Nad Závodištěm',
          'Nad Závěrkou',
          'Nad Údolím',
          'Nad Údolím Hvězd',
          'Nad Úpadem',
          'Nad Úvozem',
          'Nad Úžlabinou',
          'Nad Úžlabinou',
          'Nad Šafránkou',
          'Nad Šancemi',
          'Nad Šauerovými Sady',
          'Nad Šeberákem',
          'Nad Šejdrem',
          'Nad Šestikopy',
          'Nad Šetelkou',
          'Nad Štolou',
          'Nad Šutkou',
          'Nad Šálkovnou',
          'Nad Šárkou',
          'Nad Želivkou',
          'Nad Žlábkem',
          'Nademlejnská',
          'Nadějovská',
          'Narcisová',
          'Naskové',
          'Natanaelka',
          'Navarova',
          'Navigátorů',
          'Navrátilova',
          'Načeradecká',
          'Načešická',
          'Neapolská',
          'Nebeského',
          'Nebovidská',
          'Nebozízek-Sady',
          'Nebušická',
          'Nechanická',
          'Nechanského',
          'Nechvalická',
          'Nechvílova',
          'Nechybova',
          'Nedašovská',
          'Nedbalova',
          'Nedokončená',
          'Nedokončená',
          'Nedošínské',
          'Nedražická',
          'Nedvědická',
          'Nedvědovo Nám.',
          'Nedvědovo Náměstí',
          'Nedvězská',
          'Neffova',
          'Nefritová',
          'Neherovská',
          'Nehvizdská',
          'Nehvizdská',
          'Nejdkova',
          'Neklanova',
          'Nekvasilova',
          'Nekázanka',
          'Nemocniční',
          'Nemošická',
          'Nepasické Nám.',
          'Nepasické Náměstí',
          'Nepelova',
          'Nepilova',
          'Nepomucká',
          'Nepomuckých',
          'Nepovolená',
          'Nepravidelná',
          'Neprůjezdná',
          'Nepálská',
          'Neratovická',
          'Nerudova',
          'Nerudova',
          'Nesměřická',
          'Nespecká',
          'Nesvadbova',
          'Netlucká',
          'Netluky',
          'Netolická',
          'Netušilská',
          'Netínská',
          'Netřebická',
          'Netřebská',
          'Neumannova',
          'Neustupného',
          'Neužilova',
          'Nevanova',
          'Neveklovská',
          'Newtonova',
          'Nezamyslova',
          'Nezdova',
          'Nezvalova',
          'Nečova',
          'Nešporova',
          'Nežárská',
          'Nickerleho',
          'Niederleho',
          'Nikodémova',
          'Nikoly Tesly',
          'Nikoly Vapcarova',
          'Niská',
          'Nitranská',
          'Nitranská',
          'Nivnická',
          'Nobelova',
          'Norbertov',
          'Norská',
          'Nosická',
          'Nosticova',
          'Notečská',
          'Noutonická',
          'Nouzov',
          'Nouzovské Nám.',
          'Nouzovské Náměstí',
          'Nouzová',
          'Novgorodská',
          'Novobohdalecká',
          'Novoborská',
          'Novoborská',
          'Novochuchelská',
          'Novodvorská',
          'Novodvorská',
          'Novodvorská',
          'Novodvorská',
          'Novohradská',
          'Novohrádecká',
          'Novohrádecká',
          'Novolhotská',
          'Novolipanská',
          'Novomeského',
          'Novomeského',
          'Novomlýnská',
          'Novopacká',
          'Novopetrovická',
          'Novorossijská',
          'Novosibřinská',
          'Novostrašnická',
          'Novosuchdolská',
          'Novosvětská',
          'Novotného Lávka',
          'Novoveská',
          'Novoveská',
          'Novovysočanská',
          'Novovysočanská',
          'Novovysočanská',
          'Novozámecká',
          'Novozámecká',
          'Novoškolská',
          'Novoštěrboholská',
          'Nová',
          'Nová Cesta',
          'Nová Kolonie',
          'Nová Ves',
          'Nová Ves',
          'Nová Šárka',
          'Novákovo Nám.',
          'Novákovo Náměstí',
          'Novákových',
          'Nové Domy',
          'Nové Dvory',
          'Nové Mlýny',
          'Nové Náměstí',
          'Nového',
          'Nový Lesík',
          'Nový Svět',
          'Nový Zlíchov',
          'Nový Zlíchov',
          'Nupacká',
          'Nuselská',
          'Nuselská',
          'Nučická',
          'Nušlova',
          'Nymburská',
          'Nábř. Edvarda Beneše',
          'Nábř. Edvarda Beneše',
          'Nábř. Edvarda Beneše',
          'Nábř. Kapitána Jaroše',
          'Nábř. Kapitána Jaroše',
          'Nábřežní',
          'Nábřeží Edvarda Beneše',
          'Nábřeží Edvarda Beneše',
          'Nábřeží Edvarda Beneše',
          'Nábřeží Kapitána Jaroše',
          'Nábřeží Ludvíka Svobody',
          'Náchodská',
          'Nádražní',
          'Nádražní',
          'Nádvorní',
          'Náhorní',
          'Nákupní',
          'Nám. 14. Října',
          'Nám. 25. Března',
          'Nám. Antonína Pecáka',
          'Nám. Barikád',
          'Nám. Bořislavka',
          'Nám. Bratří Synků',
          'Nám. Chuchelských Bojovníků',
          'Nám. Chuchleských Bojovníků',
          'Nám. Curieových',
          'Nám. Dr. V. Holého',
          'Nám. Franze Kafky',
          'Nám. Generála Kutlvašra',
          'Nám. Hrdinů',
          'Nám. I. P. Pavlova',
          'Nám. Interbrigády',
          'Nám. Jana Palacha',
          'Nám. Jana Palacha',
          'Nám. Jiřího Berana',
          'Nám. Jiřího Z Lobkovic',
          'Nám. Jiřího Z Poděbrad',
          'Nám. Jiřího Z Poděbrad',
          'Nám. Josefa Machka',
          'Nám. Kinských',
          'Nám. Kinských',
          'Nám. Mezi Zahrádkami',
          'Nám. Na Balabence',
          'Nám. Na Farkáně',
          'Nám. Na Lužinách',
          'Nám. Na Santince',
          'Nám. Na Stráži',
          'Nám. Omladiny',
          'Nám. Osvoboditelů',
          'Nám. Padlých',
          'Nám. Pod Kaštany',
          'Nám. Pod Lípou',
          'Nám. Prezidenta Masaryka',
          'Nám. Před Bateriemi',
          'Nám. Republiky',
          'Nám. Smiřických',
          'Nám. Svatopluka Čecha',
          'Nám. Svobody',
          'Nám. U Lva',
          'Nám. U Lípy Svobody',
          'Nám. U Svatého Jiří',
          'Nám. Winstona Churchilla',
          'Nám. Českého Povstání',
          'Nám.Organizace Spojených Národ',
          'Nám.Plukovníka Vlčka',
          'Náměstí 14. Října',
          'Náměstí 25. Března',
          'Náměstí Antonína Pecáka',
          'Náměstí Barikád',
          'Náměstí Bořislavka',
          'Náměstí Bořislavka',
          'Náměstí Bratří Jandusů',
          'Náměstí Bratří Synků',
          'Náměstí Chuchelských Bojovníků',
          'Náměstí Curieových',
          'Náměstí Dr. Václava Holého',
          'Náměstí Generála Kutlvašra',
          'Náměstí Hrdinů',
          'Náměstí I. P. Pavlova',
          'Náměstí Interbrigády',
          'Náměstí Jana Palacha',
          'Náměstí Jana Palacha',
          'Náměstí Jiřího Berana',
          'Náměstí Jiřího Z Lobkovic',
          'Náměstí Jiřího Z Poděbrad',
          'Náměstí Jiřího Z Poděbrad',
          'Náměstí Josefa Machka',
          'Náměstí Junkových',
          'Náměstí Kinských',
          'Náměstí Kinských',
          'Náměstí Kosmonautů',
          'Náměstí Mezi Zahrádkami',
          'Náměstí Míru',
          'Náměstí Na Balabence',
          'Náměstí Na Farkáně',
          'Náměstí Na Lužinách',
          'Náměstí Na Santince',
          'Náměstí Na Stráži',
          'Náměstí Omladiny',
          'Náměstí Organizace Spojených Národů',
          'Náměstí Osvoboditelů',
          'Náměstí Padlých',
          'Náměstí Plukovníka Vlčka',
          'Náměstí Pod Emauzy',
          'Náměstí Pod Kaštany',
          'Náměstí Pod Lípou',
          'Náměstí Prezidenta Masaryka',
          'Náměstí Protifašistických Bojovníků',
          'Náměstí Před Bateriemi',
          'Náměstí Přátelství',
          'Náměstí Republiky',
          'Náměstí Republiky',
          'Náměstí Smiřických',
          'Náměstí Sv. Petra A Pavla',
          'Náměstí Svatopluka Čecha',
          'Náměstí Svobody',
          'Náměstí U Lva',
          'Náměstí U Lípy Svobody',
          'Náměstí U Svatého Jiří',
          'Náměstí Winstona Churchilla',
          'Náměstí Zdenky Braunerové',
          'Náměstí Českého Povstání',
          'Náplavní',
          'Náprstkova',
          'Národní',
          'Národní',
          'Národní Obrany',
          'Národních Hrdinů',
          'Nárožní',
          'Násirovo Nám.',
          'Násirovo Náměstí',
          'Nástrojářská',
          'Návazná',
          'Návršní',
          'Návětrná',
          'Návětrná',
          'Názovská',
          'Nýdecká',
          'Nýrská',
          'Nýřanská',
          'Němčická',
          'Něvská',
          'Obchodní',
          'Obchodní Nám.',
          'Obchodní Náměstí',
          'Obilní',
          'Objízdná',
          'Oblouková',
          'Obora Hvězda',
          'Oborská',
          'Obrataňská',
          'Obrovského',
          'Obsiny',
          'Obslužná',
          'Obvodová',
          'Obědovická',
          'Obětí 6. Května',
          'Obětí 6.Května',
          'Ocelkova',
          'Ocelářská',
          'Ocelářská',
          'Ocelíkova',
          'Ochozská',
          'Ochranovská',
          'Od Rozcestí',
          'Od Vysoké',
          'Od Školy',
          'Odboje',
          'Odborů',
          'Odbočná',
          'Oddechová',
          'Oddělená',
          'Oderská',
          'Odlehlá',
          'Ohmova',
          'Ohnivcova',
          'Ohnišťanská',
          'Ohradní',
          'Ohradní',
          'Ohradská',
          'Ohradské Nám.',
          'Ohradské Náměstí',
          'Ohrobecká',
          'Okenská',
          'Okořská',
          'Okrajní',
          'Okrajová',
          'Okrajová',
          'Okrasná',
          'Okrouhlická',
          'Okrouhlíkova',
          'Okrová',
          'Okruhová',
          'Okružní',
          'Okružní',
          'Okřínecká',
          'Olbrachtova',
          'Olbramovická',
          'Oldřichova',
          'Olešnická',
          'Olešská',
          'Olgy Havlové',
          'Olivova',
          'Olomoucká',
          'Olympijská',
          'Olšanská',
          'Olšanské Nám.',
          'Olšanské Náměstí',
          'Olšovická',
          'Olšová',
          'Olštýnská',
          'Omladinářů',
          'Omská',
          'Ondřejovská',
          'Ondříčkova',
          'Ondříčkova',
          'Onšovecká',
          'Opata Konráda',
          'Opatovická',
          'Opatovská',
          'Opatovská',
          'Opatřilka',
          'Opatřilka',
          'Opařanská',
          'Oplanská',
          'Opletalova',
          'Opolská',
          'Opočenská',
          'Opočínská',
          'Opravářská',
          'Opuková',
          'Opálkova',
          'Opálová',
          'Oravská',
          'Ordovická',
          'Orebitská',
          'Orelská',
          'Orlická',
          'Ortenovo Náměstí',
          'Osadní',
          'Osamocená',
          'Osecká',
          'Osetá',
          'Osická',
          'Osiková',
          'Osinalická',
          'Osluněná',
          'Osmého Listopadu',
          'Osnická',
          'Osnická',
          'Osnická',
          'Ostravická',
          'Ostravská',
          'Ostromečská',
          'Ostrov Štvanice',
          'Ostrovní',
          'Ostrovského',
          'Ostruženská',
          'Ostružinová',
          'Ostrá',
          'Ostrčilovo Nám.',
          'Ostrčilovo Náměstí',
          'Ostředecká',
          'Ostřicová',
          'Osvobození',
          'Osvětová',
          'Otakara Vrby',
          'Otakarova',
          'Otavova',
          'Otavova',
          'Otavská',
          'Otevřená',
          'Otická',
          'Otlíkovská',
          'Otopašská',
          'Otovická',
          'Otradovická',
          'Ottova',
          'Otvovická',
          'Oty Pavla',
          'Otínská',
          'Otěšínská',
          'Ouholická',
          'Ouhrabkova',
          'Ovenecká',
          'Ovenecká',
          'Ovesná',
          'Ovocná',
          'Ovocnářská',
          'Ovocný Trh',
          'Ovsíková',
          'Oválová',
          'Ovčárská',
          'Ovčí Hájek',
          'Ořechová',
          'Ořešská',
          'Paběnická',
          'Paběnická',
          'Pacajevova',
          'Paceřická',
          'Pacholíkova',
          'Pacovská',
          'Paculova',
          'Padovská',
          'Pajerova',
          'Pakoměřická',
          'Palackého',
          'Palackého Nám.',
          'Palackého Náměstí',
          'Palmetová',
          'Palmovka',
          'Paláskova',
          'Pampelišková',
          'Pancířova',
          'Panelová',
          'Panenky',
          'Panenská',
          'Pankrácké Náměstí',
          'Panská',
          'Panská Zahrada',
          'Panský Dvůr',
          'Panuškova',
          'Paprsková',
          'Papírenská',
          'Papírníkova',
          'Parašutistů',
          'Pardubická',
          'Park Přátelství',
          'Parková',
          'Parléřova',
          'Parléřova',
          'Parmská',
          'Paroplavební',
          'Partyzánská',
          'Pasecká',
          'Pasteurova',
          'Pastevců',
          'Patočkova',
          'Patočkova',
          'Patočkova',
          'Pavelkova',
          'Pavla Beneše',
          'Pavla Švandy Ze Semčic',
          'Pavlická',
          'Pavlišovská',
          'Pavlovická',
          'Pavlovská',
          'Pavlíkova',
          'Pavrovského',
          'Paříkova',
          'Pařízkova',
          'Pařížská',
          'Pařížská',
          'Paškova',
          'Paťanka',
          'Peceradská',
          'Pecharova',
          'Pechlátova',
          'Pechlátova',
          'Pecháčkova',
          'Peckova',
          'Pejevové',
          'Pekařova',
          'Pekařova',
          'Pekařská',
          'Pekárenská',
          'Pekárkova',
          'Pelclova',
          'Pelechovská',
          'Pelhřimovská',
          'Pelikánova',
          'Pelléova',
          'Pelléova',
          'Pelnářova',
          'Pelušková',
          'Pelyňková',
          'Pelzova',
          'Penízovková',
          'Perlitová',
          'Perlitová',
          'Perlová',
          'Pernerova',
          'Pernerova',
          'Peroutkova',
          'Peroutkova',
          'Peroutkova',
          'Peroutkova',
          'Perspektivní',
          'Pertoldova',
          'Perucká',
          'Perunova',
          'Perštejnská',
          'Petra Bezruče',
          'Petra Rezka',
          'Petra Slezáka',
          'Petrbokova',
          'Petrklíčová',
          'Petrohradská',
          'Petrovická',
          'Petrovská',
          'Petrská',
          'Petrské Nám.',
          'Petrské Náměstí',
          'Petráčkova',
          'Petržílkova',
          'Petržílova',
          'Petýrkova',
          'Petříkova',
          'Petříkovská',
          'Petřínská',
          'Petřínská',
          'Petřínské Sady',
          'Petřínské Sady',
          'Pevnostní',
          'Pečárková',
          'Pešinova',
          'Peškova',
          'Pešlova',
          'Pešova',
          'Peštukova',
          'Pešákova',
          'Picassova',
          'Pickova',
          'Pihelská',
          'Pikovická',
          'Pikrtova',
          'Pilařská',
          'Pilníkovská',
          'Pilotů',
          'Pilovská',
          'Pilovská',
          'Pilská',
          'Pirinská',
          'Pirnerova',
          'Pitkovická',
          'Pitterova',
          'Pivcova',
          'Pivovarnická',
          'Pivovarská',
          'Pivoňková',
          'Pištěkova',
          'Placina',
          'Placina',
          'Plajnerova',
          'Plamínkové',
          'Plaská',
          'Platanová',
          'Platnéřská',
          'Platónova',
          'Plavecká',
          'Plavínová',
          'Plačická',
          'Plaňanská',
          'Plevenská',
          'Plečnikova',
          'Plhovská',
          'Plickova',
          'Plkovská',
          'Plojharova',
          'Ploskovická',
          'Ploučnická',
          'Plovdivská',
          'Plošná',
          'Ploštilova',
          'Plukovníka Mráze',
          'Plumlovská',
          'Plutova',
          'Plynární',
          'Plzeňská',
          'Plzeňská',
          'Plzeňská',
          'Plzeňská',
          'Plzeňská',
          'Plánická',
          'Pláničkova',
          'Poberova',
          'Pobočná',
          'Pobořská',
          'Poběžovická',
          'Pobřežní',
          'Pobřežní Cesta',
          'Pod Akáty',
          'Pod Altánem',
          'Pod Altánem',
          'Pod Andělkou',
          'Pod Areálem',
          'Pod Aritmou',
          'Pod Ateliéry',
          'Pod Bahnivkou',
          'Pod Balkánem',
          'Pod Barvířkou',
          'Pod Bateriemi',
          'Pod Baštami',
          'Pod Belvederem',
          'Pod Belárií',
          'Pod Beránkem',
          'Pod Beránkou',
          'Pod Betání',
          'Pod Bohdalcem I',
          'Pod Bohdalcem I',
          'Pod Bohdalcem Ii',
          'Pod Brentovou',
          'Pod Bruskou',
          'Pod Buďánkou',
          'Pod Bání',
          'Pod Březinou',
          'Pod Chaloupkami',
          'Pod Chodovem',
          'Pod Cihelnou',
          'Pod Cihelnou',
          'Pod Cukrákem',
          'Pod Císařkou',
          'Pod Dlážděnkou',
          'Pod Domky',
          'Pod Drinopolem',
          'Pod Dráhou',
          'Pod Duby',
          'Pod Dvorem',
          'Pod Dálnicí',
          'Pod Děkankou',
          'Pod Děkankou',
          'Pod Děvínem',
          'Pod Farou',
          'Pod Fialkou',
          'Pod Formankou',
          'Pod Fořtem',
          'Pod Garážemi',
          'Pod Habrovkou',
          'Pod Habrovou',
          'Pod Haltýřem',
          'Pod Harfou',
          'Pod Havlínem',
          'Pod Havránkou',
          'Pod Havránkou',
          'Pod Hliništěm',
          'Pod Hloubětínskou Zastávkou',
          'Pod Hláskem',
          'Pod Homolkou',
          'Pod Hotelem',
          'Pod Hořavkou',
          'Pod Hrachovkou',
          'Pod Hradbami',
          'Pod Hradem',
          'Pod Hranicí',
          'Pod Hrází',
          'Pod Hvězdou',
          'Pod Hvězdárnou',
          'Pod Hvězdárnou',
          'Pod Hybšmankou',
          'Pod Hájem',
          'Pod Hájkem',
          'Pod Hájovnou',
          'Pod Hřbitovem',
          'Pod Hřištěm',
          'Pod Jalovým Dvorem',
          'Pod Jankovem',
          'Pod Jarovem',
          'Pod Javory',
          'Pod Jiráskovou Čtvrtí',
          'Pod Juliskou',
          'Pod Kamínkou',
          'Pod Kapličkou',
          'Pod Kapličkou',
          'Pod Karlovarskou Silnicí',
          'Pod Karlovem',
          'Pod Kavalírkou',
          'Pod Kaštany',
          'Pod Kaštany',
          'Pod Kesnerkou',
          'Pod Kladenskou Silnicí',
          'Pod Klamovkou',
          'Pod Klapicí',
          'Pod Klaudiánkou',
          'Pod Klikovkou',
          'Pod Kopcem',
          'Pod Kostelem',
          'Pod Kotlaskou',
          'Pod Kotlářkou',
          'Pod Kotlářkou',
          'Pod Kotlářkou',
          'Pod Krejcárkem',
          'Pod Krocínkou',
          'Pod Královkou',
          'Pod Krčským Lesem',
          'Pod Kulturním Domem',
          'Pod Kynclovkou',
          'Pod Křížem',
          'Pod Křížkem',
          'Pod Labuťkou',
          'Pod Lahovskou',
          'Pod Lesem',
          'Pod Lesíkem',
          'Pod Letištěm',
          'Pod Lečí',
          'Pod Lipami',
          'Pod Lipkami',
          'Pod Lisem',
          'Pod Lisem',
          'Pod Lochkovem',
          'Pod Lomem',
          'Pod Lysinami',
          'Pod Lázní',
          'Pod Marjánkou',
          'Pod Markétou',
          'Pod Martinem',
          'Pod Meliškou',
          'Pod Mlýnkem',
          'Pod Mohylou',
          'Pod Mostem',
          'Pod Napětím',
          'Pod Nouzovem',
          'Pod Novou Školou',
          'Pod Novým Lesem',
          'Pod Novým Lesem',
          'Pod Nuselskými Schody',
          'Pod Náměstím',
          'Pod Náplavkou',
          'Pod Náplavkou',
          'Pod Náspem',
          'Pod Návsí',
          'Pod Oborou',
          'Pod Ovčínem',
          'Pod Ořechovkou',
          'Pod Palatou',
          'Pod Palírkou',
          'Pod Parukářkou',
          'Pod Paťankou',
          'Pod Paťankou',
          'Pod Pekařkou',
          'Pod Pekárnami',
          'Pod Petřinami',
          'Pod Plynojemem',
          'Pod Plynojemem',
          'Pod Plynojemem',
          'Pod Plískavou',
          'Pod Poštou',
          'Pod Pramenem',
          'Pod Prodejnou',
          'Pod Průsekem',
          'Pod Písečnou',
          'Pod Přehradou',
          'Pod Přesypem',
          'Pod Radnicí',
          'Pod Rapidem',
          'Pod Rapidem',
          'Pod Rapidem',
          'Pod Remízkem',
          'Pod Rovinou',
          'Pod Rozvodnou',
          'Pod Rybníkem',
          'Pod Rybníčkem',
          'Pod Sady',
          'Pod Salabkou',
          'Pod Sirénou',
          'Pod Skalkou',
          'Pod Skalou',
          'Pod Sklenářkou',
          'Pod Slovany',
          'Pod Smetankou',
          'Pod Sokolovnou',
          'Pod Soutratím',
          'Pod Spalovnou',
          'Pod Spiritkou',
          'Pod Spravedlností',
          'Pod Srázem',
          'Pod Stadiony',
          'Pod Stanicí',
          'Pod Starou Školou',
          'Pod Starákem',
          'Pod Statky',
          'Pod Strašnickou Vinicí',
          'Pod Strojírnami',
          'Pod Strání',
          'Pod Studánkou',
          'Pod Stupni',
          'Pod Stárkou',
          'Pod Stárkou',
          'Pod Stírkou',
          'Pod Svahem',
          'Pod Sychrovem I',
          'Pod Sychrovem I',
          'Pod Sychrovem I',
          'Pod Sychrovem Ii',
          'Pod Sídlištěm',
          'Pod Terasami',
          'Pod Terebkou',
          'Pod Topoly',
          'Pod Tratí',
          'Pod Turnovskou Tratí',
          'Pod Turnovskou Tratí',
          'Pod Táborem',
          'Pod Táborem',
          'Pod Třebešínem',
          'Pod Třešněmi',
          'Pod Třešňovkou',
          'Pod Urnovým Hájem',
          'Pod Valem',
          'Pod Vartou',
          'Pod Vavřincem',
          'Pod Velkým Hájem',
          'Pod Viaduktem',
          'Pod Vidoulí',
          'Pod Viktorkou',
          'Pod Vilami',
          'Pod Vinicemi',
          'Pod Vinicí',
          'Pod Vinohradem',
          'Pod Višňovkou',
          'Pod Vlachovkou',
          'Pod Vlastním Krovem',
          'Pod Vlkem',
          'Pod Vodojemem',
          'Pod Vodovodem',
          'Pod Vodárenskou Věží',
          'Pod Vrchem',
          'Pod Vrcholem',
          'Pod Vrstevnicí',
          'Pod Vrškem',
          'Pod Vrškem',
          'Pod Vršovickou Vodárnou I',
          'Pod Vršovickou Vodárnou Ii',
          'Pod Vršovickou Vodárnou Iii',
          'Pod Vsí',
          'Pod Vyhlídkou',
          'Pod Vysokou',
          'Pod Vysokou Mezí',
          'Pod Vysílačkou',
          'Pod Vyšehradem',
          'Pod Václavem',
          'Pod Vítkovem',
          'Pod Výtopnou',
          'Pod Výšinkou',
          'Pod Větrolamem',
          'Pod Větrovem',
          'Pod Věží',
          'Pod Zahradami',
          'Pod Zahrádkami',
          'Pod Zastávkou',
          'Pod Zatáčkou',
          'Pod Zbuzany',
          'Pod Zemankou',
          'Pod Zličínem',
          'Pod Zvonařkou',
          'Pod Zvoničkou',
          'Pod Zámečkem',
          'Pod Závěrkou',
          'Pod Útesy',
          'Pod Čertovou Skalou',
          'Pod Čihadlem',
          'Pod Čimickým Hájem',
          'Pod Šancemi',
          'Pod Školou',
          'Pod Šmukýřkou',
          'Pod Špejcharem',
          'Pod Špitálem',
          'Pod Štěpem',
          'Pod Žvahovem',
          'Podbabská',
          'Podbabská',
          'Podbělohorská',
          'Podbělová',
          'Podchýšská',
          'Podedvorská',
          'Podhajská Pole',
          'Podholí',
          'Podhorská',
          'Podhořská',
          'Podivínská',
          'Podjavorinské',
          'Podjezd',
          'Podkovářská',
          'Podkrkonošská',
          'Podkrkonošských Tkalců',
          'Podle Kačerova',
          'Podle Lomu',
          'Podle Lomu',
          'Podle Náhonu',
          'Podle Náhonu',
          'Podle Sadů',
          'Podle Trati',
          'Podlesek',
          'Podleská',
          'Podlesní',
          'Podlešínská',
          'Podlibská',
          'Podlipného',
          'Podlišovská',
          'Podlužanská',
          'Podléšková',
          'Podnikatelská',
          'Podnádražní',
          'Podohradská',
          'Podolanská',
          'Podolská',
          'Podolská',
          'Podolské Nábř.',
          'Podolské Nábřeží',
          'Podolské Schody',
          'Podpěrova',
          'Podskalská',
          'Podsychrovská',
          'Podvinný Mlýn',
          'Podvinný Mlýn',
          'Podzámecká',
          'Podéšťova',
          'Poděbradova',
          'Poděbradova',
          'Poděbradská',
          'Poděbradská',
          'Poděbradská',
          'Podůlší',
          'Pohledná',
          'Pohnertova',
          'Pohořelec',
          'Pohořelec',
          'Pokojná',
          'Pokorného',
          'Pokřivená',
          'Polabská',
          'Polabská',
          'Polaneckého',
          'Polední',
          'Polední',
          'Polenská',
          'Polepská',
          'Poleradská',
          'Polesná',
          'Polešovická',
          'Politických Vězňů',
          'Poličanská',
          'Poljanovova',
          'Polní',
          'Polovnická',
          'Polská',
          'Polygrafická',
          'Polákova',
          'Poláčkova',
          'Políkenská',
          'Polívkova',
          'Pomezní',
          'Pomněnková',
          'Pomořanská',
          'Ponrepova',
          'Poplužní',
          'Popovická',
          'Popovova',
          'Poslední',
          'Pospíchalova',
          'Pospíšilova',
          'Postlova',
          'Postranní',
          'Postupická',
          'Postřekovská',
          'Postřižínská',
          'Postřižínská',
          'Potocká',
          'Potoční',
          'Pouchova',
          'Poupětova',
          'Poustka',
          'Povltavská',
          'Povltavská',
          'Povltavská',
          'Povodňová',
          'Pozdeňská',
          'Poznaňská',
          'Počeradská',
          'Počernická',
          'Počernická',
          'Počátecká',
          'Počátecká',
          'Poříčanská',
          'Poříčanská',
          'Poříčská',
          'Pošepného Nám.',
          'Pošepného Náměstí',
          'Poštovská',
          'Požárnická',
          'Pplk. Nováčka',
          'Pplk. Sochora',
          'Prachatická',
          'Prachnerova',
          'Prachovická',
          'Prachovská',
          'Pramenná',
          'Pramenná',
          'Pravoúhlá',
          'Pravská',
          'Pravá',
          'Prašná',
          'Pražská',
          'Pražského',
          'Pražského Povstání',
          'Pražský Okruh',
          'Pražákovská',
          'Prefátova',
          'Preislerova',
          'Preláta',
          'Prelátská',
          'Preslova',
          'Primátorská',
          'Probluzská',
          'Proboštská',
          'Procházkova',
          'Prodloužená',
          'Prokofjevova',
          'Prokopka',
          'Prokopova',
          'Prokopovo Nám.',
          'Prokopovo Náměstí',
          'Prokopových',
          'Prokopská',
          'Prokopské Údolí',
          'Prokopské Údolí',
          'Prorektorská',
          'Prosecká',
          'Prosecká',
          'Prosecká',
          'Prosincová',
          'Prosluněná',
          'Prosná',
          'Prostřední',
          'Proti Proudu',
          'Protilehlá',
          'Protivínská',
          'Proutěná',
          'Prouzova',
          'Provaznická',
          'Provozní',
          'Prunéřovská',
          'Prusická',
          'Prusíkova',
          'Prušánecká',
          'Prvního Pluku',
          'Prvního Pluku',
          'Prvomájová',
          'Prácheňská',
          'Práčská',
          'Průběžná',
          'Průchodní',
          'Průchova',
          'Průhledová',
          'Průhonek',
          'Průhonek',
          'Průhonická',
          'Průhonská',
          'Průjezdná',
          'Průmyslová',
          'Průmyslová',
          'Průmyslová',
          'Průmyslová',
          'Průtažní',
          'Průčelní',
          'Průškova',
          'Psohlavců',
          'Pstružná',
          'Psárská',
          'Ptáčnická',
          'Puchmajerova',
          'Puchmajerova',
          'Pujmanové',
          'Pujmanové',
          'Pujmanové',
          'Purkrabská',
          'Purkyňova',
          'Putimská',
          'Pučova',
          'Puškinovo Nám.',
          'Puškinovo Náměstí',
          'Pyšelská',
          'Pálavská',
          'Pálkařská',
          'Pámelníková',
          'Pánkova',
          'Pátkova',
          'Pávovské Náměstí',
          'Písecká',
          'Píseckého',
          'Písečná',
          'Pískařská',
          'Pískovcová',
          'Pískovna',
          'Písková',
          'Písnická',
          'Písnická',
          'Písnické Zahrady',
          'Písčitá',
          'Píškova',
          'Píšovická',
          'Pöslova',
          'Púchovská',
          'Púchovská',
          'Pýchavková',
          'Pýrová',
          'Pěnkaví',
          'Pěstitelská',
          'Pětidomí',
          'Pětipeského',
          'Pěší',
          'Přecechtělova',
          'Přechodní',
          'Před Cibulkami',
          'Před Dráhou',
          'Před Mosty',
          'Před Nádražím',
          'Před Oborou',
          'Před Rybníkem',
          'Před Skalkami I',
          'Před Skalkami Ii',
          'Před Skálou',
          'Před Sokolovnou',
          'Před Tratí',
          'Před Ústavem',
          'Předbořská',
          'Předměřická',
          'Přední',
          'Předpolní',
          'Předposlední',
          'Předvoje',
          'Předvoje',
          'Předškolní',
          'Přeletová',
          'Přeloučská',
          'Přemyslova',
          'Přemyslovská',
          'Přemyslovská',
          'Přemyšlenská',
          'Přerušená',
          'Přesličková',
          'Přespolní',
          'Přetlucká',
          'Přeučilova',
          'Převoznická',
          'Přezletická',
          'Přeštická',
          'Přeštínská',
          'Přeťatá',
          'Při Hranici',
          'Při Hranici',
          'Při Trati',
          'Přibyslavská',
          'Přibíkova',
          'Přistoupimská',
          'Přádova',
          'Přátelství',
          'Příborská',
          'Příbramská',
          'Příběnická',
          'Příchovická',
          'Přídolská',
          'Příkrá',
          'Přílepská',
          'Přímské Nám.',
          'Přímské Náměstí',
          'Přímá',
          'Přímětická',
          'Přípotoční',
          'Přípřežní',
          'Přírodní',
          'Přístavní',
          'Přívorská',
          'Přívozní',
          'Příčka',
          'Příčná',
          'Pšeničná',
          'Pšenčíkova',
          'Pšovanská',
          'Pštrossova',
          'Půdova',
          'Půlkruhová',
          'Půlnoční',
          'Půtova',
          'R.A. Dvorského',
          'Rabasova',
          'Rabyňská',
          'Rackova',
          'Rackova Zahrada',
          'Radbuzská',
          'Radechovská',
          'Radešovská',
          'Radhošťská',
          'Radhošťská',
          'Radimova',
          'Radimovická',
          'Radimská',
          'Radiová',
          'Radiová',
          'Radistů',
          'Radkovská',
          'Radlická',
          'Radlická',
          'Radlická',
          'Radnické Schody',
          'Radomská',
          'Radonická',
          'Radostavická',
          'Radostná',
          'Radotínská',
          'Radotínská',
          'Radouňova',
          'Radouňova',
          'Radouňova',
          'Radova',
          'Radovská',
          'Radošovická',
          'Radvanická',
          'Radúzova',
          'Radčina',
          'Radějovská',
          'Raffaelova',
          'Raichlova',
          'Raisova',
          'Rajhradská',
          'Rajmonova',
          'Rajská',
          'Rakousova',
          'Rakovnická',
          'Rakovského',
          'Randova',
          'Ranská',
          'Ratajova',
          'Ratajská',
          'Ratbořská',
          'Ratibořická',
          'Ratibořská',
          'Ratibořská',
          'Ravennská',
          'Račická',
          'Račiněveská',
          'Rašilovova',
          'Rašova',
          'Rašovická',
          'Rašovská',
          'Rašínovo Nábř.',
          'Rašínovo Nábř.',
          'Rašínovo Nábřeží',
          'Rašínovo Nábřeží',
          'Rašínská',
          'Ražická',
          'Reinerova',
          'Rejchova',
          'Rejskova',
          'Rekreační',
          'Rektorská',
          'Rembrandtova',
          'Remízková',
          'Renoirova',
          'Resslova',
          'Revoluce',
          'Revoluční',
          'Revoluční',
          'Rezedová',
          'Rezlerova',
          'Rečkova',
          'Richtrova',
          'Riegrova',
          'Riegrovy Sady',
          'Rilská',
          'Ringhofferova',
          'Ringhofferova',
          'Rižská',
          'Roblínská',
          'Rochovská',
          'Rochovská',
          'Rodopská',
          'Rodovská',
          'Rodvinovská',
          'Roentgenova',
          'Rohanovská',
          'Rohanské Nábřeží',
          'Rohanský Ostrov',
          'Rohatecká',
          'Rohenická',
          'Rohlovská',
          'Rohová',
          'Rohozecká',
          'Rohožnická',
          'Roháčova',
          'Roithova',
          'Rojická',
          'Roklova',
          'Rokycanova',
          'Rokycanská',
          'Rokytnická',
          'Rokytná',
          'Rolnická',
          'Rolní',
          'Romaina Rollanda',
          'Romana Blahníka',
          'Ronalda Reagana',
          'Ronešova',
          'Ronkova',
          'Ronovská',
          'Rooseveltova',
          'Rorýsová',
          'Rosečská',
          'Rosická',
          'Rostislavova',
          'Rostoklatská',
          'Rostovská',
          'Rotavská',
          'Rotenská',
          'Roudnická',
          'Rousovická',
          'Rousínovská',
          'Rovenská',
          'Rovnoběžná',
          'Rovná',
          'Rozdělená',
          'Rozdělovská',
          'Rozhovická',
          'Rozkošného',
          'Rozkošská',
          'Rozmarýnová',
          'Rozrazilová',
          'Roztocká',
          'Roztylská',
          'Roztylské Náměstí',
          'Roztylské Sady',
          'Rozvadovská',
          'Rozvodova',
          'Rozvojová',
          'Rozárčina',
          'Rozýnova',
          'Rozšířená',
          'Ročovská',
          'Rošických',
          'Roškotova',
          'Rošovická',
          'Rožmberská',
          'Rožmitálská',
          'Rožnovská',
          'Rožďalovická',
          'Rtyňská',
          'Rubensova',
          'Rubeška',
          'Rubešova',
          'Rubličova',
          'Rubínová',
          'Rudečská',
          'Rudníkovská',
          'Rudolfa Holeky',
          'Rudoltická',
          'Rudoltická',
          'Rujanská',
          'Rumburská',
          'Rumunská',
          'Rumunská',
          'Ruprechtická',
          'Ruská',
          'Ruská',
          'Ruzyňská',
          'Ruzyňská',
          'Ruzyňské Schody',
          'Ružinovská',
          'Rybalkova',
          'Rybalkova',
          'Rybalkova',
          'Rybničná',
          'Rybná',
          'Rybova',
          'Rybářská',
          'Rybízová',
          'Rychnovská',
          'Rychtáře Petříka',
          'Rychtáře Šimona',
          'Rychtářská',
          'Rypkova',
          'Rytířova',
          'Rytířská',
          'Ryzcová',
          'Ryzlinková',
          'Ryšánkova',
          'Rájecká',
          'Rámová',
          'Rápošovská',
          'Rážova',
          'Révová',
          'Rýmařovská',
          'Rýnská',
          'Rýznerova',
          'Růženínová',
          'Růženínská',
          'Růženínská',
          'Růžová',
          'S. K. Neumanna',
          'Sabinova',
          'Sadařská',
          'Sadová',
          'Sadská',
          'Sadská',
          'Sady Bratří Čapků',
          'Safírová',
          'Salabova',
          'Salačova',
          'Salmovská',
          'Salvátorská',
          'Samcova',
          'Samohelova',
          'Samota U Podleského Rybníka',
          'Sarajevská',
          'Saratovská',
          'Sartoriova',
          'Sasanková',
          'Saská',
          'Satalická',
          'Saturnova',
          'Saudkova',
          'Sauerova',
          'Saveljevova',
          'Savojská',
          'Sazečská',
          'Sazečská',
          'Sazovická',
          'Sbíhavá I',
          'Sbíhavá Ii',
          'Schnirchova',
          'Schodišťová',
          'Schodová',
          'Schoellerova',
          'Schoellerova',
          'Schulhoffova',
          'Schwaigerova',
          'Schwarzenberská',
          'Schöfflerova',
          'Sdružení',
          'Sechterova',
          'Sedlecká',
          'Sedlovická',
          'Sedloňovská',
          'Sedlčanská',
          'Sedmidomky',
          'Sedmidomky',
          'Sedmikrásková',
          'Sedmnáctého Listopadu',
          'Seidlova',
          'Seifertova',
          'Sekaninova',
          'Sekeřická',
          'Sekorova',
          'Selmická',
          'Selská',
          'Selských Baterií',
          'Semanského',
          'Semická',
          'Semilská',
          'Semilská',
          'Seminární',
          'Seminářská',
          'Seminářská Zahrada',
          'Semonická',
          'Semtínská',
          'Semčická',
          'Sendražická',
          'Senegalská',
          'Senohrabská',
          'Senovážná',
          'Senovážné Nám.',
          'Senovážné Náměstí',
          'Senožatská',
          'Sestupná',
          'Sestupná',
          'Setbová',
          'Sevastopolská',
          'Severní I',
          'Severní Ii',
          'Severní Iii',
          'Severní Iv',
          'Severní Ix',
          'Severní V',
          'Severní Vi',
          'Severní Vii',
          'Severní Viii',
          'Severní X',
          'Severní Xi',
          'Severovýchodní I',
          'Severovýchodní Ii',
          'Severovýchodní Iii',
          'Severovýchodní Iv',
          'Severovýchodní V',
          'Severovýchodní Vi',
          'Severozápadní I',
          'Severozápadní Ii',
          'Severozápadní Iii',
          'Severozápadní Iv',
          'Severozápadní V',
          'Severozápadní Vi',
          'Severýnova',
          'Sevřená',
          'Seydlerova',
          'Sezemická',
          'Sezemínská',
          'Sezimova',
          'Sečská',
          'Sibeliova',
          'Sibiřské Nám.',
          'Sibiřské Náměstí',
          'Sicherova',
          'Sichrovského',
          'Siemensova',
          'Silurská',
          'Sinkulova',
          'Sinkulova',
          'Sitteho',
          'Siwiecova',
          'Skalecká',
          'Skalnatá',
          'Skalnická',
          'Skalní',
          'Skalská',
          'Skaláků',
          'Skandinávská',
          'Skandinávská',
          'Skautská',
          'Sklenská',
          'Skloněná',
          'Sklářská',
          'Skokanská',
          'Skorkovská',
          'Skorkovská',
          'Skotská',
          'Skořepka',
          'Skořicová',
          'Skryjská',
          'Skupova',
          'Skuteckého',
          'Skálova',
          'Skřivanova',
          'Skřivanská',
          'Skřivánčí',
          'Sladkovského Nám.',
          'Sladkovského Náměstí',
          'Sladovnická',
          'Slancova',
          'Slaná',
          'Slapská',
          'Slatinová',
          'Slatinská',
          'Slatiny',
          'Slatiňanská',
          'Slavatova',
          'Slaviborské Nám.',
          'Slaviborské Náměstí',
          'Slavická',
          'Slavičí',
          'Slavičínská',
          'Slavníkova',
          'Slavojova',
          'Slavonická',
          'Slavíkova',
          'Slavíkova',
          'Slavíkova',
          'Slavínského',
          'Slavíčkova',
          'Slavětínská',
          'Slepá I',
          'Slepá Ii',
          'Slezanů',
          'Slezská',
          'Slezská',
          'Sliačská',
          'Sliačská',
          'Slibná',
          'Slinková',
          'Slivenecká',
          'Slovanský Ostrov',
          'Slovačíkova',
          'Slovenská',
          'Slovenská',
          'Slovinská',
          'Slunečnicová',
          'Slunečná',
          'Sluneční',
          'Sluneční Nám.',
          'Sluneční Náměstí',
          'Slunná',
          'Sluštická',
          'Služeb',
          'Služeb',
          'Služská',
          'Sládkova',
          'Sládkovičova',
          'Slámova',
          'Slánská',
          'Slávy Horníka',
          'Slévačská',
          'Slévačská',
          'Slévačská',
          'Slídová',
          'Slívová',
          'Smaragdová',
          'Smetanovo Nábř.',
          'Smetanovo Nábřeží',
          'Smetáčkova',
          'Smidarská',
          'Smikova',
          'Smiřická',
          'Smiřického',
          'Smolenská',
          'Smolkova',
          'Smolíkova',
          'Smotlachova',
          'Smotlachova',
          'Smrková',
          'Smrčinská',
          'Smržovská',
          'Smržová',
          'Smíchovská',
          'Smíchovská',
          'Smíchovská',
          'Smírná',
          'Snopkova',
          'Sněmovní',
          'Sněženková',
          'Sněžná',
          'Sobolákova',
          'Soborská',
          'Sobotecká',
          'Sobínská',
          'Soběslavova',
          'Soběslavská',
          'Sobětická',
          'Sobětušská',
          'Soběšínská',
          'Sochařská',
          'Socháňova',
          'Sodomkova',
          'Sofijské Nám.',
          'Sofijské Náměstí',
          'Sojkovská',
          'Sojovická',
          'Sojčí',
          'Sojčí',
          'Sokolovská',
          'Sokolovská',
          'Sokolovská',
          'Sokolovská',
          'Sokolská',
          'Sokratova',
          'Solidarity',
          'Solnická',
          'Solná',
          'Sopotská',
          'Sosnovecká',
          'Souběžná I',
          'Souběžná Ii',
          'Souběžná Iii',
          'Souběžná Iv',
          'Soudní',
          'Soukalova',
          'Soukenická',
          'Soumarská',
          'Sousední',
          'Sousední',
          'Sousedská',
          'Sousedíkova',
          'Soustružnická',
          'Soustružnická',
          'Souvratní',
          'Součkova',
          'Sovenická',
          'Sovova',
          'Sovákova',
          'Soví Vršek',
          'Spinozova',
          'Spiritka',
          'Splavná',
          'Spodní',
          'Spojařů',
          'Spojenců',
          'Spojená',
          'Spojná',
          'Spojovací',
          'Spojovací',
          'Spojovací',
          'Spojovací',
          'Spojová',
          'Společná',
          'Spolská',
          'Spolupráce',
          'Sportovců',
          'Sportovců',
          'Sportovní',
          'Spotřebitelská',
          'Spořická',
          'Spořilovská',
          'Spytihněvova',
          'Spádná',
          'Spádová',
          'Spálená',
          'Spálená',
          'Spálený Mlýn',
          'Srbova',
          'Srbská',
          'Srbínská',
          'Srnečkova',
          'Srnčí',
          'Srnčí',
          'Srpnová',
          'Srázná',
          'Stachova',
          'Stadická',
          'Stadionová',
          'Stadiónová',
          'Stallichova',
          'Stamicova',
          'Staniční',
          'Starobylá',
          'Starochodovská',
          'Starochuchelská',
          'Starodejvická',
          'Starodubečská',
          'Starodvorská',
          'Staroklánovická',
          'Starokolínská',
          'Starokošířská',
          'Starolázeňská',
          'Staromlýnská',
          'Staromodřanská',
          'Staroměstské Nám.',
          'Staroměstské Náměstí',
          'Staropacká',
          'Staropramenná',
          'Starostrašnická',
          'Starostřešovická',
          'Starosuchdolská',
          'Staroújezdská',
          'Staročeská',
          'Stará Cesta',
          'Stará Náves',
          'Stará Obec',
          'Stará Spojovací',
          'Stará Stodůlecká',
          'Staré Nám.',
          'Staré Náměstí',
          'Staré Zámecké Schody',
          'Staré Zámecké Schody',
          'Starého',
          'Starý Lis',
          'Statenická',
          'Statková',
          'Stavbařů',
          'Stavební',
          'Stavitelská',
          'Stavovská',
          'Staňkova',
          'Staňkovka',
          'Staňkovská',
          'Stehlíkova',
          'Steinerova',
          'Stejskalova',
          'Stiessova',
          'Stinkovská',
          'Stochovská',
          'Stodůlecká',
          'Stojická',
          'Stoličkova',
          'Stoliňská',
          'Stoupající',
          'Stoupající',
          'Stradonická',
          'Strahovská',
          'Strahovské Nádvoří',
          'Strakatého',
          'Strakonická',
          'Strakonická',
          'Strakonická',
          'Strakonická',
          'Strakonická',
          'Strakonická',
          'Strakošová',
          'Strančická',
          'Stratovská',
          'Strašnická',
          'Strašnická',
          'Strašovská',
          'Strašínská',
          'Strmá',
          'Strmý Vrch',
          'Strnadova',
          'Strnady',
          'Strojická',
          'Strojnická',
          'Strojírenská',
          'Stromovka',
          'Stromovka',
          'Stropnická',
          'Stropnická',
          'Stropnická',
          'Strossmayerovo Nám.',
          'Strossmayerovo Náměstí',
          'Strouhalova',
          'Stroupežnického',
          'Struhařovská',
          'Strunkovská',
          'Stružky',
          'Stružná',
          'Strážkovická',
          'Strážnická',
          'Strážní',
          'Strážovská',
          'Stržná',
          'Studenecká',
          'Studentská',
          'Studená',
          'Studnická',
          'Studničkova',
          'Studniční',
          'Studánková',
          'Stulíková',
          'Stupická',
          'Stupkova',
          'Stupská',
          'Stupňová',
          'Stádlecká',
          'Stárkova',
          'Stýblova',
          'Střední',
          'Středohorská',
          'Středová',
          'Střekovská',
          'Střelecký Ostrov',
          'Střelečská',
          'Střelničná',
          'Střelničná',
          'Střemchová',
          'Střešovická',
          'Střešovická',
          'Střimelická',
          'Stříbrná',
          'Stříbrského',
          'Stříbrského',
          'Střížkovská',
          'Střížkovská',
          'Střížkovská',
          'Suchardova',
          'Suchdolská',
          'Suchdolská',
          'Suchdolská',
          'Suchdolské Nám.',
          'Suchdolské Náměstí',
          'Suchý Vršek',
          'Sudkova',
          'Sudoměřská',
          'Sudějovická',
          'Sukova',
          'Sulanského',
          'Sulická',
          'Sulická',
          'Sulova',
          'Sulovická',
          'Sumova',
          'Suppého',
          'Suttnerové',
          'Sušická',
          'Sušilova',
          'Svahová',
          'Svatavina',
          'Svatojánská',
          'Svatoplukova',
          'Svatoslavova',
          'Svatovítská',
          'Svatovítská',
          'Svatoňovická',
          'Svažitá',
          'Svijanská',
          'Svitavská',
          'Svitákova',
          'Svobodova',
          'Svobodova',
          'Svojetická',
          'Svojsíkova',
          'Svojšická',
          'Svojšovická',
          'Svornosti',
          'Svratecká',
          'Svárovská',
          'Svátkova',
          'Svážná',
          'Svépomoci',
          'Svépomocná',
          'Svépravická',
          'Svépravická',
          'Svídnická',
          'Svěceného',
          'Světická',
          'Světova',
          'Světská',
          'Sychrovská',
          'Symfonická',
          'Synkovická',
          'Synkovská',
          'Syrská',
          'Sádky',
          'Sádovská',
          'Sámova',
          'Sárská',
          'Sárská',
          'Sárská',
          'Sázavská',
          'Sáňkařská',
          'Sídlištní',
          'Sídlištní',
          'Sídliště',
          'Súdánská',
          'Sýkorčí',
          'Sýkovecká',
          'Tachlovická',
          'Tachovská',
          'Tachovské Nám.',
          'Tachovské Náměstí',
          'Tadrova',
          'Tajovského',
          'Talafúsova',
          'Talichova',
          'Talmberská',
          'Tanvaldská',
          'Tasovská',
          'Tatarkova',
          'Tatranská',
          'Tauerova',
          'Tauferova',
          'Taussigova',
          'Tavolníková',
          'Tařicová',
          'Taškentská',
          'Technická',
          'Technologická',
          'Tehovská',
          'Tejnická',
          'Tejnka',
          'Telčská',
          'Templová',
          'Tenisová',
          'Teplická',
          'Teplárenská',
          'Teplárenská',
          'Terasovitá',
          'Tererova',
          'Terezínská',
          'Terronská',
          'Tesaříkova',
          'Tetínská',
          'Theinova',
          'Thomayerova',
          'Thunovská',
          'Thurnova',
          'Thákurova',
          'Thámova',
          'Tibetská',
          'Tichnova',
          'Tichnova',
          'Tichonická',
          'Tichá',
          'Tichého',
          'Tigridova',
          'Tikovská',
          'Tilleho Nám.',
          'Tilleho Náměstí',
          'Tilschové',
          'Tiskařská',
          'Tismická',
          'Tišická',
          'Tlumačovská',
          'Tlustého',
          'Tobrucká',
          'Tolstého',
          'Tomanova',
          'Tomická',
          'Tomkova',
          'Tomsova',
          'Tomáškova',
          'Tomášská',
          'Tomíčkova',
          'Topasová',
          'Topolová',
          'Toruňská',
          'Toulovská',
          'Toušeňská',
          'Toušická',
          'Toužimská',
          'Toužimská',
          'Tovarova',
          'Tovačovského',
          'Tovární',
          'Točenská',
          'Točitá',
          'Trabantská',
          'Trachtova',
          'Trampotova',
          'Travnatá',
          'Travná',
          'Travná',
          'Trenčínská',
          'Trhanovské Náměstí',
          'Trmická',
          'Trnavská',
          'Trnavská',
          'Trnitá',
          'Trnkovo Nám.',
          'Trnkovo Náměstí',
          'Trnková',
          'Trnovanská',
          'Trní',
          'Trocnovská',
          'Troilova',
          'Trojanova',
          'Trojanův Mlýn',
          'Trojdílná',
          'Trojická',
          'Trojmezní',
          'Trojmezní',
          'Trojská',
          'Trojská',
          'Trojská',
          'Trojská',
          'Troskovická',
          'Trousilova',
          'Truhlářka',
          'Truhlářova',
          'Truhlářská',
          'Trutnovská',
          'Tryskovická',
          'Tryskovická',
          'Trytova',
          'Trávnická',
          'Trávníčkova',
          'Tréglova',
          'Tržiště',
          'Tuchoměřická',
          'Tuchorazská',
          'Tuchotická',
          'Tuháňská',
          'Tuklatská',
          'Tulešická',
          'Tulipánová',
          'Tulkova',
          'Tulská',
          'Tunelářů',
          'Tuniská',
          'Tupolevova',
          'Turgeněvova',
          'Turistická',
          'Turkmenská',
          'Turkovická',
          'Turkovská',
          'Turnovská',
          'Turnovského',
          'Turská',
          'Turínská',
          'Tusarova',
          'Tuřická',
          'Tušimická',
          'Tužebníková',
          'Tvrdonická',
          'Tvrdého',
          'Tychonova',
          'Tylišovská',
          'Tylovická',
          'Tylovo Nám.',
          'Tylovo Náměstí',
          'Tymiánová',
          'Tyrkysová',
          'Tyršova',
          'Táboritská',
          'Táborská',
          'Tádžická',
          'Táhlá',
          'Tálínská',
          'Türkova',
          'Týmlova',
          'Týmlova',
          'Týn',
          'Týnecká',
          'Týnská',
          'Týnská Ulička',
          'Týřovická',
          'Tělovýchovná',
          'Těšnov',
          'Těšovická',
          'Těšíkova',
          'Těšínská',
          'Třanovského',
          'Třebanická',
          'Třebechovická',
          'Třebenická',
          'Třebešovská',
          'Třebihošťská',
          'Třebohostická',
          'Třebonická',
          'Třeboradická',
          'Třebotovská',
          'Třeboňská',
          'Třebízského',
          'Třebějická',
          'Třebětínská',
          'Třešňová',
          'Třešňová',
          'Třešňová',
          'Třinecká',
          'Třtinová',
          'Třídomá',
          'Třístoličná',
          'Tůmova',
          'U Akademie',
          'U Akátů',
          'U Albrechtova Vrchu',
          'U Andělky',
          'U Arborky',
          'U Bakaláře',
          'U Balabenky',
          'U Bazénu',
          'U Bažantnice',
          'U Berounky',
          'U Beránky',
          'U Besedy',
          'U Blaženky',
          'U Boroviček',
          'U Botiče',
          'U Botiče',
          'U Božích Bojovníků',
          'U Branek',
          'U Bruských Kasáren',
          'U Brusnice',
          'U Brusnice',
          'U Bubce',
          'U Bulhara',
          'U Bulhara',
          'U Bílého Mlýnku',
          'U Břehu',
          'U Chaloupek',
          'U Chmelnice',
          'U Chodovského Hřbitova',
          'U Cibulky',
          'U Cihelny',
          'U Cikánky',
          'U Cukrovaru',
          'U Císařské Cesty',
          'U Dejvického Rybníčku',
          'U Demartinky',
          'U Divadla',
          'U Divadla',
          'U Dobešky',
          'U Dobráků',
          'U Dobráků',
          'U Dobřenských',
          'U Domu Služeb',
          'U Drahaně',
          'U Druhé Baterie',
          'U Druhé Baterie',
          'U Drupolu',
          'U Družstev',
          'U Družstva Ideál',
          'U Družstva Klid',
          'U Družstva Práce',
          'U Družstva Práce',
          'U Družstva Repo',
          'U Družstva Tempo',
          'U Družstva Život',
          'U Dráhy',
          'U Dráhy',
          'U Drážky',
          'U Drůbežárny',
          'U Dubečské Tvrze',
          'U Dubu',
          'U Dvojdomů',
          'U Dvora',
          'U Dvou Srpů',
          'U Dálnice',
          'U Dívčích Hradů',
          'U Dívčích Hradů',
          'U Děkanky',
          'U Dělnického Cvičiště',
          'U Dětského Domova',
          'U Dětského Hřiště',
          'U Elektry',
          'U Elektry',
          'U Elektrárny',
          'U Floriána',
          'U Fořta',
          'U Gabrielky',
          'U Garáží',
          'U Golfu',
          'U Gymnázia',
          'U Habeše',
          'U Habrovky',
          'U Hadovky',
          'U Harfy',
          'U Hasičské Zbrojnice',
          'U Hasičské Zbrojnice',
          'U Havlíčkových Sadů',
          'U Hellady',
          'U Hercovky',
          'U Hliníku',
          'U Hodin',
          'U Homolky',
          'U Hostavického Potoka',
          'U Hostivařského Nádraží',
          'U Hostivařského Nádraží',
          'U Hotelu',
          'U Hranic',
          'U Hrnčířského Rybníka',
          'U Hrocha',
          'U Hrušky',
          'U Hráze',
          'U Hudební Školy',
          'U Hvozdu',
          'U Hvězdy',
          'U Hvězdy',
          'U Háje',
          'U Hájku',
          'U Hájovny',
          'U Házů',
          'U Hřbitovů',
          'U Hřiště',
          'U Invalidovny',
          'U Jamské',
          'U Jankovky',
          'U Javoru',
          'U Jedličkova Ústavu',
          'U Jednoty',
          'U Jeslí',
          'U Jezera',
          'U Jezerky',
          'U Jezu',
          'U Jezírka',
          'U Jinonického Rybníčka',
          'U Jirkovské',
          'U Jizby',
          'U Járku',
          'U Jízdárny',
          'U Kabelovny',
          'U Kabelovny',
          'U Kaménky',
          'U Kamýku',
          'U Kanálky',
          'U Kapliček',
          'U Kapličky',
          'U Karlova Stánku',
          'U Kasáren',
          'U Kavalírky',
          'U Kazína',
          'U Kašny',
          'U Kaštanu',
          'U Kempinku',
          'U Kina',
          'U Klavírky',
          'U Klikovky',
          'U Klimentky',
          'U Kloubových Domů',
          'U Klubovny',
          'U Klubu',
          'U Kněžské Louky',
          'U Kola',
          'U Kolejí',
          'U Kolejí',
          'U Koloděj',
          'U Kolonie',
          'U Koloniálu',
          'U Kombinátu',
          'U Konečné',
          'U Koní',
          'U Kosinů',
          'U Kostela',
          'U Kostrounku',
          'U Kotlářky',
          'U Koupadel',
          'U Košíku',
          'U Krbu',
          'U Krbu',
          'U Krelovy Studánky',
          'U Kruhovky',
          'U Královské Louky',
          'U Krčské Vodárny',
          'U Krčského Nádraží',
          'U Kublova',
          'U Kunratického Lesa',
          'U Křižovatky',
          'U Kříže',
          'U Kříže',
          'U Křížku',
          'U Laboratoře',
          'U Ladronky',
          'U Lanové Dráhy',
          'U Ledáren',
          'U Lesa',
          'U Lesa',
          'U Lesíka',
          'U Letenského Sadu',
          'U Letiště',
          'U Letohrádku Královny Anny',
          'U Libeňského Pivovaru',
          'U Libeňského Zámku',
          'U Libušiných Lázní',
          'U Libušské Sokolovny',
          'U Lidového Domu',
          'U Lip',
          'U Lipové Aleje',
          'U Lisu',
          'U Loděnice',
          'U Lomu',
          'U Loskotů',
          'U Louky',
          'U Lužického Semináře',
          'U Lázeňky',
          'U Lázní',
          'U Lékárny',
          'U Líhní',
          'U Lípy',
          'U Malvazinky',
          'U Malé Řeky',
          'U Markéty',
          'U Mateřské Školy',
          'U Matěje',
          'U Maří Magdaleny',
          'U Meteoru',
          'U Mezníku',
          'U Michelské Školy',
          'U Michelského Lesa',
          'U Michelského Lesa',
          'U Michelského Mlýna',
          'U Milosrdných',
          'U Mlýna',
          'U Mlýna',
          'U Mlýnského Rybníka',
          'U Modré Školy',
          'U Modřanské Školy',
          'U Močálu',
          'U Mrázovky',
          'U Mydlárny',
          'U Myslivny',
          'U Městských Domů',
          'U Měšťanského Pivovaru',
          'U Měšťanských Škol',
          'U Nadýmače',
          'U Nemocenské Pojišťovny',
          'U Nemocnice',
          'U Nesypky',
          'U Nikolajky',
          'U Nové Dálnice',
          'U Nové Louky',
          'U Nové Školy',
          'U Nového Dvora',
          'U Nového Suchdola',
          'U Nového Suchdola',
          'U Nových Domů I',
          'U Nových Domů Ii',
          'U Nových Domů Iii',
          'U Nových Vil',
          'U Nádražní Lávky',
          'U Nádraží',
          'U Nádrže',
          'U Náhonu',
          'U Náhonu',
          'U Nákladového Nádraží',
          'U Nákladového Nádraží',
          'U Národní Galerie',
          'U Nás',
          'U Obce',
          'U Obecního Domu',
          'U Obecního Dvora',
          'U Obory',
          'U Okrouhlíku',
          'U Olšiček',
          'U Opatrovny',
          'U Ovčína',
          'U Palaty',
          'U Paliárky',
          'U Paloučku',
          'U Památníku',
          'U Panské Zahrady',
          'U Papírny',
          'U Parku',
          'U Parkánu',
          'U Parního Mlýna',
          'U Pastoušky',
          'U Pavilónu',
          'U Pazderek',
          'U Pejřárny',
          'U Pekařky',
          'U Pekáren',
          'U Pentlovky',
          'U Pergamenky',
          'U Pernikářky',
          'U Pernštejnských',
          'U Petřin',
          'U Pily',
          'U Plovárny',
          'U Plynárny',
          'U Plynárny',
          'U Plátenice',
          'U Podchodu',
          'U Podjezdu',
          'U Podolského Hřbitova',
          'U Podolského Sanatoria',
          'U Pohádky',
          'U Polikliniky',
          'U Pomníku',
          'U Potoka',
          'U Poustek',
          'U Poštovky',
          'U Pošty',
          'U Pramene',
          'U Prašné Brány',
          'U Prašného Mostu',
          'U Prašného Mostu',
          'U Pražských Lomů',
          'U Prefy',
          'U Prioru',
          'U Prknovky',
          'U Prodejny',
          'U Propusti',
          'U Prosecké Školy',
          'U Proseckého Kostela',
          'U První Baterie',
          'U První Baterie',
          'U Prádelny',
          'U Průhonu',
          'U Průseku',
          'U Pumpy',
          'U Párníků',
          'U Páté Baterie',
          'U Páté Baterie',
          'U Písecké Brány',
          'U Pískovny',
          'U Přechodu',
          'U Přehrady',
          'U Přejezdu',
          'U Půjčovny',
          'U Radiály',
          'U Radnice',
          'U Rajské Zahrady',
          'U Rakovky',
          'U Roháčových Kasáren',
          'U Rokytky',
          'U Rokytky',
          'U Rokytky',
          'U Rozkoše',
          'U Roztockého Háje',
          'U Rybníka',
          'U Rybníčka',
          'U Rybářství',
          'U Rychty',
          'U Rychty',
          'U Ryšánky',
          'U Ryšánky',
          'U Sadu',
          'U Sanatoria',
          'U Sanopzu',
          'U Santošky',
          'U Schodů',
          'U Sedlecké Školy',
          'U Seřadiště',
          'U Sila',
          'U Silnice',
          'U Silnice',
          'U Skalky',
          'U Skladu',
          'U Skládky',
          'U Skopců',
          'U Skály',
          'U Sladovny',
          'U Slavie',
          'U Sloupu',
          'U Slovanky',
          'U Slovanské Pojišťovny',
          'U Sluncové',
          'U Slévárny',
          'U Smaltovny',
          'U Smetanky',
          'U Smolnic',
          'U Smíchovského Hřbitova',
          'U Sokolovny',
          'U Soutoku',
          'U Sovových Mlýnů',
          'U Sparty',
          'U Splavu',
          'U Spojky',
          'U Spojů',
          'U Společenské Zahrady',
          'U Sportoviště',
          'U Spořitelny',
          'U Stanice',
          'U Staré Cihelny',
          'U Staré Plynárny',
          'U Staré Pošty',
          'U Staré Skládky',
          'U Staré Sokolovny',
          'U Staré Studánky',
          'U Staré Tvrze',
          'U Staré Školy',
          'U Staré Školy',
          'U Starého Hřbitova',
          'U Starého Hřiště',
          'U Starého Mlýna',
          'U Starého Nádraží',
          'U Starého Splavu',
          'U Starého Stadionu',
          'U Starého Stadiónu',
          'U Starého Židovského Hřbitova',
          'U Starého Židovského Hřbitova',
          'U Statku',
          'U Stavoservisu',
          'U Stojanu',
          'U Strouhy',
          'U Strže',
          'U Studny',
          'U Studánky',
          'U Studánky',
          'U Stárovny',
          'U Státní Dráhy',
          'U Státní Dráhy',
          'U Stírky',
          'U Střediska',
          'U Střešovických Hřišť',
          'U Sušičky',
          'U Svahu',
          'U Svatého Ducha',
          'U Svobodárny',
          'U Svodnice',
          'U Svornosti',
          'U Svépomoci',
          'U Světličky',
          'U Synagogy',
          'U Sádek',
          'U Sídliště',
          'U Tabulky',
          'U Technoplynu',
          'U Tenisu',
          'U Teplárny',
          'U Topíren',
          'U Továren',
          'U Transformační Stanice',
          'U Transformátoru',
          'U Trati',
          'U Trativodu',
          'U Trezorky',
          'U Trojice',
          'U Trojského Zámku',
          'U Trpce',
          'U Tržnice',
          'U Tvrze',
          'U Tyrše',
          'U Tyršovky',
          'U Tyršovy Školy',
          'U Třetí Baterie',
          'U Třešňovky',
          'U Třešňového Sadu',
          'U Tůně',
          'U Uhříněveské Obory',
          'U Uranie',
          'U Učiliště',
          'U Valu',
          'U Velké Skály',
          'U Vesny',
          'U Viktorky',
          'U Vinice',
          'U Viniček',
          'U Vinné Révy',
          'U Vinných Sklepů',
          'U Vinohradské Nemocnice',
          'U Vinohradského Hřbitova',
          'U Vinohradského Hřbitova',
          'U Vizerky',
          'U Višňovky',
          'U Višňovky',
          'U Vlachovky',
          'U Vlasačky',
          'U Vlečky',
          'U Vlečky',
          'U Vltavy',
          'U Voborníků',
          'U Vodice',
          'U Vodojemu',
          'U Vodojemu',
          'U Vodotoku',
          'U Vody',
          'U Vodárny',
          'U Vojanky',
          'U Vojenské Nemocnice',
          'U Vojtěšky',
          'U Vokovické Školy',
          'U Vorlíků',
          'U Vozovny',
          'U Vrbiček',
          'U Vrby',
          'U Vrtilky',
          'U Vršovického Hřbitova',
          'U Vršovického Hřbitova',
          'U Vršovického Nádraží',
          'U Vysočanského Cukrovaru',
          'U Vysočanského Pivovaru',
          'U Václava',
          'U Váhy',
          'U Vápenice',
          'U Vápenky',
          'U Vápenné Skály',
          'U Výkupního Střediska',
          'U Výstavby',
          'U Výstaviště',
          'U Výstaviště',
          'U Výzkumu',
          'U Včely',
          'U Větrníku',
          'U Větrolamu',
          'U Větrolamu',
          'U Věže',
          'U Waltrovky',
          'U Zahradnictví',
          'U Zahradního Města',
          'U Zahrady',
          'U Zahrádek',
          'U Zahrádkářské Kolonie',
          'U Zastávky',
          'U Zbrojnice',
          'U Zdravotního Ústavu',
          'U Zeleného Ptáka',
          'U Zemníku',
          'U Zeměpisného Ústavu',
          'U Zlaté Studně',
          'U Zličína',
          'U Zličína',
          'U Zličínského Hřiště',
          'U Zvonařky',
          'U Zvoničky',
          'U Záběhlického Zámku',
          'U Zájezdku',
          'U Zákrutu',
          'U Zámeckého Parku',
          'U Zámečku',
          'U Zámečnice',
          'U Zásobní Zahrady',
          'U Zátiší',
          'U Závodiště',
          'U Závor',
          'U Úlů',
          'U Čekárny',
          'U Černé Rokle',
          'U Červeného Mlýnku',
          'U Červeného Mlýnku',
          'U Českých Loděnic',
          'U Čihadel',
          'U Čističky',
          'U Čokoládoven',
          'U Čtvrté Baterie',
          'U Čtyř Domů',
          'U Řempa',
          'U Říčanky',
          'U Šalamounky',
          'U Šalamounky',
          'U Šesté Baterie',
          'U Šesté Baterie',
          'U Školičky',
          'U Školky',
          'U Školního Pole',
          'U Školské Zahrady',
          'U Školy',
          'U Štěpu',
          'U Šumavy',
          'U Šumavěnky',
          'U Šálkovny',
          'U Šíchů',
          'U Šípků',
          'U Železnice',
          'U Železničního Mostu',
          'U Železné Lávky',
          'U Želivky',
          'U Židovského Hřbitova',
          'U Žlábku',
          'U Županských',
          'Uhelný Trh',
          'Uherská',
          'Uhříněveská',
          'Ukončená',
          'Ukrajinská',
          'Uljanovská',
          'Ulrychova',
          'Ulčova',
          'Umělecká',
          'Ungarova',
          'Unhošťská',
          'Univerzitní',
          'Upolínová',
          'Upravená',
          'Uralská',
          'Urbanická',
          'Urbanova',
          'Urbánkova',
          'Urešova',
          'Uruguayská',
          'Urxova',
          'Utěšilova',
          'Uzavřená',
          'Uzbecká',
          'Uzoučká',
          'Učitelská',
          'Učňovská',
          'Užocká',
          'V Aleji',
          'V Alejích',
          'V Americe',
          'V Babyku',
          'V Bambouskách',
          'V Bažinách',
          'V Benátkách',
          'V Bezpečí',
          'V Bokách I',
          'V Bokách Ii',
          'V Bokách Iii',
          'V Borovičkách',
          'V Botanice',
          'V Brance',
          'V Brůdku',
          'V Brůdku',
          'V Bytovkách',
          'V Bílce',
          'V Březinkách',
          'V Březině',
          'V Březí',
          'V Břízkách',
          'V Celnici',
          'V Cestičkách',
          'V Cestkách',
          'V Chaloupkách',
          'V Chaloupkách',
          'V Chatách',
          'V Chotejně',
          'V Cibulkách',
          'V Cihelně',
          'V Cípu',
          'V Dolinách',
          'V Dolině',
          'V Dolině',
          'V Dolích',
          'V Domcích',
          'V Domově',
          'V Doubcích',
          'V Dílcích',
          'V Edenu',
          'V Haltýři',
          'V Hliništi',
          'V Hluboké',
          'V Hodkovičkách',
          'V Holešovičkách',
          'V Honu',
          'V Horkách',
          'V Horní Stromce',
          'V Hrobech',
          'V Humenci',
          'V Humenci',
          'V Humnech',
          'V Háji',
          'V Hájkách',
          'V Hájích',
          'V Hůrkách',
          'V Jahodách',
          'V Javorech',
          'V Javoříčku',
          'V Jehličině',
          'V Jehličí',
          'V Jezerách',
          'V Jezevčinách',
          'V Jezírkách',
          'V Jirchářích',
          'V Jámě',
          'V Kališti',
          'V Kališti',
          'V Kapslovně',
          'V Klukovicích',
          'V Kole',
          'V Kolkovně',
          'V Korytech',
          'V Korytech',
          'V Kotcích',
          'V Koutku',
          'V Koutě',
          'V Kratinách',
          'V Kruhu',
          'V Kuťatech',
          'V Kálku',
          'V Křepelkách',
          'V Křovinách',
          'V Křížkách',
          'V Ladech',
          'V Lesíčku',
          'V Lipinách',
          'V Lipinách',
          'V Lipkách',
          'V Lipách',
          'V Listnáčích',
          'V Lomech',
          'V Louce',
          'V Luhu',
          'V Lukách',
          'V Lučinách',
          'V Lužích',
          'V Lánech',
          'V Lázních',
          'V Lískách',
          'V Malých Domech I',
          'V Malých Domech Ii',
          'V Malých Domech Iii',
          'V Mezihoří',
          'V Milíři',
          'V Mokřinách',
          'V Mydlinkách',
          'V Nové Hostivaři',
          'V Nové Vsi',
          'V Nové Vsi',
          'V Nové Čtvrti',
          'V Novém Hloubětíně',
          'V Novém Hloubětíně',
          'V Nových Bohnicích',
          'V Nových Domcích',
          'V Nových Vokovicích',
          'V Náklích',
          'V Násypu',
          'V Nížinách',
          'V Oblouku',
          'V Občanském Domově',
          'V Obůrkách',
          'V Ochozu',
          'V Ohradě',
          'V Ohybu',
          'V Okruží',
          'V Okálech',
          'V Olšinách',
          'V Olšinách',
          'V Olšině',
          'V Ondřejově',
          'V Opatově',
          'V Osikách',
          'V Ostružiní',
          'V Oudolku',
          'V Ořeší',
          'V Pachmance',
          'V Padolině',
          'V Parcelách',
          'V Parku',
          'V Parníku',
          'V Pačátkách',
          'V Pařezinách',
          'V Pevnosti',
          'V Pevnosti',
          'V Pitkovičkách',
          'V Planinách',
          'V Platýzu',
          'V Pláni',
          'V Podbabě',
          'V Podhoří',
          'V Podhájí',
          'V Podhájí',
          'V Podluží',
          'V Podskalí',
          'V Podvrší',
          'V Podzámčí',
          'V Poli',
          'V Polích',
          'V Potokách',
          'V Potočinách',
          'V Potočkách',
          'V Prutinách',
          'V Průhledu',
          'V Průčelí',
          'V Pátém',
          'V Pískovně',
          'V Pěšinkách',
          'V Předním Hloubětíně',
          'V Předním Veleslavíně',
          'V Předpolí',
          'V Předpolí',
          'V Přelomu',
          'V Přístavu',
          'V Remízku',
          'V Rohožníku',
          'V Rohu',
          'V Roháčích',
          'V Rokli',
          'V Roklích',
          'V Rovinách',
          'V Rovinách',
          'V Rybníkách',
          'V Rybníčkách',
          'V Ráji',
          'V Ráji',
          'V Rákosí',
          'V Sadech',
          'V Sedlci',
          'V Sedlci',
          'V Slavětíně',
          'V Soudním',
          'V Stráni',
          'V Středu',
          'V Sudech',
          'V Sídlišti',
          'V Tehovičkách',
          'V Tišině',
          'V Trninách',
          'V Třešňovce',
          'V Tůních',
          'V Uličce',
          'V Uličkách',
          'V Zahradní Čtvrti',
          'V Zahradách',
          'V Zahrádkách',
          'V Zatáčce',
          'V Zeleni',
          'V Zeleném Údolí',
          'V Záhorském',
          'V Záhybu',
          'V Zákopech',
          'V Zákoutí',
          'V Zálesí',
          'V Zálomu',
          'V Zámcích',
          'V Zápolí',
          'V Zátiší',
          'V Zátočce',
          'V Závitu',
          'V Závětří',
          'V Zářezu',
          'V Údolí',
          'V Údolí Hvězd',
          'V Úhlu',
          'V Úhoru',
          'V Úvalu',
          'V Úvoze',
          'V Úzké',
          'V Úžlabině',
          'V Úžlabině',
          'V Čeňku',
          'V Štíhlách',
          'V Šáreckém Údolí',
          'V Žabokřiku',
          'V Žáčku',
          'V. P. Čkalova',
          'V. P. Čkalova',
          'Vachkova',
          'Vackova',
          'Vacovská',
          'Vacínova',
          'Vacínovská',
          'Vajdova',
          'Vajgarská',
          'Valcířská',
          'Valdická',
          'Valdovská',
          'Valdštejnská',
          'Valdštejnské Nám.',
          'Valdštejnské Náměstí',
          'Valentinská',
          'Valentinská',
          'Valentova',
          'Valečovská',
          'Valská',
          'Valtická',
          'Valtínovská',
          'Valčíkova',
          'Valšovská',
          'Vamberská',
          'Vanická',
          'Vaníčkova',
          'Vaníčkova',
          'Varhulíkové',
          'Varnsdorfská',
          'Varšavská',
          'Vavákova',
          'Vavřenova',
          'Vavřinecká',
          'Vazovova',
          'Vačkářova',
          'Vaňkova',
          'Vaňkova',
          'Vašátkova',
          'Ve Dvoře',
          'Ve Lhotce',
          'Ve Lhotce',
          'Ve Skalkách',
          'Ve Skalách',
          'Ve Skále',
          'Ve Slatinách',
          'Ve Smečkách',
          'Ve Smrčině',
          'Ve Stromořadí',
          'Ve Struhách',
          'Ve Struhách',
          'Ve Stráni',
          'Ve Studeném',
          'Ve Stínu',
          'Ve Střešovičkách',
          'Ve Střešovičkách',
          'Ve Svahu',
          'Ve Vilkách',
          'Ve Vilách',
          'Ve Višňovce',
          'Ve Vratech',
          'Ve Vrbách',
          'Ve Vrchu',
          'Ve Vrších',
          'Ve Výhledu',
          'Ve Výhledu',
          'Ve Výrech',
          'Ve Zliči',
          'Ve Štěpnici',
          'Ve Žlíbku',
          'Vedlejší',
          'Vehlovická',
          'Vejražkova',
          'Vejvanovského',
          'Vejvodova',
          'Velebného',
          'Velehradská',
          'Velemínská',
          'Velemínská',
          'Velenická',
          'Velenovského',
          'Veleslavínova',
          'Veleslavínská',
          'Veleslavínská',
          'Veletovská',
          'Veletržní',
          'Veletržní',
          'Veleňská',
          'Velešínská',
          'Velfloviců',
          'Velflíkova',
          'Velhartická',
          'Velichovská',
          'Velimská',
          'Velkoborská',
          'Velkoosecká',
          'Velkopřevorské Nám.',
          'Velkopřevorské Náměstí',
          'Velká Lada',
          'Velká Lada',
          'Velká Skála',
          'Velké Kunratické',
          'Veltruská',
          'Veltěžská',
          'Velvarská',
          'Velínská',
          'Venušina',
          'Verdiho',
          'Verdunská',
          'Verneřická',
          'Verneřická',
          'Vernéřovská',
          'Veronské Nám.',
          'Veselská',
          'Veská',
          'Veslařský Ostrov',
          'Vestavěná',
          'Vestecká',
          'Veverkova',
          'Večerní',
          'Vidimova',
          'Vidimská',
          'Vidlicová',
          'Vidlák',
          'Vidonická',
          'Vidoulská',
          'Vidovická',
          'Vietnamská',
          'Viklefova',
          'Vikova',
          'Viktora Huga',
          'Viktorinova',
          'Viktorčina',
          'Vikářská',
          'Vilová',
          'Vilímkova',
          'Vilímovská',
          'Vimperské Náměstí',
          'Vinařického',
          'Vinařská',
          'Viničná',
          'Vinohradská',
          'Vinohradská',
          'Vinohradská',
          'Vinohradská',
          'Vinohradská',
          'Vinohradská',
          'Vinohradská',
          'Vinohrady',
          'Vinopalnická',
          'Vinořská',
          'Vinořské Nám.',
          'Vinořské Náměstí',
          'Vinšova',
          'Violková',
          'Vitošská',
          'Vitíkova',
          'Vitějovská',
          'Vizovická',
          'Višňovka',
          'Višňovka',
          'Višňová',
          'Vlachova',
          'Vladimírova',
          'Vladislava Vančury',
          'Vladislavova',
          'Vladivostocká',
          'Vladycká',
          'Vlastibořská',
          'Vlastina',
          'Vlastina',
          'Vlastislavova',
          'Vlasty Buriana',
          'Vlasty Hilské',
          'Vlasty Průchové',
          'Vlasákova',
          'Vlašimská',
          'Vlašská',
          'Vlašská',
          'Vlaštovčí',
          'Vlkanovská',
          'Vlkova',
          'Vlkovická',
          'Vlnitá',
          'Vltavanů',
          'Vltavanů',
          'Vltavanů',
          'Vltavická',
          'Vltavská',
          'Vltavínová',
          'Vlárská',
          'Vlásenická',
          'Vlčická',
          'Vlčkova',
          'Vlčnovská',
          'Vnislavova',
          'Vnitřní',
          'Vnoučkova',
          'Vnější',
          'Voborského',
          'Vobrubova',
          'Vocelova',
          'Voctářova',
          'Voctářova',
          'Vodická',
          'Vodičkova',
          'Vodičkova',
          'Vodnická',
          'Vodní',
          'Vodochodská',
          'Vodojemská',
          'Vodácká',
          'Vodárenská',
          'Voděradská',
          'Vodňanská',
          'Vodňanského',
          'Vojenova',
          'Vojetická',
          'Vojická',
          'Vojkovická',
          'Vojslavická',
          'Vojtova',
          'Vojtíškova',
          'Vojtěšská',
          'Vojáčkova',
          'Vokovická',
          'Vokovická',
          'Vokrojova',
          'Vokáčova',
          'Vokřínská',
          'Volarská',
          'Volavkova',
          'Voleníkova',
          'Volkova',
          'Volkovova',
          'Voltova',
          'Volutová',
          'Volyňská',
          'Volšovská',
          'Volšovská',
          'Vondroušova',
          'Vorařská',
          'Voroněžská',
          'Voroněžská',
          'Voráčovská',
          'Voršilská',
          'Voskova',
          'Voskovcova',
          'Vosmíkových',
          'Vostrovská',
          'Vostrého',
          'Vosátkova',
          'Votavova',
          'Votická',
          'Votočkova',
          'Votrubova',
          'Votuzská',
          'Vozová',
          'Vozová',
          'Voňkova',
          'Voříškova',
          'Vošahlíkova',
          'Vožická',
          'Vrabčí',
          'Vranická',
          'Vranovská',
          'Vranská',
          'Vratimovská',
          'Vratislavova',
          'Vratislavská',
          'Vratičová',
          'Vraňanská',
          'Vrbenského',
          'Vrbická',
          'Vrbková',
          'Vrbova',
          'Vrbčanská',
          'Vrchlabská',
          'Vrchlického',
          'Vrchlického Sady',
          'Vrchovinská',
          'Vrátenská',
          'Vrátkovská',
          'Vrázova',
          'Vrážská',
          'Vrútecká',
          'Vršní',
          'Vršovická',
          'Vršovické Nám.',
          'Vršovické Náměstí',
          'Vršovka',
          'Vsetínská',
          'Vstavačová',
          'Vstupní',
          'Vybíralova',
          'Vycpálkova',
          'Vyderská',
          'Vydrova',
          'Vyhlídkova',
          'Vykoukových',
          'Vykáňská',
          'Vyskočilova',
          'Vysokovská',
          'Vysokoškolská',
          'Vysoká Cesta',
          'Vysočanská',
          'Vysočanská',
          'Vysočanská',
          'Vysočanské Nám.',
          'Vysočanské Náměstí',
          'Vyvýšená',
          'Vyšebrodská',
          'Vyšehradská',
          'Vyšší',
          'Vyžlovská',
          'Vzdušná',
          'Vzdálená',
          'Vzestupná',
          'Vzpoury',
          'Váchalova',
          'Václava Balého',
          'Václava Kovaříka',
          'Václava Rady',
          'Václava Trojana',
          'Václava Špačka',
          'Václavická',
          'Václavkova',
          'Václavská',
          'Václavské Nám.',
          'Václavské Náměstí',
          'Vágnerova',
          'Vánková',
          'Vápencová',
          'Vápenná',
          'Vápeníkova',
          'Vášova',
          'Vážská',
          'Vídeňská',
          'Vídeňská',
          'Vídeňská',
          'Vírská',
          'Víta Nejedlého',
          'Vítkova',
          'Vítkovická',
          'Vítovcova',
          'Vítovcova',
          'Vítězná',
          'Vítězná',
          'Vítězné Nám.',
          'Vítězné Nám.',
          'Vítězné Náměstí',
          'Vítězné Náměstí',
          'Východní',
          'Východní Nám.',
          'Východní Náměstí',
          'Výchozí',
          'Výhledová',
          'Výhledské Nám.',
          'Výhledské Náměstí',
          'Výjezdní',
          'Výjezdová',
          'Výletní',
          'Výletní',
          'Výmarova',
          'Výmolova',
          'Výpadová',
          'Výpadová',
          'Výravská',
          'Výrobní',
          'Výstaviště',
          'Výstavní',
          'Výstupní',
          'Výtoňská',
          'Výtvarnická',
          'Výtvarná',
          'Výzkumníků',
          'Včelařská',
          'Včelničná',
          'Věkova',
          'Věstonická',
          'Větrná',
          'Větrovcova',
          'Větrová',
          'Větrušická',
          'Vězeňská',
          'Vězeňská',
          'Věštínská',
          'Věšínova',
          'Věžická',
          'Vřesovická',
          'Vřesová',
          'Všehrdova',
          'Všejanská',
          'Všelipská',
          'Všerubská',
          'Všestarská',
          'Všetatská',
          'Všeňská',
          'Wagnerova',
          'Waldesova',
          'Washingtonova',
          'Wassermannova',
          'Wattova',
          'Weberova',
          'Weberova',
          'Weilova',
          'Weissova',
          'Wenzigova',
          'Wenzigova',
          'Werichova',
          'Wichterlova',
          'Wiedermannova',
          'Wiesenthalova',
          'Wilsonova',
          'Wilsonova',
          'Winklerova',
          'Wolfova',
          'Wolkerova',
          'Wuchterlova',
          'Xaveriova',
          'Xaverovská',
          'Za Archivem',
          'Za Arielem',
          'Za Avií',
          'Za Bažantnicí',
          'Za Botičem',
          'Za Brankou',
          'Za Brumlovkou',
          'Za Brůdkem',
          'Za Břízami',
          'Za Chalupami',
          'Za Cukrovarem',
          'Za Císařským Mlýnem',
          'Za Dolejšákem',
          'Za Drahou',
          'Za Dvorem',
          'Za Dálnicí',
          'Za Dálnicí',
          'Za Elektrárnou',
          'Za Elektrárnou',
          'Za Farou',
          'Za Fořtem',
          'Za Hanspaulkou',
          'Za Haštalem',
          'Za Hládkovem',
          'Za Horou',
          'Za Horou',
          'Za Hospodou',
          'Za Hrází',
          'Za Humny',
          'Za Hájem',
          'Za Hájem',
          'Za Hájovnou',
          'Za Hřbitovem',
          'Za Invalidovnou',
          'Za Jalovým Dvorem',
          'Za Jednotou',
          'Za Kajetánkou',
          'Za Kapličkou',
          'Za Karlínským Přístavem',
          'Za Kačabkou',
          'Za Klíčovem',
          'Za Knotkem',
          'Za Knotkem',
          'Za Kostelem',
          'Za Kovárnou',
          'Za Kovářským Rybníkem',
          'Za Křížem',
          'Za Křížkem',
          'Za Lesíkem',
          'Za Lidovým Domem',
          'Za Luhem',
          'Za Lužinami',
          'Za Lány',
          'Za Lázeňkou',
          'Za Mlýnem',
          'Za Mosty',
          'Za Mosty',
          'Za Mototechnou',
          'Za Můstkem',
          'Za Nadýmačem',
          'Za Novákovou Zahradou',
          'Za Návsí',
          'Za Obecním Úřadem',
          'Za Oborou',
          'Za Opravnou',
          'Za Opusem',
          'Za Ovčínem',
          'Za Papírnou',
          'Za Parkem',
          'Za Pavilónem',
          'Za Pekařkou',
          'Za Pekárnou',
          'Za Pivovarem',
          'Za Ploty',
          'Za Podjezdem',
          'Za Pohořelcem',
          'Za Pohádkou',
          'Za Potokem',
          'Za Poříčskou Branou',
          'Za Poříčskou Bránou',
          'Za Poštou',
          'Za Poštovskou Zahradou',
          'Za Poštovskou Zahradou',
          'Za Prodejnou',
          'Za Pruhy',
          'Za Průsekem',
          'Za Pískovnou',
          'Za Radostí',
          'Za Rokytkou',
          'Za Rybníkem',
          'Za Rybníčky',
          'Za Rybářstvím',
          'Za Rájem',
          'Za Sadem',
          'Za Sedmidomky',
          'Za Skalkou',
          'Za Skalkou',
          'Za Slatinami',
          'Za Slovankou',
          'Za Sokolovnou',
          'Za Stadionem',
          'Za Statkem',
          'Za Statky',
          'Za Stodolami',
          'Za Stodolou',
          'Za Strahovem',
          'Za Strašnickou Vozovnou',
          'Za Strašnickou Vozovnou',
          'Za Strojírnami',
          'Za Studánkou',
          'Za Střelnicí',
          'Za Sídlištěm',
          'Za Teplárnou',
          'Za Tratí',
          'Za Tratí',
          'Za Třebešínem',
          'Za Vackovem',
          'Za Valem',
          'Za Viaduktem',
          'Za Vinicí',
          'Za Vlasačkou',
          'Za Vodárnou',
          'Za Vokovickou Vozovnou',
          'Za Vokovickou Vozovnou',
          'Za Větrem',
          'Za Zahradami',
          'Za Zahradou',
          'Za Zastávkou',
          'Za Zelenou Liškou',
          'Za Zámečkem',
          'Za Černým Mostem',
          'Za Černým Mostem',
          'Za Černým Mostem',
          'Za Školkou',
          'Za Školou',
          'Za Šmatlíkem',
          'Za Železnicí',
          'Za Ženskými Domovy',
          'Za Žižkovskou Vozovnou',
          'Zacharská',
          'Zachova',
          'Zadní',
          'Zahrada Na Baště',
          'Zahradnická',
          'Zahradní',
          'Zahradníčkova',
          'Zahradníčkova',
          'Zahrádecká',
          'Zahrádecká',
          'Zahrádkářská',
          'Zahrádkářů',
          'Zaječická',
          'Zaječí',
          'Zaječí',
          'Zakouřilova',
          'Zakrytá',
          'Zakšínská',
          'Zalešanská',
          'Zalinská',
          'Zamašská',
          'Zamenhofova',
          'Zapadlá',
          'Zapomenutá',
          'Zapova',
          'Zapských',
          'Zastavěná',
          'Zastrčená',
          'Zavadilova',
          'Zavátá',
          'Zaříčanská',
          'Zbečenská',
          'Zborovská',
          'Zborovská',
          'Zbraslavská',
          'Zbraslavská',
          'Zbraslavské Nám.',
          'Zbraslavské Náměstí',
          'Zbrojnická',
          'Zbudovská',
          'Zbuzanská',
          'Zbuzkova',
          'Zbynická',
          'Zbyslavská',
          'Zbytinská',
          'Zbýšovská',
          'Zdaru',
          'Zdařilá',
          'Zderazská',
          'Zdeňky Nyplové',
          'Zdibská',
          'Zdická',
          'Zdiměřická',
          'Zdislavická',
          'Zdobnická',
          'Zdoňovská',
          'Zdíkovská',
          'Zelenečská',
          'Zelenečská',
          'Zelenkova',
          'Zelenky-Hajského',
          'Zelenohorská',
          'Zelená',
          'Zelená',
          'Zelená Louka',
          'Zelený Pruh',
          'Zelený Pruh',
          'Zelený Pruh',
          'Zelinářská',
          'Zemanka',
          'Zemské Právo',
          'Zemědělská',
          'Zengrova',
          'Zenklova',
          'Zenklova',
          'Zeyerova Alej',
          'Zhořelecká',
          'Zikova',
          'Zimova',
          'Zimákova',
          'Zkrácená',
          'Zlatnice',
          'Zlatnická',
          'Zlatokorunská',
          'Zlatá',
          'Zlatá Ulička U Daliborky',
          'Zlenická',
          'Zlešická',
          'Zlivská',
          'Zličínská',
          'Zličínská',
          'Zlonická',
          'Zlonínská',
          'Zlončická',
          'Zlíchovská',
          'Znojemská',
          'Zoubkova',
          'Zrzavého',
          'Ztracená',
          'Zubatého',
          'Zubrnická',
          'Zvolenská',
          'Zvolská',
          'Zvolská',
          'Zvonařova',
          'Zvonařovská',
          'Zvonařská',
          'Zvoncovitá',
          'Zvonická',
          'Zvonková',
          'Zvoníčkova',
          'Zvánovická',
          'Zvíkovská',
          'Záblatská',
          'Záblatská',
          'Zábranská',
          'Zábrodí',
          'Záběhlická',
          'Zádražanská',
          'Záhornická',
          'Záhorského',
          'Záhořanská',
          'Záhořanského',
          'Záhřebská',
          'Zájezdní',
          'Zákolanská',
          'Zákostelní',
          'Zákupská',
          'Zálesí',
          'Zálesí',
          'Zálesí',
          'Záluské',
          'Zálužanského',
          'Zálužická',
          'Zálužská',
          'Zálužská',
          'Zámecká',
          'Zámecké Schody',
          'Zámezí',
          'Zámišova',
          'Zámělská',
          'Západní',
          'Zápasnická',
          'Zápolská',
          'Zápotoční',
          'Zápská',
          'Zárubova',
          'Zárybnická',
          'Zárybničná',
          'Zárybská',
          'Zásadská',
          'Zásmucká',
          'Zátišská',
          'Zátiší',
          'Zátopkova',
          'Zátoňská',
          'Závadova',
          'Záveská',
          'Závist',
          'Závišova',
          'Závišova',
          'Závodní',
          'Závrchy',
          'Závěrka',
          'Zázvorkova',
          'Zářijová',
          'Zítkova',
          'Zívrova',
          'Zúžená',
          'Údlická',
          'Údolní',
          'Údolní',
          'Údolí Hvězd',
          'Úhlavská',
          'Úhlová',
          'Újezd',
          'Újezd',
          'Újezdská',
          'Úlibická',
          'Únorová',
          'Únětická',
          'Únětická',
          'Úpická',
          'Úprkova',
          'Úpská',
          'Úslavská',
          'Ústavní',
          'Ústecká',
          'Ústecká',
          'Ústřední',
          'Útulná',
          'Útulná',
          'Úvalská',
          'Úvoz',
          'Úvoz',
          'Úvozová',
          'Úzká',
          'Čajkovského',
          'Čakovická',
          'Čakovická',
          'Čankovská',
          'Čapkova',
          'Častavina',
          'Častonická',
          'Čechova',
          'Čechtická',
          'Čechurova',
          'Čedičová',
          'Čejetická',
          'Čejkovická',
          'Čekanková',
          'Čekanková',
          'Čekanovská',
          'Čelakovského Sady',
          'Čelakovského Sady',
          'Čeljabinská',
          'Čelkovická',
          'Čelná',
          'Čelákovická',
          'Čenkovská',
          'Čenovická',
          'Čentická',
          'Čenětická',
          'Čeperská',
          'Čeradická',
          'Čerchovská',
          'Čermákova',
          'Černická',
          'Černilovská',
          'Černičná',
          'Černochova',
          'Černockého',
          'Černohorského',
          'Černokostelecká',
          'Černokostelecká',
          'Černokostelecká',
          'Černomořská',
          'Černotínská',
          'Černovická',
          'Černošická',
          'Černá',
          'Černého',
          'Černínova',
          'Černínská',
          'Čerpadlová',
          'Čertouská',
          'Čertouská',
          'Čertův Vršek',
          'Červencová',
          'Červenkova',
          'Červená',
          'Červená Báň',
          'Červený Mlýn',
          'Červeňanského',
          'Červnová',
          'Čerčanská',
          'Českobratrská',
          'Českobrodská',
          'Českobrodská',
          'Českobrodská',
          'Českobrodská',
          'Českobrodská',
          'Českobrodská',
          'Českobrodská',
          'Českobrodská',
          'Českodubská',
          'Českolipská',
          'Českolipská',
          'Českomalínská',
          'Českomoravská',
          'Českomoravská',
          'Československého Exilu',
          'Československého Exilu',
          'Česká',
          'České Družiny',
          'Českého Červeného Kříže',
          'Čestlická',
          'Čestmírova',
          'Česákova',
          'Čečelická',
          'Čeňkova',
          'Češovská',
          'Čibuzská',
          'Čihákova',
          'Čiklova',
          'Čiklova',
          'Čimelická',
          'Čimická',
          'Čimická',
          'Čimická',
          'Čimická',
          'Čirůvková',
          'Čistovická',
          'Čmelická',
          'Čs. Armády',
          'Čs. Tankistů',
          'Čtyřdílná',
          'Čtyřkolská',
          'Čumpelíkova',
          'Čuprova',
          'Čábelecká',
          'Čápova',
          'Čáslavská',
          'Čílova',
          'Čílova',
          'Čínská',
          'Čínská',
          'Čížovská',
          'Ďáblická',
          'Ďáblická',
          'Ďáblická',
          'Řadová',
          'Řehořova',
          'Řepečská',
          'Řepná',
          'Řeporyjská',
          'Řeporyjská',
          'Řeporyjská',
          'Řeporyjské Náměstí',
          'Řepová',
          'Řepská',
          'Řepíková',
          'Řepínská',
          'Řepčická',
          'Řepčická',
          'Řetězokovářů',
          'Řetězová',
          'Řevnická',
          'Řevnická',
          'Řeznická',
          'Řezáčovo Nám.',
          'Řezáčovo Náměstí',
          'Řečického',
          'Řešetovská',
          'Řešovská',
          'Řipská',
          'Řipská',
          'Řásnovka',
          'Říjnová',
          'Římovská',
          'Římovská',
          'Římská',
          'Říčanova',
          'Říčanská',
          'Říční',
          'Šachovská',
          'Šafaříkova',
          'Šafránecká',
          'Šafránkova',
          'Šafránová',
          'Šafářova',
          'Šakvická',
          'Šaldova',
          'Šalounova',
          'Šalvějová',
          'Šanovská',
          'Šantrochova',
          'Šatrova',
          'Šatrova',
          'Šebelova',
          'Šeberovská',
          'Šebestiánská',
          'Šebkova',
          'Šedivého',
          'Šedova',
          'Šejbalové',
          'Šemberova',
          'Šenovská',
          'Šermířská',
          'Šermířská',
          'Šestajovická',
          'Šestajovická',
          'Šestidomí',
          'Šetelíkova',
          'Ševce Matouše',
          'Ševčenkova',
          'Ševčíkova',
          'Šeříková',
          'Šeříková',
          'Šibřinská',
          'Šikmá',
          'Šimanovská',
          'Šimkova',
          'Šimonova',
          'Šimáčkova',
          'Šimůnkova',
          'Šircova',
          'Široká',
          'Široká',
          'Šiškova',
          'Školní',
          'Školská',
          'Škroupovo Nám.',
          'Škroupovo Náměstí',
          'Škrétova',
          'Škvorecká',
          'Škábova',
          'Šlechtitelská',
          'Šlejnická',
          'Šlikova',
          'Šlitrova',
          'Šluknovská',
          'Šmeralova',
          'Šmilovského',
          'Šmolíkova',
          'Šolínova',
          'Šostakovičovo Nám.',
          'Šostakovičovo Náměstí',
          'Španielova',
          'Španělská',
          'Špačkova',
          'Špeciánova',
          'Šperlova',
          'Špirkova',
          'Špitálská',
          'Šplechnerova',
          'Šporkova',
          'Špotzova',
          'Špálova',
          'Šrobárova',
          'Šrobárova',
          'Šromova',
          'Štamberk',
          'Štefkova',
          'Štefánikova',
          'Štemberova',
          'Šternberkova',
          'Šternova',
          'Šternovská',
          'Štichova',
          'Štiplova',
          'Štičkova',
          'Štiřínská',
          'Štochlova',
          'Štolbova',
          'Štolcova',
          'Štolmířská',
          'Štolmířská',
          'Štorchova',
          'Štorkánova',
          'Štramberská',
          'Štulcova',
          'Štupartská',
          'Štursova',
          'Štverákova',
          'Štychova',
          'Štychova',
          'Štíbrova',
          'Štíhlická',
          'Štítného',
          'Štítová',
          'Štúrova',
          'Štúrova',
          'Štěchovická',
          'Štěpanická',
          'Štěpařská',
          'Štěpničná',
          'Štěpánkova',
          'Štěpánovská',
          'Štěpánská',
          'Štěpánská',
          'Štěrboholská',
          'Štěrková',
          'Štětkova',
          'Štětínská',
          'Šubertova',
          'Šulcova',
          'Šultysova',
          'Šumavská',
          'Šumavského',
          'Šumberova',
          'Šumenská',
          'Šumická',
          'Šumperská',
          'Šustova',
          'Švabinského',
          'Švecova',
          'Švehlova',
          'Švehlova',
          'Švejcarovo Náměstí',
          'Švestková',
          'Švestková',
          'Švestková',
          'Švihovská',
          'Švábky',
          'Švábova',
          'Švédská',
          'Šárecká',
          'Šárovo Kolo',
          'Šárčina',
          'Šátalská',
          'Šífařská',
          'Šímova',
          'Šípková',
          'Šítkova',
          'Šťastného',
          'Šůrova',
          'Žabovřeská',
          'Žacléřská',
          'Žalanského',
          'Žalmanova',
          'Žalovská',
          'Žamberská',
          'Žampašská',
          'Žampiónová',
          'Žandovská',
          'Žatecká',
          'Žatecká',
          'Žateckých',
          'Ždírnická',
          'Žehuňská',
          'Žehušická',
          'Želetavská',
          'Železniční',
          'Železničářů',
          'Železnobrodská',
          'Železná',
          'Želivecká',
          'Želivka',
          'Želivská',
          'Želkovická',
          'Želnavská',
          'Ženíškova',
          'Žeretická',
          'Žermanická',
          'Žernosecká',
          'Žernovská',
          'Žerotínova',
          'Žherská',
          'Žichlínská',
          'Židlického',
          'Žilinská',
          'Žilovská',
          'Žinkovská',
          'Žirovnická',
          'Žitavská',
          'Žitavského',
          'Žitná',
          'Žitná',
          'Žitomírská',
          'Živanická',
          'Živcová',
          'Živcových',
          'Živonínská',
          'Žiželická',
          'Žižkova',
          'Žižkovo Nám.',
          'Žižkovo Náměstí',
          'Žlebská',
          'Žluťásková',
          'Žofie Podlipské',
          'Žufanova',
          'Žukovského',
          'Žukovského',
          'Žulová',
          'Županovická',
          'Žvahovská',
          'Žábova',
          'Žákovská',
          'Žárovická',
          'Žíšovská',
          'Žďárská',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/cz/address/street_name.js': [
      function(require, module, exports) {
        module['exports'] = ['#{street}']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/cz/address/street_address.js': [
      function(require, module, exports) {
        module['exports'] = ['#{street_name} #{building_number}']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/cz/address/default_country.js': [
      function(require, module, exports) {
        module['exports'] = ['Česká republika']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/cz/address/index.js': [
      function(require, module, exports) {
        var address = {}
        module['exports'] = address
        address.country = require('./country')
        address.building_number = require('./building_number')
        address.secondary_address = require('./secondary_address')
        address.postcode = require('./postcode')
        address.state = require('./state')
        address.state_abbr = require('./state_abbr')
        address.time_zone = require('./time_zone')
        address.city_name = require('./city_name')
        address.city = require('./city')
        address.street = require('./street')
        address.street_name = require('./street_name')
        address.street_address = require('./street_address')
        address.default_country = require('./default_country')
      },
      {
        './country':
          '../node_modules/faker/lib/locales/cz/address/country.js',
        './building_number':
          '../node_modules/faker/lib/locales/cz/address/building_number.js',
        './secondary_address':
          '../node_modules/faker/lib/locales/cz/address/secondary_address.js',
        './postcode':
          '../node_modules/faker/lib/locales/cz/address/postcode.js',
        './state': '../node_modules/faker/lib/locales/cz/address/state.js',
        './state_abbr':
          '../node_modules/faker/lib/locales/cz/address/state_abbr.js',
        './time_zone':
          '../node_modules/faker/lib/locales/cz/address/time_zone.js',
        './city_name':
          '../node_modules/faker/lib/locales/cz/address/city_name.js',
        './city': '../node_modules/faker/lib/locales/cz/address/city.js',
        './street':
          '../node_modules/faker/lib/locales/cz/address/street.js',
        './street_name':
          '../node_modules/faker/lib/locales/cz/address/street_name.js',
        './street_address':
          '../node_modules/faker/lib/locales/cz/address/street_address.js',
        './default_country':
          '../node_modules/faker/lib/locales/cz/address/default_country.js',
      },
    ],
    '../node_modules/faker/lib/locales/cz/company/suffix.js': [
      function(require, module, exports) {
        module['exports'] = ['s.r.o.', 'a.s.', 'v.o.s.']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/cz/company/adjective.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Adaptive',
          'Advanced',
          'Ameliorated',
          'Assimilated',
          'Automated',
          'Balanced',
          'Business-focused',
          'Centralized',
          'Cloned',
          'Compatible',
          'Configurable',
          'Cross-group',
          'Cross-platform',
          'Customer-focused',
          'Customizable',
          'Decentralized',
          'De-engineered',
          'Devolved',
          'Digitized',
          'Distributed',
          'Diverse',
          'Down-sized',
          'Enhanced',
          'Enterprise-wide',
          'Ergonomic',
          'Exclusive',
          'Expanded',
          'Extended',
          'Face to face',
          'Focused',
          'Front-line',
          'Fully-configurable',
          'Function-based',
          'Fundamental',
          'Future-proofed',
          'Grass-roots',
          'Horizontal',
          'Implemented',
          'Innovative',
          'Integrated',
          'Intuitive',
          'Inverse',
          'Managed',
          'Mandatory',
          'Monitored',
          'Multi-channelled',
          'Multi-lateral',
          'Multi-layered',
          'Multi-tiered',
          'Networked',
          'Object-based',
          'Open-architected',
          'Open-source',
          'Operative',
          'Optimized',
          'Optional',
          'Organic',
          'Organized',
          'Persevering',
          'Persistent',
          'Phased',
          'Polarised',
          'Pre-emptive',
          'Proactive',
          'Profit-focused',
          'Profound',
          'Programmable',
          'Progressive',
          'Public-key',
          'Quality-focused',
          'Reactive',
          'Realigned',
          'Re-contextualized',
          'Re-engineered',
          'Reduced',
          'Reverse-engineered',
          'Right-sized',
          'Robust',
          'Seamless',
          'Secured',
          'Self-enabling',
          'Sharable',
          'Stand-alone',
          'Streamlined',
          'Switchable',
          'Synchronised',
          'Synergistic',
          'Synergized',
          'Team-oriented',
          'Total',
          'Triple-buffered',
          'Universal',
          'Up-sized',
          'Upgradable',
          'User-centric',
          'User-friendly',
          'Versatile',
          'Virtual',
          'Visionary',
          'Vision-oriented',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/cz/company/descriptor.js': [
      function(require, module, exports) {
        module['exports'] = [
          '24 hour',
          '24/7',
          '3rd generation',
          '4th generation',
          '5th generation',
          '6th generation',
          'actuating',
          'analyzing',
          'asymmetric',
          'asynchronous',
          'attitude-oriented',
          'background',
          'bandwidth-monitored',
          'bi-directional',
          'bifurcated',
          'bottom-line',
          'clear-thinking',
          'client-driven',
          'client-server',
          'coherent',
          'cohesive',
          'composite',
          'context-sensitive',
          'contextually-based',
          'content-based',
          'dedicated',
          'demand-driven',
          'didactic',
          'directional',
          'discrete',
          'disintermediate',
          'dynamic',
          'eco-centric',
          'empowering',
          'encompassing',
          'even-keeled',
          'executive',
          'explicit',
          'exuding',
          'fault-tolerant',
          'foreground',
          'fresh-thinking',
          'full-range',
          'global',
          'grid-enabled',
          'heuristic',
          'high-level',
          'holistic',
          'homogeneous',
          'human-resource',
          'hybrid',
          'impactful',
          'incremental',
          'intangible',
          'interactive',
          'intermediate',
          'leading edge',
          'local',
          'logistical',
          'maximized',
          'methodical',
          'mission-critical',
          'mobile',
          'modular',
          'motivating',
          'multimedia',
          'multi-state',
          'multi-tasking',
          'national',
          'needs-based',
          'neutral',
          'next generation',
          'non-volatile',
          'object-oriented',
          'optimal',
          'optimizing',
          'radical',
          'real-time',
          'reciprocal',
          'regional',
          'responsive',
          'scalable',
          'secondary',
          'solution-oriented',
          'stable',
          'static',
          'systematic',
          'systemic',
          'system-worthy',
          'tangible',
          'tertiary',
          'transitional',
          'uniform',
          'upward-trending',
          'user-facing',
          'value-added',
          'web-enabled',
          'well-modulated',
          'zero administration',
          'zero defect',
          'zero tolerance',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/cz/company/noun.js': [
      function(require, module, exports) {
        module['exports'] = [
          'ability',
          'access',
          'adapter',
          'algorithm',
          'alliance',
          'analyzer',
          'application',
          'approach',
          'architecture',
          'archive',
          'artificial intelligence',
          'array',
          'attitude',
          'benchmark',
          'budgetary management',
          'capability',
          'capacity',
          'challenge',
          'circuit',
          'collaboration',
          'complexity',
          'concept',
          'conglomeration',
          'contingency',
          'core',
          'customer loyalty',
          'database',
          'data-warehouse',
          'definition',
          'emulation',
          'encoding',
          'encryption',
          'extranet',
          'firmware',
          'flexibility',
          'focus group',
          'forecast',
          'frame',
          'framework',
          'function',
          'functionalities',
          'Graphic Interface',
          'groupware',
          'Graphical User Interface',
          'hardware',
          'help-desk',
          'hierarchy',
          'hub',
          'implementation',
          'info-mediaries',
          'infrastructure',
          'initiative',
          'installation',
          'instruction set',
          'interface',
          'internet solution',
          'intranet',
          'knowledge user',
          'knowledge base',
          'local area network',
          'leverage',
          'matrices',
          'matrix',
          'methodology',
          'middleware',
          'migration',
          'model',
          'moderator',
          'monitoring',
          'moratorium',
          'neural-net',
          'open architecture',
          'open system',
          'orchestration',
          'paradigm',
          'parallelism',
          'policy',
          'portal',
          'pricing structure',
          'process improvement',
          'product',
          'productivity',
          'project',
          'projection',
          'protocol',
          'secured line',
          'service-desk',
          'software',
          'solution',
          'standardization',
          'strategy',
          'structure',
          'success',
          'superstructure',
          'support',
          'synergy',
          'system engine',
          'task-force',
          'throughput',
          'time-frame',
          'toolset',
          'utilisation',
          'website',
          'workforce',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/cz/company/bs_verb.js': [
      function(require, module, exports) {
        module['exports'] = [
          'implement',
          'utilize',
          'integrate',
          'streamline',
          'optimize',
          'evolve',
          'transform',
          'embrace',
          'enable',
          'orchestrate',
          'leverage',
          'reinvent',
          'aggregate',
          'architect',
          'enhance',
          'incentivize',
          'morph',
          'empower',
          'envisioneer',
          'monetize',
          'harness',
          'facilitate',
          'seize',
          'disintermediate',
          'synergize',
          'strategize',
          'deploy',
          'brand',
          'grow',
          'target',
          'syndicate',
          'synthesize',
          'deliver',
          'mesh',
          'incubate',
          'engage',
          'maximize',
          'benchmark',
          'expedite',
          'reintermediate',
          'whiteboard',
          'visualize',
          'repurpose',
          'innovate',
          'scale',
          'unleash',
          'drive',
          'extend',
          'engineer',
          'revolutionize',
          'generate',
          'exploit',
          'transition',
          'e-enable',
          'iterate',
          'cultivate',
          'matrix',
          'productize',
          'redefine',
          'recontextualize',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/cz/company/bs_noun.js': [
      function(require, module, exports) {
        module['exports'] = [
          'clicks-and-mortar',
          'value-added',
          'vertical',
          'proactive',
          'robust',
          'revolutionary',
          'scalable',
          'leading-edge',
          'innovative',
          'intuitive',
          'strategic',
          'e-business',
          'mission-critical',
          'sticky',
          'one-to-one',
          '24/7',
          'end-to-end',
          'global',
          'B2B',
          'B2C',
          'granular',
          'frictionless',
          'virtual',
          'viral',
          'dynamic',
          '24/365',
          'best-of-breed',
          'killer',
          'magnetic',
          'bleeding-edge',
          'web-enabled',
          'interactive',
          'dot-com',
          'sexy',
          'back-end',
          'real-time',
          'efficient',
          'front-end',
          'distributed',
          'seamless',
          'extensible',
          'turn-key',
          'world-class',
          'open-source',
          'cross-platform',
          'cross-media',
          'synergistic',
          'bricks-and-clicks',
          'out-of-the-box',
          'enterprise',
          'integrated',
          'impactful',
          'wireless',
          'transparent',
          'next-generation',
          'cutting-edge',
          'user-centric',
          'visionary',
          'customized',
          'ubiquitous',
          'plug-and-play',
          'collaborative',
          'compelling',
          'holistic',
          'rich',
          'synergies',
          'web-readiness',
          'paradigms',
          'markets',
          'partnerships',
          'infrastructures',
          'platforms',
          'initiatives',
          'channels',
          'eyeballs',
          'communities',
          'ROI',
          'solutions',
          'e-tailers',
          'e-services',
          'action-items',
          'portals',
          'niches',
          'technologies',
          'content',
          'vortals',
          'supply-chains',
          'convergence',
          'relationships',
          'architectures',
          'interfaces',
          'e-markets',
          'e-commerce',
          'systems',
          'bandwidth',
          'infomediaries',
          'models',
          'mindshare',
          'deliverables',
          'users',
          'schemas',
          'networks',
          'applications',
          'metrics',
          'e-business',
          'functionalities',
          'experiences',
          'web services',
          'methodologies',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/cz/company/name.js': [
      function(require, module, exports) {
        module['exports'] = [
          '#{Name.last_name} #{suffix}',
          '#{Name.last_name} #{suffix}',
          '#{Name.man_last_name} a #{Name.man_last_name} #{suffix}',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/cz/company/index.js': [
      function(require, module, exports) {
        var company = {}
        module['exports'] = company
        company.suffix = require('./suffix')
        company.adjective = require('./adjective')
        company.descriptor = require('./descriptor')
        company.noun = require('./noun')
        company.bs_verb = require('./bs_verb')
        company.bs_noun = require('./bs_noun')
        company.name = require('./name')
      },
      {
        './suffix':
          '../node_modules/faker/lib/locales/cz/company/suffix.js',
        './adjective':
          '../node_modules/faker/lib/locales/cz/company/adjective.js',
        './descriptor':
          '../node_modules/faker/lib/locales/cz/company/descriptor.js',
        './noun': '../node_modules/faker/lib/locales/cz/company/noun.js',
        './bs_verb':
          '../node_modules/faker/lib/locales/cz/company/bs_verb.js',
        './bs_noun':
          '../node_modules/faker/lib/locales/cz/company/bs_noun.js',
        './name': '../node_modules/faker/lib/locales/cz/company/name.js',
      },
    ],
    '../node_modules/faker/lib/locales/cz/internet/free_email.js': [
      function(require, module, exports) {
        module['exports'] = [
          'gmail.com',
          'seznam.cz',
          'centrum.cz',
          'volny.cz',
          'atlas.cz',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/cz/internet/domain_suffix.js': [
      function(require, module, exports) {
        module['exports'] = ['cz', 'com', 'net', 'eu', 'org']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/cz/internet/index.js': [
      function(require, module, exports) {
        var internet = {}
        module['exports'] = internet
        internet.free_email = require('./free_email')
        internet.domain_suffix = require('./domain_suffix')
      },
      {
        './free_email':
          '../node_modules/faker/lib/locales/cz/internet/free_email.js',
        './domain_suffix':
          '../node_modules/faker/lib/locales/cz/internet/domain_suffix.js',
      },
    ],
    '../node_modules/faker/lib/locales/cz/lorem/words.js': [
      function(require, module, exports) {
        module['exports'] = [
          'alias',
          'consequatur',
          'aut',
          'perferendis',
          'sit',
          'voluptatem',
          'accusantium',
          'doloremque',
          'aperiam',
          'eaque',
          'ipsa',
          'quae',
          'ab',
          'illo',
          'inventore',
          'veritatis',
          'et',
          'quasi',
          'architecto',
          'beatae',
          'vitae',
          'dicta',
          'sunt',
          'explicabo',
          'aspernatur',
          'aut',
          'odit',
          'aut',
          'fugit',
          'sed',
          'quia',
          'consequuntur',
          'magni',
          'dolores',
          'eos',
          'qui',
          'ratione',
          'voluptatem',
          'sequi',
          'nesciunt',
          'neque',
          'dolorem',
          'ipsum',
          'quia',
          'dolor',
          'sit',
          'amet',
          'consectetur',
          'adipisci',
          'velit',
          'sed',
          'quia',
          'non',
          'numquam',
          'eius',
          'modi',
          'tempora',
          'incidunt',
          'ut',
          'labore',
          'et',
          'dolore',
          'magnam',
          'aliquam',
          'quaerat',
          'voluptatem',
          'ut',
          'enim',
          'ad',
          'minima',
          'veniam',
          'quis',
          'nostrum',
          'exercitationem',
          'ullam',
          'corporis',
          'nemo',
          'enim',
          'ipsam',
          'voluptatem',
          'quia',
          'voluptas',
          'sit',
          'suscipit',
          'laboriosam',
          'nisi',
          'ut',
          'aliquid',
          'ex',
          'ea',
          'commodi',
          'consequatur',
          'quis',
          'autem',
          'vel',
          'eum',
          'iure',
          'reprehenderit',
          'qui',
          'in',
          'ea',
          'voluptate',
          'velit',
          'esse',
          'quam',
          'nihil',
          'molestiae',
          'et',
          'iusto',
          'odio',
          'dignissimos',
          'ducimus',
          'qui',
          'blanditiis',
          'praesentium',
          'laudantium',
          'totam',
          'rem',
          'voluptatum',
          'deleniti',
          'atque',
          'corrupti',
          'quos',
          'dolores',
          'et',
          'quas',
          'molestias',
          'excepturi',
          'sint',
          'occaecati',
          'cupiditate',
          'non',
          'provident',
          'sed',
          'ut',
          'perspiciatis',
          'unde',
          'omnis',
          'iste',
          'natus',
          'error',
          'similique',
          'sunt',
          'in',
          'culpa',
          'qui',
          'officia',
          'deserunt',
          'mollitia',
          'animi',
          'id',
          'est',
          'laborum',
          'et',
          'dolorum',
          'fuga',
          'et',
          'harum',
          'quidem',
          'rerum',
          'facilis',
          'est',
          'et',
          'expedita',
          'distinctio',
          'nam',
          'libero',
          'tempore',
          'cum',
          'soluta',
          'nobis',
          'est',
          'eligendi',
          'optio',
          'cumque',
          'nihil',
          'impedit',
          'quo',
          'porro',
          'quisquam',
          'est',
          'qui',
          'minus',
          'id',
          'quod',
          'maxime',
          'placeat',
          'facere',
          'possimus',
          'omnis',
          'voluptas',
          'assumenda',
          'est',
          'omnis',
          'dolor',
          'repellendus',
          'temporibus',
          'autem',
          'quibusdam',
          'et',
          'aut',
          'consequatur',
          'vel',
          'illum',
          'qui',
          'dolorem',
          'eum',
          'fugiat',
          'quo',
          'voluptas',
          'nulla',
          'pariatur',
          'at',
          'vero',
          'eos',
          'et',
          'accusamus',
          'officiis',
          'debitis',
          'aut',
          'rerum',
          'necessitatibus',
          'saepe',
          'eveniet',
          'ut',
          'et',
          'voluptates',
          'repudiandae',
          'sint',
          'et',
          'molestiae',
          'non',
          'recusandae',
          'itaque',
          'earum',
          'rerum',
          'hic',
          'tenetur',
          'a',
          'sapiente',
          'delectus',
          'ut',
          'aut',
          'reiciendis',
          'voluptatibus',
          'maiores',
          'doloribus',
          'asperiores',
          'repellat',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/cz/lorem/supplemental.js': [
      function(require, module, exports) {
        module['exports'] = [
          'abbas',
          'abduco',
          'abeo',
          'abscido',
          'absconditus',
          'absens',
          'absorbeo',
          'absque',
          'abstergo',
          'absum',
          'abundans',
          'abutor',
          'accedo',
          'accendo',
          'acceptus',
          'accipio',
          'accommodo',
          'accusator',
          'acer',
          'acerbitas',
          'acervus',
          'acidus',
          'acies',
          'acquiro',
          'acsi',
          'adamo',
          'adaugeo',
          'addo',
          'adduco',
          'ademptio',
          'adeo',
          'adeptio',
          'adfectus',
          'adfero',
          'adficio',
          'adflicto',
          'adhaero',
          'adhuc',
          'adicio',
          'adimpleo',
          'adinventitias',
          'adipiscor',
          'adiuvo',
          'administratio',
          'admiratio',
          'admitto',
          'admoneo',
          'admoveo',
          'adnuo',
          'adopto',
          'adsidue',
          'adstringo',
          'adsuesco',
          'adsum',
          'adulatio',
          'adulescens',
          'adultus',
          'aduro',
          'advenio',
          'adversus',
          'advoco',
          'aedificium',
          'aeger',
          'aegre',
          'aegrotatio',
          'aegrus',
          'aeneus',
          'aequitas',
          'aequus',
          'aer',
          'aestas',
          'aestivus',
          'aestus',
          'aetas',
          'aeternus',
          'ager',
          'aggero',
          'aggredior',
          'agnitio',
          'agnosco',
          'ago',
          'ait',
          'aiunt',
          'alienus',
          'alii',
          'alioqui',
          'aliqua',
          'alius',
          'allatus',
          'alo',
          'alter',
          'altus',
          'alveus',
          'amaritudo',
          'ambitus',
          'ambulo',
          'amicitia',
          'amiculum',
          'amissio',
          'amita',
          'amitto',
          'amo',
          'amor',
          'amoveo',
          'amplexus',
          'amplitudo',
          'amplus',
          'ancilla',
          'angelus',
          'angulus',
          'angustus',
          'animadverto',
          'animi',
          'animus',
          'annus',
          'anser',
          'ante',
          'antea',
          'antepono',
          'antiquus',
          'aperio',
          'aperte',
          'apostolus',
          'apparatus',
          'appello',
          'appono',
          'appositus',
          'approbo',
          'apto',
          'aptus',
          'apud',
          'aqua',
          'ara',
          'aranea',
          'arbitro',
          'arbor',
          'arbustum',
          'arca',
          'arceo',
          'arcesso',
          'arcus',
          'argentum',
          'argumentum',
          'arguo',
          'arma',
          'armarium',
          'armo',
          'aro',
          'ars',
          'articulus',
          'artificiose',
          'arto',
          'arx',
          'ascisco',
          'ascit',
          'asper',
          'aspicio',
          'asporto',
          'assentator',
          'astrum',
          'atavus',
          'ater',
          'atqui',
          'atrocitas',
          'atrox',
          'attero',
          'attollo',
          'attonbitus',
          'auctor',
          'auctus',
          'audacia',
          'audax',
          'audentia',
          'audeo',
          'audio',
          'auditor',
          'aufero',
          'aureus',
          'auris',
          'aurum',
          'aut',
          'autem',
          'autus',
          'auxilium',
          'avaritia',
          'avarus',
          'aveho',
          'averto',
          'avoco',
          'baiulus',
          'balbus',
          'barba',
          'bardus',
          'basium',
          'beatus',
          'bellicus',
          'bellum',
          'bene',
          'beneficium',
          'benevolentia',
          'benigne',
          'bestia',
          'bibo',
          'bis',
          'blandior',
          'bonus',
          'bos',
          'brevis',
          'cado',
          'caecus',
          'caelestis',
          'caelum',
          'calamitas',
          'calcar',
          'calco',
          'calculus',
          'callide',
          'campana',
          'candidus',
          'canis',
          'canonicus',
          'canto',
          'capillus',
          'capio',
          'capitulus',
          'capto',
          'caput',
          'carbo',
          'carcer',
          'careo',
          'caries',
          'cariosus',
          'caritas',
          'carmen',
          'carpo',
          'carus',
          'casso',
          'caste',
          'casus',
          'catena',
          'caterva',
          'cattus',
          'cauda',
          'causa',
          'caute',
          'caveo',
          'cavus',
          'cedo',
          'celebrer',
          'celer',
          'celo',
          'cena',
          'cenaculum',
          'ceno',
          'censura',
          'centum',
          'cerno',
          'cernuus',
          'certe',
          'certo',
          'certus',
          'cervus',
          'cetera',
          'charisma',
          'chirographum',
          'cibo',
          'cibus',
          'cicuta',
          'cilicium',
          'cimentarius',
          'ciminatio',
          'cinis',
          'circumvenio',
          'cito',
          'civis',
          'civitas',
          'clam',
          'clamo',
          'claro',
          'clarus',
          'claudeo',
          'claustrum',
          'clementia',
          'clibanus',
          'coadunatio',
          'coaegresco',
          'coepi',
          'coerceo',
          'cogito',
          'cognatus',
          'cognomen',
          'cogo',
          'cohaero',
          'cohibeo',
          'cohors',
          'colligo',
          'colloco',
          'collum',
          'colo',
          'color',
          'coma',
          'combibo',
          'comburo',
          'comedo',
          'comes',
          'cometes',
          'comis',
          'comitatus',
          'commemoro',
          'comminor',
          'commodo',
          'communis',
          'comparo',
          'compello',
          'complectus',
          'compono',
          'comprehendo',
          'comptus',
          'conatus',
          'concedo',
          'concido',
          'conculco',
          'condico',
          'conduco',
          'confero',
          'confido',
          'conforto',
          'confugo',
          'congregatio',
          'conicio',
          'coniecto',
          'conitor',
          'coniuratio',
          'conor',
          'conqueror',
          'conscendo',
          'conservo',
          'considero',
          'conspergo',
          'constans',
          'consuasor',
          'contabesco',
          'contego',
          'contigo',
          'contra',
          'conturbo',
          'conventus',
          'convoco',
          'copia',
          'copiose',
          'cornu',
          'corona',
          'corpus',
          'correptius',
          'corrigo',
          'corroboro',
          'corrumpo',
          'coruscus',
          'cotidie',
          'crapula',
          'cras',
          'crastinus',
          'creator',
          'creber',
          'crebro',
          'credo',
          'creo',
          'creptio',
          'crepusculum',
          'cresco',
          'creta',
          'cribro',
          'crinis',
          'cruciamentum',
          'crudelis',
          'cruentus',
          'crur',
          'crustulum',
          'crux',
          'cubicularis',
          'cubitum',
          'cubo',
          'cui',
          'cuius',
          'culpa',
          'culpo',
          'cultellus',
          'cultura',
          'cum',
          'cunabula',
          'cunae',
          'cunctatio',
          'cupiditas',
          'cupio',
          'cuppedia',
          'cupressus',
          'cur',
          'cura',
          'curatio',
          'curia',
          'curiositas',
          'curis',
          'curo',
          'curriculum',
          'currus',
          'cursim',
          'curso',
          'cursus',
          'curto',
          'curtus',
          'curvo',
          'curvus',
          'custodia',
          'damnatio',
          'damno',
          'dapifer',
          'debeo',
          'debilito',
          'decens',
          'decerno',
          'decet',
          'decimus',
          'decipio',
          'decor',
          'decretum',
          'decumbo',
          'dedecor',
          'dedico',
          'deduco',
          'defaeco',
          'defendo',
          'defero',
          'defessus',
          'defetiscor',
          'deficio',
          'defigo',
          'defleo',
          'defluo',
          'defungo',
          'degenero',
          'degero',
          'degusto',
          'deinde',
          'delectatio',
          'delego',
          'deleo',
          'delibero',
          'delicate',
          'delinquo',
          'deludo',
          'demens',
          'demergo',
          'demitto',
          'demo',
          'demonstro',
          'demoror',
          'demulceo',
          'demum',
          'denego',
          'denique',
          'dens',
          'denuncio',
          'denuo',
          'deorsum',
          'depereo',
          'depono',
          'depopulo',
          'deporto',
          'depraedor',
          'deprecator',
          'deprimo',
          'depromo',
          'depulso',
          'deputo',
          'derelinquo',
          'derideo',
          'deripio',
          'desidero',
          'desino',
          'desipio',
          'desolo',
          'desparatus',
          'despecto',
          'despirmatio',
          'infit',
          'inflammatio',
          'paens',
          'patior',
          'patria',
          'patrocinor',
          'patruus',
          'pauci',
          'paulatim',
          'pauper',
          'pax',
          'peccatus',
          'pecco',
          'pecto',
          'pectus',
          'pecunia',
          'pecus',
          'peior',
          'pel',
          'ocer',
          'socius',
          'sodalitas',
          'sol',
          'soleo',
          'solio',
          'solitudo',
          'solium',
          'sollers',
          'sollicito',
          'solum',
          'solus',
          'solutio',
          'solvo',
          'somniculosus',
          'somnus',
          'sonitus',
          'sono',
          'sophismata',
          'sopor',
          'sordeo',
          'sortitus',
          'spargo',
          'speciosus',
          'spectaculum',
          'speculum',
          'sperno',
          'spero',
          'spes',
          'spiculum',
          'spiritus',
          'spoliatio',
          'sponte',
          'stabilis',
          'statim',
          'statua',
          'stella',
          'stillicidium',
          'stipes',
          'stips',
          'sto',
          'strenuus',
          'strues',
          'studio',
          'stultus',
          'suadeo',
          'suasoria',
          'sub',
          'subito',
          'subiungo',
          'sublime',
          'subnecto',
          'subseco',
          'substantia',
          'subvenio',
          'succedo',
          'succurro',
          'sufficio',
          'suffoco',
          'suffragium',
          'suggero',
          'sui',
          'sulum',
          'sum',
          'summa',
          'summisse',
          'summopere',
          'sumo',
          'sumptus',
          'supellex',
          'super',
          'suppellex',
          'supplanto',
          'suppono',
          'supra',
          'surculus',
          'surgo',
          'sursum',
          'suscipio',
          'suspendo',
          'sustineo',
          'suus',
          'synagoga',
          'tabella',
          'tabernus',
          'tabesco',
          'tabgo',
          'tabula',
          'taceo',
          'tactus',
          'taedium',
          'talio',
          'talis',
          'talus',
          'tam',
          'tamdiu',
          'tamen',
          'tametsi',
          'tamisium',
          'tamquam',
          'tandem',
          'tantillus',
          'tantum',
          'tardus',
          'tego',
          'temeritas',
          'temperantia',
          'templum',
          'temptatio',
          'tempus',
          'tenax',
          'tendo',
          'teneo',
          'tener',
          'tenuis',
          'tenus',
          'tepesco',
          'tepidus',
          'ter',
          'terebro',
          'teres',
          'terga',
          'tergeo',
          'tergiversatio',
          'tergo',
          'tergum',
          'termes',
          'terminatio',
          'tero',
          'terra',
          'terreo',
          'territo',
          'terror',
          'tersus',
          'tertius',
          'testimonium',
          'texo',
          'textilis',
          'textor',
          'textus',
          'thalassinus',
          'theatrum',
          'theca',
          'thema',
          'theologus',
          'thermae',
          'thesaurus',
          'thesis',
          'thorax',
          'thymbra',
          'thymum',
          'tibi',
          'timidus',
          'timor',
          'titulus',
          'tolero',
          'tollo',
          'tondeo',
          'tonsor',
          'torqueo',
          'torrens',
          'tot',
          'totidem',
          'toties',
          'totus',
          'tracto',
          'trado',
          'traho',
          'trans',
          'tredecim',
          'tremo',
          'trepide',
          'tres',
          'tribuo',
          'tricesimus',
          'triduana',
          'triginta',
          'tripudio',
          'tristis',
          'triumphus',
          'trucido',
          'truculenter',
          'tubineus',
          'tui',
          'tum',
          'tumultus',
          'tunc',
          'turba',
          'turbo',
          'turpe',
          'turpis',
          'tutamen',
          'tutis',
          'tyrannus',
          'uberrime',
          'ubi',
          'ulciscor',
          'ullus',
          'ulterius',
          'ultio',
          'ultra',
          'umbra',
          'umerus',
          'umquam',
          'una',
          'unde',
          'undique',
          'universe',
          'unus',
          'urbanus',
          'urbs',
          'uredo',
          'usitas',
          'usque',
          'ustilo',
          'ustulo',
          'usus',
          'uter',
          'uterque',
          'utilis',
          'utique',
          'utor',
          'utpote',
          'utrimque',
          'utroque',
          'utrum',
          'uxor',
          'vaco',
          'vacuus',
          'vado',
          'vae',
          'valde',
          'valens',
          'valeo',
          'valetudo',
          'validus',
          'vallum',
          'vapulus',
          'varietas',
          'varius',
          'vehemens',
          'vel',
          'velociter',
          'velum',
          'velut',
          'venia',
          'venio',
          'ventito',
          'ventosus',
          'ventus',
          'venustas',
          'ver',
          'verbera',
          'verbum',
          'vere',
          'verecundia',
          'vereor',
          'vergo',
          'veritas',
          'vero',
          'versus',
          'verto',
          'verumtamen',
          'verus',
          'vesco',
          'vesica',
          'vesper',
          'vespillo',
          'vester',
          'vestigium',
          'vestrum',
          'vetus',
          'via',
          'vicinus',
          'vicissitudo',
          'victoria',
          'victus',
          'videlicet',
          'video',
          'viduata',
          'viduo',
          'vigilo',
          'vigor',
          'vilicus',
          'vilis',
          'vilitas',
          'villa',
          'vinco',
          'vinculum',
          'vindico',
          'vinitor',
          'vinum',
          'vir',
          'virga',
          'virgo',
          'viridis',
          'viriliter',
          'virtus',
          'vis',
          'viscus',
          'vita',
          'vitiosus',
          'vitium',
          'vito',
          'vivo',
          'vix',
          'vobis',
          'vociferor',
          'voco',
          'volaticus',
          'volo',
          'volubilis',
          'voluntarius',
          'volup',
          'volutabrum',
          'volva',
          'vomer',
          'vomica',
          'vomito',
          'vorago',
          'vorax',
          'voro',
          'vos',
          'votum',
          'voveo',
          'vox',
          'vulariter',
          'vulgaris',
          'vulgivagus',
          'vulgo',
          'vulgus',
          'vulnero',
          'vulnus',
          'vulpes',
          'vulticulus',
          'vultuosus',
          'xiphias',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/cz/lorem/index.js': [
      function(require, module, exports) {
        var lorem = {}
        module['exports'] = lorem
        lorem.words = require('./words')
        lorem.supplemental = require('./supplemental')
      },
      {
        './words': '../node_modules/faker/lib/locales/cz/lorem/words.js',
        './supplemental':
          '../node_modules/faker/lib/locales/cz/lorem/supplemental.js',
      },
    ],
    '../node_modules/faker/lib/locales/cz/name/male_first_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Abadon',
          'Abdon',
          'Ábel',
          'Abelard',
          'Abraham',
          'Abrahám',
          'Absolon',
          'Absolón',
          'Adalbert',
          'Adam',
          'Adin',
          'Adolf',
          'Adrian',
          'Adrián',
          'Agaton',
          'Achil',
          'Achiles',
          'Alan',
          'Alban',
          'Albert',
          'Albín',
          'Albrecht',
          'Aldo',
          'Alen',
          'Aleš',
          'Alexandr',
          'Alexej',
          'Alfons',
          'Alfréd',
          'Alois',
          'Alojz',
          'Alva',
          'Alvar',
          'Alvin',
          'Amadeus',
          'Amand',
          'Amát',
          'Ambrož',
          'Amos',
          'Ámos',
          'Anastáz',
          'Anatol',
          'Anděl',
          'Andělín',
          'Andrej',
          'Anselm',
          'Antal',
          'Antonín',
          'Aram',
          'Ariel',
          'Aristid',
          'Arkád',
          'Armand',
          'Armin',
          'Arne',
          'Arnold',
          'Arnošt',
          'Áron',
          'Árón',
          'Arpád',
          'Arsen',
          'Artur',
          'Artuš',
          'Arzen',
          'Atanas',
          'Atanáš',
          'Atila',
          'August',
          'Augustin',
          'Augustýn',
          'Aurel',
          'Aurelián',
          'Axel',
          'Baltazar',
          'Barnabáš',
          'Bartoloměj',
          'Basil',
          'Bazil',
          'Beatus',
          'Bedřich',
          'Benedikt',
          'Benjamin',
          'Benjamín',
          'Bernard',
          'Bertold',
          'Bertram',
          'Bivoj',
          'Blahomil',
          'Blahomír',
          'Blahoslav',
          'Blažej',
          'Bohdan',
          'Bohuchval',
          'Bohumil',
          'Bohumír',
          'Bohun',
          'Bohuslav',
          'Bohuš',
          'Bojan',
          'Bolemír',
          'Boleslav',
          'Bonifác',
          'Borek',
          'Boris',
          'Borislav',
          'Bořek',
          'Bořislav',
          'Bořivoj',
          'Božetěch',
          'Božidar',
          'Božislav',
          'Branimír',
          'Branislav',
          'Bratislav',
          'Bret',
          'Brian',
          'Brit',
          'Bronislav',
          'Bruno',
          'Břetislav',
          'Budimír',
          'Budislav',
          'Budivoj',
          'Cecil',
          'Cedrik',
          'Celestin',
          'Celestýn',
          'César',
          'Cézar',
          'Ctibor',
          'Ctirad',
          'Ctislav',
          'Cyprián',
          'Cyril',
          'Čeněk',
          'Čestmír',
          'Čistoslav',
          'Dag',
          'Dalibor',
          'Dalimil',
          'Dalimír',
          'Damián',
          'Dan',
          'Daniel',
          'Darek',
          'Darius',
          'David',
          'Denis',
          'Děpold',
          'Dětmar',
          'Dětřich',
          'Dezider',
          'Dimitrij',
          'Dino',
          'Dionýz',
          'Dionýzos',
          'Diviš',
          'Dluhoš',
          'Dobromil',
          'Dobromír',
          'Dobroslav',
          'Dominik',
          'Donald',
          'Donát',
          'Dorian',
          'Dorián',
          'Drahomil',
          'Drahomír',
          'Drahoň',
          'Drahoslav',
          'Drahoš',
          'Drahotín',
          'Drahutin',
          'Dušan',
          'Edgar',
          'Edmond',
          'Edmund',
          'Eduard',
          'Edvard',
          'Edvin',
          'Edvín',
          'Egmont',
          'Egon',
          'Eliáš',
          'Elizej',
          'Elizeus',
          'Elmar',
          'Elvis',
          'Emanuel',
          'Emanuel',
          'Emerich',
          'Emil',
          'Emilián',
          'Engelbert',
          'Erazim',
          'Erazmus',
          'Erhard',
          'Erich',
          'Erik',
          'Ernest',
          'Ernst',
          'Ervín',
          'Eugen',
          'Eusebius',
          'Evald',
          'Evan',
          'Evarist',
          'Evžen',
          'Ezechiel',
          'Ezra',
          'Fabián',
          'Faust',
          'Faustin',
          'Faustýn',
          'Fedor',
          'Felicián',
          'Felix',
          'Ferdinand',
          'Fidel',
          'Fidelius',
          'Filemon',
          'Filibert',
          'Filip',
          'Filomen',
          'Flavián',
          'Flavius',
          'Florentin',
          'Florentýn',
          'Florián',
          'Fortunát',
          'Fráňa',
          'Franc',
          'František',
          'Fridolín',
          'Gabin',
          'Gabriel',
          'Gál',
          'Garik',
          'Gaston',
          'Gedeon',
          'Gejza',
          'Genadij',
          'Gerald',
          'Gerard',
          'Gerazim',
          'Gerhard',
          'Géza',
          'Gilbert',
          'Gleb',
          'Glen',
          'Gorazd',
          'Gordon',
          'Gothard',
          'Gracián',
          'Grant',
          'Gunter',
          'Gűnter',
          'Gustav',
          'Hanuš',
          'Harald',
          'Harold',
          'Haštal',
          'Havel',
          'Helmut',
          'Herbert',
          'Herman',
          'Heřman',
          'Hilar',
          'Hilarius',
          'Hjalmar',
          'Homér',
          'Honor',
          'Honorius',
          'Horác',
          'Horst',
          'Horymír',
          'Hostimil',
          'Hostimír',
          'Hostislav',
          'Hostivít',
          'Hovard',
          'Hubert',
          'Hugo',
          'Hvězdoslav',
          'Hyacint',
          'Hynek',
          'Hypolit',
          'Chrabroš',
          'Chraniboj',
          'Chranibor',
          'Chranislav',
          'Chrudoš',
          'Chval',
          'Ignác',
          'Ignát',
          'Igor',
          'Ilja',
          'Inocenc',
          'Irenej',
          'Ireneus',
          'Irvin',
          'Isidor',
          'Ivan',
          'Ivar',
          'Ivo',
          'Ivor',
          'Izaiáš',
          'Izák',
          'Izidor',
          'Izmael',
          'Jacek',
          'Jáchym',
          'Jakub',
          'Jan',
          'Jarmil',
          'Jarolím',
          'Jaromil',
          'Jaromír',
          'Jaroslav',
          'Jason',
          'Jasoň',
          'Jeremiáš',
          'Jeroným',
          'Jiljí',
          'Jimram',
          'Jindřich',
          'Jiří',
          'Job',
          'Joel',
          'Jonáš',
          'Jonatan',
          'Jonathan',
          'Jordan',
          'Josef',
          'Jošt',
          'Jozef',
          'Jozue',
          'Juda',
          'Julián',
          'Julius',
          'Justin',
          'Justýn',
          'Kajetán',
          'Kamil',
          'Karel',
          'Kasián',
          'Kastor',
          'Kašpar',
          'Kazimír',
          'Kilián',
          'Kim',
          'Klaudián',
          'Klaudius',
          'Klement',
          'Kliment',
          'Knut',
          'Koloman',
          'Kolombín',
          'Kolumbán',
          'Kolumbín',
          'Konrád',
          'Konstantin',
          'Konstantýn',
          'Kornel',
          'Kornelius',
          'Kosma',
          'Kosmas',
          'Krasomil',
          'Krasoslav',
          'Kristián',
          'Kryšpín',
          'Kryštof',
          'Křesomysl',
          'Křišťan',
          'Kurt',
          'Květoň',
          'Květoslav',
          'Květoš',
          'Kvido',
          'Ladislav',
          'Lambert',
          'Lars',
          'Laurenc',
          'Lazar',
          'Leander',
          'Leandr',
          'Leo',
          'Leodegar',
          'Leon',
          'Leonard',
          'Leonid',
          'Leontýn',
          'Leopold',
          'Leoš',
          'Lešek',
          'Lev',
          'Libor',
          'Liboslav',
          'Lionel',
          'Livius',
          'Lorenc',
          'Lotar',
          'Lothar',
          'Lubomír',
          'Lubor',
          'Luboslav',
          'Luboš',
          'Lucián',
          'Lucius',
          'Luděk',
          'Ludivoj',
          'Ludomír',
          'Ludoslav',
          'Ludvík',
          'Lukáš',
          'Lukrecius',
          'Lumír',
          'Lutibor',
          'Lutobor',
          'Magnus',
          'Makar',
          'Manfred',
          'Manfréd',
          'Mansvet',
          'Manuel',
          'Marcel',
          'Marek',
          'Marian',
          'Marián',
          'Marin',
          'Mario',
          'Marius',
          'Martin',
          'Matěj',
          'Matouš',
          'Matyáš',
          'Max',
          'Maxim',
          'Maximilián',
          'Maxmilián',
          'Mečislav',
          'Medard',
          'Melichar',
          'Merlin',
          'Mervin',
          'Metod',
          'Metoděj',
          'Michael',
          'Michal',
          'Mikoláš',
          'Mikuláš',
          'Milan',
          'Milíč',
          'Milík',
          'Milivoj',
          'Miloň',
          'Milorad',
          'Miloslav',
          'Miloš',
          'Milota',
          'Milouš',
          'Milovan',
          'Milovín',
          'Milutín',
          'Mirek',
          'Mirko',
          'Miromil',
          'Miron',
          'Miroslav',
          'Mirtil',
          'Mlad',
          'Mladen',
          'Mnata',
          'Mnislav',
          'Modest',
          'Mojmír',
          'Mojžíš',
          'Morgan',
          'Moric',
          'Moris',
          'Mořic',
          'Mstislav',
          'Myron',
          'Myrtil',
          'Napoleon',
          'Narcis',
          'Natan',
          'Natanael',
          'Nathan',
          'Nathanael',
          'Něhoslav',
          'Neklan',
          'Nepomuk',
          'Nezamysl',
          'Nikita',
          'Nikodém',
          'Nikola',
          'Nikolas',
          'Norbert',
          'Norman',
          'Odolen',
          'Odon',
          'Oktavián',
          'Oktavius',
          'Olaf',
          'Olbram',
          'Oldřich',
          'Oleg',
          'Oliver',
          'Omar',
          'Ondřej',
          'Orest',
          'Oskar',
          'Osvald',
          'Ota',
          'Otakar',
          'Otmar',
          'Oto',
          'Otokar',
          'Otomar',
          'Ovidius',
          'Palmiro',
          'Pankrác',
          'Pantaleon',
          'Paris',
          'Parsival',
          'Paskal',
          'Patrik',
          'Pavel',
          'Pavlín',
          'Pelhřim',
          'Perikles',
          'Petr',
          'Petronius',
          'Pius',
          'Platon',
          'Platón',
          'Polykarp',
          'Pravdomil',
          'Pravomil',
          'Prokop',
          'Prosper',
          'Přemysl',
          'Přibyslav',
          'Radan',
          'Radegast',
          'Radek',
          'Radhost',
          'Radim',
          'Radimír',
          'Radislav',
          'Radivoj',
          'Radko',
          'Radmil',
          'Radomil',
          'Radomír',
          'Radoslav',
          'Radoš',
          'Radovan',
          'Radúz',
          'Radvan',
          'Rafael',
          'Raimund',
          'Rainald',
          'Rainer',
          'Rainhard',
          'Rainold',
          'Rajko',
          'Ralf',
          'Ramon',
          'Randolf',
          'Ranek',
          'Ranko',
          'Rastislav',
          'Ratibor',
          'Ratmír',
          'Redmond',
          'Reginald',
          'Remig',
          'Remus',
          'Renát',
          'René',
          'Richard',
          'Robert',
          'Robin',
          'Robinson',
          'Rodan',
          'Roderik',
          'Rodrigo',
          'Roger',
          'Roch',
          'Roland',
          'Rolf',
          'Roman',
          'Romeo',
          'Romuald',
          'Romul',
          'Romulus',
          'Ronald',
          'Rostislav',
          'Ruben',
          'Rudolf',
          'Rufus',
          'Rupert',
          'Ruprecht',
          'Ruslan',
          'Řehoř',
          'Sába',
          'Sámo',
          'Samson',
          'Samuel',
          'Saturnin',
          'Saul',
          'Sáva',
          'Sebastian',
          'Sebastián',
          'Sebestian',
          'Sedrik',
          'Serafín',
          'Serenus',
          'Sergej',
          'Servác',
          'Severín',
          'Sidon',
          'Sigfríd',
          'Silvan',
          'Silván',
          'Silvestr',
          'Silvius',
          'Simeon',
          'Simon',
          'Sinkler',
          'Sixt',
          'Sixtus',
          'Slávek',
          'Slaviboj',
          'Slavibor',
          'Slavoboj',
          'Slavoj',
          'Slavomil',
          'Slavomír',
          'Smil',
          'Soběslav',
          'Sokrat',
          'Soter',
          'Spytihněv',
          'Stanimír',
          'Stanislav',
          'Stojan',
          'Stojmír',
          'Svatoboj',
          'Svatobor',
          'Svatomír',
          'Svatopluk',
          'Svatoslav',
          'Sven',
          'Svetozar',
          'Šalamoun',
          'Šalomoun',
          'Šavel',
          'Šebastián',
          'Šimon',
          'Šťasta',
          'Štefan',
          'Štěpán',
          'Tadeáš',
          'Tankred',
          'Taras',
          'Teobald',
          'Teodor',
          'Teodorik',
          'Teodoz',
          'Teofan',
          'Teofil',
          'Terenc',
          'Terencius',
          'Theobald',
          'Theodor',
          'Theodorik',
          'Theofan',
          'Theofil',
          'Tiber',
          'Tiberius',
          'Tibor',
          'Tiburcius',
          'Tichomil',
          'Tichomír',
          'Tichon',
          'Timon',
          'Timotej',
          'Timoteus',
          'Timur',
          'Titus',
          'Tobiáš',
          'Tomáš',
          'Tomislav',
          'Tor',
          'Torkvát',
          'Torsten',
          'Tristan',
          'Udo',
          'Ulrich',
          'Upton',
          'Urban',
          'Uve',
          'Václav',
          'Vadim',
          'Valdemar',
          'Valentin',
          'Valentýn',
          'Valerián',
          'Valter',
          'Valtr',
          'Vasil',
          'Vavřinec',
          'Veleslav',
          'Velimír',
          'Velislav',
          'Věnceslav',
          'Vendelín',
          'Věnek',
          'Verner',
          'Věroslav',
          'Vidor',
          'Viktor',
          'Viktorin',
          'Viktorín',
          'Vilém',
          'Vilibald',
          'Vilmar',
          'Vincenc',
          'Virgil',
          'Virgin',
          'Vít',
          'Vítězslav',
          'Vitold',
          'Vítoslav',
          'Vivian',
          'Vladan',
          'Vladimír',
          'Vladislav',
          'Vladivoj',
          'Vlastimil',
          'Vlastimír',
          'Vlastislav',
          'Vlk',
          'Vojen',
          'Vojmil',
          'Vojmír',
          'Vojslav',
          'Vojtěch',
          'Vok',
          'Volfgang',
          'Vratislav',
          'Vsevolod',
          'Všeboj',
          'Všebor',
          'Všerad',
          'Všeslav',
          'Xaver',
          'Xaverius',
          'Záboj',
          'Zachar',
          'Zachariáš',
          'Záviš',
          'Zbislav',
          'Zbyhněv',
          'Zbyněk',
          'Zbyslav',
          'Zbyšek',
          'Zdeněk',
          'Zderad',
          'Zdeslav',
          'Zdík',
          'Zdirad',
          'Zdislav',
          'Zeno',
          'Zenon',
          'Zikmund',
          'Zlatan',
          'Zlatko',
          'Zlatomír',
          'Zoltán',
          'Zoran',
          'Zoroslav',
          'Zosim',
          'Zvonimír',
          'Žarko',
          'Ždan',
          'Želibor',
          'Želimír',
          'Želislav',
          'Želmír',
          'Žitomír',
          'Žitoslav',
          'Živan',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/cz/name/female_first_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Abigail',
          'Ada',
          'Adalberta',
          'Adéla',
          'Adelaida',
          'Adina',
          'Adolfa',
          'Adolfína',
          'Adriana',
          'Adriána',
          'Adriena',
          'Afra',
          'Agáta',
          'Aglaja',
          'Aida',
          'Alana',
          'Albena',
          'Alberta',
          'Albertina',
          'Albertýna',
          'Albína',
          'Alena',
          'Aleška',
          'Alexandra',
          'Alfréda',
          'Alice',
          'Alida',
          'Alina',
          'Alma',
          'Aloisie',
          'Alojzije',
          'Alžběta',
          'Amálie',
          'Amanda',
          'Amáta',
          'Amélie',
          'Anabela',
          'Anastázie',
          'Anatázie',
          'Anatolie',
          'Anatólie',
          'Anděla',
          'Andělína',
          'Andrea',
          'Aneta',
          'Anežka',
          'Angela',
          'Angelika',
          'Anita',
          'Anna',
          'Anselma',
          'Antonie',
          'Apolena',
          'Arabela',
          'Aranka',
          'Areta',
          'Ariadna',
          'Ariana',
          'Ariela',
          'Arleta',
          'Armida',
          'Arna',
          'Arnolda',
          'Arnoštka',
          'Astrid',
          'Astrida',
          'Atanázie',
          'Augusta',
          'Augustina',
          'Augustýna',
          'Aura',
          'Aurélie',
          'Aurora',
          'Babeta',
          'Barbara',
          'Barbora',
          'Beáta',
          'Beatrice',
          'Bedřiška',
          'Bela',
          'Běla',
          'Belinda',
          'Benedikta',
          'Berenika',
          'Berit',
          'Bernarda',
          'Berta',
          'Bertolda',
          'Bianka',
          'Bibiana',
          'Birgit',
          'Birgita',
          'Blahomila',
          'Blahomíra',
          'Blahoslava',
          'Blanka',
          'Blažena',
          'Bohdana',
          'Bohumila',
          'Bohumíra',
          'Bohuna',
          'Bohuslava',
          'Bohuše',
          'Bojana',
          'Bojislava',
          'Boleslava',
          'Borislava',
          'Bořislava',
          'Božena',
          'Božetěcha',
          'Božidara',
          'Branimíra',
          'Branislava',
          'Bratislava',
          'Brenda',
          'Brigita',
          'Brita',
          'Bronislava',
          'Bruna',
          'Brunhilda',
          'Břetislava',
          'Cecilie',
          'Cecílie',
          'Celestina',
          'Celestýna',
          'Celie',
          'Celina',
          'Ctibora',
          'Ctirada',
          'Ctislava',
          'Cyntie',
          'Cyrila',
          'Čeňka',
          'Čestmíra',
          'Čistoslava',
          'Dagmar',
          'Dagmara',
          'Dalibora',
          'Dalida',
          'Dalie',
          'Dalila',
          'Dalimila',
          'Dalimíra',
          'Damaris',
          'Damiana',
          'Damiána',
          'Dana',
          'Danica',
          'Daniela',
          'Danuše',
          'Danuta',
          'Daria',
          'Darie',
          'Darina',
          'Darja',
          'Davida',
          'Debora',
          'Delie',
          'Denisa',
          'Diana',
          'Dina',
          'Dita',
          'Diviška',
          'Dobrava',
          'Dobromila',
          'Dobromíra',
          'Dobroslava',
          'Dominika',
          'Donalda',
          'Donáta',
          'Dora',
          'Doris',
          'Dorota',
          'Doubrava',
          'Doubravka',
          'Drahomila',
          'Drahomíra',
          'Drahoslava',
          'Drahotína',
          'Drahuše',
          'Dulcinea',
          'Dušana',
          'Edita',
          'Eduarda',
          'Edvarda',
          'Egona',
          'Ela',
          'Elektra',
          'Elena',
          'Eleonora',
          'Elfrída',
          'Eliška',
          'Elsa',
          'Elvíra',
          'Elza',
          'Ema',
          'Emanuela',
          'Emilie',
          'Emílie',
          'Erika',
          'Erna',
          'Ervína',
          'Estela',
          'Ester',
          'Estera',
          'Etela',
          'Eufrozina',
          'Eufrozína',
          'Eugenie',
          'Eulálie',
          'Eunika',
          'Eusebie',
          'Eva',
          'Evelina',
          'Evelína',
          'Evženie',
          'Fabiána',
          'Fabie',
          'Fatima',
          'Faustina',
          'Faustýna',
          'Féba',
          'Fedora',
          'Felicie',
          'Felície',
          'Felicita',
          'Ferdinanda',
          'Fidelie',
          'Filipa',
          'Filoména',
          'Flavie',
          'Flora',
          'Flóra',
          'Florentina',
          'Florentýna',
          'Františka',
          'Frída',
          'Gabriela',
          'Gaja',
          'Gajana',
          'Galina',
          'Garika',
          'Gema',
          'Geralda',
          'Geraldina',
          'Gerarda',
          'Gerardina',
          'Gerda',
          'Gerharda',
          'Gertruda',
          'Gilberta',
          'Gina',
          'Gisela',
          'Gita',
          'Gizela',
          'Glorie',
          'Gordana',
          'Graciána',
          'Gracie',
          'Grácie',
          'Gražina',
          'Gréta',
          'Griselda',
          'Grizelda',
          'Gudrun',
          'Gustava',
          'Gvendolina',
          'Gvendolína',
          'Halina',
          'Hana',
          'Háta',
          'Havla',
          'Heda',
          'Hedvika',
          'Heidrun',
          'Helena',
          'Helga',
          'Herberta',
          'Hermína',
          'Herta',
          'Hilda',
          'Hortensie',
          'Hortenzie',
          'Horymíra',
          'Hostimila',
          'Hostimíra',
          'Hostislava',
          'Hvězdoslava',
          'Hyacinta',
          'Chranislava',
          'Iboja',
          'Ida',
          'Ignácie',
          'Ignáta',
          'Ildika',
          'Iljana',
          'Ilona',
          'Ilsa',
          'Ilza',
          'Ines',
          'Inesa',
          'Inéz',
          'Ingeborg',
          'Ingeborga',
          'Ingrid',
          'Ingrida',
          'Inka',
          'Irena',
          'Iris',
          'Irma',
          'Isabela',
          'Isidora',
          'Isolda',
          'Iva',
          'Ivana',
          'Iveta',
          'Ivona',
          'Izabela',
          'Izidora',
          'Izolda',
          'Jadrana',
          'Jadranka',
          'Jakuba',
          'Jakubka',
          'Jana',
          'Jarmila',
          'Jarolíma',
          'Jaromíra',
          'Jaroslava',
          'Jasmína',
          'Jasna',
          'Jasněna',
          'Jelena',
          'Jenovéfa',
          'Jesika',
          'Jindra',
          'Jindřiška',
          'Jiřina',
          'Jitka',
          'Johana',
          'Jolana',
          'Jolanta',
          'Jordana',
          'Jorga',
          'Josefa',
          'Josefína',
          'Jovana',
          'Jozefa',
          'Jozefína',
          'Judita',
          'Juliana',
          'Juliána',
          'Julie',
          'Justina',
          'Justýna',
          'Juta',
          'Kamila',
          'Karin',
          'Karina',
          'Karla',
          'Karmela',
          'Karmen',
          'Karolina',
          'Karolína',
          'Kateřina',
          'Katrin',
          'Katrina',
          'Kazi',
          'Kazimíra',
          'Kira',
          'Klára',
          'Klaudie',
          'Klementina',
          'Klementýna',
          'Kleopatra',
          'Klotylda',
          'Koleta',
          'Kolombína',
          'Kolumbína',
          'Konstance',
          'Konstancie',
          'Konsuela',
          'Konzuela',
          'Kora',
          'Kordula',
          'Korina',
          'Kornélie',
          'Krasava',
          'Krasomila',
          'Kristina',
          'Kristýna',
          'Kunhuta',
          'Květa',
          'Květoslava',
          'Květuše',
          'Lada',
          'Ladislava',
          'Larisa',
          'Laura',
          'Laurencie',
          'Lea',
          'Léda',
          'Leila',
          'Lejla',
          'Lena',
          'Lenka',
          'Leokádie',
          'Leona',
          'Leonora',
          'Leontina',
          'Leontýna',
          'Leopolda',
          'Leopoldina',
          'Leopoldýna',
          'Leticie',
          'Lia',
          'Liana',
          'Liběna',
          'Libora',
          'Liboslava',
          'Libuše',
          'Lidmila',
          'Liliana',
          'Lina',
          'Linda',
          'Livie',
          'Ljuba',
          'Lola',
          'Loreta',
          'Lorna',
          'Lota',
          'Lubomíra',
          'Luboslava',
          'Luciána',
          'Lucie',
          'Ludiše',
          'Luďka',
          'Ludmila',
          'Ludomíra',
          'Ludoslava',
          'Ludvika',
          'Ludvíka',
          'Luisa',
          'Lujza',
          'Lukrécie',
          'Lumíra',
          'Lydie',
          'Lýdie',
          'Mabel',
          'Mabela',
          'Magda',
          'Magdalena',
          'Magdaléna',
          'Mahulena',
          'Maja',
          'Mája',
          'Malvína',
          'Manon',
          'Manona',
          'Manuela',
          'Marcela',
          'Marcelína',
          'Margit',
          'Margita',
          'Mariana',
          'Marie',
          'Marieta',
          'Marika',
          'Marilyn',
          'Marina',
          'Mariola',
          'Marion',
          'Marisa',
          'Marita',
          'Markéta',
          'Marlena',
          'Marta',
          'Martina',
          'Matylda',
          'Maud',
          'Maxima',
          'Mečislava',
          'Medea',
          'Médea',
          'Melánie',
          'Melinda',
          'Melisa',
          'Melita',
          'Mercedes',
          'Michaela',
          'Michala',
          'Milada',
          'Milana',
          'Milena',
          'Miloslava',
          'Milred',
          'Miluše',
          'Mína',
          'Mira',
          'Mirabela',
          'Miranda',
          'Mirela',
          'Miriam',
          'Mirjam',
          'Mirka',
          'Miromila',
          'Miroslava',
          'Mnislava',
          'Mona',
          'Monika',
          'Muriel',
          'Muriela',
          'Myrna',
          'Naďa',
          'Naděžda',
          'Naneta',
          'Narcisa',
          'Natalie',
          'Natálie',
          'Nataša',
          'Neda',
          'Nela',
          'Nevena',
          'Nika',
          'Niké',
          'Nikodéma',
          'Nikol',
          'Nikola',
          'Nila',
          'Nina',
          'Noema',
          'Noemi',
          'Nona',
          'Nora',
          'Norberta',
          'Norma',
          'Odeta',
          'Ofélie',
          'Oktavie',
          'Oktávie',
          'Oldřiška',
          'Olga',
          'Oliva',
          'Olivie',
          'Olympie',
          'Ondřejka',
          'Otakara',
          'Otilie',
          'Otýlie',
          'Oxana',
          'Palmira',
          'Pamela',
          'Paskala',
          'Patricie',
          'Pavla',
          'Pavlína',
          'Pelagie',
          'Penelopa',
          'Perla',
          'Persida',
          'Perzida',
          'Petra',
          'Petrana',
          'Petronela',
          'Petronila',
          'Petruše',
          'Petula',
          'Pilar',
          'Polyxena',
          'Pravdomila',
          'Pravomila',
          'Pravoslav',
          'Pravoslava',
          'Priscila',
          'Priska',
          'Prokopa',
          'Přibyslava',
          'Radana',
          'Radimíra',
          'Radislava',
          'Radka',
          'Radmila',
          'Radomila',
          'Radomíra',
          'Radoslava',
          'Radovana',
          'Radslava',
          'Rafaela',
          'Ráchel',
          'Raisa',
          'Rajsa',
          'Ramona',
          'Rastislava',
          'Rebeka',
          'Regina',
          'Regína',
          'Renata',
          'Renáta',
          'René',
          'Ria',
          'Riana',
          'Richarda',
          'Rina',
          'Rita',
          'Roberta',
          'Robina',
          'Romana',
          'Rosa',
          'Rosalinda',
          'Rosamunda',
          'Rosana',
          'Rostislava',
          'Rovena',
          'Roxana',
          'Róza',
          'Rozálie',
          'Rozalinda',
          'Rozamunda',
          'Rozana',
          'Rozina',
          'Rozita',
          'Rozvita',
          'Rudolfa',
          'Rudolfina',
          'Rudolfína',
          'Rut',
          'Rút',
          'Růžena',
          'Řehořka',
          'Sabina',
          'Sabrina',
          'Salomea',
          'Salomena',
          'Samuela',
          'Sandra',
          'Sára',
          'Saskia',
          'Saskie',
          'Saxona',
          'Selena',
          'Selma',
          'Senta',
          'Serafína',
          'Serena',
          'Scholastika',
          'Sibyla',
          'Sidonie',
          'Silvána',
          'Silvie',
          'Simeona',
          'Simona',
          'Skarlet',
          'Skarleta',
          'Slavěna',
          'Slávka',
          'Slavomila',
          'Slavomíra',
          'Soběslava',
          'Sofie',
          'Sofronie',
          'Solveig',
          'Solveiga',
          'Soňa',
          'Sotira',
          'Stanislava',
          'Stáza',
          'Stela',
          'Svatava',
          'Svatoslava',
          'Světla',
          'Světlana',
          'Světluše',
          'Sylva',
          'Sylvie',
          'Sylvie',
          'Šárka',
          'Šarlota',
          'Šimona',
          'Štěpána',
          'Štěpánka',
          'Tamara',
          'Táňa',
          'Taťána',
          'Tea',
          'Tekla',
          'Teodora',
          'Teodozie',
          'Teofila',
          'Tereza',
          'Terezie',
          'Thea',
          'Theodora',
          'Theodosie',
          'Theofila',
          'Tomáška',
          'Toska',
          'Ulrika',
          'Una',
          'Uršula',
          'Václava',
          'Valburga',
          'Valdemara',
          'Valentina',
          'Valentýna',
          'Valerie',
          'Valérie',
          'Vanda',
          'Vanesa',
          'Věduna',
          'Veleslava',
          'Velislava',
          'Věnceslava',
          'Vendelína',
          'Vendula',
          'Vendulka',
          'Věnka',
          'Venuše',
          'Věra',
          'Verona',
          'Veronika',
          'Věroslava',
          'Věslava',
          'Vesna',
          'Viktorie',
          'Viléma',
          'Vilemína',
          'Vilma',
          'Vincencie',
          'Viola',
          'Violeta',
          'Virginie',
          'Virgínie',
          'Víta',
          'Vítězslava',
          'Viviana',
          'Vladana',
          'Vladěna',
          'Vladimíra',
          'Vladislava',
          'Vlasta',
          'Vlastimila',
          'Vlastimíra',
          'Vlastislava',
          'Vojmíra',
          'Vojslava',
          'Vojtěška',
          'Voršila',
          'Vratislava',
          'Xaverie',
          'Xenie',
          'Zaida',
          'Zaira',
          'Zbyhněva',
          'Zbyňka',
          'Zbyslava',
          'Zbyška',
          'Zdena',
          'Zdenka',
          'Zdeňka',
          'Zdeslava',
          'Zdislava',
          'Zenobie',
          'Zina',
          'Zinaida',
          'Zita',
          'Zlata',
          'Zlatomíra',
          'Zlatuše',
          'Zoe',
          'Zoja',
          'Zora',
          'Zoroslava',
          'Zuzana',
          'Zvonimíra',
          'Žakelina',
          'Žakelína',
          'Žaneta',
          'Ždana',
          'Želimíra',
          'Želislava',
          'Želmíra',
          'Žitomíra',
          'Žitoslava',
          'Živa',
          'Živana',
          'Žofie',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/cz/name/male_last_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Adam',
          'Adamec',
          'Adámek',
          'Albrecht',
          'Ambrož',
          'Anděl',
          'Andrle',
          'Antoš',
          'Bajer',
          'Baláž',
          'Balcar',
          'Balog',
          'Baloun',
          'Barák',
          'Baran',
          'Bareš',
          'Bárta',
          'Barták',
          'Bartoň',
          'Bartoš',
          'Bartošek',
          'Bartůněk',
          'Bašta',
          'Bauer',
          'Bayer',
          'Bažant',
          'Bečka',
          'Bečvář',
          'Bednář',
          'Bednařík',
          'Bělohlávek',
          'Benda',
          'Beneš',
          'Beran',
          'Beránek',
          'Berger',
          'Berka',
          'Berky',
          'Bernard',
          'Bezděk',
          'Bílek',
          'Bílý',
          'Bína',
          'Bittner',
          'Blaha',
          'Bláha',
          'Blažek',
          'Blecha',
          'Bobek',
          'Boček',
          'Boháč',
          'Boháček',
          'Böhm',
          'Borovička',
          'Bouček',
          'Bouda',
          'Bouška',
          'Brabec',
          'Brabenec',
          'Brada',
          'Bradáč',
          'Braun',
          'Brázda',
          'Brázdil',
          'Brejcha',
          'Březina',
          'Bříza',
          'Brož',
          'Brožek',
          'Brychta',
          'Bubeník',
          'Buček',
          'Buchta',
          'Burda',
          'Bureš',
          'Burian',
          'Buriánek',
          'Byrtus',
          'čada',
          'Caha',
          'čáp',
          'čapek',
          'čech',
          'čejka',
          'čermák',
          'černík',
          'černoch',
          'černohorský',
          'černý',
          'červeňák',
          'červenka',
          'červený',
          'červinka',
          'Chaloupka',
          'Chalupa',
          'Charvát',
          'Chládek',
          'Chlup',
          'Chmelař',
          'Chmelík',
          'Chovanec',
          'Chromý',
          'Chudoba',
          'Chvátal',
          'Chvojka',
          'Chytil',
          'Cibulka',
          'čihák',
          'Cihlář',
          'Císař',
          'čížek',
          'čonka',
          'Coufal',
          'čurda',
          'Daněk',
          'Daniel',
          'Daniš',
          'David',
          'Dědek',
          'Demeter',
          'Dittrich',
          'Diviš',
          'Dlouhý',
          'Dobeš',
          'Dobiáš',
          'Dobrovolný',
          'Dočekal',
          'Dočkal',
          'Dohnal',
          'Dokoupil',
          'Doleček',
          'Dolejš',
          'Dolejší',
          'Doležal',
          'Doležel',
          'Doskočil',
          'Dostál',
          'Doubek',
          'Doubrava',
          'Douša',
          'Drábek',
          'Drozd',
          'Dubský',
          'Duchoň',
          'Duda',
          'Dudek',
          'Dufek',
          'Dunka',
          'Dušek',
          'Dvořáček',
          'Dvořák',
          'Dvorský',
          'Eliáš',
          'Erben',
          'Fabián',
          'Fanta',
          'Farkaš',
          'Fejfar',
          'Fencl',
          'Ferenc',
          'Ferko',
          'Fiala',
          'Fiedler',
          'Filip',
          'Fischer',
          'Fišer',
          'Florián',
          'Fojtík',
          'Foltýn',
          'Forman',
          'Formánek',
          'Fořt',
          'Fousek',
          'Franc',
          'Franěk',
          'Frank',
          'Fridrich',
          'Frydrych',
          'Fuchs',
          'Fučík',
          'Fuksa',
          'Gábor',
          'Gabriel',
          'Gajdoš',
          'Gaži',
          'Gottwald',
          'Gregor',
          'Gruber',
          'Grundza',
          'Grygar',
          'Hájek',
          'Hajný',
          'Hála',
          'Hampl',
          'Hána',
          'Hanáček',
          'Hanák',
          'Hanousek',
          'Hanus',
          'Hanuš',
          'Hanzal',
          'Hanzl',
          'Hanzlík',
          'Hartman',
          'Hašek',
          'Havel',
          'Havelka',
          'Havlíček',
          'Havlík',
          'Havránek',
          'Heczko',
          'Heger',
          'Hejda',
          'Hejduk',
          'Hejl',
          'Hejna',
          'Hendrych',
          'Herman',
          'Heřman',
          'Heřmánek',
          'Hladík',
          'Hladký',
          'Hlaváč',
          'Hlaváček',
          'Hlavatý',
          'Hlávka',
          'Hloušek',
          'Hoffmann',
          'Hofman',
          'Holan',
          'Holas',
          'Holec',
          'Holeček',
          'Holík',
          'Holoubek',
          'Holub',
          'Holý',
          'Homola',
          'Homolka',
          'Hora',
          'Horáček',
          'Horák',
          'Hořejší',
          'Horký',
          'Horňák',
          'Horníček',
          'Horník',
          'Horský',
          'Horvát',
          'Horváth',
          'Hošek',
          'Houdek',
          'Houška',
          'Hovorka',
          'Hrabal',
          'Hrabovský',
          'Hradecký',
          'Hradil',
          'Hrbáček',
          'Hrbek',
          'Hrdina',
          'Hrdlička',
          'Hrdý',
          'Hrnčíř',
          'Hroch',
          'Hromádka',
          'Hron',
          'Hrubeš',
          'Hrubý',
          'Hruška',
          'Hrůza',
          'Hubáček',
          'Hudec',
          'Hudeček',
          'Hůlka',
          'Huml',
          'Husák',
          'Hušek',
          'Hýbl',
          'Hynek',
          'Jahoda',
          'Jakeš',
          'Jakl',
          'Jakoubek',
          'Jakubec',
          'Janáček',
          'Janák',
          'Janata',
          'Janča',
          'Jančík',
          'Janda',
          'Janeček',
          'Janečka',
          'Janíček',
          'Janík',
          'Janků',
          'Janota',
          'Janoušek',
          'Janovský',
          'Jansa',
          'Jánský',
          'Janů',
          'Jareš',
          'Jaroš',
          'Jašek',
          'Javůrek',
          'Jech',
          'Jedlička',
          'Jelen',
          'Jelínek',
          'Jeníček',
          'Jeřábek',
          'Jež',
          'Ježek',
          'Jílek',
          'Jindra',
          'Jíra',
          'Jirák',
          'Jiránek',
          'Jirásek',
          'Jiřík',
          'Jirka',
          'Jirků',
          'Jiroušek',
          'Jirsa',
          'John',
          'Jonáš',
          'Junek',
          'Jurčík',
          'Jurečka',
          'Juřica',
          'Juřík',
          'Kabát',
          'Kačírek',
          'Kadeřábek',
          'Kadlec',
          'Kafka',
          'Kaiser',
          'Kala',
          'Kaláb',
          'Kalaš',
          'Kalina',
          'Kalivoda',
          'Kalous',
          'Kalousek',
          'Kameník',
          'Kaňa',
          'Káňa',
          'Kaňka',
          'Kantor',
          'Kaplan',
          'Karas',
          'Karásek',
          'Karban',
          'Karel',
          'Karlík',
          'Kasal',
          'Kašík',
          'Kašpar',
          'Kašpárek',
          'Kavka',
          'Kazda',
          'Kindl',
          'Klečka',
          'Klein',
          'Klement',
          'Klíma',
          'Kliment',
          'Klimeš',
          'Klouček',
          'Klouda',
          'Knap',
          'Knotek',
          'Koch',
          'Kočí',
          'Kocián',
          'Kocman',
          'Kocourek',
          'Kohout',
          'Kohoutek',
          'Koláček',
          'Kolář',
          'Kolařík',
          'Kolek',
          'Kolman',
          'Komárek',
          'Komínek',
          'Konečný',
          'Koníček',
          'Kopal',
          'Kopeček',
          'Kopecký',
          'Kopečný',
          'Kopřiva',
          'Korbel',
          'Kořínek',
          'Kos',
          'Kosík',
          'Kosina',
          'Košťál',
          'Kostka',
          'Kotas',
          'Kotek',
          'Kotlár',
          'Kotrba',
          'Kouba',
          'Koubek',
          'Koudela',
          'Koudelka',
          'Koukal',
          'Kouřil',
          'Koutný',
          'Kováč',
          'Kovář',
          'Kovařík',
          'Kovářík',
          'Kozák',
          'Kozel',
          'Krajíček',
          'Král',
          'Králíček',
          'Králík',
          'Krátký',
          'Kratochvíl',
          'Kraus',
          'Krčmář',
          'Křeček',
          'Krejčí',
          'Krejčík',
          'Krejčíř',
          'Křenek',
          'Krištof',
          'Křivánek',
          'Kříž',
          'Křížek',
          'Kropáček',
          'Kroupa',
          'Krupa',
          'Krupička',
          'Krupka',
          'Kuba',
          'Kubánek',
          'Kubát',
          'Kubec',
          'Kubelka',
          'Kubeš',
          'Kubica',
          'Kubíček',
          'Kubík',
          'Kubín',
          'Kubiš',
          'Kuča',
          'Kučera',
          'Kuchař',
          'Kuchta',
          'Kudláček',
          'Kudrna',
          'Kukla',
          'Kulhánek',
          'Kulhavý',
          'Kunc',
          'Kuneš',
          'Kupec',
          'Kupka',
          'Kurka',
          'Kužel',
          'Kvapil',
          'Kvasnička',
          'Kyncl',
          'Kysela',
          'Lacina',
          'Lacko',
          'Lakatoš',
          'Landa',
          'Lang',
          'Langer',
          'Langr',
          'Látal',
          'Lavička',
          'Le',
          'Lebeda',
          'Levý',
          'Líbal',
          'Linhart',
          'Liška',
          'Lorenc',
          'Louda',
          'Ludvík',
          'Lukáč',
          'Lukáš',
          'Lukášek',
          'Lukeš',
          'Macák',
          'Macek',
          'Mach',
          'Mácha',
          'Machač',
          'Macháč',
          'Macháček',
          'Machala',
          'Machálek',
          'Macura',
          'Majer',
          'Maleček',
          'Málek',
          'Malík',
          'Malina',
          'Malý',
          'Maňák',
          'Mareček',
          'Marek',
          'Mareš',
          'Mařík',
          'Maršálek',
          'Maršík',
          'Martinec',
          'Martinek',
          'Martínek',
          'Mašek',
          'Masopust',
          'Matějíček',
          'Matějka',
          'Matouš',
          'Matoušek',
          'Matula',
          'Matuška',
          'Matyáš',
          'Matys',
          'Maxa',
          'Mayer',
          'Mazánek',
          'Medek',
          'Melichar',
          'Mencl',
          'Menšík',
          'Merta',
          'Michal',
          'Michalec',
          'Michálek',
          'Michalík',
          'Michna',
          'Mička',
          'Mika',
          'Míka',
          'Mikeš',
          'Miko',
          'Mikula',
          'Mikulášek',
          'Minář',
          'Minařík',
          'Mirga',
          'Mládek',
          'Mlčoch',
          'Mlejnek',
          'Mojžíš',
          'Mokrý',
          'Molnár',
          'Moravec',
          'Morávek',
          'Motl',
          'Motyčka',
          'Moučka',
          'Moudrý',
          'Mráček',
          'Mráz',
          'Mrázek',
          'Mrkvička',
          'Mucha',
          'Müller',
          'Műller',
          'Musil',
          'Mužík',
          'Myška',
          'Nagy',
          'Najman',
          'Navrátil',
          'Nečas',
          'Nedbal',
          'Nedoma',
          'Nedvěd',
          'Nejedlý',
          'Němec',
          'Němeček',
          'Nešpor',
          'Nesvadba',
          'Neubauer',
          'Neuman',
          'Neumann',
          'Nguyen',
          'Nguyen van',
          'Nosek',
          'Nováček',
          'Novák',
          'Novosad',
          'Novotný',
          'Nový',
          'Odehnal',
          'Oláh',
          'Oliva',
          'Ondra',
          'Ondráček',
          'Orság',
          'Otáhal',
          'Paleček',
          'Pánek',
          'Papež',
          'Pařízek',
          'Pašek',
          'Pátek',
          'Patočka',
          'Paul',
          'Pavel',
          'Pavelek',
          'Pavelka',
          'Pavlas',
          'Pavlica',
          'Pavlíček',
          'Pavlík',
          'Pavlů',
          'Pazdera',
          'Pech',
          'Pecha',
          'Pecháček',
          'Pecka',
          'Pekař',
          'Pekárek',
          'Pelc',
          'Pelikán',
          'Peřina',
          'Pernica',
          'Peroutka',
          'Pešek',
          'Peška',
          'Pešta',
          'Peterka',
          'Petr',
          'Petrák',
          'Petráš',
          'Petříček',
          'Petřík',
          'Petrů',
          'Pham',
          'Pícha',
          'Pilař',
          'Pilát',
          'Píša',
          'Pivoňka',
          'Plaček',
          'Plachý',
          'Plšek',
          'Pluhař',
          'Podzimek',
          'Pohl',
          'Pokorný',
          'Poláček',
          'Polách',
          'Polák',
          'Polanský',
          'Polášek',
          'Polívka',
          'Popelka',
          'Pospíchal',
          'Pospíšil',
          'Potůček',
          'Pour',
          'Prachař',
          'Prášek',
          'Pražák',
          'Prchal',
          'Přibyl',
          'Příhoda',
          'Přikryl',
          'Procházka',
          'Prokeš',
          'Prokop',
          'Prošek',
          'Provazník',
          'Průcha',
          'Průša',
          'Pšenička',
          'Ptáček',
          'Rác',
          'Rada',
          'Rak',
          'Rambousek',
          'Raška',
          'Rataj',
          'řeháček',
          'řehák',
          'řehoř',
          'Remeš',
          'řezáč',
          'Rezek',
          'řezníček',
          'Richter',
          'Richtr',
          'říha',
          'Roubal',
          'Rous',
          'Rozsypal',
          'Rudolf',
          'Růžek',
          'Růžička',
          'Ryba',
          'Rybář',
          'Rýdl',
          'Ryšavý',
          'Sadílek',
          'šafář',
          'šafařík',
          'šafránek',
          'šálek',
          'Samek',
          'šanda',
          'šašek',
          'Schejbal',
          'Schmidt',
          'Schneider',
          'Schwarz',
          'šebek',
          'šebela',
          'šebesta',
          'šeda',
          'šedivý',
          'Sedláček',
          'Sedlák',
          'Sedlář',
          'Sehnal',
          'Seidl',
          'Seifert',
          'Sekanina',
          'Semerád',
          'šenk',
          'šesták',
          'ševčík',
          'Severa',
          'Sikora',
          'šilhavý',
          'šíma',
          'šimáček',
          'šimák',
          'šimánek',
          'šimčík',
          'šimeček',
          'šimek',
          'šimon',
          'šimůnek',
          'šindelář',
          'šindler',
          'šíp',
          'šípek',
          'šír',
          'široký',
          'šiška',
          'Sivák',
          'Skácel',
          'Skala',
          'Skála',
          'Skalický',
          'Sklenář',
          'škoda',
          'Skopal',
          'Skořepa',
          'škrabal',
          'Skřivánek',
          'Slabý',
          'Sládek',
          'Sladký',
          'Sláma',
          'Slanina',
          'Slavíček',
          'Slavík',
          'šlechta',
          'Slezák',
          'Slováček',
          'Slovák',
          'Sluka',
          'Smejkal',
          'šmejkal',
          'Smékal',
          'šmerda',
          'Smetana',
          'šmíd',
          'Smola',
          'Smolík',
          'Smolka',
          'Smrčka',
          'Smrž',
          'Smutný',
          'šnajdr',
          'Sobek',
          'Sobotka',
          'Sochor',
          'Sojka',
          'Sokol',
          'šolc',
          'Sommer',
          'Souček',
          'Soukup',
          'Sova',
          'špaček',
          'Spáčil',
          'špička',
          'šplíchal',
          'Spurný',
          'šrámek',
          'Srb',
          'Staněk',
          'Stárek',
          'Starý',
          'šťastný',
          'štefan',
          'štefek',
          'štefl',
          'Stehlík',
          'Steiner',
          'Stejskal',
          'štěpán',
          'štěpánek',
          'štěrba',
          'Stibor',
          'Stoklasa',
          'Straka',
          'Stránský',
          'Strejček',
          'Strnad',
          'Strouhal',
          'Stuchlík',
          'Studený',
          'Studnička',
          'Stupka',
          'šubrt',
          'Suchánek',
          'Suchomel',
          'Suchý',
          'Suk',
          'šulc',
          'šustr',
          'šváb',
          'Svačina',
          'švanda',
          'švarc',
          'Svatoň',
          'Svatoš',
          'švec',
          'švehla',
          'švejda',
          'švestka',
          'Světlík',
          'Sviták',
          'Svoboda',
          'Svozil',
          'Sýkora',
          'Synek',
          'Syrový',
          'Táborský',
          'Tancoš',
          'Teplý',
          'Tesař',
          'Tichý',
          'Toman',
          'Tománek',
          'Tomáš',
          'Tomášek',
          'Tomeček',
          'Tomek',
          'Tomeš',
          'Tóth',
          'Tran',
          'Trávníček',
          'Trčka',
          'Tříska',
          'Trnka',
          'Trojan',
          'Truhlář',
          'Tuček',
          'Tůma',
          'Tureček',
          'Turek',
          'Tvrdík',
          'Tvrdý',
          'Uher',
          'Uhlíř',
          'Ulrich',
          'Urban',
          'Urbanec',
          'Urbánek',
          'Vacek',
          'Vácha',
          'Václavek',
          'Václavík',
          'Vaculík',
          'Vágner',
          'Vala',
          'Valášek',
          'Válek',
          'Valenta',
          'Valeš',
          'Váňa',
          'Vančura',
          'Vaněček',
          'Vaněk',
          'Vaníček',
          'Varga',
          'Vašák',
          'Vašek',
          'Vašíček',
          'Vávra',
          'Vavřík',
          'Večeřa',
          'Vejvoda',
          'Verner',
          'Veselý',
          'Veverka',
          'Vícha',
          'Vilímek',
          'Vinš',
          'Víšek',
          'Vít',
          'Vitásek',
          'Vítek',
          'Vlach',
          'Vlasák',
          'Vlček',
          'Vlk',
          'Vobořil',
          'Vodák',
          'Vodička',
          'Vodrážka',
          'Vojáček',
          'Vojta',
          'Vojtěch',
          'Vojtek',
          'Vojtíšek',
          'Vokoun',
          'Volek',
          'Volf',
          'Volný',
          'Vondra',
          'Vondráček',
          'Vondrák',
          'Voráček',
          'Vorel',
          'Voříšek',
          'Vorlíček',
          'Votava',
          'Votruba',
          'Vrabec',
          'Vrána',
          'Vrba',
          'Vrzal',
          'Vybíral',
          'Vydra',
          'Vymazal',
          'Vyskočil',
          'Vysloužil',
          'Wagner',
          'Walter',
          'Weber',
          'Weiss',
          'Winkler',
          'Wolf',
          'Zábranský',
          'žáček',
          'Zach',
          'Zahrádka',
          'Zahradník',
          'Zajíc',
          'Zajíček',
          'žák',
          'Zálešák',
          'Zámečník',
          'Zapletal',
          'Záruba',
          'Zatloukal',
          'Zavadil',
          'Zavřel',
          'Zbořil',
          'žďárský',
          'Zdražil',
          'Zedník',
          'Zelenka',
          'Zelený',
          'Zelinka',
          'Zeman',
          'Zemánek',
          'žemlička',
          'Zezula',
          'žídek',
          'žiga',
          'Zíka',
          'Zikmund',
          'Zima',
          'žižka',
          'Zlámal',
          'Zoubek',
          'Zouhar',
          'žůrek',
          'Zvěřina',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/cz/name/female_last_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Adamová',
          'Adamcová',
          'Adámková',
          'Albrechtová',
          'Ambrožová',
          'Andělová',
          'Andrleová',
          'Antošová',
          'Bajrová',
          'Balážová',
          'Balcarová',
          'Balogová',
          'Balounová',
          'Baráková',
          'Baranová',
          'Barešová',
          'Bártová',
          'Bartáková',
          'Bartoňová',
          'Bartošová',
          'Bartošková',
          'Bartůněková',
          'Baštová',
          'Baurová',
          'Bayrová',
          'Bažantová',
          'Bečková',
          'Bečvářová',
          'Bednářová',
          'Bednaříková',
          'Bělohlávková',
          'Bendová',
          'Benešová',
          'Beranová',
          'Beránková',
          'Bergrová',
          'Berková',
          'Berkyová',
          'Bernardová',
          'Bezděková',
          'Bílková',
          'Bílýová',
          'Bínová',
          'Bittnrová',
          'Blahová',
          'Bláhová',
          'Blažková',
          'Blechová',
          'Bobková',
          'Bočková',
          'Boháčová',
          'Boháčková',
          'Böhmová',
          'Borovičková',
          'Boučková',
          'Boudová',
          'Boušková',
          'Brabcová',
          'Brabencová',
          'Bradová',
          'Bradáčová',
          'Braunová',
          'Brázdová',
          'Brázdilová',
          'Brejchová',
          'Březinová',
          'Břízová',
          'Brožová',
          'Brožková',
          'Brychtová',
          'Bubeníková',
          'Bučková',
          'Buchtová',
          'Burdová',
          'Burešová',
          'Burianová',
          'Buriánková',
          'Byrtusová',
          'čadová',
          'Cahová',
          'čápová',
          'čapková',
          'čechová',
          'čejková',
          'čermáková',
          'černíková',
          'černochová',
          'černohorskýová',
          'černýová',
          'červeňáková',
          'červenková',
          'červenýová',
          'červinková',
          'Chaloupková',
          'Chalupová',
          'Charvátová',
          'Chládková',
          'Chlupová',
          'Chmelařová',
          'Chmelíková',
          'Chovancová',
          'Chromýová',
          'Chudobová',
          'Chvátalová',
          'Chvojková',
          'Chytilová',
          'Cibulková',
          'čiháková',
          'Cihlářová',
          'Císařová',
          'čížková',
          'čonková',
          'Coufalová',
          'čurdová',
          'Daněková',
          'Danilová',
          'Danišová',
          'Davidová',
          'Dědková',
          'Demetrová',
          'Dittrichová',
          'Divišová',
          'Dlouhýová',
          'Dobešová',
          'Dobiášová',
          'Dobrovolnýová',
          'Dočekalová',
          'Dočkalová',
          'Dohnalová',
          'Dokoupilová',
          'Dolečková',
          'Dolejšová',
          'Dolejšíová',
          'Doležalová',
          'Doležlová',
          'Doskočilová',
          'Dostálová',
          'Doubková',
          'Doubravová',
          'Doušová',
          'Drábková',
          'Drozdová',
          'Dubskýová',
          'Duchoňová',
          'Dudová',
          'Dudková',
          'Dufková',
          'Dunková',
          'Dušková',
          'Dvořáčková',
          'Dvořáková',
          'Dvorskýová',
          'Eliášová',
          'Erbnová',
          'Fabiánová',
          'Fantová',
          'Farkašová',
          'Fejfarová',
          'Fenclová',
          'Ferencová',
          'Ferkoová',
          'Fialová',
          'Fiedlrová',
          'Filipová',
          'Fischrová',
          'Fišrová',
          'Floriánová',
          'Fojtíková',
          'Foltýnová',
          'Formanová',
          'Formánková',
          'Fořtová',
          'Fousková',
          'Francová',
          'Franěková',
          'Franková',
          'Fridrichová',
          'Frydrychová',
          'Fuchsová',
          'Fučíková',
          'Fuksová',
          'Gáborová',
          'Gabrilová',
          'Gajdošová',
          'Gažiová',
          'Gottwaldová',
          'Gregorová',
          'Grubrová',
          'Grundzová',
          'Grygarová',
          'Hájková',
          'Hajnýová',
          'Hálová',
          'Hamplová',
          'Hánová',
          'Hanáčková',
          'Hanáková',
          'Hanousková',
          'Hanusová',
          'Hanušová',
          'Hanzalová',
          'Hanzlová',
          'Hanzlíková',
          'Hartmanová',
          'Hašková',
          'Havlová',
          'Havelková',
          'Havlíčková',
          'Havlíková',
          'Havránková',
          'Heczkoová',
          'Hegrová',
          'Hejdová',
          'Hejduková',
          'Hejlová',
          'Hejnová',
          'Hendrychová',
          'Hermanová',
          'Heřmanová',
          'Heřmánková',
          'Hladíková',
          'Hladkýová',
          'Hlaváčová',
          'Hlaváčková',
          'Hlavatýová',
          'Hlávková',
          'Hloušková',
          'Hoffmannová',
          'Hofmanová',
          'Holanová',
          'Holasová',
          'Holcová',
          'Holečková',
          'Holíková',
          'Holoubková',
          'Holubová',
          'Holýová',
          'Homolová',
          'Homolková',
          'Horová',
          'Horáčková',
          'Horáková',
          'Hořejšíová',
          'Horkýová',
          'Horňáková',
          'Horníčková',
          'Horníková',
          'Horskýová',
          'Horvátová',
          'Horváthová',
          'Hošková',
          'Houdková',
          'Houšková',
          'Hovorková',
          'Hrabalová',
          'Hrabovskýová',
          'Hradeckýová',
          'Hradilová',
          'Hrbáčková',
          'Hrbková',
          'Hrdinová',
          'Hrdličková',
          'Hrdýová',
          'Hrnčířová',
          'Hrochová',
          'Hromádková',
          'Hronová',
          'Hrubešová',
          'Hrubýová',
          'Hrušková',
          'Hrůzová',
          'Hubáčková',
          'Hudcová',
          'Hudečková',
          'Hůlková',
          'Humlová',
          'Husáková',
          'Hušková',
          'Hýblová',
          'Hynková',
          'Jahodová',
          'Jakešová',
          'Jaklová',
          'Jakoubková',
          'Jakubcová',
          'Janáčková',
          'Janáková',
          'Janatová',
          'Jančová',
          'Jančíková',
          'Jandová',
          'Janečková',
          'Janečková',
          'Janíčková',
          'Janíková',
          'Jankůová',
          'Janotová',
          'Janoušková',
          'Janovskýová',
          'Jansová',
          'Jánskýová',
          'Janůová',
          'Jarešová',
          'Jarošová',
          'Jašková',
          'Javůrková',
          'Jechová',
          'Jedličková',
          'Jelnová',
          'Jelínková',
          'Jeníčková',
          'Jeřábková',
          'Ježová',
          'Ježková',
          'Jílková',
          'Jindrová',
          'Jírová',
          'Jiráková',
          'Jiránková',
          'Jirásková',
          'Jiříková',
          'Jirková',
          'Jirkůová',
          'Jiroušková',
          'Jirsová',
          'Johnová',
          'Jonášová',
          'Junková',
          'Jurčíková',
          'Jurečková',
          'Juřicová',
          'Juříková',
          'Kabátová',
          'Kačírková',
          'Kadeřábková',
          'Kadlcová',
          'Kafková',
          'Kaisrová',
          'Kalová',
          'Kalábová',
          'Kalašová',
          'Kalinová',
          'Kalivodová',
          'Kalousová',
          'Kalousková',
          'Kameníková',
          'Kaňová',
          'Káňová',
          'Kaňková',
          'Kantorová',
          'Kaplanová',
          'Karasová',
          'Karásková',
          'Karbanová',
          'Karlová',
          'Karlíková',
          'Kasalová',
          'Kašíková',
          'Kašparová',
          'Kašpárková',
          'Kavková',
          'Kazdová',
          'Kindlová',
          'Klečková',
          'Kleinová',
          'Klementová',
          'Klímová',
          'Klimentová',
          'Klimešová',
          'Kloučková',
          'Kloudová',
          'Knapová',
          'Knotková',
          'Kochová',
          'Kočíová',
          'Kociánová',
          'Kocmanová',
          'Kocourková',
          'Kohoutová',
          'Kohoutková',
          'Koláčková',
          'Kolářová',
          'Kolaříková',
          'Kolková',
          'Kolmanová',
          'Komárková',
          'Komínková',
          'Konečnýová',
          'Koníčková',
          'Kopalová',
          'Kopečková',
          'Kopeckýová',
          'Kopečnýová',
          'Kopřivová',
          'Korblová',
          'Kořínková',
          'Kosová',
          'Kosíková',
          'Kosinová',
          'Košťálová',
          'Kostková',
          'Kotasová',
          'Kotková',
          'Kotlárová',
          'Kotrbová',
          'Koubová',
          'Koubková',
          'Koudelová',
          'Koudelková',
          'Koukalová',
          'Kouřilová',
          'Koutnýová',
          'Kováčová',
          'Kovářová',
          'Kovaříková',
          'Kováříková',
          'Kozáková',
          'Kozlová',
          'Krajíčková',
          'Králová',
          'Králíčková',
          'Králíková',
          'Krátkýová',
          'Kratochvílová',
          'Krausová',
          'Krčmářová',
          'Křečková',
          'Krejčíová',
          'Krejčíková',
          'Krejčířová',
          'Křenková',
          'Krištofová',
          'Křivánková',
          'Křížová',
          'Křížková',
          'Kropáčková',
          'Kroupová',
          'Krupová',
          'Krupičková',
          'Krupková',
          'Kubová',
          'Kubánková',
          'Kubátová',
          'Kubcová',
          'Kubelková',
          'Kubešová',
          'Kubicová',
          'Kubíčková',
          'Kubíková',
          'Kubínová',
          'Kubišová',
          'Kučová',
          'Kučerová',
          'Kuchařová',
          'Kuchtová',
          'Kudláčková',
          'Kudrnová',
          'Kuklová',
          'Kulhánková',
          'Kulhavýová',
          'Kuncová',
          'Kunešová',
          'Kupcová',
          'Kupková',
          'Kurková',
          'Kužlová',
          'Kvapilová',
          'Kvasničková',
          'Kynclová',
          'Kyselová',
          'Lacinová',
          'Lackoová',
          'Lakatošová',
          'Landová',
          'Langová',
          'Langrová',
          'Langrová',
          'Látalová',
          'Lavičková',
          'Leová',
          'Lebedová',
          'Levýová',
          'Líbalová',
          'Linhartová',
          'Lišková',
          'Lorencová',
          'Loudová',
          'Ludvíková',
          'Lukáčová',
          'Lukášová',
          'Lukášková',
          'Lukešová',
          'Macáková',
          'Macková',
          'Machová',
          'Máchová',
          'Machačová',
          'Macháčová',
          'Macháčková',
          'Machalová',
          'Machálková',
          'Macurová',
          'Majrová',
          'Malečková',
          'Málková',
          'Malíková',
          'Malinová',
          'Malýová',
          'Maňáková',
          'Marečková',
          'Marková',
          'Marešová',
          'Maříková',
          'Maršálková',
          'Maršíková',
          'Martincová',
          'Martinková',
          'Martínková',
          'Mašková',
          'Masopustová',
          'Matějíčková',
          'Matějková',
          'Matoušová',
          'Matoušková',
          'Matulová',
          'Matušková',
          'Matyášová',
          'Matysová',
          'Maxová',
          'Mayrová',
          'Mazánková',
          'Medková',
          'Melicharová',
          'Menclová',
          'Menšíková',
          'Mertová',
          'Michalová',
          'Michalcová',
          'Michálková',
          'Michalíková',
          'Michnová',
          'Mičková',
          'Miková',
          'Míková',
          'Mikešová',
          'Mikoová',
          'Mikulová',
          'Mikulášková',
          'Minářová',
          'Minaříková',
          'Mirgová',
          'Mládková',
          'Mlčochová',
          'Mlejnková',
          'Mojžíšová',
          'Mokrýová',
          'Molnárová',
          'Moravcová',
          'Morávková',
          'Motlová',
          'Motyčková',
          'Moučková',
          'Moudrýová',
          'Mráčková',
          'Mrázová',
          'Mrázková',
          'Mrkvičková',
          'Muchová',
          'Müllrová',
          'Műllrová',
          'Musilová',
          'Mužíková',
          'Myšková',
          'Nagyová',
          'Najmanová',
          'Navrátilová',
          'Nečasová',
          'Nedbalová',
          'Nedomová',
          'Nedvědová',
          'Nejedlýová',
          'Němcová',
          'Němečková',
          'Nešporová',
          'Nesvadbová',
          'Neubaurová',
          'Neumanová',
          'Neumannová',
          'Nguynová',
          'Nguyen vanová',
          'Nosková',
          'Nováčková',
          'Nováková',
          'Novosadová',
          'Novotnýová',
          'Novýová',
          'Odehnalová',
          'Oláhová',
          'Olivová',
          'Ondrová',
          'Ondráčková',
          'Orságová',
          'Otáhalová',
          'Palečková',
          'Pánková',
          'Papežová',
          'Pařízková',
          'Pašková',
          'Pátková',
          'Patočková',
          'Paulová',
          'Pavlová',
          'Pavelková',
          'Pavelková',
          'Pavlasová',
          'Pavlicová',
          'Pavlíčková',
          'Pavlíková',
          'Pavlůová',
          'Pazderová',
          'Pechová',
          'Pechová',
          'Pecháčková',
          'Pecková',
          'Pekařová',
          'Pekárková',
          'Pelcová',
          'Pelikánová',
          'Peřinová',
          'Pernicová',
          'Peroutková',
          'Pešková',
          'Pešková',
          'Peštová',
          'Peterková',
          'Petrová',
          'Petráková',
          'Petrášová',
          'Petříčková',
          'Petříková',
          'Petrůová',
          'Phamová',
          'Píchová',
          'Pilařová',
          'Pilátová',
          'Píšová',
          'Pivoňková',
          'Plačková',
          'Plachýová',
          'Plšková',
          'Pluhařová',
          'Podzimková',
          'Pohlová',
          'Pokornýová',
          'Poláčková',
          'Poláchová',
          'Poláková',
          'Polanskýová',
          'Polášková',
          'Polívková',
          'Popelková',
          'Pospíchalová',
          'Pospíšilová',
          'Potůčková',
          'Pourová',
          'Prachařová',
          'Prášková',
          'Pražáková',
          'Prchalová',
          'Přibylová',
          'Příhodová',
          'Přikrylová',
          'Procházková',
          'Prokešová',
          'Prokopová',
          'Prošková',
          'Provazníková',
          'Průchová',
          'Průšová',
          'Pšeničková',
          'Ptáčková',
          'Rácová',
          'Radová',
          'Raková',
          'Rambousková',
          'Rašková',
          'Ratajová',
          'řeháčková',
          'řeháková',
          'řehořová',
          'Remešová',
          'řezáčová',
          'Rezková',
          'řezníčková',
          'Richtrová',
          'Richtrová',
          'říhová',
          'Roubalová',
          'Rousová',
          'Rozsypalová',
          'Rudolfová',
          'Růžková',
          'Růžičková',
          'Rybová',
          'Rybářová',
          'Rýdlová',
          'Ryšavýová',
          'Sadílková',
          'šafářová',
          'šafaříková',
          'šafránková',
          'šálková',
          'Samková',
          'šandová',
          'šašková',
          'Schejbalová',
          'Schmidtová',
          'Schneidrová',
          'Schwarzová',
          'šebková',
          'šebelová',
          'šebestová',
          'šedová',
          'šedivýová',
          'Sedláčková',
          'Sedláková',
          'Sedlářová',
          'Sehnalová',
          'Seidlová',
          'Seifertová',
          'Sekaninová',
          'Semerádová',
          'šenková',
          'šestáková',
          'ševčíková',
          'Severová',
          'Sikorová',
          'šilhavýová',
          'šímová',
          'šimáčková',
          'šimáková',
          'šimánková',
          'šimčíková',
          'šimečková',
          'šimková',
          'šimonová',
          'šimůnková',
          'šindelářová',
          'šindlrová',
          'šípová',
          'šípková',
          'šírová',
          'širokýová',
          'šišková',
          'Siváková',
          'Skáclová',
          'Skalová',
          'Skálová',
          'Skalickýová',
          'Sklenářová',
          'škodová',
          'Skopalová',
          'Skořepová',
          'škrabalová',
          'Skřivánková',
          'Slabýová',
          'Sládková',
          'Sladkýová',
          'Slámová',
          'Slaninová',
          'Slavíčková',
          'Slavíková',
          'šlechtová',
          'Slezáková',
          'Slováčková',
          'Slováková',
          'Sluková',
          'Smejkalová',
          'šmejkalová',
          'Smékalová',
          'šmerdová',
          'Smetanová',
          'šmídová',
          'Smolová',
          'Smolíková',
          'Smolková',
          'Smrčková',
          'Smržová',
          'Smutnýová',
          'šnajdrová',
          'Sobková',
          'Sobotková',
          'Sochorová',
          'Sojková',
          'Sokolová',
          'šolcová',
          'Sommrová',
          'Součková',
          'Soukupová',
          'Sovová',
          'špačková',
          'Spáčilová',
          'špičková',
          'šplíchalová',
          'Spurnýová',
          'šrámková',
          'Srbová',
          'Staněková',
          'Stárková',
          'Starýová',
          'šťastnýová',
          'štefanová',
          'štefková',
          'šteflová',
          'Stehlíková',
          'Steinrová',
          'Stejskalová',
          'štěpánová',
          'štěpánková',
          'štěrbová',
          'Stiborová',
          'Stoklasová',
          'Straková',
          'Stránskýová',
          'Strejčková',
          'Strnadová',
          'Strouhalová',
          'Stuchlíková',
          'Studenýová',
          'Studničková',
          'Stupková',
          'šubrtová',
          'Suchánková',
          'Suchomlová',
          'Suchýová',
          'Suková',
          'šulcová',
          'šustrová',
          'švábová',
          'Svačinová',
          'švandová',
          'švarcová',
          'Svatoňová',
          'Svatošová',
          'švcová',
          'švehlová',
          'švejdová',
          'švestková',
          'Světlíková',
          'Svitáková',
          'Svobodová',
          'Svozilová',
          'Sýkorová',
          'Synková',
          'Syrovýová',
          'Táborskýová',
          'Tancošová',
          'Teplýová',
          'Tesařová',
          'Tichýová',
          'Tomanová',
          'Tománková',
          'Tomášová',
          'Tomášková',
          'Tomečková',
          'Tomková',
          'Tomešová',
          'Tóthová',
          'Tranová',
          'Trávníčková',
          'Trčková',
          'Třísková',
          'Trnková',
          'Trojanová',
          'Truhlářová',
          'Tučková',
          'Tůmová',
          'Turečková',
          'Turková',
          'Tvrdíková',
          'Tvrdýová',
          'Uhrová',
          'Uhlířová',
          'Ulrichová',
          'Urbanová',
          'Urbancová',
          'Urbánková',
          'Vacková',
          'Váchová',
          'Václavková',
          'Václavíková',
          'Vaculíková',
          'Vágnrová',
          'Valová',
          'Valášková',
          'Válková',
          'Valentová',
          'Valešová',
          'Váňová',
          'Vančurová',
          'Vaněčková',
          'Vaněková',
          'Vaníčková',
          'Vargová',
          'Vašáková',
          'Vašková',
          'Vašíčková',
          'Vávrová',
          'Vavříková',
          'Večeřová',
          'Vejvodová',
          'Vernrová',
          'Veselýová',
          'Veverková',
          'Víchová',
          'Vilímková',
          'Vinšová',
          'Víšková',
          'Vítová',
          'Vitásková',
          'Vítková',
          'Vlachová',
          'Vlasáková',
          'Vlčková',
          'Vlková',
          'Vobořilová',
          'Vodáková',
          'Vodičková',
          'Vodrážková',
          'Vojáčková',
          'Vojtová',
          'Vojtěchová',
          'Vojtková',
          'Vojtíšková',
          'Vokounová',
          'Volková',
          'Volfová',
          'Volnýová',
          'Vondrová',
          'Vondráčková',
          'Vondráková',
          'Voráčková',
          'Vorlová',
          'Voříšková',
          'Vorlíčková',
          'Votavová',
          'Votrubová',
          'Vrabcová',
          'Vránová',
          'Vrbová',
          'Vrzalová',
          'Vybíralová',
          'Vydrová',
          'Vymazalová',
          'Vyskočilová',
          'Vysloužilová',
          'Wagnrová',
          'Waltrová',
          'Webrová',
          'Weissová',
          'Winklrová',
          'Wolfová',
          'Zábranskýová',
          'žáčková',
          'Zachová',
          'Zahrádková',
          'Zahradníková',
          'Zajícová',
          'Zajíčková',
          'žáková',
          'Zálešáková',
          'Zámečníková',
          'Zapletalová',
          'Zárubová',
          'Zatloukalová',
          'Zavadilová',
          'Zavřlová',
          'Zbořilová',
          'žďárskýová',
          'Zdražilová',
          'Zedníková',
          'Zelenková',
          'Zelenýová',
          'Zelinková',
          'Zemanová',
          'Zemánková',
          'žemličková',
          'Zezulová',
          'žídková',
          'žigová',
          'Zíková',
          'Zikmundová',
          'Zimová',
          'žižková',
          'Zlámalová',
          'Zoubková',
          'Zouharová',
          'žůrková',
          'Zvěřinová',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/cz/name/prefix.js': [
      function(require, module, exports) {
        module['exports'] = ['Ing.', 'Mgr.', 'JUDr.', 'MUDr.']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/cz/name/suffix.js': [
      function(require, module, exports) {
        module['exports'] = ['Phd.']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/cz/name/title.js': [
      function(require, module, exports) {
        module['exports'] = {
          descriptor: [
            'Lead',
            'Senior',
            'Direct',
            'Corporate',
            'Dynamic',
            'Future',
            'Product',
            'National',
            'Regional',
            'District',
            'Central',
            'Global',
            'Customer',
            'Investor',
            'Dynamic',
            'International',
            'Legacy',
            'Forward',
            'Internal',
            'Human',
            'Chief',
            'Principal',
          ],
          level: [
            'Solutions',
            'Program',
            'Brand',
            'Security',
            'Research',
            'Marketing',
            'Directives',
            'Implementation',
            'Integration',
            'Functionality',
            'Response',
            'Paradigm',
            'Tactics',
            'Identity',
            'Markets',
            'Group',
            'Division',
            'Applications',
            'Optimization',
            'Operations',
            'Infrastructure',
            'Intranet',
            'Communications',
            'Web',
            'Branding',
            'Quality',
            'Assurance',
            'Mobility',
            'Accounts',
            'Data',
            'Creative',
            'Configuration',
            'Accountability',
            'Interactions',
            'Factors',
            'Usability',
            'Metrics',
          ],
          job: [
            'Supervisor',
            'Associate',
            'Executive',
            'Liason',
            'Officer',
            'Manager',
            'Engineer',
            'Specialist',
            'Director',
            'Coordinator',
            'Administrator',
            'Architect',
            'Analyst',
            'Designer',
            'Planner',
            'Orchestrator',
            'Technician',
            'Developer',
            'Producer',
            'Consultant',
            'Assistant',
            'Facilitator',
            'Agent',
            'Representative',
            'Strategist',
          ],
        }
      },
      {},
    ],
    '../node_modules/faker/lib/locales/cz/name/name.js': [
      function(require, module, exports) {
        module['exports'] = [
          '#{prefix} #{man_first_name} #{man_last_name}',
          '#{prefix} #{woman_first_name} #{woman_last_name}',
          '#{man_first_name} #{man_last_name} #{suffix}',
          '#{woman_first_name} #{woman_last_name} #{suffix}',
          '#{man_first_name} #{man_last_name}',
          '#{man_first_name} #{man_last_name}',
          '#{man_first_name} #{man_last_name}',
          '#{woman_first_name} #{woman_last_name}',
          '#{woman_first_name} #{woman_last_name}',
          '#{woman_first_name} #{woman_last_name}',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/cz/name/index.js': [
      function(require, module, exports) {
        var name = {}
        module['exports'] = name
        name.male_first_name = require('./male_first_name')
        name.female_first_name = require('./female_first_name')
        name.male_last_name = require('./male_last_name')
        name.female_last_name = require('./female_last_name')
        name.prefix = require('./prefix')
        name.suffix = require('./suffix')
        name.title = require('./title')
        name.name = require('./name')
      },
      {
        './male_first_name':
          '../node_modules/faker/lib/locales/cz/name/male_first_name.js',
        './female_first_name':
          '../node_modules/faker/lib/locales/cz/name/female_first_name.js',
        './male_last_name':
          '../node_modules/faker/lib/locales/cz/name/male_last_name.js',
        './female_last_name':
          '../node_modules/faker/lib/locales/cz/name/female_last_name.js',
        './prefix': '../node_modules/faker/lib/locales/cz/name/prefix.js',
        './suffix': '../node_modules/faker/lib/locales/cz/name/suffix.js',
        './title': '../node_modules/faker/lib/locales/cz/name/title.js',
        './name': '../node_modules/faker/lib/locales/cz/name/name.js',
      },
    ],
    '../node_modules/faker/lib/locales/cz/phone_number/formats.js': [
      function(require, module, exports) {
        module['exports'] = [
          '601 ### ###',
          '737 ### ###',
          '736 ### ###',
          '### ### ###',
          '+420 ### ### ###',
          '00420 ### ### ###',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/cz/phone_number/index.js': [
      function(require, module, exports) {
        var phone_number = {}
        module['exports'] = phone_number
        phone_number.formats = require('./formats')
      },
      {
        './formats':
          '../node_modules/faker/lib/locales/cz/phone_number/formats.js',
      },
    ],
    '../node_modules/faker/lib/locales/cz/date/month.js': [
      function(require, module, exports) {
        // Source: http://unicode.org/cldr/trac/browser/tags/release-27/common/main/en.xml#L1799
        module['exports'] = {
          wide: [
            'Leden',
            'Únor',
            'Březen',
            'Duben',
            'Květen',
            'Červen',
            'Červenec',
            'Srpen',
            'Září',
            'Říjen',
            'Listopad',
            'Prosinec',
          ],
          // Property "wide_context" is optional, if not set then "wide" will be used instead
          // It is used to specify a word in context, which may differ from a stand-alone word
          wide_context: [
            'Leden',
            'Únor',
            'Březen',
            'Duben',
            'Květen',
            'Červen',
            'Červenec',
            'Srpen',
            'Září',
            'Říjen',
            'Listopad',
            'Prosinec',
          ],
          abbr: [
            'Led',
            'Úno',
            'Bře',
            'Dub',
            'Kvě',
            'Čer',
            'Črc',
            'Srp',
            'Zář',
            'Říj',
            'Lis',
            'Pro',
          ],
          // Property "abbr_context" is optional, if not set then "abbr" will be used instead
          // It is used to specify a word in context, which may differ from a stand-alone word
          abbr_context: [
            'Led',
            'Úno',
            'Bře',
            'Dub',
            'Kvě',
            'Čer',
            'Črc',
            'Srp',
            'Zář',
            'Říj',
            'Lis',
            'Pro',
          ],
        }
      },
      {},
    ],
    '../node_modules/faker/lib/locales/cz/date/weekday.js': [
      function(require, module, exports) {
        // Source: http://unicode.org/cldr/trac/browser/tags/release-27/common/main/en.xml#L1847
        module['exports'] = {
          wide: [
            'Pondělí',
            'Úterý',
            'Středa',
            'čtvrtek',
            'Pátek',
            'Sobota',
            'Neděle',
          ],
          // Property "wide_context" is optional, if not set then "wide" will be used instead
          // It is used to specify a word in context, which may differ from a stand-alone word
          wide_context: [
            'Pondělí',
            'Úterý',
            'Středa',
            'čtvrtek',
            'Pátek',
            'Sobota',
            'Neděle',
          ],
          abbr: ['Po', 'Út', 'St', 'čt', 'Pá', 'So', 'Ne'],
          // Property "abbr_context" is optional, if not set then "abbr" will be used instead
          // It is used to specify a word in context, which may differ from a stand-alone word
          abbr_context: ['Po', 'Út', 'St', 'čt', 'Pá', 'So', 'Ne'],
        }
      },
      {},
    ],
    '../node_modules/faker/lib/locales/cz/date/index.js': [
      function(require, module, exports) {
        var date = {}
        module['exports'] = date
        date.month = require('./month')
        date.weekday = require('./weekday')
      },
      {
        './month': '../node_modules/faker/lib/locales/cz/date/month.js',
        './weekday':
          '../node_modules/faker/lib/locales/cz/date/weekday.js',
      },
    ],
    '../node_modules/faker/lib/locales/cz/index.js': [
      function(require, module, exports) {
        var cz = {}
        module['exports'] = cz
        cz.title = 'Czech'
        cz.address = require('./address')
        cz.company = require('./company')
        cz.internet = require('./internet')
        cz.lorem = require('./lorem')
        cz.name = require('./name')
        cz.phone_number = require('./phone_number')
        cz.date = require('./date')
      },
      {
        './address':
          '../node_modules/faker/lib/locales/cz/address/index.js',
        './company':
          '../node_modules/faker/lib/locales/cz/company/index.js',
        './internet':
          '../node_modules/faker/lib/locales/cz/internet/index.js',
        './lorem': '../node_modules/faker/lib/locales/cz/lorem/index.js',
        './name': '../node_modules/faker/lib/locales/cz/name/index.js',
        './phone_number':
          '../node_modules/faker/lib/locales/cz/phone_number/index.js',
        './date': '../node_modules/faker/lib/locales/cz/date/index.js',
      },
    ],
    '../node_modules/faker/lib/locales/de/address/city_prefix.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Nord',
          'Ost',
          'West',
          'Süd',
          'Neu',
          'Alt',
          'Bad',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/de/address/city_suffix.js': [
      function(require, module, exports) {
        module['exports'] = ['stadt', 'dorf', 'land', 'scheid', 'burg']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/de/address/country.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Ägypten',
          'Äquatorialguinea',
          'Äthiopien',
          'Österreich',
          'Afghanistan',
          'Albanien',
          'Algerien',
          'Amerikanisch-Samoa',
          'Amerikanische Jungferninseln',
          'Andorra',
          'Angola',
          'Anguilla',
          'Antarktis',
          'Antigua und Barbuda',
          'Argentinien',
          'Armenien',
          'Aruba',
          'Aserbaidschan',
          'Australien',
          'Bahamas',
          'Bahrain',
          'Bangladesch',
          'Barbados',
          'Belarus',
          'Belgien',
          'Belize',
          'Benin',
          'die Bermudas',
          'Bhutan',
          'Bolivien',
          'Bosnien und Herzegowina',
          'Botsuana',
          'Bouvetinsel',
          'Brasilien',
          'Britische Jungferninseln',
          'Britisches Territorium im Indischen Ozean',
          'Brunei Darussalam',
          'Bulgarien',
          'Burkina Faso',
          'Burundi',
          'Chile',
          'China',
          'Cookinseln',
          'Costa Rica',
          'Dänemark',
          'Demokratische Republik Kongo',
          'Demokratische Volksrepublik Korea',
          'Deutschland',
          'Dominica',
          'Dominikanische Republik',
          'Dschibuti',
          'Ecuador',
          'El Salvador',
          'Eritrea',
          'Estland',
          'Färöer',
          'Falklandinseln',
          'Fidschi',
          'Finnland',
          'Frankreich',
          'Französisch-Guayana',
          'Französisch-Polynesien',
          'Französische Gebiete im südlichen Indischen Ozean',
          'Gabun',
          'Gambia',
          'Georgien',
          'Ghana',
          'Gibraltar',
          'Grönland',
          'Grenada',
          'Griechenland',
          'Guadeloupe',
          'Guam',
          'Guatemala',
          'Guinea',
          'Guinea-Bissau',
          'Guyana',
          'Haiti',
          'Heard und McDonaldinseln',
          'Honduras',
          'Hongkong',
          'Indien',
          'Indonesien',
          'Irak',
          'Iran',
          'Irland',
          'Island',
          'Israel',
          'Italien',
          'Jamaika',
          'Japan',
          'Jemen',
          'Jordanien',
          'Jugoslawien',
          'Kaimaninseln',
          'Kambodscha',
          'Kamerun',
          'Kanada',
          'Kap Verde',
          'Kasachstan',
          'Katar',
          'Kenia',
          'Kirgisistan',
          'Kiribati',
          'Kleinere amerikanische Überseeinseln',
          'Kokosinseln',
          'Kolumbien',
          'Komoren',
          'Kongo',
          'Kroatien',
          'Kuba',
          'Kuwait',
          'Laos',
          'Lesotho',
          'Lettland',
          'Libanon',
          'Liberia',
          'Libyen',
          'Liechtenstein',
          'Litauen',
          'Luxemburg',
          'Macau',
          'Madagaskar',
          'Malawi',
          'Malaysia',
          'Malediven',
          'Mali',
          'Malta',
          'ehemalige jugoslawische Republik Mazedonien',
          'Marokko',
          'Marshallinseln',
          'Martinique',
          'Mauretanien',
          'Mauritius',
          'Mayotte',
          'Mexiko',
          'Mikronesien',
          'Monaco',
          'Mongolei',
          'Montserrat',
          'Mosambik',
          'Myanmar',
          'Nördliche Marianen',
          'Namibia',
          'Nauru',
          'Nepal',
          'Neukaledonien',
          'Neuseeland',
          'Nicaragua',
          'Niederländische Antillen',
          'Niederlande',
          'Niger',
          'Nigeria',
          'Niue',
          'Norfolkinsel',
          'Norwegen',
          'Oman',
          'Osttimor',
          'Pakistan',
          'Palau',
          'Panama',
          'Papua-Neuguinea',
          'Paraguay',
          'Peru',
          'Philippinen',
          'Pitcairninseln',
          'Polen',
          'Portugal',
          'Puerto Rico',
          'Réunion',
          'Republik Korea',
          'Republik Moldau',
          'Ruanda',
          'Rumänien',
          'Russische Föderation',
          'São Tomé und Príncipe',
          'Südafrika',
          'Südgeorgien und Südliche Sandwichinseln',
          'Salomonen',
          'Sambia',
          'Samoa',
          'San Marino',
          'Saudi-Arabien',
          'Schweden',
          'Schweiz',
          'Senegal',
          'Seychellen',
          'Sierra Leone',
          'Simbabwe',
          'Singapur',
          'Slowakei',
          'Slowenien',
          'Somalien',
          'Spanien',
          'Sri Lanka',
          'St. Helena',
          'St. Kitts und Nevis',
          'St. Lucia',
          'St. Pierre und Miquelon',
          'St. Vincent und die Grenadinen',
          'Sudan',
          'Surinam',
          'Svalbard und Jan Mayen',
          'Swasiland',
          'Syrien',
          'Türkei',
          'Tadschikistan',
          'Taiwan',
          'Tansania',
          'Thailand',
          'Togo',
          'Tokelau',
          'Tonga',
          'Trinidad und Tobago',
          'Tschad',
          'Tschechische Republik',
          'Tunesien',
          'Turkmenistan',
          'Turks- und Caicosinseln',
          'Tuvalu',
          'Uganda',
          'Ukraine',
          'Ungarn',
          'Uruguay',
          'Usbekistan',
          'Vanuatu',
          'Vatikanstadt',
          'Venezuela',
          'Vereinigte Arabische Emirate',
          'Vereinigte Staaten',
          'Vereinigtes Königreich',
          'Vietnam',
          'Wallis und Futuna',
          'Weihnachtsinsel',
          'Westsahara',
          'Zentralafrikanische Republik',
          'Zypern',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/de/address/street_root.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Ackerweg',
          'Adalbert-Stifter-Str.',
          'Adalbertstr.',
          'Adolf-Baeyer-Str.',
          'Adolf-Kaschny-Str.',
          'Adolf-Reichwein-Str.',
          'Adolfsstr.',
          'Ahornweg',
          'Ahrstr.',
          'Akazienweg',
          'Albert-Einstein-Str.',
          'Albert-Schweitzer-Str.',
          'Albertus-Magnus-Str.',
          'Albert-Zarthe-Weg',
          'Albin-Edelmann-Str.',
          'Albrecht-Haushofer-Str.',
          'Aldegundisstr.',
          'Alexanderstr.',
          'Alfred-Delp-Str.',
          'Alfred-Kubin-Str.',
          'Alfred-Stock-Str.',
          'Alkenrather Str.',
          'Allensteiner Str.',
          'Alsenstr.',
          'Alt Steinbücheler Weg',
          'Alte Garten',
          'Alte Heide',
          'Alte Landstr.',
          'Alte Ziegelei',
          'Altenberger Str.',
          'Altenhof',
          'Alter Grenzweg',
          'Altstadtstr.',
          'Am Alten Gaswerk',
          'Am Alten Schafstall',
          'Am Arenzberg',
          'Am Benthal',
          'Am Birkenberg',
          'Am Blauen Berg',
          'Am Borsberg',
          'Am Brungen',
          'Am Büchelter Hof',
          'Am Buttermarkt',
          'Am Ehrenfriedhof',
          'Am Eselsdamm',
          'Am Falkenberg',
          'Am Frankenberg',
          'Am Gesundheitspark',
          'Am Gierlichshof',
          'Am Graben',
          'Am Hagelkreuz',
          'Am Hang',
          'Am Heidkamp',
          'Am Hemmelrather Hof',
          'Am Hofacker',
          'Am Hohen Ufer',
          'Am Höllers Eck',
          'Am Hühnerberg',
          'Am Jägerhof',
          'Am Junkernkamp',
          'Am Kemperstiegel',
          'Am Kettnersbusch',
          'Am Kiesberg',
          'Am Klösterchen',
          'Am Knechtsgraben',
          'Am Köllerweg',
          'Am Köttersbach',
          'Am Kreispark',
          'Am Kronefeld',
          'Am Küchenhof',
          'Am Kühnsbusch',
          'Am Lindenfeld',
          'Am Märchen',
          'Am Mittelberg',
          'Am Mönchshof',
          'Am Mühlenbach',
          'Am Neuenhof',
          'Am Nonnenbruch',
          'Am Plattenbusch',
          'Am Quettinger Feld',
          'Am Rosenhügel',
          'Am Sandberg',
          'Am Scherfenbrand',
          'Am Schokker',
          'Am Silbersee',
          'Am Sonnenhang',
          'Am Sportplatz',
          'Am Stadtpark',
          'Am Steinberg',
          'Am Telegraf',
          'Am Thelenhof',
          'Am Vogelkreuz',
          'Am Vogelsang',
          'Am Vogelsfeldchen',
          'Am Wambacher Hof',
          'Am Wasserturm',
          'Am Weidenbusch',
          'Am Weiher',
          'Am Weingarten',
          'Am Werth',
          'Amselweg',
          'An den Irlen',
          'An den Rheinauen',
          'An der Bergerweide',
          'An der Dingbank',
          'An der Evangelischen Kirche',
          'An der Evgl. Kirche',
          'An der Feldgasse',
          'An der Fettehenne',
          'An der Kante',
          'An der Laach',
          'An der Lehmkuhle',
          'An der Lichtenburg',
          'An der Luisenburg',
          'An der Robertsburg',
          'An der Schmitten',
          'An der Schusterinsel',
          'An der Steinrütsch',
          'An St. Andreas',
          'An St. Remigius',
          'Andreasstr.',
          'Ankerweg',
          'Annette-Kolb-Str.',
          'Apenrader Str.',
          'Arnold-Ohletz-Str.',
          'Atzlenbacher Str.',
          'Auerweg',
          'Auestr.',
          'Auf dem Acker',
          'Auf dem Blahnenhof',
          'Auf dem Bohnbüchel',
          'Auf dem Bruch',
          'Auf dem End',
          'Auf dem Forst',
          'Auf dem Herberg',
          'Auf dem Lehn',
          'Auf dem Stein',
          'Auf dem Weierberg',
          'Auf dem Weiherhahn',
          'Auf den Reien',
          'Auf der Donnen',
          'Auf der Grieße',
          'Auf der Ohmer',
          'Auf der Weide',
          "Auf'm Berg",
          "Auf'm Kamp",
          'Augustastr.',
          'August-Kekulé-Str.',
          'A.-W.-v.-Hofmann-Str.',
          'Bahnallee',
          'Bahnhofstr.',
          'Baltrumstr.',
          'Bamberger Str.',
          'Baumberger Str.',
          'Bebelstr.',
          'Beckers Kämpchen',
          'Beerenstr.',
          'Beethovenstr.',
          'Behringstr.',
          'Bendenweg',
          'Bensberger Str.',
          'Benzstr.',
          'Bergische Landstr.',
          'Bergstr.',
          'Berliner Platz',
          'Berliner Str.',
          'Bernhard-Letterhaus-Str.',
          'Bernhard-Lichtenberg-Str.',
          'Bernhard-Ridder-Str.',
          'Bernsteinstr.',
          'Bertha-Middelhauve-Str.',
          'Bertha-von-Suttner-Str.',
          'Bertolt-Brecht-Str.',
          'Berzeliusstr.',
          'Bielertstr.',
          'Biesenbach',
          'Billrothstr.',
          'Birkenbergstr.',
          'Birkengartenstr.',
          'Birkenweg',
          'Bismarckstr.',
          'Bitterfelder Str.',
          'Blankenburg',
          'Blaukehlchenweg',
          'Blütenstr.',
          'Boberstr.',
          'Böcklerstr.',
          'Bodelschwinghstr.',
          'Bodestr.',
          'Bogenstr.',
          'Bohnenkampsweg',
          'Bohofsweg',
          'Bonifatiusstr.',
          'Bonner Str.',
          'Borkumstr.',
          'Bornheimer Str.',
          'Borsigstr.',
          'Borussiastr.',
          'Bracknellstr.',
          'Brahmsweg',
          'Brandenburger Str.',
          'Breidenbachstr.',
          'Breslauer Str.',
          'Bruchhauser Str.',
          'Brückenstr.',
          'Brucknerstr.',
          'Brüder-Bonhoeffer-Str.',
          'Buchenweg',
          'Bürgerbuschweg',
          'Burgloch',
          'Burgplatz',
          'Burgstr.',
          'Burgweg',
          'Bürriger Weg',
          'Burscheider Str.',
          'Buschkämpchen',
          'Butterheider Str.',
          'Carl-Duisberg-Platz',
          'Carl-Duisberg-Str.',
          'Carl-Leverkus-Str.',
          'Carl-Maria-von-Weber-Platz',
          'Carl-Maria-von-Weber-Str.',
          'Carlo-Mierendorff-Str.',
          'Carl-Rumpff-Str.',
          'Carl-von-Ossietzky-Str.',
          'Charlottenburger Str.',
          'Christian-Heß-Str.',
          'Claasbruch',
          'Clemens-Winkler-Str.',
          'Concordiastr.',
          'Cranachstr.',
          'Dahlemer Str.',
          'Daimlerstr.',
          'Damaschkestr.',
          'Danziger Str.',
          'Debengasse',
          'Dechant-Fein-Str.',
          'Dechant-Krey-Str.',
          'Deichtorstr.',
          'Dhünnberg',
          'Dhünnstr.',
          'Dianastr.',
          'Diedenhofener Str.',
          'Diepental',
          'Diepenthaler Str.',
          'Dieselstr.',
          'Dillinger Str.',
          'Distelkamp',
          'Dohrgasse',
          'Domblick',
          'Dönhoffstr.',
          'Dornierstr.',
          'Drachenfelsstr.',
          'Dr.-August-Blank-Str.',
          'Dresdener Str.',
          'Driescher Hecke',
          'Drosselweg',
          'Dudweilerstr.',
          'Dünenweg',
          'Dünfelder Str.',
          'Dünnwalder Grenzweg',
          'Düppeler Str.',
          'Dürerstr.',
          'Dürscheider Weg',
          'Düsseldorfer Str.',
          'Edelrather Weg',
          'Edmund-Husserl-Str.',
          'Eduard-Spranger-Str.',
          'Ehrlichstr.',
          'Eichenkamp',
          'Eichenweg',
          'Eidechsenweg',
          'Eifelstr.',
          'Eifgenstr.',
          'Eintrachtstr.',
          'Elbestr.',
          'Elisabeth-Langgässer-Str.',
          'Elisabethstr.',
          'Elisabeth-von-Thadden-Str.',
          'Elisenstr.',
          'Elsa-Brändström-Str.',
          'Elsbachstr.',
          'Else-Lasker-Schüler-Str.',
          'Elsterstr.',
          'Emil-Fischer-Str.',
          'Emil-Nolde-Str.',
          'Engelbertstr.',
          'Engstenberger Weg',
          'Entenpfuhl',
          'Erbelegasse',
          'Erftstr.',
          'Erfurter Str.',
          'Erich-Heckel-Str.',
          'Erich-Klausener-Str.',
          'Erich-Ollenhauer-Str.',
          'Erlenweg',
          'Ernst-Bloch-Str.',
          'Ernst-Ludwig-Kirchner-Str.',
          'Erzbergerstr.',
          'Eschenallee',
          'Eschenweg',
          'Esmarchstr.',
          'Espenweg',
          'Euckenstr.',
          'Eulengasse',
          'Eulenkamp',
          'Ewald-Flamme-Str.',
          'Ewald-Röll-Str.',
          'Fährstr.',
          'Farnweg',
          'Fasanenweg',
          'Faßbacher Hof',
          'Felderstr.',
          'Feldkampstr.',
          'Feldsiefer Weg',
          'Feldsiefer Wiesen',
          'Feldstr.',
          'Feldtorstr.',
          'Felix-von-Roll-Str.',
          'Ferdinand-Lassalle-Str.',
          'Fester Weg',
          'Feuerbachstr.',
          'Feuerdornweg',
          'Fichtenweg',
          'Fichtestr.',
          'Finkelsteinstr.',
          'Finkenweg',
          'Fixheider Str.',
          'Flabbenhäuschen',
          'Flensburger Str.',
          'Fliederweg',
          'Florastr.',
          'Florianweg',
          'Flotowstr.',
          'Flurstr.',
          'Föhrenweg',
          'Fontanestr.',
          'Forellental',
          'Fortunastr.',
          'Franz-Esser-Str.',
          'Franz-Hitze-Str.',
          'Franz-Kail-Str.',
          'Franz-Marc-Str.',
          'Freiburger Str.',
          'Freiheitstr.',
          'Freiherr-vom-Stein-Str.',
          'Freudenthal',
          'Freudenthaler Weg',
          'Fridtjof-Nansen-Str.',
          'Friedenberger Str.',
          'Friedensstr.',
          'Friedhofstr.',
          'Friedlandstr.',
          'Friedlieb-Ferdinand-Runge-Str.',
          'Friedrich-Bayer-Str.',
          'Friedrich-Bergius-Platz',
          'Friedrich-Ebert-Platz',
          'Friedrich-Ebert-Str.',
          'Friedrich-Engels-Str.',
          'Friedrich-List-Str.',
          'Friedrich-Naumann-Str.',
          'Friedrich-Sertürner-Str.',
          'Friedrichstr.',
          'Friedrich-Weskott-Str.',
          'Friesenweg',
          'Frischenberg',
          'Fritz-Erler-Str.',
          'Fritz-Henseler-Str.',
          'Fröbelstr.',
          'Fürstenbergplatz',
          'Fürstenbergstr.',
          'Gabriele-Münter-Str.',
          'Gartenstr.',
          'Gebhardstr.',
          'Geibelstr.',
          'Gellertstr.',
          'Georg-von-Vollmar-Str.',
          'Gerhard-Domagk-Str.',
          'Gerhart-Hauptmann-Str.',
          'Gerichtsstr.',
          'Geschwister-Scholl-Str.',
          'Gezelinallee',
          'Gierener Weg',
          'Ginsterweg',
          'Gisbert-Cremer-Str.',
          'Glücksburger Str.',
          'Gluckstr.',
          'Gneisenaustr.',
          'Goetheplatz',
          'Goethestr.',
          'Golo-Mann-Str.',
          'Görlitzer Str.',
          'Görresstr.',
          'Graebestr.',
          'Graf-Galen-Platz',
          'Gregor-Mendel-Str.',
          'Greifswalder Str.',
          'Grillenweg',
          'Gronenborner Weg',
          'Große Kirchstr.',
          'Grunder Wiesen',
          'Grundermühle',
          'Grundermühlenhof',
          'Grundermühlenweg',
          'Grüner Weg',
          'Grunewaldstr.',
          'Grünstr.',
          'Günther-Weisenborn-Str.',
          'Gustav-Freytag-Str.',
          'Gustav-Heinemann-Str.',
          'Gustav-Radbruch-Str.',
          'Gut Reuschenberg',
          'Gutenbergstr.',
          'Haberstr.',
          'Habichtgasse',
          'Hafenstr.',
          'Hagenauer Str.',
          'Hahnenblecher',
          'Halenseestr.',
          'Halfenleimbach',
          'Hallesche Str.',
          'Halligstr.',
          'Hamberger Str.',
          'Hammerweg',
          'Händelstr.',
          'Hannah-Höch-Str.',
          'Hans-Arp-Str.',
          'Hans-Gerhard-Str.',
          'Hans-Sachs-Str.',
          'Hans-Schlehahn-Str.',
          'Hans-von-Dohnanyi-Str.',
          'Hardenbergstr.',
          'Haselweg',
          'Hauptstr.',
          'Haus-Vorster-Str.',
          'Hauweg',
          'Havelstr.',
          'Havensteinstr.',
          'Haydnstr.',
          'Hebbelstr.',
          'Heckenweg',
          'Heerweg',
          'Hegelstr.',
          'Heidberg',
          'Heidehöhe',
          'Heidestr.',
          'Heimstättenweg',
          'Heinrich-Böll-Str.',
          'Heinrich-Brüning-Str.',
          'Heinrich-Claes-Str.',
          'Heinrich-Heine-Str.',
          'Heinrich-Hörlein-Str.',
          'Heinrich-Lübke-Str.',
          'Heinrich-Lützenkirchen-Weg',
          'Heinrichstr.',
          'Heinrich-Strerath-Str.',
          'Heinrich-von-Kleist-Str.',
          'Heinrich-von-Stephan-Str.',
          'Heisterbachstr.',
          'Helenenstr.',
          'Helmestr.',
          'Hemmelrather Weg',
          'Henry-T.-v.-Böttinger-Str.',
          'Herderstr.',
          'Heribertstr.',
          'Hermann-Ehlers-Str.',
          'Hermann-Hesse-Str.',
          'Hermann-König-Str.',
          'Hermann-Löns-Str.',
          'Hermann-Milde-Str.',
          'Hermann-Nörrenberg-Str.',
          'Hermann-von-Helmholtz-Str.',
          'Hermann-Waibel-Str.',
          'Herzogstr.',
          'Heymannstr.',
          'Hindenburgstr.',
          'Hirzenberg',
          'Hitdorfer Kirchweg',
          'Hitdorfer Str.',
          'Höfer Mühle',
          'Höfer Weg',
          'Hohe Str.',
          'Höhenstr.',
          'Höltgestal',
          'Holunderweg',
          'Holzer Weg',
          'Holzer Wiesen',
          'Hornpottweg',
          'Hubertusweg',
          'Hufelandstr.',
          'Hufer Weg',
          'Humboldtstr.',
          'Hummelsheim',
          'Hummelweg',
          'Humperdinckstr.',
          'Hüscheider Gärten',
          'Hüscheider Str.',
          'Hütte',
          'Ilmstr.',
          'Im Bergischen Heim',
          'Im Bruch',
          'Im Buchenhain',
          'Im Bühl',
          'Im Burgfeld',
          'Im Dorf',
          'Im Eisholz',
          'Im Friedenstal',
          'Im Frohental',
          'Im Grunde',
          'Im Hederichsfeld',
          'Im Jücherfeld',
          'Im Kalkfeld',
          'Im Kirberg',
          'Im Kirchfeld',
          'Im Kreuzbruch',
          'Im Mühlenfeld',
          'Im Nesselrader Kamp',
          'Im Oberdorf',
          'Im Oberfeld',
          'Im Rosengarten',
          'Im Rottland',
          'Im Scheffengarten',
          'Im Staderfeld',
          'Im Steinfeld',
          'Im Weidenblech',
          'Im Winkel',
          'Im Ziegelfeld',
          'Imbach',
          'Imbacher Weg',
          'Immenweg',
          'In den Blechenhöfen',
          'In den Dehlen',
          'In der Birkenau',
          'In der Dasladen',
          'In der Felderhütten',
          'In der Hartmannswiese',
          'In der Höhle',
          'In der Schaafsdellen',
          'In der Wasserkuhl',
          'In der Wüste',
          'In Holzhausen',
          'Insterstr.',
          'Jacob-Fröhlen-Str.',
          'Jägerstr.',
          'Jahnstr.',
          'Jakob-Eulenberg-Weg',
          'Jakobistr.',
          'Jakob-Kaiser-Str.',
          'Jenaer Str.',
          'Johannes-Baptist-Str.',
          'Johannes-Dott-Str.',
          'Johannes-Popitz-Str.',
          'Johannes-Wislicenus-Str.',
          'Johannisburger Str.',
          'Johann-Janssen-Str.',
          'Johann-Wirtz-Weg',
          'Josefstr.',
          'Jüch',
          'Julius-Doms-Str.',
          'Julius-Leber-Str.',
          'Kaiserplatz',
          'Kaiserstr.',
          'Kaiser-Wilhelm-Allee',
          'Kalkstr.',
          'Kämpchenstr.',
          'Kämpenwiese',
          'Kämper Weg',
          'Kamptalweg',
          'Kanalstr.',
          'Kandinskystr.',
          'Kantstr.',
          'Kapellenstr.',
          'Karl-Arnold-Str.',
          'Karl-Bosch-Str.',
          'Karl-Bückart-Str.',
          'Karl-Carstens-Ring',
          'Karl-Friedrich-Goerdeler-Str.',
          'Karl-Jaspers-Str.',
          'Karl-König-Str.',
          'Karl-Krekeler-Str.',
          'Karl-Marx-Str.',
          'Karlstr.',
          'Karl-Ulitzka-Str.',
          'Karl-Wichmann-Str.',
          'Karl-Wingchen-Str.',
          'Käsenbrod',
          'Käthe-Kollwitz-Str.',
          'Katzbachstr.',
          'Kerschensteinerstr.',
          'Kiefernweg',
          'Kieler Str.',
          'Kieselstr.',
          'Kiesweg',
          'Kinderhausen',
          'Kleiberweg',
          'Kleine Kirchstr.',
          'Kleingansweg',
          'Kleinheider Weg',
          'Klief',
          'Kneippstr.',
          'Knochenbergsweg',
          'Kochergarten',
          'Kocherstr.',
          'Kockelsberg',
          'Kolberger Str.',
          'Kolmarer Str.',
          'Kölner Gasse',
          'Kölner Str.',
          'Kolpingstr.',
          'Königsberger Platz',
          'Konrad-Adenauer-Platz',
          'Köpenicker Str.',
          'Kopernikusstr.',
          'Körnerstr.',
          'Köschenberg',
          'Köttershof',
          'Kreuzbroicher Str.',
          'Kreuzkamp',
          'Krummer Weg',
          'Kruppstr.',
          'Kuhlmannweg',
          'Kump',
          'Kumper Weg',
          'Kunstfeldstr.',
          'Küppersteger Str.',
          'Kursiefen',
          'Kursiefer Weg',
          'Kurtekottenweg',
          'Kurt-Schumacher-Ring',
          'Kyllstr.',
          'Langenfelder Str.',
          'Längsleimbach',
          'Lärchenweg',
          'Legienstr.',
          'Lehner Mühle',
          'Leichlinger Str.',
          'Leimbacher Hof',
          'Leinestr.',
          'Leineweberstr.',
          'Leipziger Str.',
          'Lerchengasse',
          'Lessingstr.',
          'Libellenweg',
          'Lichstr.',
          'Liebigstr.',
          'Lindenstr.',
          'Lingenfeld',
          'Linienstr.',
          'Lippe',
          'Löchergraben',
          'Löfflerstr.',
          'Loheweg',
          'Lohrbergstr.',
          'Lohrstr.',
          'Löhstr.',
          'Lortzingstr.',
          'Lötzener Str.',
          'Löwenburgstr.',
          'Lucasstr.',
          'Ludwig-Erhard-Platz',
          'Ludwig-Girtler-Str.',
          'Ludwig-Knorr-Str.',
          'Luisenstr.',
          'Lupinenweg',
          'Lurchenweg',
          'Lützenkirchener Str.',
          'Lycker Str.',
          'Maashofstr.',
          'Manforter Str.',
          'Marc-Chagall-Str.',
          'Maria-Dresen-Str.',
          'Maria-Terwiel-Str.',
          'Marie-Curie-Str.',
          'Marienburger Str.',
          'Mariendorfer Str.',
          'Marienwerderstr.',
          'Marie-Schlei-Str.',
          'Marktplatz',
          'Markusweg',
          'Martin-Buber-Str.',
          'Martin-Heidegger-Str.',
          'Martin-Luther-Str.',
          'Masurenstr.',
          'Mathildenweg',
          'Maurinusstr.',
          'Mauspfad',
          'Max-Beckmann-Str.',
          'Max-Delbrück-Str.',
          'Max-Ernst-Str.',
          'Max-Holthausen-Platz',
          'Max-Horkheimer-Str.',
          'Max-Liebermann-Str.',
          'Max-Pechstein-Str.',
          'Max-Planck-Str.',
          'Max-Scheler-Str.',
          'Max-Schönenberg-Str.',
          'Maybachstr.',
          'Meckhofer Feld',
          'Meisenweg',
          'Memelstr.',
          'Menchendahler Str.',
          'Mendelssohnstr.',
          'Merziger Str.',
          'Mettlacher Str.',
          'Metzer Str.',
          'Michaelsweg',
          'Miselohestr.',
          'Mittelstr.',
          'Mohlenstr.',
          'Moltkestr.',
          'Monheimer Str.',
          'Montanusstr.',
          'Montessoriweg',
          'Moosweg',
          'Morsbroicher Str.',
          'Moselstr.',
          'Moskauer Str.',
          'Mozartstr.',
          'Mühlenweg',
          'Muhrgasse',
          'Muldestr.',
          'Mülhausener Str.',
          'Mülheimer Str.',
          'Münsters Gäßchen',
          'Münzstr.',
          'Müritzstr.',
          'Myliusstr.',
          'Nachtigallenweg',
          'Nauener Str.',
          'Neißestr.',
          'Nelly-Sachs-Str.',
          'Netzestr.',
          'Neuendriesch',
          'Neuenhausgasse',
          'Neuenkamp',
          'Neujudenhof',
          'Neukronenberger Str.',
          'Neustadtstr.',
          'Nicolai-Hartmann-Str.',
          'Niederblecher',
          'Niederfeldstr.',
          'Nietzschestr.',
          'Nikolaus-Groß-Str.',
          'Nobelstr.',
          'Norderneystr.',
          'Nordstr.',
          'Ober dem Hof',
          'Obere Lindenstr.',
          'Obere Str.',
          'Oberölbach',
          'Odenthaler Str.',
          'Oderstr.',
          'Okerstr.',
          'Olof-Palme-Str.',
          'Ophovener Str.',
          'Opladener Platz',
          'Opladener Str.',
          'Ortelsburger Str.',
          'Oskar-Moll-Str.',
          'Oskar-Schlemmer-Str.',
          'Oststr.',
          'Oswald-Spengler-Str.',
          'Otto-Dix-Str.',
          'Otto-Grimm-Str.',
          'Otto-Hahn-Str.',
          'Otto-Müller-Str.',
          'Otto-Stange-Str.',
          'Ottostr.',
          'Otto-Varnhagen-Str.',
          'Otto-Wels-Str.',
          'Ottweilerstr.',
          'Oulustr.',
          'Overfeldweg',
          'Pappelweg',
          'Paracelsusstr.',
          'Parkstr.',
          'Pastor-Louis-Str.',
          'Pastor-Scheibler-Str.',
          'Pastorskamp',
          'Paul-Klee-Str.',
          'Paul-Löbe-Str.',
          'Paulstr.',
          'Peenestr.',
          'Pescher Busch',
          'Peschstr.',
          'Pestalozzistr.',
          'Peter-Grieß-Str.',
          'Peter-Joseph-Lenné-Str.',
          'Peter-Neuenheuser-Str.',
          'Petersbergstr.',
          'Peterstr.',
          'Pfarrer-Jekel-Str.',
          'Pfarrer-Klein-Str.',
          'Pfarrer-Röhr-Str.',
          'Pfeilshofstr.',
          'Philipp-Ott-Str.',
          'Piet-Mondrian-Str.',
          'Platanenweg',
          'Pommernstr.',
          'Porschestr.',
          'Poststr.',
          'Potsdamer Str.',
          'Pregelstr.',
          'Prießnitzstr.',
          'Pützdelle',
          'Quarzstr.',
          'Quettinger Str.',
          'Rat-Deycks-Str.',
          'Rathenaustr.',
          'Ratherkämp',
          'Ratiborer Str.',
          'Raushofstr.',
          'Regensburger Str.',
          'Reinickendorfer Str.',
          'Renkgasse',
          'Rennbaumplatz',
          'Rennbaumstr.',
          'Reuschenberger Str.',
          'Reusrather Str.',
          'Reuterstr.',
          'Rheinallee',
          'Rheindorfer Str.',
          'Rheinstr.',
          'Rhein-Wupper-Platz',
          'Richard-Wagner-Str.',
          'Rilkestr.',
          'Ringstr.',
          'Robert-Blum-Str.',
          'Robert-Koch-Str.',
          'Robert-Medenwald-Str.',
          'Rolandstr.',
          'Romberg',
          'Röntgenstr.',
          'Roonstr.',
          'Ropenstall',
          'Ropenstaller Weg',
          'Rosenthal',
          'Rostocker Str.',
          'Rotdornweg',
          'Röttgerweg',
          'Rückertstr.',
          'Rudolf-Breitscheid-Str.',
          'Rudolf-Mann-Platz',
          'Rudolf-Stracke-Str.',
          'Ruhlachplatz',
          'Ruhlachstr.',
          'Rüttersweg',
          'Saalestr.',
          'Saarbrücker Str.',
          'Saarlauterner Str.',
          'Saarstr.',
          'Salamanderweg',
          'Samlandstr.',
          'Sanddornstr.',
          'Sandstr.',
          'Sauerbruchstr.',
          'Schäfershütte',
          'Scharnhorststr.',
          'Scheffershof',
          'Scheidemannstr.',
          'Schellingstr.',
          'Schenkendorfstr.',
          'Schießbergstr.',
          'Schillerstr.',
          'Schlangenhecke',
          'Schlebuscher Heide',
          'Schlebuscher Str.',
          'Schlebuschrath',
          'Schlehdornstr.',
          'Schleiermacherstr.',
          'Schloßstr.',
          'Schmalenbruch',
          'Schnepfenflucht',
          'Schöffenweg',
          'Schöllerstr.',
          'Schöne Aussicht',
          'Schöneberger Str.',
          'Schopenhauerstr.',
          'Schubertplatz',
          'Schubertstr.',
          'Schulberg',
          'Schulstr.',
          'Schumannstr.',
          'Schwalbenweg',
          'Schwarzastr.',
          'Sebastianusweg',
          'Semmelweisstr.',
          'Siebelplatz',
          'Siemensstr.',
          'Solinger Str.',
          'Sonderburger Str.',
          'Spandauer Str.',
          'Speestr.',
          'Sperberweg',
          'Sperlingsweg',
          'Spitzwegstr.',
          'Sporrenberger Mühle',
          'Spreestr.',
          'St. Ingberter Str.',
          'Starenweg',
          'Stauffenbergstr.',
          'Stefan-Zweig-Str.',
          'Stegerwaldstr.',
          'Steglitzer Str.',
          'Steinbücheler Feld',
          'Steinbücheler Str.',
          'Steinstr.',
          'Steinweg',
          'Stephan-Lochner-Str.',
          'Stephanusstr.',
          'Stettiner Str.',
          'Stixchesstr.',
          'Stöckenstr.',
          'Stralsunder Str.',
          'Straßburger Str.',
          'Stresemannplatz',
          'Strombergstr.',
          'Stromstr.',
          'Stüttekofener Str.',
          'Sudestr.',
          'Sürderstr.',
          'Syltstr.',
          'Talstr.',
          'Tannenbergstr.',
          'Tannenweg',
          'Taubenweg',
          'Teitscheider Weg',
          'Telegrafenstr.',
          'Teltower Str.',
          'Tempelhofer Str.',
          'Theodor-Adorno-Str.',
          'Theodor-Fliedner-Str.',
          'Theodor-Gierath-Str.',
          'Theodor-Haubach-Str.',
          'Theodor-Heuss-Ring',
          'Theodor-Storm-Str.',
          'Theodorstr.',
          'Thomas-Dehler-Str.',
          'Thomas-Morus-Str.',
          'Thomas-von-Aquin-Str.',
          'Tönges Feld',
          'Torstr.',
          'Treptower Str.',
          'Treuburger Str.',
          'Uhlandstr.',
          'Ulmenweg',
          'Ulmer Str.',
          'Ulrichstr.',
          'Ulrich-von-Hassell-Str.',
          'Umlag',
          'Unstrutstr.',
          'Unter dem Schildchen',
          'Unterölbach',
          'Unterstr.',
          'Uppersberg',
          "Van\\'t-Hoff-Str.",
          'Veit-Stoß-Str.',
          'Vereinsstr.',
          'Viktor-Meyer-Str.',
          'Vincent-van-Gogh-Str.',
          'Virchowstr.',
          'Voigtslach',
          'Volhardstr.',
          'Völklinger Str.',
          'Von-Brentano-Str.',
          'Von-Diergardt-Str.',
          'Von-Eichendorff-Str.',
          'Von-Ketteler-Str.',
          'Von-Knoeringen-Str.',
          'Von-Pettenkofer-Str.',
          'Von-Siebold-Str.',
          'Wacholderweg',
          'Waldstr.',
          'Walter-Flex-Str.',
          'Walter-Hempel-Str.',
          'Walter-Hochapfel-Str.',
          'Walter-Nernst-Str.',
          'Wannseestr.',
          'Warnowstr.',
          'Warthestr.',
          'Weddigenstr.',
          'Weichselstr.',
          'Weidenstr.',
          'Weidfeldstr.',
          'Weiherfeld',
          'Weiherstr.',
          'Weinhäuser Str.',
          'Weißdornweg',
          'Weißenseestr.',
          'Weizkamp',
          'Werftstr.',
          'Werkstättenstr.',
          'Werner-Heisenberg-Str.',
          'Werrastr.',
          'Weyerweg',
          'Widdauener Str.',
          'Wiebertshof',
          'Wiehbachtal',
          'Wiembachallee',
          'Wiesdorfer Platz',
          'Wiesenstr.',
          'Wilhelm-Busch-Str.',
          'Wilhelm-Hastrich-Str.',
          'Wilhelm-Leuschner-Str.',
          'Wilhelm-Liebknecht-Str.',
          'Wilhelmsgasse',
          'Wilhelmstr.',
          'Willi-Baumeister-Str.',
          'Willy-Brandt-Ring',
          'Winand-Rossi-Str.',
          'Windthorststr.',
          'Winkelweg',
          'Winterberg',
          'Wittenbergstr.',
          'Wolf-Vostell-Str.',
          'Wolkenburgstr.',
          'Wupperstr.',
          'Wuppertalstr.',
          'Wüstenhof',
          'Yitzhak-Rabin-Str.',
          'Zauberkuhle',
          'Zedernweg',
          'Zehlendorfer Str.',
          'Zehntenweg',
          'Zeisigweg',
          'Zeppelinstr.',
          'Zschopaustr.',
          'Zum Claashäuschen',
          'Zündhütchenweg',
          'Zur Alten Brauerei',
          'Zur alten Fabrik',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/de/address/building_number.js': [
      function(require, module, exports) {
        module['exports'] = ['###', '##', '#', '##a', '##b', '##c']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/de/address/secondary_address.js': [
      function(require, module, exports) {
        module['exports'] = ['Apt. ###', 'Zimmer ###', '# OG']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/de/address/postcode.js': [
      function(require, module, exports) {
        module['exports'] = ['#####', '#####']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/de/address/state.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Baden-Württemberg',
          'Bayern',
          'Berlin',
          'Brandenburg',
          'Bremen',
          'Hamburg',
          'Hessen',
          'Mecklenburg-Vorpommern',
          'Niedersachsen',
          'Nordrhein-Westfalen',
          'Rheinland-Pfalz',
          'Saarland',
          'Sachsen',
          'Sachsen-Anhalt',
          'Schleswig-Holstein',
          'Thüringen',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/de/address/state_abbr.js': [
      function(require, module, exports) {
        module['exports'] = [
          'BW',
          'BY',
          'BE',
          'BB',
          'HB',
          'HH',
          'HE',
          'MV',
          'NI',
          'NW',
          'RP',
          'SL',
          'SN',
          'ST',
          'SH',
          'TH',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/de/address/city.js': [
      function(require, module, exports) {
        module['exports'] = [
          '#{city_prefix} #{Name.first_name}#{city_suffix}',
          '#{city_prefix} #{Name.first_name}',
          '#{Name.first_name}#{city_suffix}',
          '#{Name.last_name}#{city_suffix}',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/de/address/street_name.js': [
      function(require, module, exports) {
        module['exports'] = ['#{street_root}']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/de/address/street_address.js': [
      function(require, module, exports) {
        module['exports'] = ['#{street_name} #{building_number}']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/de/address/default_country.js': [
      function(require, module, exports) {
        module['exports'] = ['Deutschland']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/de/address/index.js': [
      function(require, module, exports) {
        var address = {}
        module['exports'] = address
        address.city_prefix = require('./city_prefix')
        address.city_suffix = require('./city_suffix')
        address.country = require('./country')
        address.street_root = require('./street_root')
        address.building_number = require('./building_number')
        address.secondary_address = require('./secondary_address')
        address.postcode = require('./postcode')
        address.state = require('./state')
        address.state_abbr = require('./state_abbr')
        address.city = require('./city')
        address.street_name = require('./street_name')
        address.street_address = require('./street_address')
        address.default_country = require('./default_country')
      },
      {
        './city_prefix':
          '../node_modules/faker/lib/locales/de/address/city_prefix.js',
        './city_suffix':
          '../node_modules/faker/lib/locales/de/address/city_suffix.js',
        './country':
          '../node_modules/faker/lib/locales/de/address/country.js',
        './street_root':
          '../node_modules/faker/lib/locales/de/address/street_root.js',
        './building_number':
          '../node_modules/faker/lib/locales/de/address/building_number.js',
        './secondary_address':
          '../node_modules/faker/lib/locales/de/address/secondary_address.js',
        './postcode':
          '../node_modules/faker/lib/locales/de/address/postcode.js',
        './state': '../node_modules/faker/lib/locales/de/address/state.js',
        './state_abbr':
          '../node_modules/faker/lib/locales/de/address/state_abbr.js',
        './city': '../node_modules/faker/lib/locales/de/address/city.js',
        './street_name':
          '../node_modules/faker/lib/locales/de/address/street_name.js',
        './street_address':
          '../node_modules/faker/lib/locales/de/address/street_address.js',
        './default_country':
          '../node_modules/faker/lib/locales/de/address/default_country.js',
      },
    ],
    '../node_modules/faker/lib/locales/de/company/suffix.js': [
      function(require, module, exports) {
        module['exports'] = [
          'GmbH',
          'AG',
          'Gruppe',
          'KG',
          'GmbH & Co. KG',
          'UG',
          'OHG',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/de/company/legal_form.js': [
      function(require, module, exports) {
        module['exports'] = [
          'GmbH',
          'AG',
          'Gruppe',
          'KG',
          'GmbH & Co. KG',
          'UG',
          'OHG',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/de/company/name.js': [
      function(require, module, exports) {
        module['exports'] = [
          '#{Name.last_name} #{suffix}',
          '#{Name.last_name}-#{Name.last_name}',
          '#{Name.last_name}, #{Name.last_name} und #{Name.last_name}',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/de/company/index.js': [
      function(require, module, exports) {
        var company = {}
        module['exports'] = company
        company.suffix = require('./suffix')
        company.legal_form = require('./legal_form')
        company.name = require('./name')
      },
      {
        './suffix':
          '../node_modules/faker/lib/locales/de/company/suffix.js',
        './legal_form':
          '../node_modules/faker/lib/locales/de/company/legal_form.js',
        './name': '../node_modules/faker/lib/locales/de/company/name.js',
      },
    ],
    '../node_modules/faker/lib/locales/de/internet/free_email.js': [
      function(require, module, exports) {
        module['exports'] = ['gmail.com', 'yahoo.com', 'hotmail.com']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/de/internet/domain_suffix.js': [
      function(require, module, exports) {
        module['exports'] = [
          'com',
          'info',
          'name',
          'net',
          'org',
          'de',
          'ch',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/de/internet/index.js': [
      function(require, module, exports) {
        var internet = {}
        module['exports'] = internet
        internet.free_email = require('./free_email')
        internet.domain_suffix = require('./domain_suffix')
      },
      {
        './free_email':
          '../node_modules/faker/lib/locales/de/internet/free_email.js',
        './domain_suffix':
          '../node_modules/faker/lib/locales/de/internet/domain_suffix.js',
      },
    ],
    '../node_modules/faker/lib/locales/de/lorem/words.js': [
      function(require, module, exports) {
        module['exports'] = [
          'alias',
          'consequatur',
          'aut',
          'perferendis',
          'sit',
          'voluptatem',
          'accusantium',
          'doloremque',
          'aperiam',
          'eaque',
          'ipsa',
          'quae',
          'ab',
          'illo',
          'inventore',
          'veritatis',
          'et',
          'quasi',
          'architecto',
          'beatae',
          'vitae',
          'dicta',
          'sunt',
          'explicabo',
          'aspernatur',
          'aut',
          'odit',
          'aut',
          'fugit',
          'sed',
          'quia',
          'consequuntur',
          'magni',
          'dolores',
          'eos',
          'qui',
          'ratione',
          'voluptatem',
          'sequi',
          'nesciunt',
          'neque',
          'dolorem',
          'ipsum',
          'quia',
          'dolor',
          'sit',
          'amet',
          'consectetur',
          'adipisci',
          'velit',
          'sed',
          'quia',
          'non',
          'numquam',
          'eius',
          'modi',
          'tempora',
          'incidunt',
          'ut',
          'labore',
          'et',
          'dolore',
          'magnam',
          'aliquam',
          'quaerat',
          'voluptatem',
          'ut',
          'enim',
          'ad',
          'minima',
          'veniam',
          'quis',
          'nostrum',
          'exercitationem',
          'ullam',
          'corporis',
          'nemo',
          'enim',
          'ipsam',
          'voluptatem',
          'quia',
          'voluptas',
          'sit',
          'suscipit',
          'laboriosam',
          'nisi',
          'ut',
          'aliquid',
          'ex',
          'ea',
          'commodi',
          'consequatur',
          'quis',
          'autem',
          'vel',
          'eum',
          'iure',
          'reprehenderit',
          'qui',
          'in',
          'ea',
          'voluptate',
          'velit',
          'esse',
          'quam',
          'nihil',
          'molestiae',
          'et',
          'iusto',
          'odio',
          'dignissimos',
          'ducimus',
          'qui',
          'blanditiis',
          'praesentium',
          'laudantium',
          'totam',
          'rem',
          'voluptatum',
          'deleniti',
          'atque',
          'corrupti',
          'quos',
          'dolores',
          'et',
          'quas',
          'molestias',
          'excepturi',
          'sint',
          'occaecati',
          'cupiditate',
          'non',
          'provident',
          'sed',
          'ut',
          'perspiciatis',
          'unde',
          'omnis',
          'iste',
          'natus',
          'error',
          'similique',
          'sunt',
          'in',
          'culpa',
          'qui',
          'officia',
          'deserunt',
          'mollitia',
          'animi',
          'id',
          'est',
          'laborum',
          'et',
          'dolorum',
          'fuga',
          'et',
          'harum',
          'quidem',
          'rerum',
          'facilis',
          'est',
          'et',
          'expedita',
          'distinctio',
          'nam',
          'libero',
          'tempore',
          'cum',
          'soluta',
          'nobis',
          'est',
          'eligendi',
          'optio',
          'cumque',
          'nihil',
          'impedit',
          'quo',
          'porro',
          'quisquam',
          'est',
          'qui',
          'minus',
          'id',
          'quod',
          'maxime',
          'placeat',
          'facere',
          'possimus',
          'omnis',
          'voluptas',
          'assumenda',
          'est',
          'omnis',
          'dolor',
          'repellendus',
          'temporibus',
          'autem',
          'quibusdam',
          'et',
          'aut',
          'consequatur',
          'vel',
          'illum',
          'qui',
          'dolorem',
          'eum',
          'fugiat',
          'quo',
          'voluptas',
          'nulla',
          'pariatur',
          'at',
          'vero',
          'eos',
          'et',
          'accusamus',
          'officiis',
          'debitis',
          'aut',
          'rerum',
          'necessitatibus',
          'saepe',
          'eveniet',
          'ut',
          'et',
          'voluptates',
          'repudiandae',
          'sint',
          'et',
          'molestiae',
          'non',
          'recusandae',
          'itaque',
          'earum',
          'rerum',
          'hic',
          'tenetur',
          'a',
          'sapiente',
          'delectus',
          'ut',
          'aut',
          'reiciendis',
          'voluptatibus',
          'maiores',
          'doloribus',
          'asperiores',
          'repellat',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/de/lorem/index.js': [
      function(require, module, exports) {
        var lorem = {}
        module['exports'] = lorem
        lorem.words = require('./words')
      },
      { './words': '../node_modules/faker/lib/locales/de/lorem/words.js' },
    ],
    '../node_modules/faker/lib/locales/de/name/first_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Aaron',
          'Abdul',
          'Abdullah',
          'Adam',
          'Adrian',
          'Adriano',
          'Ahmad',
          'Ahmed',
          'Ahmet',
          'Alan',
          'Albert',
          'Alessandro',
          'Alessio',
          'Alex',
          'Alexander',
          'Alfred',
          'Ali',
          'Amar',
          'Amir',
          'Amon',
          'Andre',
          'Andreas',
          'Andrew',
          'Angelo',
          'Ansgar',
          'Anthony',
          'Anton',
          'Antonio',
          'Arda',
          'Arian',
          'Armin',
          'Arne',
          'Arno',
          'Arthur',
          'Artur',
          'Arved',
          'Arvid',
          'Ayman',
          'Baran',
          'Baris',
          'Bastian',
          'Batuhan',
          'Bela',
          'Ben',
          'Benedikt',
          'Benjamin',
          'Bennet',
          'Bennett',
          'Benno',
          'Bent',
          'Berat',
          'Berkay',
          'Bernd',
          'Bilal',
          'Bjarne',
          'Björn',
          'Bo',
          'Boris',
          'Brandon',
          'Brian',
          'Bruno',
          'Bryan',
          'Burak',
          'Calvin',
          'Can',
          'Carl',
          'Carlo',
          'Carlos',
          'Caspar',
          'Cedric',
          'Cedrik',
          'Cem',
          'Charlie',
          'Chris',
          'Christian',
          'Christiano',
          'Christoph',
          'Christopher',
          'Claas',
          'Clemens',
          'Colin',
          'Collin',
          'Conner',
          'Connor',
          'Constantin',
          'Corvin',
          'Curt',
          'Damian',
          'Damien',
          'Daniel',
          'Danilo',
          'Danny',
          'Darian',
          'Dario',
          'Darius',
          'Darren',
          'David',
          'Davide',
          'Davin',
          'Dean',
          'Deniz',
          'Dennis',
          'Denny',
          'Devin',
          'Diego',
          'Dion',
          'Domenic',
          'Domenik',
          'Dominic',
          'Dominik',
          'Dorian',
          'Dustin',
          'Dylan',
          'Ecrin',
          'Eddi',
          'Eddy',
          'Edgar',
          'Edwin',
          'Efe',
          'Ege',
          'Elia',
          'Eliah',
          'Elias',
          'Elijah',
          'Emanuel',
          'Emil',
          'Emilian',
          'Emilio',
          'Emir',
          'Emirhan',
          'Emre',
          'Enes',
          'Enno',
          'Enrico',
          'Eren',
          'Eric',
          'Erik',
          'Etienne',
          'Fabian',
          'Fabien',
          'Fabio',
          'Fabrice',
          'Falk',
          'Felix',
          'Ferdinand',
          'Fiete',
          'Filip',
          'Finlay',
          'Finley',
          'Finn',
          'Finnley',
          'Florian',
          'Francesco',
          'Franz',
          'Frederic',
          'Frederick',
          'Frederik',
          'Friedrich',
          'Fritz',
          'Furkan',
          'Fynn',
          'Gabriel',
          'Georg',
          'Gerrit',
          'Gian',
          'Gianluca',
          'Gino',
          'Giuliano',
          'Giuseppe',
          'Gregor',
          'Gustav',
          'Hagen',
          'Hamza',
          'Hannes',
          'Hanno',
          'Hans',
          'Hasan',
          'Hassan',
          'Hauke',
          'Hendrik',
          'Hennes',
          'Henning',
          'Henri',
          'Henrick',
          'Henrik',
          'Henry',
          'Hugo',
          'Hussein',
          'Ian',
          'Ibrahim',
          'Ilias',
          'Ilja',
          'Ilyas',
          'Immanuel',
          'Ismael',
          'Ismail',
          'Ivan',
          'Iven',
          'Jack',
          'Jacob',
          'Jaden',
          'Jakob',
          'Jamal',
          'James',
          'Jamie',
          'Jan',
          'Janek',
          'Janis',
          'Janne',
          'Jannek',
          'Jannes',
          'Jannik',
          'Jannis',
          'Jano',
          'Janosch',
          'Jared',
          'Jari',
          'Jarne',
          'Jarno',
          'Jaron',
          'Jason',
          'Jasper',
          'Jay',
          'Jayden',
          'Jayson',
          'Jean',
          'Jens',
          'Jeremias',
          'Jeremie',
          'Jeremy',
          'Jermaine',
          'Jerome',
          'Jesper',
          'Jesse',
          'Jim',
          'Jimmy',
          'Joe',
          'Joel',
          'Joey',
          'Johann',
          'Johannes',
          'John',
          'Johnny',
          'Jon',
          'Jona',
          'Jonah',
          'Jonas',
          'Jonathan',
          'Jonte',
          'Joost',
          'Jordan',
          'Joris',
          'Joscha',
          'Joschua',
          'Josef',
          'Joseph',
          'Josh',
          'Joshua',
          'Josua',
          'Juan',
          'Julian',
          'Julien',
          'Julius',
          'Juri',
          'Justin',
          'Justus',
          'Kaan',
          'Kai',
          'Kalle',
          'Karim',
          'Karl',
          'Karlo',
          'Kay',
          'Keanu',
          'Kenan',
          'Kenny',
          'Keno',
          'Kerem',
          'Kerim',
          'Kevin',
          'Kian',
          'Kilian',
          'Kim',
          'Kimi',
          'Kjell',
          'Klaas',
          'Klemens',
          'Konrad',
          'Konstantin',
          'Koray',
          'Korbinian',
          'Kurt',
          'Lars',
          'Lasse',
          'Laurence',
          'Laurens',
          'Laurenz',
          'Laurin',
          'Lean',
          'Leander',
          'Leandro',
          'Leif',
          'Len',
          'Lenn',
          'Lennard',
          'Lennart',
          'Lennert',
          'Lennie',
          'Lennox',
          'Lenny',
          'Leo',
          'Leon',
          'Leonard',
          'Leonardo',
          'Leonhard',
          'Leonidas',
          'Leopold',
          'Leroy',
          'Levent',
          'Levi',
          'Levin',
          'Lewin',
          'Lewis',
          'Liam',
          'Lian',
          'Lias',
          'Lino',
          'Linus',
          'Lio',
          'Lion',
          'Lionel',
          'Logan',
          'Lorenz',
          'Lorenzo',
          'Loris',
          'Louis',
          'Luan',
          'Luc',
          'Luca',
          'Lucas',
          'Lucian',
          'Lucien',
          'Ludwig',
          'Luis',
          'Luiz',
          'Luk',
          'Luka',
          'Lukas',
          'Luke',
          'Lutz',
          'Maddox',
          'Mads',
          'Magnus',
          'Maik',
          'Maksim',
          'Malik',
          'Malte',
          'Manuel',
          'Marc',
          'Marcel',
          'Marco',
          'Marcus',
          'Marek',
          'Marian',
          'Mario',
          'Marius',
          'Mark',
          'Marko',
          'Markus',
          'Marlo',
          'Marlon',
          'Marten',
          'Martin',
          'Marvin',
          'Marwin',
          'Mateo',
          'Mathis',
          'Matis',
          'Mats',
          'Matteo',
          'Mattes',
          'Matthias',
          'Matthis',
          'Matti',
          'Mattis',
          'Maurice',
          'Max',
          'Maxim',
          'Maximilian',
          'Mehmet',
          'Meik',
          'Melvin',
          'Merlin',
          'Mert',
          'Michael',
          'Michel',
          'Mick',
          'Miguel',
          'Mika',
          'Mikail',
          'Mike',
          'Milan',
          'Milo',
          'Mio',
          'Mirac',
          'Mirco',
          'Mirko',
          'Mohamed',
          'Mohammad',
          'Mohammed',
          'Moritz',
          'Morten',
          'Muhammed',
          'Murat',
          'Mustafa',
          'Nathan',
          'Nathanael',
          'Nelson',
          'Neo',
          'Nevio',
          'Nick',
          'Niclas',
          'Nico',
          'Nicolai',
          'Nicolas',
          'Niels',
          'Nikita',
          'Niklas',
          'Niko',
          'Nikolai',
          'Nikolas',
          'Nils',
          'Nino',
          'Noah',
          'Noel',
          'Norman',
          'Odin',
          'Oke',
          'Ole',
          'Oliver',
          'Omar',
          'Onur',
          'Oscar',
          'Oskar',
          'Pascal',
          'Patrice',
          'Patrick',
          'Paul',
          'Peer',
          'Pepe',
          'Peter',
          'Phil',
          'Philip',
          'Philipp',
          'Pierre',
          'Piet',
          'Pit',
          'Pius',
          'Quentin',
          'Quirin',
          'Rafael',
          'Raik',
          'Ramon',
          'Raphael',
          'Rasmus',
          'Raul',
          'Rayan',
          'René',
          'Ricardo',
          'Riccardo',
          'Richard',
          'Rick',
          'Rico',
          'Robert',
          'Robin',
          'Rocco',
          'Roman',
          'Romeo',
          'Ron',
          'Ruben',
          'Ryan',
          'Said',
          'Salih',
          'Sam',
          'Sami',
          'Sammy',
          'Samuel',
          'Sandro',
          'Santino',
          'Sascha',
          'Sean',
          'Sebastian',
          'Selim',
          'Semih',
          'Shawn',
          'Silas',
          'Simeon',
          'Simon',
          'Sinan',
          'Sky',
          'Stefan',
          'Steffen',
          'Stephan',
          'Steve',
          'Steven',
          'Sven',
          'Sönke',
          'Sören',
          'Taha',
          'Tamino',
          'Tammo',
          'Tarik',
          'Tayler',
          'Taylor',
          'Teo',
          'Theo',
          'Theodor',
          'Thies',
          'Thilo',
          'Thomas',
          'Thorben',
          'Thore',
          'Thorge',
          'Tiago',
          'Til',
          'Till',
          'Tillmann',
          'Tim',
          'Timm',
          'Timo',
          'Timon',
          'Timothy',
          'Tino',
          'Titus',
          'Tizian',
          'Tjark',
          'Tobias',
          'Tom',
          'Tommy',
          'Toni',
          'Tony',
          'Torben',
          'Tore',
          'Tristan',
          'Tyler',
          'Tyron',
          'Umut',
          'Valentin',
          'Valentino',
          'Veit',
          'Victor',
          'Viktor',
          'Vin',
          'Vincent',
          'Vito',
          'Vitus',
          'Wilhelm',
          'Willi',
          'William',
          'Willy',
          'Xaver',
          'Yannic',
          'Yannick',
          'Yannik',
          'Yannis',
          'Yasin',
          'Youssef',
          'Yunus',
          'Yusuf',
          'Yven',
          'Yves',
          'Ömer',
          'Aaliyah',
          'Abby',
          'Abigail',
          'Ada',
          'Adelina',
          'Adriana',
          'Aileen',
          'Aimee',
          'Alana',
          'Alea',
          'Alena',
          'Alessa',
          'Alessia',
          'Alexa',
          'Alexandra',
          'Alexia',
          'Alexis',
          'Aleyna',
          'Alia',
          'Alica',
          'Alice',
          'Alicia',
          'Alina',
          'Alisa',
          'Alisha',
          'Alissa',
          'Aliya',
          'Aliyah',
          'Allegra',
          'Alma',
          'Alyssa',
          'Amalia',
          'Amanda',
          'Amelia',
          'Amelie',
          'Amina',
          'Amira',
          'Amy',
          'Ana',
          'Anabel',
          'Anastasia',
          'Andrea',
          'Angela',
          'Angelina',
          'Angelique',
          'Anja',
          'Ann',
          'Anna',
          'Annabel',
          'Annabell',
          'Annabelle',
          'Annalena',
          'Anne',
          'Anneke',
          'Annelie',
          'Annemarie',
          'Anni',
          'Annie',
          'Annika',
          'Anny',
          'Anouk',
          'Antonia',
          'Arda',
          'Ariana',
          'Ariane',
          'Arwen',
          'Ashley',
          'Asya',
          'Aurelia',
          'Aurora',
          'Ava',
          'Ayleen',
          'Aylin',
          'Ayse',
          'Azra',
          'Betty',
          'Bianca',
          'Bianka',
          'Caitlin',
          'Cara',
          'Carina',
          'Carla',
          'Carlotta',
          'Carmen',
          'Carolin',
          'Carolina',
          'Caroline',
          'Cassandra',
          'Catharina',
          'Catrin',
          'Cecile',
          'Cecilia',
          'Celia',
          'Celina',
          'Celine',
          'Ceyda',
          'Ceylin',
          'Chantal',
          'Charleen',
          'Charlotta',
          'Charlotte',
          'Chayenne',
          'Cheyenne',
          'Chiara',
          'Christin',
          'Christina',
          'Cindy',
          'Claire',
          'Clara',
          'Clarissa',
          'Colleen',
          'Collien',
          'Cora',
          'Corinna',
          'Cosima',
          'Dana',
          'Daniela',
          'Daria',
          'Darleen',
          'Defne',
          'Delia',
          'Denise',
          'Diana',
          'Dilara',
          'Dina',
          'Dorothea',
          'Ecrin',
          'Eda',
          'Eileen',
          'Ela',
          'Elaine',
          'Elanur',
          'Elea',
          'Elena',
          'Eleni',
          'Eleonora',
          'Eliana',
          'Elif',
          'Elina',
          'Elisa',
          'Elisabeth',
          'Ella',
          'Ellen',
          'Elli',
          'Elly',
          'Elsa',
          'Emelie',
          'Emely',
          'Emilia',
          'Emilie',
          'Emily',
          'Emma',
          'Emmely',
          'Emmi',
          'Emmy',
          'Enie',
          'Enna',
          'Enya',
          'Esma',
          'Estelle',
          'Esther',
          'Eva',
          'Evelin',
          'Evelina',
          'Eveline',
          'Evelyn',
          'Fabienne',
          'Fatima',
          'Fatma',
          'Felicia',
          'Felicitas',
          'Felina',
          'Femke',
          'Fenja',
          'Fine',
          'Finia',
          'Finja',
          'Finnja',
          'Fiona',
          'Flora',
          'Florentine',
          'Francesca',
          'Franka',
          'Franziska',
          'Frederike',
          'Freya',
          'Frida',
          'Frieda',
          'Friederike',
          'Giada',
          'Gina',
          'Giulia',
          'Giuliana',
          'Greta',
          'Hailey',
          'Hana',
          'Hanna',
          'Hannah',
          'Heidi',
          'Helen',
          'Helena',
          'Helene',
          'Helin',
          'Henriette',
          'Henrike',
          'Hermine',
          'Ida',
          'Ilayda',
          'Imke',
          'Ina',
          'Ines',
          'Inga',
          'Inka',
          'Irem',
          'Isa',
          'Isabel',
          'Isabell',
          'Isabella',
          'Isabelle',
          'Ivonne',
          'Jacqueline',
          'Jamie',
          'Jamila',
          'Jana',
          'Jane',
          'Janin',
          'Janina',
          'Janine',
          'Janna',
          'Janne',
          'Jara',
          'Jasmin',
          'Jasmina',
          'Jasmine',
          'Jella',
          'Jenna',
          'Jennifer',
          'Jenny',
          'Jessica',
          'Jessy',
          'Jette',
          'Jil',
          'Jill',
          'Joana',
          'Joanna',
          'Joelina',
          'Joeline',
          'Joelle',
          'Johanna',
          'Joleen',
          'Jolie',
          'Jolien',
          'Jolin',
          'Jolina',
          'Joline',
          'Jona',
          'Jonah',
          'Jonna',
          'Josefin',
          'Josefine',
          'Josephin',
          'Josephine',
          'Josie',
          'Josy',
          'Joy',
          'Joyce',
          'Judith',
          'Judy',
          'Jule',
          'Julia',
          'Juliana',
          'Juliane',
          'Julie',
          'Julienne',
          'Julika',
          'Julina',
          'Juna',
          'Justine',
          'Kaja',
          'Karina',
          'Karla',
          'Karlotta',
          'Karolina',
          'Karoline',
          'Kassandra',
          'Katarina',
          'Katharina',
          'Kathrin',
          'Katja',
          'Katrin',
          'Kaya',
          'Kayra',
          'Kiana',
          'Kiara',
          'Kim',
          'Kimberley',
          'Kimberly',
          'Kira',
          'Klara',
          'Korinna',
          'Kristin',
          'Kyra',
          'Laila',
          'Lana',
          'Lara',
          'Larissa',
          'Laura',
          'Laureen',
          'Lavinia',
          'Lea',
          'Leah',
          'Leana',
          'Leandra',
          'Leann',
          'Lee',
          'Leila',
          'Lena',
          'Lene',
          'Leni',
          'Lenia',
          'Lenja',
          'Lenya',
          'Leona',
          'Leoni',
          'Leonie',
          'Leonora',
          'Leticia',
          'Letizia',
          'Levke',
          'Leyla',
          'Lia',
          'Liah',
          'Liana',
          'Lili',
          'Lilia',
          'Lilian',
          'Liliana',
          'Lilith',
          'Lilli',
          'Lillian',
          'Lilly',
          'Lily',
          'Lina',
          'Linda',
          'Lindsay',
          'Line',
          'Linn',
          'Linnea',
          'Lisa',
          'Lisann',
          'Lisanne',
          'Liv',
          'Livia',
          'Liz',
          'Lola',
          'Loreen',
          'Lorena',
          'Lotta',
          'Lotte',
          'Louisa',
          'Louise',
          'Luana',
          'Luca',
          'Lucia',
          'Lucie',
          'Lucienne',
          'Lucy',
          'Luisa',
          'Luise',
          'Luka',
          'Luna',
          'Luzie',
          'Lya',
          'Lydia',
          'Lyn',
          'Lynn',
          'Madeleine',
          'Madita',
          'Madleen',
          'Madlen',
          'Magdalena',
          'Maike',
          'Mailin',
          'Maira',
          'Maja',
          'Malena',
          'Malia',
          'Malin',
          'Malina',
          'Mandy',
          'Mara',
          'Marah',
          'Mareike',
          'Maren',
          'Maria',
          'Mariam',
          'Marie',
          'Marieke',
          'Mariella',
          'Marika',
          'Marina',
          'Marisa',
          'Marissa',
          'Marit',
          'Marla',
          'Marleen',
          'Marlen',
          'Marlena',
          'Marlene',
          'Marta',
          'Martha',
          'Mary',
          'Maryam',
          'Mathilda',
          'Mathilde',
          'Matilda',
          'Maxi',
          'Maxima',
          'Maxine',
          'Maya',
          'Mayra',
          'Medina',
          'Medine',
          'Meike',
          'Melanie',
          'Melek',
          'Melike',
          'Melina',
          'Melinda',
          'Melis',
          'Melisa',
          'Melissa',
          'Merle',
          'Merve',
          'Meryem',
          'Mette',
          'Mia',
          'Michaela',
          'Michelle',
          'Mieke',
          'Mila',
          'Milana',
          'Milena',
          'Milla',
          'Mina',
          'Mira',
          'Miray',
          'Miriam',
          'Mirja',
          'Mona',
          'Monique',
          'Nadine',
          'Nadja',
          'Naemi',
          'Nancy',
          'Naomi',
          'Natalia',
          'Natalie',
          'Nathalie',
          'Neele',
          'Nela',
          'Nele',
          'Nelli',
          'Nelly',
          'Nia',
          'Nicole',
          'Nika',
          'Nike',
          'Nikita',
          'Nila',
          'Nina',
          'Nisa',
          'Noemi',
          'Nora',
          'Olivia',
          'Patricia',
          'Patrizia',
          'Paula',
          'Paulina',
          'Pauline',
          'Penelope',
          'Philine',
          'Phoebe',
          'Pia',
          'Rahel',
          'Rania',
          'Rebecca',
          'Rebekka',
          'Riana',
          'Rieke',
          'Rike',
          'Romina',
          'Romy',
          'Ronja',
          'Rosa',
          'Rosalie',
          'Ruby',
          'Sabrina',
          'Sahra',
          'Sally',
          'Salome',
          'Samantha',
          'Samia',
          'Samira',
          'Sandra',
          'Sandy',
          'Sanja',
          'Saphira',
          'Sara',
          'Sarah',
          'Saskia',
          'Selin',
          'Selina',
          'Selma',
          'Sena',
          'Sidney',
          'Sienna',
          'Silja',
          'Sina',
          'Sinja',
          'Smilla',
          'Sofia',
          'Sofie',
          'Sonja',
          'Sophia',
          'Sophie',
          'Soraya',
          'Stefanie',
          'Stella',
          'Stephanie',
          'Stina',
          'Sude',
          'Summer',
          'Susanne',
          'Svea',
          'Svenja',
          'Sydney',
          'Tabea',
          'Talea',
          'Talia',
          'Tamara',
          'Tamia',
          'Tamina',
          'Tanja',
          'Tara',
          'Tarja',
          'Teresa',
          'Tessa',
          'Thalea',
          'Thalia',
          'Thea',
          'Theresa',
          'Tia',
          'Tina',
          'Tomke',
          'Tuana',
          'Valentina',
          'Valeria',
          'Valerie',
          'Vanessa',
          'Vera',
          'Veronika',
          'Victoria',
          'Viktoria',
          'Viola',
          'Vivian',
          'Vivien',
          'Vivienne',
          'Wibke',
          'Wiebke',
          'Xenia',
          'Yara',
          'Yaren',
          'Yasmin',
          'Ylvi',
          'Ylvie',
          'Yvonne',
          'Zara',
          'Zehra',
          'Zeynep',
          'Zoe',
          'Zoey',
          'Zoé',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/de/name/last_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Abel',
          'Abicht',
          'Abraham',
          'Abramovic',
          'Abt',
          'Achilles',
          'Achkinadze',
          'Ackermann',
          'Adam',
          'Adams',
          'Ade',
          'Agostini',
          'Ahlke',
          'Ahrenberg',
          'Ahrens',
          'Aigner',
          'Albert',
          'Albrecht',
          'Alexa',
          'Alexander',
          'Alizadeh',
          'Allgeyer',
          'Amann',
          'Amberg',
          'Anding',
          'Anggreny',
          'Apitz',
          'Arendt',
          'Arens',
          'Arndt',
          'Aryee',
          'Aschenbroich',
          'Assmus',
          'Astafei',
          'Auer',
          'Axmann',
          'Baarck',
          'Bachmann',
          'Badane',
          'Bader',
          'Baganz',
          'Bahl',
          'Bak',
          'Balcer',
          'Balck',
          'Balkow',
          'Balnuweit',
          'Balzer',
          'Banse',
          'Barr',
          'Bartels',
          'Barth',
          'Barylla',
          'Baseda',
          'Battke',
          'Bauer',
          'Bauermeister',
          'Baumann',
          'Baumeister',
          'Bauschinger',
          'Bauschke',
          'Bayer',
          'Beavogui',
          'Beck',
          'Beckel',
          'Becker',
          'Beckmann',
          'Bedewitz',
          'Beele',
          'Beer',
          'Beggerow',
          'Beh',
          'Behr',
          'Behrenbruch',
          'Belz',
          'Bender',
          'Benecke',
          'Benner',
          'Benninger',
          'Benzing',
          'Berends',
          'Berger',
          'Berner',
          'Berning',
          'Bertenbreiter',
          'Best',
          'Bethke',
          'Betz',
          'Beushausen',
          'Beutelspacher',
          'Beyer',
          'Biba',
          'Bichler',
          'Bickel',
          'Biedermann',
          'Bieler',
          'Bielert',
          'Bienasch',
          'Bienias',
          'Biesenbach',
          'Bigdeli',
          'Birkemeyer',
          'Bittner',
          'Blank',
          'Blaschek',
          'Blassneck',
          'Bloch',
          'Blochwitz',
          'Blockhaus',
          'Blum',
          'Blume',
          'Bock',
          'Bode',
          'Bogdashin',
          'Bogenrieder',
          'Bohge',
          'Bolm',
          'Borgschulze',
          'Bork',
          'Bormann',
          'Bornscheuer',
          'Borrmann',
          'Borsch',
          'Boruschewski',
          'Bos',
          'Bosler',
          'Bourrouag',
          'Bouschen',
          'Boxhammer',
          'Boyde',
          'Bozsik',
          'Brand',
          'Brandenburg',
          'Brandis',
          'Brandt',
          'Brauer',
          'Braun',
          'Brehmer',
          'Breitenstein',
          'Bremer',
          'Bremser',
          'Brenner',
          'Brettschneider',
          'Breu',
          'Breuer',
          'Briesenick',
          'Bringmann',
          'Brinkmann',
          'Brix',
          'Broening',
          'Brosch',
          'Bruckmann',
          'Bruder',
          'Bruhns',
          'Brunner',
          'Bruns',
          'Bräutigam',
          'Brömme',
          'Brüggmann',
          'Buchholz',
          'Buchrucker',
          'Buder',
          'Bultmann',
          'Bunjes',
          'Burger',
          'Burghagen',
          'Burkhard',
          'Burkhardt',
          'Burmeister',
          'Busch',
          'Buschbaum',
          'Busemann',
          'Buss',
          'Busse',
          'Bussmann',
          'Byrd',
          'Bäcker',
          'Böhm',
          'Bönisch',
          'Börgeling',
          'Börner',
          'Böttner',
          'Büchele',
          'Bühler',
          'Büker',
          'Büngener',
          'Bürger',
          'Bürklein',
          'Büscher',
          'Büttner',
          'Camara',
          'Carlowitz',
          'Carlsohn',
          'Caspari',
          'Caspers',
          'Chapron',
          'Christ',
          'Cierpinski',
          'Clarius',
          'Cleem',
          'Cleve',
          'Co',
          'Conrad',
          'Cordes',
          'Cornelsen',
          'Cors',
          'Cotthardt',
          'Crews',
          'Cronjäger',
          'Crosskofp',
          'Da',
          'Dahm',
          'Dahmen',
          'Daimer',
          'Damaske',
          'Danneberg',
          'Danner',
          'Daub',
          'Daubner',
          'Daudrich',
          'Dauer',
          'Daum',
          'Dauth',
          'Dautzenberg',
          'De',
          'Decker',
          'Deckert',
          'Deerberg',
          'Dehmel',
          'Deja',
          'Delonge',
          'Demut',
          'Dengler',
          'Denner',
          'Denzinger',
          'Derr',
          'Dertmann',
          'Dethloff',
          'Deuschle',
          'Dieckmann',
          'Diedrich',
          'Diekmann',
          'Dienel',
          'Dies',
          'Dietrich',
          'Dietz',
          'Dietzsch',
          'Diezel',
          'Dilla',
          'Dingelstedt',
          'Dippl',
          'Dittmann',
          'Dittmar',
          'Dittmer',
          'Dix',
          'Dobbrunz',
          'Dobler',
          'Dohring',
          'Dolch',
          'Dold',
          'Dombrowski',
          'Donie',
          'Doskoczynski',
          'Dragu',
          'Drechsler',
          'Drees',
          'Dreher',
          'Dreier',
          'Dreissigacker',
          'Dressler',
          'Drews',
          'Duma',
          'Dutkiewicz',
          'Dyett',
          'Dylus',
          'Dächert',
          'Döbel',
          'Döring',
          'Dörner',
          'Dörre',
          'Dück',
          'Eberhard',
          'Eberhardt',
          'Ecker',
          'Eckhardt',
          'Edorh',
          'Effler',
          'Eggenmueller',
          'Ehm',
          'Ehmann',
          'Ehrig',
          'Eich',
          'Eichmann',
          'Eifert',
          'Einert',
          'Eisenlauer',
          'Ekpo',
          'Elbe',
          'Eleyth',
          'Elss',
          'Emert',
          'Emmelmann',
          'Ender',
          'Engel',
          'Engelen',
          'Engelmann',
          'Eplinius',
          'Erdmann',
          'Erhardt',
          'Erlei',
          'Erm',
          'Ernst',
          'Ertl',
          'Erwes',
          'Esenwein',
          'Esser',
          'Evers',
          'Everts',
          'Ewald',
          'Fahner',
          'Faller',
          'Falter',
          'Farber',
          'Fassbender',
          'Faulhaber',
          'Fehrig',
          'Feld',
          'Felke',
          'Feller',
          'Fenner',
          'Fenske',
          'Feuerbach',
          'Fietz',
          'Figl',
          'Figura',
          'Filipowski',
          'Filsinger',
          'Fincke',
          'Fink',
          'Finke',
          'Fischer',
          'Fitschen',
          'Fleischer',
          'Fleischmann',
          'Floder',
          'Florczak',
          'Flore',
          'Flottmann',
          'Forkel',
          'Forst',
          'Frahmeke',
          'Frank',
          'Franke',
          'Franta',
          'Frantz',
          'Franz',
          'Franzis',
          'Franzmann',
          'Frauen',
          'Frauendorf',
          'Freigang',
          'Freimann',
          'Freimuth',
          'Freisen',
          'Frenzel',
          'Frey',
          'Fricke',
          'Fried',
          'Friedek',
          'Friedenberg',
          'Friedmann',
          'Friedrich',
          'Friess',
          'Frisch',
          'Frohn',
          'Frosch',
          'Fuchs',
          'Fuhlbrügge',
          'Fusenig',
          'Fust',
          'Förster',
          'Gaba',
          'Gabius',
          'Gabler',
          'Gadschiew',
          'Gakstädter',
          'Galander',
          'Gamlin',
          'Gamper',
          'Gangnus',
          'Ganzmann',
          'Garatva',
          'Gast',
          'Gastel',
          'Gatzka',
          'Gauder',
          'Gebhardt',
          'Geese',
          'Gehre',
          'Gehrig',
          'Gehring',
          'Gehrke',
          'Geiger',
          'Geisler',
          'Geissler',
          'Gelling',
          'Gens',
          'Gerbennow',
          'Gerdel',
          'Gerhardt',
          'Gerschler',
          'Gerson',
          'Gesell',
          'Geyer',
          'Ghirmai',
          'Ghosh',
          'Giehl',
          'Gierisch',
          'Giesa',
          'Giesche',
          'Gilde',
          'Glatting',
          'Goebel',
          'Goedicke',
          'Goldbeck',
          'Goldfuss',
          'Goldkamp',
          'Goldkühle',
          'Goller',
          'Golling',
          'Gollnow',
          'Golomski',
          'Gombert',
          'Gotthardt',
          'Gottschalk',
          'Gotz',
          'Goy',
          'Gradzki',
          'Graf',
          'Grams',
          'Grasse',
          'Gratzky',
          'Grau',
          'Greb',
          'Green',
          'Greger',
          'Greithanner',
          'Greschner',
          'Griem',
          'Griese',
          'Grimm',
          'Gromisch',
          'Gross',
          'Grosser',
          'Grossheim',
          'Grosskopf',
          'Grothaus',
          'Grothkopp',
          'Grotke',
          'Grube',
          'Gruber',
          'Grundmann',
          'Gruning',
          'Gruszecki',
          'Gröss',
          'Grötzinger',
          'Grün',
          'Grüner',
          'Gummelt',
          'Gunkel',
          'Gunther',
          'Gutjahr',
          'Gutowicz',
          'Gutschank',
          'Göbel',
          'Göckeritz',
          'Göhler',
          'Görlich',
          'Görmer',
          'Götz',
          'Götzelmann',
          'Güldemeister',
          'Günther',
          'Günz',
          'Gürbig',
          'Haack',
          'Haaf',
          'Habel',
          'Hache',
          'Hackbusch',
          'Hackelbusch',
          'Hadfield',
          'Hadwich',
          'Haferkamp',
          'Hahn',
          'Hajek',
          'Hallmann',
          'Hamann',
          'Hanenberger',
          'Hannecker',
          'Hanniske',
          'Hansen',
          'Hardy',
          'Hargasser',
          'Harms',
          'Harnapp',
          'Harter',
          'Harting',
          'Hartlieb',
          'Hartmann',
          'Hartwig',
          'Hartz',
          'Haschke',
          'Hasler',
          'Hasse',
          'Hassfeld',
          'Haug',
          'Hauke',
          'Haupt',
          'Haverney',
          'Heberstreit',
          'Hechler',
          'Hecht',
          'Heck',
          'Hedermann',
          'Hehl',
          'Heidelmann',
          'Heidler',
          'Heinemann',
          'Heinig',
          'Heinke',
          'Heinrich',
          'Heinze',
          'Heiser',
          'Heist',
          'Hellmann',
          'Helm',
          'Helmke',
          'Helpling',
          'Hengmith',
          'Henkel',
          'Hennes',
          'Henry',
          'Hense',
          'Hensel',
          'Hentel',
          'Hentschel',
          'Hentschke',
          'Hepperle',
          'Herberger',
          'Herbrand',
          'Hering',
          'Hermann',
          'Hermecke',
          'Herms',
          'Herold',
          'Herrmann',
          'Herschmann',
          'Hertel',
          'Herweg',
          'Herwig',
          'Herzenberg',
          'Hess',
          'Hesse',
          'Hessek',
          'Hessler',
          'Hetzler',
          'Heuck',
          'Heydemüller',
          'Hiebl',
          'Hildebrand',
          'Hildenbrand',
          'Hilgendorf',
          'Hillard',
          'Hiller',
          'Hingsen',
          'Hingst',
          'Hinrichs',
          'Hirsch',
          'Hirschberg',
          'Hirt',
          'Hodea',
          'Hoffman',
          'Hoffmann',
          'Hofmann',
          'Hohenberger',
          'Hohl',
          'Hohn',
          'Hohnheiser',
          'Hold',
          'Holdt',
          'Holinski',
          'Holl',
          'Holtfreter',
          'Holz',
          'Holzdeppe',
          'Holzner',
          'Hommel',
          'Honz',
          'Hooss',
          'Hoppe',
          'Horak',
          'Horn',
          'Horna',
          'Hornung',
          'Hort',
          'Howard',
          'Huber',
          'Huckestein',
          'Hudak',
          'Huebel',
          'Hugo',
          'Huhn',
          'Hujo',
          'Huke',
          'Huls',
          'Humbert',
          'Huneke',
          'Huth',
          'Häber',
          'Häfner',
          'Höcke',
          'Höft',
          'Höhne',
          'Hönig',
          'Hördt',
          'Hübenbecker',
          'Hübl',
          'Hübner',
          'Hügel',
          'Hüttcher',
          'Hütter',
          'Ibe',
          'Ihly',
          'Illing',
          'Isak',
          'Isekenmeier',
          'Itt',
          'Jacob',
          'Jacobs',
          'Jagusch',
          'Jahn',
          'Jahnke',
          'Jakobs',
          'Jakubczyk',
          'Jambor',
          'Jamrozy',
          'Jander',
          'Janich',
          'Janke',
          'Jansen',
          'Jarets',
          'Jaros',
          'Jasinski',
          'Jasper',
          'Jegorov',
          'Jellinghaus',
          'Jeorga',
          'Jerschabek',
          'Jess',
          'John',
          'Jonas',
          'Jossa',
          'Jucken',
          'Jung',
          'Jungbluth',
          'Jungton',
          'Just',
          'Jürgens',
          'Kaczmarek',
          'Kaesmacher',
          'Kahl',
          'Kahlert',
          'Kahles',
          'Kahlmeyer',
          'Kaiser',
          'Kalinowski',
          'Kallabis',
          'Kallensee',
          'Kampf',
          'Kampschulte',
          'Kappe',
          'Kappler',
          'Karhoff',
          'Karrass',
          'Karst',
          'Karsten',
          'Karus',
          'Kass',
          'Kasten',
          'Kastner',
          'Katzinski',
          'Kaufmann',
          'Kaul',
          'Kausemann',
          'Kawohl',
          'Kazmarek',
          'Kedzierski',
          'Keil',
          'Keiner',
          'Keller',
          'Kelm',
          'Kempe',
          'Kemper',
          'Kempter',
          'Kerl',
          'Kern',
          'Kesselring',
          'Kesselschläger',
          'Kette',
          'Kettenis',
          'Keutel',
          'Kick',
          'Kiessling',
          'Kinadeter',
          'Kinzel',
          'Kinzy',
          'Kirch',
          'Kirst',
          'Kisabaka',
          'Klaas',
          'Klabuhn',
          'Klapper',
          'Klauder',
          'Klaus',
          'Kleeberg',
          'Kleiber',
          'Klein',
          'Kleinert',
          'Kleininger',
          'Kleinmann',
          'Kleinsteuber',
          'Kleiss',
          'Klemme',
          'Klimczak',
          'Klinger',
          'Klink',
          'Klopsch',
          'Klose',
          'Kloss',
          'Kluge',
          'Kluwe',
          'Knabe',
          'Kneifel',
          'Knetsch',
          'Knies',
          'Knippel',
          'Knobel',
          'Knoblich',
          'Knoll',
          'Knorr',
          'Knorscheidt',
          'Knut',
          'Kobs',
          'Koch',
          'Kochan',
          'Kock',
          'Koczulla',
          'Koderisch',
          'Koehl',
          'Koehler',
          'Koenig',
          'Koester',
          'Kofferschlager',
          'Koha',
          'Kohle',
          'Kohlmann',
          'Kohnle',
          'Kohrt',
          'Koj',
          'Kolb',
          'Koleiski',
          'Kolokas',
          'Komoll',
          'Konieczny',
          'Konig',
          'Konow',
          'Konya',
          'Koob',
          'Kopf',
          'Kosenkow',
          'Koster',
          'Koszewski',
          'Koubaa',
          'Kovacs',
          'Kowalick',
          'Kowalinski',
          'Kozakiewicz',
          'Krabbe',
          'Kraft',
          'Kral',
          'Kramer',
          'Krauel',
          'Kraus',
          'Krause',
          'Krauspe',
          'Kreb',
          'Krebs',
          'Kreissig',
          'Kresse',
          'Kreutz',
          'Krieger',
          'Krippner',
          'Krodinger',
          'Krohn',
          'Krol',
          'Kron',
          'Krueger',
          'Krug',
          'Kruger',
          'Krull',
          'Kruschinski',
          'Krämer',
          'Kröckert',
          'Kröger',
          'Krüger',
          'Kubera',
          'Kufahl',
          'Kuhlee',
          'Kuhnen',
          'Kulimann',
          'Kulma',
          'Kumbernuss',
          'Kummle',
          'Kunz',
          'Kupfer',
          'Kupprion',
          'Kuprion',
          'Kurnicki',
          'Kurrat',
          'Kurschilgen',
          'Kuschewitz',
          'Kuschmann',
          'Kuske',
          'Kustermann',
          'Kutscherauer',
          'Kutzner',
          'Kwadwo',
          'Kähler',
          'Käther',
          'Köhler',
          'Köhrbrück',
          'Köhre',
          'Kölotzei',
          'König',
          'Köpernick',
          'Köseoglu',
          'Kúhn',
          'Kúhnert',
          'Kühn',
          'Kühnel',
          'Kühnemund',
          'Kühnert',
          'Kühnke',
          'Küsters',
          'Küter',
          'Laack',
          'Lack',
          'Ladewig',
          'Lakomy',
          'Lammert',
          'Lamos',
          'Landmann',
          'Lang',
          'Lange',
          'Langfeld',
          'Langhirt',
          'Lanig',
          'Lauckner',
          'Lauinger',
          'Laurén',
          'Lausecker',
          'Laux',
          'Laws',
          'Lax',
          'Leberer',
          'Lehmann',
          'Lehner',
          'Leibold',
          'Leide',
          'Leimbach',
          'Leipold',
          'Leist',
          'Leiter',
          'Leiteritz',
          'Leitheim',
          'Leiwesmeier',
          'Lenfers',
          'Lenk',
          'Lenz',
          'Lenzen',
          'Leo',
          'Lepthin',
          'Lesch',
          'Leschnik',
          'Letzelter',
          'Lewin',
          'Lewke',
          'Leyckes',
          'Lg',
          'Lichtenfeld',
          'Lichtenhagen',
          'Lichtl',
          'Liebach',
          'Liebe',
          'Liebich',
          'Liebold',
          'Lieder',
          'Lienshöft',
          'Linden',
          'Lindenberg',
          'Lindenmayer',
          'Lindner',
          'Linke',
          'Linnenbaum',
          'Lippe',
          'Lipske',
          'Lipus',
          'Lischka',
          'Lobinger',
          'Logsch',
          'Lohmann',
          'Lohre',
          'Lohse',
          'Lokar',
          'Loogen',
          'Lorenz',
          'Losch',
          'Loska',
          'Lott',
          'Loy',
          'Lubina',
          'Ludolf',
          'Lufft',
          'Lukoschek',
          'Lutje',
          'Lutz',
          'Löser',
          'Löwa',
          'Lübke',
          'Maak',
          'Maczey',
          'Madetzky',
          'Madubuko',
          'Mai',
          'Maier',
          'Maisch',
          'Malek',
          'Malkus',
          'Mallmann',
          'Malucha',
          'Manns',
          'Manz',
          'Marahrens',
          'Marchewski',
          'Margis',
          'Markowski',
          'Marl',
          'Marner',
          'Marquart',
          'Marschek',
          'Martel',
          'Marten',
          'Martin',
          'Marx',
          'Marxen',
          'Mathes',
          'Mathies',
          'Mathiszik',
          'Matschke',
          'Mattern',
          'Matthes',
          'Matula',
          'Mau',
          'Maurer',
          'Mauroff',
          'May',
          'Maybach',
          'Mayer',
          'Mebold',
          'Mehl',
          'Mehlhorn',
          'Mehlorn',
          'Meier',
          'Meisch',
          'Meissner',
          'Meloni',
          'Melzer',
          'Menga',
          'Menne',
          'Mensah',
          'Mensing',
          'Merkel',
          'Merseburg',
          'Mertens',
          'Mesloh',
          'Metzger',
          'Metzner',
          'Mewes',
          'Meyer',
          'Michallek',
          'Michel',
          'Mielke',
          'Mikitenko',
          'Milde',
          'Minah',
          'Mintzlaff',
          'Mockenhaupt',
          'Moede',
          'Moedl',
          'Moeller',
          'Moguenara',
          'Mohr',
          'Mohrhard',
          'Molitor',
          'Moll',
          'Moller',
          'Molzan',
          'Montag',
          'Moormann',
          'Mordhorst',
          'Morgenstern',
          'Morhelfer',
          'Moritz',
          'Moser',
          'Motchebon',
          'Motzenbbäcker',
          'Mrugalla',
          'Muckenthaler',
          'Mues',
          'Muller',
          'Mulrain',
          'Mächtig',
          'Mäder',
          'Möcks',
          'Mögenburg',
          'Möhsner',
          'Möldner',
          'Möllenbeck',
          'Möller',
          'Möllinger',
          'Mörsch',
          'Mühleis',
          'Müller',
          'Münch',
          'Nabein',
          'Nabow',
          'Nagel',
          'Nannen',
          'Nastvogel',
          'Nau',
          'Naubert',
          'Naumann',
          'Ne',
          'Neimke',
          'Nerius',
          'Neubauer',
          'Neubert',
          'Neuendorf',
          'Neumair',
          'Neumann',
          'Neupert',
          'Neurohr',
          'Neuschwander',
          'Newton',
          'Ney',
          'Nicolay',
          'Niedermeier',
          'Nieklauson',
          'Niklaus',
          'Nitzsche',
          'Noack',
          'Nodler',
          'Nolte',
          'Normann',
          'Norris',
          'Northoff',
          'Nowak',
          'Nussbeck',
          'Nwachukwu',
          'Nytra',
          'Nöh',
          'Oberem',
          'Obergföll',
          'Obermaier',
          'Ochs',
          'Oeser',
          'Olbrich',
          'Onnen',
          'Ophey',
          'Oppong',
          'Orth',
          'Orthmann',
          'Oschkenat',
          'Osei',
          'Osenberg',
          'Ostendarp',
          'Ostwald',
          'Otte',
          'Otto',
          'Paesler',
          'Pajonk',
          'Pallentin',
          'Panzig',
          'Paschke',
          'Patzwahl',
          'Paukner',
          'Peselman',
          'Peter',
          'Peters',
          'Petzold',
          'Pfeiffer',
          'Pfennig',
          'Pfersich',
          'Pfingsten',
          'Pflieger',
          'Pflügner',
          'Philipp',
          'Pichlmaier',
          'Piesker',
          'Pietsch',
          'Pingpank',
          'Pinnock',
          'Pippig',
          'Pitschugin',
          'Plank',
          'Plass',
          'Platzer',
          'Plauk',
          'Plautz',
          'Pletsch',
          'Plotzitzka',
          'Poehn',
          'Poeschl',
          'Pogorzelski',
          'Pohl',
          'Pohland',
          'Pohle',
          'Polifka',
          'Polizzi',
          'Pollmächer',
          'Pomp',
          'Ponitzsch',
          'Porsche',
          'Porth',
          'Poschmann',
          'Poser',
          'Pottel',
          'Prah',
          'Prange',
          'Prediger',
          'Pressler',
          'Preuk',
          'Preuss',
          'Prey',
          'Priemer',
          'Proske',
          'Pusch',
          'Pöche',
          'Pöge',
          'Raabe',
          'Rabenstein',
          'Rach',
          'Radtke',
          'Rahn',
          'Ranftl',
          'Rangen',
          'Ranz',
          'Rapp',
          'Rath',
          'Rau',
          'Raubuch',
          'Raukuc',
          'Rautenkranz',
          'Rehwagen',
          'Reiber',
          'Reichardt',
          'Reichel',
          'Reichling',
          'Reif',
          'Reifenrath',
          'Reimann',
          'Reinberg',
          'Reinelt',
          'Reinhardt',
          'Reinke',
          'Reitze',
          'Renk',
          'Rentz',
          'Renz',
          'Reppin',
          'Restle',
          'Restorff',
          'Retzke',
          'Reuber',
          'Reumann',
          'Reus',
          'Reuss',
          'Reusse',
          'Rheder',
          'Rhoden',
          'Richards',
          'Richter',
          'Riedel',
          'Riediger',
          'Rieger',
          'Riekmann',
          'Riepl',
          'Riermeier',
          'Riester',
          'Riethmüller',
          'Rietmüller',
          'Rietscher',
          'Ringel',
          'Ringer',
          'Rink',
          'Ripken',
          'Ritosek',
          'Ritschel',
          'Ritter',
          'Rittweg',
          'Ritz',
          'Roba',
          'Rockmeier',
          'Rodehau',
          'Rodowski',
          'Roecker',
          'Roggatz',
          'Rohländer',
          'Rohrer',
          'Rokossa',
          'Roleder',
          'Roloff',
          'Roos',
          'Rosbach',
          'Roschinsky',
          'Rose',
          'Rosenauer',
          'Rosenbauer',
          'Rosenthal',
          'Rosksch',
          'Rossberg',
          'Rossler',
          'Roth',
          'Rother',
          'Ruch',
          'Ruckdeschel',
          'Rumpf',
          'Rupprecht',
          'Ruth',
          'Ryjikh',
          'Ryzih',
          'Rädler',
          'Räntsch',
          'Rödiger',
          'Röse',
          'Röttger',
          'Rücker',
          'Rüdiger',
          'Rüter',
          'Sachse',
          'Sack',
          'Saflanis',
          'Sagafe',
          'Sagonas',
          'Sahner',
          'Saile',
          'Sailer',
          'Salow',
          'Salzer',
          'Salzmann',
          'Sammert',
          'Sander',
          'Sarvari',
          'Sattelmaier',
          'Sauer',
          'Sauerland',
          'Saumweber',
          'Savoia',
          'Scc',
          'Schacht',
          'Schaefer',
          'Schaffarzik',
          'Schahbasian',
          'Scharf',
          'Schedler',
          'Scheer',
          'Schelk',
          'Schellenbeck',
          'Schembera',
          'Schenk',
          'Scherbarth',
          'Scherer',
          'Schersing',
          'Scherz',
          'Scheurer',
          'Scheuring',
          'Scheytt',
          'Schielke',
          'Schieskow',
          'Schildhauer',
          'Schilling',
          'Schima',
          'Schimmer',
          'Schindzielorz',
          'Schirmer',
          'Schirrmeister',
          'Schlachter',
          'Schlangen',
          'Schlawitz',
          'Schlechtweg',
          'Schley',
          'Schlicht',
          'Schlitzer',
          'Schmalzle',
          'Schmid',
          'Schmidt',
          'Schmidtchen',
          'Schmitt',
          'Schmitz',
          'Schmuhl',
          'Schneider',
          'Schnelting',
          'Schnieder',
          'Schniedermeier',
          'Schnürer',
          'Schoberg',
          'Scholz',
          'Schonberg',
          'Schondelmaier',
          'Schorr',
          'Schott',
          'Schottmann',
          'Schouren',
          'Schrader',
          'Schramm',
          'Schreck',
          'Schreiber',
          'Schreiner',
          'Schreiter',
          'Schroder',
          'Schröder',
          'Schuermann',
          'Schuff',
          'Schuhaj',
          'Schuldt',
          'Schult',
          'Schulte',
          'Schultz',
          'Schultze',
          'Schulz',
          'Schulze',
          'Schumacher',
          'Schumann',
          'Schupp',
          'Schuri',
          'Schuster',
          'Schwab',
          'Schwalm',
          'Schwanbeck',
          'Schwandke',
          'Schwanitz',
          'Schwarthoff',
          'Schwartz',
          'Schwarz',
          'Schwarzer',
          'Schwarzkopf',
          'Schwarzmeier',
          'Schwatlo',
          'Schweisfurth',
          'Schwennen',
          'Schwerdtner',
          'Schwidde',
          'Schwirkschlies',
          'Schwuchow',
          'Schäfer',
          'Schäffel',
          'Schäffer',
          'Schäning',
          'Schöckel',
          'Schönball',
          'Schönbeck',
          'Schönberg',
          'Schönebeck',
          'Schönenberger',
          'Schönfeld',
          'Schönherr',
          'Schönlebe',
          'Schötz',
          'Schüler',
          'Schüppel',
          'Schütz',
          'Schütze',
          'Seeger',
          'Seelig',
          'Sehls',
          'Seibold',
          'Seidel',
          'Seiders',
          'Seigel',
          'Seiler',
          'Seitz',
          'Semisch',
          'Senkel',
          'Sewald',
          'Siebel',
          'Siebert',
          'Siegling',
          'Sielemann',
          'Siemon',
          'Siener',
          'Sievers',
          'Siewert',
          'Sihler',
          'Sillah',
          'Simon',
          'Sinnhuber',
          'Sischka',
          'Skibicki',
          'Sladek',
          'Slotta',
          'Smieja',
          'Soboll',
          'Sokolowski',
          'Soller',
          'Sollner',
          'Sommer',
          'Somssich',
          'Sonn',
          'Sonnabend',
          'Spahn',
          'Spank',
          'Spelmeyer',
          'Spiegelburg',
          'Spielvogel',
          'Spinner',
          'Spitzmüller',
          'Splinter',
          'Sporrer',
          'Sprenger',
          'Spöttel',
          'Stahl',
          'Stang',
          'Stanger',
          'Stauss',
          'Steding',
          'Steffen',
          'Steffny',
          'Steidl',
          'Steigauf',
          'Stein',
          'Steinecke',
          'Steinert',
          'Steinkamp',
          'Steinmetz',
          'Stelkens',
          'Stengel',
          'Stengl',
          'Stenzel',
          'Stepanov',
          'Stephan',
          'Stern',
          'Steuk',
          'Stief',
          'Stifel',
          'Stoll',
          'Stolle',
          'Stolz',
          'Storl',
          'Storp',
          'Stoutjesdijk',
          'Stratmann',
          'Straub',
          'Strausa',
          'Streck',
          'Streese',
          'Strege',
          'Streit',
          'Streller',
          'Strieder',
          'Striezel',
          'Strogies',
          'Strohschank',
          'Strunz',
          'Strutz',
          'Stube',
          'Stöckert',
          'Stöppler',
          'Stöwer',
          'Stürmer',
          'Suffa',
          'Sujew',
          'Sussmann',
          'Suthe',
          'Sutschet',
          'Swillims',
          'Szendrei',
          'Sören',
          'Sürth',
          'Tafelmeier',
          'Tang',
          'Tasche',
          'Taufratshofer',
          'Tegethof',
          'Teichmann',
          'Tepper',
          'Terheiden',
          'Terlecki',
          'Teufel',
          'Theele',
          'Thieke',
          'Thimm',
          'Thiomas',
          'Thomas',
          'Thriene',
          'Thränhardt',
          'Thust',
          'Thyssen',
          'Thöne',
          'Tidow',
          'Tiedtke',
          'Tietze',
          'Tilgner',
          'Tillack',
          'Timmermann',
          'Tischler',
          'Tischmann',
          'Tittman',
          'Tivontschik',
          'Tonat',
          'Tonn',
          'Trampeli',
          'Trauth',
          'Trautmann',
          'Travan',
          'Treff',
          'Tremmel',
          'Tress',
          'Tsamonikian',
          'Tschiers',
          'Tschirch',
          'Tuch',
          'Tucholke',
          'Tudow',
          'Tuschmo',
          'Tächl',
          'Többen',
          'Töpfer',
          'Uhlemann',
          'Uhlig',
          'Uhrig',
          'Uibel',
          'Uliczka',
          'Ullmann',
          'Ullrich',
          'Umbach',
          'Umlauft',
          'Umminger',
          'Unger',
          'Unterpaintner',
          'Urban',
          'Urbaniak',
          'Urbansky',
          'Urhig',
          'Vahlensieck',
          'Van',
          'Vangermain',
          'Vater',
          'Venghaus',
          'Verniest',
          'Verzi',
          'Vey',
          'Viellehner',
          'Vieweg',
          'Voelkel',
          'Vogel',
          'Vogelgsang',
          'Vogt',
          'Voigt',
          'Vokuhl',
          'Volk',
          'Volker',
          'Volkmann',
          'Von',
          'Vona',
          'Vontein',
          'Wachenbrunner',
          'Wachtel',
          'Wagner',
          'Waibel',
          'Wakan',
          'Waldmann',
          'Wallner',
          'Wallstab',
          'Walter',
          'Walther',
          'Walton',
          'Walz',
          'Wanner',
          'Wartenberg',
          'Waschbüsch',
          'Wassilew',
          'Wassiluk',
          'Weber',
          'Wehrsen',
          'Weidlich',
          'Weidner',
          'Weigel',
          'Weight',
          'Weiler',
          'Weimer',
          'Weis',
          'Weiss',
          'Weller',
          'Welsch',
          'Welz',
          'Welzel',
          'Weniger',
          'Wenk',
          'Werle',
          'Werner',
          'Werrmann',
          'Wessel',
          'Wessinghage',
          'Weyel',
          'Wezel',
          'Wichmann',
          'Wickert',
          'Wiebe',
          'Wiechmann',
          'Wiegelmann',
          'Wierig',
          'Wiese',
          'Wieser',
          'Wilhelm',
          'Wilky',
          'Will',
          'Willwacher',
          'Wilts',
          'Wimmer',
          'Winkelmann',
          'Winkler',
          'Winter',
          'Wischek',
          'Wischer',
          'Wissing',
          'Wittich',
          'Wittl',
          'Wolf',
          'Wolfarth',
          'Wolff',
          'Wollenberg',
          'Wollmann',
          'Woytkowska',
          'Wujak',
          'Wurm',
          'Wyludda',
          'Wölpert',
          'Wöschler',
          'Wühn',
          'Wünsche',
          'Zach',
          'Zaczkiewicz',
          'Zahn',
          'Zaituc',
          'Zandt',
          'Zanner',
          'Zapletal',
          'Zauber',
          'Zeidler',
          'Zekl',
          'Zender',
          'Zeuch',
          'Zeyen',
          'Zeyhle',
          'Ziegler',
          'Zimanyi',
          'Zimmer',
          'Zimmermann',
          'Zinser',
          'Zintl',
          'Zipp',
          'Zipse',
          'Zschunke',
          'Zuber',
          'Zwiener',
          'Zümsande',
          'Östringer',
          'Überacker',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/de/name/prefix.js': [
      function(require, module, exports) {
        module['exports'] = ['Hr.', 'Fr.', 'Dr.', 'Prof. Dr.']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/de/name/nobility_title_prefix.js': [
      function(require, module, exports) {
        module['exports'] = ['zu', 'von', 'vom', 'von der']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/de/name/name.js': [
      function(require, module, exports) {
        module['exports'] = [
          '#{prefix} #{first_name} #{last_name}',
          '#{first_name} #{nobility_title_prefix} #{last_name}',
          '#{first_name} #{last_name}',
          '#{first_name} #{last_name}',
          '#{first_name} #{last_name}',
          '#{first_name} #{last_name}',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/de/name/index.js': [
      function(require, module, exports) {
        var name = {}
        module['exports'] = name
        name.first_name = require('./first_name')
        name.last_name = require('./last_name')
        name.prefix = require('./prefix')
        name.nobility_title_prefix = require('./nobility_title_prefix')
        name.name = require('./name')
      },
      {
        './first_name':
          '../node_modules/faker/lib/locales/de/name/first_name.js',
        './last_name':
          '../node_modules/faker/lib/locales/de/name/last_name.js',
        './prefix': '../node_modules/faker/lib/locales/de/name/prefix.js',
        './nobility_title_prefix':
          '../node_modules/faker/lib/locales/de/name/nobility_title_prefix.js',
        './name': '../node_modules/faker/lib/locales/de/name/name.js',
      },
    ],
    '../node_modules/faker/lib/locales/de/phone_number/formats.js': [
      function(require, module, exports) {
        module['exports'] = [
          '(0###) #########',
          '(0####) #######',
          '+49-###-#######',
          '+49-####-########',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/de/phone_number/index.js': [
      function(require, module, exports) {
        var phone_number = {}
        module['exports'] = phone_number
        phone_number.formats = require('./formats')
      },
      {
        './formats':
          '../node_modules/faker/lib/locales/de/phone_number/formats.js',
      },
    ],
    '../node_modules/faker/lib/locales/de/cell_phone/formats.js': [
      function(require, module, exports) {
        module['exports'] = ['+49-1##-#######', '+49-1###-########']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/de/cell_phone/index.js': [
      function(require, module, exports) {
        var cell_phone = {}
        module['exports'] = cell_phone
        cell_phone.formats = require('./formats')
      },
      {
        './formats':
          '../node_modules/faker/lib/locales/de/cell_phone/formats.js',
      },
    ],
    '../node_modules/faker/lib/locales/de/index.js': [
      function(require, module, exports) {
        var de = {}
        module['exports'] = de
        de.title = 'German'
        de.address = require('./address')
        de.company = require('./company')
        de.internet = require('./internet')
        de.lorem = require('./lorem')
        de.name = require('./name')
        de.phone_number = require('./phone_number')
        de.cell_phone = require('./cell_phone')
      },
      {
        './address':
          '../node_modules/faker/lib/locales/de/address/index.js',
        './company':
          '../node_modules/faker/lib/locales/de/company/index.js',
        './internet':
          '../node_modules/faker/lib/locales/de/internet/index.js',
        './lorem': '../node_modules/faker/lib/locales/de/lorem/index.js',
        './name': '../node_modules/faker/lib/locales/de/name/index.js',
        './phone_number':
          '../node_modules/faker/lib/locales/de/phone_number/index.js',
        './cell_phone':
          '../node_modules/faker/lib/locales/de/cell_phone/index.js',
      },
    ],
    '../node_modules/faker/lib/locales/de_AT/address/country.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Ägypten',
          'Äquatorialguinea',
          'Äthiopien',
          'Österreich',
          'Afghanistan',
          'Albanien',
          'Algerien',
          'Amerikanisch-Samoa',
          'Amerikanische Jungferninseln',
          'Andorra',
          'Angola',
          'Anguilla',
          'Antarktis',
          'Antigua und Barbuda',
          'Argentinien',
          'Armenien',
          'Aruba',
          'Aserbaidschan',
          'Australien',
          'Bahamas',
          'Bahrain',
          'Bangladesch',
          'Barbados',
          'Belarus',
          'Belgien',
          'Belize',
          'Benin',
          'die Bermudas',
          'Bhutan',
          'Bolivien',
          'Bosnien und Herzegowina',
          'Botsuana',
          'Bouvetinsel',
          'Brasilien',
          'Britische Jungferninseln',
          'Britisches Territorium im Indischen Ozean',
          'Brunei Darussalam',
          'Bulgarien',
          'Burkina Faso',
          'Burundi',
          'Chile',
          'China',
          'Cookinseln',
          'Costa Rica',
          'Dänemark',
          'Demokratische Republik Kongo',
          'Demokratische Volksrepublik Korea',
          'Deutschland',
          'Dominica',
          'Dominikanische Republik',
          'Dschibuti',
          'Ecuador',
          'El Salvador',
          'Eritrea',
          'Estland',
          'Färöer',
          'Falklandinseln',
          'Fidschi',
          'Finnland',
          'Frankreich',
          'Französisch-Guayana',
          'Französisch-Polynesien',
          'Französische Gebiete im südlichen Indischen Ozean',
          'Gabun',
          'Gambia',
          'Georgien',
          'Ghana',
          'Gibraltar',
          'Grönland',
          'Grenada',
          'Griechenland',
          'Guadeloupe',
          'Guam',
          'Guatemala',
          'Guinea',
          'Guinea-Bissau',
          'Guyana',
          'Haiti',
          'Heard und McDonaldinseln',
          'Honduras',
          'Hongkong',
          'Indien',
          'Indonesien',
          'Irak',
          'Iran',
          'Irland',
          'Island',
          'Israel',
          'Italien',
          'Jamaika',
          'Japan',
          'Jemen',
          'Jordanien',
          'Jugoslawien',
          'Kaimaninseln',
          'Kambodscha',
          'Kamerun',
          'Kanada',
          'Kap Verde',
          'Kasachstan',
          'Katar',
          'Kenia',
          'Kirgisistan',
          'Kiribati',
          'Kleinere amerikanische Überseeinseln',
          'Kokosinseln',
          'Kolumbien',
          'Komoren',
          'Kongo',
          'Kroatien',
          'Kuba',
          'Kuwait',
          'Laos',
          'Lesotho',
          'Lettland',
          'Libanon',
          'Liberia',
          'Libyen',
          'Liechtenstein',
          'Litauen',
          'Luxemburg',
          'Macau',
          'Madagaskar',
          'Malawi',
          'Malaysia',
          'Malediven',
          'Mali',
          'Malta',
          'ehemalige jugoslawische Republik Mazedonien',
          'Marokko',
          'Marshallinseln',
          'Martinique',
          'Mauretanien',
          'Mauritius',
          'Mayotte',
          'Mexiko',
          'Mikronesien',
          'Monaco',
          'Mongolei',
          'Montserrat',
          'Mosambik',
          'Myanmar',
          'Nördliche Marianen',
          'Namibia',
          'Nauru',
          'Nepal',
          'Neukaledonien',
          'Neuseeland',
          'Nicaragua',
          'Niederländische Antillen',
          'Niederlande',
          'Niger',
          'Nigeria',
          'Niue',
          'Norfolkinsel',
          'Norwegen',
          'Oman',
          'Osttimor',
          'Pakistan',
          'Palau',
          'Panama',
          'Papua-Neuguinea',
          'Paraguay',
          'Peru',
          'Philippinen',
          'Pitcairninseln',
          'Polen',
          'Portugal',
          'Puerto Rico',
          'Réunion',
          'Republik Korea',
          'Republik Moldau',
          'Ruanda',
          'Rumänien',
          'Russische Föderation',
          'São Tomé und Príncipe',
          'Südafrika',
          'Südgeorgien und Südliche Sandwichinseln',
          'Salomonen',
          'Sambia',
          'Samoa',
          'San Marino',
          'Saudi-Arabien',
          'Schweden',
          'Schweiz',
          'Senegal',
          'Seychellen',
          'Sierra Leone',
          'Simbabwe',
          'Singapur',
          'Slowakei',
          'Slowenien',
          'Somalien',
          'Spanien',
          'Sri Lanka',
          'St. Helena',
          'St. Kitts und Nevis',
          'St. Lucia',
          'St. Pierre und Miquelon',
          'St. Vincent und die Grenadinen',
          'Sudan',
          'Surinam',
          'Svalbard und Jan Mayen',
          'Swasiland',
          'Syrien',
          'Türkei',
          'Tadschikistan',
          'Taiwan',
          'Tansania',
          'Thailand',
          'Togo',
          'Tokelau',
          'Tonga',
          'Trinidad und Tobago',
          'Tschad',
          'Tschechische Republik',
          'Tunesien',
          'Turkmenistan',
          'Turks- und Caicosinseln',
          'Tuvalu',
          'Uganda',
          'Ukraine',
          'Ungarn',
          'Uruguay',
          'Usbekistan',
          'Vanuatu',
          'Vatikanstadt',
          'Venezuela',
          'Vereinigte Arabische Emirate',
          'Vereinigte Staaten',
          'Vereinigtes Königreich',
          'Vietnam',
          'Wallis und Futuna',
          'Weihnachtsinsel',
          'Westsahara',
          'Zentralafrikanische Republik',
          'Zypern',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/de_AT/address/street_root.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Ahorn',
          'Ahorngasse (St. Andrä)',
          'Alleestraße (Poysbrunn)',
          'Alpenlandstraße',
          'Alte Poststraße',
          'Alte Ufergasse',
          'Am Kronawett (Hagenbrunn)',
          'Am Mühlwasser',
          'Am Rebenhang',
          'Am Sternweg',
          'Anton Wildgans-Straße',
          'Auer-von-Welsbach-Weg',
          'Auf der Stift',
          'Aufeldgasse',
          'Bahngasse',
          'Bahnhofstraße',
          'Bahnstraße (Gerhaus)',
          'Basteigasse',
          'Berggasse',
          'Bergstraße',
          'Birkenweg',
          'Blasiussteig',
          'Blattur',
          'Bruderhofgasse',
          'Brunnelligasse',
          'Bühelweg',
          'Darnautgasse',
          'Donaugasse',
          'Dorfplatz (Haselbach)',
          'Dr.-Oberreiter-Straße',
          'Dr.Karl Holoubek-Str.',
          'Drautal Bundesstraße',
          'Dürnrohrer Straße',
          'Ebenthalerstraße',
          'Eckgrabenweg',
          'Erlenstraße',
          'Erlenweg',
          'Eschenweg',
          'Etrichgasse',
          'Fassergasse',
          'Feichteggerwiese',
          'Feld-Weg',
          'Feldgasse',
          'Feldstapfe',
          'Fischpointweg',
          'Flachbergstraße',
          'Flurweg',
          'Franz Schubert-Gasse',
          'Franz-Schneeweiß-Weg',
          'Franz-von-Assisi-Straße',
          'Fritz-Pregl-Straße',
          'Fuchsgrubenweg',
          'Födlerweg',
          'Föhrenweg',
          'Fünfhaus (Paasdorf)',
          'Gabelsbergerstraße',
          'Gartenstraße',
          'Geigen',
          'Geigergasse',
          'Gemeindeaugasse',
          'Gemeindeplatz',
          'Georg-Aichinger-Straße',
          'Glanfeldbachweg',
          'Graben (Burgauberg)',
          'Grub',
          'Gröretgasse',
          'Grünbach',
          'Gösting',
          'Hainschwang',
          'Hans-Mauracher-Straße',
          'Hart',
          'Teichstraße',
          'Hauptplatz',
          'Hauptstraße',
          'Heideweg',
          'Heinrich Landauer Gasse',
          'Helenengasse',
          'Hermann von Gilmweg',
          'Hermann-Löns-Gasse',
          'Herminengasse',
          'Hernstorferstraße',
          'Hirsdorf',
          'Hochfeistritz',
          'Hochhaus Neue Donau',
          'Hof',
          'Hussovits Gasse',
          'Höggen',
          'Hütten',
          'Janzgasse',
          'Jochriemgutstraße',
          'Johann-Strauß-Gasse',
          'Julius-Raab-Straße',
          'Kahlenberger Straße',
          'Karl Kraft-Straße',
          'Kegelprielstraße',
          'Keltenberg-Eponaweg',
          'Kennedybrücke',
          'Kerpelystraße',
          'Kindergartenstraße',
          'Kinderheimgasse',
          'Kirchenplatz',
          'Kirchweg',
          'Klagenfurter Straße',
          'Klamm',
          'Kleinbaumgarten',
          'Klingergasse',
          'Koloniestraße',
          'Konrad-Duden-Gasse',
          'Krankenhausstraße',
          'Kubinstraße',
          'Köhldorfergasse',
          'Lackenweg',
          'Lange Mekotte',
          'Leifling',
          'Leopold Frank-Straße (Pellendorf)',
          'Lerchengasse (Pirka)',
          'Lichtensternsiedlung V',
          'Lindenhofstraße',
          'Lindenweg',
          'Luegstraße',
          'Maierhof',
          'Malerweg',
          'Mitterweg',
          'Mittlere Hauptstraße',
          'Moosbachgasse',
          'Morettigasse',
          'Musikpavillon Riezlern',
          'Mühlboden',
          'Mühle',
          'Mühlenweg',
          'Neustiftgasse',
          'Niederegg',
          'Niedergams',
          'Nordwestbahnbrücke',
          'Oberbödenalm',
          'Obere Berggasse',
          'Oedt',
          'Am Färberberg',
          'Ottogasse',
          'Paul Peters-Gasse',
          'Perspektivstraße',
          'Poppichl',
          'Privatweg',
          'Prixgasse',
          'Pyhra',
          'Radetzkystraße',
          'Raiden',
          'Reichensteinstraße',
          'Reitbauernstraße',
          'Reiterweg',
          'Reitschulgasse',
          'Ringweg',
          'Rupertistraße',
          'Römerstraße',
          'Römerweg',
          'Sackgasse',
          'Schaunbergerstraße',
          'Schloßweg',
          'Schulgasse (Langeck)',
          'Schönholdsiedlung',
          'Seeblick',
          'Seestraße',
          'Semriacherstraße',
          'Simling',
          'Sipbachzeller Straße',
          'Sonnenweg',
          'Spargelfeldgasse',
          'Spiesmayrweg',
          'Sportplatzstraße',
          'St.Ulrich',
          'Steilmannstraße',
          'Steingrüneredt',
          'Strassfeld',
          'Straßerau',
          'Stöpflweg',
          'Stüra',
          'Taferngasse',
          'Tennweg',
          'Thomas Koschat-Gasse',
          'Tiroler Straße',
          'Torrogasse',
          'Uferstraße (Schwarzau am Steinfeld)',
          'Unterdörfl',
          'Unterer Sonnrainweg',
          'Verwaltersiedlung',
          'Waldhang',
          'Wasen',
          'Weidenstraße',
          'Weiherweg',
          'Wettsteingasse',
          'Wiener Straße',
          'Windisch',
          'Zebragasse',
          'Zellerstraße',
          'Ziehrerstraße',
          'Zulechnerweg',
          'Zwergjoch',
          'Ötzbruck',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/de_AT/address/building_number.js': [
      function(require, module, exports) {
        module['exports'] = ['###', '##', '#', '##a', '##b', '##c']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/de_AT/address/secondary_address.js': [
      function(require, module, exports) {
        module['exports'] = ['Apt. ###', 'Zimmer ###', '# OG']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/de_AT/address/postcode.js': [
      function(require, module, exports) {
        module['exports'] = ['####']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/de_AT/address/state.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Burgenland',
          'Kärnten',
          'Niederösterreich',
          'Oberösterreich',
          'Salzburg',
          'Steiermark',
          'Tirol',
          'Vorarlberg',
          'Wien',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/de_AT/address/state_abbr.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Bgld.',
          'Ktn.',
          'NÖ',
          'OÖ',
          'Sbg.',
          'Stmk.',
          'T',
          'Vbg.',
          'W',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/de_AT/address/city_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Aigen im Mühlkreis',
          'Allerheiligen bei Wildon',
          'Altenfelden',
          'Arriach',
          'Axams',
          'Baumgartenberg',
          'Bergern im Dunkelsteinerwald',
          'Berndorf bei Salzburg',
          'Bregenz',
          'Breitenbach am Inn',
          'Deutsch-Wagram',
          'Dienten am Hochkönig',
          'Dietach',
          'Dornbirn',
          'Dürnkrut',
          'Eben im Pongau',
          'Ebenthal in Kärnten',
          'Eichgraben',
          'Eisenstadt',
          'Ellmau',
          'Feistritz am Wechsel',
          'Finkenberg',
          'Fiss',
          'Frantschach-St. Gertraud',
          'Fritzens',
          'Gams bei Hieflau',
          'Geiersberg',
          'Graz',
          'Großhöflein',
          'Gößnitz',
          'Hartl',
          'Hausleiten',
          'Herzogenburg',
          'Hinterhornbach',
          'Hochwolkersdorf',
          'Ilz',
          'Ilztal',
          'Innerbraz',
          'Innsbruck',
          'Itter',
          'Jagerberg',
          'Jeging',
          'Johnsbach',
          'Johnsdorf-Brunn',
          'Jungholz',
          'Kirchdorf am Inn',
          'Klagenfurt',
          'Kottes-Purk',
          'Krumau am Kamp',
          'Krumbach',
          'Lavamünd',
          'Lech',
          'Linz',
          'Ludesch',
          'Lödersdorf',
          'Marbach an der Donau',
          'Mattsee',
          'Mautern an der Donau',
          'Mauterndorf',
          'Mitterbach am Erlaufsee',
          'Neudorf bei Passail',
          'Neudorf bei Staatz',
          'Neukirchen an der Enknach',
          'Neustift an der Lafnitz',
          'Niederleis',
          'Oberndorf in Tirol',
          'Oberstorcha',
          'Oberwaltersdorf',
          'Oed-Oehling',
          'Ort im Innkreis',
          'Pilgersdorf',
          'Pitschgau',
          'Pollham',
          'Preitenegg',
          'Purbach am Neusiedler See',
          'Rabenwald',
          'Raiding',
          'Rastenfeld',
          'Ratten',
          'Rettenegg',
          'Salzburg',
          'Sankt Johann im Saggautal',
          'St. Peter am Kammersberg',
          'St. Pölten',
          'St. Veit an der Glan',
          'Taxenbach',
          'Tragwein',
          'Trebesing',
          'Trieben',
          'Turnau',
          'Ungerdorf',
          'Unterauersbach',
          'Unterstinkenbrunn',
          'Untertilliach',
          'Uttendorf',
          'Vals',
          'Velden am Wörther See',
          'Viehhofen',
          'Villach',
          'Vitis',
          'Waidhofen an der Thaya',
          'Waldkirchen am Wesen',
          'Weißkirchen an der Traun',
          'Wien',
          'Wimpassing im Schwarzatale',
          'Ybbs an der Donau',
          'Ybbsitz',
          'Yspertal',
          'Zeillern',
          'Zell am Pettenfirst',
          'Zell an der Pram',
          'Zerlach',
          'Zwölfaxing',
          'Öblarn',
          'Übelbach',
          'Überackern',
          'Übersaxen',
          'Übersbach',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/de_AT/address/city.js': [
      function(require, module, exports) {
        module['exports'] = ['#{city_name}']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/de_AT/address/street_name.js': [
      function(require, module, exports) {
        module['exports'] = ['#{street_root}']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/de_AT/address/street_address.js': [
      function(require, module, exports) {
        module['exports'] = ['#{street_name} #{building_number}']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/de_AT/address/default_country.js': [
      function(require, module, exports) {
        module['exports'] = ['Österreich']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/de_AT/address/index.js': [
      function(require, module, exports) {
        var address = {}
        module['exports'] = address
        address.country = require('./country')
        address.street_root = require('./street_root')
        address.building_number = require('./building_number')
        address.secondary_address = require('./secondary_address')
        address.postcode = require('./postcode')
        address.state = require('./state')
        address.state_abbr = require('./state_abbr')
        address.city_name = require('./city_name')
        address.city = require('./city')
        address.street_name = require('./street_name')
        address.street_address = require('./street_address')
        address.default_country = require('./default_country')
      },
      {
        './country':
          '../node_modules/faker/lib/locales/de_AT/address/country.js',
        './street_root':
          '../node_modules/faker/lib/locales/de_AT/address/street_root.js',
        './building_number':
          '../node_modules/faker/lib/locales/de_AT/address/building_number.js',
        './secondary_address':
          '../node_modules/faker/lib/locales/de_AT/address/secondary_address.js',
        './postcode':
          '../node_modules/faker/lib/locales/de_AT/address/postcode.js',
        './state':
          '../node_modules/faker/lib/locales/de_AT/address/state.js',
        './state_abbr':
          '../node_modules/faker/lib/locales/de_AT/address/state_abbr.js',
        './city_name':
          '../node_modules/faker/lib/locales/de_AT/address/city_name.js',
        './city':
          '../node_modules/faker/lib/locales/de_AT/address/city.js',
        './street_name':
          '../node_modules/faker/lib/locales/de_AT/address/street_name.js',
        './street_address':
          '../node_modules/faker/lib/locales/de_AT/address/street_address.js',
        './default_country':
          '../node_modules/faker/lib/locales/de_AT/address/default_country.js',
      },
    ],
    '../node_modules/faker/lib/locales/de_AT/company/suffix.js': [
      function(require, module, exports) {
        module['exports'] = [
          'GmbH',
          'AG',
          'Gruppe',
          'KG',
          'GmbH & Co. KG',
          'UG',
          'OHG',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/de_AT/company/legal_form.js': [
      function(require, module, exports) {
        module['exports'] = [
          'GmbH',
          'AG',
          'Gruppe',
          'KG',
          'GmbH & Co. KG',
          'UG',
          'OHG',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/de_AT/company/name.js': [
      function(require, module, exports) {
        module['exports'] = [
          '#{Name.last_name} #{suffix}',
          '#{Name.last_name}-#{Name.last_name}',
          '#{Name.last_name}, #{Name.last_name} und #{Name.last_name}',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/de_AT/company/index.js': [
      function(require, module, exports) {
        var company = {}
        module['exports'] = company
        company.suffix = require('./suffix')
        company.legal_form = require('./legal_form')
        company.name = require('./name')
      },
      {
        './suffix':
          '../node_modules/faker/lib/locales/de_AT/company/suffix.js',
        './legal_form':
          '../node_modules/faker/lib/locales/de_AT/company/legal_form.js',
        './name':
          '../node_modules/faker/lib/locales/de_AT/company/name.js',
      },
    ],
    '../node_modules/faker/lib/locales/de_AT/internet/free_email.js': [
      function(require, module, exports) {
        module['exports'] = ['gmail.com', 'yahoo.com', 'hotmail.com']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/de_AT/internet/domain_suffix.js': [
      function(require, module, exports) {
        module['exports'] = [
          'com',
          'info',
          'name',
          'net',
          'org',
          'de',
          'ch',
          'at',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/de_AT/internet/index.js': [
      function(require, module, exports) {
        var internet = {}
        module['exports'] = internet
        internet.free_email = require('./free_email')
        internet.domain_suffix = require('./domain_suffix')
      },
      {
        './free_email':
          '../node_modules/faker/lib/locales/de_AT/internet/free_email.js',
        './domain_suffix':
          '../node_modules/faker/lib/locales/de_AT/internet/domain_suffix.js',
      },
    ],
    '../node_modules/faker/lib/locales/de_AT/name/first_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Aaron',
          'Abdul',
          'Abdullah',
          'Adam',
          'Adrian',
          'Adriano',
          'Ahmad',
          'Ahmed',
          'Ahmet',
          'Alan',
          'Albert',
          'Alessandro',
          'Alessio',
          'Alex',
          'Alexander',
          'Alfred',
          'Ali',
          'Amar',
          'Amir',
          'Amon',
          'Andre',
          'Andreas',
          'Andrew',
          'Angelo',
          'Ansgar',
          'Anthony',
          'Anton',
          'Antonio',
          'Arda',
          'Arian',
          'Armin',
          'Arne',
          'Arno',
          'Arthur',
          'Artur',
          'Arved',
          'Arvid',
          'Ayman',
          'Baran',
          'Baris',
          'Bastian',
          'Batuhan',
          'Bela',
          'Ben',
          'Benedikt',
          'Benjamin',
          'Bennet',
          'Bennett',
          'Benno',
          'Bent',
          'Berat',
          'Berkay',
          'Bernd',
          'Bilal',
          'Bjarne',
          'Björn',
          'Bo',
          'Boris',
          'Brandon',
          'Brian',
          'Bruno',
          'Bryan',
          'Burak',
          'Calvin',
          'Can',
          'Carl',
          'Carlo',
          'Carlos',
          'Caspar',
          'Cedric',
          'Cedrik',
          'Cem',
          'Charlie',
          'Chris',
          'Christian',
          'Christiano',
          'Christoph',
          'Christopher',
          'Claas',
          'Clemens',
          'Colin',
          'Collin',
          'Conner',
          'Connor',
          'Constantin',
          'Corvin',
          'Curt',
          'Damian',
          'Damien',
          'Daniel',
          'Danilo',
          'Danny',
          'Darian',
          'Dario',
          'Darius',
          'Darren',
          'David',
          'Davide',
          'Davin',
          'Dean',
          'Deniz',
          'Dennis',
          'Denny',
          'Devin',
          'Diego',
          'Dion',
          'Domenic',
          'Domenik',
          'Dominic',
          'Dominik',
          'Dorian',
          'Dustin',
          'Dylan',
          'Ecrin',
          'Eddi',
          'Eddy',
          'Edgar',
          'Edwin',
          'Efe',
          'Ege',
          'Elia',
          'Eliah',
          'Elias',
          'Elijah',
          'Emanuel',
          'Emil',
          'Emilian',
          'Emilio',
          'Emir',
          'Emirhan',
          'Emre',
          'Enes',
          'Enno',
          'Enrico',
          'Eren',
          'Eric',
          'Erik',
          'Etienne',
          'Fabian',
          'Fabien',
          'Fabio',
          'Fabrice',
          'Falk',
          'Felix',
          'Ferdinand',
          'Fiete',
          'Filip',
          'Finlay',
          'Finley',
          'Finn',
          'Finnley',
          'Florian',
          'Francesco',
          'Franz',
          'Frederic',
          'Frederick',
          'Frederik',
          'Friedrich',
          'Fritz',
          'Furkan',
          'Fynn',
          'Gabriel',
          'Georg',
          'Gerrit',
          'Gian',
          'Gianluca',
          'Gino',
          'Giuliano',
          'Giuseppe',
          'Gregor',
          'Gustav',
          'Hagen',
          'Hamza',
          'Hannes',
          'Hanno',
          'Hans',
          'Hasan',
          'Hassan',
          'Hauke',
          'Hendrik',
          'Hennes',
          'Henning',
          'Henri',
          'Henrick',
          'Henrik',
          'Henry',
          'Hugo',
          'Hussein',
          'Ian',
          'Ibrahim',
          'Ilias',
          'Ilja',
          'Ilyas',
          'Immanuel',
          'Ismael',
          'Ismail',
          'Ivan',
          'Iven',
          'Jack',
          'Jacob',
          'Jaden',
          'Jakob',
          'Jamal',
          'James',
          'Jamie',
          'Jan',
          'Janek',
          'Janis',
          'Janne',
          'Jannek',
          'Jannes',
          'Jannik',
          'Jannis',
          'Jano',
          'Janosch',
          'Jared',
          'Jari',
          'Jarne',
          'Jarno',
          'Jaron',
          'Jason',
          'Jasper',
          'Jay',
          'Jayden',
          'Jayson',
          'Jean',
          'Jens',
          'Jeremias',
          'Jeremie',
          'Jeremy',
          'Jermaine',
          'Jerome',
          'Jesper',
          'Jesse',
          'Jim',
          'Jimmy',
          'Joe',
          'Joel',
          'Joey',
          'Johann',
          'Johannes',
          'John',
          'Johnny',
          'Jon',
          'Jona',
          'Jonah',
          'Jonas',
          'Jonathan',
          'Jonte',
          'Joost',
          'Jordan',
          'Joris',
          'Joscha',
          'Joschua',
          'Josef',
          'Joseph',
          'Josh',
          'Joshua',
          'Josua',
          'Juan',
          'Julian',
          'Julien',
          'Julius',
          'Juri',
          'Justin',
          'Justus',
          'Kaan',
          'Kai',
          'Kalle',
          'Karim',
          'Karl',
          'Karlo',
          'Kay',
          'Keanu',
          'Kenan',
          'Kenny',
          'Keno',
          'Kerem',
          'Kerim',
          'Kevin',
          'Kian',
          'Kilian',
          'Kim',
          'Kimi',
          'Kjell',
          'Klaas',
          'Klemens',
          'Konrad',
          'Konstantin',
          'Koray',
          'Korbinian',
          'Kurt',
          'Lars',
          'Lasse',
          'Laurence',
          'Laurens',
          'Laurenz',
          'Laurin',
          'Lean',
          'Leander',
          'Leandro',
          'Leif',
          'Len',
          'Lenn',
          'Lennard',
          'Lennart',
          'Lennert',
          'Lennie',
          'Lennox',
          'Lenny',
          'Leo',
          'Leon',
          'Leonard',
          'Leonardo',
          'Leonhard',
          'Leonidas',
          'Leopold',
          'Leroy',
          'Levent',
          'Levi',
          'Levin',
          'Lewin',
          'Lewis',
          'Liam',
          'Lian',
          'Lias',
          'Lino',
          'Linus',
          'Lio',
          'Lion',
          'Lionel',
          'Logan',
          'Lorenz',
          'Lorenzo',
          'Loris',
          'Louis',
          'Luan',
          'Luc',
          'Luca',
          'Lucas',
          'Lucian',
          'Lucien',
          'Ludwig',
          'Luis',
          'Luiz',
          'Luk',
          'Luka',
          'Lukas',
          'Luke',
          'Lutz',
          'Maddox',
          'Mads',
          'Magnus',
          'Maik',
          'Maksim',
          'Malik',
          'Malte',
          'Manuel',
          'Marc',
          'Marcel',
          'Marco',
          'Marcus',
          'Marek',
          'Marian',
          'Mario',
          'Marius',
          'Mark',
          'Marko',
          'Markus',
          'Marlo',
          'Marlon',
          'Marten',
          'Martin',
          'Marvin',
          'Marwin',
          'Mateo',
          'Mathis',
          'Matis',
          'Mats',
          'Matteo',
          'Mattes',
          'Matthias',
          'Matthis',
          'Matti',
          'Mattis',
          'Maurice',
          'Max',
          'Maxim',
          'Maximilian',
          'Mehmet',
          'Meik',
          'Melvin',
          'Merlin',
          'Mert',
          'Michael',
          'Michel',
          'Mick',
          'Miguel',
          'Mika',
          'Mikail',
          'Mike',
          'Milan',
          'Milo',
          'Mio',
          'Mirac',
          'Mirco',
          'Mirko',
          'Mohamed',
          'Mohammad',
          'Mohammed',
          'Moritz',
          'Morten',
          'Muhammed',
          'Murat',
          'Mustafa',
          'Nathan',
          'Nathanael',
          'Nelson',
          'Neo',
          'Nevio',
          'Nick',
          'Niclas',
          'Nico',
          'Nicolai',
          'Nicolas',
          'Niels',
          'Nikita',
          'Niklas',
          'Niko',
          'Nikolai',
          'Nikolas',
          'Nils',
          'Nino',
          'Noah',
          'Noel',
          'Norman',
          'Odin',
          'Oke',
          'Ole',
          'Oliver',
          'Omar',
          'Onur',
          'Oscar',
          'Oskar',
          'Pascal',
          'Patrice',
          'Patrick',
          'Paul',
          'Peer',
          'Pepe',
          'Peter',
          'Phil',
          'Philip',
          'Philipp',
          'Pierre',
          'Piet',
          'Pit',
          'Pius',
          'Quentin',
          'Quirin',
          'Rafael',
          'Raik',
          'Ramon',
          'Raphael',
          'Rasmus',
          'Raul',
          'Rayan',
          'René',
          'Ricardo',
          'Riccardo',
          'Richard',
          'Rick',
          'Rico',
          'Robert',
          'Robin',
          'Rocco',
          'Roman',
          'Romeo',
          'Ron',
          'Ruben',
          'Ryan',
          'Said',
          'Salih',
          'Sam',
          'Sami',
          'Sammy',
          'Samuel',
          'Sandro',
          'Santino',
          'Sascha',
          'Sean',
          'Sebastian',
          'Selim',
          'Semih',
          'Shawn',
          'Silas',
          'Simeon',
          'Simon',
          'Sinan',
          'Sky',
          'Stefan',
          'Steffen',
          'Stephan',
          'Steve',
          'Steven',
          'Sven',
          'Sönke',
          'Sören',
          'Taha',
          'Tamino',
          'Tammo',
          'Tarik',
          'Tayler',
          'Taylor',
          'Teo',
          'Theo',
          'Theodor',
          'Thies',
          'Thilo',
          'Thomas',
          'Thorben',
          'Thore',
          'Thorge',
          'Tiago',
          'Til',
          'Till',
          'Tillmann',
          'Tim',
          'Timm',
          'Timo',
          'Timon',
          'Timothy',
          'Tino',
          'Titus',
          'Tizian',
          'Tjark',
          'Tobias',
          'Tom',
          'Tommy',
          'Toni',
          'Tony',
          'Torben',
          'Tore',
          'Tristan',
          'Tyler',
          'Tyron',
          'Umut',
          'Valentin',
          'Valentino',
          'Veit',
          'Victor',
          'Viktor',
          'Vin',
          'Vincent',
          'Vito',
          'Vitus',
          'Wilhelm',
          'Willi',
          'William',
          'Willy',
          'Xaver',
          'Yannic',
          'Yannick',
          'Yannik',
          'Yannis',
          'Yasin',
          'Youssef',
          'Yunus',
          'Yusuf',
          'Yven',
          'Yves',
          'Ömer',
          'Aaliyah',
          'Abby',
          'Abigail',
          'Ada',
          'Adelina',
          'Adriana',
          'Aileen',
          'Aimee',
          'Alana',
          'Alea',
          'Alena',
          'Alessa',
          'Alessia',
          'Alexa',
          'Alexandra',
          'Alexia',
          'Alexis',
          'Aleyna',
          'Alia',
          'Alica',
          'Alice',
          'Alicia',
          'Alina',
          'Alisa',
          'Alisha',
          'Alissa',
          'Aliya',
          'Aliyah',
          'Allegra',
          'Alma',
          'Alyssa',
          'Amalia',
          'Amanda',
          'Amelia',
          'Amelie',
          'Amina',
          'Amira',
          'Amy',
          'Ana',
          'Anabel',
          'Anastasia',
          'Andrea',
          'Angela',
          'Angelina',
          'Angelique',
          'Anja',
          'Ann',
          'Anna',
          'Annabel',
          'Annabell',
          'Annabelle',
          'Annalena',
          'Anne',
          'Anneke',
          'Annelie',
          'Annemarie',
          'Anni',
          'Annie',
          'Annika',
          'Anny',
          'Anouk',
          'Antonia',
          'Arda',
          'Ariana',
          'Ariane',
          'Arwen',
          'Ashley',
          'Asya',
          'Aurelia',
          'Aurora',
          'Ava',
          'Ayleen',
          'Aylin',
          'Ayse',
          'Azra',
          'Betty',
          'Bianca',
          'Bianka',
          'Caitlin',
          'Cara',
          'Carina',
          'Carla',
          'Carlotta',
          'Carmen',
          'Carolin',
          'Carolina',
          'Caroline',
          'Cassandra',
          'Catharina',
          'Catrin',
          'Cecile',
          'Cecilia',
          'Celia',
          'Celina',
          'Celine',
          'Ceyda',
          'Ceylin',
          'Chantal',
          'Charleen',
          'Charlotta',
          'Charlotte',
          'Chayenne',
          'Cheyenne',
          'Chiara',
          'Christin',
          'Christina',
          'Cindy',
          'Claire',
          'Clara',
          'Clarissa',
          'Colleen',
          'Collien',
          'Cora',
          'Corinna',
          'Cosima',
          'Dana',
          'Daniela',
          'Daria',
          'Darleen',
          'Defne',
          'Delia',
          'Denise',
          'Diana',
          'Dilara',
          'Dina',
          'Dorothea',
          'Ecrin',
          'Eda',
          'Eileen',
          'Ela',
          'Elaine',
          'Elanur',
          'Elea',
          'Elena',
          'Eleni',
          'Eleonora',
          'Eliana',
          'Elif',
          'Elina',
          'Elisa',
          'Elisabeth',
          'Ella',
          'Ellen',
          'Elli',
          'Elly',
          'Elsa',
          'Emelie',
          'Emely',
          'Emilia',
          'Emilie',
          'Emily',
          'Emma',
          'Emmely',
          'Emmi',
          'Emmy',
          'Enie',
          'Enna',
          'Enya',
          'Esma',
          'Estelle',
          'Esther',
          'Eva',
          'Evelin',
          'Evelina',
          'Eveline',
          'Evelyn',
          'Fabienne',
          'Fatima',
          'Fatma',
          'Felicia',
          'Felicitas',
          'Felina',
          'Femke',
          'Fenja',
          'Fine',
          'Finia',
          'Finja',
          'Finnja',
          'Fiona',
          'Flora',
          'Florentine',
          'Francesca',
          'Franka',
          'Franziska',
          'Frederike',
          'Freya',
          'Frida',
          'Frieda',
          'Friederike',
          'Giada',
          'Gina',
          'Giulia',
          'Giuliana',
          'Greta',
          'Hailey',
          'Hana',
          'Hanna',
          'Hannah',
          'Heidi',
          'Helen',
          'Helena',
          'Helene',
          'Helin',
          'Henriette',
          'Henrike',
          'Hermine',
          'Ida',
          'Ilayda',
          'Imke',
          'Ina',
          'Ines',
          'Inga',
          'Inka',
          'Irem',
          'Isa',
          'Isabel',
          'Isabell',
          'Isabella',
          'Isabelle',
          'Ivonne',
          'Jacqueline',
          'Jamie',
          'Jamila',
          'Jana',
          'Jane',
          'Janin',
          'Janina',
          'Janine',
          'Janna',
          'Janne',
          'Jara',
          'Jasmin',
          'Jasmina',
          'Jasmine',
          'Jella',
          'Jenna',
          'Jennifer',
          'Jenny',
          'Jessica',
          'Jessy',
          'Jette',
          'Jil',
          'Jill',
          'Joana',
          'Joanna',
          'Joelina',
          'Joeline',
          'Joelle',
          'Johanna',
          'Joleen',
          'Jolie',
          'Jolien',
          'Jolin',
          'Jolina',
          'Joline',
          'Jona',
          'Jonah',
          'Jonna',
          'Josefin',
          'Josefine',
          'Josephin',
          'Josephine',
          'Josie',
          'Josy',
          'Joy',
          'Joyce',
          'Judith',
          'Judy',
          'Jule',
          'Julia',
          'Juliana',
          'Juliane',
          'Julie',
          'Julienne',
          'Julika',
          'Julina',
          'Juna',
          'Justine',
          'Kaja',
          'Karina',
          'Karla',
          'Karlotta',
          'Karolina',
          'Karoline',
          'Kassandra',
          'Katarina',
          'Katharina',
          'Kathrin',
          'Katja',
          'Katrin',
          'Kaya',
          'Kayra',
          'Kiana',
          'Kiara',
          'Kim',
          'Kimberley',
          'Kimberly',
          'Kira',
          'Klara',
          'Korinna',
          'Kristin',
          'Kyra',
          'Laila',
          'Lana',
          'Lara',
          'Larissa',
          'Laura',
          'Laureen',
          'Lavinia',
          'Lea',
          'Leah',
          'Leana',
          'Leandra',
          'Leann',
          'Lee',
          'Leila',
          'Lena',
          'Lene',
          'Leni',
          'Lenia',
          'Lenja',
          'Lenya',
          'Leona',
          'Leoni',
          'Leonie',
          'Leonora',
          'Leticia',
          'Letizia',
          'Levke',
          'Leyla',
          'Lia',
          'Liah',
          'Liana',
          'Lili',
          'Lilia',
          'Lilian',
          'Liliana',
          'Lilith',
          'Lilli',
          'Lillian',
          'Lilly',
          'Lily',
          'Lina',
          'Linda',
          'Lindsay',
          'Line',
          'Linn',
          'Linnea',
          'Lisa',
          'Lisann',
          'Lisanne',
          'Liv',
          'Livia',
          'Liz',
          'Lola',
          'Loreen',
          'Lorena',
          'Lotta',
          'Lotte',
          'Louisa',
          'Louise',
          'Luana',
          'Luca',
          'Lucia',
          'Lucie',
          'Lucienne',
          'Lucy',
          'Luisa',
          'Luise',
          'Luka',
          'Luna',
          'Luzie',
          'Lya',
          'Lydia',
          'Lyn',
          'Lynn',
          'Madeleine',
          'Madita',
          'Madleen',
          'Madlen',
          'Magdalena',
          'Maike',
          'Mailin',
          'Maira',
          'Maja',
          'Malena',
          'Malia',
          'Malin',
          'Malina',
          'Mandy',
          'Mara',
          'Marah',
          'Mareike',
          'Maren',
          'Maria',
          'Mariam',
          'Marie',
          'Marieke',
          'Mariella',
          'Marika',
          'Marina',
          'Marisa',
          'Marissa',
          'Marit',
          'Marla',
          'Marleen',
          'Marlen',
          'Marlena',
          'Marlene',
          'Marta',
          'Martha',
          'Mary',
          'Maryam',
          'Mathilda',
          'Mathilde',
          'Matilda',
          'Maxi',
          'Maxima',
          'Maxine',
          'Maya',
          'Mayra',
          'Medina',
          'Medine',
          'Meike',
          'Melanie',
          'Melek',
          'Melike',
          'Melina',
          'Melinda',
          'Melis',
          'Melisa',
          'Melissa',
          'Merle',
          'Merve',
          'Meryem',
          'Mette',
          'Mia',
          'Michaela',
          'Michelle',
          'Mieke',
          'Mila',
          'Milana',
          'Milena',
          'Milla',
          'Mina',
          'Mira',
          'Miray',
          'Miriam',
          'Mirja',
          'Mona',
          'Monique',
          'Nadine',
          'Nadja',
          'Naemi',
          'Nancy',
          'Naomi',
          'Natalia',
          'Natalie',
          'Nathalie',
          'Neele',
          'Nela',
          'Nele',
          'Nelli',
          'Nelly',
          'Nia',
          'Nicole',
          'Nika',
          'Nike',
          'Nikita',
          'Nila',
          'Nina',
          'Nisa',
          'Noemi',
          'Nora',
          'Olivia',
          'Patricia',
          'Patrizia',
          'Paula',
          'Paulina',
          'Pauline',
          'Penelope',
          'Philine',
          'Phoebe',
          'Pia',
          'Rahel',
          'Rania',
          'Rebecca',
          'Rebekka',
          'Riana',
          'Rieke',
          'Rike',
          'Romina',
          'Romy',
          'Ronja',
          'Rosa',
          'Rosalie',
          'Ruby',
          'Sabrina',
          'Sahra',
          'Sally',
          'Salome',
          'Samantha',
          'Samia',
          'Samira',
          'Sandra',
          'Sandy',
          'Sanja',
          'Saphira',
          'Sara',
          'Sarah',
          'Saskia',
          'Selin',
          'Selina',
          'Selma',
          'Sena',
          'Sidney',
          'Sienna',
          'Silja',
          'Sina',
          'Sinja',
          'Smilla',
          'Sofia',
          'Sofie',
          'Sonja',
          'Sophia',
          'Sophie',
          'Soraya',
          'Stefanie',
          'Stella',
          'Stephanie',
          'Stina',
          'Sude',
          'Summer',
          'Susanne',
          'Svea',
          'Svenja',
          'Sydney',
          'Tabea',
          'Talea',
          'Talia',
          'Tamara',
          'Tamia',
          'Tamina',
          'Tanja',
          'Tara',
          'Tarja',
          'Teresa',
          'Tessa',
          'Thalea',
          'Thalia',
          'Thea',
          'Theresa',
          'Tia',
          'Tina',
          'Tomke',
          'Tuana',
          'Valentina',
          'Valeria',
          'Valerie',
          'Vanessa',
          'Vera',
          'Veronika',
          'Victoria',
          'Viktoria',
          'Viola',
          'Vivian',
          'Vivien',
          'Vivienne',
          'Wibke',
          'Wiebke',
          'Xenia',
          'Yara',
          'Yaren',
          'Yasmin',
          'Ylvi',
          'Ylvie',
          'Yvonne',
          'Zara',
          'Zehra',
          'Zeynep',
          'Zoe',
          'Zoey',
          'Zoé',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/de_AT/name/last_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Abel',
          'Abicht',
          'Abraham',
          'Abramovic',
          'Abt',
          'Achilles',
          'Achkinadze',
          'Ackermann',
          'Adam',
          'Adams',
          'Ade',
          'Agostini',
          'Ahlke',
          'Ahrenberg',
          'Ahrens',
          'Aigner',
          'Albert',
          'Albrecht',
          'Alexa',
          'Alexander',
          'Alizadeh',
          'Allgeyer',
          'Amann',
          'Amberg',
          'Anding',
          'Anggreny',
          'Apitz',
          'Arendt',
          'Arens',
          'Arndt',
          'Aryee',
          'Aschenbroich',
          'Assmus',
          'Astafei',
          'Auer',
          'Axmann',
          'Baarck',
          'Bachmann',
          'Badane',
          'Bader',
          'Baganz',
          'Bahl',
          'Bak',
          'Balcer',
          'Balck',
          'Balkow',
          'Balnuweit',
          'Balzer',
          'Banse',
          'Barr',
          'Bartels',
          'Barth',
          'Barylla',
          'Baseda',
          'Battke',
          'Bauer',
          'Bauermeister',
          'Baumann',
          'Baumeister',
          'Bauschinger',
          'Bauschke',
          'Bayer',
          'Beavogui',
          'Beck',
          'Beckel',
          'Becker',
          'Beckmann',
          'Bedewitz',
          'Beele',
          'Beer',
          'Beggerow',
          'Beh',
          'Behr',
          'Behrenbruch',
          'Belz',
          'Bender',
          'Benecke',
          'Benner',
          'Benninger',
          'Benzing',
          'Berends',
          'Berger',
          'Berner',
          'Berning',
          'Bertenbreiter',
          'Best',
          'Bethke',
          'Betz',
          'Beushausen',
          'Beutelspacher',
          'Beyer',
          'Biba',
          'Bichler',
          'Bickel',
          'Biedermann',
          'Bieler',
          'Bielert',
          'Bienasch',
          'Bienias',
          'Biesenbach',
          'Bigdeli',
          'Birkemeyer',
          'Bittner',
          'Blank',
          'Blaschek',
          'Blassneck',
          'Bloch',
          'Blochwitz',
          'Blockhaus',
          'Blum',
          'Blume',
          'Bock',
          'Bode',
          'Bogdashin',
          'Bogenrieder',
          'Bohge',
          'Bolm',
          'Borgschulze',
          'Bork',
          'Bormann',
          'Bornscheuer',
          'Borrmann',
          'Borsch',
          'Boruschewski',
          'Bos',
          'Bosler',
          'Bourrouag',
          'Bouschen',
          'Boxhammer',
          'Boyde',
          'Bozsik',
          'Brand',
          'Brandenburg',
          'Brandis',
          'Brandt',
          'Brauer',
          'Braun',
          'Brehmer',
          'Breitenstein',
          'Bremer',
          'Bremser',
          'Brenner',
          'Brettschneider',
          'Breu',
          'Breuer',
          'Briesenick',
          'Bringmann',
          'Brinkmann',
          'Brix',
          'Broening',
          'Brosch',
          'Bruckmann',
          'Bruder',
          'Bruhns',
          'Brunner',
          'Bruns',
          'Bräutigam',
          'Brömme',
          'Brüggmann',
          'Buchholz',
          'Buchrucker',
          'Buder',
          'Bultmann',
          'Bunjes',
          'Burger',
          'Burghagen',
          'Burkhard',
          'Burkhardt',
          'Burmeister',
          'Busch',
          'Buschbaum',
          'Busemann',
          'Buss',
          'Busse',
          'Bussmann',
          'Byrd',
          'Bäcker',
          'Böhm',
          'Bönisch',
          'Börgeling',
          'Börner',
          'Böttner',
          'Büchele',
          'Bühler',
          'Büker',
          'Büngener',
          'Bürger',
          'Bürklein',
          'Büscher',
          'Büttner',
          'Camara',
          'Carlowitz',
          'Carlsohn',
          'Caspari',
          'Caspers',
          'Chapron',
          'Christ',
          'Cierpinski',
          'Clarius',
          'Cleem',
          'Cleve',
          'Co',
          'Conrad',
          'Cordes',
          'Cornelsen',
          'Cors',
          'Cotthardt',
          'Crews',
          'Cronjäger',
          'Crosskofp',
          'Da',
          'Dahm',
          'Dahmen',
          'Daimer',
          'Damaske',
          'Danneberg',
          'Danner',
          'Daub',
          'Daubner',
          'Daudrich',
          'Dauer',
          'Daum',
          'Dauth',
          'Dautzenberg',
          'De',
          'Decker',
          'Deckert',
          'Deerberg',
          'Dehmel',
          'Deja',
          'Delonge',
          'Demut',
          'Dengler',
          'Denner',
          'Denzinger',
          'Derr',
          'Dertmann',
          'Dethloff',
          'Deuschle',
          'Dieckmann',
          'Diedrich',
          'Diekmann',
          'Dienel',
          'Dies',
          'Dietrich',
          'Dietz',
          'Dietzsch',
          'Diezel',
          'Dilla',
          'Dingelstedt',
          'Dippl',
          'Dittmann',
          'Dittmar',
          'Dittmer',
          'Dix',
          'Dobbrunz',
          'Dobler',
          'Dohring',
          'Dolch',
          'Dold',
          'Dombrowski',
          'Donie',
          'Doskoczynski',
          'Dragu',
          'Drechsler',
          'Drees',
          'Dreher',
          'Dreier',
          'Dreissigacker',
          'Dressler',
          'Drews',
          'Duma',
          'Dutkiewicz',
          'Dyett',
          'Dylus',
          'Dächert',
          'Döbel',
          'Döring',
          'Dörner',
          'Dörre',
          'Dück',
          'Eberhard',
          'Eberhardt',
          'Ecker',
          'Eckhardt',
          'Edorh',
          'Effler',
          'Eggenmueller',
          'Ehm',
          'Ehmann',
          'Ehrig',
          'Eich',
          'Eichmann',
          'Eifert',
          'Einert',
          'Eisenlauer',
          'Ekpo',
          'Elbe',
          'Eleyth',
          'Elss',
          'Emert',
          'Emmelmann',
          'Ender',
          'Engel',
          'Engelen',
          'Engelmann',
          'Eplinius',
          'Erdmann',
          'Erhardt',
          'Erlei',
          'Erm',
          'Ernst',
          'Ertl',
          'Erwes',
          'Esenwein',
          'Esser',
          'Evers',
          'Everts',
          'Ewald',
          'Fahner',
          'Faller',
          'Falter',
          'Farber',
          'Fassbender',
          'Faulhaber',
          'Fehrig',
          'Feld',
          'Felke',
          'Feller',
          'Fenner',
          'Fenske',
          'Feuerbach',
          'Fietz',
          'Figl',
          'Figura',
          'Filipowski',
          'Filsinger',
          'Fincke',
          'Fink',
          'Finke',
          'Fischer',
          'Fitschen',
          'Fleischer',
          'Fleischmann',
          'Floder',
          'Florczak',
          'Flore',
          'Flottmann',
          'Forkel',
          'Forst',
          'Frahmeke',
          'Frank',
          'Franke',
          'Franta',
          'Frantz',
          'Franz',
          'Franzis',
          'Franzmann',
          'Frauen',
          'Frauendorf',
          'Freigang',
          'Freimann',
          'Freimuth',
          'Freisen',
          'Frenzel',
          'Frey',
          'Fricke',
          'Fried',
          'Friedek',
          'Friedenberg',
          'Friedmann',
          'Friedrich',
          'Friess',
          'Frisch',
          'Frohn',
          'Frosch',
          'Fuchs',
          'Fuhlbrügge',
          'Fusenig',
          'Fust',
          'Förster',
          'Gaba',
          'Gabius',
          'Gabler',
          'Gadschiew',
          'Gakstädter',
          'Galander',
          'Gamlin',
          'Gamper',
          'Gangnus',
          'Ganzmann',
          'Garatva',
          'Gast',
          'Gastel',
          'Gatzka',
          'Gauder',
          'Gebhardt',
          'Geese',
          'Gehre',
          'Gehrig',
          'Gehring',
          'Gehrke',
          'Geiger',
          'Geisler',
          'Geissler',
          'Gelling',
          'Gens',
          'Gerbennow',
          'Gerdel',
          'Gerhardt',
          'Gerschler',
          'Gerson',
          'Gesell',
          'Geyer',
          'Ghirmai',
          'Ghosh',
          'Giehl',
          'Gierisch',
          'Giesa',
          'Giesche',
          'Gilde',
          'Glatting',
          'Goebel',
          'Goedicke',
          'Goldbeck',
          'Goldfuss',
          'Goldkamp',
          'Goldkühle',
          'Goller',
          'Golling',
          'Gollnow',
          'Golomski',
          'Gombert',
          'Gotthardt',
          'Gottschalk',
          'Gotz',
          'Goy',
          'Gradzki',
          'Graf',
          'Grams',
          'Grasse',
          'Gratzky',
          'Grau',
          'Greb',
          'Green',
          'Greger',
          'Greithanner',
          'Greschner',
          'Griem',
          'Griese',
          'Grimm',
          'Gromisch',
          'Gross',
          'Grosser',
          'Grossheim',
          'Grosskopf',
          'Grothaus',
          'Grothkopp',
          'Grotke',
          'Grube',
          'Gruber',
          'Grundmann',
          'Gruning',
          'Gruszecki',
          'Gröss',
          'Grötzinger',
          'Grün',
          'Grüner',
          'Gummelt',
          'Gunkel',
          'Gunther',
          'Gutjahr',
          'Gutowicz',
          'Gutschank',
          'Göbel',
          'Göckeritz',
          'Göhler',
          'Görlich',
          'Görmer',
          'Götz',
          'Götzelmann',
          'Güldemeister',
          'Günther',
          'Günz',
          'Gürbig',
          'Haack',
          'Haaf',
          'Habel',
          'Hache',
          'Hackbusch',
          'Hackelbusch',
          'Hadfield',
          'Hadwich',
          'Haferkamp',
          'Hahn',
          'Hajek',
          'Hallmann',
          'Hamann',
          'Hanenberger',
          'Hannecker',
          'Hanniske',
          'Hansen',
          'Hardy',
          'Hargasser',
          'Harms',
          'Harnapp',
          'Harter',
          'Harting',
          'Hartlieb',
          'Hartmann',
          'Hartwig',
          'Hartz',
          'Haschke',
          'Hasler',
          'Hasse',
          'Hassfeld',
          'Haug',
          'Hauke',
          'Haupt',
          'Haverney',
          'Heberstreit',
          'Hechler',
          'Hecht',
          'Heck',
          'Hedermann',
          'Hehl',
          'Heidelmann',
          'Heidler',
          'Heinemann',
          'Heinig',
          'Heinke',
          'Heinrich',
          'Heinze',
          'Heiser',
          'Heist',
          'Hellmann',
          'Helm',
          'Helmke',
          'Helpling',
          'Hengmith',
          'Henkel',
          'Hennes',
          'Henry',
          'Hense',
          'Hensel',
          'Hentel',
          'Hentschel',
          'Hentschke',
          'Hepperle',
          'Herberger',
          'Herbrand',
          'Hering',
          'Hermann',
          'Hermecke',
          'Herms',
          'Herold',
          'Herrmann',
          'Herschmann',
          'Hertel',
          'Herweg',
          'Herwig',
          'Herzenberg',
          'Hess',
          'Hesse',
          'Hessek',
          'Hessler',
          'Hetzler',
          'Heuck',
          'Heydemüller',
          'Hiebl',
          'Hildebrand',
          'Hildenbrand',
          'Hilgendorf',
          'Hillard',
          'Hiller',
          'Hingsen',
          'Hingst',
          'Hinrichs',
          'Hirsch',
          'Hirschberg',
          'Hirt',
          'Hodea',
          'Hoffman',
          'Hoffmann',
          'Hofmann',
          'Hohenberger',
          'Hohl',
          'Hohn',
          'Hohnheiser',
          'Hold',
          'Holdt',
          'Holinski',
          'Holl',
          'Holtfreter',
          'Holz',
          'Holzdeppe',
          'Holzner',
          'Hommel',
          'Honz',
          'Hooss',
          'Hoppe',
          'Horak',
          'Horn',
          'Horna',
          'Hornung',
          'Hort',
          'Howard',
          'Huber',
          'Huckestein',
          'Hudak',
          'Huebel',
          'Hugo',
          'Huhn',
          'Hujo',
          'Huke',
          'Huls',
          'Humbert',
          'Huneke',
          'Huth',
          'Häber',
          'Häfner',
          'Höcke',
          'Höft',
          'Höhne',
          'Hönig',
          'Hördt',
          'Hübenbecker',
          'Hübl',
          'Hübner',
          'Hügel',
          'Hüttcher',
          'Hütter',
          'Ibe',
          'Ihly',
          'Illing',
          'Isak',
          'Isekenmeier',
          'Itt',
          'Jacob',
          'Jacobs',
          'Jagusch',
          'Jahn',
          'Jahnke',
          'Jakobs',
          'Jakubczyk',
          'Jambor',
          'Jamrozy',
          'Jander',
          'Janich',
          'Janke',
          'Jansen',
          'Jarets',
          'Jaros',
          'Jasinski',
          'Jasper',
          'Jegorov',
          'Jellinghaus',
          'Jeorga',
          'Jerschabek',
          'Jess',
          'John',
          'Jonas',
          'Jossa',
          'Jucken',
          'Jung',
          'Jungbluth',
          'Jungton',
          'Just',
          'Jürgens',
          'Kaczmarek',
          'Kaesmacher',
          'Kahl',
          'Kahlert',
          'Kahles',
          'Kahlmeyer',
          'Kaiser',
          'Kalinowski',
          'Kallabis',
          'Kallensee',
          'Kampf',
          'Kampschulte',
          'Kappe',
          'Kappler',
          'Karhoff',
          'Karrass',
          'Karst',
          'Karsten',
          'Karus',
          'Kass',
          'Kasten',
          'Kastner',
          'Katzinski',
          'Kaufmann',
          'Kaul',
          'Kausemann',
          'Kawohl',
          'Kazmarek',
          'Kedzierski',
          'Keil',
          'Keiner',
          'Keller',
          'Kelm',
          'Kempe',
          'Kemper',
          'Kempter',
          'Kerl',
          'Kern',
          'Kesselring',
          'Kesselschläger',
          'Kette',
          'Kettenis',
          'Keutel',
          'Kick',
          'Kiessling',
          'Kinadeter',
          'Kinzel',
          'Kinzy',
          'Kirch',
          'Kirst',
          'Kisabaka',
          'Klaas',
          'Klabuhn',
          'Klapper',
          'Klauder',
          'Klaus',
          'Kleeberg',
          'Kleiber',
          'Klein',
          'Kleinert',
          'Kleininger',
          'Kleinmann',
          'Kleinsteuber',
          'Kleiss',
          'Klemme',
          'Klimczak',
          'Klinger',
          'Klink',
          'Klopsch',
          'Klose',
          'Kloss',
          'Kluge',
          'Kluwe',
          'Knabe',
          'Kneifel',
          'Knetsch',
          'Knies',
          'Knippel',
          'Knobel',
          'Knoblich',
          'Knoll',
          'Knorr',
          'Knorscheidt',
          'Knut',
          'Kobs',
          'Koch',
          'Kochan',
          'Kock',
          'Koczulla',
          'Koderisch',
          'Koehl',
          'Koehler',
          'Koenig',
          'Koester',
          'Kofferschlager',
          'Koha',
          'Kohle',
          'Kohlmann',
          'Kohnle',
          'Kohrt',
          'Koj',
          'Kolb',
          'Koleiski',
          'Kolokas',
          'Komoll',
          'Konieczny',
          'Konig',
          'Konow',
          'Konya',
          'Koob',
          'Kopf',
          'Kosenkow',
          'Koster',
          'Koszewski',
          'Koubaa',
          'Kovacs',
          'Kowalick',
          'Kowalinski',
          'Kozakiewicz',
          'Krabbe',
          'Kraft',
          'Kral',
          'Kramer',
          'Krauel',
          'Kraus',
          'Krause',
          'Krauspe',
          'Kreb',
          'Krebs',
          'Kreissig',
          'Kresse',
          'Kreutz',
          'Krieger',
          'Krippner',
          'Krodinger',
          'Krohn',
          'Krol',
          'Kron',
          'Krueger',
          'Krug',
          'Kruger',
          'Krull',
          'Kruschinski',
          'Krämer',
          'Kröckert',
          'Kröger',
          'Krüger',
          'Kubera',
          'Kufahl',
          'Kuhlee',
          'Kuhnen',
          'Kulimann',
          'Kulma',
          'Kumbernuss',
          'Kummle',
          'Kunz',
          'Kupfer',
          'Kupprion',
          'Kuprion',
          'Kurnicki',
          'Kurrat',
          'Kurschilgen',
          'Kuschewitz',
          'Kuschmann',
          'Kuske',
          'Kustermann',
          'Kutscherauer',
          'Kutzner',
          'Kwadwo',
          'Kähler',
          'Käther',
          'Köhler',
          'Köhrbrück',
          'Köhre',
          'Kölotzei',
          'König',
          'Köpernick',
          'Köseoglu',
          'Kúhn',
          'Kúhnert',
          'Kühn',
          'Kühnel',
          'Kühnemund',
          'Kühnert',
          'Kühnke',
          'Küsters',
          'Küter',
          'Laack',
          'Lack',
          'Ladewig',
          'Lakomy',
          'Lammert',
          'Lamos',
          'Landmann',
          'Lang',
          'Lange',
          'Langfeld',
          'Langhirt',
          'Lanig',
          'Lauckner',
          'Lauinger',
          'Laurén',
          'Lausecker',
          'Laux',
          'Laws',
          'Lax',
          'Leberer',
          'Lehmann',
          'Lehner',
          'Leibold',
          'Leide',
          'Leimbach',
          'Leipold',
          'Leist',
          'Leiter',
          'Leiteritz',
          'Leitheim',
          'Leiwesmeier',
          'Lenfers',
          'Lenk',
          'Lenz',
          'Lenzen',
          'Leo',
          'Lepthin',
          'Lesch',
          'Leschnik',
          'Letzelter',
          'Lewin',
          'Lewke',
          'Leyckes',
          'Lg',
          'Lichtenfeld',
          'Lichtenhagen',
          'Lichtl',
          'Liebach',
          'Liebe',
          'Liebich',
          'Liebold',
          'Lieder',
          'Lienshöft',
          'Linden',
          'Lindenberg',
          'Lindenmayer',
          'Lindner',
          'Linke',
          'Linnenbaum',
          'Lippe',
          'Lipske',
          'Lipus',
          'Lischka',
          'Lobinger',
          'Logsch',
          'Lohmann',
          'Lohre',
          'Lohse',
          'Lokar',
          'Loogen',
          'Lorenz',
          'Losch',
          'Loska',
          'Lott',
          'Loy',
          'Lubina',
          'Ludolf',
          'Lufft',
          'Lukoschek',
          'Lutje',
          'Lutz',
          'Löser',
          'Löwa',
          'Lübke',
          'Maak',
          'Maczey',
          'Madetzky',
          'Madubuko',
          'Mai',
          'Maier',
          'Maisch',
          'Malek',
          'Malkus',
          'Mallmann',
          'Malucha',
          'Manns',
          'Manz',
          'Marahrens',
          'Marchewski',
          'Margis',
          'Markowski',
          'Marl',
          'Marner',
          'Marquart',
          'Marschek',
          'Martel',
          'Marten',
          'Martin',
          'Marx',
          'Marxen',
          'Mathes',
          'Mathies',
          'Mathiszik',
          'Matschke',
          'Mattern',
          'Matthes',
          'Matula',
          'Mau',
          'Maurer',
          'Mauroff',
          'May',
          'Maybach',
          'Mayer',
          'Mebold',
          'Mehl',
          'Mehlhorn',
          'Mehlorn',
          'Meier',
          'Meisch',
          'Meissner',
          'Meloni',
          'Melzer',
          'Menga',
          'Menne',
          'Mensah',
          'Mensing',
          'Merkel',
          'Merseburg',
          'Mertens',
          'Mesloh',
          'Metzger',
          'Metzner',
          'Mewes',
          'Meyer',
          'Michallek',
          'Michel',
          'Mielke',
          'Mikitenko',
          'Milde',
          'Minah',
          'Mintzlaff',
          'Mockenhaupt',
          'Moede',
          'Moedl',
          'Moeller',
          'Moguenara',
          'Mohr',
          'Mohrhard',
          'Molitor',
          'Moll',
          'Moller',
          'Molzan',
          'Montag',
          'Moormann',
          'Mordhorst',
          'Morgenstern',
          'Morhelfer',
          'Moritz',
          'Moser',
          'Motchebon',
          'Motzenbbäcker',
          'Mrugalla',
          'Muckenthaler',
          'Mues',
          'Muller',
          'Mulrain',
          'Mächtig',
          'Mäder',
          'Möcks',
          'Mögenburg',
          'Möhsner',
          'Möldner',
          'Möllenbeck',
          'Möller',
          'Möllinger',
          'Mörsch',
          'Mühleis',
          'Müller',
          'Münch',
          'Nabein',
          'Nabow',
          'Nagel',
          'Nannen',
          'Nastvogel',
          'Nau',
          'Naubert',
          'Naumann',
          'Ne',
          'Neimke',
          'Nerius',
          'Neubauer',
          'Neubert',
          'Neuendorf',
          'Neumair',
          'Neumann',
          'Neupert',
          'Neurohr',
          'Neuschwander',
          'Newton',
          'Ney',
          'Nicolay',
          'Niedermeier',
          'Nieklauson',
          'Niklaus',
          'Nitzsche',
          'Noack',
          'Nodler',
          'Nolte',
          'Normann',
          'Norris',
          'Northoff',
          'Nowak',
          'Nussbeck',
          'Nwachukwu',
          'Nytra',
          'Nöh',
          'Oberem',
          'Obergföll',
          'Obermaier',
          'Ochs',
          'Oeser',
          'Olbrich',
          'Onnen',
          'Ophey',
          'Oppong',
          'Orth',
          'Orthmann',
          'Oschkenat',
          'Osei',
          'Osenberg',
          'Ostendarp',
          'Ostwald',
          'Otte',
          'Otto',
          'Paesler',
          'Pajonk',
          'Pallentin',
          'Panzig',
          'Paschke',
          'Patzwahl',
          'Paukner',
          'Peselman',
          'Peter',
          'Peters',
          'Petzold',
          'Pfeiffer',
          'Pfennig',
          'Pfersich',
          'Pfingsten',
          'Pflieger',
          'Pflügner',
          'Philipp',
          'Pichlmaier',
          'Piesker',
          'Pietsch',
          'Pingpank',
          'Pinnock',
          'Pippig',
          'Pitschugin',
          'Plank',
          'Plass',
          'Platzer',
          'Plauk',
          'Plautz',
          'Pletsch',
          'Plotzitzka',
          'Poehn',
          'Poeschl',
          'Pogorzelski',
          'Pohl',
          'Pohland',
          'Pohle',
          'Polifka',
          'Polizzi',
          'Pollmächer',
          'Pomp',
          'Ponitzsch',
          'Porsche',
          'Porth',
          'Poschmann',
          'Poser',
          'Pottel',
          'Prah',
          'Prange',
          'Prediger',
          'Pressler',
          'Preuk',
          'Preuss',
          'Prey',
          'Priemer',
          'Proske',
          'Pusch',
          'Pöche',
          'Pöge',
          'Raabe',
          'Rabenstein',
          'Rach',
          'Radtke',
          'Rahn',
          'Ranftl',
          'Rangen',
          'Ranz',
          'Rapp',
          'Rath',
          'Rau',
          'Raubuch',
          'Raukuc',
          'Rautenkranz',
          'Rehwagen',
          'Reiber',
          'Reichardt',
          'Reichel',
          'Reichling',
          'Reif',
          'Reifenrath',
          'Reimann',
          'Reinberg',
          'Reinelt',
          'Reinhardt',
          'Reinke',
          'Reitze',
          'Renk',
          'Rentz',
          'Renz',
          'Reppin',
          'Restle',
          'Restorff',
          'Retzke',
          'Reuber',
          'Reumann',
          'Reus',
          'Reuss',
          'Reusse',
          'Rheder',
          'Rhoden',
          'Richards',
          'Richter',
          'Riedel',
          'Riediger',
          'Rieger',
          'Riekmann',
          'Riepl',
          'Riermeier',
          'Riester',
          'Riethmüller',
          'Rietmüller',
          'Rietscher',
          'Ringel',
          'Ringer',
          'Rink',
          'Ripken',
          'Ritosek',
          'Ritschel',
          'Ritter',
          'Rittweg',
          'Ritz',
          'Roba',
          'Rockmeier',
          'Rodehau',
          'Rodowski',
          'Roecker',
          'Roggatz',
          'Rohländer',
          'Rohrer',
          'Rokossa',
          'Roleder',
          'Roloff',
          'Roos',
          'Rosbach',
          'Roschinsky',
          'Rose',
          'Rosenauer',
          'Rosenbauer',
          'Rosenthal',
          'Rosksch',
          'Rossberg',
          'Rossler',
          'Roth',
          'Rother',
          'Ruch',
          'Ruckdeschel',
          'Rumpf',
          'Rupprecht',
          'Ruth',
          'Ryjikh',
          'Ryzih',
          'Rädler',
          'Räntsch',
          'Rödiger',
          'Röse',
          'Röttger',
          'Rücker',
          'Rüdiger',
          'Rüter',
          'Sachse',
          'Sack',
          'Saflanis',
          'Sagafe',
          'Sagonas',
          'Sahner',
          'Saile',
          'Sailer',
          'Salow',
          'Salzer',
          'Salzmann',
          'Sammert',
          'Sander',
          'Sarvari',
          'Sattelmaier',
          'Sauer',
          'Sauerland',
          'Saumweber',
          'Savoia',
          'Scc',
          'Schacht',
          'Schaefer',
          'Schaffarzik',
          'Schahbasian',
          'Scharf',
          'Schedler',
          'Scheer',
          'Schelk',
          'Schellenbeck',
          'Schembera',
          'Schenk',
          'Scherbarth',
          'Scherer',
          'Schersing',
          'Scherz',
          'Scheurer',
          'Scheuring',
          'Scheytt',
          'Schielke',
          'Schieskow',
          'Schildhauer',
          'Schilling',
          'Schima',
          'Schimmer',
          'Schindzielorz',
          'Schirmer',
          'Schirrmeister',
          'Schlachter',
          'Schlangen',
          'Schlawitz',
          'Schlechtweg',
          'Schley',
          'Schlicht',
          'Schlitzer',
          'Schmalzle',
          'Schmid',
          'Schmidt',
          'Schmidtchen',
          'Schmitt',
          'Schmitz',
          'Schmuhl',
          'Schneider',
          'Schnelting',
          'Schnieder',
          'Schniedermeier',
          'Schnürer',
          'Schoberg',
          'Scholz',
          'Schonberg',
          'Schondelmaier',
          'Schorr',
          'Schott',
          'Schottmann',
          'Schouren',
          'Schrader',
          'Schramm',
          'Schreck',
          'Schreiber',
          'Schreiner',
          'Schreiter',
          'Schroder',
          'Schröder',
          'Schuermann',
          'Schuff',
          'Schuhaj',
          'Schuldt',
          'Schult',
          'Schulte',
          'Schultz',
          'Schultze',
          'Schulz',
          'Schulze',
          'Schumacher',
          'Schumann',
          'Schupp',
          'Schuri',
          'Schuster',
          'Schwab',
          'Schwalm',
          'Schwanbeck',
          'Schwandke',
          'Schwanitz',
          'Schwarthoff',
          'Schwartz',
          'Schwarz',
          'Schwarzer',
          'Schwarzkopf',
          'Schwarzmeier',
          'Schwatlo',
          'Schweisfurth',
          'Schwennen',
          'Schwerdtner',
          'Schwidde',
          'Schwirkschlies',
          'Schwuchow',
          'Schäfer',
          'Schäffel',
          'Schäffer',
          'Schäning',
          'Schöckel',
          'Schönball',
          'Schönbeck',
          'Schönberg',
          'Schönebeck',
          'Schönenberger',
          'Schönfeld',
          'Schönherr',
          'Schönlebe',
          'Schötz',
          'Schüler',
          'Schüppel',
          'Schütz',
          'Schütze',
          'Seeger',
          'Seelig',
          'Sehls',
          'Seibold',
          'Seidel',
          'Seiders',
          'Seigel',
          'Seiler',
          'Seitz',
          'Semisch',
          'Senkel',
          'Sewald',
          'Siebel',
          'Siebert',
          'Siegling',
          'Sielemann',
          'Siemon',
          'Siener',
          'Sievers',
          'Siewert',
          'Sihler',
          'Sillah',
          'Simon',
          'Sinnhuber',
          'Sischka',
          'Skibicki',
          'Sladek',
          'Slotta',
          'Smieja',
          'Soboll',
          'Sokolowski',
          'Soller',
          'Sollner',
          'Sommer',
          'Somssich',
          'Sonn',
          'Sonnabend',
          'Spahn',
          'Spank',
          'Spelmeyer',
          'Spiegelburg',
          'Spielvogel',
          'Spinner',
          'Spitzmüller',
          'Splinter',
          'Sporrer',
          'Sprenger',
          'Spöttel',
          'Stahl',
          'Stang',
          'Stanger',
          'Stauss',
          'Steding',
          'Steffen',
          'Steffny',
          'Steidl',
          'Steigauf',
          'Stein',
          'Steinecke',
          'Steinert',
          'Steinkamp',
          'Steinmetz',
          'Stelkens',
          'Stengel',
          'Stengl',
          'Stenzel',
          'Stepanov',
          'Stephan',
          'Stern',
          'Steuk',
          'Stief',
          'Stifel',
          'Stoll',
          'Stolle',
          'Stolz',
          'Storl',
          'Storp',
          'Stoutjesdijk',
          'Stratmann',
          'Straub',
          'Strausa',
          'Streck',
          'Streese',
          'Strege',
          'Streit',
          'Streller',
          'Strieder',
          'Striezel',
          'Strogies',
          'Strohschank',
          'Strunz',
          'Strutz',
          'Stube',
          'Stöckert',
          'Stöppler',
          'Stöwer',
          'Stürmer',
          'Suffa',
          'Sujew',
          'Sussmann',
          'Suthe',
          'Sutschet',
          'Swillims',
          'Szendrei',
          'Sören',
          'Sürth',
          'Tafelmeier',
          'Tang',
          'Tasche',
          'Taufratshofer',
          'Tegethof',
          'Teichmann',
          'Tepper',
          'Terheiden',
          'Terlecki',
          'Teufel',
          'Theele',
          'Thieke',
          'Thimm',
          'Thiomas',
          'Thomas',
          'Thriene',
          'Thränhardt',
          'Thust',
          'Thyssen',
          'Thöne',
          'Tidow',
          'Tiedtke',
          'Tietze',
          'Tilgner',
          'Tillack',
          'Timmermann',
          'Tischler',
          'Tischmann',
          'Tittman',
          'Tivontschik',
          'Tonat',
          'Tonn',
          'Trampeli',
          'Trauth',
          'Trautmann',
          'Travan',
          'Treff',
          'Tremmel',
          'Tress',
          'Tsamonikian',
          'Tschiers',
          'Tschirch',
          'Tuch',
          'Tucholke',
          'Tudow',
          'Tuschmo',
          'Tächl',
          'Többen',
          'Töpfer',
          'Uhlemann',
          'Uhlig',
          'Uhrig',
          'Uibel',
          'Uliczka',
          'Ullmann',
          'Ullrich',
          'Umbach',
          'Umlauft',
          'Umminger',
          'Unger',
          'Unterpaintner',
          'Urban',
          'Urbaniak',
          'Urbansky',
          'Urhig',
          'Vahlensieck',
          'Van',
          'Vangermain',
          'Vater',
          'Venghaus',
          'Verniest',
          'Verzi',
          'Vey',
          'Viellehner',
          'Vieweg',
          'Voelkel',
          'Vogel',
          'Vogelgsang',
          'Vogt',
          'Voigt',
          'Vokuhl',
          'Volk',
          'Volker',
          'Volkmann',
          'Von',
          'Vona',
          'Vontein',
          'Wachenbrunner',
          'Wachtel',
          'Wagner',
          'Waibel',
          'Wakan',
          'Waldmann',
          'Wallner',
          'Wallstab',
          'Walter',
          'Walther',
          'Walton',
          'Walz',
          'Wanner',
          'Wartenberg',
          'Waschbüsch',
          'Wassilew',
          'Wassiluk',
          'Weber',
          'Wehrsen',
          'Weidlich',
          'Weidner',
          'Weigel',
          'Weight',
          'Weiler',
          'Weimer',
          'Weis',
          'Weiss',
          'Weller',
          'Welsch',
          'Welz',
          'Welzel',
          'Weniger',
          'Wenk',
          'Werle',
          'Werner',
          'Werrmann',
          'Wessel',
          'Wessinghage',
          'Weyel',
          'Wezel',
          'Wichmann',
          'Wickert',
          'Wiebe',
          'Wiechmann',
          'Wiegelmann',
          'Wierig',
          'Wiese',
          'Wieser',
          'Wilhelm',
          'Wilky',
          'Will',
          'Willwacher',
          'Wilts',
          'Wimmer',
          'Winkelmann',
          'Winkler',
          'Winter',
          'Wischek',
          'Wischer',
          'Wissing',
          'Wittich',
          'Wittl',
          'Wolf',
          'Wolfarth',
          'Wolff',
          'Wollenberg',
          'Wollmann',
          'Woytkowska',
          'Wujak',
          'Wurm',
          'Wyludda',
          'Wölpert',
          'Wöschler',
          'Wühn',
          'Wünsche',
          'Zach',
          'Zaczkiewicz',
          'Zahn',
          'Zaituc',
          'Zandt',
          'Zanner',
          'Zapletal',
          'Zauber',
          'Zeidler',
          'Zekl',
          'Zender',
          'Zeuch',
          'Zeyen',
          'Zeyhle',
          'Ziegler',
          'Zimanyi',
          'Zimmer',
          'Zimmermann',
          'Zinser',
          'Zintl',
          'Zipp',
          'Zipse',
          'Zschunke',
          'Zuber',
          'Zwiener',
          'Zümsande',
          'Östringer',
          'Überacker',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/de_AT/name/prefix.js': [
      function(require, module, exports) {
        module['exports'] = ['Dr.', 'Prof. Dr.']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/de_AT/name/nobility_title_prefix.js': [
      function(require, module, exports) {
        module['exports'] = ['zu', 'von', 'vom', 'von der']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/de_AT/name/name.js': [
      function(require, module, exports) {
        module['exports'] = [
          '#{prefix} #{first_name} #{last_name}',
          '#{first_name} #{nobility_title_prefix} #{last_name}',
          '#{first_name} #{last_name}',
          '#{first_name} #{last_name}',
          '#{first_name} #{last_name}',
          '#{first_name} #{last_name}',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/de_AT/name/index.js': [
      function(require, module, exports) {
        var name = {}
        module['exports'] = name
        name.first_name = require('./first_name')
        name.last_name = require('./last_name')
        name.prefix = require('./prefix')
        name.nobility_title_prefix = require('./nobility_title_prefix')
        name.name = require('./name')
      },
      {
        './first_name':
          '../node_modules/faker/lib/locales/de_AT/name/first_name.js',
        './last_name':
          '../node_modules/faker/lib/locales/de_AT/name/last_name.js',
        './prefix':
          '../node_modules/faker/lib/locales/de_AT/name/prefix.js',
        './nobility_title_prefix':
          '../node_modules/faker/lib/locales/de_AT/name/nobility_title_prefix.js',
        './name': '../node_modules/faker/lib/locales/de_AT/name/name.js',
      },
    ],
    '../node_modules/faker/lib/locales/de_AT/phone_number/formats.js': [
      function(require, module, exports) {
        module['exports'] = [
          '01 #######',
          '01#######',
          '+43-1-#######',
          '+431#######',
          '0#### ####',
          '0#########',
          '+43-####-####',
          '+43 ########',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/de_AT/phone_number/index.js': [
      function(require, module, exports) {
        var phone_number = {}
        module['exports'] = phone_number
        phone_number.formats = require('./formats')
      },
      {
        './formats':
          '../node_modules/faker/lib/locales/de_AT/phone_number/formats.js',
      },
    ],
    '../node_modules/faker/lib/locales/de_AT/cell_phone/formats.js': [
      function(require, module, exports) {
        module['exports'] = [
          '+43-6##-#######',
          '06##-########',
          '+436#########',
          '06##########',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/de_AT/cell_phone/index.js': [
      function(require, module, exports) {
        var cell_phone = {}
        module['exports'] = cell_phone
        cell_phone.formats = require('./formats')
      },
      {
        './formats':
          '../node_modules/faker/lib/locales/de_AT/cell_phone/formats.js',
      },
    ],
    '../node_modules/faker/lib/locales/de_AT/index.js': [
      function(require, module, exports) {
        var de_AT = {}
        module['exports'] = de_AT
        de_AT.title = 'German (Austria)'
        de_AT.address = require('./address')
        de_AT.company = require('./company')
        de_AT.internet = require('./internet')
        de_AT.name = require('./name')
        de_AT.phone_number = require('./phone_number')
        de_AT.cell_phone = require('./cell_phone')
      },
      {
        './address':
          '../node_modules/faker/lib/locales/de_AT/address/index.js',
        './company':
          '../node_modules/faker/lib/locales/de_AT/company/index.js',
        './internet':
          '../node_modules/faker/lib/locales/de_AT/internet/index.js',
        './name': '../node_modules/faker/lib/locales/de_AT/name/index.js',
        './phone_number':
          '../node_modules/faker/lib/locales/de_AT/phone_number/index.js',
        './cell_phone':
          '../node_modules/faker/lib/locales/de_AT/cell_phone/index.js',
      },
    ],
    '../node_modules/faker/lib/locales/de_CH/address/country_code.js': [
      function(require, module, exports) {
        module['exports'] = [
          'CH',
          'CH',
          'CH',
          'DE',
          'AT',
          'US',
          'LI',
          'US',
          'HK',
          'VN',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/de_CH/address/postcode.js': [
      function(require, module, exports) {
        module['exports'] = [
          '1###',
          '2###',
          '3###',
          '4###',
          '5###',
          '6###',
          '7###',
          '8###',
          '9###',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/de_CH/address/default_country.js': [
      function(require, module, exports) {
        module['exports'] = ['Schweiz']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/de_CH/address/index.js': [
      function(require, module, exports) {
        var address = {}
        module['exports'] = address
        address.country_code = require('./country_code')
        address.postcode = require('./postcode')
        address.default_country = require('./default_country')
      },
      {
        './country_code':
          '../node_modules/faker/lib/locales/de_CH/address/country_code.js',
        './postcode':
          '../node_modules/faker/lib/locales/de_CH/address/postcode.js',
        './default_country':
          '../node_modules/faker/lib/locales/de_CH/address/default_country.js',
      },
    ],
    '../node_modules/faker/lib/locales/de_CH/company/suffix.js': [
      function(require, module, exports) {
        module['exports'] = [
          'AG',
          'GmbH',
          'und Söhne',
          'und Partner',
          '& Co.',
          'Gruppe',
          'LLC',
          'Inc.',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/de_CH/company/name.js': [
      function(require, module, exports) {
        module['exports'] = [
          '#{Name.last_name} #{suffix}',
          '#{Name.last_name}-#{Name.last_name}',
          '#{Name.last_name}, #{Name.last_name} und #{Name.last_name}',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/de_CH/company/index.js': [
      function(require, module, exports) {
        var company = {}
        module['exports'] = company
        company.suffix = require('./suffix')
        company.name = require('./name')
      },
      {
        './suffix':
          '../node_modules/faker/lib/locales/de_CH/company/suffix.js',
        './name':
          '../node_modules/faker/lib/locales/de_CH/company/name.js',
      },
    ],
    '../node_modules/faker/lib/locales/de_CH/internet/domain_suffix.js': [
      function(require, module, exports) {
        module['exports'] = [
          'com',
          'net',
          'biz',
          'ch',
          'de',
          'li',
          'at',
          'ch',
          'ch',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/de_CH/internet/index.js': [
      function(require, module, exports) {
        var internet = {}
        module['exports'] = internet
        internet.domain_suffix = require('./domain_suffix')
      },
      {
        './domain_suffix':
          '../node_modules/faker/lib/locales/de_CH/internet/domain_suffix.js',
      },
    ],
    '../node_modules/faker/lib/locales/de_CH/name/first_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Adolf',
          'Adrian',
          'Agnes',
          'Alain',
          'Albert',
          'Alberto',
          'Aldo',
          'Alex',
          'Alexander',
          'Alexandre',
          'Alfons',
          'Alfred',
          'Alice',
          'Alois',
          'André',
          'Andrea',
          'Andreas',
          'Angela',
          'Angelo',
          'Anita',
          'Anna',
          'Anne',
          'Anne-Marie',
          'Annemarie',
          'Antoine',
          'Anton',
          'Antonio',
          'Armin',
          'Arnold',
          'Arthur',
          'Astrid',
          'Barbara',
          'Beat',
          'Beatrice',
          'Beatrix',
          'Bernadette',
          'Bernard',
          'Bernhard',
          'Bettina',
          'Brigitta',
          'Brigitte',
          'Bruno',
          'Carlo',
          'Carmen',
          'Caroline',
          'Catherine',
          'Chantal',
          'Charles',
          'Charlotte',
          'Christa',
          'Christian',
          'Christiane',
          'Christina',
          'Christine',
          'Christoph',
          'Christophe',
          'Claire',
          'Claude',
          'Claudia',
          'Claudine',
          'Claudio',
          'Corinne',
          'Cornelia',
          'Daniel',
          'Daniela',
          'Daniele',
          'Danielle',
          'David',
          'Denis',
          'Denise',
          'Didier',
          'Dieter',
          'Dominik',
          'Dominique',
          'Dora',
          'Doris',
          'Edgar',
          'Edith',
          'Eduard',
          'Edwin',
          'Eliane',
          'Elisabeth',
          'Elsa',
          'Elsbeth',
          'Emil',
          'Enrico',
          'Eric',
          'Erica',
          'Erich',
          'Erika',
          'Ernst',
          'Erwin',
          'Esther',
          'Eugen',
          'Eva',
          'Eveline',
          'Evelyne',
          'Fabienne',
          'Felix',
          'Ferdinand',
          'Florence',
          'Francesco',
          'Francis',
          'Franco',
          'François',
          'Françoise',
          'Frank',
          'Franz',
          'Franziska',
          'Frédéric',
          'Fredy',
          'Fridolin',
          'Friedrich',
          'Fritz',
          'Gabriel',
          'Gabriela',
          'Gabrielle',
          'Georg',
          'Georges',
          'Gérald',
          'Gérard',
          'Gerhard',
          'Gertrud',
          'Gianni',
          'Gilbert',
          'Giorgio',
          'Giovanni',
          'Gisela',
          'Giuseppe',
          'Gottfried',
          'Guido',
          'Guy',
          'Hanna',
          'Hans',
          'Hans-Peter',
          'Hans-Rudolf',
          'Hans-Ulrich',
          'Hansjörg',
          'Hanspeter',
          'Hansruedi',
          'Hansueli',
          'Harry',
          'Heidi',
          'Heinrich',
          'Heinz',
          'Helen',
          'Helena',
          'Helene',
          'Helmut',
          'Henri',
          'Herbert',
          'Hermann',
          'Hildegard',
          'Hubert',
          'Hugo',
          'Ingrid',
          'Irene',
          'Iris',
          'Isabelle',
          'Jacqueline',
          'Jacques',
          'Jakob',
          'Jan',
          'Janine',
          'Jean',
          'Jean-Claude',
          'Jean-Daniel',
          'Jean-François',
          'Jean-Jacques',
          'Jean-Louis',
          'Jean-Luc',
          'Jean-Marc',
          'Jean-Marie',
          'Jean-Paul',
          'Jean-Pierre',
          'Johann',
          'Johanna',
          'Johannes',
          'John',
          'Jolanda',
          'Jörg',
          'Josef',
          'Joseph',
          'Josette',
          'Josiane',
          'Judith',
          'Julia',
          'Jürg',
          'Karin',
          'Karl',
          'Katharina',
          'Klaus',
          'Konrad',
          'Kurt',
          'Laura',
          'Laurence',
          'Laurent',
          'Leo',
          'Liliane',
          'Liselotte',
          'Louis',
          'Luca',
          'Luigi',
          'Lukas',
          'Lydia',
          'Madeleine',
          'Maja',
          'Manfred',
          'Manuel',
          'Manuela',
          'Marc',
          'Marcel',
          'Marco',
          'Margrit',
          'Margrith',
          'Maria',
          'Marianne',
          'Mario',
          'Marion',
          'Markus',
          'Marlène',
          'Marlies',
          'Marlis',
          'Martha',
          'Martin',
          'Martina',
          'Martine',
          'Massimo',
          'Matthias',
          'Maurice',
          'Max',
          'Maya',
          'Michael',
          'Michel',
          'Michele',
          'Micheline',
          'Monica',
          'Monika',
          'Monique',
          'Myriam',
          'Nadia',
          'Nadja',
          'Nathalie',
          'Nelly',
          'Nicolas',
          'Nicole',
          'Niklaus',
          'Norbert',
          'Olivier',
          'Oskar',
          'Otto',
          'Paola',
          'Paolo',
          'Pascal',
          'Patricia',
          'Patrick',
          'Paul',
          'Peter',
          'Petra',
          'Philipp',
          'Philippe',
          'Pia',
          'Pierre',
          'Pierre-Alain',
          'Pierre-André',
          'Pius',
          'Priska',
          'Rainer',
          'Raymond',
          'Regina',
          'Regula',
          'Reinhard',
          'Remo',
          'Renata',
          'Renate',
          'Renato',
          'Rene',
          'René',
          'Reto',
          'Richard',
          'Rita',
          'Robert',
          'Roberto',
          'Roger',
          'Roland',
          'Rolf',
          'Roman',
          'Rosa',
          'Rosemarie',
          'Rosmarie',
          'Rudolf',
          'Ruedi',
          'Ruth',
          'Sabine',
          'Samuel',
          'Sandra',
          'Sandro',
          'Serge',
          'Silvia',
          'Silvio',
          'Simon',
          'Simone',
          'Sonia',
          'Sonja',
          'Stefan',
          'Stephan',
          'Stéphane',
          'Stéphanie',
          'Susanna',
          'Susanne',
          'Suzanne',
          'Sylvia',
          'Sylvie',
          'Theo',
          'Theodor',
          'Therese',
          'Thomas',
          'Toni',
          'Ueli',
          'Ulrich',
          'Urs',
          'Ursula',
          'Verena',
          'Véronique',
          'Victor',
          'Viktor',
          'Vreni',
          'Walter',
          'Werner',
          'Willi',
          'Willy',
          'Wolfgang',
          'Yolande',
          'Yves',
          'Yvette',
          'Yvonne',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/de_CH/name/last_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Ackermann',
          'Aebi',
          'Albrecht',
          'Ammann',
          'Amrein',
          'Arnold',
          'Bachmann',
          'Bader',
          'Bär',
          'Bättig',
          'Bauer',
          'Baumann',
          'Baumgartner',
          'Baur',
          'Beck',
          'Benz',
          'Berger',
          'Bernasconi',
          'Betschart',
          'Bianchi',
          'Bieri',
          'Blaser',
          'Blum',
          'Bolliger',
          'Bosshard',
          'Braun',
          'Brun',
          'Brunner',
          'Bucher',
          'Bühler',
          'Bühlmann',
          'Burri',
          'Christen',
          'Egger',
          'Egli',
          'Eichenberger',
          'Erni',
          'Ernst',
          'Eugster',
          'Fankhauser',
          'Favre',
          'Fehr',
          'Felber',
          'Felder',
          'Ferrari',
          'Fischer',
          'Flückiger',
          'Forster',
          'Frei',
          'Frey',
          'Frick',
          'Friedli',
          'Fuchs',
          'Furrer',
          'Gasser',
          'Geiger',
          'Gerber',
          'Gfeller',
          'Giger',
          'Gloor',
          'Graf',
          'Grob',
          'Gross',
          'Gut',
          'Haas',
          'Häfliger',
          'Hafner',
          'Hartmann',
          'Hasler',
          'Hauser',
          'Hermann',
          'Herzog',
          'Hess',
          'Hirt',
          'Hodel',
          'Hofer',
          'Hoffmann',
          'Hofmann',
          'Hofstetter',
          'Hotz',
          'Huber',
          'Hug',
          'Hunziker',
          'Hürlimann',
          'Imhof',
          'Isler',
          'Iten',
          'Jäggi',
          'Jenni',
          'Jost',
          'Kägi',
          'Kaiser',
          'Kälin',
          'Käser',
          'Kaufmann',
          'Keller',
          'Kern',
          'Kessler',
          'Knecht',
          'Koch',
          'Kohler',
          'Kuhn',
          'Küng',
          'Kunz',
          'Lang',
          'Lanz',
          'Lehmann',
          'Leu',
          'Leunberger',
          'Lüscher',
          'Lustenberger',
          'Lüthi',
          'Lutz',
          'Mäder',
          'Maier',
          'Marti',
          'Martin',
          'Maurer',
          'Mayer',
          'Meier',
          'Meili',
          'Meister',
          'Merz',
          'Mettler',
          'Meyer',
          'Michel',
          'Moser',
          'Müller',
          'Näf',
          'Ott',
          'Peter',
          'Pfister',
          'Portmann',
          'Probst',
          'Rey',
          'Ritter',
          'Roos',
          'Roth',
          'Rüegg',
          'Schäfer',
          'Schaller',
          'Schär',
          'Schärer',
          'Schaub',
          'Scheidegger',
          'Schenk',
          'Scherrer',
          'Schlatter',
          'Schmid',
          'Schmidt',
          'Schneider',
          'Schnyder',
          'Schoch',
          'Schuler',
          'Schumacher',
          'Schürch',
          'Schwab',
          'Schwarz',
          'Schweizer',
          'Seiler',
          'Senn',
          'Sidler',
          'Siegrist',
          'Sigrist',
          'Spörri',
          'Stadelmann',
          'Stalder',
          'Staub',
          'Stauffer',
          'Steffen',
          'Steiger',
          'Steiner',
          'Steinmann',
          'Stettler',
          'Stocker',
          'Stöckli',
          'Stucki',
          'Studer',
          'Stutz',
          'Suter',
          'Sutter',
          'Tanner',
          'Thommen',
          'Tobler',
          'Vogel',
          'Vogt',
          'Wagner',
          'Walder',
          'Walter',
          'Weber',
          'Wegmann',
          'Wehrli',
          'Weibel',
          'Wenger',
          'Wettstein',
          'Widmer',
          'Winkler',
          'Wirth',
          'Wirz',
          'Wolf',
          'Wüthrich',
          'Wyss',
          'Zbinden',
          'Zehnder',
          'Ziegler',
          'Zimmermann',
          'Zingg',
          'Zollinger',
          'Zürcher',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/de_CH/name/prefix.js': [
      function(require, module, exports) {
        module['exports'] = ['Hr.', 'Fr.', 'Dr.']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/de_CH/name/name.js': [
      function(require, module, exports) {
        module['exports'] = [
          '#{first_name} #{last_name}',
          '#{first_name} #{last_name}',
          '#{first_name} #{last_name}',
          '#{first_name} #{last_name}',
          '#{first_name} #{last_name}',
          '#{first_name} #{last_name}',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/de_CH/name/index.js': [
      function(require, module, exports) {
        var name = {}
        module['exports'] = name
        name.first_name = require('./first_name')
        name.last_name = require('./last_name')
        name.prefix = require('./prefix')
        name.name = require('./name')
      },
      {
        './first_name':
          '../node_modules/faker/lib/locales/de_CH/name/first_name.js',
        './last_name':
          '../node_modules/faker/lib/locales/de_CH/name/last_name.js',
        './prefix':
          '../node_modules/faker/lib/locales/de_CH/name/prefix.js',
        './name': '../node_modules/faker/lib/locales/de_CH/name/name.js',
      },
    ],
    '../node_modules/faker/lib/locales/de_CH/phone_number/formats.js': [
      function(require, module, exports) {
        module['exports'] = [
          '0800 ### ###',
          '0800 ## ## ##',
          '0## ### ## ##',
          '0## ### ## ##',
          '+41 ## ### ## ##',
          '0900 ### ###',
          '076 ### ## ##',
          '+4178 ### ## ##',
          '0041 79 ### ## ##',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/de_CH/phone_number/index.js': [
      function(require, module, exports) {
        var phone_number = {}
        module['exports'] = phone_number
        phone_number.formats = require('./formats')
      },
      {
        './formats':
          '../node_modules/faker/lib/locales/de_CH/phone_number/formats.js',
      },
    ],
    '../node_modules/faker/lib/locales/de_CH/index.js': [
      function(require, module, exports) {
        var de_CH = {}
        module['exports'] = de_CH
        de_CH.title = 'German (Switzerland)'
        de_CH.address = require('./address')
        de_CH.company = require('./company')
        de_CH.internet = require('./internet')
        de_CH.name = require('./name')
        de_CH.phone_number = require('./phone_number')
      },
      {
        './address':
          '../node_modules/faker/lib/locales/de_CH/address/index.js',
        './company':
          '../node_modules/faker/lib/locales/de_CH/company/index.js',
        './internet':
          '../node_modules/faker/lib/locales/de_CH/internet/index.js',
        './name': '../node_modules/faker/lib/locales/de_CH/name/index.js',
        './phone_number':
          '../node_modules/faker/lib/locales/de_CH/phone_number/index.js',
      },
    ],
    '../node_modules/faker/lib/locales/en/address/city_prefix.js': [
      function(require, module, exports) {
        module['exports'] = [
          'North',
          'East',
          'West',
          'South',
          'New',
          'Lake',
          'Port',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en/address/city_suffix.js': [
      function(require, module, exports) {
        module['exports'] = [
          'town',
          'ton',
          'land',
          'ville',
          'berg',
          'burgh',
          'borough',
          'bury',
          'view',
          'port',
          'mouth',
          'stad',
          'furt',
          'chester',
          'mouth',
          'fort',
          'haven',
          'side',
          'shire',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en/address/county.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Avon',
          'Bedfordshire',
          'Berkshire',
          'Borders',
          'Buckinghamshire',
          'Cambridgeshire',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en/address/country.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Afghanistan',
          'Albania',
          'Algeria',
          'American Samoa',
          'Andorra',
          'Angola',
          'Anguilla',
          'Antarctica (the territory South of 60 deg S)',
          'Antigua and Barbuda',
          'Argentina',
          'Armenia',
          'Aruba',
          'Australia',
          'Austria',
          'Azerbaijan',
          'Bahamas',
          'Bahrain',
          'Bangladesh',
          'Barbados',
          'Belarus',
          'Belgium',
          'Belize',
          'Benin',
          'Bermuda',
          'Bhutan',
          'Bolivia',
          'Bosnia and Herzegovina',
          'Botswana',
          'Bouvet Island (Bouvetoya)',
          'Brazil',
          'British Indian Ocean Territory (Chagos Archipelago)',
          'Brunei Darussalam',
          'Bulgaria',
          'Burkina Faso',
          'Burundi',
          'Cambodia',
          'Cameroon',
          'Canada',
          'Cape Verde',
          'Cayman Islands',
          'Central African Republic',
          'Chad',
          'Chile',
          'China',
          'Christmas Island',
          'Cocos (Keeling) Islands',
          'Colombia',
          'Comoros',
          'Congo',
          'Cook Islands',
          'Costa Rica',
          "Cote d'Ivoire",
          'Croatia',
          'Cuba',
          'Cyprus',
          'Czech Republic',
          'Denmark',
          'Djibouti',
          'Dominica',
          'Dominican Republic',
          'Ecuador',
          'Egypt',
          'El Salvador',
          'Equatorial Guinea',
          'Eritrea',
          'Estonia',
          'Ethiopia',
          'Faroe Islands',
          'Falkland Islands (Malvinas)',
          'Fiji',
          'Finland',
          'France',
          'French Guiana',
          'French Polynesia',
          'French Southern Territories',
          'Gabon',
          'Gambia',
          'Georgia',
          'Germany',
          'Ghana',
          'Gibraltar',
          'Greece',
          'Greenland',
          'Grenada',
          'Guadeloupe',
          'Guam',
          'Guatemala',
          'Guernsey',
          'Guinea',
          'Guinea-Bissau',
          'Guyana',
          'Haiti',
          'Heard Island and McDonald Islands',
          'Holy See (Vatican City State)',
          'Honduras',
          'Hong Kong',
          'Hungary',
          'Iceland',
          'India',
          'Indonesia',
          'Iran',
          'Iraq',
          'Ireland',
          'Isle of Man',
          'Israel',
          'Italy',
          'Jamaica',
          'Japan',
          'Jersey',
          'Jordan',
          'Kazakhstan',
          'Kenya',
          'Kiribati',
          "Democratic People's Republic of Korea",
          'Republic of Korea',
          'Kuwait',
          'Kyrgyz Republic',
          "Lao People's Democratic Republic",
          'Latvia',
          'Lebanon',
          'Lesotho',
          'Liberia',
          'Libyan Arab Jamahiriya',
          'Liechtenstein',
          'Lithuania',
          'Luxembourg',
          'Macao',
          'Macedonia',
          'Madagascar',
          'Malawi',
          'Malaysia',
          'Maldives',
          'Mali',
          'Malta',
          'Marshall Islands',
          'Martinique',
          'Mauritania',
          'Mauritius',
          'Mayotte',
          'Mexico',
          'Micronesia',
          'Moldova',
          'Monaco',
          'Mongolia',
          'Montenegro',
          'Montserrat',
          'Morocco',
          'Mozambique',
          'Myanmar',
          'Namibia',
          'Nauru',
          'Nepal',
          'Netherlands Antilles',
          'Netherlands',
          'New Caledonia',
          'New Zealand',
          'Nicaragua',
          'Niger',
          'Nigeria',
          'Niue',
          'Norfolk Island',
          'Northern Mariana Islands',
          'Norway',
          'Oman',
          'Pakistan',
          'Palau',
          'Palestinian Territory',
          'Panama',
          'Papua New Guinea',
          'Paraguay',
          'Peru',
          'Philippines',
          'Pitcairn Islands',
          'Poland',
          'Portugal',
          'Puerto Rico',
          'Qatar',
          'Reunion',
          'Romania',
          'Russian Federation',
          'Rwanda',
          'Saint Barthelemy',
          'Saint Helena',
          'Saint Kitts and Nevis',
          'Saint Lucia',
          'Saint Martin',
          'Saint Pierre and Miquelon',
          'Saint Vincent and the Grenadines',
          'Samoa',
          'San Marino',
          'Sao Tome and Principe',
          'Saudi Arabia',
          'Senegal',
          'Serbia',
          'Seychelles',
          'Sierra Leone',
          'Singapore',
          'Slovakia (Slovak Republic)',
          'Slovenia',
          'Solomon Islands',
          'Somalia',
          'South Africa',
          'South Georgia and the South Sandwich Islands',
          'Spain',
          'Sri Lanka',
          'Sudan',
          'Suriname',
          'Svalbard & Jan Mayen Islands',
          'Swaziland',
          'Sweden',
          'Switzerland',
          'Syrian Arab Republic',
          'Taiwan',
          'Tajikistan',
          'Tanzania',
          'Thailand',
          'Timor-Leste',
          'Togo',
          'Tokelau',
          'Tonga',
          'Trinidad and Tobago',
          'Tunisia',
          'Turkey',
          'Turkmenistan',
          'Turks and Caicos Islands',
          'Tuvalu',
          'Uganda',
          'Ukraine',
          'United Arab Emirates',
          'United Kingdom',
          'United States of America',
          'United States Minor Outlying Islands',
          'Uruguay',
          'Uzbekistan',
          'Vanuatu',
          'Venezuela',
          'Vietnam',
          'Virgin Islands, British',
          'Virgin Islands, U.S.',
          'Wallis and Futuna',
          'Western Sahara',
          'Yemen',
          'Zambia',
          'Zimbabwe',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en/address/country_code.js': [
      function(require, module, exports) {
        module['exports'] = [
          'AD',
          'AE',
          'AF',
          'AG',
          'AI',
          'AL',
          'AM',
          'AO',
          'AQ',
          'AR',
          'AS',
          'AT',
          'AU',
          'AW',
          'AX',
          'AZ',
          'BA',
          'BB',
          'BD',
          'BE',
          'BF',
          'BG',
          'BH',
          'BI',
          'BJ',
          'BL',
          'BM',
          'BN',
          'BO',
          'BQ',
          'BQ',
          'BR',
          'BS',
          'BT',
          'BV',
          'BW',
          'BY',
          'BZ',
          'CA',
          'CC',
          'CD',
          'CF',
          'CG',
          'CH',
          'CI',
          'CK',
          'CL',
          'CM',
          'CN',
          'CO',
          'CR',
          'CU',
          'CV',
          'CW',
          'CX',
          'CY',
          'CZ',
          'DE',
          'DJ',
          'DK',
          'DM',
          'DO',
          'DZ',
          'EC',
          'EE',
          'EG',
          'EH',
          'ER',
          'ES',
          'ET',
          'FI',
          'FJ',
          'FK',
          'FM',
          'FO',
          'FR',
          'GA',
          'GB',
          'GD',
          'GE',
          'GF',
          'GG',
          'GH',
          'GI',
          'GL',
          'GM',
          'GN',
          'GP',
          'GQ',
          'GR',
          'GS',
          'GT',
          'GU',
          'GW',
          'GY',
          'HK',
          'HM',
          'HN',
          'HR',
          'HT',
          'HU',
          'ID',
          'IE',
          'IL',
          'IM',
          'IN',
          'IO',
          'IQ',
          'IR',
          'IS',
          'IT',
          'JE',
          'JM',
          'JO',
          'JP',
          'KE',
          'KG',
          'KH',
          'KI',
          'KM',
          'KN',
          'KP',
          'KR',
          'KW',
          'KY',
          'KZ',
          'LA',
          'LB',
          'LC',
          'LI',
          'LK',
          'LR',
          'LS',
          'LT',
          'LU',
          'LV',
          'LY',
          'MA',
          'MC',
          'MD',
          'ME',
          'MF',
          'MG',
          'MH',
          'MK',
          'ML',
          'MM',
          'MN',
          'MO',
          'MP',
          'MQ',
          'MR',
          'MS',
          'MT',
          'MU',
          'MV',
          'MW',
          'MX',
          'MY',
          'MZ',
          'NA',
          'NC',
          'NE',
          'NF',
          'NG',
          'NI',
          'NL',
          'NO',
          'NP',
          'NR',
          'NU',
          'NZ',
          'OM',
          'PA',
          'PE',
          'PF',
          'PG',
          'PH',
          'PK',
          'PL',
          'PM',
          'PN',
          'PR',
          'PS',
          'PT',
          'PW',
          'PY',
          'QA',
          'RE',
          'RO',
          'RS',
          'RU',
          'RW',
          'SA',
          'SB',
          'SC',
          'SD',
          'SE',
          'SG',
          'SH',
          'SI',
          'SJ',
          'SK',
          'SL',
          'SM',
          'SN',
          'SO',
          'SR',
          'SS',
          'ST',
          'SV',
          'SX',
          'SY',
          'SZ',
          'TC',
          'TD',
          'TF',
          'TG',
          'TH',
          'TJ',
          'TK',
          'TL',
          'TM',
          'TN',
          'TO',
          'TR',
          'TT',
          'TV',
          'TW',
          'TZ',
          'UA',
          'UG',
          'UM',
          'US',
          'UY',
          'UZ',
          'VA',
          'VC',
          'VE',
          'VG',
          'VI',
          'VN',
          'VU',
          'WF',
          'WS',
          'YE',
          'YT',
          'ZA',
          'ZM',
          'ZW',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en/address/building_number.js': [
      function(require, module, exports) {
        module['exports'] = ['#####', '####', '###']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en/address/street_suffix.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Alley',
          'Avenue',
          'Branch',
          'Bridge',
          'Brook',
          'Brooks',
          'Burg',
          'Burgs',
          'Bypass',
          'Camp',
          'Canyon',
          'Cape',
          'Causeway',
          'Center',
          'Centers',
          'Circle',
          'Circles',
          'Cliff',
          'Cliffs',
          'Club',
          'Common',
          'Corner',
          'Corners',
          'Course',
          'Court',
          'Courts',
          'Cove',
          'Coves',
          'Creek',
          'Crescent',
          'Crest',
          'Crossing',
          'Crossroad',
          'Curve',
          'Dale',
          'Dam',
          'Divide',
          'Drive',
          'Drive',
          'Drives',
          'Estate',
          'Estates',
          'Expressway',
          'Extension',
          'Extensions',
          'Fall',
          'Falls',
          'Ferry',
          'Field',
          'Fields',
          'Flat',
          'Flats',
          'Ford',
          'Fords',
          'Forest',
          'Forge',
          'Forges',
          'Fork',
          'Forks',
          'Fort',
          'Freeway',
          'Garden',
          'Gardens',
          'Gateway',
          'Glen',
          'Glens',
          'Green',
          'Greens',
          'Grove',
          'Groves',
          'Harbor',
          'Harbors',
          'Haven',
          'Heights',
          'Highway',
          'Hill',
          'Hills',
          'Hollow',
          'Inlet',
          'Inlet',
          'Island',
          'Island',
          'Islands',
          'Islands',
          'Isle',
          'Isle',
          'Junction',
          'Junctions',
          'Key',
          'Keys',
          'Knoll',
          'Knolls',
          'Lake',
          'Lakes',
          'Land',
          'Landing',
          'Lane',
          'Light',
          'Lights',
          'Loaf',
          'Lock',
          'Locks',
          'Locks',
          'Lodge',
          'Lodge',
          'Loop',
          'Mall',
          'Manor',
          'Manors',
          'Meadow',
          'Meadows',
          'Mews',
          'Mill',
          'Mills',
          'Mission',
          'Mission',
          'Motorway',
          'Mount',
          'Mountain',
          'Mountain',
          'Mountains',
          'Mountains',
          'Neck',
          'Orchard',
          'Oval',
          'Overpass',
          'Park',
          'Parks',
          'Parkway',
          'Parkways',
          'Pass',
          'Passage',
          'Path',
          'Pike',
          'Pine',
          'Pines',
          'Place',
          'Plain',
          'Plains',
          'Plains',
          'Plaza',
          'Plaza',
          'Point',
          'Points',
          'Port',
          'Port',
          'Ports',
          'Ports',
          'Prairie',
          'Prairie',
          'Radial',
          'Ramp',
          'Ranch',
          'Rapid',
          'Rapids',
          'Rest',
          'Ridge',
          'Ridges',
          'River',
          'Road',
          'Road',
          'Roads',
          'Roads',
          'Route',
          'Row',
          'Rue',
          'Run',
          'Shoal',
          'Shoals',
          'Shore',
          'Shores',
          'Skyway',
          'Spring',
          'Springs',
          'Springs',
          'Spur',
          'Spurs',
          'Square',
          'Square',
          'Squares',
          'Squares',
          'Station',
          'Station',
          'Stravenue',
          'Stravenue',
          'Stream',
          'Stream',
          'Street',
          'Street',
          'Streets',
          'Summit',
          'Summit',
          'Terrace',
          'Throughway',
          'Trace',
          'Track',
          'Trafficway',
          'Trail',
          'Trail',
          'Tunnel',
          'Tunnel',
          'Turnpike',
          'Turnpike',
          'Underpass',
          'Union',
          'Unions',
          'Valley',
          'Valleys',
          'Via',
          'Viaduct',
          'View',
          'Views',
          'Village',
          'Village',
          'Villages',
          'Ville',
          'Vista',
          'Vista',
          'Walk',
          'Walks',
          'Wall',
          'Way',
          'Ways',
          'Well',
          'Wells',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en/address/secondary_address.js': [
      function(require, module, exports) {
        module['exports'] = ['Apt. ###', 'Suite ###']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en/address/postcode.js': [
      function(require, module, exports) {
        module['exports'] = ['#####', '#####-####']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en/address/postcode_by_state.js': [
      function(require, module, exports) {
        module['exports'] = ['#####', '#####-####']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en/address/state.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Alabama',
          'Alaska',
          'Arizona',
          'Arkansas',
          'California',
          'Colorado',
          'Connecticut',
          'Delaware',
          'Florida',
          'Georgia',
          'Hawaii',
          'Idaho',
          'Illinois',
          'Indiana',
          'Iowa',
          'Kansas',
          'Kentucky',
          'Louisiana',
          'Maine',
          'Maryland',
          'Massachusetts',
          'Michigan',
          'Minnesota',
          'Mississippi',
          'Missouri',
          'Montana',
          'Nebraska',
          'Nevada',
          'New Hampshire',
          'New Jersey',
          'New Mexico',
          'New York',
          'North Carolina',
          'North Dakota',
          'Ohio',
          'Oklahoma',
          'Oregon',
          'Pennsylvania',
          'Rhode Island',
          'South Carolina',
          'South Dakota',
          'Tennessee',
          'Texas',
          'Utah',
          'Vermont',
          'Virginia',
          'Washington',
          'West Virginia',
          'Wisconsin',
          'Wyoming',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en/address/state_abbr.js': [
      function(require, module, exports) {
        module['exports'] = [
          'AL',
          'AK',
          'AZ',
          'AR',
          'CA',
          'CO',
          'CT',
          'DE',
          'FL',
          'GA',
          'HI',
          'ID',
          'IL',
          'IN',
          'IA',
          'KS',
          'KY',
          'LA',
          'ME',
          'MD',
          'MA',
          'MI',
          'MN',
          'MS',
          'MO',
          'MT',
          'NE',
          'NV',
          'NH',
          'NJ',
          'NM',
          'NY',
          'NC',
          'ND',
          'OH',
          'OK',
          'OR',
          'PA',
          'RI',
          'SC',
          'SD',
          'TN',
          'TX',
          'UT',
          'VT',
          'VA',
          'WA',
          'WV',
          'WI',
          'WY',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en/address/time_zone.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Pacific/Midway',
          'Pacific/Pago_Pago',
          'Pacific/Honolulu',
          'America/Juneau',
          'America/Los_Angeles',
          'America/Tijuana',
          'America/Denver',
          'America/Phoenix',
          'America/Chihuahua',
          'America/Mazatlan',
          'America/Chicago',
          'America/Regina',
          'America/Mexico_City',
          'America/Mexico_City',
          'America/Monterrey',
          'America/Guatemala',
          'America/New_York',
          'America/Indiana/Indianapolis',
          'America/Bogota',
          'America/Lima',
          'America/Lima',
          'America/Halifax',
          'America/Caracas',
          'America/La_Paz',
          'America/Santiago',
          'America/St_Johns',
          'America/Sao_Paulo',
          'America/Argentina/Buenos_Aires',
          'America/Guyana',
          'America/Godthab',
          'Atlantic/South_Georgia',
          'Atlantic/Azores',
          'Atlantic/Cape_Verde',
          'Europe/Dublin',
          'Europe/London',
          'Europe/Lisbon',
          'Europe/London',
          'Africa/Casablanca',
          'Africa/Monrovia',
          'Etc/UTC',
          'Europe/Belgrade',
          'Europe/Bratislava',
          'Europe/Budapest',
          'Europe/Ljubljana',
          'Europe/Prague',
          'Europe/Sarajevo',
          'Europe/Skopje',
          'Europe/Warsaw',
          'Europe/Zagreb',
          'Europe/Brussels',
          'Europe/Copenhagen',
          'Europe/Madrid',
          'Europe/Paris',
          'Europe/Amsterdam',
          'Europe/Berlin',
          'Europe/Berlin',
          'Europe/Rome',
          'Europe/Stockholm',
          'Europe/Vienna',
          'Africa/Algiers',
          'Europe/Bucharest',
          'Africa/Cairo',
          'Europe/Helsinki',
          'Europe/Kiev',
          'Europe/Riga',
          'Europe/Sofia',
          'Europe/Tallinn',
          'Europe/Vilnius',
          'Europe/Athens',
          'Europe/Istanbul',
          'Europe/Minsk',
          'Asia/Jerusalem',
          'Africa/Harare',
          'Africa/Johannesburg',
          'Europe/Moscow',
          'Europe/Moscow',
          'Europe/Moscow',
          'Asia/Kuwait',
          'Asia/Riyadh',
          'Africa/Nairobi',
          'Asia/Baghdad',
          'Asia/Tehran',
          'Asia/Muscat',
          'Asia/Muscat',
          'Asia/Baku',
          'Asia/Tbilisi',
          'Asia/Yerevan',
          'Asia/Kabul',
          'Asia/Yekaterinburg',
          'Asia/Karachi',
          'Asia/Karachi',
          'Asia/Tashkent',
          'Asia/Kolkata',
          'Asia/Kolkata',
          'Asia/Kolkata',
          'Asia/Kolkata',
          'Asia/Kathmandu',
          'Asia/Dhaka',
          'Asia/Dhaka',
          'Asia/Colombo',
          'Asia/Almaty',
          'Asia/Novosibirsk',
          'Asia/Rangoon',
          'Asia/Bangkok',
          'Asia/Bangkok',
          'Asia/Jakarta',
          'Asia/Krasnoyarsk',
          'Asia/Shanghai',
          'Asia/Chongqing',
          'Asia/Hong_Kong',
          'Asia/Urumqi',
          'Asia/Kuala_Lumpur',
          'Asia/Singapore',
          'Asia/Taipei',
          'Australia/Perth',
          'Asia/Irkutsk',
          'Asia/Ulaanbaatar',
          'Asia/Seoul',
          'Asia/Tokyo',
          'Asia/Tokyo',
          'Asia/Tokyo',
          'Asia/Yakutsk',
          'Australia/Darwin',
          'Australia/Adelaide',
          'Australia/Melbourne',
          'Australia/Melbourne',
          'Australia/Sydney',
          'Australia/Brisbane',
          'Australia/Hobart',
          'Asia/Vladivostok',
          'Pacific/Guam',
          'Pacific/Port_Moresby',
          'Asia/Magadan',
          'Asia/Magadan',
          'Pacific/Noumea',
          'Pacific/Fiji',
          'Asia/Kamchatka',
          'Pacific/Majuro',
          'Pacific/Auckland',
          'Pacific/Auckland',
          'Pacific/Tongatapu',
          'Pacific/Fakaofo',
          'Pacific/Apia',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en/address/city.js': [
      function(require, module, exports) {
        module['exports'] = [
          '#{city_prefix} #{Name.first_name}#{city_suffix}',
          '#{city_prefix} #{Name.first_name}',
          '#{Name.first_name}#{city_suffix}',
          '#{Name.last_name}#{city_suffix}',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en/address/street_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          '#{Name.first_name} #{street_suffix}',
          '#{Name.last_name} #{street_suffix}',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en/address/street_address.js': [
      function(require, module, exports) {
        module['exports'] = ['#{building_number} #{street_name}']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en/address/default_country.js': [
      function(require, module, exports) {
        module['exports'] = ['United States of America']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en/address/index.js': [
      function(require, module, exports) {
        var address = {}
        module['exports'] = address
        address.city_prefix = require('./city_prefix')
        address.city_suffix = require('./city_suffix')
        address.county = require('./county')
        address.country = require('./country')
        address.country_code = require('./country_code')
        address.building_number = require('./building_number')
        address.street_suffix = require('./street_suffix')
        address.secondary_address = require('./secondary_address')
        address.postcode = require('./postcode')
        address.postcode_by_state = require('./postcode_by_state')
        address.state = require('./state')
        address.state_abbr = require('./state_abbr')
        address.time_zone = require('./time_zone')
        address.city = require('./city')
        address.street_name = require('./street_name')
        address.street_address = require('./street_address')
        address.default_country = require('./default_country')
      },
      {
        './city_prefix':
          '../node_modules/faker/lib/locales/en/address/city_prefix.js',
        './city_suffix':
          '../node_modules/faker/lib/locales/en/address/city_suffix.js',
        './county':
          '../node_modules/faker/lib/locales/en/address/county.js',
        './country':
          '../node_modules/faker/lib/locales/en/address/country.js',
        './country_code':
          '../node_modules/faker/lib/locales/en/address/country_code.js',
        './building_number':
          '../node_modules/faker/lib/locales/en/address/building_number.js',
        './street_suffix':
          '../node_modules/faker/lib/locales/en/address/street_suffix.js',
        './secondary_address':
          '../node_modules/faker/lib/locales/en/address/secondary_address.js',
        './postcode':
          '../node_modules/faker/lib/locales/en/address/postcode.js',
        './postcode_by_state':
          '../node_modules/faker/lib/locales/en/address/postcode_by_state.js',
        './state': '../node_modules/faker/lib/locales/en/address/state.js',
        './state_abbr':
          '../node_modules/faker/lib/locales/en/address/state_abbr.js',
        './time_zone':
          '../node_modules/faker/lib/locales/en/address/time_zone.js',
        './city': '../node_modules/faker/lib/locales/en/address/city.js',
        './street_name':
          '../node_modules/faker/lib/locales/en/address/street_name.js',
        './street_address':
          '../node_modules/faker/lib/locales/en/address/street_address.js',
        './default_country':
          '../node_modules/faker/lib/locales/en/address/default_country.js',
      },
    ],
    '../node_modules/faker/lib/locales/en/credit_card/visa.js': [
      function(require, module, exports) {
        module['exports'] = ['/4###########L/', '/4###-####-####-###L/']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en/credit_card/mastercard.js': [
      function(require, module, exports) {
        module['exports'] = [
          '/5[1-5]##-####-####-###L/',
          '/6771-89##-####-###L/',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en/credit_card/discover.js': [
      function(require, module, exports) {
        module['exports'] = [
          '/6011-####-####-###L/',
          '/65##-####-####-###L/',
          '/64[4-9]#-####-####-###L/',
          '/6011-62##-####-####-###L/',
          '/65##-62##-####-####-###L/',
          '/64[4-9]#-62##-####-####-###L/',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en/credit_card/american_express.js': [
      function(require, module, exports) {
        module['exports'] = ['/34##-######-####L/', '/37##-######-####L/']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en/credit_card/diners_club.js': [
      function(require, module, exports) {
        module['exports'] = [
          '/30[0-5]#-######-###L/',
          '/368#-######-###L/',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en/credit_card/jcb.js': [
      function(require, module, exports) {
        module['exports'] = [
          '/3528-####-####-###L/',
          '/3529-####-####-###L/',
          '/35[3-8]#-####-####-###L/',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en/credit_card/switch.js': [
      function(require, module, exports) {
        module['exports'] = [
          '/6759-####-####-###L/',
          '/6759-####-####-####-#L/',
          '/6759-####-####-####-##L/',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en/credit_card/solo.js': [
      function(require, module, exports) {
        module['exports'] = [
          '/6767-####-####-###L/',
          '/6767-####-####-####-#L/',
          '/6767-####-####-####-##L/',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en/credit_card/maestro.js': [
      function(require, module, exports) {
        module['exports'] = [
          '/50#{9,16}L/',
          '/5[6-8]#{9,16}L/',
          '/56##{9,16}L/',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en/credit_card/laser.js': [
      function(require, module, exports) {
        module['exports'] = [
          '/6304###########L/',
          '/6706###########L/',
          '/6771###########L/',
          '/6709###########L/',
          '/6304#########{5,6}L/',
          '/6706#########{5,6}L/',
          '/6771#########{5,6}L/',
          '/6709#########{5,6}L/',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en/credit_card/index.js': [
      function(require, module, exports) {
        var credit_card = {}
        module['exports'] = credit_card
        credit_card.visa = require('./visa')
        credit_card.mastercard = require('./mastercard')
        credit_card.discover = require('./discover')
        credit_card.american_express = require('./american_express')
        credit_card.diners_club = require('./diners_club')
        credit_card.jcb = require('./jcb')
        credit_card.switch = require('./switch')
        credit_card.solo = require('./solo')
        credit_card.maestro = require('./maestro')
        credit_card.laser = require('./laser')
      },
      {
        './visa':
          '../node_modules/faker/lib/locales/en/credit_card/visa.js',
        './mastercard':
          '../node_modules/faker/lib/locales/en/credit_card/mastercard.js',
        './discover':
          '../node_modules/faker/lib/locales/en/credit_card/discover.js',
        './american_express':
          '../node_modules/faker/lib/locales/en/credit_card/american_express.js',
        './diners_club':
          '../node_modules/faker/lib/locales/en/credit_card/diners_club.js',
        './jcb': '../node_modules/faker/lib/locales/en/credit_card/jcb.js',
        './switch':
          '../node_modules/faker/lib/locales/en/credit_card/switch.js',
        './solo':
          '../node_modules/faker/lib/locales/en/credit_card/solo.js',
        './maestro':
          '../node_modules/faker/lib/locales/en/credit_card/maestro.js',
        './laser':
          '../node_modules/faker/lib/locales/en/credit_card/laser.js',
      },
    ],
    '../node_modules/faker/lib/locales/en/company/suffix.js': [
      function(require, module, exports) {
        module['exports'] = ['Inc', 'and Sons', 'LLC', 'Group']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en/company/adjective.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Adaptive',
          'Advanced',
          'Ameliorated',
          'Assimilated',
          'Automated',
          'Balanced',
          'Business-focused',
          'Centralized',
          'Cloned',
          'Compatible',
          'Configurable',
          'Cross-group',
          'Cross-platform',
          'Customer-focused',
          'Customizable',
          'Decentralized',
          'De-engineered',
          'Devolved',
          'Digitized',
          'Distributed',
          'Diverse',
          'Down-sized',
          'Enhanced',
          'Enterprise-wide',
          'Ergonomic',
          'Exclusive',
          'Expanded',
          'Extended',
          'Face to face',
          'Focused',
          'Front-line',
          'Fully-configurable',
          'Function-based',
          'Fundamental',
          'Future-proofed',
          'Grass-roots',
          'Horizontal',
          'Implemented',
          'Innovative',
          'Integrated',
          'Intuitive',
          'Inverse',
          'Managed',
          'Mandatory',
          'Monitored',
          'Multi-channelled',
          'Multi-lateral',
          'Multi-layered',
          'Multi-tiered',
          'Networked',
          'Object-based',
          'Open-architected',
          'Open-source',
          'Operative',
          'Optimized',
          'Optional',
          'Organic',
          'Organized',
          'Persevering',
          'Persistent',
          'Phased',
          'Polarised',
          'Pre-emptive',
          'Proactive',
          'Profit-focused',
          'Profound',
          'Programmable',
          'Progressive',
          'Public-key',
          'Quality-focused',
          'Reactive',
          'Realigned',
          'Re-contextualized',
          'Re-engineered',
          'Reduced',
          'Reverse-engineered',
          'Right-sized',
          'Robust',
          'Seamless',
          'Secured',
          'Self-enabling',
          'Sharable',
          'Stand-alone',
          'Streamlined',
          'Switchable',
          'Synchronised',
          'Synergistic',
          'Synergized',
          'Team-oriented',
          'Total',
          'Triple-buffered',
          'Universal',
          'Up-sized',
          'Upgradable',
          'User-centric',
          'User-friendly',
          'Versatile',
          'Virtual',
          'Visionary',
          'Vision-oriented',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en/company/descriptor.js': [
      function(require, module, exports) {
        module['exports'] = [
          '24 hour',
          '24/7',
          '3rd generation',
          '4th generation',
          '5th generation',
          '6th generation',
          'actuating',
          'analyzing',
          'asymmetric',
          'asynchronous',
          'attitude-oriented',
          'background',
          'bandwidth-monitored',
          'bi-directional',
          'bifurcated',
          'bottom-line',
          'clear-thinking',
          'client-driven',
          'client-server',
          'coherent',
          'cohesive',
          'composite',
          'context-sensitive',
          'contextually-based',
          'content-based',
          'dedicated',
          'demand-driven',
          'didactic',
          'directional',
          'discrete',
          'disintermediate',
          'dynamic',
          'eco-centric',
          'empowering',
          'encompassing',
          'even-keeled',
          'executive',
          'explicit',
          'exuding',
          'fault-tolerant',
          'foreground',
          'fresh-thinking',
          'full-range',
          'global',
          'grid-enabled',
          'heuristic',
          'high-level',
          'holistic',
          'homogeneous',
          'human-resource',
          'hybrid',
          'impactful',
          'incremental',
          'intangible',
          'interactive',
          'intermediate',
          'leading edge',
          'local',
          'logistical',
          'maximized',
          'methodical',
          'mission-critical',
          'mobile',
          'modular',
          'motivating',
          'multimedia',
          'multi-state',
          'multi-tasking',
          'national',
          'needs-based',
          'neutral',
          'next generation',
          'non-volatile',
          'object-oriented',
          'optimal',
          'optimizing',
          'radical',
          'real-time',
          'reciprocal',
          'regional',
          'responsive',
          'scalable',
          'secondary',
          'solution-oriented',
          'stable',
          'static',
          'systematic',
          'systemic',
          'system-worthy',
          'tangible',
          'tertiary',
          'transitional',
          'uniform',
          'upward-trending',
          'user-facing',
          'value-added',
          'web-enabled',
          'well-modulated',
          'zero administration',
          'zero defect',
          'zero tolerance',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en/company/noun.js': [
      function(require, module, exports) {
        module['exports'] = [
          'ability',
          'access',
          'adapter',
          'algorithm',
          'alliance',
          'analyzer',
          'application',
          'approach',
          'architecture',
          'archive',
          'artificial intelligence',
          'array',
          'attitude',
          'benchmark',
          'budgetary management',
          'capability',
          'capacity',
          'challenge',
          'circuit',
          'collaboration',
          'complexity',
          'concept',
          'conglomeration',
          'contingency',
          'core',
          'customer loyalty',
          'database',
          'data-warehouse',
          'definition',
          'emulation',
          'encoding',
          'encryption',
          'extranet',
          'firmware',
          'flexibility',
          'focus group',
          'forecast',
          'frame',
          'framework',
          'function',
          'functionalities',
          'Graphic Interface',
          'groupware',
          'Graphical User Interface',
          'hardware',
          'help-desk',
          'hierarchy',
          'hub',
          'implementation',
          'info-mediaries',
          'infrastructure',
          'initiative',
          'installation',
          'instruction set',
          'interface',
          'internet solution',
          'intranet',
          'knowledge user',
          'knowledge base',
          'local area network',
          'leverage',
          'matrices',
          'matrix',
          'methodology',
          'middleware',
          'migration',
          'model',
          'moderator',
          'monitoring',
          'moratorium',
          'neural-net',
          'open architecture',
          'open system',
          'orchestration',
          'paradigm',
          'parallelism',
          'policy',
          'portal',
          'pricing structure',
          'process improvement',
          'product',
          'productivity',
          'project',
          'projection',
          'protocol',
          'secured line',
          'service-desk',
          'software',
          'solution',
          'standardization',
          'strategy',
          'structure',
          'success',
          'superstructure',
          'support',
          'synergy',
          'system engine',
          'task-force',
          'throughput',
          'time-frame',
          'toolset',
          'utilisation',
          'website',
          'workforce',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en/company/bs_verb.js': [
      function(require, module, exports) {
        module['exports'] = [
          'implement',
          'utilize',
          'integrate',
          'streamline',
          'optimize',
          'evolve',
          'transform',
          'embrace',
          'enable',
          'orchestrate',
          'leverage',
          'reinvent',
          'aggregate',
          'architect',
          'enhance',
          'incentivize',
          'morph',
          'empower',
          'envisioneer',
          'monetize',
          'harness',
          'facilitate',
          'seize',
          'disintermediate',
          'synergize',
          'strategize',
          'deploy',
          'brand',
          'grow',
          'target',
          'syndicate',
          'synthesize',
          'deliver',
          'mesh',
          'incubate',
          'engage',
          'maximize',
          'benchmark',
          'expedite',
          'reintermediate',
          'whiteboard',
          'visualize',
          'repurpose',
          'innovate',
          'scale',
          'unleash',
          'drive',
          'extend',
          'engineer',
          'revolutionize',
          'generate',
          'exploit',
          'transition',
          'e-enable',
          'iterate',
          'cultivate',
          'matrix',
          'productize',
          'redefine',
          'recontextualize',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en/company/bs_adjective.js': [
      function(require, module, exports) {
        module['exports'] = [
          'clicks-and-mortar',
          'value-added',
          'vertical',
          'proactive',
          'robust',
          'revolutionary',
          'scalable',
          'leading-edge',
          'innovative',
          'intuitive',
          'strategic',
          'e-business',
          'mission-critical',
          'sticky',
          'one-to-one',
          '24/7',
          'end-to-end',
          'global',
          'B2B',
          'B2C',
          'granular',
          'frictionless',
          'virtual',
          'viral',
          'dynamic',
          '24/365',
          'best-of-breed',
          'killer',
          'magnetic',
          'bleeding-edge',
          'web-enabled',
          'interactive',
          'dot-com',
          'sexy',
          'back-end',
          'real-time',
          'efficient',
          'front-end',
          'distributed',
          'seamless',
          'extensible',
          'turn-key',
          'world-class',
          'open-source',
          'cross-platform',
          'cross-media',
          'synergistic',
          'bricks-and-clicks',
          'out-of-the-box',
          'enterprise',
          'integrated',
          'impactful',
          'wireless',
          'transparent',
          'next-generation',
          'cutting-edge',
          'user-centric',
          'visionary',
          'customized',
          'ubiquitous',
          'plug-and-play',
          'collaborative',
          'compelling',
          'holistic',
          'rich',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en/company/bs_noun.js': [
      function(require, module, exports) {
        module['exports'] = [
          'synergies',
          'web-readiness',
          'paradigms',
          'markets',
          'partnerships',
          'infrastructures',
          'platforms',
          'initiatives',
          'channels',
          'eyeballs',
          'communities',
          'ROI',
          'solutions',
          'e-tailers',
          'e-services',
          'action-items',
          'portals',
          'niches',
          'technologies',
          'content',
          'vortals',
          'supply-chains',
          'convergence',
          'relationships',
          'architectures',
          'interfaces',
          'e-markets',
          'e-commerce',
          'systems',
          'bandwidth',
          'infomediaries',
          'models',
          'mindshare',
          'deliverables',
          'users',
          'schemas',
          'networks',
          'applications',
          'metrics',
          'e-business',
          'functionalities',
          'experiences',
          'web services',
          'methodologies',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en/company/name.js': [
      function(require, module, exports) {
        module['exports'] = [
          '#{Name.last_name} #{suffix}',
          '#{Name.last_name}-#{Name.last_name}',
          '#{Name.last_name}, #{Name.last_name} and #{Name.last_name}',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en/company/index.js': [
      function(require, module, exports) {
        var company = {}
        module['exports'] = company
        company.suffix = require('./suffix')
        company.adjective = require('./adjective')
        company.descriptor = require('./descriptor')
        company.noun = require('./noun')
        company.bs_verb = require('./bs_verb')
        company.bs_adjective = require('./bs_adjective')
        company.bs_noun = require('./bs_noun')
        company.name = require('./name')
      },
      {
        './suffix':
          '../node_modules/faker/lib/locales/en/company/suffix.js',
        './adjective':
          '../node_modules/faker/lib/locales/en/company/adjective.js',
        './descriptor':
          '../node_modules/faker/lib/locales/en/company/descriptor.js',
        './noun': '../node_modules/faker/lib/locales/en/company/noun.js',
        './bs_verb':
          '../node_modules/faker/lib/locales/en/company/bs_verb.js',
        './bs_adjective':
          '../node_modules/faker/lib/locales/en/company/bs_adjective.js',
        './bs_noun':
          '../node_modules/faker/lib/locales/en/company/bs_noun.js',
        './name': '../node_modules/faker/lib/locales/en/company/name.js',
      },
    ],
    '../node_modules/faker/lib/locales/en/internet/free_email.js': [
      function(require, module, exports) {
        module['exports'] = ['gmail.com', 'yahoo.com', 'hotmail.com']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en/internet/example_email.js': [
      function(require, module, exports) {
        module['exports'] = ['example.org', 'example.com', 'example.net']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en/internet/domain_suffix.js': [
      function(require, module, exports) {
        module['exports'] = ['com', 'biz', 'info', 'name', 'net', 'org']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en/internet/avatar_uri.js': [
      function(require, module, exports) {
        module['exports'] = [
          'https://s3.amazonaws.com/uifaces/faces/twitter/jarjan/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/mahdif/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/sprayaga/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/ruzinav/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/Skyhartman/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/moscoz/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/kurafire/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/91bilal/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/igorgarybaldi/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/calebogden/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/malykhinv/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/joelhelin/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/kushsolitary/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/coreyweb/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/snowshade/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/areus/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/holdenweb/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/heyimjuani/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/envex/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/unterdreht/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/collegeman/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/peejfancher/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/andyisonline/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/ultragex/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/fuck_you_two/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/adellecharles/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/ateneupopular/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/ahmetalpbalkan/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/Stievius/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/kerem/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/osvaldas/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/angelceballos/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/thierrykoblentz/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/peterlandt/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/catarino/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/weglov/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/brandclay/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/ahmetsulek/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/nicolasfolliot/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/jayrobinson/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/victorerixon/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/kolage/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/michzen/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/markjenkins/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/nicolai_larsen/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/gt/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/noxdzine/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/alagoon/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/idiot/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/mizko/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/chadengle/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/mutlu82/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/simobenso/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/vocino/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/guiiipontes/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/soyjavi/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/joshaustin/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/tomaslau/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/VinThomas/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/ManikRathee/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/langate/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/cemshid/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/leemunroe/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/_shahedk/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/enda/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/BillSKenney/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/divya/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/joshhemsley/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/sindresorhus/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/soffes/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/9lessons/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/linux29/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/Chakintosh/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/anaami/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/joreira/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/shadeed9/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/scottkclark/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/jedbridges/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/salleedesign/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/marakasina/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/ariil/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/BrianPurkiss/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/michaelmartinho/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/bublienko/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/devankoshal/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/ZacharyZorbas/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/timmillwood/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/joshuasortino/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/damenleeturks/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/tomas_janousek/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/herrhaase/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/RussellBishop/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/brajeshwar/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/cbracco/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/bermonpainter/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/abdullindenis/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/isacosta/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/suprb/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/yalozhkin/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/chandlervdw/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/iamgarth/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/_victa/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/commadelimited/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/roybarberuk/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/axel/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/vladarbatov/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/ffbel/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/syropian/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/ankitind/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/traneblow/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/flashmurphy/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/ChrisFarina78/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/baliomega/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/saschamt/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/jm_denis/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/anoff/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/kennyadr/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/chatyrko/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/dingyi/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/mds/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/terryxlife/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/aaroni/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/kinday/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/prrstn/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/eduardostuart/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/dhilipsiva/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/GavicoInd/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/baires/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/rohixx/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/bigmancho/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/blakesimkins/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/leeiio/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/tjrus/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/uberschizo/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/kylefoundry/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/claudioguglieri/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/ripplemdk/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/exentrich/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/jakemoore/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/joaoedumedeiros/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/poormini/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/tereshenkov/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/keryilmaz/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/haydn_woods/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/rude/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/llun/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/sgaurav_baghel/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/jamiebrittain/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/badlittleduck/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/pifagor/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/agromov/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/benefritz/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/erwanhesry/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/diesellaws/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/jeremiaha/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/koridhandy/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/chaensel/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/andrewcohen/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/smaczny/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/gonzalorobaina/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/nandini_m/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/sydlawrence/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/cdharrison/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/tgerken/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/lewisainslie/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/charliecwaite/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/robbschiller/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/flexrs/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/mattdetails/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/raquelwilson/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/karsh/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/mrmartineau/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/opnsrce/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/hgharrygo/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/maximseshuk/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/uxalex/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/samihah/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/chanpory/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/sharvin/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/josemarques/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/jefffis/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/krystalfister/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/lokesh_coder/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/thedamianhdez/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/dpmachado/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/funwatercat/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/timothycd/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/ivanfilipovbg/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/picard102/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/marcobarbosa/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/krasnoukhov/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/g3d/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/ademilter/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/rickdt/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/operatino/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/bungiwan/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/hugomano/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/logorado/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/dc_user/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/horaciobella/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/SlaapMe/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/teeragit/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/iqonicd/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/ilya_pestov/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/andrewarrow/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/ssiskind/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/stan/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/HenryHoffman/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/rdsaunders/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/adamsxu/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/curiousoffice/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/themadray/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/michigangraham/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/kohette/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/nickfratter/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/runningskull/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/madysondesigns/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/brenton_clarke/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/jennyshen/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/bradenhamm/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/kurtinc/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/amanruzaini/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/coreyhaggard/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/Karimmove/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/aaronalfred/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/wtrsld/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/jitachi/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/therealmarvin/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/pmeissner/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/ooomz/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/chacky14/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/jesseddy/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/shanehudson/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/akmur/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/IsaryAmairani/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/arthurholcombe1/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/boxmodel/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/ehsandiary/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/LucasPerdidao/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/shalt0ni/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/swaplord/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/kaelifa/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/plbabin/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/guillemboti/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/arindam_/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/renbyrd/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/thiagovernetti/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/jmillspaysbills/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/mikemai2awesome/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/jervo/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/mekal/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/sta1ex/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/robergd/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/felipecsl/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/andrea211087/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/garand/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/dhooyenga/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/abovefunction/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/pcridesagain/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/randomlies/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/BryanHorsey/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/heykenneth/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/dahparra/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/allthingssmitty/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/danvernon/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/beweinreich/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/increase/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/falvarad/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/alxndrustinov/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/souuf/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/orkuncaylar/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/AM_Kn2/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/gearpixels/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/bassamology/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/vimarethomas/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/kosmar/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/SULiik/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/mrjamesnoble/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/silvanmuhlemann/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/shaneIxD/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/nacho/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/yigitpinarbasi/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/buzzusborne/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/aaronkwhite/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/rmlewisuk/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/giancarlon/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/nbirckel/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/d_nny_m_cher/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/sdidonato/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/atariboy/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/abotap/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/karalek/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/psdesignuk/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/ludwiczakpawel/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/nemanjaivanovic/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/baluli/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/ahmadajmi/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/vovkasolovev/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/samgrover/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/derienzo777/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/jonathansimmons/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/nelsonjoyce/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/S0ufi4n3/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/xtopherpaul/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/oaktreemedia/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/nateschulte/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/findingjenny/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/namankreative/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/antonyzotov/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/we_social/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/leehambley/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/solid_color/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/abelcabans/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/mbilderbach/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/kkusaa/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/jordyvdboom/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/carlosgavina/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/pechkinator/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/vc27/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/rdbannon/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/croakx/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/suribbles/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/kerihenare/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/catadeleon/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/gcmorley/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/duivvv/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/saschadroste/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/victorDubugras/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/wintopia/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/mattbilotti/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/taylorling/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/megdraws/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/meln1ks/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/mahmoudmetwally/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/Silveredge9/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/derekebradley/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/happypeter1983/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/travis_arnold/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/artem_kostenko/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/adobi/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/daykiine/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/alek_djuric/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/scips/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/miguelmendes/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/justinrhee/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/alsobrooks/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/fronx/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/mcflydesign/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/santi_urso/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/allfordesign/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/stayuber/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/bertboerland/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/marosholly/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/adamnac/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/cynthiasavard/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/muringa/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/danro/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/hiemil/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/jackiesaik/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/iduuck/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/antjanus/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/aroon_sharma/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/dshster/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/thehacker/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/michaelbrooksjr/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/ryanmclaughlin/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/clubb3rry/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/taybenlor/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/xripunov/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/myastro/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/adityasutomo/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/digitalmaverick/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/hjartstrorn/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/itolmach/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/vaughanmoffitt/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/abdots/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/isnifer/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/sergeysafonov/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/maz/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/scrapdnb/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/chrismj83/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/vitorleal/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/sokaniwaal/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/zaki3d/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/illyzoren/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/mocabyte/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/osmanince/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/djsherman/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/davidhemphill/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/waghner/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/necodymiconer/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/praveen_vijaya/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/fabbrucci/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/travishines/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/kuldarkalvik/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/Elt_n/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/phillapier/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/okseanjay/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/id835559/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/kudretkeskin/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/anjhero/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/duck4fuck/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/scott_riley/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/noufalibrahim/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/h1brd/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/borges_marcos/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/devinhalladay/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/ciaranr/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/stefooo/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/mikebeecham/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/tonymillion/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/joshuaraichur/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/irae/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/petrangr/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/dmitriychuta/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/charliegann/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/arashmanteghi/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/adhamdannaway/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/ainsleywagon/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/svenlen/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/faisalabid/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/beshur/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/carlyson/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/dutchnadia/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/teddyzetterlund/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/samuelkraft/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/aoimedia/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/toddrew/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/codepoet_ru/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/artvavs/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/benoitboucart/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/jomarmen/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/kolmarlopez/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/creartinc/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/homka/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/gaborenton/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/robinclediere/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/maximsorokin/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/plasticine/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/j2deme/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/peachananr/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/kapaluccio/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/de_ascanio/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/rikas/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/dawidwu/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/marcoramires/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/angelcreative/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/rpatey/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/popey/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/rehatkathuria/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/the_purplebunny/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/1markiz/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/ajaxy_ru/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/brenmurrell/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/dudestein/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/oskarlevinson/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/victorstuber/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/nehfy/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/vicivadeline/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/leandrovaranda/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/scottgallant/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/victor_haydin/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/sawrb/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/ryhanhassan/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/amayvs/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/a_brixen/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/karolkrakowiak_/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/herkulano/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/geran7/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/cggaurav/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/chris_witko/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/lososina/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/polarity/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/mattlat/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/brandonburke/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/constantx/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/teylorfeliz/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/craigelimeliah/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/rachelreveley/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/reabo101/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/rahmeen/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/ky/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/rickyyean/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/j04ntoh/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/spbroma/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/sebashton/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/jpenico/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/francis_vega/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/oktayelipek/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/kikillo/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/fabbianz/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/larrygerard/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/BroumiYoussef/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/0therplanet/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/mbilalsiddique1/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/ionuss/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/grrr_nl/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/liminha/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/rawdiggie/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/ryandownie/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/sethlouey/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/pixage/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/arpitnj/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/switmer777/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/josevnclch/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/kanickairaj/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/puzik/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/tbakdesigns/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/besbujupi/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/supjoey/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/lowie/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/linkibol/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/balintorosz/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/imcoding/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/agustincruiz/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/gusoto/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/thomasschrijer/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/superoutman/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/kalmerrautam/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/gabrielizalo/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/gojeanyn/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/davidbaldie/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/_vojto/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/laurengray/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/jydesign/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/mymyboy/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/nellleo/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/marciotoledo/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/ninjad3m0/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/to_soham/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/hasslunsford/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/muridrahhal/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/levisan/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/grahamkennery/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/lepetitogre/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/antongenkin/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/nessoila/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/amandabuzard/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/safrankov/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/cocolero/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/dss49/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/matt3224/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/bluesix/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/quailandquasar/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/AlbertoCococi/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/lepinski/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/sementiy/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/mhudobivnik/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/thibaut_re/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/olgary/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/shojberg/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/mtolokonnikov/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/bereto/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/naupintos/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/wegotvices/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/xadhix/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/macxim/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/rodnylobos/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/madcampos/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/madebyvadim/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/bartoszdawydzik/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/supervova/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/markretzloff/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/vonachoo/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/darylws/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/stevedesigner/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/mylesb/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/herbigt/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/depaulawagner/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/geshan/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/gizmeedevil1991/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/_scottburgess/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/lisovsky/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/davidsasda/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/artd_sign/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/YoungCutlass/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/mgonto/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/itstotallyamy/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/victorquinn/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/osmond/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/oksanafrewer/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/zauerkraut/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/iamkeithmason/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/nitinhayaran/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/lmjabreu/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/mandalareopens/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/thinkleft/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/ponchomendivil/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/juamperro/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/brunodesign1206/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/caseycavanagh/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/luxe/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/dotgridline/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/spedwig/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/madewulf/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/mattsapii/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/helderleal/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/chrisstumph/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/jayphen/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/nsamoylov/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/chrisvanderkooi/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/justme_timothyg/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/otozk/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/prinzadi/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/gu5taf/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/cyril_gaillard/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/d_kobelyatsky/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/daniloc/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/nwdsha/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/romanbulah/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/skkirilov/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/dvdwinden/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/dannol/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/thekevinjones/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/jwalter14/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/timgthomas/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/buddhasource/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/uxpiper/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/thatonetommy/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/diansigitp/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/adrienths/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/klimmka/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/gkaam/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/derekcramer/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/jennyyo/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/nerrsoft/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/xalionmalik/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/edhenderson/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/keyuri85/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/roxanejammet/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/kimcool/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/edkf/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/matkins/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/alessandroribe/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/jacksonlatka/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/lebronjennan/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/kostaspt/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/karlkanall/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/moynihan/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/danpliego/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/saulihirvi/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/wesleytrankin/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/fjaguero/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/bowbrick/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/mashaaaaal/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/yassiryahya/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/dparrelli/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/fotomagin/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/aka_james/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/denisepires/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/iqbalperkasa/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/martinansty/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/jarsen/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/r_oy/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/justinrob/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/gabrielrosser/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/malgordon/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/carlfairclough/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/michaelabehsera/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/pierrestoffe/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/enjoythetau/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/loganjlambert/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/rpeezy/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/coreyginnivan/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/michalhron/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/msveet/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/lingeswaran/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/kolsvein/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/peter576/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/reideiredale/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/joeymurdah/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/raphaelnikson/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/mvdheuvel/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/maxlinderman/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/jimmuirhead/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/begreative/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/frankiefreesbie/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/robturlinckx/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/Talbi_ConSept/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/longlivemyword/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/vanchesz/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/maiklam/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/hermanobrother/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/rez___a/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/gregsqueeb/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/greenbes/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/_ragzor/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/anthonysukow/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/fluidbrush/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/dactrtr/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/jehnglynn/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/bergmartin/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/hugocornejo/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/_kkga/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/dzantievm/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/sawalazar/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/sovesove/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/jonsgotwood/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/byryan/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/vytautas_a/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/mizhgan/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/cicerobr/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/nilshelmersson/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/d33pthought/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/davecraige/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/nckjrvs/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/alexandermayes/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/jcubic/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/craigrcoles/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/bagawarman/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/rob_thomas10/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/cofla/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/maikelk/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/rtgibbons/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/russell_baylis/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/mhesslow/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/codysanfilippo/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/webtanya/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/madebybrenton/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/dcalonaci/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/perfectflow/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/jjsiii/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/saarabpreet/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/kumarrajan12123/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/iamsteffen/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/themikenagle/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/ceekaytweet/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/larrybolt/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/conspirator/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/dallasbpeters/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/n3dmax/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/terpimost/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/byrnecore/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/j_drake_/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/calebjoyce/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/russoedu/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/hoangloi/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/tobysaxon/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/gofrasdesign/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/dimaposnyy/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/tjisousa/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/okandungel/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/billyroshan/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/oskamaya/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/motionthinks/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/knilob/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/ashocka18/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/marrimo/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/bartjo/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/omnizya/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/ernestsemerda/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/andreas_pr/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/edgarchris99/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/thomasgeisen/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/gseguin/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/joannefournier/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/demersdesigns/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/adammarsbar/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/nasirwd/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/n_tassone/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/javorszky/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/themrdave/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/yecidsm/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/nicollerich/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/canapud/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/nicoleglynn/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/judzhin_miles/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/designervzm/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/kianoshp/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/evandrix/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/alterchuca/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/dhrubo/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/ma_tiax/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/ssbb_me/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/dorphern/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/mauriolg/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/bruno_mart/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/mactopus/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/the_winslet/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/joemdesign/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/Shriiiiimp/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/jacobbennett/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/nfedoroff/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/iamglimy/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/allagringaus/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/aiiaiiaii/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/olaolusoga/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/buryaknick/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/wim1k/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/nicklacke/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/a1chapone/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/steynviljoen/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/strikewan/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/ryankirkman/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/andrewabogado/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/doooon/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/jagan123/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/ariffsetiawan/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/elenadissi/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/mwarkentin/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/thierrymeier_/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/r_garcia/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/dmackerman/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/borantula/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/konus/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/spacewood_/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/ryuchi311/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/evanshajed/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/tristanlegros/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/shoaib253/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/aislinnkelly/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/okcoker/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/timpetricola/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/sunshinedgirl/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/chadami/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/aleclarsoniv/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/nomidesigns/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/petebernardo/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/scottiedude/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/millinet/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/imsoper/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/imammuht/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/benjamin_knight/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/nepdud/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/joki4/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/lanceguyatt/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/bboy1895/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/amywebbb/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/rweve/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/haruintesettden/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/ricburton/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/nelshd/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/batsirai/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/primozcigler/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/jffgrdnr/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/8d3k/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/geneseleznev/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/al_li/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/souperphly/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/mslarkina/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/2fockus/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/cdavis565/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/xiel/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/turkutuuli/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/uxward/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/lebinoclard/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/gauravjassal/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/davidmerrique/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/mdsisto/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/andrewofficer/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/kojourin/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/dnirmal/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/kevka/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/mr_shiznit/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/aluisio_azevedo/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/cloudstudio/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/danvierich/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/alexivanichkin/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/fran_mchamy/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/perretmagali/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/betraydan/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/cadikkara/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/matbeedotcom/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/jeremyworboys/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/bpartridge/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/michaelkoper/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/silv3rgvn/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/alevizio/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/johnsmithagency/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/lawlbwoy/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/vitor376/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/desastrozo/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/thimo_cz/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/jasonmarkjones/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/lhausermann/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/xravil/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/guischmitt/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/vigobronx/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/panghal0/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/miguelkooreman/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/surgeonist/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/christianoliff/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/caspergrl/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/iamkarna/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/ipavelek/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/pierre_nel/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/y2graphic/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/sterlingrules/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/elbuscainfo/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/bennyjien/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/stushona/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/estebanuribe/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/embrcecreations/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/danillos/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/elliotlewis/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/charlesrpratt/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/vladyn/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/emmeffess/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/carlosblanco_eu/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/leonfedotov/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/rangafangs/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/chris_frees/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/tgormtx/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/bryan_topham/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/jpscribbles/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/mighty55/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/carbontwelve/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/isaacfifth/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/iamjdeleon/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/snowwrite/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/barputro/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/drewbyreese/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/sachacorazzi/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/bistrianiosip/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/magoo04/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/pehamondello/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/yayteejay/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/a_harris88/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/algunsanabria/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/zforrester/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/ovall/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/carlosjgsousa/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/geobikas/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/ah_lice/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/looneydoodle/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/nerdgr8/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/ddggccaa/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/zackeeler/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/normanbox/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/el_fuertisimo/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/ismail_biltagi/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/juangomezw/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/jnmnrd/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/patrickcoombe/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/ryanjohnson_me/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/markolschesky/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/jeffgolenski/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/kvasnic/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/gauchomatt/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/afusinatto/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/kevinoh/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/okansurreel/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/adamawesomeface/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/emileboudeling/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/arishi_/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/juanmamartinez/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/wikiziner/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/danthms/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/mkginfo/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/terrorpixel/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/curiousonaut/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/prheemo/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/michaelcolenso/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/foczzi/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/martip07/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/thaodang17/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/johncafazza/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/robinlayfield/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/franciscoamk/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/abdulhyeuk/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/marklamb/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/edobene/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/andresenfredrik/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/mikaeljorhult/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/chrisslowik/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/vinciarts/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/meelford/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/elliotnolten/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/yehudab/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/vijaykarthik/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/bfrohs/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/josep_martins/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/attacks/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/sur4dye/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/tumski/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/instalox/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/mangosango/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/paulfarino/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/kazaky999/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/kiwiupover/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/nvkznemo/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/tom_even/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/ratbus/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/woodsman001/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/joshmedeski/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/thewillbeard/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/psaikali/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/joe_black/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/aleinadsays/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/marcusgorillius/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/hota_v/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/jghyllebert/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/shinze/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/janpalounek/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/jeremiespoken/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/her_ruu/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/dansowter/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/felipeapiress/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/magugzbrand2d/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/posterjob/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/nathalie_fs/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/bobbytwoshoes/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/dreizle/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/jeremymouton/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/elisabethkjaer/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/notbadart/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/mohanrohith/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/jlsolerdeltoro/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/itskawsar/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/slowspock/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/zvchkelly/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/wiljanslofstra/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/craighenneberry/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/trubeatto/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/juaumlol/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/samscouto/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/BenouarradeM/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/gipsy_raf/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/netonet_il/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/arkokoley/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/itsajimithing/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/smalonso/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/victordeanda/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/_dwite_/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/richardgarretts/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/gregrwilkinson/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/anatolinicolae/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/lu4sh1i/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/stefanotirloni/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/ostirbu/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/darcystonge/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/naitanamoreno/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/michaelcomiskey/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/adhiardana/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/marcomano_/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/davidcazalis/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/falconerie/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/gregkilian/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/bcrad/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/bolzanmarco/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/low_res/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/vlajki/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/petar_prog/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/jonkspr/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/akmalfikri/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/mfacchinello/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/atanism/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/harry_sistalam/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/murrayswift/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/bobwassermann/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/gavr1l0/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/madshensel/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/mr_subtle/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/deviljho_/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/salimianoff/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/joetruesdell/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/twittypork/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/airskylar/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/dnezkumar/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/dgajjar/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/cherif_b/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/salvafc/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/louis_currie/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/deeenright/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/cybind/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/eyronn/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/vickyshits/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/sweetdelisa/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/cboller1/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/andresdjasso/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/melvindidit/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/andysolomon/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/thaisselenator_/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/lvovenok/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/giuliusa/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/belyaev_rs/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/overcloacked/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/kamal_chaneman/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/incubo82/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/hellofeverrrr/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/mhaligowski/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/sunlandictwin/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/bu7921/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/andytlaw/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/jeremery/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/finchjke/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/manigm/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/umurgdk/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/scottfeltham/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/ganserene/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/mutu_krish/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/jodytaggart/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/ntfblog/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/tanveerrao/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/hfalucas/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/alxleroydeval/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/kucingbelang4/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/bargaorobalo/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/colgruv/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/stalewine/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/kylefrost/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/baumannzone/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/angelcolberg/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/sachingawas/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/jjshaw14/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/ramanathan_pdy/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/johndezember/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/nilshoenson/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/brandonmorreale/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/nutzumi/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/brandonflatsoda/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/sergeyalmone/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/klefue/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/kirangopal/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/baumann_alex/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/matthewkay_/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/jay_wilburn/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/shesgared/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/apriendeau/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/johnriordan/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/wake_gs/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/aleksitappura/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/emsgulam/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/xilantra/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/imomenui/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/sircalebgrove/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/newbrushes/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/hsinyo23/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/m4rio/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/katiemdaly/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/s4f1/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/ecommerceil/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/marlinjayakody/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/swooshycueb/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/sangdth/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/coderdiaz/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/bluefx_/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/vivekprvr/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/sasha_shestakov/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/eugeneeweb/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/dgclegg/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/n1ght_coder/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/dixchen/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/blakehawksworth/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/trueblood_33/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/hai_ninh_nguyen/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/marclgonzales/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/yesmeck/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/stephcoue/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/doronmalki/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/ruehldesign/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/anasnakawa/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/kijanmaharjan/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/wearesavas/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/stefvdham/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/tweetubhai/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/alecarpentier/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/fiterik/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/antonyryndya/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/d00maz/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/theonlyzeke/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/missaaamy/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/carlosm/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/manekenthe/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/reetajayendra/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/jeremyshimko/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/justinrgraham/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/stefanozoffoli/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/overra/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/mrebay007/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/shvelo96/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/pyronite/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/thedjpetersen/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/rtyukmaev/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/_williamguerra/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/albertaugustin/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/vikashpathak18/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/kevinjohndayy/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/vj_demien/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/colirpixoil/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/goddardlewis/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/laasli/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/jqiuss/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/heycamtaylor/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/nastya_mane/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/mastermindesign/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/ccinojasso1/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/nyancecom/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/sandywoodruff/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/bighanddesign/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/sbtransparent/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/aviddayentonbay/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/richwild/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/kaysix_dizzy/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/tur8le/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/seyedhossein1/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/privetwagner/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/emmandenn/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/dev_essentials/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/jmfsocial/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/_yardenoon/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/mateaodviteza/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/weavermedia/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/mufaddal_mw/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/hafeeskhan/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/ashernatali/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/sulaqo/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/eddiechen/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/josecarlospsh/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/vm_f/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/enricocicconi/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/danmartin70/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/gmourier/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/donjain/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/mrxloka/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/_pedropinho/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/eitarafa/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/oscarowusu/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/ralph_lam/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/panchajanyag/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/woodydotmx/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/jerrybai1907/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/marshallchen_/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/xamorep/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/aio___/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/chaabane_wail/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/txcx/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/akashsharma39/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/falling_soul/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/sainraja/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/mugukamil/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/johannesneu/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/markwienands/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/karthipanraj/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/balakayuriy/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/alan_zhang_/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/layerssss/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/kaspernordkvist/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/mirfanqureshi/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/hanna_smi/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/VMilescu/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/aeon56/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/m_kalibry/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/sreejithexp/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/dicesales/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/dhoot_amit/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/smenov/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/lonesomelemon/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/vladimirdevic/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/joelcipriano/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/haligaliharun/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/buleswapnil/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/serefka/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/ifarafonow/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/vikasvinfotech/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/urrutimeoli/128.jpg',
          'https://s3.amazonaws.com/uifaces/faces/twitter/areandacom/128.jpg',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en/internet/index.js': [
      function(require, module, exports) {
        var internet = {}
        module['exports'] = internet
        internet.free_email = require('./free_email')
        internet.example_email = require('./example_email')
        internet.domain_suffix = require('./domain_suffix')
        internet.avatar_uri = require('./avatar_uri')
      },
      {
        './free_email':
          '../node_modules/faker/lib/locales/en/internet/free_email.js',
        './example_email':
          '../node_modules/faker/lib/locales/en/internet/example_email.js',
        './domain_suffix':
          '../node_modules/faker/lib/locales/en/internet/domain_suffix.js',
        './avatar_uri':
          '../node_modules/faker/lib/locales/en/internet/avatar_uri.js',
      },
    ],
    '../node_modules/faker/lib/locales/en/database/collation.js': [
      function(require, module, exports) {
        module['exports'] = [
          'utf8_unicode_ci',
          'utf8_general_ci',
          'utf8_bin',
          'ascii_bin',
          'ascii_general_ci',
          'cp1250_bin',
          'cp1250_general_ci',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en/database/column.js': [
      function(require, module, exports) {
        module['exports'] = [
          'id',
          'title',
          'name',
          'email',
          'phone',
          'token',
          'group',
          'category',
          'password',
          'comment',
          'avatar',
          'status',
          'createdAt',
          'updatedAt',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en/database/engine.js': [
      function(require, module, exports) {
        module['exports'] = [
          'InnoDB',
          'MyISAM',
          'MEMORY',
          'CSV',
          'BLACKHOLE',
          'ARCHIVE',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en/database/type.js': [
      function(require, module, exports) {
        module['exports'] = [
          'int',
          'varchar',
          'text',
          'date',
          'datetime',
          'tinyint',
          'time',
          'timestamp',
          'smallint',
          'mediumint',
          'bigint',
          'decimal',
          'float',
          'double',
          'real',
          'bit',
          'boolean',
          'serial',
          'blob',
          'binary',
          'enum',
          'set',
          'geometry',
          'point',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en/database/index.js': [
      function(require, module, exports) {
        var database = {}
        module['exports'] = database
        database.collation = require('./collation')
        database.column = require('./column')
        database.engine = require('./engine')
        database.type = require('./type')
      },
      {
        './collation':
          '../node_modules/faker/lib/locales/en/database/collation.js',
        './column':
          '../node_modules/faker/lib/locales/en/database/column.js',
        './engine':
          '../node_modules/faker/lib/locales/en/database/engine.js',
        './type': '../node_modules/faker/lib/locales/en/database/type.js',
      },
    ],
    '../node_modules/faker/lib/locales/en/lorem/words.js': [
      function(require, module, exports) {
        module['exports'] = [
          'alias',
          'consequatur',
          'aut',
          'perferendis',
          'sit',
          'voluptatem',
          'accusantium',
          'doloremque',
          'aperiam',
          'eaque',
          'ipsa',
          'quae',
          'ab',
          'illo',
          'inventore',
          'veritatis',
          'et',
          'quasi',
          'architecto',
          'beatae',
          'vitae',
          'dicta',
          'sunt',
          'explicabo',
          'aspernatur',
          'aut',
          'odit',
          'aut',
          'fugit',
          'sed',
          'quia',
          'consequuntur',
          'magni',
          'dolores',
          'eos',
          'qui',
          'ratione',
          'voluptatem',
          'sequi',
          'nesciunt',
          'neque',
          'dolorem',
          'ipsum',
          'quia',
          'dolor',
          'sit',
          'amet',
          'consectetur',
          'adipisci',
          'velit',
          'sed',
          'quia',
          'non',
          'numquam',
          'eius',
          'modi',
          'tempora',
          'incidunt',
          'ut',
          'labore',
          'et',
          'dolore',
          'magnam',
          'aliquam',
          'quaerat',
          'voluptatem',
          'ut',
          'enim',
          'ad',
          'minima',
          'veniam',
          'quis',
          'nostrum',
          'exercitationem',
          'ullam',
          'corporis',
          'nemo',
          'enim',
          'ipsam',
          'voluptatem',
          'quia',
          'voluptas',
          'sit',
          'suscipit',
          'laboriosam',
          'nisi',
          'ut',
          'aliquid',
          'ex',
          'ea',
          'commodi',
          'consequatur',
          'quis',
          'autem',
          'vel',
          'eum',
          'iure',
          'reprehenderit',
          'qui',
          'in',
          'ea',
          'voluptate',
          'velit',
          'esse',
          'quam',
          'nihil',
          'molestiae',
          'et',
          'iusto',
          'odio',
          'dignissimos',
          'ducimus',
          'qui',
          'blanditiis',
          'praesentium',
          'laudantium',
          'totam',
          'rem',
          'voluptatum',
          'deleniti',
          'atque',
          'corrupti',
          'quos',
          'dolores',
          'et',
          'quas',
          'molestias',
          'excepturi',
          'sint',
          'occaecati',
          'cupiditate',
          'non',
          'provident',
          'sed',
          'ut',
          'perspiciatis',
          'unde',
          'omnis',
          'iste',
          'natus',
          'error',
          'similique',
          'sunt',
          'in',
          'culpa',
          'qui',
          'officia',
          'deserunt',
          'mollitia',
          'animi',
          'id',
          'est',
          'laborum',
          'et',
          'dolorum',
          'fuga',
          'et',
          'harum',
          'quidem',
          'rerum',
          'facilis',
          'est',
          'et',
          'expedita',
          'distinctio',
          'nam',
          'libero',
          'tempore',
          'cum',
          'soluta',
          'nobis',
          'est',
          'eligendi',
          'optio',
          'cumque',
          'nihil',
          'impedit',
          'quo',
          'porro',
          'quisquam',
          'est',
          'qui',
          'minus',
          'id',
          'quod',
          'maxime',
          'placeat',
          'facere',
          'possimus',
          'omnis',
          'voluptas',
          'assumenda',
          'est',
          'omnis',
          'dolor',
          'repellendus',
          'temporibus',
          'autem',
          'quibusdam',
          'et',
          'aut',
          'consequatur',
          'vel',
          'illum',
          'qui',
          'dolorem',
          'eum',
          'fugiat',
          'quo',
          'voluptas',
          'nulla',
          'pariatur',
          'at',
          'vero',
          'eos',
          'et',
          'accusamus',
          'officiis',
          'debitis',
          'aut',
          'rerum',
          'necessitatibus',
          'saepe',
          'eveniet',
          'ut',
          'et',
          'voluptates',
          'repudiandae',
          'sint',
          'et',
          'molestiae',
          'non',
          'recusandae',
          'itaque',
          'earum',
          'rerum',
          'hic',
          'tenetur',
          'a',
          'sapiente',
          'delectus',
          'ut',
          'aut',
          'reiciendis',
          'voluptatibus',
          'maiores',
          'doloribus',
          'asperiores',
          'repellat',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en/lorem/supplemental.js': [
      function(require, module, exports) {
        module['exports'] = [
          'abbas',
          'abduco',
          'abeo',
          'abscido',
          'absconditus',
          'absens',
          'absorbeo',
          'absque',
          'abstergo',
          'absum',
          'abundans',
          'abutor',
          'accedo',
          'accendo',
          'acceptus',
          'accipio',
          'accommodo',
          'accusator',
          'acer',
          'acerbitas',
          'acervus',
          'acidus',
          'acies',
          'acquiro',
          'acsi',
          'adamo',
          'adaugeo',
          'addo',
          'adduco',
          'ademptio',
          'adeo',
          'adeptio',
          'adfectus',
          'adfero',
          'adficio',
          'adflicto',
          'adhaero',
          'adhuc',
          'adicio',
          'adimpleo',
          'adinventitias',
          'adipiscor',
          'adiuvo',
          'administratio',
          'admiratio',
          'admitto',
          'admoneo',
          'admoveo',
          'adnuo',
          'adopto',
          'adsidue',
          'adstringo',
          'adsuesco',
          'adsum',
          'adulatio',
          'adulescens',
          'adultus',
          'aduro',
          'advenio',
          'adversus',
          'advoco',
          'aedificium',
          'aeger',
          'aegre',
          'aegrotatio',
          'aegrus',
          'aeneus',
          'aequitas',
          'aequus',
          'aer',
          'aestas',
          'aestivus',
          'aestus',
          'aetas',
          'aeternus',
          'ager',
          'aggero',
          'aggredior',
          'agnitio',
          'agnosco',
          'ago',
          'ait',
          'aiunt',
          'alienus',
          'alii',
          'alioqui',
          'aliqua',
          'alius',
          'allatus',
          'alo',
          'alter',
          'altus',
          'alveus',
          'amaritudo',
          'ambitus',
          'ambulo',
          'amicitia',
          'amiculum',
          'amissio',
          'amita',
          'amitto',
          'amo',
          'amor',
          'amoveo',
          'amplexus',
          'amplitudo',
          'amplus',
          'ancilla',
          'angelus',
          'angulus',
          'angustus',
          'animadverto',
          'animi',
          'animus',
          'annus',
          'anser',
          'ante',
          'antea',
          'antepono',
          'antiquus',
          'aperio',
          'aperte',
          'apostolus',
          'apparatus',
          'appello',
          'appono',
          'appositus',
          'approbo',
          'apto',
          'aptus',
          'apud',
          'aqua',
          'ara',
          'aranea',
          'arbitro',
          'arbor',
          'arbustum',
          'arca',
          'arceo',
          'arcesso',
          'arcus',
          'argentum',
          'argumentum',
          'arguo',
          'arma',
          'armarium',
          'armo',
          'aro',
          'ars',
          'articulus',
          'artificiose',
          'arto',
          'arx',
          'ascisco',
          'ascit',
          'asper',
          'aspicio',
          'asporto',
          'assentator',
          'astrum',
          'atavus',
          'ater',
          'atqui',
          'atrocitas',
          'atrox',
          'attero',
          'attollo',
          'attonbitus',
          'auctor',
          'auctus',
          'audacia',
          'audax',
          'audentia',
          'audeo',
          'audio',
          'auditor',
          'aufero',
          'aureus',
          'auris',
          'aurum',
          'aut',
          'autem',
          'autus',
          'auxilium',
          'avaritia',
          'avarus',
          'aveho',
          'averto',
          'avoco',
          'baiulus',
          'balbus',
          'barba',
          'bardus',
          'basium',
          'beatus',
          'bellicus',
          'bellum',
          'bene',
          'beneficium',
          'benevolentia',
          'benigne',
          'bestia',
          'bibo',
          'bis',
          'blandior',
          'bonus',
          'bos',
          'brevis',
          'cado',
          'caecus',
          'caelestis',
          'caelum',
          'calamitas',
          'calcar',
          'calco',
          'calculus',
          'callide',
          'campana',
          'candidus',
          'canis',
          'canonicus',
          'canto',
          'capillus',
          'capio',
          'capitulus',
          'capto',
          'caput',
          'carbo',
          'carcer',
          'careo',
          'caries',
          'cariosus',
          'caritas',
          'carmen',
          'carpo',
          'carus',
          'casso',
          'caste',
          'casus',
          'catena',
          'caterva',
          'cattus',
          'cauda',
          'causa',
          'caute',
          'caveo',
          'cavus',
          'cedo',
          'celebrer',
          'celer',
          'celo',
          'cena',
          'cenaculum',
          'ceno',
          'censura',
          'centum',
          'cerno',
          'cernuus',
          'certe',
          'certo',
          'certus',
          'cervus',
          'cetera',
          'charisma',
          'chirographum',
          'cibo',
          'cibus',
          'cicuta',
          'cilicium',
          'cimentarius',
          'ciminatio',
          'cinis',
          'circumvenio',
          'cito',
          'civis',
          'civitas',
          'clam',
          'clamo',
          'claro',
          'clarus',
          'claudeo',
          'claustrum',
          'clementia',
          'clibanus',
          'coadunatio',
          'coaegresco',
          'coepi',
          'coerceo',
          'cogito',
          'cognatus',
          'cognomen',
          'cogo',
          'cohaero',
          'cohibeo',
          'cohors',
          'colligo',
          'colloco',
          'collum',
          'colo',
          'color',
          'coma',
          'combibo',
          'comburo',
          'comedo',
          'comes',
          'cometes',
          'comis',
          'comitatus',
          'commemoro',
          'comminor',
          'commodo',
          'communis',
          'comparo',
          'compello',
          'complectus',
          'compono',
          'comprehendo',
          'comptus',
          'conatus',
          'concedo',
          'concido',
          'conculco',
          'condico',
          'conduco',
          'confero',
          'confido',
          'conforto',
          'confugo',
          'congregatio',
          'conicio',
          'coniecto',
          'conitor',
          'coniuratio',
          'conor',
          'conqueror',
          'conscendo',
          'conservo',
          'considero',
          'conspergo',
          'constans',
          'consuasor',
          'contabesco',
          'contego',
          'contigo',
          'contra',
          'conturbo',
          'conventus',
          'convoco',
          'copia',
          'copiose',
          'cornu',
          'corona',
          'corpus',
          'correptius',
          'corrigo',
          'corroboro',
          'corrumpo',
          'coruscus',
          'cotidie',
          'crapula',
          'cras',
          'crastinus',
          'creator',
          'creber',
          'crebro',
          'credo',
          'creo',
          'creptio',
          'crepusculum',
          'cresco',
          'creta',
          'cribro',
          'crinis',
          'cruciamentum',
          'crudelis',
          'cruentus',
          'crur',
          'crustulum',
          'crux',
          'cubicularis',
          'cubitum',
          'cubo',
          'cui',
          'cuius',
          'culpa',
          'culpo',
          'cultellus',
          'cultura',
          'cum',
          'cunabula',
          'cunae',
          'cunctatio',
          'cupiditas',
          'cupio',
          'cuppedia',
          'cupressus',
          'cur',
          'cura',
          'curatio',
          'curia',
          'curiositas',
          'curis',
          'curo',
          'curriculum',
          'currus',
          'cursim',
          'curso',
          'cursus',
          'curto',
          'curtus',
          'curvo',
          'curvus',
          'custodia',
          'damnatio',
          'damno',
          'dapifer',
          'debeo',
          'debilito',
          'decens',
          'decerno',
          'decet',
          'decimus',
          'decipio',
          'decor',
          'decretum',
          'decumbo',
          'dedecor',
          'dedico',
          'deduco',
          'defaeco',
          'defendo',
          'defero',
          'defessus',
          'defetiscor',
          'deficio',
          'defigo',
          'defleo',
          'defluo',
          'defungo',
          'degenero',
          'degero',
          'degusto',
          'deinde',
          'delectatio',
          'delego',
          'deleo',
          'delibero',
          'delicate',
          'delinquo',
          'deludo',
          'demens',
          'demergo',
          'demitto',
          'demo',
          'demonstro',
          'demoror',
          'demulceo',
          'demum',
          'denego',
          'denique',
          'dens',
          'denuncio',
          'denuo',
          'deorsum',
          'depereo',
          'depono',
          'depopulo',
          'deporto',
          'depraedor',
          'deprecator',
          'deprimo',
          'depromo',
          'depulso',
          'deputo',
          'derelinquo',
          'derideo',
          'deripio',
          'desidero',
          'desino',
          'desipio',
          'desolo',
          'desparatus',
          'despecto',
          'despirmatio',
          'infit',
          'inflammatio',
          'paens',
          'patior',
          'patria',
          'patrocinor',
          'patruus',
          'pauci',
          'paulatim',
          'pauper',
          'pax',
          'peccatus',
          'pecco',
          'pecto',
          'pectus',
          'pecunia',
          'pecus',
          'peior',
          'pel',
          'ocer',
          'socius',
          'sodalitas',
          'sol',
          'soleo',
          'solio',
          'solitudo',
          'solium',
          'sollers',
          'sollicito',
          'solum',
          'solus',
          'solutio',
          'solvo',
          'somniculosus',
          'somnus',
          'sonitus',
          'sono',
          'sophismata',
          'sopor',
          'sordeo',
          'sortitus',
          'spargo',
          'speciosus',
          'spectaculum',
          'speculum',
          'sperno',
          'spero',
          'spes',
          'spiculum',
          'spiritus',
          'spoliatio',
          'sponte',
          'stabilis',
          'statim',
          'statua',
          'stella',
          'stillicidium',
          'stipes',
          'stips',
          'sto',
          'strenuus',
          'strues',
          'studio',
          'stultus',
          'suadeo',
          'suasoria',
          'sub',
          'subito',
          'subiungo',
          'sublime',
          'subnecto',
          'subseco',
          'substantia',
          'subvenio',
          'succedo',
          'succurro',
          'sufficio',
          'suffoco',
          'suffragium',
          'suggero',
          'sui',
          'sulum',
          'sum',
          'summa',
          'summisse',
          'summopere',
          'sumo',
          'sumptus',
          'supellex',
          'super',
          'suppellex',
          'supplanto',
          'suppono',
          'supra',
          'surculus',
          'surgo',
          'sursum',
          'suscipio',
          'suspendo',
          'sustineo',
          'suus',
          'synagoga',
          'tabella',
          'tabernus',
          'tabesco',
          'tabgo',
          'tabula',
          'taceo',
          'tactus',
          'taedium',
          'talio',
          'talis',
          'talus',
          'tam',
          'tamdiu',
          'tamen',
          'tametsi',
          'tamisium',
          'tamquam',
          'tandem',
          'tantillus',
          'tantum',
          'tardus',
          'tego',
          'temeritas',
          'temperantia',
          'templum',
          'temptatio',
          'tempus',
          'tenax',
          'tendo',
          'teneo',
          'tener',
          'tenuis',
          'tenus',
          'tepesco',
          'tepidus',
          'ter',
          'terebro',
          'teres',
          'terga',
          'tergeo',
          'tergiversatio',
          'tergo',
          'tergum',
          'termes',
          'terminatio',
          'tero',
          'terra',
          'terreo',
          'territo',
          'terror',
          'tersus',
          'tertius',
          'testimonium',
          'texo',
          'textilis',
          'textor',
          'textus',
          'thalassinus',
          'theatrum',
          'theca',
          'thema',
          'theologus',
          'thermae',
          'thesaurus',
          'thesis',
          'thorax',
          'thymbra',
          'thymum',
          'tibi',
          'timidus',
          'timor',
          'titulus',
          'tolero',
          'tollo',
          'tondeo',
          'tonsor',
          'torqueo',
          'torrens',
          'tot',
          'totidem',
          'toties',
          'totus',
          'tracto',
          'trado',
          'traho',
          'trans',
          'tredecim',
          'tremo',
          'trepide',
          'tres',
          'tribuo',
          'tricesimus',
          'triduana',
          'triginta',
          'tripudio',
          'tristis',
          'triumphus',
          'trucido',
          'truculenter',
          'tubineus',
          'tui',
          'tum',
          'tumultus',
          'tunc',
          'turba',
          'turbo',
          'turpe',
          'turpis',
          'tutamen',
          'tutis',
          'tyrannus',
          'uberrime',
          'ubi',
          'ulciscor',
          'ullus',
          'ulterius',
          'ultio',
          'ultra',
          'umbra',
          'umerus',
          'umquam',
          'una',
          'unde',
          'undique',
          'universe',
          'unus',
          'urbanus',
          'urbs',
          'uredo',
          'usitas',
          'usque',
          'ustilo',
          'ustulo',
          'usus',
          'uter',
          'uterque',
          'utilis',
          'utique',
          'utor',
          'utpote',
          'utrimque',
          'utroque',
          'utrum',
          'uxor',
          'vaco',
          'vacuus',
          'vado',
          'vae',
          'valde',
          'valens',
          'valeo',
          'valetudo',
          'validus',
          'vallum',
          'vapulus',
          'varietas',
          'varius',
          'vehemens',
          'vel',
          'velociter',
          'velum',
          'velut',
          'venia',
          'venio',
          'ventito',
          'ventosus',
          'ventus',
          'venustas',
          'ver',
          'verbera',
          'verbum',
          'vere',
          'verecundia',
          'vereor',
          'vergo',
          'veritas',
          'vero',
          'versus',
          'verto',
          'verumtamen',
          'verus',
          'vesco',
          'vesica',
          'vesper',
          'vespillo',
          'vester',
          'vestigium',
          'vestrum',
          'vetus',
          'via',
          'vicinus',
          'vicissitudo',
          'victoria',
          'victus',
          'videlicet',
          'video',
          'viduata',
          'viduo',
          'vigilo',
          'vigor',
          'vilicus',
          'vilis',
          'vilitas',
          'villa',
          'vinco',
          'vinculum',
          'vindico',
          'vinitor',
          'vinum',
          'vir',
          'virga',
          'virgo',
          'viridis',
          'viriliter',
          'virtus',
          'vis',
          'viscus',
          'vita',
          'vitiosus',
          'vitium',
          'vito',
          'vivo',
          'vix',
          'vobis',
          'vociferor',
          'voco',
          'volaticus',
          'volo',
          'volubilis',
          'voluntarius',
          'volup',
          'volutabrum',
          'volva',
          'vomer',
          'vomica',
          'vomito',
          'vorago',
          'vorax',
          'voro',
          'vos',
          'votum',
          'voveo',
          'vox',
          'vulariter',
          'vulgaris',
          'vulgivagus',
          'vulgo',
          'vulgus',
          'vulnero',
          'vulnus',
          'vulpes',
          'vulticulus',
          'vultuosus',
          'xiphias',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en/lorem/index.js': [
      function(require, module, exports) {
        var lorem = {}
        module['exports'] = lorem
        lorem.words = require('./words')
        lorem.supplemental = require('./supplemental')
      },
      {
        './words': '../node_modules/faker/lib/locales/en/lorem/words.js',
        './supplemental':
          '../node_modules/faker/lib/locales/en/lorem/supplemental.js',
      },
    ],
    '../node_modules/faker/lib/locales/en/name/first_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Aaliyah',
          'Aaron',
          'Abagail',
          'Abbey',
          'Abbie',
          'Abbigail',
          'Abby',
          'Abdiel',
          'Abdul',
          'Abdullah',
          'Abe',
          'Abel',
          'Abelardo',
          'Abigail',
          'Abigale',
          'Abigayle',
          'Abner',
          'Abraham',
          'Ada',
          'Adah',
          'Adalberto',
          'Adaline',
          'Adam',
          'Adan',
          'Addie',
          'Addison',
          'Adela',
          'Adelbert',
          'Adele',
          'Adelia',
          'Adeline',
          'Adell',
          'Adella',
          'Adelle',
          'Aditya',
          'Adolf',
          'Adolfo',
          'Adolph',
          'Adolphus',
          'Adonis',
          'Adrain',
          'Adrian',
          'Adriana',
          'Adrianna',
          'Adriel',
          'Adrien',
          'Adrienne',
          'Afton',
          'Aglae',
          'Agnes',
          'Agustin',
          'Agustina',
          'Ahmad',
          'Ahmed',
          'Aida',
          'Aidan',
          'Aiden',
          'Aileen',
          'Aimee',
          'Aisha',
          'Aiyana',
          'Akeem',
          'Al',
          'Alaina',
          'Alan',
          'Alana',
          'Alanis',
          'Alanna',
          'Alayna',
          'Alba',
          'Albert',
          'Alberta',
          'Albertha',
          'Alberto',
          'Albin',
          'Albina',
          'Alda',
          'Alden',
          'Alec',
          'Aleen',
          'Alejandra',
          'Alejandrin',
          'Alek',
          'Alena',
          'Alene',
          'Alessandra',
          'Alessandro',
          'Alessia',
          'Aletha',
          'Alex',
          'Alexa',
          'Alexander',
          'Alexandra',
          'Alexandre',
          'Alexandrea',
          'Alexandria',
          'Alexandrine',
          'Alexandro',
          'Alexane',
          'Alexanne',
          'Alexie',
          'Alexis',
          'Alexys',
          'Alexzander',
          'Alf',
          'Alfonso',
          'Alfonzo',
          'Alford',
          'Alfred',
          'Alfreda',
          'Alfredo',
          'Ali',
          'Alia',
          'Alice',
          'Alicia',
          'Alisa',
          'Alisha',
          'Alison',
          'Alivia',
          'Aliya',
          'Aliyah',
          'Aliza',
          'Alize',
          'Allan',
          'Allen',
          'Allene',
          'Allie',
          'Allison',
          'Ally',
          'Alphonso',
          'Alta',
          'Althea',
          'Alva',
          'Alvah',
          'Alvena',
          'Alvera',
          'Alverta',
          'Alvina',
          'Alvis',
          'Alyce',
          'Alycia',
          'Alysa',
          'Alysha',
          'Alyson',
          'Alysson',
          'Amalia',
          'Amanda',
          'Amani',
          'Amara',
          'Amari',
          'Amaya',
          'Amber',
          'Ambrose',
          'Amelia',
          'Amelie',
          'Amely',
          'America',
          'Americo',
          'Amie',
          'Amina',
          'Amir',
          'Amira',
          'Amiya',
          'Amos',
          'Amparo',
          'Amy',
          'Amya',
          'Ana',
          'Anabel',
          'Anabelle',
          'Anahi',
          'Anais',
          'Anastacio',
          'Anastasia',
          'Anderson',
          'Andre',
          'Andreane',
          'Andreanne',
          'Andres',
          'Andrew',
          'Andy',
          'Angel',
          'Angela',
          'Angelica',
          'Angelina',
          'Angeline',
          'Angelita',
          'Angelo',
          'Angie',
          'Angus',
          'Anibal',
          'Anika',
          'Anissa',
          'Anita',
          'Aniya',
          'Aniyah',
          'Anjali',
          'Anna',
          'Annabel',
          'Annabell',
          'Annabelle',
          'Annalise',
          'Annamae',
          'Annamarie',
          'Anne',
          'Annetta',
          'Annette',
          'Annie',
          'Ansel',
          'Ansley',
          'Anthony',
          'Antoinette',
          'Antone',
          'Antonetta',
          'Antonette',
          'Antonia',
          'Antonietta',
          'Antonina',
          'Antonio',
          'Antwan',
          'Antwon',
          'Anya',
          'April',
          'Ara',
          'Araceli',
          'Aracely',
          'Arch',
          'Archibald',
          'Ardella',
          'Arden',
          'Ardith',
          'Arely',
          'Ari',
          'Ariane',
          'Arianna',
          'Aric',
          'Ariel',
          'Arielle',
          'Arjun',
          'Arlene',
          'Arlie',
          'Arlo',
          'Armand',
          'Armando',
          'Armani',
          'Arnaldo',
          'Arne',
          'Arno',
          'Arnold',
          'Arnoldo',
          'Arnulfo',
          'Aron',
          'Art',
          'Arthur',
          'Arturo',
          'Arvel',
          'Arvid',
          'Arvilla',
          'Aryanna',
          'Asa',
          'Asha',
          'Ashlee',
          'Ashleigh',
          'Ashley',
          'Ashly',
          'Ashlynn',
          'Ashton',
          'Ashtyn',
          'Asia',
          'Assunta',
          'Astrid',
          'Athena',
          'Aubree',
          'Aubrey',
          'Audie',
          'Audra',
          'Audreanne',
          'Audrey',
          'August',
          'Augusta',
          'Augustine',
          'Augustus',
          'Aurelia',
          'Aurelie',
          'Aurelio',
          'Aurore',
          'Austen',
          'Austin',
          'Austyn',
          'Autumn',
          'Ava',
          'Avery',
          'Avis',
          'Axel',
          'Ayana',
          'Ayden',
          'Ayla',
          'Aylin',
          'Baby',
          'Bailee',
          'Bailey',
          'Barbara',
          'Barney',
          'Baron',
          'Barrett',
          'Barry',
          'Bart',
          'Bartholome',
          'Barton',
          'Baylee',
          'Beatrice',
          'Beau',
          'Beaulah',
          'Bell',
          'Bella',
          'Belle',
          'Ben',
          'Benedict',
          'Benjamin',
          'Bennett',
          'Bennie',
          'Benny',
          'Benton',
          'Berenice',
          'Bernadette',
          'Bernadine',
          'Bernard',
          'Bernardo',
          'Berneice',
          'Bernhard',
          'Bernice',
          'Bernie',
          'Berniece',
          'Bernita',
          'Berry',
          'Bert',
          'Berta',
          'Bertha',
          'Bertram',
          'Bertrand',
          'Beryl',
          'Bessie',
          'Beth',
          'Bethany',
          'Bethel',
          'Betsy',
          'Bette',
          'Bettie',
          'Betty',
          'Bettye',
          'Beulah',
          'Beverly',
          'Bianka',
          'Bill',
          'Billie',
          'Billy',
          'Birdie',
          'Blair',
          'Blaise',
          'Blake',
          'Blanca',
          'Blanche',
          'Blaze',
          'Bo',
          'Bobbie',
          'Bobby',
          'Bonita',
          'Bonnie',
          'Boris',
          'Boyd',
          'Brad',
          'Braden',
          'Bradford',
          'Bradley',
          'Bradly',
          'Brady',
          'Braeden',
          'Brain',
          'Brandi',
          'Brando',
          'Brandon',
          'Brandt',
          'Brandy',
          'Brandyn',
          'Brannon',
          'Branson',
          'Brant',
          'Braulio',
          'Braxton',
          'Brayan',
          'Breana',
          'Breanna',
          'Breanne',
          'Brenda',
          'Brendan',
          'Brenden',
          'Brendon',
          'Brenna',
          'Brennan',
          'Brennon',
          'Brent',
          'Bret',
          'Brett',
          'Bria',
          'Brian',
          'Briana',
          'Brianne',
          'Brice',
          'Bridget',
          'Bridgette',
          'Bridie',
          'Brielle',
          'Brigitte',
          'Brionna',
          'Brisa',
          'Britney',
          'Brittany',
          'Brock',
          'Broderick',
          'Brody',
          'Brook',
          'Brooke',
          'Brooklyn',
          'Brooks',
          'Brown',
          'Bruce',
          'Bryana',
          'Bryce',
          'Brycen',
          'Bryon',
          'Buck',
          'Bud',
          'Buddy',
          'Buford',
          'Bulah',
          'Burdette',
          'Burley',
          'Burnice',
          'Buster',
          'Cade',
          'Caden',
          'Caesar',
          'Caitlyn',
          'Cale',
          'Caleb',
          'Caleigh',
          'Cali',
          'Calista',
          'Callie',
          'Camden',
          'Cameron',
          'Camila',
          'Camilla',
          'Camille',
          'Camren',
          'Camron',
          'Camryn',
          'Camylle',
          'Candace',
          'Candelario',
          'Candice',
          'Candida',
          'Candido',
          'Cara',
          'Carey',
          'Carissa',
          'Carlee',
          'Carleton',
          'Carley',
          'Carli',
          'Carlie',
          'Carlo',
          'Carlos',
          'Carlotta',
          'Carmel',
          'Carmela',
          'Carmella',
          'Carmelo',
          'Carmen',
          'Carmine',
          'Carol',
          'Carolanne',
          'Carole',
          'Carolina',
          'Caroline',
          'Carolyn',
          'Carolyne',
          'Carrie',
          'Carroll',
          'Carson',
          'Carter',
          'Cary',
          'Casandra',
          'Casey',
          'Casimer',
          'Casimir',
          'Casper',
          'Cassandra',
          'Cassandre',
          'Cassidy',
          'Cassie',
          'Catalina',
          'Caterina',
          'Catharine',
          'Catherine',
          'Cathrine',
          'Cathryn',
          'Cathy',
          'Cayla',
          'Ceasar',
          'Cecelia',
          'Cecil',
          'Cecile',
          'Cecilia',
          'Cedrick',
          'Celestine',
          'Celestino',
          'Celia',
          'Celine',
          'Cesar',
          'Chad',
          'Chadd',
          'Chadrick',
          'Chaim',
          'Chance',
          'Chandler',
          'Chanel',
          'Chanelle',
          'Charity',
          'Charlene',
          'Charles',
          'Charley',
          'Charlie',
          'Charlotte',
          'Chase',
          'Chasity',
          'Chauncey',
          'Chaya',
          'Chaz',
          'Chelsea',
          'Chelsey',
          'Chelsie',
          'Chesley',
          'Chester',
          'Chet',
          'Cheyanne',
          'Cheyenne',
          'Chloe',
          'Chris',
          'Christ',
          'Christa',
          'Christelle',
          'Christian',
          'Christiana',
          'Christina',
          'Christine',
          'Christop',
          'Christophe',
          'Christopher',
          'Christy',
          'Chyna',
          'Ciara',
          'Cicero',
          'Cielo',
          'Cierra',
          'Cindy',
          'Citlalli',
          'Clair',
          'Claire',
          'Clara',
          'Clarabelle',
          'Clare',
          'Clarissa',
          'Clark',
          'Claud',
          'Claude',
          'Claudia',
          'Claudie',
          'Claudine',
          'Clay',
          'Clemens',
          'Clement',
          'Clementina',
          'Clementine',
          'Clemmie',
          'Cleo',
          'Cleora',
          'Cleta',
          'Cletus',
          'Cleve',
          'Cleveland',
          'Clifford',
          'Clifton',
          'Clint',
          'Clinton',
          'Clotilde',
          'Clovis',
          'Cloyd',
          'Clyde',
          'Coby',
          'Cody',
          'Colby',
          'Cole',
          'Coleman',
          'Colin',
          'Colleen',
          'Collin',
          'Colt',
          'Colten',
          'Colton',
          'Columbus',
          'Concepcion',
          'Conner',
          'Connie',
          'Connor',
          'Conor',
          'Conrad',
          'Constance',
          'Constantin',
          'Consuelo',
          'Cooper',
          'Cora',
          'Coralie',
          'Corbin',
          'Cordelia',
          'Cordell',
          'Cordia',
          'Cordie',
          'Corene',
          'Corine',
          'Cornelius',
          'Cornell',
          'Corrine',
          'Cortez',
          'Cortney',
          'Cory',
          'Coty',
          'Courtney',
          'Coy',
          'Craig',
          'Crawford',
          'Creola',
          'Cristal',
          'Cristian',
          'Cristina',
          'Cristobal',
          'Cristopher',
          'Cruz',
          'Crystal',
          'Crystel',
          'Cullen',
          'Curt',
          'Curtis',
          'Cydney',
          'Cynthia',
          'Cyril',
          'Cyrus',
          'Dagmar',
          'Dahlia',
          'Daija',
          'Daisha',
          'Daisy',
          'Dakota',
          'Dale',
          'Dallas',
          'Dallin',
          'Dalton',
          'Damaris',
          'Dameon',
          'Damian',
          'Damien',
          'Damion',
          'Damon',
          'Dan',
          'Dana',
          'Dandre',
          'Dane',
          "D'angelo",
          'Dangelo',
          'Danial',
          'Daniela',
          'Daniella',
          'Danielle',
          'Danika',
          'Dannie',
          'Danny',
          'Dante',
          'Danyka',
          'Daphne',
          'Daphnee',
          'Daphney',
          'Darby',
          'Daren',
          'Darian',
          'Dariana',
          'Darien',
          'Dario',
          'Darion',
          'Darius',
          'Darlene',
          'Daron',
          'Darrel',
          'Darrell',
          'Darren',
          'Darrick',
          'Darrin',
          'Darrion',
          'Darron',
          'Darryl',
          'Darwin',
          'Daryl',
          'Dashawn',
          'Dasia',
          'Dave',
          'David',
          'Davin',
          'Davion',
          'Davon',
          'Davonte',
          'Dawn',
          'Dawson',
          'Dax',
          'Dayana',
          'Dayna',
          'Dayne',
          'Dayton',
          'Dean',
          'Deangelo',
          'Deanna',
          'Deborah',
          'Declan',
          'Dedric',
          'Dedrick',
          'Dee',
          'Deion',
          'Deja',
          'Dejah',
          'Dejon',
          'Dejuan',
          'Delaney',
          'Delbert',
          'Delfina',
          'Delia',
          'Delilah',
          'Dell',
          'Della',
          'Delmer',
          'Delores',
          'Delpha',
          'Delphia',
          'Delphine',
          'Delta',
          'Demarco',
          'Demarcus',
          'Demario',
          'Demetris',
          'Demetrius',
          'Demond',
          'Dena',
          'Denis',
          'Dennis',
          'Deon',
          'Deondre',
          'Deontae',
          'Deonte',
          'Dereck',
          'Derek',
          'Derick',
          'Deron',
          'Derrick',
          'Deshaun',
          'Deshawn',
          'Desiree',
          'Desmond',
          'Dessie',
          'Destany',
          'Destin',
          'Destinee',
          'Destiney',
          'Destini',
          'Destiny',
          'Devan',
          'Devante',
          'Deven',
          'Devin',
          'Devon',
          'Devonte',
          'Devyn',
          'Dewayne',
          'Dewitt',
          'Dexter',
          'Diamond',
          'Diana',
          'Dianna',
          'Diego',
          'Dillan',
          'Dillon',
          'Dimitri',
          'Dina',
          'Dino',
          'Dion',
          'Dixie',
          'Dock',
          'Dolly',
          'Dolores',
          'Domenic',
          'Domenica',
          'Domenick',
          'Domenico',
          'Domingo',
          'Dominic',
          'Dominique',
          'Don',
          'Donald',
          'Donato',
          'Donavon',
          'Donna',
          'Donnell',
          'Donnie',
          'Donny',
          'Dora',
          'Dorcas',
          'Dorian',
          'Doris',
          'Dorothea',
          'Dorothy',
          'Dorris',
          'Dortha',
          'Dorthy',
          'Doug',
          'Douglas',
          'Dovie',
          'Doyle',
          'Drake',
          'Drew',
          'Duane',
          'Dudley',
          'Dulce',
          'Duncan',
          'Durward',
          'Dustin',
          'Dusty',
          'Dwight',
          'Dylan',
          'Earl',
          'Earlene',
          'Earline',
          'Earnest',
          'Earnestine',
          'Easter',
          'Easton',
          'Ebba',
          'Ebony',
          'Ed',
          'Eda',
          'Edd',
          'Eddie',
          'Eden',
          'Edgar',
          'Edgardo',
          'Edison',
          'Edmond',
          'Edmund',
          'Edna',
          'Eduardo',
          'Edward',
          'Edwardo',
          'Edwin',
          'Edwina',
          'Edyth',
          'Edythe',
          'Effie',
          'Efrain',
          'Efren',
          'Eileen',
          'Einar',
          'Eino',
          'Eladio',
          'Elaina',
          'Elbert',
          'Elda',
          'Eldon',
          'Eldora',
          'Eldred',
          'Eldridge',
          'Eleanora',
          'Eleanore',
          'Eleazar',
          'Electa',
          'Elena',
          'Elenor',
          'Elenora',
          'Eleonore',
          'Elfrieda',
          'Eli',
          'Elian',
          'Eliane',
          'Elias',
          'Eliezer',
          'Elijah',
          'Elinor',
          'Elinore',
          'Elisa',
          'Elisabeth',
          'Elise',
          'Eliseo',
          'Elisha',
          'Elissa',
          'Eliza',
          'Elizabeth',
          'Ella',
          'Ellen',
          'Ellie',
          'Elliot',
          'Elliott',
          'Ellis',
          'Ellsworth',
          'Elmer',
          'Elmira',
          'Elmo',
          'Elmore',
          'Elna',
          'Elnora',
          'Elody',
          'Eloisa',
          'Eloise',
          'Elouise',
          'Eloy',
          'Elroy',
          'Elsa',
          'Else',
          'Elsie',
          'Elta',
          'Elton',
          'Elva',
          'Elvera',
          'Elvie',
          'Elvis',
          'Elwin',
          'Elwyn',
          'Elyse',
          'Elyssa',
          'Elza',
          'Emanuel',
          'Emelia',
          'Emelie',
          'Emely',
          'Emerald',
          'Emerson',
          'Emery',
          'Emie',
          'Emil',
          'Emile',
          'Emilia',
          'Emiliano',
          'Emilie',
          'Emilio',
          'Emily',
          'Emma',
          'Emmalee',
          'Emmanuel',
          'Emmanuelle',
          'Emmet',
          'Emmett',
          'Emmie',
          'Emmitt',
          'Emmy',
          'Emory',
          'Ena',
          'Enid',
          'Enoch',
          'Enola',
          'Enos',
          'Enrico',
          'Enrique',
          'Ephraim',
          'Era',
          'Eriberto',
          'Eric',
          'Erica',
          'Erich',
          'Erick',
          'Ericka',
          'Erik',
          'Erika',
          'Erin',
          'Erling',
          'Erna',
          'Ernest',
          'Ernestina',
          'Ernestine',
          'Ernesto',
          'Ernie',
          'Ervin',
          'Erwin',
          'Eryn',
          'Esmeralda',
          'Esperanza',
          'Esta',
          'Esteban',
          'Estefania',
          'Estel',
          'Estell',
          'Estella',
          'Estelle',
          'Estevan',
          'Esther',
          'Estrella',
          'Etha',
          'Ethan',
          'Ethel',
          'Ethelyn',
          'Ethyl',
          'Ettie',
          'Eudora',
          'Eugene',
          'Eugenia',
          'Eula',
          'Eulah',
          'Eulalia',
          'Euna',
          'Eunice',
          'Eusebio',
          'Eva',
          'Evalyn',
          'Evan',
          'Evangeline',
          'Evans',
          'Eve',
          'Eveline',
          'Evelyn',
          'Everardo',
          'Everett',
          'Everette',
          'Evert',
          'Evie',
          'Ewald',
          'Ewell',
          'Ezekiel',
          'Ezequiel',
          'Ezra',
          'Fabian',
          'Fabiola',
          'Fae',
          'Fannie',
          'Fanny',
          'Fatima',
          'Faustino',
          'Fausto',
          'Favian',
          'Fay',
          'Faye',
          'Federico',
          'Felicia',
          'Felicita',
          'Felicity',
          'Felipa',
          'Felipe',
          'Felix',
          'Felton',
          'Fermin',
          'Fern',
          'Fernando',
          'Ferne',
          'Fidel',
          'Filiberto',
          'Filomena',
          'Finn',
          'Fiona',
          'Flavie',
          'Flavio',
          'Fleta',
          'Fletcher',
          'Flo',
          'Florence',
          'Florencio',
          'Florian',
          'Florida',
          'Florine',
          'Flossie',
          'Floy',
          'Floyd',
          'Ford',
          'Forest',
          'Forrest',
          'Foster',
          'Frances',
          'Francesca',
          'Francesco',
          'Francis',
          'Francisca',
          'Francisco',
          'Franco',
          'Frank',
          'Frankie',
          'Franz',
          'Fred',
          'Freda',
          'Freddie',
          'Freddy',
          'Frederic',
          'Frederick',
          'Frederik',
          'Frederique',
          'Fredrick',
          'Fredy',
          'Freeda',
          'Freeman',
          'Freida',
          'Frida',
          'Frieda',
          'Friedrich',
          'Fritz',
          'Furman',
          'Gabe',
          'Gabriel',
          'Gabriella',
          'Gabrielle',
          'Gaetano',
          'Gage',
          'Gail',
          'Gardner',
          'Garett',
          'Garfield',
          'Garland',
          'Garnet',
          'Garnett',
          'Garret',
          'Garrett',
          'Garrick',
          'Garrison',
          'Garry',
          'Garth',
          'Gaston',
          'Gavin',
          'Gay',
          'Gayle',
          'Gaylord',
          'Gene',
          'General',
          'Genesis',
          'Genevieve',
          'Gennaro',
          'Genoveva',
          'Geo',
          'Geoffrey',
          'George',
          'Georgette',
          'Georgiana',
          'Georgianna',
          'Geovanni',
          'Geovanny',
          'Geovany',
          'Gerald',
          'Geraldine',
          'Gerard',
          'Gerardo',
          'Gerda',
          'Gerhard',
          'Germaine',
          'German',
          'Gerry',
          'Gerson',
          'Gertrude',
          'Gia',
          'Gianni',
          'Gideon',
          'Gilbert',
          'Gilberto',
          'Gilda',
          'Giles',
          'Gillian',
          'Gina',
          'Gino',
          'Giovani',
          'Giovanna',
          'Giovanni',
          'Giovanny',
          'Gisselle',
          'Giuseppe',
          'Gladyce',
          'Gladys',
          'Glen',
          'Glenda',
          'Glenna',
          'Glennie',
          'Gloria',
          'Godfrey',
          'Golda',
          'Golden',
          'Gonzalo',
          'Gordon',
          'Grace',
          'Gracie',
          'Graciela',
          'Grady',
          'Graham',
          'Grant',
          'Granville',
          'Grayce',
          'Grayson',
          'Green',
          'Greg',
          'Gregg',
          'Gregoria',
          'Gregorio',
          'Gregory',
          'Greta',
          'Gretchen',
          'Greyson',
          'Griffin',
          'Grover',
          'Guadalupe',
          'Gudrun',
          'Guido',
          'Guillermo',
          'Guiseppe',
          'Gunnar',
          'Gunner',
          'Gus',
          'Gussie',
          'Gust',
          'Gustave',
          'Guy',
          'Gwen',
          'Gwendolyn',
          'Hadley',
          'Hailee',
          'Hailey',
          'Hailie',
          'Hal',
          'Haleigh',
          'Haley',
          'Halie',
          'Halle',
          'Hallie',
          'Hank',
          'Hanna',
          'Hannah',
          'Hans',
          'Hardy',
          'Harley',
          'Harmon',
          'Harmony',
          'Harold',
          'Harrison',
          'Harry',
          'Harvey',
          'Haskell',
          'Hassan',
          'Hassie',
          'Hattie',
          'Haven',
          'Hayden',
          'Haylee',
          'Hayley',
          'Haylie',
          'Hazel',
          'Hazle',
          'Heath',
          'Heather',
          'Heaven',
          'Heber',
          'Hector',
          'Heidi',
          'Helen',
          'Helena',
          'Helene',
          'Helga',
          'Hellen',
          'Helmer',
          'Heloise',
          'Henderson',
          'Henri',
          'Henriette',
          'Henry',
          'Herbert',
          'Herman',
          'Hermann',
          'Hermina',
          'Herminia',
          'Herminio',
          'Hershel',
          'Herta',
          'Hertha',
          'Hester',
          'Hettie',
          'Hilario',
          'Hilbert',
          'Hilda',
          'Hildegard',
          'Hillard',
          'Hillary',
          'Hilma',
          'Hilton',
          'Hipolito',
          'Hiram',
          'Hobart',
          'Holden',
          'Hollie',
          'Hollis',
          'Holly',
          'Hope',
          'Horace',
          'Horacio',
          'Hortense',
          'Hosea',
          'Houston',
          'Howard',
          'Howell',
          'Hoyt',
          'Hubert',
          'Hudson',
          'Hugh',
          'Hulda',
          'Humberto',
          'Hunter',
          'Hyman',
          'Ian',
          'Ibrahim',
          'Icie',
          'Ida',
          'Idell',
          'Idella',
          'Ignacio',
          'Ignatius',
          'Ike',
          'Ila',
          'Ilene',
          'Iliana',
          'Ima',
          'Imani',
          'Imelda',
          'Immanuel',
          'Imogene',
          'Ines',
          'Irma',
          'Irving',
          'Irwin',
          'Isaac',
          'Isabel',
          'Isabell',
          'Isabella',
          'Isabelle',
          'Isac',
          'Isadore',
          'Isai',
          'Isaiah',
          'Isaias',
          'Isidro',
          'Ismael',
          'Isobel',
          'Isom',
          'Israel',
          'Issac',
          'Itzel',
          'Iva',
          'Ivah',
          'Ivory',
          'Ivy',
          'Izabella',
          'Izaiah',
          'Jabari',
          'Jace',
          'Jacey',
          'Jacinthe',
          'Jacinto',
          'Jack',
          'Jackeline',
          'Jackie',
          'Jacklyn',
          'Jackson',
          'Jacky',
          'Jaclyn',
          'Jacquelyn',
          'Jacques',
          'Jacynthe',
          'Jada',
          'Jade',
          'Jaden',
          'Jadon',
          'Jadyn',
          'Jaeden',
          'Jaida',
          'Jaiden',
          'Jailyn',
          'Jaime',
          'Jairo',
          'Jakayla',
          'Jake',
          'Jakob',
          'Jaleel',
          'Jalen',
          'Jalon',
          'Jalyn',
          'Jamaal',
          'Jamal',
          'Jamar',
          'Jamarcus',
          'Jamel',
          'Jameson',
          'Jamey',
          'Jamie',
          'Jamil',
          'Jamir',
          'Jamison',
          'Jammie',
          'Jan',
          'Jana',
          'Janae',
          'Jane',
          'Janelle',
          'Janessa',
          'Janet',
          'Janice',
          'Janick',
          'Janie',
          'Janis',
          'Janiya',
          'Jannie',
          'Jany',
          'Jaquan',
          'Jaquelin',
          'Jaqueline',
          'Jared',
          'Jaren',
          'Jarod',
          'Jaron',
          'Jarred',
          'Jarrell',
          'Jarret',
          'Jarrett',
          'Jarrod',
          'Jarvis',
          'Jasen',
          'Jasmin',
          'Jason',
          'Jasper',
          'Jaunita',
          'Javier',
          'Javon',
          'Javonte',
          'Jay',
          'Jayce',
          'Jaycee',
          'Jayda',
          'Jayde',
          'Jayden',
          'Jaydon',
          'Jaylan',
          'Jaylen',
          'Jaylin',
          'Jaylon',
          'Jayme',
          'Jayne',
          'Jayson',
          'Jazlyn',
          'Jazmin',
          'Jazmyn',
          'Jazmyne',
          'Jean',
          'Jeanette',
          'Jeanie',
          'Jeanne',
          'Jed',
          'Jedediah',
          'Jedidiah',
          'Jeff',
          'Jefferey',
          'Jeffery',
          'Jeffrey',
          'Jeffry',
          'Jena',
          'Jenifer',
          'Jennie',
          'Jennifer',
          'Jennings',
          'Jennyfer',
          'Jensen',
          'Jerad',
          'Jerald',
          'Jeramie',
          'Jeramy',
          'Jerel',
          'Jeremie',
          'Jeremy',
          'Jermain',
          'Jermaine',
          'Jermey',
          'Jerod',
          'Jerome',
          'Jeromy',
          'Jerrell',
          'Jerrod',
          'Jerrold',
          'Jerry',
          'Jess',
          'Jesse',
          'Jessica',
          'Jessie',
          'Jessika',
          'Jessy',
          'Jessyca',
          'Jesus',
          'Jett',
          'Jettie',
          'Jevon',
          'Jewel',
          'Jewell',
          'Jillian',
          'Jimmie',
          'Jimmy',
          'Jo',
          'Joan',
          'Joana',
          'Joanie',
          'Joanne',
          'Joannie',
          'Joanny',
          'Joany',
          'Joaquin',
          'Jocelyn',
          'Jodie',
          'Jody',
          'Joe',
          'Joel',
          'Joelle',
          'Joesph',
          'Joey',
          'Johan',
          'Johann',
          'Johanna',
          'Johathan',
          'John',
          'Johnathan',
          'Johnathon',
          'Johnnie',
          'Johnny',
          'Johnpaul',
          'Johnson',
          'Jolie',
          'Jon',
          'Jonas',
          'Jonatan',
          'Jonathan',
          'Jonathon',
          'Jordan',
          'Jordane',
          'Jordi',
          'Jordon',
          'Jordy',
          'Jordyn',
          'Jorge',
          'Jose',
          'Josefa',
          'Josefina',
          'Joseph',
          'Josephine',
          'Josh',
          'Joshua',
          'Joshuah',
          'Josiah',
          'Josiane',
          'Josianne',
          'Josie',
          'Josue',
          'Jovan',
          'Jovani',
          'Jovanny',
          'Jovany',
          'Joy',
          'Joyce',
          'Juana',
          'Juanita',
          'Judah',
          'Judd',
          'Jude',
          'Judge',
          'Judson',
          'Judy',
          'Jules',
          'Julia',
          'Julian',
          'Juliana',
          'Julianne',
          'Julie',
          'Julien',
          'Juliet',
          'Julio',
          'Julius',
          'June',
          'Junior',
          'Junius',
          'Justen',
          'Justice',
          'Justina',
          'Justine',
          'Juston',
          'Justus',
          'Justyn',
          'Juvenal',
          'Juwan',
          'Kacey',
          'Kaci',
          'Kacie',
          'Kade',
          'Kaden',
          'Kadin',
          'Kaela',
          'Kaelyn',
          'Kaia',
          'Kailee',
          'Kailey',
          'Kailyn',
          'Kaitlin',
          'Kaitlyn',
          'Kale',
          'Kaleb',
          'Kaleigh',
          'Kaley',
          'Kali',
          'Kallie',
          'Kameron',
          'Kamille',
          'Kamren',
          'Kamron',
          'Kamryn',
          'Kane',
          'Kara',
          'Kareem',
          'Karelle',
          'Karen',
          'Kari',
          'Kariane',
          'Karianne',
          'Karina',
          'Karine',
          'Karl',
          'Karlee',
          'Karley',
          'Karli',
          'Karlie',
          'Karolann',
          'Karson',
          'Kasandra',
          'Kasey',
          'Kassandra',
          'Katarina',
          'Katelin',
          'Katelyn',
          'Katelynn',
          'Katharina',
          'Katherine',
          'Katheryn',
          'Kathleen',
          'Kathlyn',
          'Kathryn',
          'Kathryne',
          'Katlyn',
          'Katlynn',
          'Katrina',
          'Katrine',
          'Kattie',
          'Kavon',
          'Kay',
          'Kaya',
          'Kaycee',
          'Kayden',
          'Kayla',
          'Kaylah',
          'Kaylee',
          'Kayleigh',
          'Kayley',
          'Kayli',
          'Kaylie',
          'Kaylin',
          'Keagan',
          'Keanu',
          'Keara',
          'Keaton',
          'Keegan',
          'Keeley',
          'Keely',
          'Keenan',
          'Keira',
          'Keith',
          'Kellen',
          'Kelley',
          'Kelli',
          'Kellie',
          'Kelly',
          'Kelsi',
          'Kelsie',
          'Kelton',
          'Kelvin',
          'Ken',
          'Kendall',
          'Kendra',
          'Kendrick',
          'Kenna',
          'Kennedi',
          'Kennedy',
          'Kenneth',
          'Kennith',
          'Kenny',
          'Kenton',
          'Kenya',
          'Kenyatta',
          'Kenyon',
          'Keon',
          'Keshaun',
          'Keshawn',
          'Keven',
          'Kevin',
          'Kevon',
          'Keyon',
          'Keyshawn',
          'Khalid',
          'Khalil',
          'Kian',
          'Kiana',
          'Kianna',
          'Kiara',
          'Kiarra',
          'Kiel',
          'Kiera',
          'Kieran',
          'Kiley',
          'Kim',
          'Kimberly',
          'King',
          'Kip',
          'Kira',
          'Kirk',
          'Kirsten',
          'Kirstin',
          'Kitty',
          'Kobe',
          'Koby',
          'Kody',
          'Kolby',
          'Kole',
          'Korbin',
          'Korey',
          'Kory',
          'Kraig',
          'Kris',
          'Krista',
          'Kristian',
          'Kristin',
          'Kristina',
          'Kristofer',
          'Kristoffer',
          'Kristopher',
          'Kristy',
          'Krystal',
          'Krystel',
          'Krystina',
          'Kurt',
          'Kurtis',
          'Kyla',
          'Kyle',
          'Kylee',
          'Kyleigh',
          'Kyler',
          'Kylie',
          'Kyra',
          'Lacey',
          'Lacy',
          'Ladarius',
          'Lafayette',
          'Laila',
          'Laisha',
          'Lamar',
          'Lambert',
          'Lamont',
          'Lance',
          'Landen',
          'Lane',
          'Laney',
          'Larissa',
          'Laron',
          'Larry',
          'Larue',
          'Laura',
          'Laurel',
          'Lauren',
          'Laurence',
          'Lauretta',
          'Lauriane',
          'Laurianne',
          'Laurie',
          'Laurine',
          'Laury',
          'Lauryn',
          'Lavada',
          'Lavern',
          'Laverna',
          'Laverne',
          'Lavina',
          'Lavinia',
          'Lavon',
          'Lavonne',
          'Lawrence',
          'Lawson',
          'Layla',
          'Layne',
          'Lazaro',
          'Lea',
          'Leann',
          'Leanna',
          'Leanne',
          'Leatha',
          'Leda',
          'Lee',
          'Leif',
          'Leila',
          'Leilani',
          'Lela',
          'Lelah',
          'Leland',
          'Lelia',
          'Lempi',
          'Lemuel',
          'Lenna',
          'Lennie',
          'Lenny',
          'Lenora',
          'Lenore',
          'Leo',
          'Leola',
          'Leon',
          'Leonard',
          'Leonardo',
          'Leone',
          'Leonel',
          'Leonie',
          'Leonor',
          'Leonora',
          'Leopold',
          'Leopoldo',
          'Leora',
          'Lera',
          'Lesley',
          'Leslie',
          'Lesly',
          'Lessie',
          'Lester',
          'Leta',
          'Letha',
          'Letitia',
          'Levi',
          'Lew',
          'Lewis',
          'Lexi',
          'Lexie',
          'Lexus',
          'Lia',
          'Liam',
          'Liana',
          'Libbie',
          'Libby',
          'Lila',
          'Lilian',
          'Liliana',
          'Liliane',
          'Lilla',
          'Lillian',
          'Lilliana',
          'Lillie',
          'Lilly',
          'Lily',
          'Lilyan',
          'Lina',
          'Lincoln',
          'Linda',
          'Lindsay',
          'Lindsey',
          'Linnea',
          'Linnie',
          'Linwood',
          'Lionel',
          'Lisa',
          'Lisandro',
          'Lisette',
          'Litzy',
          'Liza',
          'Lizeth',
          'Lizzie',
          'Llewellyn',
          'Lloyd',
          'Logan',
          'Lois',
          'Lola',
          'Lolita',
          'Loma',
          'Lon',
          'London',
          'Lonie',
          'Lonnie',
          'Lonny',
          'Lonzo',
          'Lora',
          'Loraine',
          'Loren',
          'Lorena',
          'Lorenz',
          'Lorenza',
          'Lorenzo',
          'Lori',
          'Lorine',
          'Lorna',
          'Lottie',
          'Lou',
          'Louie',
          'Louisa',
          'Lourdes',
          'Louvenia',
          'Lowell',
          'Loy',
          'Loyal',
          'Loyce',
          'Lucas',
          'Luciano',
          'Lucie',
          'Lucienne',
          'Lucile',
          'Lucinda',
          'Lucio',
          'Lucious',
          'Lucius',
          'Lucy',
          'Ludie',
          'Ludwig',
          'Lue',
          'Luella',
          'Luigi',
          'Luis',
          'Luisa',
          'Lukas',
          'Lula',
          'Lulu',
          'Luna',
          'Lupe',
          'Lura',
          'Lurline',
          'Luther',
          'Luz',
          'Lyda',
          'Lydia',
          'Lyla',
          'Lynn',
          'Lyric',
          'Lysanne',
          'Mabel',
          'Mabelle',
          'Mable',
          'Mac',
          'Macey',
          'Maci',
          'Macie',
          'Mack',
          'Mackenzie',
          'Macy',
          'Madaline',
          'Madalyn',
          'Maddison',
          'Madeline',
          'Madelyn',
          'Madelynn',
          'Madge',
          'Madie',
          'Madilyn',
          'Madisen',
          'Madison',
          'Madisyn',
          'Madonna',
          'Madyson',
          'Mae',
          'Maegan',
          'Maeve',
          'Mafalda',
          'Magali',
          'Magdalen',
          'Magdalena',
          'Maggie',
          'Magnolia',
          'Magnus',
          'Maia',
          'Maida',
          'Maiya',
          'Major',
          'Makayla',
          'Makenna',
          'Makenzie',
          'Malachi',
          'Malcolm',
          'Malika',
          'Malinda',
          'Mallie',
          'Mallory',
          'Malvina',
          'Mandy',
          'Manley',
          'Manuel',
          'Manuela',
          'Mara',
          'Marc',
          'Marcel',
          'Marcelina',
          'Marcelino',
          'Marcella',
          'Marcelle',
          'Marcellus',
          'Marcelo',
          'Marcia',
          'Marco',
          'Marcos',
          'Marcus',
          'Margaret',
          'Margarete',
          'Margarett',
          'Margaretta',
          'Margarette',
          'Margarita',
          'Marge',
          'Margie',
          'Margot',
          'Margret',
          'Marguerite',
          'Maria',
          'Mariah',
          'Mariam',
          'Marian',
          'Mariana',
          'Mariane',
          'Marianna',
          'Marianne',
          'Mariano',
          'Maribel',
          'Marie',
          'Mariela',
          'Marielle',
          'Marietta',
          'Marilie',
          'Marilou',
          'Marilyne',
          'Marina',
          'Mario',
          'Marion',
          'Marisa',
          'Marisol',
          'Maritza',
          'Marjolaine',
          'Marjorie',
          'Marjory',
          'Mark',
          'Markus',
          'Marlee',
          'Marlen',
          'Marlene',
          'Marley',
          'Marlin',
          'Marlon',
          'Marques',
          'Marquis',
          'Marquise',
          'Marshall',
          'Marta',
          'Martin',
          'Martina',
          'Martine',
          'Marty',
          'Marvin',
          'Mary',
          'Maryam',
          'Maryjane',
          'Maryse',
          'Mason',
          'Mateo',
          'Mathew',
          'Mathias',
          'Mathilde',
          'Matilda',
          'Matilde',
          'Matt',
          'Matteo',
          'Mattie',
          'Maud',
          'Maude',
          'Maudie',
          'Maureen',
          'Maurice',
          'Mauricio',
          'Maurine',
          'Maverick',
          'Mavis',
          'Max',
          'Maxie',
          'Maxime',
          'Maximilian',
          'Maximillia',
          'Maximillian',
          'Maximo',
          'Maximus',
          'Maxine',
          'Maxwell',
          'May',
          'Maya',
          'Maybell',
          'Maybelle',
          'Maye',
          'Maymie',
          'Maynard',
          'Mayra',
          'Mazie',
          'Mckayla',
          'Mckenna',
          'Mckenzie',
          'Meagan',
          'Meaghan',
          'Meda',
          'Megane',
          'Meggie',
          'Meghan',
          'Mekhi',
          'Melany',
          'Melba',
          'Melisa',
          'Melissa',
          'Mellie',
          'Melody',
          'Melvin',
          'Melvina',
          'Melyna',
          'Melyssa',
          'Mercedes',
          'Meredith',
          'Merl',
          'Merle',
          'Merlin',
          'Merritt',
          'Mertie',
          'Mervin',
          'Meta',
          'Mia',
          'Micaela',
          'Micah',
          'Michael',
          'Michaela',
          'Michale',
          'Micheal',
          'Michel',
          'Michele',
          'Michelle',
          'Miguel',
          'Mikayla',
          'Mike',
          'Mikel',
          'Milan',
          'Miles',
          'Milford',
          'Miller',
          'Millie',
          'Milo',
          'Milton',
          'Mina',
          'Minerva',
          'Minnie',
          'Miracle',
          'Mireille',
          'Mireya',
          'Misael',
          'Missouri',
          'Misty',
          'Mitchel',
          'Mitchell',
          'Mittie',
          'Modesta',
          'Modesto',
          'Mohamed',
          'Mohammad',
          'Mohammed',
          'Moises',
          'Mollie',
          'Molly',
          'Mona',
          'Monica',
          'Monique',
          'Monroe',
          'Monserrat',
          'Monserrate',
          'Montana',
          'Monte',
          'Monty',
          'Morgan',
          'Moriah',
          'Morris',
          'Mortimer',
          'Morton',
          'Mose',
          'Moses',
          'Moshe',
          'Mossie',
          'Mozell',
          'Mozelle',
          'Muhammad',
          'Muriel',
          'Murl',
          'Murphy',
          'Murray',
          'Mustafa',
          'Mya',
          'Myah',
          'Mylene',
          'Myles',
          'Myra',
          'Myriam',
          'Myrl',
          'Myrna',
          'Myron',
          'Myrtice',
          'Myrtie',
          'Myrtis',
          'Myrtle',
          'Nadia',
          'Nakia',
          'Name',
          'Nannie',
          'Naomi',
          'Naomie',
          'Napoleon',
          'Narciso',
          'Nash',
          'Nasir',
          'Nat',
          'Natalia',
          'Natalie',
          'Natasha',
          'Nathan',
          'Nathanael',
          'Nathanial',
          'Nathaniel',
          'Nathen',
          'Nayeli',
          'Neal',
          'Ned',
          'Nedra',
          'Neha',
          'Neil',
          'Nelda',
          'Nella',
          'Nelle',
          'Nellie',
          'Nels',
          'Nelson',
          'Neoma',
          'Nestor',
          'Nettie',
          'Neva',
          'Newell',
          'Newton',
          'Nia',
          'Nicholas',
          'Nicholaus',
          'Nichole',
          'Nick',
          'Nicklaus',
          'Nickolas',
          'Nico',
          'Nicola',
          'Nicolas',
          'Nicole',
          'Nicolette',
          'Nigel',
          'Nikita',
          'Nikki',
          'Nikko',
          'Niko',
          'Nikolas',
          'Nils',
          'Nina',
          'Noah',
          'Noble',
          'Noe',
          'Noel',
          'Noelia',
          'Noemi',
          'Noemie',
          'Noemy',
          'Nola',
          'Nolan',
          'Nona',
          'Nora',
          'Norbert',
          'Norberto',
          'Norene',
          'Norma',
          'Norris',
          'Norval',
          'Norwood',
          'Nova',
          'Novella',
          'Nya',
          'Nyah',
          'Nyasia',
          'Obie',
          'Oceane',
          'Ocie',
          'Octavia',
          'Oda',
          'Odell',
          'Odessa',
          'Odie',
          'Ofelia',
          'Okey',
          'Ola',
          'Olaf',
          'Ole',
          'Olen',
          'Oleta',
          'Olga',
          'Olin',
          'Oliver',
          'Ollie',
          'Oma',
          'Omari',
          'Omer',
          'Ona',
          'Onie',
          'Opal',
          'Ophelia',
          'Ora',
          'Oral',
          'Oran',
          'Oren',
          'Orie',
          'Orin',
          'Orion',
          'Orland',
          'Orlando',
          'Orlo',
          'Orpha',
          'Orrin',
          'Orval',
          'Orville',
          'Osbaldo',
          'Osborne',
          'Oscar',
          'Osvaldo',
          'Oswald',
          'Oswaldo',
          'Otha',
          'Otho',
          'Otilia',
          'Otis',
          'Ottilie',
          'Ottis',
          'Otto',
          'Ova',
          'Owen',
          'Ozella',
          'Pablo',
          'Paige',
          'Palma',
          'Pamela',
          'Pansy',
          'Paolo',
          'Paris',
          'Parker',
          'Pascale',
          'Pasquale',
          'Pat',
          'Patience',
          'Patricia',
          'Patrick',
          'Patsy',
          'Pattie',
          'Paul',
          'Paula',
          'Pauline',
          'Paxton',
          'Payton',
          'Pearl',
          'Pearlie',
          'Pearline',
          'Pedro',
          'Peggie',
          'Penelope',
          'Percival',
          'Percy',
          'Perry',
          'Pete',
          'Peter',
          'Petra',
          'Peyton',
          'Philip',
          'Phoebe',
          'Phyllis',
          'Pierce',
          'Pierre',
          'Pietro',
          'Pink',
          'Pinkie',
          'Piper',
          'Polly',
          'Porter',
          'Precious',
          'Presley',
          'Preston',
          'Price',
          'Prince',
          'Princess',
          'Priscilla',
          'Providenci',
          'Prudence',
          'Queen',
          'Queenie',
          'Quentin',
          'Quincy',
          'Quinn',
          'Quinten',
          'Quinton',
          'Rachael',
          'Rachel',
          'Rachelle',
          'Rae',
          'Raegan',
          'Rafael',
          'Rafaela',
          'Raheem',
          'Rahsaan',
          'Rahul',
          'Raina',
          'Raleigh',
          'Ralph',
          'Ramiro',
          'Ramon',
          'Ramona',
          'Randal',
          'Randall',
          'Randi',
          'Randy',
          'Ransom',
          'Raoul',
          'Raphael',
          'Raphaelle',
          'Raquel',
          'Rashad',
          'Rashawn',
          'Rasheed',
          'Raul',
          'Raven',
          'Ray',
          'Raymond',
          'Raymundo',
          'Reagan',
          'Reanna',
          'Reba',
          'Rebeca',
          'Rebecca',
          'Rebeka',
          'Rebekah',
          'Reece',
          'Reed',
          'Reese',
          'Regan',
          'Reggie',
          'Reginald',
          'Reid',
          'Reilly',
          'Reina',
          'Reinhold',
          'Remington',
          'Rene',
          'Renee',
          'Ressie',
          'Reta',
          'Retha',
          'Retta',
          'Reuben',
          'Reva',
          'Rex',
          'Rey',
          'Reyes',
          'Reymundo',
          'Reyna',
          'Reynold',
          'Rhea',
          'Rhett',
          'Rhianna',
          'Rhiannon',
          'Rhoda',
          'Ricardo',
          'Richard',
          'Richie',
          'Richmond',
          'Rick',
          'Rickey',
          'Rickie',
          'Ricky',
          'Rico',
          'Rigoberto',
          'Riley',
          'Rita',
          'River',
          'Robb',
          'Robbie',
          'Robert',
          'Roberta',
          'Roberto',
          'Robin',
          'Robyn',
          'Rocio',
          'Rocky',
          'Rod',
          'Roderick',
          'Rodger',
          'Rodolfo',
          'Rodrick',
          'Rodrigo',
          'Roel',
          'Rogelio',
          'Roger',
          'Rogers',
          'Rolando',
          'Rollin',
          'Roma',
          'Romaine',
          'Roman',
          'Ron',
          'Ronaldo',
          'Ronny',
          'Roosevelt',
          'Rory',
          'Rosa',
          'Rosalee',
          'Rosalia',
          'Rosalind',
          'Rosalinda',
          'Rosalyn',
          'Rosamond',
          'Rosanna',
          'Rosario',
          'Roscoe',
          'Rose',
          'Rosella',
          'Roselyn',
          'Rosemarie',
          'Rosemary',
          'Rosendo',
          'Rosetta',
          'Rosie',
          'Rosina',
          'Roslyn',
          'Ross',
          'Rossie',
          'Rowan',
          'Rowena',
          'Rowland',
          'Roxane',
          'Roxanne',
          'Roy',
          'Royal',
          'Royce',
          'Rozella',
          'Ruben',
          'Rubie',
          'Ruby',
          'Rubye',
          'Rudolph',
          'Rudy',
          'Rupert',
          'Russ',
          'Russel',
          'Russell',
          'Rusty',
          'Ruth',
          'Ruthe',
          'Ruthie',
          'Ryan',
          'Ryann',
          'Ryder',
          'Rylan',
          'Rylee',
          'Ryleigh',
          'Ryley',
          'Sabina',
          'Sabrina',
          'Sabryna',
          'Sadie',
          'Sadye',
          'Sage',
          'Saige',
          'Sallie',
          'Sally',
          'Salma',
          'Salvador',
          'Salvatore',
          'Sam',
          'Samanta',
          'Samantha',
          'Samara',
          'Samir',
          'Sammie',
          'Sammy',
          'Samson',
          'Sandra',
          'Sandrine',
          'Sandy',
          'Sanford',
          'Santa',
          'Santiago',
          'Santina',
          'Santino',
          'Santos',
          'Sarah',
          'Sarai',
          'Sarina',
          'Sasha',
          'Saul',
          'Savanah',
          'Savanna',
          'Savannah',
          'Savion',
          'Scarlett',
          'Schuyler',
          'Scot',
          'Scottie',
          'Scotty',
          'Seamus',
          'Sean',
          'Sebastian',
          'Sedrick',
          'Selena',
          'Selina',
          'Selmer',
          'Serena',
          'Serenity',
          'Seth',
          'Shad',
          'Shaina',
          'Shakira',
          'Shana',
          'Shane',
          'Shanel',
          'Shanelle',
          'Shania',
          'Shanie',
          'Shaniya',
          'Shanna',
          'Shannon',
          'Shanny',
          'Shanon',
          'Shany',
          'Sharon',
          'Shaun',
          'Shawn',
          'Shawna',
          'Shaylee',
          'Shayna',
          'Shayne',
          'Shea',
          'Sheila',
          'Sheldon',
          'Shemar',
          'Sheridan',
          'Sherman',
          'Sherwood',
          'Shirley',
          'Shyann',
          'Shyanne',
          'Sibyl',
          'Sid',
          'Sidney',
          'Sienna',
          'Sierra',
          'Sigmund',
          'Sigrid',
          'Sigurd',
          'Silas',
          'Sim',
          'Simeon',
          'Simone',
          'Sincere',
          'Sister',
          'Skye',
          'Skyla',
          'Skylar',
          'Sofia',
          'Soledad',
          'Solon',
          'Sonia',
          'Sonny',
          'Sonya',
          'Sophia',
          'Sophie',
          'Spencer',
          'Stacey',
          'Stacy',
          'Stan',
          'Stanford',
          'Stanley',
          'Stanton',
          'Stefan',
          'Stefanie',
          'Stella',
          'Stephan',
          'Stephania',
          'Stephanie',
          'Stephany',
          'Stephen',
          'Stephon',
          'Sterling',
          'Steve',
          'Stevie',
          'Stewart',
          'Stone',
          'Stuart',
          'Summer',
          'Sunny',
          'Susan',
          'Susana',
          'Susanna',
          'Susie',
          'Suzanne',
          'Sven',
          'Syble',
          'Sydnee',
          'Sydney',
          'Sydni',
          'Sydnie',
          'Sylvan',
          'Sylvester',
          'Sylvia',
          'Tabitha',
          'Tad',
          'Talia',
          'Talon',
          'Tamara',
          'Tamia',
          'Tania',
          'Tanner',
          'Tanya',
          'Tara',
          'Taryn',
          'Tate',
          'Tatum',
          'Tatyana',
          'Taurean',
          'Tavares',
          'Taya',
          'Taylor',
          'Teagan',
          'Ted',
          'Telly',
          'Terence',
          'Teresa',
          'Terrance',
          'Terrell',
          'Terrence',
          'Terrill',
          'Terry',
          'Tess',
          'Tessie',
          'Tevin',
          'Thad',
          'Thaddeus',
          'Thalia',
          'Thea',
          'Thelma',
          'Theo',
          'Theodora',
          'Theodore',
          'Theresa',
          'Therese',
          'Theresia',
          'Theron',
          'Thomas',
          'Thora',
          'Thurman',
          'Tia',
          'Tiana',
          'Tianna',
          'Tiara',
          'Tierra',
          'Tiffany',
          'Tillman',
          'Timmothy',
          'Timmy',
          'Timothy',
          'Tina',
          'Tito',
          'Titus',
          'Tobin',
          'Toby',
          'Tod',
          'Tom',
          'Tomas',
          'Tomasa',
          'Tommie',
          'Toney',
          'Toni',
          'Tony',
          'Torey',
          'Torrance',
          'Torrey',
          'Toy',
          'Trace',
          'Tracey',
          'Tracy',
          'Travis',
          'Travon',
          'Tre',
          'Tremaine',
          'Tremayne',
          'Trent',
          'Trenton',
          'Tressa',
          'Tressie',
          'Treva',
          'Trever',
          'Trevion',
          'Trevor',
          'Trey',
          'Trinity',
          'Trisha',
          'Tristian',
          'Tristin',
          'Triston',
          'Troy',
          'Trudie',
          'Trycia',
          'Trystan',
          'Turner',
          'Twila',
          'Tyler',
          'Tyra',
          'Tyree',
          'Tyreek',
          'Tyrel',
          'Tyrell',
          'Tyrese',
          'Tyrique',
          'Tyshawn',
          'Tyson',
          'Ubaldo',
          'Ulices',
          'Ulises',
          'Una',
          'Unique',
          'Urban',
          'Uriah',
          'Uriel',
          'Ursula',
          'Vada',
          'Valentin',
          'Valentina',
          'Valentine',
          'Valerie',
          'Vallie',
          'Van',
          'Vance',
          'Vanessa',
          'Vaughn',
          'Veda',
          'Velda',
          'Vella',
          'Velma',
          'Velva',
          'Vena',
          'Verda',
          'Verdie',
          'Vergie',
          'Verla',
          'Verlie',
          'Vern',
          'Verna',
          'Verner',
          'Vernice',
          'Vernie',
          'Vernon',
          'Verona',
          'Veronica',
          'Vesta',
          'Vicenta',
          'Vicente',
          'Vickie',
          'Vicky',
          'Victor',
          'Victoria',
          'Vida',
          'Vidal',
          'Vilma',
          'Vince',
          'Vincent',
          'Vincenza',
          'Vincenzo',
          'Vinnie',
          'Viola',
          'Violet',
          'Violette',
          'Virgie',
          'Virgil',
          'Virginia',
          'Virginie',
          'Vita',
          'Vito',
          'Viva',
          'Vivian',
          'Viviane',
          'Vivianne',
          'Vivien',
          'Vivienne',
          'Vladimir',
          'Wade',
          'Waino',
          'Waldo',
          'Walker',
          'Wallace',
          'Walter',
          'Walton',
          'Wanda',
          'Ward',
          'Warren',
          'Watson',
          'Wava',
          'Waylon',
          'Wayne',
          'Webster',
          'Weldon',
          'Wellington',
          'Wendell',
          'Wendy',
          'Werner',
          'Westley',
          'Weston',
          'Whitney',
          'Wilber',
          'Wilbert',
          'Wilburn',
          'Wiley',
          'Wilford',
          'Wilfred',
          'Wilfredo',
          'Wilfrid',
          'Wilhelm',
          'Wilhelmine',
          'Will',
          'Willa',
          'Willard',
          'William',
          'Willie',
          'Willis',
          'Willow',
          'Willy',
          'Wilma',
          'Wilmer',
          'Wilson',
          'Wilton',
          'Winfield',
          'Winifred',
          'Winnifred',
          'Winona',
          'Winston',
          'Woodrow',
          'Wyatt',
          'Wyman',
          'Xander',
          'Xavier',
          'Xzavier',
          'Yadira',
          'Yasmeen',
          'Yasmin',
          'Yasmine',
          'Yazmin',
          'Yesenia',
          'Yessenia',
          'Yolanda',
          'Yoshiko',
          'Yvette',
          'Yvonne',
          'Zachariah',
          'Zachary',
          'Zachery',
          'Zack',
          'Zackary',
          'Zackery',
          'Zakary',
          'Zander',
          'Zane',
          'Zaria',
          'Zechariah',
          'Zelda',
          'Zella',
          'Zelma',
          'Zena',
          'Zetta',
          'Zion',
          'Zita',
          'Zoe',
          'Zoey',
          'Zoie',
          'Zoila',
          'Zola',
          'Zora',
          'Zula',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en/name/last_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Abbott',
          'Abernathy',
          'Abshire',
          'Adams',
          'Altenwerth',
          'Anderson',
          'Ankunding',
          'Armstrong',
          'Auer',
          'Aufderhar',
          'Bahringer',
          'Bailey',
          'Balistreri',
          'Barrows',
          'Bartell',
          'Bartoletti',
          'Barton',
          'Bashirian',
          'Batz',
          'Bauch',
          'Baumbach',
          'Bayer',
          'Beahan',
          'Beatty',
          'Bechtelar',
          'Becker',
          'Bednar',
          'Beer',
          'Beier',
          'Berge',
          'Bergnaum',
          'Bergstrom',
          'Bernhard',
          'Bernier',
          'Bins',
          'Blanda',
          'Blick',
          'Block',
          'Bode',
          'Boehm',
          'Bogan',
          'Bogisich',
          'Borer',
          'Bosco',
          'Botsford',
          'Boyer',
          'Boyle',
          'Bradtke',
          'Brakus',
          'Braun',
          'Breitenberg',
          'Brekke',
          'Brown',
          'Bruen',
          'Buckridge',
          'Carroll',
          'Carter',
          'Cartwright',
          'Casper',
          'Cassin',
          'Champlin',
          'Christiansen',
          'Cole',
          'Collier',
          'Collins',
          'Conn',
          'Connelly',
          'Conroy',
          'Considine',
          'Corkery',
          'Cormier',
          'Corwin',
          'Cremin',
          'Crist',
          'Crona',
          'Cronin',
          'Crooks',
          'Cruickshank',
          'Cummerata',
          'Cummings',
          'Dach',
          "D'Amore",
          'Daniel',
          'Dare',
          'Daugherty',
          'Davis',
          'Deckow',
          'Denesik',
          'Dibbert',
          'Dickens',
          'Dicki',
          'Dickinson',
          'Dietrich',
          'Donnelly',
          'Dooley',
          'Douglas',
          'Doyle',
          'DuBuque',
          'Durgan',
          'Ebert',
          'Effertz',
          'Eichmann',
          'Emard',
          'Emmerich',
          'Erdman',
          'Ernser',
          'Fadel',
          'Fahey',
          'Farrell',
          'Fay',
          'Feeney',
          'Feest',
          'Feil',
          'Ferry',
          'Fisher',
          'Flatley',
          'Frami',
          'Franecki',
          'Friesen',
          'Fritsch',
          'Funk',
          'Gaylord',
          'Gerhold',
          'Gerlach',
          'Gibson',
          'Gislason',
          'Gleason',
          'Gleichner',
          'Glover',
          'Goldner',
          'Goodwin',
          'Gorczany',
          'Gottlieb',
          'Goyette',
          'Grady',
          'Graham',
          'Grant',
          'Green',
          'Greenfelder',
          'Greenholt',
          'Grimes',
          'Gulgowski',
          'Gusikowski',
          'Gutkowski',
          'Gutmann',
          'Haag',
          'Hackett',
          'Hagenes',
          'Hahn',
          'Haley',
          'Halvorson',
          'Hamill',
          'Hammes',
          'Hand',
          'Hane',
          'Hansen',
          'Harber',
          'Harris',
          'Hartmann',
          'Harvey',
          'Hauck',
          'Hayes',
          'Heaney',
          'Heathcote',
          'Hegmann',
          'Heidenreich',
          'Heller',
          'Herman',
          'Hermann',
          'Hermiston',
          'Herzog',
          'Hessel',
          'Hettinger',
          'Hickle',
          'Hilll',
          'Hills',
          'Hilpert',
          'Hintz',
          'Hirthe',
          'Hodkiewicz',
          'Hoeger',
          'Homenick',
          'Hoppe',
          'Howe',
          'Howell',
          'Hudson',
          'Huel',
          'Huels',
          'Hyatt',
          'Jacobi',
          'Jacobs',
          'Jacobson',
          'Jakubowski',
          'Jaskolski',
          'Jast',
          'Jenkins',
          'Jerde',
          'Johns',
          'Johnson',
          'Johnston',
          'Jones',
          'Kassulke',
          'Kautzer',
          'Keebler',
          'Keeling',
          'Kemmer',
          'Kerluke',
          'Kertzmann',
          'Kessler',
          'Kiehn',
          'Kihn',
          'Kilback',
          'King',
          'Kirlin',
          'Klein',
          'Kling',
          'Klocko',
          'Koch',
          'Koelpin',
          'Koepp',
          'Kohler',
          'Konopelski',
          'Koss',
          'Kovacek',
          'Kozey',
          'Krajcik',
          'Kreiger',
          'Kris',
          'Kshlerin',
          'Kub',
          'Kuhic',
          'Kuhlman',
          'Kuhn',
          'Kulas',
          'Kunde',
          'Kunze',
          'Kuphal',
          'Kutch',
          'Kuvalis',
          'Labadie',
          'Lakin',
          'Lang',
          'Langosh',
          'Langworth',
          'Larkin',
          'Larson',
          'Leannon',
          'Lebsack',
          'Ledner',
          'Leffler',
          'Legros',
          'Lehner',
          'Lemke',
          'Lesch',
          'Leuschke',
          'Lind',
          'Lindgren',
          'Littel',
          'Little',
          'Lockman',
          'Lowe',
          'Lubowitz',
          'Lueilwitz',
          'Luettgen',
          'Lynch',
          'Macejkovic',
          'MacGyver',
          'Maggio',
          'Mann',
          'Mante',
          'Marks',
          'Marquardt',
          'Marvin',
          'Mayer',
          'Mayert',
          'McClure',
          'McCullough',
          'McDermott',
          'McGlynn',
          'McKenzie',
          'McLaughlin',
          'Medhurst',
          'Mertz',
          'Metz',
          'Miller',
          'Mills',
          'Mitchell',
          'Moen',
          'Mohr',
          'Monahan',
          'Moore',
          'Morar',
          'Morissette',
          'Mosciski',
          'Mraz',
          'Mueller',
          'Muller',
          'Murazik',
          'Murphy',
          'Murray',
          'Nader',
          'Nicolas',
          'Nienow',
          'Nikolaus',
          'Nitzsche',
          'Nolan',
          'Oberbrunner',
          "O'Connell",
          "O'Conner",
          "O'Hara",
          "O'Keefe",
          "O'Kon",
          'Okuneva',
          'Olson',
          'Ondricka',
          "O'Reilly",
          'Orn',
          'Ortiz',
          'Osinski',
          'Pacocha',
          'Padberg',
          'Pagac',
          'Parisian',
          'Parker',
          'Paucek',
          'Pfannerstill',
          'Pfeffer',
          'Pollich',
          'Pouros',
          'Powlowski',
          'Predovic',
          'Price',
          'Prohaska',
          'Prosacco',
          'Purdy',
          'Quigley',
          'Quitzon',
          'Rath',
          'Ratke',
          'Rau',
          'Raynor',
          'Reichel',
          'Reichert',
          'Reilly',
          'Reinger',
          'Rempel',
          'Renner',
          'Reynolds',
          'Rice',
          'Rippin',
          'Ritchie',
          'Robel',
          'Roberts',
          'Rodriguez',
          'Rogahn',
          'Rohan',
          'Rolfson',
          'Romaguera',
          'Roob',
          'Rosenbaum',
          'Rowe',
          'Ruecker',
          'Runolfsdottir',
          'Runolfsson',
          'Runte',
          'Russel',
          'Rutherford',
          'Ryan',
          'Sanford',
          'Satterfield',
          'Sauer',
          'Sawayn',
          'Schaden',
          'Schaefer',
          'Schamberger',
          'Schiller',
          'Schimmel',
          'Schinner',
          'Schmeler',
          'Schmidt',
          'Schmitt',
          'Schneider',
          'Schoen',
          'Schowalter',
          'Schroeder',
          'Schulist',
          'Schultz',
          'Schumm',
          'Schuppe',
          'Schuster',
          'Senger',
          'Shanahan',
          'Shields',
          'Simonis',
          'Sipes',
          'Skiles',
          'Smith',
          'Smitham',
          'Spencer',
          'Spinka',
          'Sporer',
          'Stamm',
          'Stanton',
          'Stark',
          'Stehr',
          'Steuber',
          'Stiedemann',
          'Stokes',
          'Stoltenberg',
          'Stracke',
          'Streich',
          'Stroman',
          'Strosin',
          'Swaniawski',
          'Swift',
          'Terry',
          'Thiel',
          'Thompson',
          'Tillman',
          'Torp',
          'Torphy',
          'Towne',
          'Toy',
          'Trantow',
          'Tremblay',
          'Treutel',
          'Tromp',
          'Turcotte',
          'Turner',
          'Ullrich',
          'Upton',
          'Vandervort',
          'Veum',
          'Volkman',
          'Von',
          'VonRueden',
          'Waelchi',
          'Walker',
          'Walsh',
          'Walter',
          'Ward',
          'Waters',
          'Watsica',
          'Weber',
          'Wehner',
          'Weimann',
          'Weissnat',
          'Welch',
          'West',
          'White',
          'Wiegand',
          'Wilderman',
          'Wilkinson',
          'Will',
          'Williamson',
          'Willms',
          'Windler',
          'Wintheiser',
          'Wisoky',
          'Wisozk',
          'Witting',
          'Wiza',
          'Wolf',
          'Wolff',
          'Wuckert',
          'Wunsch',
          'Wyman',
          'Yost',
          'Yundt',
          'Zboncak',
          'Zemlak',
          'Ziemann',
          'Zieme',
          'Zulauf',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en/name/prefix.js': [
      function(require, module, exports) {
        module['exports'] = ['Mr.', 'Mrs.', 'Ms.', 'Miss', 'Dr.']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en/name/suffix.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Jr.',
          'Sr.',
          'I',
          'II',
          'III',
          'IV',
          'V',
          'MD',
          'DDS',
          'PhD',
          'DVM',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en/name/title.js': [
      function(require, module, exports) {
        module['exports'] = {
          descriptor: [
            'Lead',
            'Senior',
            'Direct',
            'Corporate',
            'Dynamic',
            'Future',
            'Product',
            'National',
            'Regional',
            'District',
            'Central',
            'Global',
            'Customer',
            'Investor',
            'Dynamic',
            'International',
            'Legacy',
            'Forward',
            'Internal',
            'Human',
            'Chief',
            'Principal',
          ],
          level: [
            'Solutions',
            'Program',
            'Brand',
            'Security',
            'Research',
            'Marketing',
            'Directives',
            'Implementation',
            'Integration',
            'Functionality',
            'Response',
            'Paradigm',
            'Tactics',
            'Identity',
            'Markets',
            'Group',
            'Division',
            'Applications',
            'Optimization',
            'Operations',
            'Infrastructure',
            'Intranet',
            'Communications',
            'Web',
            'Branding',
            'Quality',
            'Assurance',
            'Mobility',
            'Accounts',
            'Data',
            'Creative',
            'Configuration',
            'Accountability',
            'Interactions',
            'Factors',
            'Usability',
            'Metrics',
          ],
          job: [
            'Supervisor',
            'Associate',
            'Executive',
            'Liaison',
            'Officer',
            'Manager',
            'Engineer',
            'Specialist',
            'Director',
            'Coordinator',
            'Administrator',
            'Architect',
            'Analyst',
            'Designer',
            'Planner',
            'Orchestrator',
            'Technician',
            'Developer',
            'Producer',
            'Consultant',
            'Assistant',
            'Facilitator',
            'Agent',
            'Representative',
            'Strategist',
          ],
        }
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en/name/name.js': [
      function(require, module, exports) {
        module['exports'] = [
          '#{prefix} #{first_name} #{last_name}',
          '#{first_name} #{last_name} #{suffix}',
          '#{first_name} #{last_name}',
          '#{first_name} #{last_name}',
          '#{first_name} #{last_name}',
          '#{first_name} #{last_name}',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en/name/index.js': [
      function(require, module, exports) {
        var name = {}
        module['exports'] = name
        name.first_name = require('./first_name')
        name.last_name = require('./last_name')
        name.prefix = require('./prefix')
        name.suffix = require('./suffix')
        name.title = require('./title')
        name.name = require('./name')
      },
      {
        './first_name':
          '../node_modules/faker/lib/locales/en/name/first_name.js',
        './last_name':
          '../node_modules/faker/lib/locales/en/name/last_name.js',
        './prefix': '../node_modules/faker/lib/locales/en/name/prefix.js',
        './suffix': '../node_modules/faker/lib/locales/en/name/suffix.js',
        './title': '../node_modules/faker/lib/locales/en/name/title.js',
        './name': '../node_modules/faker/lib/locales/en/name/name.js',
      },
    ],
    '../node_modules/faker/lib/locales/en/phone_number/formats.js': [
      function(require, module, exports) {
        module['exports'] = [
          '###-###-####',
          '(###) ###-####',
          '1-###-###-####',
          '###.###.####',
          '###-###-####',
          '(###) ###-####',
          '1-###-###-####',
          '###.###.####',
          '###-###-#### x###',
          '(###) ###-#### x###',
          '1-###-###-#### x###',
          '###.###.#### x###',
          '###-###-#### x####',
          '(###) ###-#### x####',
          '1-###-###-#### x####',
          '###.###.#### x####',
          '###-###-#### x#####',
          '(###) ###-#### x#####',
          '1-###-###-#### x#####',
          '###.###.#### x#####',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en/phone_number/index.js': [
      function(require, module, exports) {
        var phone_number = {}
        module['exports'] = phone_number
        phone_number.formats = require('./formats')
      },
      {
        './formats':
          '../node_modules/faker/lib/locales/en/phone_number/formats.js',
      },
    ],
    '../node_modules/faker/lib/locales/en/cell_phone/formats.js': [
      function(require, module, exports) {
        module['exports'] = [
          '###-###-####',
          '(###) ###-####',
          '1-###-###-####',
          '###.###.####',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en/cell_phone/index.js': [
      function(require, module, exports) {
        var cell_phone = {}
        module['exports'] = cell_phone
        cell_phone.formats = require('./formats')
      },
      {
        './formats':
          '../node_modules/faker/lib/locales/en/cell_phone/formats.js',
      },
    ],
    '../node_modules/faker/lib/locales/en/business/credit_card_numbers.js': [
      function(require, module, exports) {
        module['exports'] = [
          '1234-2121-1221-1211',
          '1212-1221-1121-1234',
          '1211-1221-1234-2201',
          '1228-1221-1221-1431',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en/business/credit_card_expiry_dates.js': [
      function(require, module, exports) {
        module['exports'] = [
          '2011-10-12',
          '2012-11-12',
          '2015-11-11',
          '2013-9-12',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en/business/credit_card_types.js': [
      function(require, module, exports) {
        module['exports'] = [
          'visa',
          'mastercard',
          'americanexpress',
          'discover',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en/business/index.js': [
      function(require, module, exports) {
        var business = {}
        module['exports'] = business
        business.credit_card_numbers = require('./credit_card_numbers')
        business.credit_card_expiry_dates = require('./credit_card_expiry_dates')
        business.credit_card_types = require('./credit_card_types')
      },
      {
        './credit_card_numbers':
          '../node_modules/faker/lib/locales/en/business/credit_card_numbers.js',
        './credit_card_expiry_dates':
          '../node_modules/faker/lib/locales/en/business/credit_card_expiry_dates.js',
        './credit_card_types':
          '../node_modules/faker/lib/locales/en/business/credit_card_types.js',
      },
    ],
    '../node_modules/faker/lib/locales/en/commerce/color.js': [
      function(require, module, exports) {
        module['exports'] = [
          'red',
          'green',
          'blue',
          'yellow',
          'purple',
          'mint green',
          'teal',
          'white',
          'black',
          'orange',
          'pink',
          'grey',
          'maroon',
          'violet',
          'turquoise',
          'tan',
          'sky blue',
          'salmon',
          'plum',
          'orchid',
          'olive',
          'magenta',
          'lime',
          'ivory',
          'indigo',
          'gold',
          'fuchsia',
          'cyan',
          'azure',
          'lavender',
          'silver',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en/commerce/department.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Books',
          'Movies',
          'Music',
          'Games',
          'Electronics',
          'Computers',
          'Home',
          'Garden',
          'Tools',
          'Grocery',
          'Health',
          'Beauty',
          'Toys',
          'Kids',
          'Baby',
          'Clothing',
          'Shoes',
          'Jewelery',
          'Sports',
          'Outdoors',
          'Automotive',
          'Industrial',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en/commerce/product_name.js': [
      function(require, module, exports) {
        module['exports'] = {
          adjective: [
            'Small',
            'Ergonomic',
            'Rustic',
            'Intelligent',
            'Gorgeous',
            'Incredible',
            'Fantastic',
            'Practical',
            'Sleek',
            'Awesome',
            'Generic',
            'Handcrafted',
            'Handmade',
            'Licensed',
            'Refined',
            'Unbranded',
            'Tasty',
          ],
          material: [
            'Steel',
            'Wooden',
            'Concrete',
            'Plastic',
            'Cotton',
            'Granite',
            'Rubber',
            'Metal',
            'Soft',
            'Fresh',
            'Frozen',
          ],
          product: [
            'Chair',
            'Car',
            'Computer',
            'Keyboard',
            'Mouse',
            'Bike',
            'Ball',
            'Gloves',
            'Pants',
            'Shirt',
            'Table',
            'Shoes',
            'Hat',
            'Towels',
            'Soap',
            'Tuna',
            'Chicken',
            'Fish',
            'Cheese',
            'Bacon',
            'Pizza',
            'Salad',
            'Sausages',
            'Chips',
          ],
        }
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en/commerce/index.js': [
      function(require, module, exports) {
        var commerce = {}
        module['exports'] = commerce
        commerce.color = require('./color')
        commerce.department = require('./department')
        commerce.product_name = require('./product_name')
      },
      {
        './color':
          '../node_modules/faker/lib/locales/en/commerce/color.js',
        './department':
          '../node_modules/faker/lib/locales/en/commerce/department.js',
        './product_name':
          '../node_modules/faker/lib/locales/en/commerce/product_name.js',
      },
    ],
    '../node_modules/faker/lib/locales/en/team/creature.js': [
      function(require, module, exports) {
        module['exports'] = [
          'ants',
          'bats',
          'bears',
          'bees',
          'birds',
          'buffalo',
          'cats',
          'chickens',
          'cattle',
          'dogs',
          'dolphins',
          'ducks',
          'elephants',
          'fishes',
          'foxes',
          'frogs',
          'geese',
          'goats',
          'horses',
          'kangaroos',
          'lions',
          'monkeys',
          'owls',
          'oxen',
          'penguins',
          'people',
          'pigs',
          'rabbits',
          'sheep',
          'tigers',
          'whales',
          'wolves',
          'zebras',
          'banshees',
          'crows',
          'black cats',
          'chimeras',
          'ghosts',
          'conspirators',
          'dragons',
          'dwarves',
          'elves',
          'enchanters',
          'exorcists',
          'sons',
          'foes',
          'giants',
          'gnomes',
          'goblins',
          'gooses',
          'griffins',
          'lycanthropes',
          'nemesis',
          'ogres',
          'oracles',
          'prophets',
          'sorcerors',
          'spiders',
          'spirits',
          'vampires',
          'warlocks',
          'vixens',
          'werewolves',
          'witches',
          'worshipers',
          'zombies',
          'druids',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en/team/name.js': [
      function(require, module, exports) {
        module['exports'] = ['#{Address.state} #{creature}']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en/team/index.js': [
      function(require, module, exports) {
        var team = {}
        module['exports'] = team
        team.creature = require('./creature')
        team.name = require('./name')
      },
      {
        './creature':
          '../node_modules/faker/lib/locales/en/team/creature.js',
        './name': '../node_modules/faker/lib/locales/en/team/name.js',
      },
    ],
    '../node_modules/faker/lib/locales/en/hacker/abbreviation.js': [
      function(require, module, exports) {
        module['exports'] = [
          'TCP',
          'HTTP',
          'SDD',
          'RAM',
          'GB',
          'CSS',
          'SSL',
          'AGP',
          'SQL',
          'FTP',
          'PCI',
          'AI',
          'ADP',
          'RSS',
          'XML',
          'EXE',
          'COM',
          'HDD',
          'THX',
          'SMTP',
          'SMS',
          'USB',
          'PNG',
          'SAS',
          'IB',
          'SCSI',
          'JSON',
          'XSS',
          'JBOD',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en/hacker/adjective.js': [
      function(require, module, exports) {
        module['exports'] = [
          'auxiliary',
          'primary',
          'back-end',
          'digital',
          'open-source',
          'virtual',
          'cross-platform',
          'redundant',
          'online',
          'haptic',
          'multi-byte',
          'bluetooth',
          'wireless',
          '1080p',
          'neural',
          'optical',
          'solid state',
          'mobile',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en/hacker/noun.js': [
      function(require, module, exports) {
        module['exports'] = [
          'driver',
          'protocol',
          'bandwidth',
          'panel',
          'microchip',
          'program',
          'port',
          'card',
          'array',
          'interface',
          'system',
          'sensor',
          'firewall',
          'hard drive',
          'pixel',
          'alarm',
          'feed',
          'monitor',
          'application',
          'transmitter',
          'bus',
          'circuit',
          'capacitor',
          'matrix',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en/hacker/verb.js': [
      function(require, module, exports) {
        module['exports'] = [
          'back up',
          'bypass',
          'hack',
          'override',
          'compress',
          'copy',
          'navigate',
          'index',
          'connect',
          'generate',
          'quantify',
          'calculate',
          'synthesize',
          'input',
          'transmit',
          'program',
          'reboot',
          'parse',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en/hacker/ingverb.js': [
      function(require, module, exports) {
        module['exports'] = [
          'backing up',
          'bypassing',
          'hacking',
          'overriding',
          'compressing',
          'copying',
          'navigating',
          'indexing',
          'connecting',
          'generating',
          'quantifying',
          'calculating',
          'synthesizing',
          'transmitting',
          'programming',
          'parsing',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en/hacker/index.js': [
      function(require, module, exports) {
        var hacker = {}
        module['exports'] = hacker
        hacker.abbreviation = require('./abbreviation')
        hacker.adjective = require('./adjective')
        hacker.noun = require('./noun')
        hacker.verb = require('./verb')
        hacker.ingverb = require('./ingverb')
      },
      {
        './abbreviation':
          '../node_modules/faker/lib/locales/en/hacker/abbreviation.js',
        './adjective':
          '../node_modules/faker/lib/locales/en/hacker/adjective.js',
        './noun': '../node_modules/faker/lib/locales/en/hacker/noun.js',
        './verb': '../node_modules/faker/lib/locales/en/hacker/verb.js',
        './ingverb':
          '../node_modules/faker/lib/locales/en/hacker/ingverb.js',
      },
    ],
    '../node_modules/faker/lib/locales/en/app/name.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Redhold',
          'Treeflex',
          'Trippledex',
          'Kanlam',
          'Bigtax',
          'Daltfresh',
          'Toughjoyfax',
          'Mat Lam Tam',
          'Otcom',
          'Tres-Zap',
          'Y-Solowarm',
          'Tresom',
          'Voltsillam',
          'Biodex',
          'Greenlam',
          'Viva',
          'Matsoft',
          'Temp',
          'Zoolab',
          'Subin',
          'Rank',
          'Job',
          'Stringtough',
          'Tin',
          'It',
          'Home Ing',
          'Zamit',
          'Sonsing',
          'Konklab',
          'Alpha',
          'Latlux',
          'Voyatouch',
          'Alphazap',
          'Holdlamis',
          'Zaam-Dox',
          'Sub-Ex',
          'Quo Lux',
          'Bamity',
          'Ventosanzap',
          'Lotstring',
          'Hatity',
          'Tempsoft',
          'Overhold',
          'Fixflex',
          'Konklux',
          'Zontrax',
          'Tampflex',
          'Span',
          'Namfix',
          'Transcof',
          'Stim',
          'Fix San',
          'Sonair',
          'Stronghold',
          'Fintone',
          'Y-find',
          'Opela',
          'Lotlux',
          'Ronstring',
          'Zathin',
          'Duobam',
          'Keylex',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en/app/version.js': [
      function(require, module, exports) {
        module['exports'] = ['0.#.#', '0.##', '#.##', '#.#', '#.#.#']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en/app/author.js': [
      function(require, module, exports) {
        module['exports'] = ['#{Name.name}', '#{Company.name}']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en/app/index.js': [
      function(require, module, exports) {
        var app = {}
        module['exports'] = app
        app.name = require('./name')
        app.version = require('./version')
        app.author = require('./author')
      },
      {
        './name': '../node_modules/faker/lib/locales/en/app/name.js',
        './version': '../node_modules/faker/lib/locales/en/app/version.js',
        './author': '../node_modules/faker/lib/locales/en/app/author.js',
      },
    ],
    '../node_modules/faker/lib/locales/en/finance/account_type.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Checking',
          'Savings',
          'Money Market',
          'Investment',
          'Home Loan',
          'Credit Card',
          'Auto Loan',
          'Personal Loan',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en/finance/transaction_type.js': [
      function(require, module, exports) {
        module['exports'] = ['deposit', 'withdrawal', 'payment', 'invoice']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en/finance/currency.js': [
      function(require, module, exports) {
        module['exports'] = {
          'UAE Dirham': {
            code: 'AED',
            symbol: '',
          },
          Afghani: {
            code: 'AFN',
            symbol: '؋',
          },
          Lek: {
            code: 'ALL',
            symbol: 'Lek',
          },
          'Armenian Dram': {
            code: 'AMD',
            symbol: '',
          },
          'Netherlands Antillian Guilder': {
            code: 'ANG',
            symbol: 'ƒ',
          },
          Kwanza: {
            code: 'AOA',
            symbol: '',
          },
          'Argentine Peso': {
            code: 'ARS',
            symbol: '$',
          },
          'Australian Dollar': {
            code: 'AUD',
            symbol: '$',
          },
          'Aruban Guilder': {
            code: 'AWG',
            symbol: 'ƒ',
          },
          'Azerbaijanian Manat': {
            code: 'AZN',
            symbol: 'ман',
          },
          'Convertible Marks': {
            code: 'BAM',
            symbol: 'KM',
          },
          'Barbados Dollar': {
            code: 'BBD',
            symbol: '$',
          },
          Taka: {
            code: 'BDT',
            symbol: '',
          },
          'Bulgarian Lev': {
            code: 'BGN',
            symbol: 'лв',
          },
          'Bahraini Dinar': {
            code: 'BHD',
            symbol: '',
          },
          'Burundi Franc': {
            code: 'BIF',
            symbol: '',
          },
          'Bermudian Dollar (customarily known as Bermuda Dollar)': {
            code: 'BMD',
            symbol: '$',
          },
          'Brunei Dollar': {
            code: 'BND',
            symbol: '$',
          },
          'Boliviano Mvdol': {
            code: 'BOB BOV',
            symbol: '$b',
          },
          'Brazilian Real': {
            code: 'BRL',
            symbol: 'R$',
          },
          'Bahamian Dollar': {
            code: 'BSD',
            symbol: '$',
          },
          Pula: {
            code: 'BWP',
            symbol: 'P',
          },
          'Belarussian Ruble': {
            code: 'BYR',
            symbol: 'p.',
          },
          'Belize Dollar': {
            code: 'BZD',
            symbol: 'BZ$',
          },
          'Canadian Dollar': {
            code: 'CAD',
            symbol: '$',
          },
          'Congolese Franc': {
            code: 'CDF',
            symbol: '',
          },
          'Swiss Franc': {
            code: 'CHF',
            symbol: 'CHF',
          },
          'Chilean Peso Unidades de fomento': {
            code: 'CLP CLF',
            symbol: '$',
          },
          'Yuan Renminbi': {
            code: 'CNY',
            symbol: '¥',
          },
          'Colombian Peso Unidad de Valor Real': {
            code: 'COP COU',
            symbol: '$',
          },
          'Costa Rican Colon': {
            code: 'CRC',
            symbol: '₡',
          },
          'Cuban Peso Peso Convertible': {
            code: 'CUP CUC',
            symbol: '₱',
          },
          'Cape Verde Escudo': {
            code: 'CVE',
            symbol: '',
          },
          'Czech Koruna': {
            code: 'CZK',
            symbol: 'Kč',
          },
          'Djibouti Franc': {
            code: 'DJF',
            symbol: '',
          },
          'Danish Krone': {
            code: 'DKK',
            symbol: 'kr',
          },
          'Dominican Peso': {
            code: 'DOP',
            symbol: 'RD$',
          },
          'Algerian Dinar': {
            code: 'DZD',
            symbol: '',
          },
          Kroon: {
            code: 'EEK',
            symbol: '',
          },
          'Egyptian Pound': {
            code: 'EGP',
            symbol: '£',
          },
          Nakfa: {
            code: 'ERN',
            symbol: '',
          },
          'Ethiopian Birr': {
            code: 'ETB',
            symbol: '',
          },
          Euro: {
            code: 'EUR',
            symbol: '€',
          },
          'Fiji Dollar': {
            code: 'FJD',
            symbol: '$',
          },
          'Falkland Islands Pound': {
            code: 'FKP',
            symbol: '£',
          },
          'Pound Sterling': {
            code: 'GBP',
            symbol: '£',
          },
          Lari: {
            code: 'GEL',
            symbol: '',
          },
          Cedi: {
            code: 'GHS',
            symbol: '',
          },
          'Gibraltar Pound': {
            code: 'GIP',
            symbol: '£',
          },
          Dalasi: {
            code: 'GMD',
            symbol: '',
          },
          'Guinea Franc': {
            code: 'GNF',
            symbol: '',
          },
          Quetzal: {
            code: 'GTQ',
            symbol: 'Q',
          },
          'Guyana Dollar': {
            code: 'GYD',
            symbol: '$',
          },
          'Hong Kong Dollar': {
            code: 'HKD',
            symbol: '$',
          },
          Lempira: {
            code: 'HNL',
            symbol: 'L',
          },
          'Croatian Kuna': {
            code: 'HRK',
            symbol: 'kn',
          },
          'Gourde US Dollar': {
            code: 'HTG USD',
            symbol: '',
          },
          Forint: {
            code: 'HUF',
            symbol: 'Ft',
          },
          Rupiah: {
            code: 'IDR',
            symbol: 'Rp',
          },
          'New Israeli Sheqel': {
            code: 'ILS',
            symbol: '₪',
          },
          'Indian Rupee': {
            code: 'INR',
            symbol: '',
          },
          'Indian Rupee Ngultrum': {
            code: 'INR BTN',
            symbol: '',
          },
          'Iraqi Dinar': {
            code: 'IQD',
            symbol: '',
          },
          'Iranian Rial': {
            code: 'IRR',
            symbol: '﷼',
          },
          'Iceland Krona': {
            code: 'ISK',
            symbol: 'kr',
          },
          'Jamaican Dollar': {
            code: 'JMD',
            symbol: 'J$',
          },
          'Jordanian Dinar': {
            code: 'JOD',
            symbol: '',
          },
          Yen: {
            code: 'JPY',
            symbol: '¥',
          },
          'Kenyan Shilling': {
            code: 'KES',
            symbol: '',
          },
          Som: {
            code: 'KGS',
            symbol: 'лв',
          },
          Riel: {
            code: 'KHR',
            symbol: '៛',
          },
          'Comoro Franc': {
            code: 'KMF',
            symbol: '',
          },
          'North Korean Won': {
            code: 'KPW',
            symbol: '₩',
          },
          Won: {
            code: 'KRW',
            symbol: '₩',
          },
          'Kuwaiti Dinar': {
            code: 'KWD',
            symbol: '',
          },
          'Cayman Islands Dollar': {
            code: 'KYD',
            symbol: '$',
          },
          Tenge: {
            code: 'KZT',
            symbol: 'лв',
          },
          Kip: {
            code: 'LAK',
            symbol: '₭',
          },
          'Lebanese Pound': {
            code: 'LBP',
            symbol: '£',
          },
          'Sri Lanka Rupee': {
            code: 'LKR',
            symbol: '₨',
          },
          'Liberian Dollar': {
            code: 'LRD',
            symbol: '$',
          },
          'Lithuanian Litas': {
            code: 'LTL',
            symbol: 'Lt',
          },
          'Latvian Lats': {
            code: 'LVL',
            symbol: 'Ls',
          },
          'Libyan Dinar': {
            code: 'LYD',
            symbol: '',
          },
          'Moroccan Dirham': {
            code: 'MAD',
            symbol: '',
          },
          'Moldovan Leu': {
            code: 'MDL',
            symbol: '',
          },
          'Malagasy Ariary': {
            code: 'MGA',
            symbol: '',
          },
          Denar: {
            code: 'MKD',
            symbol: 'ден',
          },
          Kyat: {
            code: 'MMK',
            symbol: '',
          },
          Tugrik: {
            code: 'MNT',
            symbol: '₮',
          },
          Pataca: {
            code: 'MOP',
            symbol: '',
          },
          Ouguiya: {
            code: 'MRO',
            symbol: '',
          },
          'Mauritius Rupee': {
            code: 'MUR',
            symbol: '₨',
          },
          Rufiyaa: {
            code: 'MVR',
            symbol: '',
          },
          Kwacha: {
            code: 'MWK',
            symbol: '',
          },
          'Mexican Peso Mexican Unidad de Inversion (UDI)': {
            code: 'MXN MXV',
            symbol: '$',
          },
          'Malaysian Ringgit': {
            code: 'MYR',
            symbol: 'RM',
          },
          Metical: {
            code: 'MZN',
            symbol: 'MT',
          },
          Naira: {
            code: 'NGN',
            symbol: '₦',
          },
          'Cordoba Oro': {
            code: 'NIO',
            symbol: 'C$',
          },
          'Norwegian Krone': {
            code: 'NOK',
            symbol: 'kr',
          },
          'Nepalese Rupee': {
            code: 'NPR',
            symbol: '₨',
          },
          'New Zealand Dollar': {
            code: 'NZD',
            symbol: '$',
          },
          'Rial Omani': {
            code: 'OMR',
            symbol: '﷼',
          },
          'Balboa US Dollar': {
            code: 'PAB USD',
            symbol: 'B/.',
          },
          'Nuevo Sol': {
            code: 'PEN',
            symbol: 'S/.',
          },
          Kina: {
            code: 'PGK',
            symbol: '',
          },
          'Philippine Peso': {
            code: 'PHP',
            symbol: 'Php',
          },
          'Pakistan Rupee': {
            code: 'PKR',
            symbol: '₨',
          },
          Zloty: {
            code: 'PLN',
            symbol: 'zł',
          },
          Guarani: {
            code: 'PYG',
            symbol: 'Gs',
          },
          'Qatari Rial': {
            code: 'QAR',
            symbol: '﷼',
          },
          'New Leu': {
            code: 'RON',
            symbol: 'lei',
          },
          'Serbian Dinar': {
            code: 'RSD',
            symbol: 'Дин.',
          },
          'Russian Ruble': {
            code: 'RUB',
            symbol: 'руб',
          },
          'Rwanda Franc': {
            code: 'RWF',
            symbol: '',
          },
          'Saudi Riyal': {
            code: 'SAR',
            symbol: '﷼',
          },
          'Solomon Islands Dollar': {
            code: 'SBD',
            symbol: '$',
          },
          'Seychelles Rupee': {
            code: 'SCR',
            symbol: '₨',
          },
          'Sudanese Pound': {
            code: 'SDG',
            symbol: '',
          },
          'Swedish Krona': {
            code: 'SEK',
            symbol: 'kr',
          },
          'Singapore Dollar': {
            code: 'SGD',
            symbol: '$',
          },
          'Saint Helena Pound': {
            code: 'SHP',
            symbol: '£',
          },
          Leone: {
            code: 'SLL',
            symbol: '',
          },
          'Somali Shilling': {
            code: 'SOS',
            symbol: 'S',
          },
          'Surinam Dollar': {
            code: 'SRD',
            symbol: '$',
          },
          Dobra: {
            code: 'STD',
            symbol: '',
          },
          'El Salvador Colon US Dollar': {
            code: 'SVC USD',
            symbol: '$',
          },
          'Syrian Pound': {
            code: 'SYP',
            symbol: '£',
          },
          Lilangeni: {
            code: 'SZL',
            symbol: '',
          },
          Baht: {
            code: 'THB',
            symbol: '฿',
          },
          Somoni: {
            code: 'TJS',
            symbol: '',
          },
          Manat: {
            code: 'TMT',
            symbol: '',
          },
          'Tunisian Dinar': {
            code: 'TND',
            symbol: '',
          },
          "Pa'anga": {
            code: 'TOP',
            symbol: '',
          },
          'Turkish Lira': {
            code: 'TRY',
            symbol: 'TL',
          },
          'Trinidad and Tobago Dollar': {
            code: 'TTD',
            symbol: 'TT$',
          },
          'New Taiwan Dollar': {
            code: 'TWD',
            symbol: 'NT$',
          },
          'Tanzanian Shilling': {
            code: 'TZS',
            symbol: '',
          },
          Hryvnia: {
            code: 'UAH',
            symbol: '₴',
          },
          'Uganda Shilling': {
            code: 'UGX',
            symbol: '',
          },
          'US Dollar': {
            code: 'USD',
            symbol: '$',
          },
          'Peso Uruguayo Uruguay Peso en Unidades Indexadas': {
            code: 'UYU UYI',
            symbol: '$U',
          },
          'Uzbekistan Sum': {
            code: 'UZS',
            symbol: 'лв',
          },
          'Bolivar Fuerte': {
            code: 'VEF',
            symbol: 'Bs',
          },
          Dong: {
            code: 'VND',
            symbol: '₫',
          },
          Vatu: {
            code: 'VUV',
            symbol: '',
          },
          Tala: {
            code: 'WST',
            symbol: '',
          },
          'CFA Franc BEAC': {
            code: 'XAF',
            symbol: '',
          },
          Silver: {
            code: 'XAG',
            symbol: '',
          },
          Gold: {
            code: 'XAU',
            symbol: '',
          },
          'Bond Markets Units European Composite Unit (EURCO)': {
            code: 'XBA',
            symbol: '',
          },
          'European Monetary Unit (E.M.U.-6)': {
            code: 'XBB',
            symbol: '',
          },
          'European Unit of Account 9(E.U.A.-9)': {
            code: 'XBC',
            symbol: '',
          },
          'European Unit of Account 17(E.U.A.-17)': {
            code: 'XBD',
            symbol: '',
          },
          'East Caribbean Dollar': {
            code: 'XCD',
            symbol: '$',
          },
          SDR: {
            code: 'XDR',
            symbol: '',
          },
          'UIC-Franc': {
            code: 'XFU',
            symbol: '',
          },
          'CFA Franc BCEAO': {
            code: 'XOF',
            symbol: '',
          },
          Palladium: {
            code: 'XPD',
            symbol: '',
          },
          'CFP Franc': {
            code: 'XPF',
            symbol: '',
          },
          Platinum: {
            code: 'XPT',
            symbol: '',
          },
          'Codes specifically reserved for testing purposes': {
            code: 'XTS',
            symbol: '',
          },
          'Yemeni Rial': {
            code: 'YER',
            symbol: '﷼',
          },
          Rand: {
            code: 'ZAR',
            symbol: 'R',
          },
          'Rand Loti': {
            code: 'ZAR LSL',
            symbol: '',
          },
          'Rand Namibia Dollar': {
            code: 'ZAR NAD',
            symbol: '',
          },
          'Zambian Kwacha': {
            code: 'ZMK',
            symbol: '',
          },
          'Zimbabwe Dollar': {
            code: 'ZWL',
            symbol: '',
          },
        }
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en/finance/index.js': [
      function(require, module, exports) {
        var finance = {}
        module['exports'] = finance
        finance.account_type = require('./account_type')
        finance.transaction_type = require('./transaction_type')
        finance.currency = require('./currency')
      },
      {
        './account_type':
          '../node_modules/faker/lib/locales/en/finance/account_type.js',
        './transaction_type':
          '../node_modules/faker/lib/locales/en/finance/transaction_type.js',
        './currency':
          '../node_modules/faker/lib/locales/en/finance/currency.js',
      },
    ],
    '../node_modules/faker/lib/locales/en/date/month.js': [
      function(require, module, exports) {
        // Source: http://unicode.org/cldr/trac/browser/tags/release-27/common/main/en.xml#L1799
        module['exports'] = {
          wide: [
            'January',
            'February',
            'March',
            'April',
            'May',
            'June',
            'July',
            'August',
            'September',
            'October',
            'November',
            'December',
          ],
          // Property "wide_context" is optional, if not set then "wide" will be used instead
          // It is used to specify a word in context, which may differ from a stand-alone word
          wide_context: [
            'January',
            'February',
            'March',
            'April',
            'May',
            'June',
            'July',
            'August',
            'September',
            'October',
            'November',
            'December',
          ],
          abbr: [
            'Jan',
            'Feb',
            'Mar',
            'Apr',
            'May',
            'Jun',
            'Jul',
            'Aug',
            'Sep',
            'Oct',
            'Nov',
            'Dec',
          ],
          // Property "abbr_context" is optional, if not set then "abbr" will be used instead
          // It is used to specify a word in context, which may differ from a stand-alone word
          abbr_context: [
            'Jan',
            'Feb',
            'Mar',
            'Apr',
            'May',
            'Jun',
            'Jul',
            'Aug',
            'Sep',
            'Oct',
            'Nov',
            'Dec',
          ],
        }
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en/date/weekday.js': [
      function(require, module, exports) {
        // Source: http://unicode.org/cldr/trac/browser/tags/release-27/common/main/en.xml#L1847
        module['exports'] = {
          wide: [
            'Sunday',
            'Monday',
            'Tuesday',
            'Wednesday',
            'Thursday',
            'Friday',
            'Saturday',
          ],
          // Property "wide_context" is optional, if not set then "wide" will be used instead
          // It is used to specify a word in context, which may differ from a stand-alone word
          wide_context: [
            'Sunday',
            'Monday',
            'Tuesday',
            'Wednesday',
            'Thursday',
            'Friday',
            'Saturday',
          ],
          abbr: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
          // Property "abbr_context" is optional, if not set then "abbr" will be used instead
          // It is used to specify a word in context, which may differ from a stand-alone word
          abbr_context: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
        }
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en/date/index.js': [
      function(require, module, exports) {
        var date = {}
        module['exports'] = date
        date.month = require('./month')
        date.weekday = require('./weekday')
      },
      {
        './month': '../node_modules/faker/lib/locales/en/date/month.js',
        './weekday':
          '../node_modules/faker/lib/locales/en/date/weekday.js',
      },
    ],
    '../node_modules/faker/lib/locales/en/system/mimeTypes.js': [
      function(require, module, exports) {
        /*

The MIT License (MIT)

Copyright (c) 2014 Jonathan Ong me@jongleberry.com

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

Definitions from mime-db v1.21.0
For updates check: https://github.com/jshttp/mime-db/blob/master/db.json

*/

        module['exports'] = {
          'application/1d-interleaved-parityfec': {
            source: 'iana',
          },
          'application/3gpdash-qoe-report+xml': {
            source: 'iana',
          },
          'application/3gpp-ims+xml': {
            source: 'iana',
          },
          'application/a2l': {
            source: 'iana',
          },
          'application/activemessage': {
            source: 'iana',
          },
          'application/alto-costmap+json': {
            source: 'iana',
            compressible: true,
          },
          'application/alto-costmapfilter+json': {
            source: 'iana',
            compressible: true,
          },
          'application/alto-directory+json': {
            source: 'iana',
            compressible: true,
          },
          'application/alto-endpointcost+json': {
            source: 'iana',
            compressible: true,
          },
          'application/alto-endpointcostparams+json': {
            source: 'iana',
            compressible: true,
          },
          'application/alto-endpointprop+json': {
            source: 'iana',
            compressible: true,
          },
          'application/alto-endpointpropparams+json': {
            source: 'iana',
            compressible: true,
          },
          'application/alto-error+json': {
            source: 'iana',
            compressible: true,
          },
          'application/alto-networkmap+json': {
            source: 'iana',
            compressible: true,
          },
          'application/alto-networkmapfilter+json': {
            source: 'iana',
            compressible: true,
          },
          'application/aml': {
            source: 'iana',
          },
          'application/andrew-inset': {
            source: 'iana',
            extensions: ['ez'],
          },
          'application/applefile': {
            source: 'iana',
          },
          'application/applixware': {
            source: 'apache',
            extensions: ['aw'],
          },
          'application/atf': {
            source: 'iana',
          },
          'application/atfx': {
            source: 'iana',
          },
          'application/atom+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['atom'],
          },
          'application/atomcat+xml': {
            source: 'iana',
            extensions: ['atomcat'],
          },
          'application/atomdeleted+xml': {
            source: 'iana',
          },
          'application/atomicmail': {
            source: 'iana',
          },
          'application/atomsvc+xml': {
            source: 'iana',
            extensions: ['atomsvc'],
          },
          'application/atxml': {
            source: 'iana',
          },
          'application/auth-policy+xml': {
            source: 'iana',
          },
          'application/bacnet-xdd+zip': {
            source: 'iana',
          },
          'application/batch-smtp': {
            source: 'iana',
          },
          'application/bdoc': {
            compressible: false,
            extensions: ['bdoc'],
          },
          'application/beep+xml': {
            source: 'iana',
          },
          'application/calendar+json': {
            source: 'iana',
            compressible: true,
          },
          'application/calendar+xml': {
            source: 'iana',
          },
          'application/call-completion': {
            source: 'iana',
          },
          'application/cals-1840': {
            source: 'iana',
          },
          'application/cbor': {
            source: 'iana',
          },
          'application/ccmp+xml': {
            source: 'iana',
          },
          'application/ccxml+xml': {
            source: 'iana',
            extensions: ['ccxml'],
          },
          'application/cdfx+xml': {
            source: 'iana',
          },
          'application/cdmi-capability': {
            source: 'iana',
            extensions: ['cdmia'],
          },
          'application/cdmi-container': {
            source: 'iana',
            extensions: ['cdmic'],
          },
          'application/cdmi-domain': {
            source: 'iana',
            extensions: ['cdmid'],
          },
          'application/cdmi-object': {
            source: 'iana',
            extensions: ['cdmio'],
          },
          'application/cdmi-queue': {
            source: 'iana',
            extensions: ['cdmiq'],
          },
          'application/cdni': {
            source: 'iana',
          },
          'application/cea': {
            source: 'iana',
          },
          'application/cea-2018+xml': {
            source: 'iana',
          },
          'application/cellml+xml': {
            source: 'iana',
          },
          'application/cfw': {
            source: 'iana',
          },
          'application/cms': {
            source: 'iana',
          },
          'application/cnrp+xml': {
            source: 'iana',
          },
          'application/coap-group+json': {
            source: 'iana',
            compressible: true,
          },
          'application/commonground': {
            source: 'iana',
          },
          'application/conference-info+xml': {
            source: 'iana',
          },
          'application/cpl+xml': {
            source: 'iana',
          },
          'application/csrattrs': {
            source: 'iana',
          },
          'application/csta+xml': {
            source: 'iana',
          },
          'application/cstadata+xml': {
            source: 'iana',
          },
          'application/csvm+json': {
            source: 'iana',
            compressible: true,
          },
          'application/cu-seeme': {
            source: 'apache',
            extensions: ['cu'],
          },
          'application/cybercash': {
            source: 'iana',
          },
          'application/dart': {
            compressible: true,
          },
          'application/dash+xml': {
            source: 'iana',
            extensions: ['mdp'],
          },
          'application/dashdelta': {
            source: 'iana',
          },
          'application/davmount+xml': {
            source: 'iana',
            extensions: ['davmount'],
          },
          'application/dca-rft': {
            source: 'iana',
          },
          'application/dcd': {
            source: 'iana',
          },
          'application/dec-dx': {
            source: 'iana',
          },
          'application/dialog-info+xml': {
            source: 'iana',
          },
          'application/dicom': {
            source: 'iana',
          },
          'application/dii': {
            source: 'iana',
          },
          'application/dit': {
            source: 'iana',
          },
          'application/dns': {
            source: 'iana',
          },
          'application/docbook+xml': {
            source: 'apache',
            extensions: ['dbk'],
          },
          'application/dskpp+xml': {
            source: 'iana',
          },
          'application/dssc+der': {
            source: 'iana',
            extensions: ['dssc'],
          },
          'application/dssc+xml': {
            source: 'iana',
            extensions: ['xdssc'],
          },
          'application/dvcs': {
            source: 'iana',
          },
          'application/ecmascript': {
            source: 'iana',
            compressible: true,
            extensions: ['ecma'],
          },
          'application/edi-consent': {
            source: 'iana',
          },
          'application/edi-x12': {
            source: 'iana',
            compressible: false,
          },
          'application/edifact': {
            source: 'iana',
            compressible: false,
          },
          'application/emergencycalldata.comment+xml': {
            source: 'iana',
          },
          'application/emergencycalldata.deviceinfo+xml': {
            source: 'iana',
          },
          'application/emergencycalldata.providerinfo+xml': {
            source: 'iana',
          },
          'application/emergencycalldata.serviceinfo+xml': {
            source: 'iana',
          },
          'application/emergencycalldata.subscriberinfo+xml': {
            source: 'iana',
          },
          'application/emma+xml': {
            source: 'iana',
            extensions: ['emma'],
          },
          'application/emotionml+xml': {
            source: 'iana',
          },
          'application/encaprtp': {
            source: 'iana',
          },
          'application/epp+xml': {
            source: 'iana',
          },
          'application/epub+zip': {
            source: 'iana',
            extensions: ['epub'],
          },
          'application/eshop': {
            source: 'iana',
          },
          'application/exi': {
            source: 'iana',
            extensions: ['exi'],
          },
          'application/fastinfoset': {
            source: 'iana',
          },
          'application/fastsoap': {
            source: 'iana',
          },
          'application/fdt+xml': {
            source: 'iana',
          },
          'application/fits': {
            source: 'iana',
          },
          'application/font-sfnt': {
            source: 'iana',
          },
          'application/font-tdpfr': {
            source: 'iana',
            extensions: ['pfr'],
          },
          'application/font-woff': {
            source: 'iana',
            compressible: false,
            extensions: ['woff'],
          },
          'application/font-woff2': {
            compressible: false,
            extensions: ['woff2'],
          },
          'application/framework-attributes+xml': {
            source: 'iana',
          },
          'application/gml+xml': {
            source: 'apache',
            extensions: ['gml'],
          },
          'application/gpx+xml': {
            source: 'apache',
            extensions: ['gpx'],
          },
          'application/gxf': {
            source: 'apache',
            extensions: ['gxf'],
          },
          'application/gzip': {
            source: 'iana',
            compressible: false,
          },
          'application/h224': {
            source: 'iana',
          },
          'application/held+xml': {
            source: 'iana',
          },
          'application/http': {
            source: 'iana',
          },
          'application/hyperstudio': {
            source: 'iana',
            extensions: ['stk'],
          },
          'application/ibe-key-request+xml': {
            source: 'iana',
          },
          'application/ibe-pkg-reply+xml': {
            source: 'iana',
          },
          'application/ibe-pp-data': {
            source: 'iana',
          },
          'application/iges': {
            source: 'iana',
          },
          'application/im-iscomposing+xml': {
            source: 'iana',
          },
          'application/index': {
            source: 'iana',
          },
          'application/index.cmd': {
            source: 'iana',
          },
          'application/index.obj': {
            source: 'iana',
          },
          'application/index.response': {
            source: 'iana',
          },
          'application/index.vnd': {
            source: 'iana',
          },
          'application/inkml+xml': {
            source: 'iana',
            extensions: ['ink', 'inkml'],
          },
          'application/iotp': {
            source: 'iana',
          },
          'application/ipfix': {
            source: 'iana',
            extensions: ['ipfix'],
          },
          'application/ipp': {
            source: 'iana',
          },
          'application/isup': {
            source: 'iana',
          },
          'application/its+xml': {
            source: 'iana',
          },
          'application/java-archive': {
            source: 'apache',
            compressible: false,
            extensions: ['jar', 'war', 'ear'],
          },
          'application/java-serialized-object': {
            source: 'apache',
            compressible: false,
            extensions: ['ser'],
          },
          'application/java-vm': {
            source: 'apache',
            compressible: false,
            extensions: ['class'],
          },
          'application/javascript': {
            source: 'iana',
            charset: 'UTF-8',
            compressible: true,
            extensions: ['js'],
          },
          'application/jose': {
            source: 'iana',
          },
          'application/jose+json': {
            source: 'iana',
            compressible: true,
          },
          'application/jrd+json': {
            source: 'iana',
            compressible: true,
          },
          'application/json': {
            source: 'iana',
            charset: 'UTF-8',
            compressible: true,
            extensions: ['json', 'map'],
          },
          'application/json-patch+json': {
            source: 'iana',
            compressible: true,
          },
          'application/json-seq': {
            source: 'iana',
          },
          'application/json5': {
            extensions: ['json5'],
          },
          'application/jsonml+json': {
            source: 'apache',
            compressible: true,
            extensions: ['jsonml'],
          },
          'application/jwk+json': {
            source: 'iana',
            compressible: true,
          },
          'application/jwk-set+json': {
            source: 'iana',
            compressible: true,
          },
          'application/jwt': {
            source: 'iana',
          },
          'application/kpml-request+xml': {
            source: 'iana',
          },
          'application/kpml-response+xml': {
            source: 'iana',
          },
          'application/ld+json': {
            source: 'iana',
            compressible: true,
            extensions: ['jsonld'],
          },
          'application/link-format': {
            source: 'iana',
          },
          'application/load-control+xml': {
            source: 'iana',
          },
          'application/lost+xml': {
            source: 'iana',
            extensions: ['lostxml'],
          },
          'application/lostsync+xml': {
            source: 'iana',
          },
          'application/lxf': {
            source: 'iana',
          },
          'application/mac-binhex40': {
            source: 'iana',
            extensions: ['hqx'],
          },
          'application/mac-compactpro': {
            source: 'apache',
            extensions: ['cpt'],
          },
          'application/macwriteii': {
            source: 'iana',
          },
          'application/mads+xml': {
            source: 'iana',
            extensions: ['mads'],
          },
          'application/manifest+json': {
            charset: 'UTF-8',
            compressible: true,
            extensions: ['webmanifest'],
          },
          'application/marc': {
            source: 'iana',
            extensions: ['mrc'],
          },
          'application/marcxml+xml': {
            source: 'iana',
            extensions: ['mrcx'],
          },
          'application/mathematica': {
            source: 'iana',
            extensions: ['ma', 'nb', 'mb'],
          },
          'application/mathml+xml': {
            source: 'iana',
            extensions: ['mathml'],
          },
          'application/mathml-content+xml': {
            source: 'iana',
          },
          'application/mathml-presentation+xml': {
            source: 'iana',
          },
          'application/mbms-associated-procedure-description+xml': {
            source: 'iana',
          },
          'application/mbms-deregister+xml': {
            source: 'iana',
          },
          'application/mbms-envelope+xml': {
            source: 'iana',
          },
          'application/mbms-msk+xml': {
            source: 'iana',
          },
          'application/mbms-msk-response+xml': {
            source: 'iana',
          },
          'application/mbms-protection-description+xml': {
            source: 'iana',
          },
          'application/mbms-reception-report+xml': {
            source: 'iana',
          },
          'application/mbms-register+xml': {
            source: 'iana',
          },
          'application/mbms-register-response+xml': {
            source: 'iana',
          },
          'application/mbms-schedule+xml': {
            source: 'iana',
          },
          'application/mbms-user-service-description+xml': {
            source: 'iana',
          },
          'application/mbox': {
            source: 'iana',
            extensions: ['mbox'],
          },
          'application/media-policy-dataset+xml': {
            source: 'iana',
          },
          'application/media_control+xml': {
            source: 'iana',
          },
          'application/mediaservercontrol+xml': {
            source: 'iana',
            extensions: ['mscml'],
          },
          'application/merge-patch+json': {
            source: 'iana',
            compressible: true,
          },
          'application/metalink+xml': {
            source: 'apache',
            extensions: ['metalink'],
          },
          'application/metalink4+xml': {
            source: 'iana',
            extensions: ['meta4'],
          },
          'application/mets+xml': {
            source: 'iana',
            extensions: ['mets'],
          },
          'application/mf4': {
            source: 'iana',
          },
          'application/mikey': {
            source: 'iana',
          },
          'application/mods+xml': {
            source: 'iana',
            extensions: ['mods'],
          },
          'application/moss-keys': {
            source: 'iana',
          },
          'application/moss-signature': {
            source: 'iana',
          },
          'application/mosskey-data': {
            source: 'iana',
          },
          'application/mosskey-request': {
            source: 'iana',
          },
          'application/mp21': {
            source: 'iana',
            extensions: ['m21', 'mp21'],
          },
          'application/mp4': {
            source: 'iana',
            extensions: ['mp4s', 'm4p'],
          },
          'application/mpeg4-generic': {
            source: 'iana',
          },
          'application/mpeg4-iod': {
            source: 'iana',
          },
          'application/mpeg4-iod-xmt': {
            source: 'iana',
          },
          'application/mrb-consumer+xml': {
            source: 'iana',
          },
          'application/mrb-publish+xml': {
            source: 'iana',
          },
          'application/msc-ivr+xml': {
            source: 'iana',
          },
          'application/msc-mixer+xml': {
            source: 'iana',
          },
          'application/msword': {
            source: 'iana',
            compressible: false,
            extensions: ['doc', 'dot'],
          },
          'application/mxf': {
            source: 'iana',
            extensions: ['mxf'],
          },
          'application/nasdata': {
            source: 'iana',
          },
          'application/news-checkgroups': {
            source: 'iana',
          },
          'application/news-groupinfo': {
            source: 'iana',
          },
          'application/news-transmission': {
            source: 'iana',
          },
          'application/nlsml+xml': {
            source: 'iana',
          },
          'application/nss': {
            source: 'iana',
          },
          'application/ocsp-request': {
            source: 'iana',
          },
          'application/ocsp-response': {
            source: 'iana',
          },
          'application/octet-stream': {
            source: 'iana',
            compressible: false,
            extensions: [
              'bin',
              'dms',
              'lrf',
              'mar',
              'so',
              'dist',
              'distz',
              'pkg',
              'bpk',
              'dump',
              'elc',
              'deploy',
              'exe',
              'dll',
              'deb',
              'dmg',
              'iso',
              'img',
              'msi',
              'msp',
              'msm',
              'buffer',
            ],
          },
          'application/oda': {
            source: 'iana',
            extensions: ['oda'],
          },
          'application/odx': {
            source: 'iana',
          },
          'application/oebps-package+xml': {
            source: 'iana',
            extensions: ['opf'],
          },
          'application/ogg': {
            source: 'iana',
            compressible: false,
            extensions: ['ogx'],
          },
          'application/omdoc+xml': {
            source: 'apache',
            extensions: ['omdoc'],
          },
          'application/onenote': {
            source: 'apache',
            extensions: ['onetoc', 'onetoc2', 'onetmp', 'onepkg'],
          },
          'application/oxps': {
            source: 'iana',
            extensions: ['oxps'],
          },
          'application/p2p-overlay+xml': {
            source: 'iana',
          },
          'application/parityfec': {
            source: 'iana',
          },
          'application/patch-ops-error+xml': {
            source: 'iana',
            extensions: ['xer'],
          },
          'application/pdf': {
            source: 'iana',
            compressible: false,
            extensions: ['pdf'],
          },
          'application/pdx': {
            source: 'iana',
          },
          'application/pgp-encrypted': {
            source: 'iana',
            compressible: false,
            extensions: ['pgp'],
          },
          'application/pgp-keys': {
            source: 'iana',
          },
          'application/pgp-signature': {
            source: 'iana',
            extensions: ['asc', 'sig'],
          },
          'application/pics-rules': {
            source: 'apache',
            extensions: ['prf'],
          },
          'application/pidf+xml': {
            source: 'iana',
          },
          'application/pidf-diff+xml': {
            source: 'iana',
          },
          'application/pkcs10': {
            source: 'iana',
            extensions: ['p10'],
          },
          'application/pkcs12': {
            source: 'iana',
          },
          'application/pkcs7-mime': {
            source: 'iana',
            extensions: ['p7m', 'p7c'],
          },
          'application/pkcs7-signature': {
            source: 'iana',
            extensions: ['p7s'],
          },
          'application/pkcs8': {
            source: 'iana',
            extensions: ['p8'],
          },
          'application/pkix-attr-cert': {
            source: 'iana',
            extensions: ['ac'],
          },
          'application/pkix-cert': {
            source: 'iana',
            extensions: ['cer'],
          },
          'application/pkix-crl': {
            source: 'iana',
            extensions: ['crl'],
          },
          'application/pkix-pkipath': {
            source: 'iana',
            extensions: ['pkipath'],
          },
          'application/pkixcmp': {
            source: 'iana',
            extensions: ['pki'],
          },
          'application/pls+xml': {
            source: 'iana',
            extensions: ['pls'],
          },
          'application/poc-settings+xml': {
            source: 'iana',
          },
          'application/postscript': {
            source: 'iana',
            compressible: true,
            extensions: ['ai', 'eps', 'ps'],
          },
          'application/provenance+xml': {
            source: 'iana',
          },
          'application/prs.alvestrand.titrax-sheet': {
            source: 'iana',
          },
          'application/prs.cww': {
            source: 'iana',
            extensions: ['cww'],
          },
          'application/prs.hpub+zip': {
            source: 'iana',
          },
          'application/prs.nprend': {
            source: 'iana',
          },
          'application/prs.plucker': {
            source: 'iana',
          },
          'application/prs.rdf-xml-crypt': {
            source: 'iana',
          },
          'application/prs.xsf+xml': {
            source: 'iana',
          },
          'application/pskc+xml': {
            source: 'iana',
            extensions: ['pskcxml'],
          },
          'application/qsig': {
            source: 'iana',
          },
          'application/raptorfec': {
            source: 'iana',
          },
          'application/rdap+json': {
            source: 'iana',
            compressible: true,
          },
          'application/rdf+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['rdf'],
          },
          'application/reginfo+xml': {
            source: 'iana',
            extensions: ['rif'],
          },
          'application/relax-ng-compact-syntax': {
            source: 'iana',
            extensions: ['rnc'],
          },
          'application/remote-printing': {
            source: 'iana',
          },
          'application/reputon+json': {
            source: 'iana',
            compressible: true,
          },
          'application/resource-lists+xml': {
            source: 'iana',
            extensions: ['rl'],
          },
          'application/resource-lists-diff+xml': {
            source: 'iana',
            extensions: ['rld'],
          },
          'application/rfc+xml': {
            source: 'iana',
          },
          'application/riscos': {
            source: 'iana',
          },
          'application/rlmi+xml': {
            source: 'iana',
          },
          'application/rls-services+xml': {
            source: 'iana',
            extensions: ['rs'],
          },
          'application/rpki-ghostbusters': {
            source: 'iana',
            extensions: ['gbr'],
          },
          'application/rpki-manifest': {
            source: 'iana',
            extensions: ['mft'],
          },
          'application/rpki-roa': {
            source: 'iana',
            extensions: ['roa'],
          },
          'application/rpki-updown': {
            source: 'iana',
          },
          'application/rsd+xml': {
            source: 'apache',
            extensions: ['rsd'],
          },
          'application/rss+xml': {
            source: 'apache',
            compressible: true,
            extensions: ['rss'],
          },
          'application/rtf': {
            source: 'iana',
            compressible: true,
            extensions: ['rtf'],
          },
          'application/rtploopback': {
            source: 'iana',
          },
          'application/rtx': {
            source: 'iana',
          },
          'application/samlassertion+xml': {
            source: 'iana',
          },
          'application/samlmetadata+xml': {
            source: 'iana',
          },
          'application/sbml+xml': {
            source: 'iana',
            extensions: ['sbml'],
          },
          'application/scaip+xml': {
            source: 'iana',
          },
          'application/scim+json': {
            source: 'iana',
            compressible: true,
          },
          'application/scvp-cv-request': {
            source: 'iana',
            extensions: ['scq'],
          },
          'application/scvp-cv-response': {
            source: 'iana',
            extensions: ['scs'],
          },
          'application/scvp-vp-request': {
            source: 'iana',
            extensions: ['spq'],
          },
          'application/scvp-vp-response': {
            source: 'iana',
            extensions: ['spp'],
          },
          'application/sdp': {
            source: 'iana',
            extensions: ['sdp'],
          },
          'application/sep+xml': {
            source: 'iana',
          },
          'application/sep-exi': {
            source: 'iana',
          },
          'application/session-info': {
            source: 'iana',
          },
          'application/set-payment': {
            source: 'iana',
          },
          'application/set-payment-initiation': {
            source: 'iana',
            extensions: ['setpay'],
          },
          'application/set-registration': {
            source: 'iana',
          },
          'application/set-registration-initiation': {
            source: 'iana',
            extensions: ['setreg'],
          },
          'application/sgml': {
            source: 'iana',
          },
          'application/sgml-open-catalog': {
            source: 'iana',
          },
          'application/shf+xml': {
            source: 'iana',
            extensions: ['shf'],
          },
          'application/sieve': {
            source: 'iana',
          },
          'application/simple-filter+xml': {
            source: 'iana',
          },
          'application/simple-message-summary': {
            source: 'iana',
          },
          'application/simplesymbolcontainer': {
            source: 'iana',
          },
          'application/slate': {
            source: 'iana',
          },
          'application/smil': {
            source: 'iana',
          },
          'application/smil+xml': {
            source: 'iana',
            extensions: ['smi', 'smil'],
          },
          'application/smpte336m': {
            source: 'iana',
          },
          'application/soap+fastinfoset': {
            source: 'iana',
          },
          'application/soap+xml': {
            source: 'iana',
            compressible: true,
          },
          'application/sparql-query': {
            source: 'iana',
            extensions: ['rq'],
          },
          'application/sparql-results+xml': {
            source: 'iana',
            extensions: ['srx'],
          },
          'application/spirits-event+xml': {
            source: 'iana',
          },
          'application/sql': {
            source: 'iana',
          },
          'application/srgs': {
            source: 'iana',
            extensions: ['gram'],
          },
          'application/srgs+xml': {
            source: 'iana',
            extensions: ['grxml'],
          },
          'application/sru+xml': {
            source: 'iana',
            extensions: ['sru'],
          },
          'application/ssdl+xml': {
            source: 'apache',
            extensions: ['ssdl'],
          },
          'application/ssml+xml': {
            source: 'iana',
            extensions: ['ssml'],
          },
          'application/tamp-apex-update': {
            source: 'iana',
          },
          'application/tamp-apex-update-confirm': {
            source: 'iana',
          },
          'application/tamp-community-update': {
            source: 'iana',
          },
          'application/tamp-community-update-confirm': {
            source: 'iana',
          },
          'application/tamp-error': {
            source: 'iana',
          },
          'application/tamp-sequence-adjust': {
            source: 'iana',
          },
          'application/tamp-sequence-adjust-confirm': {
            source: 'iana',
          },
          'application/tamp-status-query': {
            source: 'iana',
          },
          'application/tamp-status-response': {
            source: 'iana',
          },
          'application/tamp-update': {
            source: 'iana',
          },
          'application/tamp-update-confirm': {
            source: 'iana',
          },
          'application/tar': {
            compressible: true,
          },
          'application/tei+xml': {
            source: 'iana',
            extensions: ['tei', 'teicorpus'],
          },
          'application/thraud+xml': {
            source: 'iana',
            extensions: ['tfi'],
          },
          'application/timestamp-query': {
            source: 'iana',
          },
          'application/timestamp-reply': {
            source: 'iana',
          },
          'application/timestamped-data': {
            source: 'iana',
            extensions: ['tsd'],
          },
          'application/ttml+xml': {
            source: 'iana',
          },
          'application/tve-trigger': {
            source: 'iana',
          },
          'application/ulpfec': {
            source: 'iana',
          },
          'application/urc-grpsheet+xml': {
            source: 'iana',
          },
          'application/urc-ressheet+xml': {
            source: 'iana',
          },
          'application/urc-targetdesc+xml': {
            source: 'iana',
          },
          'application/urc-uisocketdesc+xml': {
            source: 'iana',
          },
          'application/vcard+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vcard+xml': {
            source: 'iana',
          },
          'application/vemmi': {
            source: 'iana',
          },
          'application/vividence.scriptfile': {
            source: 'apache',
          },
          'application/vnd.3gpp-prose+xml': {
            source: 'iana',
          },
          'application/vnd.3gpp-prose-pc3ch+xml': {
            source: 'iana',
          },
          'application/vnd.3gpp.access-transfer-events+xml': {
            source: 'iana',
          },
          'application/vnd.3gpp.bsf+xml': {
            source: 'iana',
          },
          'application/vnd.3gpp.mid-call+xml': {
            source: 'iana',
          },
          'application/vnd.3gpp.pic-bw-large': {
            source: 'iana',
            extensions: ['plb'],
          },
          'application/vnd.3gpp.pic-bw-small': {
            source: 'iana',
            extensions: ['psb'],
          },
          'application/vnd.3gpp.pic-bw-var': {
            source: 'iana',
            extensions: ['pvb'],
          },
          'application/vnd.3gpp.sms': {
            source: 'iana',
          },
          'application/vnd.3gpp.srvcc-ext+xml': {
            source: 'iana',
          },
          'application/vnd.3gpp.srvcc-info+xml': {
            source: 'iana',
          },
          'application/vnd.3gpp.state-and-event-info+xml': {
            source: 'iana',
          },
          'application/vnd.3gpp.ussd+xml': {
            source: 'iana',
          },
          'application/vnd.3gpp2.bcmcsinfo+xml': {
            source: 'iana',
          },
          'application/vnd.3gpp2.sms': {
            source: 'iana',
          },
          'application/vnd.3gpp2.tcap': {
            source: 'iana',
            extensions: ['tcap'],
          },
          'application/vnd.3m.post-it-notes': {
            source: 'iana',
            extensions: ['pwn'],
          },
          'application/vnd.accpac.simply.aso': {
            source: 'iana',
            extensions: ['aso'],
          },
          'application/vnd.accpac.simply.imp': {
            source: 'iana',
            extensions: ['imp'],
          },
          'application/vnd.acucobol': {
            source: 'iana',
            extensions: ['acu'],
          },
          'application/vnd.acucorp': {
            source: 'iana',
            extensions: ['atc', 'acutc'],
          },
          'application/vnd.adobe.air-application-installer-package+zip': {
            source: 'apache',
            extensions: ['air'],
          },
          'application/vnd.adobe.flash.movie': {
            source: 'iana',
          },
          'application/vnd.adobe.formscentral.fcdt': {
            source: 'iana',
            extensions: ['fcdt'],
          },
          'application/vnd.adobe.fxp': {
            source: 'iana',
            extensions: ['fxp', 'fxpl'],
          },
          'application/vnd.adobe.partial-upload': {
            source: 'iana',
          },
          'application/vnd.adobe.xdp+xml': {
            source: 'iana',
            extensions: ['xdp'],
          },
          'application/vnd.adobe.xfdf': {
            source: 'iana',
            extensions: ['xfdf'],
          },
          'application/vnd.aether.imp': {
            source: 'iana',
          },
          'application/vnd.ah-barcode': {
            source: 'iana',
          },
          'application/vnd.ahead.space': {
            source: 'iana',
            extensions: ['ahead'],
          },
          'application/vnd.airzip.filesecure.azf': {
            source: 'iana',
            extensions: ['azf'],
          },
          'application/vnd.airzip.filesecure.azs': {
            source: 'iana',
            extensions: ['azs'],
          },
          'application/vnd.amazon.ebook': {
            source: 'apache',
            extensions: ['azw'],
          },
          'application/vnd.americandynamics.acc': {
            source: 'iana',
            extensions: ['acc'],
          },
          'application/vnd.amiga.ami': {
            source: 'iana',
            extensions: ['ami'],
          },
          'application/vnd.amundsen.maze+xml': {
            source: 'iana',
          },
          'application/vnd.android.package-archive': {
            source: 'apache',
            compressible: false,
            extensions: ['apk'],
          },
          'application/vnd.anki': {
            source: 'iana',
          },
          'application/vnd.anser-web-certificate-issue-initiation': {
            source: 'iana',
            extensions: ['cii'],
          },
          'application/vnd.anser-web-funds-transfer-initiation': {
            source: 'apache',
            extensions: ['fti'],
          },
          'application/vnd.antix.game-component': {
            source: 'iana',
            extensions: ['atx'],
          },
          'application/vnd.apache.thrift.binary': {
            source: 'iana',
          },
          'application/vnd.apache.thrift.compact': {
            source: 'iana',
          },
          'application/vnd.apache.thrift.json': {
            source: 'iana',
          },
          'application/vnd.api+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.apple.installer+xml': {
            source: 'iana',
            extensions: ['mpkg'],
          },
          'application/vnd.apple.mpegurl': {
            source: 'iana',
            extensions: ['m3u8'],
          },
          'application/vnd.apple.pkpass': {
            compressible: false,
            extensions: ['pkpass'],
          },
          'application/vnd.arastra.swi': {
            source: 'iana',
          },
          'application/vnd.aristanetworks.swi': {
            source: 'iana',
            extensions: ['swi'],
          },
          'application/vnd.artsquare': {
            source: 'iana',
          },
          'application/vnd.astraea-software.iota': {
            source: 'iana',
            extensions: ['iota'],
          },
          'application/vnd.audiograph': {
            source: 'iana',
            extensions: ['aep'],
          },
          'application/vnd.autopackage': {
            source: 'iana',
          },
          'application/vnd.avistar+xml': {
            source: 'iana',
          },
          'application/vnd.balsamiq.bmml+xml': {
            source: 'iana',
          },
          'application/vnd.balsamiq.bmpr': {
            source: 'iana',
          },
          'application/vnd.bekitzur-stech+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.biopax.rdf+xml': {
            source: 'iana',
          },
          'application/vnd.blueice.multipass': {
            source: 'iana',
            extensions: ['mpm'],
          },
          'application/vnd.bluetooth.ep.oob': {
            source: 'iana',
          },
          'application/vnd.bluetooth.le.oob': {
            source: 'iana',
          },
          'application/vnd.bmi': {
            source: 'iana',
            extensions: ['bmi'],
          },
          'application/vnd.businessobjects': {
            source: 'iana',
            extensions: ['rep'],
          },
          'application/vnd.cab-jscript': {
            source: 'iana',
          },
          'application/vnd.canon-cpdl': {
            source: 'iana',
          },
          'application/vnd.canon-lips': {
            source: 'iana',
          },
          'application/vnd.cendio.thinlinc.clientconf': {
            source: 'iana',
          },
          'application/vnd.century-systems.tcp_stream': {
            source: 'iana',
          },
          'application/vnd.chemdraw+xml': {
            source: 'iana',
            extensions: ['cdxml'],
          },
          'application/vnd.chipnuts.karaoke-mmd': {
            source: 'iana',
            extensions: ['mmd'],
          },
          'application/vnd.cinderella': {
            source: 'iana',
            extensions: ['cdy'],
          },
          'application/vnd.cirpack.isdn-ext': {
            source: 'iana',
          },
          'application/vnd.citationstyles.style+xml': {
            source: 'iana',
          },
          'application/vnd.claymore': {
            source: 'iana',
            extensions: ['cla'],
          },
          'application/vnd.cloanto.rp9': {
            source: 'iana',
            extensions: ['rp9'],
          },
          'application/vnd.clonk.c4group': {
            source: 'iana',
            extensions: ['c4g', 'c4d', 'c4f', 'c4p', 'c4u'],
          },
          'application/vnd.cluetrust.cartomobile-config': {
            source: 'iana',
            extensions: ['c11amc'],
          },
          'application/vnd.cluetrust.cartomobile-config-pkg': {
            source: 'iana',
            extensions: ['c11amz'],
          },
          'application/vnd.coffeescript': {
            source: 'iana',
          },
          'application/vnd.collection+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.collection.doc+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.collection.next+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.commerce-battelle': {
            source: 'iana',
          },
          'application/vnd.commonspace': {
            source: 'iana',
            extensions: ['csp'],
          },
          'application/vnd.contact.cmsg': {
            source: 'iana',
            extensions: ['cdbcmsg'],
          },
          'application/vnd.cosmocaller': {
            source: 'iana',
            extensions: ['cmc'],
          },
          'application/vnd.crick.clicker': {
            source: 'iana',
            extensions: ['clkx'],
          },
          'application/vnd.crick.clicker.keyboard': {
            source: 'iana',
            extensions: ['clkk'],
          },
          'application/vnd.crick.clicker.palette': {
            source: 'iana',
            extensions: ['clkp'],
          },
          'application/vnd.crick.clicker.template': {
            source: 'iana',
            extensions: ['clkt'],
          },
          'application/vnd.crick.clicker.wordbank': {
            source: 'iana',
            extensions: ['clkw'],
          },
          'application/vnd.criticaltools.wbs+xml': {
            source: 'iana',
            extensions: ['wbs'],
          },
          'application/vnd.ctc-posml': {
            source: 'iana',
            extensions: ['pml'],
          },
          'application/vnd.ctct.ws+xml': {
            source: 'iana',
          },
          'application/vnd.cups-pdf': {
            source: 'iana',
          },
          'application/vnd.cups-postscript': {
            source: 'iana',
          },
          'application/vnd.cups-ppd': {
            source: 'iana',
            extensions: ['ppd'],
          },
          'application/vnd.cups-raster': {
            source: 'iana',
          },
          'application/vnd.cups-raw': {
            source: 'iana',
          },
          'application/vnd.curl': {
            source: 'iana',
          },
          'application/vnd.curl.car': {
            source: 'apache',
            extensions: ['car'],
          },
          'application/vnd.curl.pcurl': {
            source: 'apache',
            extensions: ['pcurl'],
          },
          'application/vnd.cyan.dean.root+xml': {
            source: 'iana',
          },
          'application/vnd.cybank': {
            source: 'iana',
          },
          'application/vnd.dart': {
            source: 'iana',
            compressible: true,
            extensions: ['dart'],
          },
          'application/vnd.data-vision.rdz': {
            source: 'iana',
            extensions: ['rdz'],
          },
          'application/vnd.debian.binary-package': {
            source: 'iana',
          },
          'application/vnd.dece.data': {
            source: 'iana',
            extensions: ['uvf', 'uvvf', 'uvd', 'uvvd'],
          },
          'application/vnd.dece.ttml+xml': {
            source: 'iana',
            extensions: ['uvt', 'uvvt'],
          },
          'application/vnd.dece.unspecified': {
            source: 'iana',
            extensions: ['uvx', 'uvvx'],
          },
          'application/vnd.dece.zip': {
            source: 'iana',
            extensions: ['uvz', 'uvvz'],
          },
          'application/vnd.denovo.fcselayout-link': {
            source: 'iana',
            extensions: ['fe_launch'],
          },
          'application/vnd.desmume-movie': {
            source: 'iana',
          },
          'application/vnd.dir-bi.plate-dl-nosuffix': {
            source: 'iana',
          },
          'application/vnd.dm.delegation+xml': {
            source: 'iana',
          },
          'application/vnd.dna': {
            source: 'iana',
            extensions: ['dna'],
          },
          'application/vnd.document+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.dolby.mlp': {
            source: 'apache',
            extensions: ['mlp'],
          },
          'application/vnd.dolby.mobile.1': {
            source: 'iana',
          },
          'application/vnd.dolby.mobile.2': {
            source: 'iana',
          },
          'application/vnd.doremir.scorecloud-binary-document': {
            source: 'iana',
          },
          'application/vnd.dpgraph': {
            source: 'iana',
            extensions: ['dpg'],
          },
          'application/vnd.dreamfactory': {
            source: 'iana',
            extensions: ['dfac'],
          },
          'application/vnd.drive+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.ds-keypoint': {
            source: 'apache',
            extensions: ['kpxx'],
          },
          'application/vnd.dtg.local': {
            source: 'iana',
          },
          'application/vnd.dtg.local.flash': {
            source: 'iana',
          },
          'application/vnd.dtg.local.html': {
            source: 'iana',
          },
          'application/vnd.dvb.ait': {
            source: 'iana',
            extensions: ['ait'],
          },
          'application/vnd.dvb.dvbj': {
            source: 'iana',
          },
          'application/vnd.dvb.esgcontainer': {
            source: 'iana',
          },
          'application/vnd.dvb.ipdcdftnotifaccess': {
            source: 'iana',
          },
          'application/vnd.dvb.ipdcesgaccess': {
            source: 'iana',
          },
          'application/vnd.dvb.ipdcesgaccess2': {
            source: 'iana',
          },
          'application/vnd.dvb.ipdcesgpdd': {
            source: 'iana',
          },
          'application/vnd.dvb.ipdcroaming': {
            source: 'iana',
          },
          'application/vnd.dvb.iptv.alfec-base': {
            source: 'iana',
          },
          'application/vnd.dvb.iptv.alfec-enhancement': {
            source: 'iana',
          },
          'application/vnd.dvb.notif-aggregate-root+xml': {
            source: 'iana',
          },
          'application/vnd.dvb.notif-container+xml': {
            source: 'iana',
          },
          'application/vnd.dvb.notif-generic+xml': {
            source: 'iana',
          },
          'application/vnd.dvb.notif-ia-msglist+xml': {
            source: 'iana',
          },
          'application/vnd.dvb.notif-ia-registration-request+xml': {
            source: 'iana',
          },
          'application/vnd.dvb.notif-ia-registration-response+xml': {
            source: 'iana',
          },
          'application/vnd.dvb.notif-init+xml': {
            source: 'iana',
          },
          'application/vnd.dvb.pfr': {
            source: 'iana',
          },
          'application/vnd.dvb.service': {
            source: 'iana',
            extensions: ['svc'],
          },
          'application/vnd.dxr': {
            source: 'iana',
          },
          'application/vnd.dynageo': {
            source: 'iana',
            extensions: ['geo'],
          },
          'application/vnd.dzr': {
            source: 'iana',
          },
          'application/vnd.easykaraoke.cdgdownload': {
            source: 'iana',
          },
          'application/vnd.ecdis-update': {
            source: 'iana',
          },
          'application/vnd.ecowin.chart': {
            source: 'iana',
            extensions: ['mag'],
          },
          'application/vnd.ecowin.filerequest': {
            source: 'iana',
          },
          'application/vnd.ecowin.fileupdate': {
            source: 'iana',
          },
          'application/vnd.ecowin.series': {
            source: 'iana',
          },
          'application/vnd.ecowin.seriesrequest': {
            source: 'iana',
          },
          'application/vnd.ecowin.seriesupdate': {
            source: 'iana',
          },
          'application/vnd.emclient.accessrequest+xml': {
            source: 'iana',
          },
          'application/vnd.enliven': {
            source: 'iana',
            extensions: ['nml'],
          },
          'application/vnd.enphase.envoy': {
            source: 'iana',
          },
          'application/vnd.eprints.data+xml': {
            source: 'iana',
          },
          'application/vnd.epson.esf': {
            source: 'iana',
            extensions: ['esf'],
          },
          'application/vnd.epson.msf': {
            source: 'iana',
            extensions: ['msf'],
          },
          'application/vnd.epson.quickanime': {
            source: 'iana',
            extensions: ['qam'],
          },
          'application/vnd.epson.salt': {
            source: 'iana',
            extensions: ['slt'],
          },
          'application/vnd.epson.ssf': {
            source: 'iana',
            extensions: ['ssf'],
          },
          'application/vnd.ericsson.quickcall': {
            source: 'iana',
          },
          'application/vnd.eszigno3+xml': {
            source: 'iana',
            extensions: ['es3', 'et3'],
          },
          'application/vnd.etsi.aoc+xml': {
            source: 'iana',
          },
          'application/vnd.etsi.asic-e+zip': {
            source: 'iana',
          },
          'application/vnd.etsi.asic-s+zip': {
            source: 'iana',
          },
          'application/vnd.etsi.cug+xml': {
            source: 'iana',
          },
          'application/vnd.etsi.iptvcommand+xml': {
            source: 'iana',
          },
          'application/vnd.etsi.iptvdiscovery+xml': {
            source: 'iana',
          },
          'application/vnd.etsi.iptvprofile+xml': {
            source: 'iana',
          },
          'application/vnd.etsi.iptvsad-bc+xml': {
            source: 'iana',
          },
          'application/vnd.etsi.iptvsad-cod+xml': {
            source: 'iana',
          },
          'application/vnd.etsi.iptvsad-npvr+xml': {
            source: 'iana',
          },
          'application/vnd.etsi.iptvservice+xml': {
            source: 'iana',
          },
          'application/vnd.etsi.iptvsync+xml': {
            source: 'iana',
          },
          'application/vnd.etsi.iptvueprofile+xml': {
            source: 'iana',
          },
          'application/vnd.etsi.mcid+xml': {
            source: 'iana',
          },
          'application/vnd.etsi.mheg5': {
            source: 'iana',
          },
          'application/vnd.etsi.overload-control-policy-dataset+xml': {
            source: 'iana',
          },
          'application/vnd.etsi.pstn+xml': {
            source: 'iana',
          },
          'application/vnd.etsi.sci+xml': {
            source: 'iana',
          },
          'application/vnd.etsi.simservs+xml': {
            source: 'iana',
          },
          'application/vnd.etsi.timestamp-token': {
            source: 'iana',
          },
          'application/vnd.etsi.tsl+xml': {
            source: 'iana',
          },
          'application/vnd.etsi.tsl.der': {
            source: 'iana',
          },
          'application/vnd.eudora.data': {
            source: 'iana',
          },
          'application/vnd.ezpix-album': {
            source: 'iana',
            extensions: ['ez2'],
          },
          'application/vnd.ezpix-package': {
            source: 'iana',
            extensions: ['ez3'],
          },
          'application/vnd.f-secure.mobile': {
            source: 'iana',
          },
          'application/vnd.fastcopy-disk-image': {
            source: 'iana',
          },
          'application/vnd.fdf': {
            source: 'iana',
            extensions: ['fdf'],
          },
          'application/vnd.fdsn.mseed': {
            source: 'iana',
            extensions: ['mseed'],
          },
          'application/vnd.fdsn.seed': {
            source: 'iana',
            extensions: ['seed', 'dataless'],
          },
          'application/vnd.ffsns': {
            source: 'iana',
          },
          'application/vnd.filmit.zfc': {
            source: 'iana',
          },
          'application/vnd.fints': {
            source: 'iana',
          },
          'application/vnd.firemonkeys.cloudcell': {
            source: 'iana',
          },
          'application/vnd.flographit': {
            source: 'iana',
            extensions: ['gph'],
          },
          'application/vnd.fluxtime.clip': {
            source: 'iana',
            extensions: ['ftc'],
          },
          'application/vnd.font-fontforge-sfd': {
            source: 'iana',
          },
          'application/vnd.framemaker': {
            source: 'iana',
            extensions: ['fm', 'frame', 'maker', 'book'],
          },
          'application/vnd.frogans.fnc': {
            source: 'iana',
            extensions: ['fnc'],
          },
          'application/vnd.frogans.ltf': {
            source: 'iana',
            extensions: ['ltf'],
          },
          'application/vnd.fsc.weblaunch': {
            source: 'iana',
            extensions: ['fsc'],
          },
          'application/vnd.fujitsu.oasys': {
            source: 'iana',
            extensions: ['oas'],
          },
          'application/vnd.fujitsu.oasys2': {
            source: 'iana',
            extensions: ['oa2'],
          },
          'application/vnd.fujitsu.oasys3': {
            source: 'iana',
            extensions: ['oa3'],
          },
          'application/vnd.fujitsu.oasysgp': {
            source: 'iana',
            extensions: ['fg5'],
          },
          'application/vnd.fujitsu.oasysprs': {
            source: 'iana',
            extensions: ['bh2'],
          },
          'application/vnd.fujixerox.art-ex': {
            source: 'iana',
          },
          'application/vnd.fujixerox.art4': {
            source: 'iana',
          },
          'application/vnd.fujixerox.ddd': {
            source: 'iana',
            extensions: ['ddd'],
          },
          'application/vnd.fujixerox.docuworks': {
            source: 'iana',
            extensions: ['xdw'],
          },
          'application/vnd.fujixerox.docuworks.binder': {
            source: 'iana',
            extensions: ['xbd'],
          },
          'application/vnd.fujixerox.docuworks.container': {
            source: 'iana',
          },
          'application/vnd.fujixerox.hbpl': {
            source: 'iana',
          },
          'application/vnd.fut-misnet': {
            source: 'iana',
          },
          'application/vnd.fuzzysheet': {
            source: 'iana',
            extensions: ['fzs'],
          },
          'application/vnd.genomatix.tuxedo': {
            source: 'iana',
            extensions: ['txd'],
          },
          'application/vnd.geo+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.geocube+xml': {
            source: 'iana',
          },
          'application/vnd.geogebra.file': {
            source: 'iana',
            extensions: ['ggb'],
          },
          'application/vnd.geogebra.tool': {
            source: 'iana',
            extensions: ['ggt'],
          },
          'application/vnd.geometry-explorer': {
            source: 'iana',
            extensions: ['gex', 'gre'],
          },
          'application/vnd.geonext': {
            source: 'iana',
            extensions: ['gxt'],
          },
          'application/vnd.geoplan': {
            source: 'iana',
            extensions: ['g2w'],
          },
          'application/vnd.geospace': {
            source: 'iana',
            extensions: ['g3w'],
          },
          'application/vnd.gerber': {
            source: 'iana',
          },
          'application/vnd.globalplatform.card-content-mgt': {
            source: 'iana',
          },
          'application/vnd.globalplatform.card-content-mgt-response': {
            source: 'iana',
          },
          'application/vnd.gmx': {
            source: 'iana',
            extensions: ['gmx'],
          },
          'application/vnd.google-apps.document': {
            compressible: false,
            extensions: ['gdoc'],
          },
          'application/vnd.google-apps.presentation': {
            compressible: false,
            extensions: ['gslides'],
          },
          'application/vnd.google-apps.spreadsheet': {
            compressible: false,
            extensions: ['gsheet'],
          },
          'application/vnd.google-earth.kml+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['kml'],
          },
          'application/vnd.google-earth.kmz': {
            source: 'iana',
            compressible: false,
            extensions: ['kmz'],
          },
          'application/vnd.gov.sk.e-form+xml': {
            source: 'iana',
          },
          'application/vnd.gov.sk.e-form+zip': {
            source: 'iana',
          },
          'application/vnd.gov.sk.xmldatacontainer+xml': {
            source: 'iana',
          },
          'application/vnd.grafeq': {
            source: 'iana',
            extensions: ['gqf', 'gqs'],
          },
          'application/vnd.gridmp': {
            source: 'iana',
          },
          'application/vnd.groove-account': {
            source: 'iana',
            extensions: ['gac'],
          },
          'application/vnd.groove-help': {
            source: 'iana',
            extensions: ['ghf'],
          },
          'application/vnd.groove-identity-message': {
            source: 'iana',
            extensions: ['gim'],
          },
          'application/vnd.groove-injector': {
            source: 'iana',
            extensions: ['grv'],
          },
          'application/vnd.groove-tool-message': {
            source: 'iana',
            extensions: ['gtm'],
          },
          'application/vnd.groove-tool-template': {
            source: 'iana',
            extensions: ['tpl'],
          },
          'application/vnd.groove-vcard': {
            source: 'iana',
            extensions: ['vcg'],
          },
          'application/vnd.hal+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.hal+xml': {
            source: 'iana',
            extensions: ['hal'],
          },
          'application/vnd.handheld-entertainment+xml': {
            source: 'iana',
            extensions: ['zmm'],
          },
          'application/vnd.hbci': {
            source: 'iana',
            extensions: ['hbci'],
          },
          'application/vnd.hcl-bireports': {
            source: 'iana',
          },
          'application/vnd.heroku+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.hhe.lesson-player': {
            source: 'iana',
            extensions: ['les'],
          },
          'application/vnd.hp-hpgl': {
            source: 'iana',
            extensions: ['hpgl'],
          },
          'application/vnd.hp-hpid': {
            source: 'iana',
            extensions: ['hpid'],
          },
          'application/vnd.hp-hps': {
            source: 'iana',
            extensions: ['hps'],
          },
          'application/vnd.hp-jlyt': {
            source: 'iana',
            extensions: ['jlt'],
          },
          'application/vnd.hp-pcl': {
            source: 'iana',
            extensions: ['pcl'],
          },
          'application/vnd.hp-pclxl': {
            source: 'iana',
            extensions: ['pclxl'],
          },
          'application/vnd.httphone': {
            source: 'iana',
          },
          'application/vnd.hydrostatix.sof-data': {
            source: 'iana',
            extensions: ['sfd-hdstx'],
          },
          'application/vnd.hyperdrive+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.hzn-3d-crossword': {
            source: 'iana',
          },
          'application/vnd.ibm.afplinedata': {
            source: 'iana',
          },
          'application/vnd.ibm.electronic-media': {
            source: 'iana',
          },
          'application/vnd.ibm.minipay': {
            source: 'iana',
            extensions: ['mpy'],
          },
          'application/vnd.ibm.modcap': {
            source: 'iana',
            extensions: ['afp', 'listafp', 'list3820'],
          },
          'application/vnd.ibm.rights-management': {
            source: 'iana',
            extensions: ['irm'],
          },
          'application/vnd.ibm.secure-container': {
            source: 'iana',
            extensions: ['sc'],
          },
          'application/vnd.iccprofile': {
            source: 'iana',
            extensions: ['icc', 'icm'],
          },
          'application/vnd.ieee.1905': {
            source: 'iana',
          },
          'application/vnd.igloader': {
            source: 'iana',
            extensions: ['igl'],
          },
          'application/vnd.immervision-ivp': {
            source: 'iana',
            extensions: ['ivp'],
          },
          'application/vnd.immervision-ivu': {
            source: 'iana',
            extensions: ['ivu'],
          },
          'application/vnd.ims.imsccv1p1': {
            source: 'iana',
          },
          'application/vnd.ims.imsccv1p2': {
            source: 'iana',
          },
          'application/vnd.ims.imsccv1p3': {
            source: 'iana',
          },
          'application/vnd.ims.lis.v2.result+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.ims.lti.v2.toolconsumerprofile+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.ims.lti.v2.toolproxy+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.ims.lti.v2.toolproxy.id+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.ims.lti.v2.toolsettings+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.ims.lti.v2.toolsettings.simple+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.informedcontrol.rms+xml': {
            source: 'iana',
          },
          'application/vnd.informix-visionary': {
            source: 'iana',
          },
          'application/vnd.infotech.project': {
            source: 'iana',
          },
          'application/vnd.infotech.project+xml': {
            source: 'iana',
          },
          'application/vnd.innopath.wamp.notification': {
            source: 'iana',
          },
          'application/vnd.insors.igm': {
            source: 'iana',
            extensions: ['igm'],
          },
          'application/vnd.intercon.formnet': {
            source: 'iana',
            extensions: ['xpw', 'xpx'],
          },
          'application/vnd.intergeo': {
            source: 'iana',
            extensions: ['i2g'],
          },
          'application/vnd.intertrust.digibox': {
            source: 'iana',
          },
          'application/vnd.intertrust.nncp': {
            source: 'iana',
          },
          'application/vnd.intu.qbo': {
            source: 'iana',
            extensions: ['qbo'],
          },
          'application/vnd.intu.qfx': {
            source: 'iana',
            extensions: ['qfx'],
          },
          'application/vnd.iptc.g2.catalogitem+xml': {
            source: 'iana',
          },
          'application/vnd.iptc.g2.conceptitem+xml': {
            source: 'iana',
          },
          'application/vnd.iptc.g2.knowledgeitem+xml': {
            source: 'iana',
          },
          'application/vnd.iptc.g2.newsitem+xml': {
            source: 'iana',
          },
          'application/vnd.iptc.g2.newsmessage+xml': {
            source: 'iana',
          },
          'application/vnd.iptc.g2.packageitem+xml': {
            source: 'iana',
          },
          'application/vnd.iptc.g2.planningitem+xml': {
            source: 'iana',
          },
          'application/vnd.ipunplugged.rcprofile': {
            source: 'iana',
            extensions: ['rcprofile'],
          },
          'application/vnd.irepository.package+xml': {
            source: 'iana',
            extensions: ['irp'],
          },
          'application/vnd.is-xpr': {
            source: 'iana',
            extensions: ['xpr'],
          },
          'application/vnd.isac.fcs': {
            source: 'iana',
            extensions: ['fcs'],
          },
          'application/vnd.jam': {
            source: 'iana',
            extensions: ['jam'],
          },
          'application/vnd.japannet-directory-service': {
            source: 'iana',
          },
          'application/vnd.japannet-jpnstore-wakeup': {
            source: 'iana',
          },
          'application/vnd.japannet-payment-wakeup': {
            source: 'iana',
          },
          'application/vnd.japannet-registration': {
            source: 'iana',
          },
          'application/vnd.japannet-registration-wakeup': {
            source: 'iana',
          },
          'application/vnd.japannet-setstore-wakeup': {
            source: 'iana',
          },
          'application/vnd.japannet-verification': {
            source: 'iana',
          },
          'application/vnd.japannet-verification-wakeup': {
            source: 'iana',
          },
          'application/vnd.jcp.javame.midlet-rms': {
            source: 'iana',
            extensions: ['rms'],
          },
          'application/vnd.jisp': {
            source: 'iana',
            extensions: ['jisp'],
          },
          'application/vnd.joost.joda-archive': {
            source: 'iana',
            extensions: ['joda'],
          },
          'application/vnd.jsk.isdn-ngn': {
            source: 'iana',
          },
          'application/vnd.kahootz': {
            source: 'iana',
            extensions: ['ktz', 'ktr'],
          },
          'application/vnd.kde.karbon': {
            source: 'iana',
            extensions: ['karbon'],
          },
          'application/vnd.kde.kchart': {
            source: 'iana',
            extensions: ['chrt'],
          },
          'application/vnd.kde.kformula': {
            source: 'iana',
            extensions: ['kfo'],
          },
          'application/vnd.kde.kivio': {
            source: 'iana',
            extensions: ['flw'],
          },
          'application/vnd.kde.kontour': {
            source: 'iana',
            extensions: ['kon'],
          },
          'application/vnd.kde.kpresenter': {
            source: 'iana',
            extensions: ['kpr', 'kpt'],
          },
          'application/vnd.kde.kspread': {
            source: 'iana',
            extensions: ['ksp'],
          },
          'application/vnd.kde.kword': {
            source: 'iana',
            extensions: ['kwd', 'kwt'],
          },
          'application/vnd.kenameaapp': {
            source: 'iana',
            extensions: ['htke'],
          },
          'application/vnd.kidspiration': {
            source: 'iana',
            extensions: ['kia'],
          },
          'application/vnd.kinar': {
            source: 'iana',
            extensions: ['kne', 'knp'],
          },
          'application/vnd.koan': {
            source: 'iana',
            extensions: ['skp', 'skd', 'skt', 'skm'],
          },
          'application/vnd.kodak-descriptor': {
            source: 'iana',
            extensions: ['sse'],
          },
          'application/vnd.las.las+xml': {
            source: 'iana',
            extensions: ['lasxml'],
          },
          'application/vnd.liberty-request+xml': {
            source: 'iana',
          },
          'application/vnd.llamagraphics.life-balance.desktop': {
            source: 'iana',
            extensions: ['lbd'],
          },
          'application/vnd.llamagraphics.life-balance.exchange+xml': {
            source: 'iana',
            extensions: ['lbe'],
          },
          'application/vnd.lotus-1-2-3': {
            source: 'iana',
            extensions: ['123'],
          },
          'application/vnd.lotus-approach': {
            source: 'iana',
            extensions: ['apr'],
          },
          'application/vnd.lotus-freelance': {
            source: 'iana',
            extensions: ['pre'],
          },
          'application/vnd.lotus-notes': {
            source: 'iana',
            extensions: ['nsf'],
          },
          'application/vnd.lotus-organizer': {
            source: 'iana',
            extensions: ['org'],
          },
          'application/vnd.lotus-screencam': {
            source: 'iana',
            extensions: ['scm'],
          },
          'application/vnd.lotus-wordpro': {
            source: 'iana',
            extensions: ['lwp'],
          },
          'application/vnd.macports.portpkg': {
            source: 'iana',
            extensions: ['portpkg'],
          },
          'application/vnd.mapbox-vector-tile': {
            source: 'iana',
          },
          'application/vnd.marlin.drm.actiontoken+xml': {
            source: 'iana',
          },
          'application/vnd.marlin.drm.conftoken+xml': {
            source: 'iana',
          },
          'application/vnd.marlin.drm.license+xml': {
            source: 'iana',
          },
          'application/vnd.marlin.drm.mdcf': {
            source: 'iana',
          },
          'application/vnd.mason+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.maxmind.maxmind-db': {
            source: 'iana',
          },
          'application/vnd.mcd': {
            source: 'iana',
            extensions: ['mcd'],
          },
          'application/vnd.medcalcdata': {
            source: 'iana',
            extensions: ['mc1'],
          },
          'application/vnd.mediastation.cdkey': {
            source: 'iana',
            extensions: ['cdkey'],
          },
          'application/vnd.meridian-slingshot': {
            source: 'iana',
          },
          'application/vnd.mfer': {
            source: 'iana',
            extensions: ['mwf'],
          },
          'application/vnd.mfmp': {
            source: 'iana',
            extensions: ['mfm'],
          },
          'application/vnd.micro+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.micrografx.flo': {
            source: 'iana',
            extensions: ['flo'],
          },
          'application/vnd.micrografx.igx': {
            source: 'iana',
            extensions: ['igx'],
          },
          'application/vnd.microsoft.portable-executable': {
            source: 'iana',
          },
          'application/vnd.miele+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.mif': {
            source: 'iana',
            extensions: ['mif'],
          },
          'application/vnd.minisoft-hp3000-save': {
            source: 'iana',
          },
          'application/vnd.mitsubishi.misty-guard.trustweb': {
            source: 'iana',
          },
          'application/vnd.mobius.daf': {
            source: 'iana',
            extensions: ['daf'],
          },
          'application/vnd.mobius.dis': {
            source: 'iana',
            extensions: ['dis'],
          },
          'application/vnd.mobius.mbk': {
            source: 'iana',
            extensions: ['mbk'],
          },
          'application/vnd.mobius.mqy': {
            source: 'iana',
            extensions: ['mqy'],
          },
          'application/vnd.mobius.msl': {
            source: 'iana',
            extensions: ['msl'],
          },
          'application/vnd.mobius.plc': {
            source: 'iana',
            extensions: ['plc'],
          },
          'application/vnd.mobius.txf': {
            source: 'iana',
            extensions: ['txf'],
          },
          'application/vnd.mophun.application': {
            source: 'iana',
            extensions: ['mpn'],
          },
          'application/vnd.mophun.certificate': {
            source: 'iana',
            extensions: ['mpc'],
          },
          'application/vnd.motorola.flexsuite': {
            source: 'iana',
          },
          'application/vnd.motorola.flexsuite.adsi': {
            source: 'iana',
          },
          'application/vnd.motorola.flexsuite.fis': {
            source: 'iana',
          },
          'application/vnd.motorola.flexsuite.gotap': {
            source: 'iana',
          },
          'application/vnd.motorola.flexsuite.kmr': {
            source: 'iana',
          },
          'application/vnd.motorola.flexsuite.ttc': {
            source: 'iana',
          },
          'application/vnd.motorola.flexsuite.wem': {
            source: 'iana',
          },
          'application/vnd.motorola.iprm': {
            source: 'iana',
          },
          'application/vnd.mozilla.xul+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['xul'],
          },
          'application/vnd.ms-3mfdocument': {
            source: 'iana',
          },
          'application/vnd.ms-artgalry': {
            source: 'iana',
            extensions: ['cil'],
          },
          'application/vnd.ms-asf': {
            source: 'iana',
          },
          'application/vnd.ms-cab-compressed': {
            source: 'iana',
            extensions: ['cab'],
          },
          'application/vnd.ms-color.iccprofile': {
            source: 'apache',
          },
          'application/vnd.ms-excel': {
            source: 'iana',
            compressible: false,
            extensions: ['xls', 'xlm', 'xla', 'xlc', 'xlt', 'xlw'],
          },
          'application/vnd.ms-excel.addin.macroenabled.12': {
            source: 'iana',
            extensions: ['xlam'],
          },
          'application/vnd.ms-excel.sheet.binary.macroenabled.12': {
            source: 'iana',
            extensions: ['xlsb'],
          },
          'application/vnd.ms-excel.sheet.macroenabled.12': {
            source: 'iana',
            extensions: ['xlsm'],
          },
          'application/vnd.ms-excel.template.macroenabled.12': {
            source: 'iana',
            extensions: ['xltm'],
          },
          'application/vnd.ms-fontobject': {
            source: 'iana',
            compressible: true,
            extensions: ['eot'],
          },
          'application/vnd.ms-htmlhelp': {
            source: 'iana',
            extensions: ['chm'],
          },
          'application/vnd.ms-ims': {
            source: 'iana',
            extensions: ['ims'],
          },
          'application/vnd.ms-lrm': {
            source: 'iana',
            extensions: ['lrm'],
          },
          'application/vnd.ms-office.activex+xml': {
            source: 'iana',
          },
          'application/vnd.ms-officetheme': {
            source: 'iana',
            extensions: ['thmx'],
          },
          'application/vnd.ms-opentype': {
            source: 'apache',
            compressible: true,
          },
          'application/vnd.ms-package.obfuscated-opentype': {
            source: 'apache',
          },
          'application/vnd.ms-pki.seccat': {
            source: 'apache',
            extensions: ['cat'],
          },
          'application/vnd.ms-pki.stl': {
            source: 'apache',
            extensions: ['stl'],
          },
          'application/vnd.ms-playready.initiator+xml': {
            source: 'iana',
          },
          'application/vnd.ms-powerpoint': {
            source: 'iana',
            compressible: false,
            extensions: ['ppt', 'pps', 'pot'],
          },
          'application/vnd.ms-powerpoint.addin.macroenabled.12': {
            source: 'iana',
            extensions: ['ppam'],
          },
          'application/vnd.ms-powerpoint.presentation.macroenabled.12': {
            source: 'iana',
            extensions: ['pptm'],
          },
          'application/vnd.ms-powerpoint.slide.macroenabled.12': {
            source: 'iana',
            extensions: ['sldm'],
          },
          'application/vnd.ms-powerpoint.slideshow.macroenabled.12': {
            source: 'iana',
            extensions: ['ppsm'],
          },
          'application/vnd.ms-powerpoint.template.macroenabled.12': {
            source: 'iana',
            extensions: ['potm'],
          },
          'application/vnd.ms-printdevicecapabilities+xml': {
            source: 'iana',
          },
          'application/vnd.ms-printing.printticket+xml': {
            source: 'apache',
          },
          'application/vnd.ms-project': {
            source: 'iana',
            extensions: ['mpp', 'mpt'],
          },
          'application/vnd.ms-tnef': {
            source: 'iana',
          },
          'application/vnd.ms-windows.devicepairing': {
            source: 'iana',
          },
          'application/vnd.ms-windows.nwprinting.oob': {
            source: 'iana',
          },
          'application/vnd.ms-windows.printerpairing': {
            source: 'iana',
          },
          'application/vnd.ms-windows.wsd.oob': {
            source: 'iana',
          },
          'application/vnd.ms-wmdrm.lic-chlg-req': {
            source: 'iana',
          },
          'application/vnd.ms-wmdrm.lic-resp': {
            source: 'iana',
          },
          'application/vnd.ms-wmdrm.meter-chlg-req': {
            source: 'iana',
          },
          'application/vnd.ms-wmdrm.meter-resp': {
            source: 'iana',
          },
          'application/vnd.ms-word.document.macroenabled.12': {
            source: 'iana',
            extensions: ['docm'],
          },
          'application/vnd.ms-word.template.macroenabled.12': {
            source: 'iana',
            extensions: ['dotm'],
          },
          'application/vnd.ms-works': {
            source: 'iana',
            extensions: ['wps', 'wks', 'wcm', 'wdb'],
          },
          'application/vnd.ms-wpl': {
            source: 'iana',
            extensions: ['wpl'],
          },
          'application/vnd.ms-xpsdocument': {
            source: 'iana',
            compressible: false,
            extensions: ['xps'],
          },
          'application/vnd.msa-disk-image': {
            source: 'iana',
          },
          'application/vnd.mseq': {
            source: 'iana',
            extensions: ['mseq'],
          },
          'application/vnd.msign': {
            source: 'iana',
          },
          'application/vnd.multiad.creator': {
            source: 'iana',
          },
          'application/vnd.multiad.creator.cif': {
            source: 'iana',
          },
          'application/vnd.music-niff': {
            source: 'iana',
          },
          'application/vnd.musician': {
            source: 'iana',
            extensions: ['mus'],
          },
          'application/vnd.muvee.style': {
            source: 'iana',
            extensions: ['msty'],
          },
          'application/vnd.mynfc': {
            source: 'iana',
            extensions: ['taglet'],
          },
          'application/vnd.ncd.control': {
            source: 'iana',
          },
          'application/vnd.ncd.reference': {
            source: 'iana',
          },
          'application/vnd.nervana': {
            source: 'iana',
          },
          'application/vnd.netfpx': {
            source: 'iana',
          },
          'application/vnd.neurolanguage.nlu': {
            source: 'iana',
            extensions: ['nlu'],
          },
          'application/vnd.nintendo.nitro.rom': {
            source: 'iana',
          },
          'application/vnd.nintendo.snes.rom': {
            source: 'iana',
          },
          'application/vnd.nitf': {
            source: 'iana',
            extensions: ['ntf', 'nitf'],
          },
          'application/vnd.noblenet-directory': {
            source: 'iana',
            extensions: ['nnd'],
          },
          'application/vnd.noblenet-sealer': {
            source: 'iana',
            extensions: ['nns'],
          },
          'application/vnd.noblenet-web': {
            source: 'iana',
            extensions: ['nnw'],
          },
          'application/vnd.nokia.catalogs': {
            source: 'iana',
          },
          'application/vnd.nokia.conml+wbxml': {
            source: 'iana',
          },
          'application/vnd.nokia.conml+xml': {
            source: 'iana',
          },
          'application/vnd.nokia.iptv.config+xml': {
            source: 'iana',
          },
          'application/vnd.nokia.isds-radio-presets': {
            source: 'iana',
          },
          'application/vnd.nokia.landmark+wbxml': {
            source: 'iana',
          },
          'application/vnd.nokia.landmark+xml': {
            source: 'iana',
          },
          'application/vnd.nokia.landmarkcollection+xml': {
            source: 'iana',
          },
          'application/vnd.nokia.n-gage.ac+xml': {
            source: 'iana',
          },
          'application/vnd.nokia.n-gage.data': {
            source: 'iana',
            extensions: ['ngdat'],
          },
          'application/vnd.nokia.n-gage.symbian.install': {
            source: 'iana',
            extensions: ['n-gage'],
          },
          'application/vnd.nokia.ncd': {
            source: 'iana',
          },
          'application/vnd.nokia.pcd+wbxml': {
            source: 'iana',
          },
          'application/vnd.nokia.pcd+xml': {
            source: 'iana',
          },
          'application/vnd.nokia.radio-preset': {
            source: 'iana',
            extensions: ['rpst'],
          },
          'application/vnd.nokia.radio-presets': {
            source: 'iana',
            extensions: ['rpss'],
          },
          'application/vnd.novadigm.edm': {
            source: 'iana',
            extensions: ['edm'],
          },
          'application/vnd.novadigm.edx': {
            source: 'iana',
            extensions: ['edx'],
          },
          'application/vnd.novadigm.ext': {
            source: 'iana',
            extensions: ['ext'],
          },
          'application/vnd.ntt-local.content-share': {
            source: 'iana',
          },
          'application/vnd.ntt-local.file-transfer': {
            source: 'iana',
          },
          'application/vnd.ntt-local.ogw_remote-access': {
            source: 'iana',
          },
          'application/vnd.ntt-local.sip-ta_remote': {
            source: 'iana',
          },
          'application/vnd.ntt-local.sip-ta_tcp_stream': {
            source: 'iana',
          },
          'application/vnd.oasis.opendocument.chart': {
            source: 'iana',
            extensions: ['odc'],
          },
          'application/vnd.oasis.opendocument.chart-template': {
            source: 'iana',
            extensions: ['otc'],
          },
          'application/vnd.oasis.opendocument.database': {
            source: 'iana',
            extensions: ['odb'],
          },
          'application/vnd.oasis.opendocument.formula': {
            source: 'iana',
            extensions: ['odf'],
          },
          'application/vnd.oasis.opendocument.formula-template': {
            source: 'iana',
            extensions: ['odft'],
          },
          'application/vnd.oasis.opendocument.graphics': {
            source: 'iana',
            compressible: false,
            extensions: ['odg'],
          },
          'application/vnd.oasis.opendocument.graphics-template': {
            source: 'iana',
            extensions: ['otg'],
          },
          'application/vnd.oasis.opendocument.image': {
            source: 'iana',
            extensions: ['odi'],
          },
          'application/vnd.oasis.opendocument.image-template': {
            source: 'iana',
            extensions: ['oti'],
          },
          'application/vnd.oasis.opendocument.presentation': {
            source: 'iana',
            compressible: false,
            extensions: ['odp'],
          },
          'application/vnd.oasis.opendocument.presentation-template': {
            source: 'iana',
            extensions: ['otp'],
          },
          'application/vnd.oasis.opendocument.spreadsheet': {
            source: 'iana',
            compressible: false,
            extensions: ['ods'],
          },
          'application/vnd.oasis.opendocument.spreadsheet-template': {
            source: 'iana',
            extensions: ['ots'],
          },
          'application/vnd.oasis.opendocument.text': {
            source: 'iana',
            compressible: false,
            extensions: ['odt'],
          },
          'application/vnd.oasis.opendocument.text-master': {
            source: 'iana',
            extensions: ['odm'],
          },
          'application/vnd.oasis.opendocument.text-template': {
            source: 'iana',
            extensions: ['ott'],
          },
          'application/vnd.oasis.opendocument.text-web': {
            source: 'iana',
            extensions: ['oth'],
          },
          'application/vnd.obn': {
            source: 'iana',
          },
          'application/vnd.oftn.l10n+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.oipf.contentaccessdownload+xml': {
            source: 'iana',
          },
          'application/vnd.oipf.contentaccessstreaming+xml': {
            source: 'iana',
          },
          'application/vnd.oipf.cspg-hexbinary': {
            source: 'iana',
          },
          'application/vnd.oipf.dae.svg+xml': {
            source: 'iana',
          },
          'application/vnd.oipf.dae.xhtml+xml': {
            source: 'iana',
          },
          'application/vnd.oipf.mippvcontrolmessage+xml': {
            source: 'iana',
          },
          'application/vnd.oipf.pae.gem': {
            source: 'iana',
          },
          'application/vnd.oipf.spdiscovery+xml': {
            source: 'iana',
          },
          'application/vnd.oipf.spdlist+xml': {
            source: 'iana',
          },
          'application/vnd.oipf.ueprofile+xml': {
            source: 'iana',
          },
          'application/vnd.oipf.userprofile+xml': {
            source: 'iana',
          },
          'application/vnd.olpc-sugar': {
            source: 'iana',
            extensions: ['xo'],
          },
          'application/vnd.oma-scws-config': {
            source: 'iana',
          },
          'application/vnd.oma-scws-http-request': {
            source: 'iana',
          },
          'application/vnd.oma-scws-http-response': {
            source: 'iana',
          },
          'application/vnd.oma.bcast.associated-procedure-parameter+xml': {
            source: 'iana',
          },
          'application/vnd.oma.bcast.drm-trigger+xml': {
            source: 'iana',
          },
          'application/vnd.oma.bcast.imd+xml': {
            source: 'iana',
          },
          'application/vnd.oma.bcast.ltkm': {
            source: 'iana',
          },
          'application/vnd.oma.bcast.notification+xml': {
            source: 'iana',
          },
          'application/vnd.oma.bcast.provisioningtrigger': {
            source: 'iana',
          },
          'application/vnd.oma.bcast.sgboot': {
            source: 'iana',
          },
          'application/vnd.oma.bcast.sgdd+xml': {
            source: 'iana',
          },
          'application/vnd.oma.bcast.sgdu': {
            source: 'iana',
          },
          'application/vnd.oma.bcast.simple-symbol-container': {
            source: 'iana',
          },
          'application/vnd.oma.bcast.smartcard-trigger+xml': {
            source: 'iana',
          },
          'application/vnd.oma.bcast.sprov+xml': {
            source: 'iana',
          },
          'application/vnd.oma.bcast.stkm': {
            source: 'iana',
          },
          'application/vnd.oma.cab-address-book+xml': {
            source: 'iana',
          },
          'application/vnd.oma.cab-feature-handler+xml': {
            source: 'iana',
          },
          'application/vnd.oma.cab-pcc+xml': {
            source: 'iana',
          },
          'application/vnd.oma.cab-subs-invite+xml': {
            source: 'iana',
          },
          'application/vnd.oma.cab-user-prefs+xml': {
            source: 'iana',
          },
          'application/vnd.oma.dcd': {
            source: 'iana',
          },
          'application/vnd.oma.dcdc': {
            source: 'iana',
          },
          'application/vnd.oma.dd2+xml': {
            source: 'iana',
            extensions: ['dd2'],
          },
          'application/vnd.oma.drm.risd+xml': {
            source: 'iana',
          },
          'application/vnd.oma.group-usage-list+xml': {
            source: 'iana',
          },
          'application/vnd.oma.pal+xml': {
            source: 'iana',
          },
          'application/vnd.oma.poc.detailed-progress-report+xml': {
            source: 'iana',
          },
          'application/vnd.oma.poc.final-report+xml': {
            source: 'iana',
          },
          'application/vnd.oma.poc.groups+xml': {
            source: 'iana',
          },
          'application/vnd.oma.poc.invocation-descriptor+xml': {
            source: 'iana',
          },
          'application/vnd.oma.poc.optimized-progress-report+xml': {
            source: 'iana',
          },
          'application/vnd.oma.push': {
            source: 'iana',
          },
          'application/vnd.oma.scidm.messages+xml': {
            source: 'iana',
          },
          'application/vnd.oma.xcap-directory+xml': {
            source: 'iana',
          },
          'application/vnd.omads-email+xml': {
            source: 'iana',
          },
          'application/vnd.omads-file+xml': {
            source: 'iana',
          },
          'application/vnd.omads-folder+xml': {
            source: 'iana',
          },
          'application/vnd.omaloc-supl-init': {
            source: 'iana',
          },
          'application/vnd.openblox.game+xml': {
            source: 'iana',
          },
          'application/vnd.openblox.game-binary': {
            source: 'iana',
          },
          'application/vnd.openeye.oeb': {
            source: 'iana',
          },
          'application/vnd.openofficeorg.extension': {
            source: 'apache',
            extensions: ['oxt'],
          },
          'application/vnd.openxmlformats-officedocument.custom-properties+xml': {
            source: 'iana',
          },
          'application/vnd.openxmlformats-officedocument.customxmlproperties+xml': {
            source: 'iana',
          },
          'application/vnd.openxmlformats-officedocument.drawing+xml': {
            source: 'iana',
          },
          'application/vnd.openxmlformats-officedocument.drawingml.chart+xml': {
            source: 'iana',
          },
          'application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml': {
            source: 'iana',
          },
          'application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml': {
            source: 'iana',
          },
          'application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml': {
            source: 'iana',
          },
          'application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml': {
            source: 'iana',
          },
          'application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml': {
            source: 'iana',
          },
          'application/vnd.openxmlformats-officedocument.extended-properties+xml': {
            source: 'iana',
          },
          'application/vnd.openxmlformats-officedocument.presentationml-template': {
            source: 'iana',
          },
          'application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml': {
            source: 'iana',
          },
          'application/vnd.openxmlformats-officedocument.presentationml.comments+xml': {
            source: 'iana',
          },
          'application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml': {
            source: 'iana',
          },
          'application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml': {
            source: 'iana',
          },
          'application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml': {
            source: 'iana',
          },
          'application/vnd.openxmlformats-officedocument.presentationml.presentation': {
            source: 'iana',
            compressible: false,
            extensions: ['pptx'],
          },
          'application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml': {
            source: 'iana',
          },
          'application/vnd.openxmlformats-officedocument.presentationml.presprops+xml': {
            source: 'iana',
          },
          'application/vnd.openxmlformats-officedocument.presentationml.slide': {
            source: 'iana',
            extensions: ['sldx'],
          },
          'application/vnd.openxmlformats-officedocument.presentationml.slide+xml': {
            source: 'iana',
          },
          'application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml': {
            source: 'iana',
          },
          'application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml': {
            source: 'iana',
          },
          'application/vnd.openxmlformats-officedocument.presentationml.slideshow': {
            source: 'iana',
            extensions: ['ppsx'],
          },
          'application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml': {
            source: 'iana',
          },
          'application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml': {
            source: 'iana',
          },
          'application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml': {
            source: 'iana',
          },
          'application/vnd.openxmlformats-officedocument.presentationml.tags+xml': {
            source: 'iana',
          },
          'application/vnd.openxmlformats-officedocument.presentationml.template': {
            source: 'apache',
            extensions: ['potx'],
          },
          'application/vnd.openxmlformats-officedocument.presentationml.template.main+xml': {
            source: 'iana',
          },
          'application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml': {
            source: 'iana',
          },
          'application/vnd.openxmlformats-officedocument.spreadsheetml-template': {
            source: 'iana',
          },
          'application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml': {
            source: 'iana',
          },
          'application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml': {
            source: 'iana',
          },
          'application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml': {
            source: 'iana',
          },
          'application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml': {
            source: 'iana',
          },
          'application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml': {
            source: 'iana',
          },
          'application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml': {
            source: 'iana',
          },
          'application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml': {
            source: 'iana',
          },
          'application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml': {
            source: 'iana',
          },
          'application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml': {
            source: 'iana',
          },
          'application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml': {
            source: 'iana',
          },
          'application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml': {
            source: 'iana',
          },
          'application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml': {
            source: 'iana',
          },
          'application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml': {
            source: 'iana',
          },
          'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': {
            source: 'iana',
            compressible: false,
            extensions: ['xlsx'],
          },
          'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml': {
            source: 'iana',
          },
          'application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml': {
            source: 'iana',
          },
          'application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml': {
            source: 'iana',
          },
          'application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml': {
            source: 'iana',
          },
          'application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml': {
            source: 'iana',
          },
          'application/vnd.openxmlformats-officedocument.spreadsheetml.template': {
            source: 'apache',
            extensions: ['xltx'],
          },
          'application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml': {
            source: 'iana',
          },
          'application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml': {
            source: 'iana',
          },
          'application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml': {
            source: 'iana',
          },
          'application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml': {
            source: 'iana',
          },
          'application/vnd.openxmlformats-officedocument.theme+xml': {
            source: 'iana',
          },
          'application/vnd.openxmlformats-officedocument.themeoverride+xml': {
            source: 'iana',
          },
          'application/vnd.openxmlformats-officedocument.vmldrawing': {
            source: 'iana',
          },
          'application/vnd.openxmlformats-officedocument.wordprocessingml-template': {
            source: 'iana',
          },
          'application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml': {
            source: 'iana',
          },
          'application/vnd.openxmlformats-officedocument.wordprocessingml.document': {
            source: 'iana',
            compressible: false,
            extensions: ['docx'],
          },
          'application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml': {
            source: 'iana',
          },
          'application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml': {
            source: 'iana',
          },
          'application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml': {
            source: 'iana',
          },
          'application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml': {
            source: 'iana',
          },
          'application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml': {
            source: 'iana',
          },
          'application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml': {
            source: 'iana',
          },
          'application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml': {
            source: 'iana',
          },
          'application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml': {
            source: 'iana',
          },
          'application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml': {
            source: 'iana',
          },
          'application/vnd.openxmlformats-officedocument.wordprocessingml.template': {
            source: 'apache',
            extensions: ['dotx'],
          },
          'application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml': {
            source: 'iana',
          },
          'application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml': {
            source: 'iana',
          },
          'application/vnd.openxmlformats-package.core-properties+xml': {
            source: 'iana',
          },
          'application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml': {
            source: 'iana',
          },
          'application/vnd.openxmlformats-package.relationships+xml': {
            source: 'iana',
          },
          'application/vnd.oracle.resource+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.orange.indata': {
            source: 'iana',
          },
          'application/vnd.osa.netdeploy': {
            source: 'iana',
          },
          'application/vnd.osgeo.mapguide.package': {
            source: 'iana',
            extensions: ['mgp'],
          },
          'application/vnd.osgi.bundle': {
            source: 'iana',
          },
          'application/vnd.osgi.dp': {
            source: 'iana',
            extensions: ['dp'],
          },
          'application/vnd.osgi.subsystem': {
            source: 'iana',
            extensions: ['esa'],
          },
          'application/vnd.otps.ct-kip+xml': {
            source: 'iana',
          },
          'application/vnd.oxli.countgraph': {
            source: 'iana',
          },
          'application/vnd.pagerduty+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.palm': {
            source: 'iana',
            extensions: ['pdb', 'pqa', 'oprc'],
          },
          'application/vnd.panoply': {
            source: 'iana',
          },
          'application/vnd.paos+xml': {
            source: 'iana',
          },
          'application/vnd.paos.xml': {
            source: 'apache',
          },
          'application/vnd.pawaafile': {
            source: 'iana',
            extensions: ['paw'],
          },
          'application/vnd.pcos': {
            source: 'iana',
          },
          'application/vnd.pg.format': {
            source: 'iana',
            extensions: ['str'],
          },
          'application/vnd.pg.osasli': {
            source: 'iana',
            extensions: ['ei6'],
          },
          'application/vnd.piaccess.application-licence': {
            source: 'iana',
          },
          'application/vnd.picsel': {
            source: 'iana',
            extensions: ['efif'],
          },
          'application/vnd.pmi.widget': {
            source: 'iana',
            extensions: ['wg'],
          },
          'application/vnd.poc.group-advertisement+xml': {
            source: 'iana',
          },
          'application/vnd.pocketlearn': {
            source: 'iana',
            extensions: ['plf'],
          },
          'application/vnd.powerbuilder6': {
            source: 'iana',
            extensions: ['pbd'],
          },
          'application/vnd.powerbuilder6-s': {
            source: 'iana',
          },
          'application/vnd.powerbuilder7': {
            source: 'iana',
          },
          'application/vnd.powerbuilder7-s': {
            source: 'iana',
          },
          'application/vnd.powerbuilder75': {
            source: 'iana',
          },
          'application/vnd.powerbuilder75-s': {
            source: 'iana',
          },
          'application/vnd.preminet': {
            source: 'iana',
          },
          'application/vnd.previewsystems.box': {
            source: 'iana',
            extensions: ['box'],
          },
          'application/vnd.proteus.magazine': {
            source: 'iana',
            extensions: ['mgz'],
          },
          'application/vnd.publishare-delta-tree': {
            source: 'iana',
            extensions: ['qps'],
          },
          'application/vnd.pvi.ptid1': {
            source: 'iana',
            extensions: ['ptid'],
          },
          'application/vnd.pwg-multiplexed': {
            source: 'iana',
          },
          'application/vnd.pwg-xhtml-print+xml': {
            source: 'iana',
          },
          'application/vnd.qualcomm.brew-app-res': {
            source: 'iana',
          },
          'application/vnd.quark.quarkxpress': {
            source: 'iana',
            extensions: ['qxd', 'qxt', 'qwd', 'qwt', 'qxl', 'qxb'],
          },
          'application/vnd.quobject-quoxdocument': {
            source: 'iana',
          },
          'application/vnd.radisys.moml+xml': {
            source: 'iana',
          },
          'application/vnd.radisys.msml+xml': {
            source: 'iana',
          },
          'application/vnd.radisys.msml-audit+xml': {
            source: 'iana',
          },
          'application/vnd.radisys.msml-audit-conf+xml': {
            source: 'iana',
          },
          'application/vnd.radisys.msml-audit-conn+xml': {
            source: 'iana',
          },
          'application/vnd.radisys.msml-audit-dialog+xml': {
            source: 'iana',
          },
          'application/vnd.radisys.msml-audit-stream+xml': {
            source: 'iana',
          },
          'application/vnd.radisys.msml-conf+xml': {
            source: 'iana',
          },
          'application/vnd.radisys.msml-dialog+xml': {
            source: 'iana',
          },
          'application/vnd.radisys.msml-dialog-base+xml': {
            source: 'iana',
          },
          'application/vnd.radisys.msml-dialog-fax-detect+xml': {
            source: 'iana',
          },
          'application/vnd.radisys.msml-dialog-fax-sendrecv+xml': {
            source: 'iana',
          },
          'application/vnd.radisys.msml-dialog-group+xml': {
            source: 'iana',
          },
          'application/vnd.radisys.msml-dialog-speech+xml': {
            source: 'iana',
          },
          'application/vnd.radisys.msml-dialog-transform+xml': {
            source: 'iana',
          },
          'application/vnd.rainstor.data': {
            source: 'iana',
          },
          'application/vnd.rapid': {
            source: 'iana',
          },
          'application/vnd.realvnc.bed': {
            source: 'iana',
            extensions: ['bed'],
          },
          'application/vnd.recordare.musicxml': {
            source: 'iana',
            extensions: ['mxl'],
          },
          'application/vnd.recordare.musicxml+xml': {
            source: 'iana',
            extensions: ['musicxml'],
          },
          'application/vnd.renlearn.rlprint': {
            source: 'iana',
          },
          'application/vnd.rig.cryptonote': {
            source: 'iana',
            extensions: ['cryptonote'],
          },
          'application/vnd.rim.cod': {
            source: 'apache',
            extensions: ['cod'],
          },
          'application/vnd.rn-realmedia': {
            source: 'apache',
            extensions: ['rm'],
          },
          'application/vnd.rn-realmedia-vbr': {
            source: 'apache',
            extensions: ['rmvb'],
          },
          'application/vnd.route66.link66+xml': {
            source: 'iana',
            extensions: ['link66'],
          },
          'application/vnd.rs-274x': {
            source: 'iana',
          },
          'application/vnd.ruckus.download': {
            source: 'iana',
          },
          'application/vnd.s3sms': {
            source: 'iana',
          },
          'application/vnd.sailingtracker.track': {
            source: 'iana',
            extensions: ['st'],
          },
          'application/vnd.sbm.cid': {
            source: 'iana',
          },
          'application/vnd.sbm.mid2': {
            source: 'iana',
          },
          'application/vnd.scribus': {
            source: 'iana',
          },
          'application/vnd.sealed.3df': {
            source: 'iana',
          },
          'application/vnd.sealed.csf': {
            source: 'iana',
          },
          'application/vnd.sealed.doc': {
            source: 'iana',
          },
          'application/vnd.sealed.eml': {
            source: 'iana',
          },
          'application/vnd.sealed.mht': {
            source: 'iana',
          },
          'application/vnd.sealed.net': {
            source: 'iana',
          },
          'application/vnd.sealed.ppt': {
            source: 'iana',
          },
          'application/vnd.sealed.tiff': {
            source: 'iana',
          },
          'application/vnd.sealed.xls': {
            source: 'iana',
          },
          'application/vnd.sealedmedia.softseal.html': {
            source: 'iana',
          },
          'application/vnd.sealedmedia.softseal.pdf': {
            source: 'iana',
          },
          'application/vnd.seemail': {
            source: 'iana',
            extensions: ['see'],
          },
          'application/vnd.sema': {
            source: 'iana',
            extensions: ['sema'],
          },
          'application/vnd.semd': {
            source: 'iana',
            extensions: ['semd'],
          },
          'application/vnd.semf': {
            source: 'iana',
            extensions: ['semf'],
          },
          'application/vnd.shana.informed.formdata': {
            source: 'iana',
            extensions: ['ifm'],
          },
          'application/vnd.shana.informed.formtemplate': {
            source: 'iana',
            extensions: ['itp'],
          },
          'application/vnd.shana.informed.interchange': {
            source: 'iana',
            extensions: ['iif'],
          },
          'application/vnd.shana.informed.package': {
            source: 'iana',
            extensions: ['ipk'],
          },
          'application/vnd.simtech-mindmapper': {
            source: 'iana',
            extensions: ['twd', 'twds'],
          },
          'application/vnd.siren+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.smaf': {
            source: 'iana',
            extensions: ['mmf'],
          },
          'application/vnd.smart.notebook': {
            source: 'iana',
          },
          'application/vnd.smart.teacher': {
            source: 'iana',
            extensions: ['teacher'],
          },
          'application/vnd.software602.filler.form+xml': {
            source: 'iana',
          },
          'application/vnd.software602.filler.form-xml-zip': {
            source: 'iana',
          },
          'application/vnd.solent.sdkm+xml': {
            source: 'iana',
            extensions: ['sdkm', 'sdkd'],
          },
          'application/vnd.spotfire.dxp': {
            source: 'iana',
            extensions: ['dxp'],
          },
          'application/vnd.spotfire.sfs': {
            source: 'iana',
            extensions: ['sfs'],
          },
          'application/vnd.sss-cod': {
            source: 'iana',
          },
          'application/vnd.sss-dtf': {
            source: 'iana',
          },
          'application/vnd.sss-ntf': {
            source: 'iana',
          },
          'application/vnd.stardivision.calc': {
            source: 'apache',
            extensions: ['sdc'],
          },
          'application/vnd.stardivision.draw': {
            source: 'apache',
            extensions: ['sda'],
          },
          'application/vnd.stardivision.impress': {
            source: 'apache',
            extensions: ['sdd'],
          },
          'application/vnd.stardivision.math': {
            source: 'apache',
            extensions: ['smf'],
          },
          'application/vnd.stardivision.writer': {
            source: 'apache',
            extensions: ['sdw', 'vor'],
          },
          'application/vnd.stardivision.writer-global': {
            source: 'apache',
            extensions: ['sgl'],
          },
          'application/vnd.stepmania.package': {
            source: 'iana',
            extensions: ['smzip'],
          },
          'application/vnd.stepmania.stepchart': {
            source: 'iana',
            extensions: ['sm'],
          },
          'application/vnd.street-stream': {
            source: 'iana',
          },
          'application/vnd.sun.wadl+xml': {
            source: 'iana',
          },
          'application/vnd.sun.xml.calc': {
            source: 'apache',
            extensions: ['sxc'],
          },
          'application/vnd.sun.xml.calc.template': {
            source: 'apache',
            extensions: ['stc'],
          },
          'application/vnd.sun.xml.draw': {
            source: 'apache',
            extensions: ['sxd'],
          },
          'application/vnd.sun.xml.draw.template': {
            source: 'apache',
            extensions: ['std'],
          },
          'application/vnd.sun.xml.impress': {
            source: 'apache',
            extensions: ['sxi'],
          },
          'application/vnd.sun.xml.impress.template': {
            source: 'apache',
            extensions: ['sti'],
          },
          'application/vnd.sun.xml.math': {
            source: 'apache',
            extensions: ['sxm'],
          },
          'application/vnd.sun.xml.writer': {
            source: 'apache',
            extensions: ['sxw'],
          },
          'application/vnd.sun.xml.writer.global': {
            source: 'apache',
            extensions: ['sxg'],
          },
          'application/vnd.sun.xml.writer.template': {
            source: 'apache',
            extensions: ['stw'],
          },
          'application/vnd.sus-calendar': {
            source: 'iana',
            extensions: ['sus', 'susp'],
          },
          'application/vnd.svd': {
            source: 'iana',
            extensions: ['svd'],
          },
          'application/vnd.swiftview-ics': {
            source: 'iana',
          },
          'application/vnd.symbian.install': {
            source: 'apache',
            extensions: ['sis', 'sisx'],
          },
          'application/vnd.syncml+xml': {
            source: 'iana',
            extensions: ['xsm'],
          },
          'application/vnd.syncml.dm+wbxml': {
            source: 'iana',
            extensions: ['bdm'],
          },
          'application/vnd.syncml.dm+xml': {
            source: 'iana',
            extensions: ['xdm'],
          },
          'application/vnd.syncml.dm.notification': {
            source: 'iana',
          },
          'application/vnd.syncml.dmddf+wbxml': {
            source: 'iana',
          },
          'application/vnd.syncml.dmddf+xml': {
            source: 'iana',
          },
          'application/vnd.syncml.dmtnds+wbxml': {
            source: 'iana',
          },
          'application/vnd.syncml.dmtnds+xml': {
            source: 'iana',
          },
          'application/vnd.syncml.ds.notification': {
            source: 'iana',
          },
          'application/vnd.tao.intent-module-archive': {
            source: 'iana',
            extensions: ['tao'],
          },
          'application/vnd.tcpdump.pcap': {
            source: 'iana',
            extensions: ['pcap', 'cap', 'dmp'],
          },
          'application/vnd.tmd.mediaflex.api+xml': {
            source: 'iana',
          },
          'application/vnd.tml': {
            source: 'iana',
          },
          'application/vnd.tmobile-livetv': {
            source: 'iana',
            extensions: ['tmo'],
          },
          'application/vnd.trid.tpt': {
            source: 'iana',
            extensions: ['tpt'],
          },
          'application/vnd.triscape.mxs': {
            source: 'iana',
            extensions: ['mxs'],
          },
          'application/vnd.trueapp': {
            source: 'iana',
            extensions: ['tra'],
          },
          'application/vnd.truedoc': {
            source: 'iana',
          },
          'application/vnd.ubisoft.webplayer': {
            source: 'iana',
          },
          'application/vnd.ufdl': {
            source: 'iana',
            extensions: ['ufd', 'ufdl'],
          },
          'application/vnd.uiq.theme': {
            source: 'iana',
            extensions: ['utz'],
          },
          'application/vnd.umajin': {
            source: 'iana',
            extensions: ['umj'],
          },
          'application/vnd.unity': {
            source: 'iana',
            extensions: ['unityweb'],
          },
          'application/vnd.uoml+xml': {
            source: 'iana',
            extensions: ['uoml'],
          },
          'application/vnd.uplanet.alert': {
            source: 'iana',
          },
          'application/vnd.uplanet.alert-wbxml': {
            source: 'iana',
          },
          'application/vnd.uplanet.bearer-choice': {
            source: 'iana',
          },
          'application/vnd.uplanet.bearer-choice-wbxml': {
            source: 'iana',
          },
          'application/vnd.uplanet.cacheop': {
            source: 'iana',
          },
          'application/vnd.uplanet.cacheop-wbxml': {
            source: 'iana',
          },
          'application/vnd.uplanet.channel': {
            source: 'iana',
          },
          'application/vnd.uplanet.channel-wbxml': {
            source: 'iana',
          },
          'application/vnd.uplanet.list': {
            source: 'iana',
          },
          'application/vnd.uplanet.list-wbxml': {
            source: 'iana',
          },
          'application/vnd.uplanet.listcmd': {
            source: 'iana',
          },
          'application/vnd.uplanet.listcmd-wbxml': {
            source: 'iana',
          },
          'application/vnd.uplanet.signal': {
            source: 'iana',
          },
          'application/vnd.uri-map': {
            source: 'iana',
          },
          'application/vnd.valve.source.material': {
            source: 'iana',
          },
          'application/vnd.vcx': {
            source: 'iana',
            extensions: ['vcx'],
          },
          'application/vnd.vd-study': {
            source: 'iana',
          },
          'application/vnd.vectorworks': {
            source: 'iana',
          },
          'application/vnd.verimatrix.vcas': {
            source: 'iana',
          },
          'application/vnd.vidsoft.vidconference': {
            source: 'iana',
          },
          'application/vnd.visio': {
            source: 'iana',
            extensions: ['vsd', 'vst', 'vss', 'vsw'],
          },
          'application/vnd.visionary': {
            source: 'iana',
            extensions: ['vis'],
          },
          'application/vnd.vividence.scriptfile': {
            source: 'iana',
          },
          'application/vnd.vsf': {
            source: 'iana',
            extensions: ['vsf'],
          },
          'application/vnd.wap.sic': {
            source: 'iana',
          },
          'application/vnd.wap.slc': {
            source: 'iana',
          },
          'application/vnd.wap.wbxml': {
            source: 'iana',
            extensions: ['wbxml'],
          },
          'application/vnd.wap.wmlc': {
            source: 'iana',
            extensions: ['wmlc'],
          },
          'application/vnd.wap.wmlscriptc': {
            source: 'iana',
            extensions: ['wmlsc'],
          },
          'application/vnd.webturbo': {
            source: 'iana',
            extensions: ['wtb'],
          },
          'application/vnd.wfa.p2p': {
            source: 'iana',
          },
          'application/vnd.wfa.wsc': {
            source: 'iana',
          },
          'application/vnd.windows.devicepairing': {
            source: 'iana',
          },
          'application/vnd.wmc': {
            source: 'iana',
          },
          'application/vnd.wmf.bootstrap': {
            source: 'iana',
          },
          'application/vnd.wolfram.mathematica': {
            source: 'iana',
          },
          'application/vnd.wolfram.mathematica.package': {
            source: 'iana',
          },
          'application/vnd.wolfram.player': {
            source: 'iana',
            extensions: ['nbp'],
          },
          'application/vnd.wordperfect': {
            source: 'iana',
            extensions: ['wpd'],
          },
          'application/vnd.wqd': {
            source: 'iana',
            extensions: ['wqd'],
          },
          'application/vnd.wrq-hp3000-labelled': {
            source: 'iana',
          },
          'application/vnd.wt.stf': {
            source: 'iana',
            extensions: ['stf'],
          },
          'application/vnd.wv.csp+wbxml': {
            source: 'iana',
          },
          'application/vnd.wv.csp+xml': {
            source: 'iana',
          },
          'application/vnd.wv.ssp+xml': {
            source: 'iana',
          },
          'application/vnd.xacml+json': {
            source: 'iana',
            compressible: true,
          },
          'application/vnd.xara': {
            source: 'iana',
            extensions: ['xar'],
          },
          'application/vnd.xfdl': {
            source: 'iana',
            extensions: ['xfdl'],
          },
          'application/vnd.xfdl.webform': {
            source: 'iana',
          },
          'application/vnd.xmi+xml': {
            source: 'iana',
          },
          'application/vnd.xmpie.cpkg': {
            source: 'iana',
          },
          'application/vnd.xmpie.dpkg': {
            source: 'iana',
          },
          'application/vnd.xmpie.plan': {
            source: 'iana',
          },
          'application/vnd.xmpie.ppkg': {
            source: 'iana',
          },
          'application/vnd.xmpie.xlim': {
            source: 'iana',
          },
          'application/vnd.yamaha.hv-dic': {
            source: 'iana',
            extensions: ['hvd'],
          },
          'application/vnd.yamaha.hv-script': {
            source: 'iana',
            extensions: ['hvs'],
          },
          'application/vnd.yamaha.hv-voice': {
            source: 'iana',
            extensions: ['hvp'],
          },
          'application/vnd.yamaha.openscoreformat': {
            source: 'iana',
            extensions: ['osf'],
          },
          'application/vnd.yamaha.openscoreformat.osfpvg+xml': {
            source: 'iana',
            extensions: ['osfpvg'],
          },
          'application/vnd.yamaha.remote-setup': {
            source: 'iana',
          },
          'application/vnd.yamaha.smaf-audio': {
            source: 'iana',
            extensions: ['saf'],
          },
          'application/vnd.yamaha.smaf-phrase': {
            source: 'iana',
            extensions: ['spf'],
          },
          'application/vnd.yamaha.through-ngn': {
            source: 'iana',
          },
          'application/vnd.yamaha.tunnel-udpencap': {
            source: 'iana',
          },
          'application/vnd.yaoweme': {
            source: 'iana',
          },
          'application/vnd.yellowriver-custom-menu': {
            source: 'iana',
            extensions: ['cmp'],
          },
          'application/vnd.zul': {
            source: 'iana',
            extensions: ['zir', 'zirz'],
          },
          'application/vnd.zzazz.deck+xml': {
            source: 'iana',
            extensions: ['zaz'],
          },
          'application/voicexml+xml': {
            source: 'iana',
            extensions: ['vxml'],
          },
          'application/vq-rtcpxr': {
            source: 'iana',
          },
          'application/watcherinfo+xml': {
            source: 'iana',
          },
          'application/whoispp-query': {
            source: 'iana',
          },
          'application/whoispp-response': {
            source: 'iana',
          },
          'application/widget': {
            source: 'iana',
            extensions: ['wgt'],
          },
          'application/winhlp': {
            source: 'apache',
            extensions: ['hlp'],
          },
          'application/wita': {
            source: 'iana',
          },
          'application/wordperfect5.1': {
            source: 'iana',
          },
          'application/wsdl+xml': {
            source: 'iana',
            extensions: ['wsdl'],
          },
          'application/wspolicy+xml': {
            source: 'iana',
            extensions: ['wspolicy'],
          },
          'application/x-7z-compressed': {
            source: 'apache',
            compressible: false,
            extensions: ['7z'],
          },
          'application/x-abiword': {
            source: 'apache',
            extensions: ['abw'],
          },
          'application/x-ace-compressed': {
            source: 'apache',
            extensions: ['ace'],
          },
          'application/x-amf': {
            source: 'apache',
          },
          'application/x-apple-diskimage': {
            source: 'apache',
            extensions: ['dmg'],
          },
          'application/x-authorware-bin': {
            source: 'apache',
            extensions: ['aab', 'x32', 'u32', 'vox'],
          },
          'application/x-authorware-map': {
            source: 'apache',
            extensions: ['aam'],
          },
          'application/x-authorware-seg': {
            source: 'apache',
            extensions: ['aas'],
          },
          'application/x-bcpio': {
            source: 'apache',
            extensions: ['bcpio'],
          },
          'application/x-bdoc': {
            compressible: false,
            extensions: ['bdoc'],
          },
          'application/x-bittorrent': {
            source: 'apache',
            extensions: ['torrent'],
          },
          'application/x-blorb': {
            source: 'apache',
            extensions: ['blb', 'blorb'],
          },
          'application/x-bzip': {
            source: 'apache',
            compressible: false,
            extensions: ['bz'],
          },
          'application/x-bzip2': {
            source: 'apache',
            compressible: false,
            extensions: ['bz2', 'boz'],
          },
          'application/x-cbr': {
            source: 'apache',
            extensions: ['cbr', 'cba', 'cbt', 'cbz', 'cb7'],
          },
          'application/x-cdlink': {
            source: 'apache',
            extensions: ['vcd'],
          },
          'application/x-cfs-compressed': {
            source: 'apache',
            extensions: ['cfs'],
          },
          'application/x-chat': {
            source: 'apache',
            extensions: ['chat'],
          },
          'application/x-chess-pgn': {
            source: 'apache',
            extensions: ['pgn'],
          },
          'application/x-chrome-extension': {
            extensions: ['crx'],
          },
          'application/x-cocoa': {
            source: 'nginx',
            extensions: ['cco'],
          },
          'application/x-compress': {
            source: 'apache',
          },
          'application/x-conference': {
            source: 'apache',
            extensions: ['nsc'],
          },
          'application/x-cpio': {
            source: 'apache',
            extensions: ['cpio'],
          },
          'application/x-csh': {
            source: 'apache',
            extensions: ['csh'],
          },
          'application/x-deb': {
            compressible: false,
          },
          'application/x-debian-package': {
            source: 'apache',
            extensions: ['deb', 'udeb'],
          },
          'application/x-dgc-compressed': {
            source: 'apache',
            extensions: ['dgc'],
          },
          'application/x-director': {
            source: 'apache',
            extensions: [
              'dir',
              'dcr',
              'dxr',
              'cst',
              'cct',
              'cxt',
              'w3d',
              'fgd',
              'swa',
            ],
          },
          'application/x-doom': {
            source: 'apache',
            extensions: ['wad'],
          },
          'application/x-dtbncx+xml': {
            source: 'apache',
            extensions: ['ncx'],
          },
          'application/x-dtbook+xml': {
            source: 'apache',
            extensions: ['dtb'],
          },
          'application/x-dtbresource+xml': {
            source: 'apache',
            extensions: ['res'],
          },
          'application/x-dvi': {
            source: 'apache',
            compressible: false,
            extensions: ['dvi'],
          },
          'application/x-envoy': {
            source: 'apache',
            extensions: ['evy'],
          },
          'application/x-eva': {
            source: 'apache',
            extensions: ['eva'],
          },
          'application/x-font-bdf': {
            source: 'apache',
            extensions: ['bdf'],
          },
          'application/x-font-dos': {
            source: 'apache',
          },
          'application/x-font-framemaker': {
            source: 'apache',
          },
          'application/x-font-ghostscript': {
            source: 'apache',
            extensions: ['gsf'],
          },
          'application/x-font-libgrx': {
            source: 'apache',
          },
          'application/x-font-linux-psf': {
            source: 'apache',
            extensions: ['psf'],
          },
          'application/x-font-otf': {
            source: 'apache',
            compressible: true,
            extensions: ['otf'],
          },
          'application/x-font-pcf': {
            source: 'apache',
            extensions: ['pcf'],
          },
          'application/x-font-snf': {
            source: 'apache',
            extensions: ['snf'],
          },
          'application/x-font-speedo': {
            source: 'apache',
          },
          'application/x-font-sunos-news': {
            source: 'apache',
          },
          'application/x-font-ttf': {
            source: 'apache',
            compressible: true,
            extensions: ['ttf', 'ttc'],
          },
          'application/x-font-type1': {
            source: 'apache',
            extensions: ['pfa', 'pfb', 'pfm', 'afm'],
          },
          'application/x-font-vfont': {
            source: 'apache',
          },
          'application/x-freearc': {
            source: 'apache',
            extensions: ['arc'],
          },
          'application/x-futuresplash': {
            source: 'apache',
            extensions: ['spl'],
          },
          'application/x-gca-compressed': {
            source: 'apache',
            extensions: ['gca'],
          },
          'application/x-glulx': {
            source: 'apache',
            extensions: ['ulx'],
          },
          'application/x-gnumeric': {
            source: 'apache',
            extensions: ['gnumeric'],
          },
          'application/x-gramps-xml': {
            source: 'apache',
            extensions: ['gramps'],
          },
          'application/x-gtar': {
            source: 'apache',
            extensions: ['gtar'],
          },
          'application/x-gzip': {
            source: 'apache',
          },
          'application/x-hdf': {
            source: 'apache',
            extensions: ['hdf'],
          },
          'application/x-httpd-php': {
            compressible: true,
            extensions: ['php'],
          },
          'application/x-install-instructions': {
            source: 'apache',
            extensions: ['install'],
          },
          'application/x-iso9660-image': {
            source: 'apache',
            extensions: ['iso'],
          },
          'application/x-java-archive-diff': {
            source: 'nginx',
            extensions: ['jardiff'],
          },
          'application/x-java-jnlp-file': {
            source: 'apache',
            compressible: false,
            extensions: ['jnlp'],
          },
          'application/x-javascript': {
            compressible: true,
          },
          'application/x-latex': {
            source: 'apache',
            compressible: false,
            extensions: ['latex'],
          },
          'application/x-lua-bytecode': {
            extensions: ['luac'],
          },
          'application/x-lzh-compressed': {
            source: 'apache',
            extensions: ['lzh', 'lha'],
          },
          'application/x-makeself': {
            source: 'nginx',
            extensions: ['run'],
          },
          'application/x-mie': {
            source: 'apache',
            extensions: ['mie'],
          },
          'application/x-mobipocket-ebook': {
            source: 'apache',
            extensions: ['prc', 'mobi'],
          },
          'application/x-mpegurl': {
            compressible: false,
          },
          'application/x-ms-application': {
            source: 'apache',
            extensions: ['application'],
          },
          'application/x-ms-shortcut': {
            source: 'apache',
            extensions: ['lnk'],
          },
          'application/x-ms-wmd': {
            source: 'apache',
            extensions: ['wmd'],
          },
          'application/x-ms-wmz': {
            source: 'apache',
            extensions: ['wmz'],
          },
          'application/x-ms-xbap': {
            source: 'apache',
            extensions: ['xbap'],
          },
          'application/x-msaccess': {
            source: 'apache',
            extensions: ['mdb'],
          },
          'application/x-msbinder': {
            source: 'apache',
            extensions: ['obd'],
          },
          'application/x-mscardfile': {
            source: 'apache',
            extensions: ['crd'],
          },
          'application/x-msclip': {
            source: 'apache',
            extensions: ['clp'],
          },
          'application/x-msdos-program': {
            extensions: ['exe'],
          },
          'application/x-msdownload': {
            source: 'apache',
            extensions: ['exe', 'dll', 'com', 'bat', 'msi'],
          },
          'application/x-msmediaview': {
            source: 'apache',
            extensions: ['mvb', 'm13', 'm14'],
          },
          'application/x-msmetafile': {
            source: 'apache',
            extensions: ['wmf', 'wmz', 'emf', 'emz'],
          },
          'application/x-msmoney': {
            source: 'apache',
            extensions: ['mny'],
          },
          'application/x-mspublisher': {
            source: 'apache',
            extensions: ['pub'],
          },
          'application/x-msschedule': {
            source: 'apache',
            extensions: ['scd'],
          },
          'application/x-msterminal': {
            source: 'apache',
            extensions: ['trm'],
          },
          'application/x-mswrite': {
            source: 'apache',
            extensions: ['wri'],
          },
          'application/x-netcdf': {
            source: 'apache',
            extensions: ['nc', 'cdf'],
          },
          'application/x-ns-proxy-autoconfig': {
            compressible: true,
            extensions: ['pac'],
          },
          'application/x-nzb': {
            source: 'apache',
            extensions: ['nzb'],
          },
          'application/x-perl': {
            source: 'nginx',
            extensions: ['pl', 'pm'],
          },
          'application/x-pilot': {
            source: 'nginx',
            extensions: ['prc', 'pdb'],
          },
          'application/x-pkcs12': {
            source: 'apache',
            compressible: false,
            extensions: ['p12', 'pfx'],
          },
          'application/x-pkcs7-certificates': {
            source: 'apache',
            extensions: ['p7b', 'spc'],
          },
          'application/x-pkcs7-certreqresp': {
            source: 'apache',
            extensions: ['p7r'],
          },
          'application/x-rar-compressed': {
            source: 'apache',
            compressible: false,
            extensions: ['rar'],
          },
          'application/x-redhat-package-manager': {
            source: 'nginx',
            extensions: ['rpm'],
          },
          'application/x-research-info-systems': {
            source: 'apache',
            extensions: ['ris'],
          },
          'application/x-sea': {
            source: 'nginx',
            extensions: ['sea'],
          },
          'application/x-sh': {
            source: 'apache',
            compressible: true,
            extensions: ['sh'],
          },
          'application/x-shar': {
            source: 'apache',
            extensions: ['shar'],
          },
          'application/x-shockwave-flash': {
            source: 'apache',
            compressible: false,
            extensions: ['swf'],
          },
          'application/x-silverlight-app': {
            source: 'apache',
            extensions: ['xap'],
          },
          'application/x-sql': {
            source: 'apache',
            extensions: ['sql'],
          },
          'application/x-stuffit': {
            source: 'apache',
            compressible: false,
            extensions: ['sit'],
          },
          'application/x-stuffitx': {
            source: 'apache',
            extensions: ['sitx'],
          },
          'application/x-subrip': {
            source: 'apache',
            extensions: ['srt'],
          },
          'application/x-sv4cpio': {
            source: 'apache',
            extensions: ['sv4cpio'],
          },
          'application/x-sv4crc': {
            source: 'apache',
            extensions: ['sv4crc'],
          },
          'application/x-t3vm-image': {
            source: 'apache',
            extensions: ['t3'],
          },
          'application/x-tads': {
            source: 'apache',
            extensions: ['gam'],
          },
          'application/x-tar': {
            source: 'apache',
            compressible: true,
            extensions: ['tar'],
          },
          'application/x-tcl': {
            source: 'apache',
            extensions: ['tcl', 'tk'],
          },
          'application/x-tex': {
            source: 'apache',
            extensions: ['tex'],
          },
          'application/x-tex-tfm': {
            source: 'apache',
            extensions: ['tfm'],
          },
          'application/x-texinfo': {
            source: 'apache',
            extensions: ['texinfo', 'texi'],
          },
          'application/x-tgif': {
            source: 'apache',
            extensions: ['obj'],
          },
          'application/x-ustar': {
            source: 'apache',
            extensions: ['ustar'],
          },
          'application/x-wais-source': {
            source: 'apache',
            extensions: ['src'],
          },
          'application/x-web-app-manifest+json': {
            compressible: true,
            extensions: ['webapp'],
          },
          'application/x-www-form-urlencoded': {
            source: 'iana',
            compressible: true,
          },
          'application/x-x509-ca-cert': {
            source: 'apache',
            extensions: ['der', 'crt', 'pem'],
          },
          'application/x-xfig': {
            source: 'apache',
            extensions: ['fig'],
          },
          'application/x-xliff+xml': {
            source: 'apache',
            extensions: ['xlf'],
          },
          'application/x-xpinstall': {
            source: 'apache',
            compressible: false,
            extensions: ['xpi'],
          },
          'application/x-xz': {
            source: 'apache',
            extensions: ['xz'],
          },
          'application/x-zmachine': {
            source: 'apache',
            extensions: ['z1', 'z2', 'z3', 'z4', 'z5', 'z6', 'z7', 'z8'],
          },
          'application/x400-bp': {
            source: 'iana',
          },
          'application/xacml+xml': {
            source: 'iana',
          },
          'application/xaml+xml': {
            source: 'apache',
            extensions: ['xaml'],
          },
          'application/xcap-att+xml': {
            source: 'iana',
          },
          'application/xcap-caps+xml': {
            source: 'iana',
          },
          'application/xcap-diff+xml': {
            source: 'iana',
            extensions: ['xdf'],
          },
          'application/xcap-el+xml': {
            source: 'iana',
          },
          'application/xcap-error+xml': {
            source: 'iana',
          },
          'application/xcap-ns+xml': {
            source: 'iana',
          },
          'application/xcon-conference-info+xml': {
            source: 'iana',
          },
          'application/xcon-conference-info-diff+xml': {
            source: 'iana',
          },
          'application/xenc+xml': {
            source: 'iana',
            extensions: ['xenc'],
          },
          'application/xhtml+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['xhtml', 'xht'],
          },
          'application/xhtml-voice+xml': {
            source: 'apache',
          },
          'application/xml': {
            source: 'iana',
            compressible: true,
            extensions: ['xml', 'xsl', 'xsd'],
          },
          'application/xml-dtd': {
            source: 'iana',
            compressible: true,
            extensions: ['dtd'],
          },
          'application/xml-external-parsed-entity': {
            source: 'iana',
          },
          'application/xml-patch+xml': {
            source: 'iana',
          },
          'application/xmpp+xml': {
            source: 'iana',
          },
          'application/xop+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['xop'],
          },
          'application/xproc+xml': {
            source: 'apache',
            extensions: ['xpl'],
          },
          'application/xslt+xml': {
            source: 'iana',
            extensions: ['xslt'],
          },
          'application/xspf+xml': {
            source: 'apache',
            extensions: ['xspf'],
          },
          'application/xv+xml': {
            source: 'iana',
            extensions: ['mxml', 'xhvml', 'xvml', 'xvm'],
          },
          'application/yang': {
            source: 'iana',
            extensions: ['yang'],
          },
          'application/yin+xml': {
            source: 'iana',
            extensions: ['yin'],
          },
          'application/zip': {
            source: 'iana',
            compressible: false,
            extensions: ['zip'],
          },
          'application/zlib': {
            source: 'iana',
          },
          'audio/1d-interleaved-parityfec': {
            source: 'iana',
          },
          'audio/32kadpcm': {
            source: 'iana',
          },
          'audio/3gpp': {
            source: 'iana',
          },
          'audio/3gpp2': {
            source: 'iana',
          },
          'audio/ac3': {
            source: 'iana',
          },
          'audio/adpcm': {
            source: 'apache',
            extensions: ['adp'],
          },
          'audio/amr': {
            source: 'iana',
          },
          'audio/amr-wb': {
            source: 'iana',
          },
          'audio/amr-wb+': {
            source: 'iana',
          },
          'audio/aptx': {
            source: 'iana',
          },
          'audio/asc': {
            source: 'iana',
          },
          'audio/atrac-advanced-lossless': {
            source: 'iana',
          },
          'audio/atrac-x': {
            source: 'iana',
          },
          'audio/atrac3': {
            source: 'iana',
          },
          'audio/basic': {
            source: 'iana',
            compressible: false,
            extensions: ['au', 'snd'],
          },
          'audio/bv16': {
            source: 'iana',
          },
          'audio/bv32': {
            source: 'iana',
          },
          'audio/clearmode': {
            source: 'iana',
          },
          'audio/cn': {
            source: 'iana',
          },
          'audio/dat12': {
            source: 'iana',
          },
          'audio/dls': {
            source: 'iana',
          },
          'audio/dsr-es201108': {
            source: 'iana',
          },
          'audio/dsr-es202050': {
            source: 'iana',
          },
          'audio/dsr-es202211': {
            source: 'iana',
          },
          'audio/dsr-es202212': {
            source: 'iana',
          },
          'audio/dv': {
            source: 'iana',
          },
          'audio/dvi4': {
            source: 'iana',
          },
          'audio/eac3': {
            source: 'iana',
          },
          'audio/encaprtp': {
            source: 'iana',
          },
          'audio/evrc': {
            source: 'iana',
          },
          'audio/evrc-qcp': {
            source: 'iana',
          },
          'audio/evrc0': {
            source: 'iana',
          },
          'audio/evrc1': {
            source: 'iana',
          },
          'audio/evrcb': {
            source: 'iana',
          },
          'audio/evrcb0': {
            source: 'iana',
          },
          'audio/evrcb1': {
            source: 'iana',
          },
          'audio/evrcnw': {
            source: 'iana',
          },
          'audio/evrcnw0': {
            source: 'iana',
          },
          'audio/evrcnw1': {
            source: 'iana',
          },
          'audio/evrcwb': {
            source: 'iana',
          },
          'audio/evrcwb0': {
            source: 'iana',
          },
          'audio/evrcwb1': {
            source: 'iana',
          },
          'audio/evs': {
            source: 'iana',
          },
          'audio/fwdred': {
            source: 'iana',
          },
          'audio/g711-0': {
            source: 'iana',
          },
          'audio/g719': {
            source: 'iana',
          },
          'audio/g722': {
            source: 'iana',
          },
          'audio/g7221': {
            source: 'iana',
          },
          'audio/g723': {
            source: 'iana',
          },
          'audio/g726-16': {
            source: 'iana',
          },
          'audio/g726-24': {
            source: 'iana',
          },
          'audio/g726-32': {
            source: 'iana',
          },
          'audio/g726-40': {
            source: 'iana',
          },
          'audio/g728': {
            source: 'iana',
          },
          'audio/g729': {
            source: 'iana',
          },
          'audio/g7291': {
            source: 'iana',
          },
          'audio/g729d': {
            source: 'iana',
          },
          'audio/g729e': {
            source: 'iana',
          },
          'audio/gsm': {
            source: 'iana',
          },
          'audio/gsm-efr': {
            source: 'iana',
          },
          'audio/gsm-hr-08': {
            source: 'iana',
          },
          'audio/ilbc': {
            source: 'iana',
          },
          'audio/ip-mr_v2.5': {
            source: 'iana',
          },
          'audio/isac': {
            source: 'apache',
          },
          'audio/l16': {
            source: 'iana',
          },
          'audio/l20': {
            source: 'iana',
          },
          'audio/l24': {
            source: 'iana',
            compressible: false,
          },
          'audio/l8': {
            source: 'iana',
          },
          'audio/lpc': {
            source: 'iana',
          },
          'audio/midi': {
            source: 'apache',
            extensions: ['mid', 'midi', 'kar', 'rmi'],
          },
          'audio/mobile-xmf': {
            source: 'iana',
          },
          'audio/mp4': {
            source: 'iana',
            compressible: false,
            extensions: ['mp4a', 'm4a'],
          },
          'audio/mp4a-latm': {
            source: 'iana',
          },
          'audio/mpa': {
            source: 'iana',
          },
          'audio/mpa-robust': {
            source: 'iana',
          },
          'audio/mpeg': {
            source: 'iana',
            compressible: false,
            extensions: ['mpga', 'mp2', 'mp2a', 'mp3', 'm2a', 'm3a'],
          },
          'audio/mpeg4-generic': {
            source: 'iana',
          },
          'audio/musepack': {
            source: 'apache',
          },
          'audio/ogg': {
            source: 'iana',
            compressible: false,
            extensions: ['oga', 'ogg', 'spx'],
          },
          'audio/opus': {
            source: 'iana',
          },
          'audio/parityfec': {
            source: 'iana',
          },
          'audio/pcma': {
            source: 'iana',
          },
          'audio/pcma-wb': {
            source: 'iana',
          },
          'audio/pcmu': {
            source: 'iana',
          },
          'audio/pcmu-wb': {
            source: 'iana',
          },
          'audio/prs.sid': {
            source: 'iana',
          },
          'audio/qcelp': {
            source: 'iana',
          },
          'audio/raptorfec': {
            source: 'iana',
          },
          'audio/red': {
            source: 'iana',
          },
          'audio/rtp-enc-aescm128': {
            source: 'iana',
          },
          'audio/rtp-midi': {
            source: 'iana',
          },
          'audio/rtploopback': {
            source: 'iana',
          },
          'audio/rtx': {
            source: 'iana',
          },
          'audio/s3m': {
            source: 'apache',
            extensions: ['s3m'],
          },
          'audio/silk': {
            source: 'apache',
            extensions: ['sil'],
          },
          'audio/smv': {
            source: 'iana',
          },
          'audio/smv-qcp': {
            source: 'iana',
          },
          'audio/smv0': {
            source: 'iana',
          },
          'audio/sp-midi': {
            source: 'iana',
          },
          'audio/speex': {
            source: 'iana',
          },
          'audio/t140c': {
            source: 'iana',
          },
          'audio/t38': {
            source: 'iana',
          },
          'audio/telephone-event': {
            source: 'iana',
          },
          'audio/tone': {
            source: 'iana',
          },
          'audio/uemclip': {
            source: 'iana',
          },
          'audio/ulpfec': {
            source: 'iana',
          },
          'audio/vdvi': {
            source: 'iana',
          },
          'audio/vmr-wb': {
            source: 'iana',
          },
          'audio/vnd.3gpp.iufp': {
            source: 'iana',
          },
          'audio/vnd.4sb': {
            source: 'iana',
          },
          'audio/vnd.audiokoz': {
            source: 'iana',
          },
          'audio/vnd.celp': {
            source: 'iana',
          },
          'audio/vnd.cisco.nse': {
            source: 'iana',
          },
          'audio/vnd.cmles.radio-events': {
            source: 'iana',
          },
          'audio/vnd.cns.anp1': {
            source: 'iana',
          },
          'audio/vnd.cns.inf1': {
            source: 'iana',
          },
          'audio/vnd.dece.audio': {
            source: 'iana',
            extensions: ['uva', 'uvva'],
          },
          'audio/vnd.digital-winds': {
            source: 'iana',
            extensions: ['eol'],
          },
          'audio/vnd.dlna.adts': {
            source: 'iana',
          },
          'audio/vnd.dolby.heaac.1': {
            source: 'iana',
          },
          'audio/vnd.dolby.heaac.2': {
            source: 'iana',
          },
          'audio/vnd.dolby.mlp': {
            source: 'iana',
          },
          'audio/vnd.dolby.mps': {
            source: 'iana',
          },
          'audio/vnd.dolby.pl2': {
            source: 'iana',
          },
          'audio/vnd.dolby.pl2x': {
            source: 'iana',
          },
          'audio/vnd.dolby.pl2z': {
            source: 'iana',
          },
          'audio/vnd.dolby.pulse.1': {
            source: 'iana',
          },
          'audio/vnd.dra': {
            source: 'iana',
            extensions: ['dra'],
          },
          'audio/vnd.dts': {
            source: 'iana',
            extensions: ['dts'],
          },
          'audio/vnd.dts.hd': {
            source: 'iana',
            extensions: ['dtshd'],
          },
          'audio/vnd.dvb.file': {
            source: 'iana',
          },
          'audio/vnd.everad.plj': {
            source: 'iana',
          },
          'audio/vnd.hns.audio': {
            source: 'iana',
          },
          'audio/vnd.lucent.voice': {
            source: 'iana',
            extensions: ['lvp'],
          },
          'audio/vnd.ms-playready.media.pya': {
            source: 'iana',
            extensions: ['pya'],
          },
          'audio/vnd.nokia.mobile-xmf': {
            source: 'iana',
          },
          'audio/vnd.nortel.vbk': {
            source: 'iana',
          },
          'audio/vnd.nuera.ecelp4800': {
            source: 'iana',
            extensions: ['ecelp4800'],
          },
          'audio/vnd.nuera.ecelp7470': {
            source: 'iana',
            extensions: ['ecelp7470'],
          },
          'audio/vnd.nuera.ecelp9600': {
            source: 'iana',
            extensions: ['ecelp9600'],
          },
          'audio/vnd.octel.sbc': {
            source: 'iana',
          },
          'audio/vnd.qcelp': {
            source: 'iana',
          },
          'audio/vnd.rhetorex.32kadpcm': {
            source: 'iana',
          },
          'audio/vnd.rip': {
            source: 'iana',
            extensions: ['rip'],
          },
          'audio/vnd.rn-realaudio': {
            compressible: false,
          },
          'audio/vnd.sealedmedia.softseal.mpeg': {
            source: 'iana',
          },
          'audio/vnd.vmx.cvsd': {
            source: 'iana',
          },
          'audio/vnd.wave': {
            compressible: false,
          },
          'audio/vorbis': {
            source: 'iana',
            compressible: false,
          },
          'audio/vorbis-config': {
            source: 'iana',
          },
          'audio/wav': {
            compressible: false,
            extensions: ['wav'],
          },
          'audio/wave': {
            compressible: false,
            extensions: ['wav'],
          },
          'audio/webm': {
            source: 'apache',
            compressible: false,
            extensions: ['weba'],
          },
          'audio/x-aac': {
            source: 'apache',
            compressible: false,
            extensions: ['aac'],
          },
          'audio/x-aiff': {
            source: 'apache',
            extensions: ['aif', 'aiff', 'aifc'],
          },
          'audio/x-caf': {
            source: 'apache',
            compressible: false,
            extensions: ['caf'],
          },
          'audio/x-flac': {
            source: 'apache',
            extensions: ['flac'],
          },
          'audio/x-m4a': {
            source: 'nginx',
            extensions: ['m4a'],
          },
          'audio/x-matroska': {
            source: 'apache',
            extensions: ['mka'],
          },
          'audio/x-mpegurl': {
            source: 'apache',
            extensions: ['m3u'],
          },
          'audio/x-ms-wax': {
            source: 'apache',
            extensions: ['wax'],
          },
          'audio/x-ms-wma': {
            source: 'apache',
            extensions: ['wma'],
          },
          'audio/x-pn-realaudio': {
            source: 'apache',
            extensions: ['ram', 'ra'],
          },
          'audio/x-pn-realaudio-plugin': {
            source: 'apache',
            extensions: ['rmp'],
          },
          'audio/x-realaudio': {
            source: 'nginx',
            extensions: ['ra'],
          },
          'audio/x-tta': {
            source: 'apache',
          },
          'audio/x-wav': {
            source: 'apache',
            extensions: ['wav'],
          },
          'audio/xm': {
            source: 'apache',
            extensions: ['xm'],
          },
          'chemical/x-cdx': {
            source: 'apache',
            extensions: ['cdx'],
          },
          'chemical/x-cif': {
            source: 'apache',
            extensions: ['cif'],
          },
          'chemical/x-cmdf': {
            source: 'apache',
            extensions: ['cmdf'],
          },
          'chemical/x-cml': {
            source: 'apache',
            extensions: ['cml'],
          },
          'chemical/x-csml': {
            source: 'apache',
            extensions: ['csml'],
          },
          'chemical/x-pdb': {
            source: 'apache',
          },
          'chemical/x-xyz': {
            source: 'apache',
            extensions: ['xyz'],
          },
          'font/opentype': {
            compressible: true,
            extensions: ['otf'],
          },
          'image/bmp': {
            source: 'apache',
            compressible: true,
            extensions: ['bmp'],
          },
          'image/cgm': {
            source: 'iana',
            extensions: ['cgm'],
          },
          'image/fits': {
            source: 'iana',
          },
          'image/g3fax': {
            source: 'iana',
            extensions: ['g3'],
          },
          'image/gif': {
            source: 'iana',
            compressible: false,
            extensions: ['gif'],
          },
          'image/ief': {
            source: 'iana',
            extensions: ['ief'],
          },
          'image/jp2': {
            source: 'iana',
          },
          'image/jpeg': {
            source: 'iana',
            compressible: false,
            extensions: ['jpeg', 'jpg', 'jpe'],
          },
          'image/jpm': {
            source: 'iana',
          },
          'image/jpx': {
            source: 'iana',
          },
          'image/ktx': {
            source: 'iana',
            extensions: ['ktx'],
          },
          'image/naplps': {
            source: 'iana',
          },
          'image/pjpeg': {
            compressible: false,
          },
          'image/png': {
            source: 'iana',
            compressible: false,
            extensions: ['png'],
          },
          'image/prs.btif': {
            source: 'iana',
            extensions: ['btif'],
          },
          'image/prs.pti': {
            source: 'iana',
          },
          'image/pwg-raster': {
            source: 'iana',
          },
          'image/sgi': {
            source: 'apache',
            extensions: ['sgi'],
          },
          'image/svg+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['svg', 'svgz'],
          },
          'image/t38': {
            source: 'iana',
          },
          'image/tiff': {
            source: 'iana',
            compressible: false,
            extensions: ['tiff', 'tif'],
          },
          'image/tiff-fx': {
            source: 'iana',
          },
          'image/vnd.adobe.photoshop': {
            source: 'iana',
            compressible: true,
            extensions: ['psd'],
          },
          'image/vnd.airzip.accelerator.azv': {
            source: 'iana',
          },
          'image/vnd.cns.inf2': {
            source: 'iana',
          },
          'image/vnd.dece.graphic': {
            source: 'iana',
            extensions: ['uvi', 'uvvi', 'uvg', 'uvvg'],
          },
          'image/vnd.djvu': {
            source: 'iana',
            extensions: ['djvu', 'djv'],
          },
          'image/vnd.dvb.subtitle': {
            source: 'iana',
            extensions: ['sub'],
          },
          'image/vnd.dwg': {
            source: 'iana',
            extensions: ['dwg'],
          },
          'image/vnd.dxf': {
            source: 'iana',
            extensions: ['dxf'],
          },
          'image/vnd.fastbidsheet': {
            source: 'iana',
            extensions: ['fbs'],
          },
          'image/vnd.fpx': {
            source: 'iana',
            extensions: ['fpx'],
          },
          'image/vnd.fst': {
            source: 'iana',
            extensions: ['fst'],
          },
          'image/vnd.fujixerox.edmics-mmr': {
            source: 'iana',
            extensions: ['mmr'],
          },
          'image/vnd.fujixerox.edmics-rlc': {
            source: 'iana',
            extensions: ['rlc'],
          },
          'image/vnd.globalgraphics.pgb': {
            source: 'iana',
          },
          'image/vnd.microsoft.icon': {
            source: 'iana',
          },
          'image/vnd.mix': {
            source: 'iana',
          },
          'image/vnd.mozilla.apng': {
            source: 'iana',
          },
          'image/vnd.ms-modi': {
            source: 'iana',
            extensions: ['mdi'],
          },
          'image/vnd.ms-photo': {
            source: 'apache',
            extensions: ['wdp'],
          },
          'image/vnd.net-fpx': {
            source: 'iana',
            extensions: ['npx'],
          },
          'image/vnd.radiance': {
            source: 'iana',
          },
          'image/vnd.sealed.png': {
            source: 'iana',
          },
          'image/vnd.sealedmedia.softseal.gif': {
            source: 'iana',
          },
          'image/vnd.sealedmedia.softseal.jpg': {
            source: 'iana',
          },
          'image/vnd.svf': {
            source: 'iana',
          },
          'image/vnd.tencent.tap': {
            source: 'iana',
          },
          'image/vnd.valve.source.texture': {
            source: 'iana',
          },
          'image/vnd.wap.wbmp': {
            source: 'iana',
            extensions: ['wbmp'],
          },
          'image/vnd.xiff': {
            source: 'iana',
            extensions: ['xif'],
          },
          'image/vnd.zbrush.pcx': {
            source: 'iana',
          },
          'image/webp': {
            source: 'apache',
            extensions: ['webp'],
          },
          'image/x-3ds': {
            source: 'apache',
            extensions: ['3ds'],
          },
          'image/x-cmu-raster': {
            source: 'apache',
            extensions: ['ras'],
          },
          'image/x-cmx': {
            source: 'apache',
            extensions: ['cmx'],
          },
          'image/x-freehand': {
            source: 'apache',
            extensions: ['fh', 'fhc', 'fh4', 'fh5', 'fh7'],
          },
          'image/x-icon': {
            source: 'apache',
            compressible: true,
            extensions: ['ico'],
          },
          'image/x-jng': {
            source: 'nginx',
            extensions: ['jng'],
          },
          'image/x-mrsid-image': {
            source: 'apache',
            extensions: ['sid'],
          },
          'image/x-ms-bmp': {
            source: 'nginx',
            compressible: true,
            extensions: ['bmp'],
          },
          'image/x-pcx': {
            source: 'apache',
            extensions: ['pcx'],
          },
          'image/x-pict': {
            source: 'apache',
            extensions: ['pic', 'pct'],
          },
          'image/x-portable-anymap': {
            source: 'apache',
            extensions: ['pnm'],
          },
          'image/x-portable-bitmap': {
            source: 'apache',
            extensions: ['pbm'],
          },
          'image/x-portable-graymap': {
            source: 'apache',
            extensions: ['pgm'],
          },
          'image/x-portable-pixmap': {
            source: 'apache',
            extensions: ['ppm'],
          },
          'image/x-rgb': {
            source: 'apache',
            extensions: ['rgb'],
          },
          'image/x-tga': {
            source: 'apache',
            extensions: ['tga'],
          },
          'image/x-xbitmap': {
            source: 'apache',
            extensions: ['xbm'],
          },
          'image/x-xcf': {
            compressible: false,
          },
          'image/x-xpixmap': {
            source: 'apache',
            extensions: ['xpm'],
          },
          'image/x-xwindowdump': {
            source: 'apache',
            extensions: ['xwd'],
          },
          'message/cpim': {
            source: 'iana',
          },
          'message/delivery-status': {
            source: 'iana',
          },
          'message/disposition-notification': {
            source: 'iana',
          },
          'message/external-body': {
            source: 'iana',
          },
          'message/feedback-report': {
            source: 'iana',
          },
          'message/global': {
            source: 'iana',
          },
          'message/global-delivery-status': {
            source: 'iana',
          },
          'message/global-disposition-notification': {
            source: 'iana',
          },
          'message/global-headers': {
            source: 'iana',
          },
          'message/http': {
            source: 'iana',
            compressible: false,
          },
          'message/imdn+xml': {
            source: 'iana',
            compressible: true,
          },
          'message/news': {
            source: 'iana',
          },
          'message/partial': {
            source: 'iana',
            compressible: false,
          },
          'message/rfc822': {
            source: 'iana',
            compressible: true,
            extensions: ['eml', 'mime'],
          },
          'message/s-http': {
            source: 'iana',
          },
          'message/sip': {
            source: 'iana',
          },
          'message/sipfrag': {
            source: 'iana',
          },
          'message/tracking-status': {
            source: 'iana',
          },
          'message/vnd.si.simp': {
            source: 'iana',
          },
          'message/vnd.wfa.wsc': {
            source: 'iana',
          },
          'model/iges': {
            source: 'iana',
            compressible: false,
            extensions: ['igs', 'iges'],
          },
          'model/mesh': {
            source: 'iana',
            compressible: false,
            extensions: ['msh', 'mesh', 'silo'],
          },
          'model/vnd.collada+xml': {
            source: 'iana',
            extensions: ['dae'],
          },
          'model/vnd.dwf': {
            source: 'iana',
            extensions: ['dwf'],
          },
          'model/vnd.flatland.3dml': {
            source: 'iana',
          },
          'model/vnd.gdl': {
            source: 'iana',
            extensions: ['gdl'],
          },
          'model/vnd.gs-gdl': {
            source: 'apache',
          },
          'model/vnd.gs.gdl': {
            source: 'iana',
          },
          'model/vnd.gtw': {
            source: 'iana',
            extensions: ['gtw'],
          },
          'model/vnd.moml+xml': {
            source: 'iana',
          },
          'model/vnd.mts': {
            source: 'iana',
            extensions: ['mts'],
          },
          'model/vnd.opengex': {
            source: 'iana',
          },
          'model/vnd.parasolid.transmit.binary': {
            source: 'iana',
          },
          'model/vnd.parasolid.transmit.text': {
            source: 'iana',
          },
          'model/vnd.valve.source.compiled-map': {
            source: 'iana',
          },
          'model/vnd.vtu': {
            source: 'iana',
            extensions: ['vtu'],
          },
          'model/vrml': {
            source: 'iana',
            compressible: false,
            extensions: ['wrl', 'vrml'],
          },
          'model/x3d+binary': {
            source: 'apache',
            compressible: false,
            extensions: ['x3db', 'x3dbz'],
          },
          'model/x3d+fastinfoset': {
            source: 'iana',
          },
          'model/x3d+vrml': {
            source: 'apache',
            compressible: false,
            extensions: ['x3dv', 'x3dvz'],
          },
          'model/x3d+xml': {
            source: 'iana',
            compressible: true,
            extensions: ['x3d', 'x3dz'],
          },
          'model/x3d-vrml': {
            source: 'iana',
          },
          'multipart/alternative': {
            source: 'iana',
            compressible: false,
          },
          'multipart/appledouble': {
            source: 'iana',
          },
          'multipart/byteranges': {
            source: 'iana',
          },
          'multipart/digest': {
            source: 'iana',
          },
          'multipart/encrypted': {
            source: 'iana',
            compressible: false,
          },
          'multipart/form-data': {
            source: 'iana',
            compressible: false,
          },
          'multipart/header-set': {
            source: 'iana',
          },
          'multipart/mixed': {
            source: 'iana',
            compressible: false,
          },
          'multipart/parallel': {
            source: 'iana',
          },
          'multipart/related': {
            source: 'iana',
            compressible: false,
          },
          'multipart/report': {
            source: 'iana',
          },
          'multipart/signed': {
            source: 'iana',
            compressible: false,
          },
          'multipart/voice-message': {
            source: 'iana',
          },
          'multipart/x-mixed-replace': {
            source: 'iana',
          },
          'text/1d-interleaved-parityfec': {
            source: 'iana',
          },
          'text/cache-manifest': {
            source: 'iana',
            compressible: true,
            extensions: ['appcache', 'manifest'],
          },
          'text/calendar': {
            source: 'iana',
            extensions: ['ics', 'ifb'],
          },
          'text/calender': {
            compressible: true,
          },
          'text/cmd': {
            compressible: true,
          },
          'text/coffeescript': {
            extensions: ['coffee', 'litcoffee'],
          },
          'text/css': {
            source: 'iana',
            compressible: true,
            extensions: ['css'],
          },
          'text/csv': {
            source: 'iana',
            compressible: true,
            extensions: ['csv'],
          },
          'text/csv-schema': {
            source: 'iana',
          },
          'text/directory': {
            source: 'iana',
          },
          'text/dns': {
            source: 'iana',
          },
          'text/ecmascript': {
            source: 'iana',
          },
          'text/encaprtp': {
            source: 'iana',
          },
          'text/enriched': {
            source: 'iana',
          },
          'text/fwdred': {
            source: 'iana',
          },
          'text/grammar-ref-list': {
            source: 'iana',
          },
          'text/hjson': {
            extensions: ['hjson'],
          },
          'text/html': {
            source: 'iana',
            compressible: true,
            extensions: ['html', 'htm', 'shtml'],
          },
          'text/jade': {
            extensions: ['jade'],
          },
          'text/javascript': {
            source: 'iana',
            compressible: true,
          },
          'text/jcr-cnd': {
            source: 'iana',
          },
          'text/jsx': {
            compressible: true,
            extensions: ['jsx'],
          },
          'text/less': {
            extensions: ['less'],
          },
          'text/markdown': {
            source: 'iana',
          },
          'text/mathml': {
            source: 'nginx',
            extensions: ['mml'],
          },
          'text/mizar': {
            source: 'iana',
          },
          'text/n3': {
            source: 'iana',
            compressible: true,
            extensions: ['n3'],
          },
          'text/parameters': {
            source: 'iana',
          },
          'text/parityfec': {
            source: 'iana',
          },
          'text/plain': {
            source: 'iana',
            compressible: true,
            extensions: [
              'txt',
              'text',
              'conf',
              'def',
              'list',
              'log',
              'in',
              'ini',
            ],
          },
          'text/provenance-notation': {
            source: 'iana',
          },
          'text/prs.fallenstein.rst': {
            source: 'iana',
          },
          'text/prs.lines.tag': {
            source: 'iana',
            extensions: ['dsc'],
          },
          'text/raptorfec': {
            source: 'iana',
          },
          'text/red': {
            source: 'iana',
          },
          'text/rfc822-headers': {
            source: 'iana',
          },
          'text/richtext': {
            source: 'iana',
            compressible: true,
            extensions: ['rtx'],
          },
          'text/rtf': {
            source: 'iana',
            compressible: true,
            extensions: ['rtf'],
          },
          'text/rtp-enc-aescm128': {
            source: 'iana',
          },
          'text/rtploopback': {
            source: 'iana',
          },
          'text/rtx': {
            source: 'iana',
          },
          'text/sgml': {
            source: 'iana',
            extensions: ['sgml', 'sgm'],
          },
          'text/stylus': {
            extensions: ['stylus', 'styl'],
          },
          'text/t140': {
            source: 'iana',
          },
          'text/tab-separated-values': {
            source: 'iana',
            compressible: true,
            extensions: ['tsv'],
          },
          'text/troff': {
            source: 'iana',
            extensions: ['t', 'tr', 'roff', 'man', 'me', 'ms'],
          },
          'text/turtle': {
            source: 'iana',
            extensions: ['ttl'],
          },
          'text/ulpfec': {
            source: 'iana',
          },
          'text/uri-list': {
            source: 'iana',
            compressible: true,
            extensions: ['uri', 'uris', 'urls'],
          },
          'text/vcard': {
            source: 'iana',
            compressible: true,
            extensions: ['vcard'],
          },
          'text/vnd.a': {
            source: 'iana',
          },
          'text/vnd.abc': {
            source: 'iana',
          },
          'text/vnd.curl': {
            source: 'iana',
            extensions: ['curl'],
          },
          'text/vnd.curl.dcurl': {
            source: 'apache',
            extensions: ['dcurl'],
          },
          'text/vnd.curl.mcurl': {
            source: 'apache',
            extensions: ['mcurl'],
          },
          'text/vnd.curl.scurl': {
            source: 'apache',
            extensions: ['scurl'],
          },
          'text/vnd.debian.copyright': {
            source: 'iana',
          },
          'text/vnd.dmclientscript': {
            source: 'iana',
          },
          'text/vnd.dvb.subtitle': {
            source: 'iana',
            extensions: ['sub'],
          },
          'text/vnd.esmertec.theme-descriptor': {
            source: 'iana',
          },
          'text/vnd.fly': {
            source: 'iana',
            extensions: ['fly'],
          },
          'text/vnd.fmi.flexstor': {
            source: 'iana',
            extensions: ['flx'],
          },
          'text/vnd.graphviz': {
            source: 'iana',
            extensions: ['gv'],
          },
          'text/vnd.in3d.3dml': {
            source: 'iana',
            extensions: ['3dml'],
          },
          'text/vnd.in3d.spot': {
            source: 'iana',
            extensions: ['spot'],
          },
          'text/vnd.iptc.newsml': {
            source: 'iana',
          },
          'text/vnd.iptc.nitf': {
            source: 'iana',
          },
          'text/vnd.latex-z': {
            source: 'iana',
          },
          'text/vnd.motorola.reflex': {
            source: 'iana',
          },
          'text/vnd.ms-mediapackage': {
            source: 'iana',
          },
          'text/vnd.net2phone.commcenter.command': {
            source: 'iana',
          },
          'text/vnd.radisys.msml-basic-layout': {
            source: 'iana',
          },
          'text/vnd.si.uricatalogue': {
            source: 'iana',
          },
          'text/vnd.sun.j2me.app-descriptor': {
            source: 'iana',
            extensions: ['jad'],
          },
          'text/vnd.trolltech.linguist': {
            source: 'iana',
          },
          'text/vnd.wap.si': {
            source: 'iana',
          },
          'text/vnd.wap.sl': {
            source: 'iana',
          },
          'text/vnd.wap.wml': {
            source: 'iana',
            extensions: ['wml'],
          },
          'text/vnd.wap.wmlscript': {
            source: 'iana',
            extensions: ['wmls'],
          },
          'text/vtt': {
            charset: 'UTF-8',
            compressible: true,
            extensions: ['vtt'],
          },
          'text/x-asm': {
            source: 'apache',
            extensions: ['s', 'asm'],
          },
          'text/x-c': {
            source: 'apache',
            extensions: ['c', 'cc', 'cxx', 'cpp', 'h', 'hh', 'dic'],
          },
          'text/x-component': {
            source: 'nginx',
            extensions: ['htc'],
          },
          'text/x-fortran': {
            source: 'apache',
            extensions: ['f', 'for', 'f77', 'f90'],
          },
          'text/x-gwt-rpc': {
            compressible: true,
          },
          'text/x-handlebars-template': {
            extensions: ['hbs'],
          },
          'text/x-java-source': {
            source: 'apache',
            extensions: ['java'],
          },
          'text/x-jquery-tmpl': {
            compressible: true,
          },
          'text/x-lua': {
            extensions: ['lua'],
          },
          'text/x-markdown': {
            compressible: true,
            extensions: ['markdown', 'md', 'mkd'],
          },
          'text/x-nfo': {
            source: 'apache',
            extensions: ['nfo'],
          },
          'text/x-opml': {
            source: 'apache',
            extensions: ['opml'],
          },
          'text/x-pascal': {
            source: 'apache',
            extensions: ['p', 'pas'],
          },
          'text/x-processing': {
            compressible: true,
            extensions: ['pde'],
          },
          'text/x-sass': {
            extensions: ['sass'],
          },
          'text/x-scss': {
            extensions: ['scss'],
          },
          'text/x-setext': {
            source: 'apache',
            extensions: ['etx'],
          },
          'text/x-sfv': {
            source: 'apache',
            extensions: ['sfv'],
          },
          'text/x-suse-ymp': {
            compressible: true,
            extensions: ['ymp'],
          },
          'text/x-uuencode': {
            source: 'apache',
            extensions: ['uu'],
          },
          'text/x-vcalendar': {
            source: 'apache',
            extensions: ['vcs'],
          },
          'text/x-vcard': {
            source: 'apache',
            extensions: ['vcf'],
          },
          'text/xml': {
            source: 'iana',
            compressible: true,
            extensions: ['xml'],
          },
          'text/xml-external-parsed-entity': {
            source: 'iana',
          },
          'text/yaml': {
            extensions: ['yaml', 'yml'],
          },
          'video/1d-interleaved-parityfec': {
            source: 'apache',
          },
          'video/3gpp': {
            source: 'apache',
            extensions: ['3gp', '3gpp'],
          },
          'video/3gpp-tt': {
            source: 'apache',
          },
          'video/3gpp2': {
            source: 'apache',
            extensions: ['3g2'],
          },
          'video/bmpeg': {
            source: 'apache',
          },
          'video/bt656': {
            source: 'apache',
          },
          'video/celb': {
            source: 'apache',
          },
          'video/dv': {
            source: 'apache',
          },
          'video/h261': {
            source: 'apache',
            extensions: ['h261'],
          },
          'video/h263': {
            source: 'apache',
            extensions: ['h263'],
          },
          'video/h263-1998': {
            source: 'apache',
          },
          'video/h263-2000': {
            source: 'apache',
          },
          'video/h264': {
            source: 'apache',
            extensions: ['h264'],
          },
          'video/h264-rcdo': {
            source: 'apache',
          },
          'video/h264-svc': {
            source: 'apache',
          },
          'video/jpeg': {
            source: 'apache',
            extensions: ['jpgv'],
          },
          'video/jpeg2000': {
            source: 'apache',
          },
          'video/jpm': {
            source: 'apache',
            extensions: ['jpm', 'jpgm'],
          },
          'video/mj2': {
            source: 'apache',
            extensions: ['mj2', 'mjp2'],
          },
          'video/mp1s': {
            source: 'apache',
          },
          'video/mp2p': {
            source: 'apache',
          },
          'video/mp2t': {
            source: 'apache',
            extensions: ['ts'],
          },
          'video/mp4': {
            source: 'apache',
            compressible: false,
            extensions: ['mp4', 'mp4v', 'mpg4'],
          },
          'video/mp4v-es': {
            source: 'apache',
          },
          'video/mpeg': {
            source: 'apache',
            compressible: false,
            extensions: ['mpeg', 'mpg', 'mpe', 'm1v', 'm2v'],
          },
          'video/mpeg4-generic': {
            source: 'apache',
          },
          'video/mpv': {
            source: 'apache',
          },
          'video/nv': {
            source: 'apache',
          },
          'video/ogg': {
            source: 'apache',
            compressible: false,
            extensions: ['ogv'],
          },
          'video/parityfec': {
            source: 'apache',
          },
          'video/pointer': {
            source: 'apache',
          },
          'video/quicktime': {
            source: 'apache',
            compressible: false,
            extensions: ['qt', 'mov'],
          },
          'video/raw': {
            source: 'apache',
          },
          'video/rtp-enc-aescm128': {
            source: 'apache',
          },
          'video/rtx': {
            source: 'apache',
          },
          'video/smpte292m': {
            source: 'apache',
          },
          'video/ulpfec': {
            source: 'apache',
          },
          'video/vc1': {
            source: 'apache',
          },
          'video/vnd.cctv': {
            source: 'apache',
          },
          'video/vnd.dece.hd': {
            source: 'apache',
            extensions: ['uvh', 'uvvh'],
          },
          'video/vnd.dece.mobile': {
            source: 'apache',
            extensions: ['uvm', 'uvvm'],
          },
          'video/vnd.dece.mp4': {
            source: 'apache',
          },
          'video/vnd.dece.pd': {
            source: 'apache',
            extensions: ['uvp', 'uvvp'],
          },
          'video/vnd.dece.sd': {
            source: 'apache',
            extensions: ['uvs', 'uvvs'],
          },
          'video/vnd.dece.video': {
            source: 'apache',
            extensions: ['uvv', 'uvvv'],
          },
          'video/vnd.directv.mpeg': {
            source: 'apache',
          },
          'video/vnd.directv.mpeg-tts': {
            source: 'apache',
          },
          'video/vnd.dlna.mpeg-tts': {
            source: 'apache',
          },
          'video/vnd.dvb.file': {
            source: 'apache',
            extensions: ['dvb'],
          },
          'video/vnd.fvt': {
            source: 'apache',
            extensions: ['fvt'],
          },
          'video/vnd.hns.video': {
            source: 'apache',
          },
          'video/vnd.iptvforum.1dparityfec-1010': {
            source: 'apache',
          },
          'video/vnd.iptvforum.1dparityfec-2005': {
            source: 'apache',
          },
          'video/vnd.iptvforum.2dparityfec-1010': {
            source: 'apache',
          },
          'video/vnd.iptvforum.2dparityfec-2005': {
            source: 'apache',
          },
          'video/vnd.iptvforum.ttsavc': {
            source: 'apache',
          },
          'video/vnd.iptvforum.ttsmpeg2': {
            source: 'apache',
          },
          'video/vnd.motorola.video': {
            source: 'apache',
          },
          'video/vnd.motorola.videop': {
            source: 'apache',
          },
          'video/vnd.mpegurl': {
            source: 'apache',
            extensions: ['mxu', 'm4u'],
          },
          'video/vnd.ms-playready.media.pyv': {
            source: 'apache',
            extensions: ['pyv'],
          },
          'video/vnd.nokia.interleaved-multimedia': {
            source: 'apache',
          },
          'video/vnd.nokia.videovoip': {
            source: 'apache',
          },
          'video/vnd.objectvideo': {
            source: 'apache',
          },
          'video/vnd.sealed.mpeg1': {
            source: 'apache',
          },
          'video/vnd.sealed.mpeg4': {
            source: 'apache',
          },
          'video/vnd.sealed.swf': {
            source: 'apache',
          },
          'video/vnd.sealedmedia.softseal.mov': {
            source: 'apache',
          },
          'video/vnd.uvvu.mp4': {
            source: 'apache',
            extensions: ['uvu', 'uvvu'],
          },
          'video/vnd.vivo': {
            source: 'apache',
            extensions: ['viv'],
          },
          'video/webm': {
            source: 'apache',
            compressible: false,
            extensions: ['webm'],
          },
          'video/x-f4v': {
            source: 'apache',
            extensions: ['f4v'],
          },
          'video/x-fli': {
            source: 'apache',
            extensions: ['fli'],
          },
          'video/x-flv': {
            source: 'apache',
            compressible: false,
            extensions: ['flv'],
          },
          'video/x-m4v': {
            source: 'apache',
            extensions: ['m4v'],
          },
          'video/x-matroska': {
            source: 'apache',
            compressible: false,
            extensions: ['mkv', 'mk3d', 'mks'],
          },
          'video/x-mng': {
            source: 'apache',
            extensions: ['mng'],
          },
          'video/x-ms-asf': {
            source: 'apache',
            extensions: ['asf', 'asx'],
          },
          'video/x-ms-vob': {
            source: 'apache',
            extensions: ['vob'],
          },
          'video/x-ms-wm': {
            source: 'apache',
            extensions: ['wm'],
          },
          'video/x-ms-wmv': {
            source: 'apache',
            compressible: false,
            extensions: ['wmv'],
          },
          'video/x-ms-wmx': {
            source: 'apache',
            extensions: ['wmx'],
          },
          'video/x-ms-wvx': {
            source: 'apache',
            extensions: ['wvx'],
          },
          'video/x-msvideo': {
            source: 'apache',
            extensions: ['avi'],
          },
          'video/x-sgi-movie': {
            source: 'apache',
            extensions: ['movie'],
          },
          'video/x-smv': {
            source: 'apache',
            extensions: ['smv'],
          },
          'x-conference/x-cooltalk': {
            source: 'apache',
            extensions: ['ice'],
          },
          'x-shader/x-fragment': {
            compressible: true,
          },
          'x-shader/x-vertex': {
            compressible: true,
          },
        }
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en/system/index.js': [
      function(require, module, exports) {
        var system = {}
        module['exports'] = system
        system.mimeTypes = require('./mimeTypes')
      },
      {
        './mimeTypes':
          '../node_modules/faker/lib/locales/en/system/mimeTypes.js',
      },
    ],
    '../node_modules/faker/lib/locales/en/index.js': [
      function(require, module, exports) {
        var en = {}
        module['exports'] = en
        en.title = 'English'
        en.separator = ' & '
        en.address = require('./address')
        en.credit_card = require('./credit_card')
        en.company = require('./company')
        en.internet = require('./internet')
        en.database = require('./database')
        en.lorem = require('./lorem')
        en.name = require('./name')
        en.phone_number = require('./phone_number')
        en.cell_phone = require('./cell_phone')
        en.business = require('./business')
        en.commerce = require('./commerce')
        en.team = require('./team')
        en.hacker = require('./hacker')
        en.app = require('./app')
        en.finance = require('./finance')
        en.date = require('./date')
        en.system = require('./system')
      },
      {
        './address':
          '../node_modules/faker/lib/locales/en/address/index.js',
        './credit_card':
          '../node_modules/faker/lib/locales/en/credit_card/index.js',
        './company':
          '../node_modules/faker/lib/locales/en/company/index.js',
        './internet':
          '../node_modules/faker/lib/locales/en/internet/index.js',
        './database':
          '../node_modules/faker/lib/locales/en/database/index.js',
        './lorem': '../node_modules/faker/lib/locales/en/lorem/index.js',
        './name': '../node_modules/faker/lib/locales/en/name/index.js',
        './phone_number':
          '../node_modules/faker/lib/locales/en/phone_number/index.js',
        './cell_phone':
          '../node_modules/faker/lib/locales/en/cell_phone/index.js',
        './business':
          '../node_modules/faker/lib/locales/en/business/index.js',
        './commerce':
          '../node_modules/faker/lib/locales/en/commerce/index.js',
        './team': '../node_modules/faker/lib/locales/en/team/index.js',
        './hacker': '../node_modules/faker/lib/locales/en/hacker/index.js',
        './app': '../node_modules/faker/lib/locales/en/app/index.js',
        './finance':
          '../node_modules/faker/lib/locales/en/finance/index.js',
        './date': '../node_modules/faker/lib/locales/en/date/index.js',
        './system': '../node_modules/faker/lib/locales/en/system/index.js',
      },
    ],
    '../node_modules/faker/lib/locales/en_AU/name/first_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          'William',
          'Jack',
          'Oliver',
          'Joshua',
          'Thomas',
          'Lachlan',
          'Cooper',
          'Noah',
          'Ethan',
          'Lucas',
          'James',
          'Samuel',
          'Jacob',
          'Liam',
          'Alexander',
          'Benjamin',
          'Max',
          'Isaac',
          'Daniel',
          'Riley',
          'Ryan',
          'Charlie',
          'Tyler',
          'Jake',
          'Matthew',
          'Xavier',
          'Harry',
          'Jayden',
          'Nicholas',
          'Harrison',
          'Levi',
          'Luke',
          'Adam',
          'Henry',
          'Aiden',
          'Dylan',
          'Oscar',
          'Michael',
          'Jackson',
          'Logan',
          'Joseph',
          'Blake',
          'Nathan',
          'Connor',
          'Elijah',
          'Nate',
          'Archie',
          'Bailey',
          'Marcus',
          'Cameron',
          'Jordan',
          'Zachary',
          'Caleb',
          'Hunter',
          'Ashton',
          'Toby',
          'Aidan',
          'Hayden',
          'Mason',
          'Hamish',
          'Edward',
          'Angus',
          'Eli',
          'Sebastian',
          'Christian',
          'Patrick',
          'Andrew',
          'Anthony',
          'Luca',
          'Kai',
          'Beau',
          'Alex',
          'George',
          'Callum',
          'Finn',
          'Zac',
          'Mitchell',
          'Jett',
          'Jesse',
          'Gabriel',
          'Leo',
          'Declan',
          'Charles',
          'Jasper',
          'Jonathan',
          'Aaron',
          'Hugo',
          'David',
          'Christopher',
          'Chase',
          'Owen',
          'Justin',
          'Ali',
          'Darcy',
          'Lincoln',
          'Cody',
          'Phoenix',
          'Sam',
          'John',
          'Joel',
          'Isabella',
          'Ruby',
          'Chloe',
          'Olivia',
          'Charlotte',
          'Mia',
          'Lily',
          'Emily',
          'Ella',
          'Sienna',
          'Sophie',
          'Amelia',
          'Grace',
          'Ava',
          'Zoe',
          'Emma',
          'Sophia',
          'Matilda',
          'Hannah',
          'Jessica',
          'Lucy',
          'Georgia',
          'Sarah',
          'Abigail',
          'Zara',
          'Eva',
          'Scarlett',
          'Jasmine',
          'Chelsea',
          'Lilly',
          'Ivy',
          'Isla',
          'Evie',
          'Isabelle',
          'Maddison',
          'Layla',
          'Summer',
          'Annabelle',
          'Alexis',
          'Elizabeth',
          'Bella',
          'Holly',
          'Lara',
          'Madison',
          'Alyssa',
          'Maya',
          'Tahlia',
          'Claire',
          'Hayley',
          'Imogen',
          'Jade',
          'Ellie',
          'Sofia',
          'Addison',
          'Molly',
          'Phoebe',
          'Alice',
          'Savannah',
          'Gabriella',
          'Kayla',
          'Mikayla',
          'Abbey',
          'Eliza',
          'Willow',
          'Alexandra',
          'Poppy',
          'Samantha',
          'Stella',
          'Amy',
          'Amelie',
          'Anna',
          'Piper',
          'Gemma',
          'Isabel',
          'Victoria',
          'Stephanie',
          'Caitlin',
          'Heidi',
          'Paige',
          'Rose',
          'Amber',
          'Audrey',
          'Claudia',
          'Taylor',
          'Madeline',
          'Angelina',
          'Natalie',
          'Charli',
          'Lauren',
          'Ashley',
          'Violet',
          'Mackenzie',
          'Abby',
          'Skye',
          'Lillian',
          'Alana',
          'Lola',
          'Leah',
          'Eve',
          'Kiara',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en_AU/name/last_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Smith',
          'Jones',
          'Williams',
          'Brown',
          'Wilson',
          'Taylor',
          'Johnson',
          'White',
          'Martin',
          'Anderson',
          'Thompson',
          'Nguyen',
          'Thomas',
          'Walker',
          'Harris',
          'Lee',
          'Ryan',
          'Robinson',
          'Kelly',
          'King',
          'Davis',
          'Wright',
          'Evans',
          'Roberts',
          'Green',
          'Hall',
          'Wood',
          'Jackson',
          'Clarke',
          'Patel',
          'Khan',
          'Lewis',
          'James',
          'Phillips',
          'Mason',
          'Mitchell',
          'Rose',
          'Davies',
          'Rodriguez',
          'Cox',
          'Alexander',
          'Garden',
          'Campbell',
          'Johnston',
          'Moore',
          'Smyth',
          "O'neill",
          'Doherty',
          'Stewart',
          'Quinn',
          'Murphy',
          'Graham',
          'Mclaughlin',
          'Hamilton',
          'Murray',
          'Hughes',
          'Robertson',
          'Thomson',
          'Scott',
          'Macdonald',
          'Reid',
          'Clark',
          'Ross',
          'Young',
          'Watson',
          'Paterson',
          'Morrison',
          'Morgan',
          'Griffiths',
          'Edwards',
          'Rees',
          'Jenkins',
          'Owen',
          'Price',
          'Moss',
          'Richards',
          'Abbott',
          'Adams',
          'Armstrong',
          'Bahringer',
          'Bailey',
          'Barrows',
          'Bartell',
          'Bartoletti',
          'Barton',
          'Bauch',
          'Baumbach',
          'Bayer',
          'Beahan',
          'Beatty',
          'Becker',
          'Beier',
          'Berge',
          'Bergstrom',
          'Bode',
          'Bogan',
          'Borer',
          'Bosco',
          'Botsford',
          'Boyer',
          'Boyle',
          'Braun',
          'Bruen',
          'Carroll',
          'Carter',
          'Cartwright',
          'Casper',
          'Cassin',
          'Champlin',
          'Christiansen',
          'Cole',
          'Collier',
          'Collins',
          'Connelly',
          'Conroy',
          'Corkery',
          'Cormier',
          'Corwin',
          'Cronin',
          'Crooks',
          'Cruickshank',
          'Cummings',
          "D'amore",
          'Daniel',
          'Dare',
          'Daugherty',
          'Dickens',
          'Dickinson',
          'Dietrich',
          'Donnelly',
          'Dooley',
          'Douglas',
          'Doyle',
          'Durgan',
          'Ebert',
          'Emard',
          'Emmerich',
          'Erdman',
          'Ernser',
          'Fadel',
          'Fahey',
          'Farrell',
          'Fay',
          'Feeney',
          'Feil',
          'Ferry',
          'Fisher',
          'Flatley',
          'Gibson',
          'Gleason',
          'Glover',
          'Goldner',
          'Goodwin',
          'Grady',
          'Grant',
          'Greenfelder',
          'Greenholt',
          'Grimes',
          'Gutmann',
          'Hackett',
          'Hahn',
          'Haley',
          'Hammes',
          'Hand',
          'Hane',
          'Hansen',
          'Harber',
          'Hartmann',
          'Harvey',
          'Hayes',
          'Heaney',
          'Heathcote',
          'Heller',
          'Hermann',
          'Hermiston',
          'Hessel',
          'Hettinger',
          'Hickle',
          'Hill',
          'Hills',
          'Hoppe',
          'Howe',
          'Howell',
          'Hudson',
          'Huel',
          'Hyatt',
          'Jacobi',
          'Jacobs',
          'Jacobson',
          'Jerde',
          'Johns',
          'Keeling',
          'Kemmer',
          'Kessler',
          'Kiehn',
          'Kirlin',
          'Klein',
          'Koch',
          'Koelpin',
          'Kohler',
          'Koss',
          'Kovacek',
          'Kreiger',
          'Kris',
          'Kuhlman',
          'Kuhn',
          'Kulas',
          'Kunde',
          'Kutch',
          'Lakin',
          'Lang',
          'Langworth',
          'Larkin',
          'Larson',
          'Leannon',
          'Leffler',
          'Little',
          'Lockman',
          'Lowe',
          'Lynch',
          'Mann',
          'Marks',
          'Marvin',
          'Mayer',
          'Mccullough',
          'Mcdermott',
          'Mckenzie',
          'Miller',
          'Mills',
          'Monahan',
          'Morissette',
          'Mueller',
          'Muller',
          'Nader',
          'Nicolas',
          'Nolan',
          "O'connell",
          "O'conner",
          "O'hara",
          "O'keefe",
          'Olson',
          "O'reilly",
          'Parisian',
          'Parker',
          'Quigley',
          'Reilly',
          'Reynolds',
          'Rice',
          'Ritchie',
          'Rohan',
          'Rolfson',
          'Rowe',
          'Russel',
          'Rutherford',
          'Sanford',
          'Sauer',
          'Schmidt',
          'Schmitt',
          'Schneider',
          'Schroeder',
          'Schultz',
          'Shields',
          'Smitham',
          'Spencer',
          'Stanton',
          'Stark',
          'Stokes',
          'Swift',
          'Tillman',
          'Towne',
          'Tremblay',
          'Tromp',
          'Turcotte',
          'Turner',
          'Walsh',
          'Walter',
          'Ward',
          'Waters',
          'Weber',
          'Welch',
          'West',
          'Wilderman',
          'Wilkinson',
          'Williamson',
          'Windler',
          'Wolf',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en_AU/name/index.js': [
      function(require, module, exports) {
        var name = {}
        module['exports'] = name
        name.first_name = require('./first_name')
        name.last_name = require('./last_name')
      },
      {
        './first_name':
          '../node_modules/faker/lib/locales/en_AU/name/first_name.js',
        './last_name':
          '../node_modules/faker/lib/locales/en_AU/name/last_name.js',
      },
    ],
    '../node_modules/faker/lib/locales/en_AU/company/suffix.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Pty Ltd',
          'and Sons',
          'Corp',
          'Group',
          'Brothers',
          'Partners',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en_AU/company/index.js': [
      function(require, module, exports) {
        var company = {}
        module['exports'] = company
        company.suffix = require('./suffix')
      },
      {
        './suffix':
          '../node_modules/faker/lib/locales/en_AU/company/suffix.js',
      },
    ],
    '../node_modules/faker/lib/locales/en_AU/internet/domain_suffix.js': [
      function(require, module, exports) {
        module['exports'] = [
          'com.au',
          'com',
          'net.au',
          'net',
          'org.au',
          'org',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en_AU/internet/index.js': [
      function(require, module, exports) {
        var internet = {}
        module['exports'] = internet
        internet.domain_suffix = require('./domain_suffix')
      },
      {
        './domain_suffix':
          '../node_modules/faker/lib/locales/en_AU/internet/domain_suffix.js',
      },
    ],
    '../node_modules/faker/lib/locales/en_AU/address/state_abbr.js': [
      function(require, module, exports) {
        module['exports'] = [
          'NSW',
          'QLD',
          'NT',
          'SA',
          'WA',
          'TAS',
          'ACT',
          'VIC',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en_AU/address/state.js': [
      function(require, module, exports) {
        module['exports'] = [
          'New South Wales',
          'Queensland',
          'Northern Territory',
          'South Australia',
          'Western Australia',
          'Tasmania',
          'Australian Capital Territory',
          'Victoria',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en_AU/address/postcode.js': [
      function(require, module, exports) {
        module['exports'] = [
          '0###',
          '2###',
          '3###',
          '4###',
          '5###',
          '6###',
          '7###',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en_AU/address/building_number.js': [
      function(require, module, exports) {
        module['exports'] = ['####', '###', '##']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en_AU/address/street_suffix.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Avenue',
          'Boulevard',
          'Circle',
          'Circuit',
          'Court',
          'Crescent',
          'Crest',
          'Drive',
          'Estate Dr',
          'Grove',
          'Hill',
          'Island',
          'Junction',
          'Knoll',
          'Lane',
          'Loop',
          'Mall',
          'Manor',
          'Meadow',
          'Mews',
          'Parade',
          'Parkway',
          'Pass',
          'Place',
          'Plaza',
          'Ridge',
          'Road',
          'Run',
          'Square',
          'Station St',
          'Street',
          'Summit',
          'Terrace',
          'Track',
          'Trail',
          'View Rd',
          'Way',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en_AU/address/default_country.js': [
      function(require, module, exports) {
        module['exports'] = ['Australia']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en_AU/address/index.js': [
      function(require, module, exports) {
        var address = {}
        module['exports'] = address
        address.state_abbr = require('./state_abbr')
        address.state = require('./state')
        address.postcode = require('./postcode')
        address.building_number = require('./building_number')
        address.street_suffix = require('./street_suffix')
        address.default_country = require('./default_country')
      },
      {
        './state_abbr':
          '../node_modules/faker/lib/locales/en_AU/address/state_abbr.js',
        './state':
          '../node_modules/faker/lib/locales/en_AU/address/state.js',
        './postcode':
          '../node_modules/faker/lib/locales/en_AU/address/postcode.js',
        './building_number':
          '../node_modules/faker/lib/locales/en_AU/address/building_number.js',
        './street_suffix':
          '../node_modules/faker/lib/locales/en_AU/address/street_suffix.js',
        './default_country':
          '../node_modules/faker/lib/locales/en_AU/address/default_country.js',
      },
    ],
    '../node_modules/faker/lib/locales/en_AU/phone_number/formats.js': [
      function(require, module, exports) {
        module['exports'] = [
          '0# #### ####',
          '+61 # #### ####',
          '04## ### ###',
          '+61 4## ### ###',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en_AU/phone_number/index.js': [
      function(require, module, exports) {
        var phone_number = {}
        module['exports'] = phone_number
        phone_number.formats = require('./formats')
      },
      {
        './formats':
          '../node_modules/faker/lib/locales/en_AU/phone_number/formats.js',
      },
    ],
    '../node_modules/faker/lib/locales/en_AU/index.js': [
      function(require, module, exports) {
        var en_AU = {}
        module['exports'] = en_AU
        en_AU.title = 'Australia (English)'
        en_AU.name = require('./name')
        en_AU.company = require('./company')
        en_AU.internet = require('./internet')
        en_AU.address = require('./address')
        en_AU.phone_number = require('./phone_number')
      },
      {
        './name': '../node_modules/faker/lib/locales/en_AU/name/index.js',
        './company':
          '../node_modules/faker/lib/locales/en_AU/company/index.js',
        './internet':
          '../node_modules/faker/lib/locales/en_AU/internet/index.js',
        './address':
          '../node_modules/faker/lib/locales/en_AU/address/index.js',
        './phone_number':
          '../node_modules/faker/lib/locales/en_AU/phone_number/index.js',
      },
    ],
    '../node_modules/faker/lib/locales/en_BORK/lorem/words.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Boot',
          'I',
          'Nu',
          'Nur',
          'Tu',
          'Um',
          'a',
          'becoose-a',
          'boot',
          'bork',
          'burn',
          'chuuses',
          'cumplete-a',
          'cun',
          'cunseqooences',
          'curcoomstunces',
          'dee',
          'deeslikes',
          'denuoonceeng',
          'desures',
          'du',
          'eccuoont',
          'ectooel',
          'edfuntege-a',
          'efueeds',
          'egeeen',
          'ell',
          'ere-a',
          'feend',
          'foolt',
          'frum',
          'geefe-a',
          'gesh',
          'greet',
          'heem',
          'heppeeness',
          'hes',
          'hoo',
          'hoomun',
          'idea',
          'ifer',
          'in',
          'incuoonter',
          'injuy',
          'itselff',
          'ixcept',
          'ixemple-a',
          'ixerceese-a',
          'ixpleeen',
          'ixplurer',
          'ixpuoond',
          'ixtremely',
          'knoo',
          'lebureeuoos',
          'lufes',
          'meestekee',
          'mester-booeelder',
          'moost',
          'mun',
          'nu',
          'nut',
          'oobteeen',
          'oocceseeunelly',
          'ooccoor',
          'ooff',
          'oone-a',
          'oor',
          'peeen',
          'peeenffool',
          'physeecel',
          'pleesoore-a',
          'poorsooe-a',
          'poorsooes',
          'preeesing',
          'prucoore-a',
          'prudooces',
          'reeght',
          'reshunelly',
          'resooltunt',
          'sume-a',
          'teecheengs',
          'teke-a',
          'thees',
          'thet',
          'thuse-a',
          'treefiel',
          'troot',
          'tu',
          'tueel',
          'und',
          'undertekes',
          'unnuyeeng',
          'uny',
          'unyune-a',
          'us',
          'veell',
          'veet',
          'ves',
          'vheech',
          'vhu',
          'yuoo',
          'zee',
          'zeere-a',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en_BORK/lorem/index.js': [
      function(require, module, exports) {
        var lorem = {}
        module['exports'] = lorem
        lorem.words = require('./words')
      },
      {
        './words':
          '../node_modules/faker/lib/locales/en_BORK/lorem/words.js',
      },
    ],
    '../node_modules/faker/lib/locales/en_BORK/index.js': [
      function(require, module, exports) {
        var en_BORK = {}
        module['exports'] = en_BORK
        en_BORK.title = 'Bork (English)'
        en_BORK.lorem = require('./lorem')
      },
      {
        './lorem':
          '../node_modules/faker/lib/locales/en_BORK/lorem/index.js',
      },
    ],
    '../node_modules/faker/lib/locales/en_CA/address/state.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Alberta',
          'British Columbia',
          'Manitoba',
          'New Brunswick',
          'Newfoundland and Labrador',
          'Nova Scotia',
          'Northwest Territories',
          'Nunavut',
          'Ontario',
          'Prince Edward Island',
          'Quebec',
          'Saskatchewan',
          'Yukon',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en_CA/address/state_abbr.js': [
      function(require, module, exports) {
        module['exports'] = [
          'AB',
          'BC',
          'MB',
          'NB',
          'NL',
          'NS',
          'NU',
          'NT',
          'ON',
          'PE',
          'QC',
          'SK',
          'YT',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en_CA/address/default_country.js': [
      function(require, module, exports) {
        module['exports'] = ['Canada']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en_CA/address/postcode.js': [
      function(require, module, exports) {
        module['exports'] = ['?#? #?#']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en_CA/address/index.js': [
      function(require, module, exports) {
        var address = {}
        module['exports'] = address
        address.state = require('./state')
        address.state_abbr = require('./state_abbr')
        address.default_country = require('./default_country')
        address.postcode = require('./postcode.js')
      },
      {
        './state':
          '../node_modules/faker/lib/locales/en_CA/address/state.js',
        './state_abbr':
          '../node_modules/faker/lib/locales/en_CA/address/state_abbr.js',
        './default_country':
          '../node_modules/faker/lib/locales/en_CA/address/default_country.js',
        './postcode.js':
          '../node_modules/faker/lib/locales/en_CA/address/postcode.js',
      },
    ],
    '../node_modules/faker/lib/locales/en_CA/internet/free_email.js': [
      function(require, module, exports) {
        module['exports'] = ['gmail.com', 'yahoo.ca', 'hotmail.com']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en_CA/internet/domain_suffix.js': [
      function(require, module, exports) {
        module['exports'] = [
          'ca',
          'com',
          'biz',
          'info',
          'name',
          'net',
          'org',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en_CA/internet/index.js': [
      function(require, module, exports) {
        var internet = {}
        module['exports'] = internet
        internet.free_email = require('./free_email')
        internet.domain_suffix = require('./domain_suffix')
      },
      {
        './free_email':
          '../node_modules/faker/lib/locales/en_CA/internet/free_email.js',
        './domain_suffix':
          '../node_modules/faker/lib/locales/en_CA/internet/domain_suffix.js',
      },
    ],
    '../node_modules/faker/lib/locales/en_CA/phone_number/formats.js': [
      function(require, module, exports) {
        module['exports'] = [
          '###-###-####',
          '(###)###-####',
          '###.###.####',
          '1-###-###-####',
          '###-###-#### x###',
          '(###)###-#### x###',
          '1-###-###-#### x###',
          '###.###.#### x###',
          '###-###-#### x####',
          '(###)###-#### x####',
          '1-###-###-#### x####',
          '###.###.#### x####',
          '###-###-#### x#####',
          '(###)###-#### x#####',
          '1-###-###-#### x#####',
          '###.###.#### x#####',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en_CA/phone_number/index.js': [
      function(require, module, exports) {
        var phone_number = {}
        module['exports'] = phone_number
        phone_number.formats = require('./formats')
      },
      {
        './formats':
          '../node_modules/faker/lib/locales/en_CA/phone_number/formats.js',
      },
    ],
    '../node_modules/faker/lib/locales/en_CA/index.js': [
      function(require, module, exports) {
        var en_CA = {}
        module['exports'] = en_CA
        en_CA.title = 'Canada (English)'
        en_CA.address = require('./address')
        en_CA.internet = require('./internet')
        en_CA.phone_number = require('./phone_number')
      },
      {
        './address':
          '../node_modules/faker/lib/locales/en_CA/address/index.js',
        './internet':
          '../node_modules/faker/lib/locales/en_CA/internet/index.js',
        './phone_number':
          '../node_modules/faker/lib/locales/en_CA/phone_number/index.js',
      },
    ],
    '../node_modules/faker/lib/locales/en_GB/address/county.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Avon',
          'Bedfordshire',
          'Berkshire',
          'Borders',
          'Buckinghamshire',
          'Cambridgeshire',
          'Central',
          'Cheshire',
          'Cleveland',
          'Clwyd',
          'Cornwall',
          'County Antrim',
          'County Armagh',
          'County Down',
          'County Fermanagh',
          'County Londonderry',
          'County Tyrone',
          'Cumbria',
          'Derbyshire',
          'Devon',
          'Dorset',
          'Dumfries and Galloway',
          'Durham',
          'Dyfed',
          'East Sussex',
          'Essex',
          'Fife',
          'Gloucestershire',
          'Grampian',
          'Greater Manchester',
          'Gwent',
          'Gwynedd County',
          'Hampshire',
          'Herefordshire',
          'Hertfordshire',
          'Highlands and Islands',
          'Humberside',
          'Isle of Wight',
          'Kent',
          'Lancashire',
          'Leicestershire',
          'Lincolnshire',
          'Lothian',
          'Merseyside',
          'Mid Glamorgan',
          'Norfolk',
          'North Yorkshire',
          'Northamptonshire',
          'Northumberland',
          'Nottinghamshire',
          'Oxfordshire',
          'Powys',
          'Rutland',
          'Shropshire',
          'Somerset',
          'South Glamorgan',
          'South Yorkshire',
          'Staffordshire',
          'Strathclyde',
          'Suffolk',
          'Surrey',
          'Tayside',
          'Tyne and Wear',
          'Warwickshire',
          'West Glamorgan',
          'West Midlands',
          'West Sussex',
          'West Yorkshire',
          'Wiltshire',
          'Worcestershire',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en_GB/address/uk_country.js': [
      function(require, module, exports) {
        module['exports'] = [
          'England',
          'Scotland',
          'Wales',
          'Northern Ireland',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en_GB/address/default_country.js': [
      function(require, module, exports) {
        module['exports'] = [
          'England',
          'Scotland',
          'Wales',
          'Northern Ireland',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en_GB/address/postcode.js': [
      function(require, module, exports) {
        module['exports'] = ['??# #??', '??## #??']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en_GB/address/index.js': [
      function(require, module, exports) {
        var address = {}
        module['exports'] = address
        address.county = require('./county')
        address.uk_country = require('./uk_country')
        address.default_country = require('./default_country')
        address.postcode = require('./postcode')
      },
      {
        './county':
          '../node_modules/faker/lib/locales/en_GB/address/county.js',
        './uk_country':
          '../node_modules/faker/lib/locales/en_GB/address/uk_country.js',
        './default_country':
          '../node_modules/faker/lib/locales/en_GB/address/default_country.js',
        './postcode':
          '../node_modules/faker/lib/locales/en_GB/address/postcode.js',
      },
    ],
    '../node_modules/faker/lib/locales/en_GB/internet/domain_suffix.js': [
      function(require, module, exports) {
        module['exports'] = ['co.uk', 'com', 'biz', 'info', 'name']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en_GB/internet/index.js': [
      function(require, module, exports) {
        var internet = {}
        module['exports'] = internet
        internet.domain_suffix = require('./domain_suffix')
      },
      {
        './domain_suffix':
          '../node_modules/faker/lib/locales/en_GB/internet/domain_suffix.js',
      },
    ],
    '../node_modules/faker/lib/locales/en_GB/phone_number/formats.js': [
      function(require, module, exports) {
        module['exports'] = [
          '01#### #####',
          '01### ######',
          '01#1 ### ####',
          '011# ### ####',
          '02# #### ####',
          '03## ### ####',
          '055 #### ####',
          '056 #### ####',
          '0800 ### ####',
          '08## ### ####',
          '09## ### ####',
          '016977 ####',
          '01### #####',
          '0500 ######',
          '0800 ######',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en_GB/phone_number/index.js': [
      function(require, module, exports) {
        var phone_number = {}
        module['exports'] = phone_number
        phone_number.formats = require('./formats')
      },
      {
        './formats':
          '../node_modules/faker/lib/locales/en_GB/phone_number/formats.js',
      },
    ],
    '../node_modules/faker/lib/locales/en_GB/cell_phone/formats.js': [
      function(require, module, exports) {
        module['exports'] = [
          '074## ######',
          '075## ######',
          '076## ######',
          '077## ######',
          '078## ######',
          '079## ######',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en_GB/cell_phone/index.js': [
      function(require, module, exports) {
        var cell_phone = {}
        module['exports'] = cell_phone
        cell_phone.formats = require('./formats')
      },
      {
        './formats':
          '../node_modules/faker/lib/locales/en_GB/cell_phone/formats.js',
      },
    ],
    '../node_modules/faker/lib/locales/en_GB/index.js': [
      function(require, module, exports) {
        var en_GB = {}
        module['exports'] = en_GB
        en_GB.title = 'Great Britain (English)'
        en_GB.address = require('./address')
        en_GB.internet = require('./internet')
        en_GB.phone_number = require('./phone_number')
        en_GB.cell_phone = require('./cell_phone')
      },
      {
        './address':
          '../node_modules/faker/lib/locales/en_GB/address/index.js',
        './internet':
          '../node_modules/faker/lib/locales/en_GB/internet/index.js',
        './phone_number':
          '../node_modules/faker/lib/locales/en_GB/phone_number/index.js',
        './cell_phone':
          '../node_modules/faker/lib/locales/en_GB/cell_phone/index.js',
      },
    ],
    '../node_modules/faker/lib/locales/en_IE/address/county.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Carlow',
          'Cavan',
          'Clare',
          'Cork',
          'Donegal',
          'Dublin',
          'Galway',
          'Kerry',
          'Kildare',
          'Kilkenny',
          'Laois',
          'Leitrim',
          'Limerick',
          'Longford',
          'Louth',
          'Mayo',
          'Meath',
          'Monaghan',
          'Offaly',
          'Roscommon',
          'Sligo',
          'Tipperary',
          'Waterford',
          'Westmeath',
          'Wexford',
          'Wicklow',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en_IE/address/default_country.js': [
      function(require, module, exports) {
        module['exports'] = ['Ireland']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en_IE/address/index.js': [
      function(require, module, exports) {
        var address = {}
        module['exports'] = address
        address.county = require('./county')
        address.default_country = require('./default_country')
      },
      {
        './county':
          '../node_modules/faker/lib/locales/en_IE/address/county.js',
        './default_country':
          '../node_modules/faker/lib/locales/en_IE/address/default_country.js',
      },
    ],
    '../node_modules/faker/lib/locales/en_IE/internet/domain_suffix.js': [
      function(require, module, exports) {
        module['exports'] = ['ie', 'com', 'net', 'info', 'eu']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en_IE/internet/index.js': [
      function(require, module, exports) {
        var internet = {}
        module['exports'] = internet
        internet.domain_suffix = require('./domain_suffix')
      },
      {
        './domain_suffix':
          '../node_modules/faker/lib/locales/en_IE/internet/domain_suffix.js',
      },
    ],
    '../node_modules/faker/lib/locales/en_IE/phone_number/formats.js': [
      function(require, module, exports) {
        module['exports'] = [
          '01 #######',
          '021 #######',
          '022 #######',
          '023 #######',
          '024 #######',
          '025 #######',
          '026 #######',
          '027 #######',
          '028 #######',
          '029 #######',
          '0402 #######',
          '0404 #######',
          '041 #######',
          '042 #######',
          '043 #######',
          '044 #######',
          '045 #######',
          '046 #######',
          '047 #######',
          '049 #######',
          '0504 #######',
          '0505 #######',
          '051 #######',
          '052 #######',
          '053 #######',
          '056 #######',
          '057 #######',
          '058 #######',
          '059 #######',
          '061 #######',
          '062 #######',
          '063 #######',
          '064 #######',
          '065 #######',
          '066 #######',
          '067 #######',
          '068 #######',
          '069 #######',
          '071 #######',
          '074 #######',
          '090 #######',
          '091 #######',
          '093 #######',
          '094 #######',
          '095 #######',
          '096 #######',
          '097 #######',
          '098 #######',
          '099 #######',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en_IE/phone_number/index.js': [
      function(require, module, exports) {
        var phone_number = {}
        module['exports'] = phone_number
        phone_number.formats = require('./formats')
      },
      {
        './formats':
          '../node_modules/faker/lib/locales/en_IE/phone_number/formats.js',
      },
    ],
    '../node_modules/faker/lib/locales/en_IE/cell_phone/formats.js': [
      function(require, module, exports) {
        module['exports'] = [
          '082 ### ####',
          '083 ### ####',
          '085 ### ####',
          '086 ### ####',
          '087 ### ####',
          '089 ### ####',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en_IE/cell_phone/index.js': [
      function(require, module, exports) {
        var cell_phone = {}
        module['exports'] = cell_phone
        cell_phone.formats = require('./formats')
      },
      {
        './formats':
          '../node_modules/faker/lib/locales/en_IE/cell_phone/formats.js',
      },
    ],
    '../node_modules/faker/lib/locales/en_IE/index.js': [
      function(require, module, exports) {
        var en_IE = {}
        module['exports'] = en_IE
        en_IE.title = 'Ireland (English)'
        en_IE.address = require('./address')
        en_IE.internet = require('./internet')
        en_IE.phone_number = require('./phone_number')
        en_IE.cell_phone = require('./cell_phone')
      },
      {
        './address':
          '../node_modules/faker/lib/locales/en_IE/address/index.js',
        './internet':
          '../node_modules/faker/lib/locales/en_IE/internet/index.js',
        './phone_number':
          '../node_modules/faker/lib/locales/en_IE/phone_number/index.js',
        './cell_phone':
          '../node_modules/faker/lib/locales/en_IE/cell_phone/index.js',
      },
    ],
    '../node_modules/faker/lib/locales/en_IND/name/first_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Aadrika',
          'Aanandinii',
          'Aaratrika',
          'Aarya',
          'Arya',
          'Aashritha',
          'Aatmaja',
          'Atmaja',
          'Abhaya',
          'Adwitiya',
          'Agrata',
          'Ahilya',
          'Ahalya',
          'Aishani',
          'Akshainie',
          'Akshata',
          'Akshita',
          'Akula',
          'Ambar',
          'Amodini',
          'Amrita',
          'Amritambu',
          'Anala',
          'Anamika',
          'Ananda',
          'Anandamayi',
          'Ananta',
          'Anila',
          'Anjali',
          'Anjushri',
          'Anjushree',
          'Annapurna',
          'Anshula',
          'Anuja',
          'Anusuya',
          'Anasuya',
          'Anasooya',
          'Anwesha',
          'Apsara',
          'Aruna',
          'Asha',
          'Aasa',
          'Aasha',
          'Aslesha',
          'Atreyi',
          'Atreyee',
          'Avani',
          'Abani',
          'Avantika',
          'Ayushmati',
          'Baidehi',
          'Vaidehi',
          'Bala',
          'Baala',
          'Balamani',
          'Basanti',
          'Vasanti',
          'Bela',
          'Bhadra',
          'Bhagirathi',
          'Bhagwanti',
          'Bhagwati',
          'Bhamini',
          'Bhanumati',
          'Bhaanumati',
          'Bhargavi',
          'Bhavani',
          'Bhilangana',
          'Bilwa',
          'Bilva',
          'Buddhana',
          'Chakrika',
          'Chanda',
          'Chandi',
          'Chandni',
          'Chandini',
          'Chandani',
          'Chandra',
          'Chandira',
          'Chandrabhaga',
          'Chandrakala',
          'Chandrakin',
          'Chandramani',
          'Chandrani',
          'Chandraprabha',
          'Chandraswaroopa',
          'Chandravati',
          'Chapala',
          'Charumati',
          'Charvi',
          'Chatura',
          'Chitrali',
          'Chitramala',
          'Chitrangada',
          'Daksha',
          'Dakshayani',
          'Damayanti',
          'Darshwana',
          'Deepali',
          'Dipali',
          'Deeptimoyee',
          'Deeptimayee',
          'Devangana',
          'Devani',
          'Devasree',
          'Devi',
          'Daevi',
          'Devika',
          'Daevika',
          'Dhaanyalakshmi',
          'Dhanalakshmi',
          'Dhana',
          'Dhanadeepa',
          'Dhara',
          'Dharani',
          'Dharitri',
          'Dhatri',
          'Diksha',
          'Deeksha',
          'Divya',
          'Draupadi',
          'Dulari',
          'Durga',
          'Durgeshwari',
          'Ekaparnika',
          'Elakshi',
          'Enakshi',
          'Esha',
          'Eshana',
          'Eshita',
          'Gautami',
          'Gayatri',
          'Geeta',
          'Geetanjali',
          'Gitanjali',
          'Gemine',
          'Gemini',
          'Girja',
          'Girija',
          'Gita',
          'Hamsini',
          'Harinakshi',
          'Harita',
          'Heema',
          'Himadri',
          'Himani',
          'Hiranya',
          'Indira',
          'Jaimini',
          'Jaya',
          'Jyoti',
          'Jyotsana',
          'Kali',
          'Kalinda',
          'Kalpana',
          'Kalyani',
          'Kama',
          'Kamala',
          'Kamla',
          'Kanchan',
          'Kanishka',
          'Kanti',
          'Kashyapi',
          'Kumari',
          'Kumuda',
          'Lakshmi',
          'Laxmi',
          'Lalita',
          'Lavanya',
          'Leela',
          'Lila',
          'Leela',
          'Madhuri',
          'Malti',
          'Malati',
          'Mandakini',
          'Mandaakin',
          'Mangala',
          'Mangalya',
          'Mani',
          'Manisha',
          'Manjusha',
          'Meena',
          'Mina',
          'Meenakshi',
          'Minakshi',
          'Menka',
          'Menaka',
          'Mohana',
          'Mohini',
          'Nalini',
          'Nikita',
          'Ojaswini',
          'Omana',
          'Oormila',
          'Urmila',
          'Opalina',
          'Opaline',
          'Padma',
          'Parvati',
          'Poornima',
          'Purnima',
          'Pramila',
          'Prasanna',
          'Preity',
          'Prema',
          'Priya',
          'Priyala',
          'Pushti',
          'Radha',
          'Rageswari',
          'Rageshwari',
          'Rajinder',
          'Ramaa',
          'Rati',
          'Rita',
          'Rohana',
          'Rukhmani',
          'Rukmin',
          'Rupinder',
          'Sanya',
          'Sarada',
          'Sharda',
          'Sarala',
          'Sarla',
          'Saraswati',
          'Sarisha',
          'Saroja',
          'Shakti',
          'Shakuntala',
          'Shanti',
          'Sharmila',
          'Shashi',
          'Shashikala',
          'Sheela',
          'Shivakari',
          'Shobhana',
          'Shresth',
          'Shresthi',
          'Shreya',
          'Shreyashi',
          'Shridevi',
          'Shrishti',
          'Shubha',
          'Shubhaprada',
          'Siddhi',
          'Sitara',
          'Sloka',
          'Smita',
          'Smriti',
          'Soma',
          'Subhashini',
          'Subhasini',
          'Sucheta',
          'Sudeva',
          'Sujata',
          'Sukanya',
          'Suma',
          'Suma',
          'Sumitra',
          'Sunita',
          'Suryakantam',
          'Sushma',
          'Swara',
          'Swarnalata',
          'Sweta',
          'Shwet',
          'Tanirika',
          'Tanushree',
          'Tanushri',
          'Tanushri',
          'Tanya',
          'Tara',
          'Trisha',
          'Uma',
          'Usha',
          'Vaijayanti',
          'Vaijayanthi',
          'Baijayanti',
          'Vaishvi',
          'Vaishnavi',
          'Vaishno',
          'Varalakshmi',
          'Vasudha',
          'Vasundhara',
          'Veda',
          'Vedanshi',
          'Vidya',
          'Vimala',
          'Vrinda',
          'Vrund',
          'Aadi',
          'Aadidev',
          'Aadinath',
          'Aaditya',
          'Aagam',
          'Aagney',
          'Aamod',
          'Aanandaswarup',
          'Anand Swarup',
          'Aanjaneya',
          'Anjaneya',
          'Aaryan',
          'Aryan',
          'Aatmaj',
          'Aatreya',
          'Aayushmaan',
          'Aayushman',
          'Abhaidev',
          'Abhaya',
          'Abhirath',
          'Abhisyanta',
          'Acaryatanaya',
          'Achalesvara',
          'Acharyanandana',
          'Acharyasuta',
          'Achintya',
          'Achyut',
          'Adheesh',
          'Adhiraj',
          'Adhrit',
          'Adikavi',
          'Adinath',
          'Aditeya',
          'Aditya',
          'Adityanandan',
          'Adityanandana',
          'Adripathi',
          'Advaya',
          'Agasti',
          'Agastya',
          'Agneya',
          'Aagneya',
          'Agnimitra',
          'Agniprava',
          'Agnivesh',
          'Agrata',
          'Ajit',
          'Ajeet',
          'Akroor',
          'Akshaj',
          'Akshat',
          'Akshayakeerti',
          'Alok',
          'Aalok',
          'Amaranaath',
          'Amarnath',
          'Amaresh',
          'Ambar',
          'Ameyatma',
          'Amish',
          'Amogh',
          'Amrit',
          'Anaadi',
          'Anagh',
          'Anal',
          'Anand',
          'Aanand',
          'Anang',
          'Anil',
          'Anilaabh',
          'Anilabh',
          'Anish',
          'Ankal',
          'Anunay',
          'Anurag',
          'Anuraag',
          'Archan',
          'Arindam',
          'Arjun',
          'Arnesh',
          'Arun',
          'Ashlesh',
          'Ashok',
          'Atmanand',
          'Atmananda',
          'Avadhesh',
          'Baalaaditya',
          'Baladitya',
          'Baalagopaal',
          'Balgopal',
          'Balagopal',
          'Bahula',
          'Bakula',
          'Bala',
          'Balaaditya',
          'Balachandra',
          'Balagovind',
          'Bandhu',
          'Bandhul',
          'Bankim',
          'Bankimchandra',
          'Bhadrak',
          'Bhadraksh',
          'Bhadran',
          'Bhagavaan',
          'Bhagvan',
          'Bharadwaj',
          'Bhardwaj',
          'Bharat',
          'Bhargava',
          'Bhasvan',
          'Bhaasvan',
          'Bhaswar',
          'Bhaaswar',
          'Bhaumik',
          'Bhaves',
          'Bheeshma',
          'Bhisham',
          'Bhishma',
          'Bhima',
          'Bhoj',
          'Bhramar',
          'Bhudev',
          'Bhudeva',
          'Bhupati',
          'Bhoopati',
          'Bhoopat',
          'Bhupen',
          'Bhushan',
          'Bhooshan',
          'Bhushit',
          'Bhooshit',
          'Bhuvanesh',
          'Bhuvaneshwar',
          'Bilva',
          'Bodhan',
          'Brahma',
          'Brahmabrata',
          'Brahmanandam',
          'Brahmaanand',
          'Brahmdev',
          'Brajendra',
          'Brajesh',
          'Brijesh',
          'Birjesh',
          'Budhil',
          'Chakor',
          'Chakradhar',
          'Chakravartee',
          'Chakravarti',
          'Chanakya',
          'Chaanakya',
          'Chandak',
          'Chandan',
          'Chandra',
          'Chandraayan',
          'Chandrabhan',
          'Chandradev',
          'Chandraketu',
          'Chandramauli',
          'Chandramohan',
          'Chandran',
          'Chandranath',
          'Chapal',
          'Charak',
          'Charuchandra',
          'Chaaruchandra',
          'Charuvrat',
          'Chatur',
          'Chaturaanan',
          'Chaturbhuj',
          'Chetan',
          'Chaten',
          'Chaitan',
          'Chetanaanand',
          'Chidaakaash',
          'Chidaatma',
          'Chidambar',
          'Chidambaram',
          'Chidananda',
          'Chinmayanand',
          'Chinmayananda',
          'Chiranjeev',
          'Chiranjeeve',
          'Chitraksh',
          'Daiwik',
          'Daksha',
          'Damodara',
          'Dandak',
          'Dandapaani',
          'Darshan',
          'Datta',
          'Dayaamay',
          'Dayamayee',
          'Dayaananda',
          'Dayaanidhi',
          'Kin',
          'Deenabandhu',
          'Deepan',
          'Deepankar',
          'Dipankar',
          'Deependra',
          'Dipendra',
          'Deepesh',
          'Dipesh',
          'Deeptanshu',
          'Deeptendu',
          'Diptendu',
          'Deeptiman',
          'Deeptimoy',
          'Deeptimay',
          'Dev',
          'Deb',
          'Devadatt',
          'Devagya',
          'Devajyoti',
          'Devak',
          'Devdan',
          'Deven',
          'Devesh',
          'Deveshwar',
          'Devi',
          'Devvrat',
          'Dhananjay',
          'Dhanapati',
          'Dhanpati',
          'Dhanesh',
          'Dhanu',
          'Dhanvin',
          'Dharmaketu',
          'Dhruv',
          'Dhyanesh',
          'Dhyaneshwar',
          'Digambar',
          'Digambara',
          'Dinakar',
          'Dinkar',
          'Dinesh',
          'Divaakar',
          'Divakar',
          'Deevakar',
          'Divjot',
          'Dron',
          'Drona',
          'Dwaipayan',
          'Dwaipayana',
          'Eekalabya',
          'Ekalavya',
          'Ekaksh',
          'Ekaaksh',
          'Ekaling',
          'Ekdant',
          'Ekadant',
          'Gajaadhar',
          'Gajadhar',
          'Gajbaahu',
          'Gajabahu',
          'Ganak',
          'Ganaka',
          'Ganapati',
          'Gandharv',
          'Gandharva',
          'Ganesh',
          'Gangesh',
          'Garud',
          'Garuda',
          'Gati',
          'Gatik',
          'Gaurang',
          'Gauraang',
          'Gauranga',
          'Gouranga',
          'Gautam',
          'Gautama',
          'Goutam',
          'Ghanaanand',
          'Ghanshyam',
          'Ghanashyam',
          'Giri',
          'Girik',
          'Girika',
          'Girindra',
          'Giriraaj',
          'Giriraj',
          'Girish',
          'Gopal',
          'Gopaal',
          'Gopi',
          'Gopee',
          'Gorakhnath',
          'Gorakhanatha',
          'Goswamee',
          'Goswami',
          'Gotum',
          'Gautam',
          'Govinda',
          'Gobinda',
          'Gudakesha',
          'Gudakesa',
          'Gurdev',
          'Guru',
          'Hari',
          'Harinarayan',
          'Harit',
          'Himadri',
          'Hiranmay',
          'Hiranmaya',
          'Hiranya',
          'Inder',
          'Indra',
          'Indra',
          'Jagadish',
          'Jagadisha',
          'Jagathi',
          'Jagdeep',
          'Jagdish',
          'Jagmeet',
          'Jahnu',
          'Jai',
          'Javas',
          'Jay',
          'Jitendra',
          'Jitender',
          'Jyotis',
          'Kailash',
          'Kama',
          'Kamalesh',
          'Kamlesh',
          'Kanak',
          'Kanaka',
          'Kannan',
          'Kannen',
          'Karan',
          'Karthik',
          'Kartik',
          'Karunanidhi',
          'Kashyap',
          'Kiran',
          'Kirti',
          'Keerti',
          'Krishna',
          'Krishnadas',
          'Krishnadasa',
          'Kumar',
          'Lai',
          'Lakshman',
          'Laxman',
          'Lakshmidhar',
          'Lakshminath',
          'Lal',
          'Laal',
          'Mahendra',
          'Mohinder',
          'Mahesh',
          'Maheswar',
          'Mani',
          'Manik',
          'Manikya',
          'Manoj',
          'Marut',
          'Mayoor',
          'Meghnad',
          'Meghnath',
          'Mohan',
          'Mukesh',
          'Mukul',
          'Nagabhushanam',
          'Nanda',
          'Narayan',
          'Narendra',
          'Narinder',
          'Naveen',
          'Navin',
          'Nawal',
          'Naval',
          'Nimit',
          'Niranjan',
          'Nirbhay',
          'Niro',
          'Param',
          'Paramartha',
          'Pran',
          'Pranay',
          'Prasad',
          'Prathamesh',
          'Prayag',
          'Prem',
          'Puneet',
          'Purushottam',
          'Rahul',
          'Raj',
          'Rajan',
          'Rajendra',
          'Rajinder',
          'Rajiv',
          'Rakesh',
          'Ramesh',
          'Rameshwar',
          'Ranjit',
          'Ranjeet',
          'Ravi',
          'Ritesh',
          'Rohan',
          'Rohit',
          'Rudra',
          'Sachin',
          'Sameer',
          'Samir',
          'Sanjay',
          'Sanka',
          'Sarvin',
          'Satish',
          'Satyen',
          'Shankar',
          'Shantanu',
          'Shashi',
          'Sher',
          'Shiv',
          'Siddarth',
          'Siddhran',
          'Som',
          'Somu',
          'Somnath',
          'Subhash',
          'Subodh',
          'Suman',
          'Suresh',
          'Surya',
          'Suryakant',
          'Suryakanta',
          'Sushil',
          'Susheel',
          'Swami',
          'Swapnil',
          'Tapan',
          'Tara',
          'Tarun',
          'Tej',
          'Tejas',
          'Trilochan',
          'Trilochana',
          'Trilok',
          'Trilokesh',
          'Triloki',
          'Triloki Nath',
          'Trilokanath',
          'Tushar',
          'Udai',
          'Udit',
          'Ujjawal',
          'Ujjwal',
          'Umang',
          'Upendra',
          'Uttam',
          'Vasudev',
          'Vasudeva',
          'Vedang',
          'Vedanga',
          'Vidhya',
          'Vidur',
          'Vidhur',
          'Vijay',
          'Vimal',
          'Vinay',
          'Vishnu',
          'Bishnu',
          'Vishwamitra',
          'Vyas',
          'Yogendra',
          'Yoginder',
          'Yogesh',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en_IND/name/last_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Abbott',
          'Achari',
          'Acharya',
          'Adiga',
          'Agarwal',
          'Ahluwalia',
          'Ahuja',
          'Arora',
          'Asan',
          'Bandopadhyay',
          'Banerjee',
          'Bharadwaj',
          'Bhat',
          'Butt',
          'Bhattacharya',
          'Bhattathiri',
          'Chaturvedi',
          'Chattopadhyay',
          'Chopra',
          'Desai',
          'Deshpande',
          'Devar',
          'Dhawan',
          'Dubashi',
          'Dutta',
          'Dwivedi',
          'Embranthiri',
          'Ganaka',
          'Gandhi',
          'Gill',
          'Gowda',
          'Guha',
          'Guneta',
          'Gupta',
          'Iyer',
          'Iyengar',
          'Jain',
          'Jha',
          'Johar',
          'Joshi',
          'Kakkar',
          'Kaniyar',
          'Kapoor',
          'Kaul',
          'Kaur',
          'Khan',
          'Khanna',
          'Khatri',
          'Kocchar',
          'Mahajan',
          'Malik',
          'Marar',
          'Menon',
          'Mehra',
          'Mehrotra',
          'Mishra',
          'Mukhopadhyay',
          'Nayar',
          'Naik',
          'Nair',
          'Nambeesan',
          'Namboothiri',
          'Nehru',
          'Pandey',
          'Panicker',
          'Patel',
          'Patil',
          'Pilla',
          'Pillai',
          'Pothuvaal',
          'Prajapat',
          'Rana',
          'Reddy',
          'Saini',
          'Sethi',
          'Shah',
          'Sharma',
          'Shukla',
          'Singh',
          'Sinha',
          'Somayaji',
          'Tagore',
          'Talwar',
          'Tandon',
          'Trivedi',
          'Varrier',
          'Varma',
          'Varman',
          'Verma',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en_IND/name/index.js': [
      function(require, module, exports) {
        var name = {}
        module['exports'] = name
        name.first_name = require('./first_name')
        name.last_name = require('./last_name')
      },
      {
        './first_name':
          '../node_modules/faker/lib/locales/en_IND/name/first_name.js',
        './last_name':
          '../node_modules/faker/lib/locales/en_IND/name/last_name.js',
      },
    ],
    '../node_modules/faker/lib/locales/en_IND/address/postcode.js': [
      function(require, module, exports) {
        module['exports'] = ['?#? #?#']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en_IND/address/state.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Andra Pradesh',
          'Arunachal Pradesh',
          'Assam',
          'Bihar',
          'Chhattisgarh',
          'Goa',
          'Gujarat',
          'Haryana',
          'Himachal Pradesh',
          'Jammu and Kashmir',
          'Jharkhand',
          'Karnataka',
          'Kerala',
          'Madya Pradesh',
          'Maharashtra',
          'Manipur',
          'Meghalaya',
          'Mizoram',
          'Nagaland',
          'Orissa',
          'Punjab',
          'Rajasthan',
          'Sikkim',
          'Tamil Nadu',
          'Tripura',
          'Uttaranchal',
          'Uttar Pradesh',
          'West Bengal',
          'Andaman and Nicobar Islands',
          'Chandigarh',
          'Dadar and Nagar Haveli',
          'Daman and Diu',
          'Delhi',
          'Lakshadweep',
          'Pondicherry',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en_IND/address/state_abbr.js': [
      function(require, module, exports) {
        module['exports'] = [
          'AP',
          'AR',
          'AS',
          'BR',
          'CG',
          'DL',
          'GA',
          'GJ',
          'HR',
          'HP',
          'JK',
          'JS',
          'KA',
          'KL',
          'MP',
          'MH',
          'MN',
          'ML',
          'MZ',
          'NL',
          'OR',
          'PB',
          'RJ',
          'SK',
          'TN',
          'TR',
          'UK',
          'UP',
          'WB',
          'AN',
          'CH',
          'DN',
          'DD',
          'LD',
          'PY',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en_IND/address/default_country.js': [
      function(require, module, exports) {
        module['exports'] = [
          'India',
          'Indian Republic',
          'Bharat',
          'Hindustan',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en_IND/address/index.js': [
      function(require, module, exports) {
        var address = {}
        module['exports'] = address
        address.postcode = require('./postcode')
        address.state = require('./state')
        address.state_abbr = require('./state_abbr')
        address.default_country = require('./default_country')
      },
      {
        './postcode':
          '../node_modules/faker/lib/locales/en_IND/address/postcode.js',
        './state':
          '../node_modules/faker/lib/locales/en_IND/address/state.js',
        './state_abbr':
          '../node_modules/faker/lib/locales/en_IND/address/state_abbr.js',
        './default_country':
          '../node_modules/faker/lib/locales/en_IND/address/default_country.js',
      },
    ],
    '../node_modules/faker/lib/locales/en_IND/internet/free_email.js': [
      function(require, module, exports) {
        module['exports'] = ['gmail.com', 'yahoo.co.in', 'hotmail.com']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en_IND/internet/domain_suffix.js': [
      function(require, module, exports) {
        module['exports'] = [
          'in',
          'com',
          'biz',
          'info',
          'name',
          'net',
          'org',
          'co.in',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en_IND/internet/index.js': [
      function(require, module, exports) {
        var internet = {}
        module['exports'] = internet
        internet.free_email = require('./free_email')
        internet.domain_suffix = require('./domain_suffix')
      },
      {
        './free_email':
          '../node_modules/faker/lib/locales/en_IND/internet/free_email.js',
        './domain_suffix':
          '../node_modules/faker/lib/locales/en_IND/internet/domain_suffix.js',
      },
    ],
    '../node_modules/faker/lib/locales/en_IND/company/suffix.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Pvt Ltd',
          'Limited',
          'Ltd',
          'and Sons',
          'Corp',
          'Group',
          'Brothers',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en_IND/company/index.js': [
      function(require, module, exports) {
        var company = {}
        module['exports'] = company
        company.suffix = require('./suffix')
      },
      {
        './suffix':
          '../node_modules/faker/lib/locales/en_IND/company/suffix.js',
      },
    ],
    '../node_modules/faker/lib/locales/en_IND/phone_number/formats.js': [
      function(require, module, exports) {
        module['exports'] = [
          '+91###-###-####',
          '+91##########',
          '+91-###-#######',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en_IND/phone_number/index.js': [
      function(require, module, exports) {
        var phone_number = {}
        module['exports'] = phone_number
        phone_number.formats = require('./formats')
      },
      {
        './formats':
          '../node_modules/faker/lib/locales/en_IND/phone_number/formats.js',
      },
    ],
    '../node_modules/faker/lib/locales/en_IND/index.js': [
      function(require, module, exports) {
        var en_IND = {}
        module['exports'] = en_IND
        en_IND.title = 'India (English)'
        en_IND.name = require('./name')
        en_IND.address = require('./address')
        en_IND.internet = require('./internet')
        en_IND.company = require('./company')
        en_IND.phone_number = require('./phone_number')
      },
      {
        './name': '../node_modules/faker/lib/locales/en_IND/name/index.js',
        './address':
          '../node_modules/faker/lib/locales/en_IND/address/index.js',
        './internet':
          '../node_modules/faker/lib/locales/en_IND/internet/index.js',
        './company':
          '../node_modules/faker/lib/locales/en_IND/company/index.js',
        './phone_number':
          '../node_modules/faker/lib/locales/en_IND/phone_number/index.js',
      },
    ],
    '../node_modules/faker/lib/locales/en_US/internet/domain_suffix.js': [
      function(require, module, exports) {
        module['exports'] = [
          'com',
          'us',
          'biz',
          'info',
          'name',
          'net',
          'org',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en_US/internet/index.js': [
      function(require, module, exports) {
        var internet = {}
        module['exports'] = internet
        internet.domain_suffix = require('./domain_suffix')
      },
      {
        './domain_suffix':
          '../node_modules/faker/lib/locales/en_US/internet/domain_suffix.js',
      },
    ],
    '../node_modules/faker/lib/locales/en_US/address/default_country.js': [
      function(require, module, exports) {
        module['exports'] = [
          'United States',
          'United States of America',
          'USA',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en_US/address/postcode_by_state.js': [
      function(require, module, exports) {
        module['exports'] = {
          AL: '350##',
          AK: '995##',
          AS: '967##',
          AZ: '850##',
          AR: '717##',
          CA: '900##',
          CO: '800##',
          CT: '061##',
          DC: '204##',
          DE: '198##',
          FL: '322##',
          GA: '301##',
          HI: '967##',
          ID: '832##',
          IL: '600##',
          IN: '463##',
          IA: '510##',
          KS: '666##',
          KY: '404##',
          LA: '701##',
          ME: '042##',
          MD: '210##',
          MA: '026##',
          MI: '480##',
          MN: '555##',
          MS: '387##',
          MO: '650##',
          MT: '590##',
          NE: '688##',
          NV: '898##',
          NH: '036##',
          NJ: '076##',
          NM: '880##',
          NY: '122##',
          NC: '288##',
          ND: '586##',
          OH: '444##',
          OK: '730##',
          OR: '979##',
          PA: '186##',
          RI: '029##',
          SC: '299##',
          SD: '577##',
          TN: '383##',
          TX: '798##',
          UT: '847##',
          VT: '050##',
          VA: '222##',
          WA: '990##',
          WV: '247##',
          WI: '549##',
          WY: '831##',
        }
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en_US/address/index.js': [
      function(require, module, exports) {
        var address = {}
        module['exports'] = address
        address.default_country = require('./default_country')
        address.postcode_by_state = require('./postcode_by_state')
      },
      {
        './default_country':
          '../node_modules/faker/lib/locales/en_US/address/default_country.js',
        './postcode_by_state':
          '../node_modules/faker/lib/locales/en_US/address/postcode_by_state.js',
      },
    ],
    '../node_modules/faker/lib/locales/en_US/phone_number/area_code.js': [
      function(require, module, exports) {
        module['exports'] = [
          '201',
          '202',
          '203',
          '205',
          '206',
          '207',
          '208',
          '209',
          '210',
          '212',
          '213',
          '214',
          '215',
          '216',
          '217',
          '218',
          '219',
          '224',
          '225',
          '227',
          '228',
          '229',
          '231',
          '234',
          '239',
          '240',
          '248',
          '251',
          '252',
          '253',
          '254',
          '256',
          '260',
          '262',
          '267',
          '269',
          '270',
          '276',
          '281',
          '283',
          '301',
          '302',
          '303',
          '304',
          '305',
          '307',
          '308',
          '309',
          '310',
          '312',
          '313',
          '314',
          '315',
          '316',
          '317',
          '318',
          '319',
          '320',
          '321',
          '323',
          '330',
          '331',
          '334',
          '336',
          '337',
          '339',
          '347',
          '351',
          '352',
          '360',
          '361',
          '386',
          '401',
          '402',
          '404',
          '405',
          '406',
          '407',
          '408',
          '409',
          '410',
          '412',
          '413',
          '414',
          '415',
          '417',
          '419',
          '423',
          '424',
          '425',
          '434',
          '435',
          '440',
          '443',
          '445',
          '464',
          '469',
          '470',
          '475',
          '478',
          '479',
          '480',
          '484',
          '501',
          '502',
          '503',
          '504',
          '505',
          '507',
          '508',
          '509',
          '510',
          '512',
          '513',
          '515',
          '516',
          '517',
          '518',
          '520',
          '530',
          '540',
          '541',
          '551',
          '557',
          '559',
          '561',
          '562',
          '563',
          '564',
          '567',
          '570',
          '571',
          '573',
          '574',
          '580',
          '585',
          '586',
          '601',
          '602',
          '603',
          '605',
          '606',
          '607',
          '608',
          '609',
          '610',
          '612',
          '614',
          '615',
          '616',
          '617',
          '618',
          '619',
          '620',
          '623',
          '626',
          '630',
          '631',
          '636',
          '641',
          '646',
          '650',
          '651',
          '660',
          '661',
          '662',
          '667',
          '678',
          '682',
          '701',
          '702',
          '703',
          '704',
          '706',
          '707',
          '708',
          '712',
          '713',
          '714',
          '715',
          '716',
          '717',
          '718',
          '719',
          '720',
          '724',
          '727',
          '731',
          '732',
          '734',
          '737',
          '740',
          '754',
          '757',
          '760',
          '763',
          '765',
          '770',
          '772',
          '773',
          '774',
          '775',
          '781',
          '785',
          '786',
          '801',
          '802',
          '803',
          '804',
          '805',
          '806',
          '808',
          '810',
          '812',
          '813',
          '814',
          '815',
          '816',
          '817',
          '818',
          '828',
          '830',
          '831',
          '832',
          '835',
          '843',
          '845',
          '847',
          '848',
          '850',
          '856',
          '857',
          '858',
          '859',
          '860',
          '862',
          '863',
          '864',
          '865',
          '870',
          '872',
          '878',
          '901',
          '903',
          '904',
          '906',
          '907',
          '908',
          '909',
          '910',
          '912',
          '913',
          '914',
          '915',
          '916',
          '917',
          '918',
          '919',
          '920',
          '925',
          '928',
          '931',
          '936',
          '937',
          '940',
          '941',
          '947',
          '949',
          '952',
          '954',
          '956',
          '959',
          '970',
          '971',
          '972',
          '973',
          '975',
          '978',
          '979',
          '980',
          '984',
          '985',
          '989',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en_US/phone_number/exchange_code.js': [
      function(require, module, exports) {
        module['exports'] = [
          '201',
          '202',
          '203',
          '205',
          '206',
          '207',
          '208',
          '209',
          '210',
          '212',
          '213',
          '214',
          '215',
          '216',
          '217',
          '218',
          '219',
          '224',
          '225',
          '227',
          '228',
          '229',
          '231',
          '234',
          '239',
          '240',
          '248',
          '251',
          '252',
          '253',
          '254',
          '256',
          '260',
          '262',
          '267',
          '269',
          '270',
          '276',
          '281',
          '283',
          '301',
          '302',
          '303',
          '304',
          '305',
          '307',
          '308',
          '309',
          '310',
          '312',
          '313',
          '314',
          '315',
          '316',
          '317',
          '318',
          '319',
          '320',
          '321',
          '323',
          '330',
          '331',
          '334',
          '336',
          '337',
          '339',
          '347',
          '351',
          '352',
          '360',
          '361',
          '386',
          '401',
          '402',
          '404',
          '405',
          '406',
          '407',
          '408',
          '409',
          '410',
          '412',
          '413',
          '414',
          '415',
          '417',
          '419',
          '423',
          '424',
          '425',
          '434',
          '435',
          '440',
          '443',
          '445',
          '464',
          '469',
          '470',
          '475',
          '478',
          '479',
          '480',
          '484',
          '501',
          '502',
          '503',
          '504',
          '505',
          '507',
          '508',
          '509',
          '510',
          '512',
          '513',
          '515',
          '516',
          '517',
          '518',
          '520',
          '530',
          '540',
          '541',
          '551',
          '557',
          '559',
          '561',
          '562',
          '563',
          '564',
          '567',
          '570',
          '571',
          '573',
          '574',
          '580',
          '585',
          '586',
          '601',
          '602',
          '603',
          '605',
          '606',
          '607',
          '608',
          '609',
          '610',
          '612',
          '614',
          '615',
          '616',
          '617',
          '618',
          '619',
          '620',
          '623',
          '626',
          '630',
          '631',
          '636',
          '641',
          '646',
          '650',
          '651',
          '660',
          '661',
          '662',
          '667',
          '678',
          '682',
          '701',
          '702',
          '703',
          '704',
          '706',
          '707',
          '708',
          '712',
          '713',
          '714',
          '715',
          '716',
          '717',
          '718',
          '719',
          '720',
          '724',
          '727',
          '731',
          '732',
          '734',
          '737',
          '740',
          '754',
          '757',
          '760',
          '763',
          '765',
          '770',
          '772',
          '773',
          '774',
          '775',
          '781',
          '785',
          '786',
          '801',
          '802',
          '803',
          '804',
          '805',
          '806',
          '808',
          '810',
          '812',
          '813',
          '814',
          '815',
          '816',
          '817',
          '818',
          '828',
          '830',
          '831',
          '832',
          '835',
          '843',
          '845',
          '847',
          '848',
          '850',
          '856',
          '857',
          '858',
          '859',
          '860',
          '862',
          '863',
          '864',
          '865',
          '870',
          '872',
          '878',
          '901',
          '903',
          '904',
          '906',
          '907',
          '908',
          '909',
          '910',
          '912',
          '913',
          '914',
          '915',
          '916',
          '917',
          '918',
          '919',
          '920',
          '925',
          '928',
          '931',
          '936',
          '937',
          '940',
          '941',
          '947',
          '949',
          '952',
          '954',
          '956',
          '959',
          '970',
          '971',
          '972',
          '973',
          '975',
          '978',
          '979',
          '980',
          '984',
          '985',
          '989',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en_US/phone_number/index.js': [
      function(require, module, exports) {
        var phone_number = {}
        module['exports'] = phone_number
        phone_number.area_code = require('./area_code')
        phone_number.exchange_code = require('./exchange_code')
      },
      {
        './area_code':
          '../node_modules/faker/lib/locales/en_US/phone_number/area_code.js',
        './exchange_code':
          '../node_modules/faker/lib/locales/en_US/phone_number/exchange_code.js',
      },
    ],
    '../node_modules/faker/lib/locales/en_US/index.js': [
      function(require, module, exports) {
        var en_US = {}
        module['exports'] = en_US
        en_US.title = 'United States (English)'
        en_US.internet = require('./internet')
        en_US.address = require('./address')
        en_US.phone_number = require('./phone_number')
      },
      {
        './internet':
          '../node_modules/faker/lib/locales/en_US/internet/index.js',
        './address':
          '../node_modules/faker/lib/locales/en_US/address/index.js',
        './phone_number':
          '../node_modules/faker/lib/locales/en_US/phone_number/index.js',
      },
    ],
    '../node_modules/faker/lib/locales/en_au_ocker/name/first_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Charlotte',
          'Ava',
          'Chloe',
          'Emily',
          'Olivia',
          'Zoe',
          'Lily',
          'Sophie',
          'Amelia',
          'Sofia',
          'Ella',
          'Isabella',
          'Ruby',
          'Sienna',
          'Mia+3',
          'Grace',
          'Emma',
          'Ivy',
          'Layla',
          'Abigail',
          'Isla',
          'Hannah',
          'Zara',
          'Lucy',
          'Evie',
          'Annabelle',
          'Madison',
          'Alice',
          'Georgia',
          'Maya',
          'Madeline',
          'Audrey',
          'Scarlett',
          'Isabelle',
          'Chelsea',
          'Mila',
          'Holly',
          'Indiana',
          'Poppy',
          'Harper',
          'Sarah',
          'Alyssa',
          'Jasmine',
          'Imogen',
          'Hayley',
          'Pheobe',
          'Eva',
          'Evelyn',
          'Mackenzie',
          'Ayla',
          'Oliver',
          'Jack',
          'Jackson',
          'William',
          'Ethan',
          'Charlie',
          'Lucas',
          'Cooper',
          'Lachlan',
          'Noah',
          'Liam',
          'Alexander',
          'Max',
          'Isaac',
          'Thomas',
          'Xavier',
          'Oscar',
          'Benjamin',
          'Aiden',
          'Mason',
          'Samuel',
          'James',
          'Levi',
          'Riley',
          'Harrison',
          'Ryan',
          'Henry',
          'Jacob',
          'Joshua',
          'Leo',
          'Zach',
          'Harry',
          'Hunter',
          'Flynn',
          'Archie',
          'Tyler',
          'Elijah',
          'Hayden',
          'Jayden',
          'Blake',
          'Archer',
          'Ashton',
          'Sebastian',
          'Zachery',
          'Lincoln',
          'Mitchell',
          'Luca',
          'Nathan',
          'Kai',
          'Connor',
          'Tom',
          'Nigel',
          'Matt',
          'Sean',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en_au_ocker/name/last_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Smith',
          'Jones',
          'Williams',
          'Brown',
          'Wilson',
          'Taylor',
          'Morton',
          'White',
          'Martin',
          'Anderson',
          'Thompson',
          'Nguyen',
          'Thomas',
          'Walker',
          'Harris',
          'Lee',
          'Ryan',
          'Robinson',
          'Kelly',
          'King',
          'Rausch',
          'Ridge',
          'Connolly',
          'LeQuesne',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en_au_ocker/name/ocker_first_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Bazza',
          'Bluey',
          'Davo',
          'Johno',
          'Shano',
          'Shazza',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en_au_ocker/name/index.js': [
      function(require, module, exports) {
        var name = {}
        module['exports'] = name
        name.first_name = require('./first_name')
        name.last_name = require('./last_name')
        name.ocker_first_name = require('./ocker_first_name')
      },
      {
        './first_name':
          '../node_modules/faker/lib/locales/en_au_ocker/name/first_name.js',
        './last_name':
          '../node_modules/faker/lib/locales/en_au_ocker/name/last_name.js',
        './ocker_first_name':
          '../node_modules/faker/lib/locales/en_au_ocker/name/ocker_first_name.js',
      },
    ],
    '../node_modules/faker/lib/locales/en_au_ocker/company/suffix.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Pty Ltd',
          'and Sons',
          'Corp',
          'Group',
          'Brothers',
          'Partners',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en_au_ocker/company/index.js': [
      function(require, module, exports) {
        var company = {}
        module['exports'] = company
        company.suffix = require('./suffix')
      },
      {
        './suffix':
          '../node_modules/faker/lib/locales/en_au_ocker/company/suffix.js',
      },
    ],
    '../node_modules/faker/lib/locales/en_au_ocker/internet/domain_suffix.js': [
      function(require, module, exports) {
        module['exports'] = [
          'com.au',
          'com',
          'net.au',
          'net',
          'org.au',
          'org',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en_au_ocker/internet/index.js': [
      function(require, module, exports) {
        var internet = {}
        module['exports'] = internet
        internet.domain_suffix = require('./domain_suffix')
      },
      {
        './domain_suffix':
          '../node_modules/faker/lib/locales/en_au_ocker/internet/domain_suffix.js',
      },
    ],
    '../node_modules/faker/lib/locales/en_au_ocker/address/street_root.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Ramsay Street',
          'Bonnie Doon',
          'Cavill Avenue',
          'Queen Street',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en_au_ocker/address/street_name.js': [
      function(require, module, exports) {
        module['exports'] = ['#{street_root}']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en_au_ocker/address/city_prefix.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Bondi',
          'Burleigh Heads',
          'Carlton',
          'Fitzroy',
          'Fremantle',
          'Glenelg',
          'Manly',
          'Noosa',
          'Stones Corner',
          'St Kilda',
          'Surry Hills',
          'Yarra Valley',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en_au_ocker/address/city.js': [
      function(require, module, exports) {
        module['exports'] = ['#{city_prefix}']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en_au_ocker/address/state_abbr.js': [
      function(require, module, exports) {
        module['exports'] = [
          'NSW',
          'QLD',
          'NT',
          'SA',
          'WA',
          'TAS',
          'ACT',
          'VIC',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en_au_ocker/address/region.js': [
      function(require, module, exports) {
        module['exports'] = [
          'South East Queensland',
          'Wide Bay Burnett',
          'Margaret River',
          'Port Pirie',
          'Gippsland',
          'Elizabeth',
          'Barossa',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en_au_ocker/address/state.js': [
      function(require, module, exports) {
        module['exports'] = [
          'New South Wales',
          'Queensland',
          'Northern Territory',
          'South Australia',
          'Western Australia',
          'Tasmania',
          'Australian Capital Territory',
          'Victoria',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en_au_ocker/address/postcode.js': [
      function(require, module, exports) {
        module['exports'] = [
          '0###',
          '2###',
          '3###',
          '4###',
          '5###',
          '6###',
          '7###',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en_au_ocker/address/building_number.js': [
      function(require, module, exports) {
        module['exports'] = ['####', '###', '##']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en_au_ocker/address/street_suffix.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Avenue',
          'Boulevard',
          'Circle',
          'Circuit',
          'Court',
          'Crescent',
          'Crest',
          'Drive',
          'Estate Dr',
          'Grove',
          'Hill',
          'Island',
          'Junction',
          'Knoll',
          'Lane',
          'Loop',
          'Mall',
          'Manor',
          'Meadow',
          'Mews',
          'Parade',
          'Parkway',
          'Pass',
          'Place',
          'Plaza',
          'Ridge',
          'Road',
          'Run',
          'Square',
          'Station St',
          'Street',
          'Summit',
          'Terrace',
          'Track',
          'Trail',
          'View Rd',
          'Way',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en_au_ocker/address/default_country.js': [
      function(require, module, exports) {
        module['exports'] = ['Australia']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en_au_ocker/address/index.js': [
      function(require, module, exports) {
        var address = {}
        module['exports'] = address
        address.street_root = require('./street_root')
        address.street_name = require('./street_name')
        address.city_prefix = require('./city_prefix')
        address.city = require('./city')
        address.state_abbr = require('./state_abbr')
        address.region = require('./region')
        address.state = require('./state')
        address.postcode = require('./postcode')
        address.building_number = require('./building_number')
        address.street_suffix = require('./street_suffix')
        address.default_country = require('./default_country')
      },
      {
        './street_root':
          '../node_modules/faker/lib/locales/en_au_ocker/address/street_root.js',
        './street_name':
          '../node_modules/faker/lib/locales/en_au_ocker/address/street_name.js',
        './city_prefix':
          '../node_modules/faker/lib/locales/en_au_ocker/address/city_prefix.js',
        './city':
          '../node_modules/faker/lib/locales/en_au_ocker/address/city.js',
        './state_abbr':
          '../node_modules/faker/lib/locales/en_au_ocker/address/state_abbr.js',
        './region':
          '../node_modules/faker/lib/locales/en_au_ocker/address/region.js',
        './state':
          '../node_modules/faker/lib/locales/en_au_ocker/address/state.js',
        './postcode':
          '../node_modules/faker/lib/locales/en_au_ocker/address/postcode.js',
        './building_number':
          '../node_modules/faker/lib/locales/en_au_ocker/address/building_number.js',
        './street_suffix':
          '../node_modules/faker/lib/locales/en_au_ocker/address/street_suffix.js',
        './default_country':
          '../node_modules/faker/lib/locales/en_au_ocker/address/default_country.js',
      },
    ],
    '../node_modules/faker/lib/locales/en_au_ocker/phone_number/formats.js': [
      function(require, module, exports) {
        module['exports'] = [
          '0# #### ####',
          '+61 # #### ####',
          '04## ### ###',
          '+61 4## ### ###',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/en_au_ocker/phone_number/index.js': [
      function(require, module, exports) {
        var phone_number = {}
        module['exports'] = phone_number
        phone_number.formats = require('./formats')
      },
      {
        './formats':
          '../node_modules/faker/lib/locales/en_au_ocker/phone_number/formats.js',
      },
    ],
    '../node_modules/faker/lib/locales/en_au_ocker/index.js': [
      function(require, module, exports) {
        var en_au_ocker = {}
        module['exports'] = en_au_ocker
        en_au_ocker.title = 'Australia Ocker (English)'
        en_au_ocker.name = require('./name')
        en_au_ocker.company = require('./company')
        en_au_ocker.internet = require('./internet')
        en_au_ocker.address = require('./address')
        en_au_ocker.phone_number = require('./phone_number')
      },
      {
        './name':
          '../node_modules/faker/lib/locales/en_au_ocker/name/index.js',
        './company':
          '../node_modules/faker/lib/locales/en_au_ocker/company/index.js',
        './internet':
          '../node_modules/faker/lib/locales/en_au_ocker/internet/index.js',
        './address':
          '../node_modules/faker/lib/locales/en_au_ocker/address/index.js',
        './phone_number':
          '../node_modules/faker/lib/locales/en_au_ocker/phone_number/index.js',
      },
    ],
    '../node_modules/faker/lib/locales/es/address/city_prefix.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Parla',
          'Telde',
          'Baracaldo',
          'San Fernando',
          'Torrevieja',
          'Lugo',
          'Santiago de Compostela',
          'Gerona',
          'Cáceres',
          'Lorca',
          'Coslada',
          'Talavera de la Reina',
          'El Puerto de Santa María',
          'Cornellá de Llobregat',
          'Avilés',
          'Palencia',
          'Gecho',
          'Orihuela',
          'Pontevedra',
          'Pozuelo de Alarcón',
          'Toledo',
          'El Ejido',
          'Guadalajara',
          'Gandía',
          'Ceuta',
          'Ferrol',
          'Chiclana de la Frontera',
          'Manresa',
          'Roquetas de Mar',
          'Ciudad Real',
          'Rubí',
          'Benidorm',
          'San Sebastían de los Reyes',
          'Ponferrada',
          'Zamora',
          'Alcalá de Guadaira',
          'Fuengirola',
          'Mijas',
          'Sanlúcar de Barrameda',
          'La Línea de la Concepción',
          'Majadahonda',
          'Sagunto',
          'El Prat de LLobregat',
          'Viladecans',
          'Linares',
          'Alcoy',
          'Irún',
          'Estepona',
          'Torremolinos',
          'Rivas-Vaciamadrid',
          'Molina de Segura',
          'Paterna',
          'Granollers',
          'Santa Lucía de Tirajana',
          'Motril',
          'Cerdañola del Vallés',
          'Arrecife',
          'Segovia',
          'Torrelavega',
          'Elda',
          'Mérida',
          'Ávila',
          'Valdemoro',
          'Cuenta',
          'Collado Villalba',
          'Benalmádena',
          'Mollet del Vallés',
          'Puertollano',
          'Madrid',
          'Barcelona',
          'Valencia',
          'Sevilla',
          'Zaragoza',
          'Málaga',
          'Murcia',
          'Palma de Mallorca',
          'Las Palmas de Gran Canaria',
          'Bilbao',
          'Córdoba',
          'Alicante',
          'Valladolid',
          'Vigo',
          'Gijón',
          'Hospitalet de LLobregat',
          'La Coruña',
          'Granada',
          'Vitoria',
          'Elche',
          'Santa Cruz de Tenerife',
          'Oviedo',
          'Badalona',
          'Cartagena',
          'Móstoles',
          'Jerez de la Frontera',
          'Tarrasa',
          'Sabadell',
          'Alcalá de Henares',
          'Pamplona',
          'Fuenlabrada',
          'Almería',
          'San Sebastián',
          'Leganés',
          'Santander',
          'Burgos',
          'Castellón de la Plana',
          'Alcorcón',
          'Albacete',
          'Getafe',
          'Salamanca',
          'Huelva',
          'Logroño',
          'Badajoz',
          'San Cristróbal de la Laguna',
          'León',
          'Tarragona',
          'Cádiz',
          'Lérida',
          'Marbella',
          'Mataró',
          'Dos Hermanas',
          'Santa Coloma de Gramanet',
          'Jaén',
          'Algeciras',
          'Torrejón de Ardoz',
          'Orense',
          'Alcobendas',
          'Reus',
          'Calahorra',
          'Inca',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/es/address/country.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Afganistán',
          'Albania',
          'Argelia',
          'Andorra',
          'Angola',
          'Argentina',
          'Armenia',
          'Aruba',
          'Australia',
          'Austria',
          'Azerbayán',
          'Bahamas',
          'Barein',
          'Bangladesh',
          'Barbados',
          'Bielorusia',
          'Bélgica',
          'Belice',
          'Bermuda',
          'Bután',
          'Bolivia',
          'Bosnia Herzegovina',
          'Botswana',
          'Brasil',
          'Bulgaria',
          'Burkina Faso',
          'Burundi',
          'Camboya',
          'Camerún',
          'Canada',
          'Cabo Verde',
          'Islas Caimán',
          'Chad',
          'Chile',
          'China',
          'Isla de Navidad',
          'Colombia',
          'Comodos',
          'Congo',
          'Costa Rica',
          'Costa de Marfil',
          'Croacia',
          'Cuba',
          'Chipre',
          'República Checa',
          'Dinamarca',
          'Dominica',
          'República Dominicana',
          'Ecuador',
          'Egipto',
          'El Salvador',
          'Guinea Ecuatorial',
          'Eritrea',
          'Estonia',
          'Etiopía',
          'Islas Faro',
          'Fiji',
          'Finlandia',
          'Francia',
          'Gabón',
          'Gambia',
          'Georgia',
          'Alemania',
          'Ghana',
          'Grecia',
          'Groenlandia',
          'Granada',
          'Guadalupe',
          'Guam',
          'Guatemala',
          'Guinea',
          'Guinea-Bisau',
          'Guayana',
          'Haiti',
          'Honduras',
          'Hong Kong',
          'Hungria',
          'Islandia',
          'India',
          'Indonesia',
          'Iran',
          'Irak',
          'Irlanda',
          'Italia',
          'Jamaica',
          'Japón',
          'Jordania',
          'Kazajistan',
          'Kenia',
          'Kiribati',
          'Corea',
          'Kuwait',
          'Letonia',
          'Líbano',
          'Liberia',
          'Liechtenstein',
          'Lituania',
          'Luxemburgo',
          'Macao',
          'Macedonia',
          'Madagascar',
          'Malawi',
          'Malasia',
          'Maldivas',
          'Mali',
          'Malta',
          'Martinica',
          'Mauritania',
          'Méjico',
          'Micronesia',
          'Moldavia',
          'Mónaco',
          'Mongolia',
          'Montenegro',
          'Montserrat',
          'Marruecos',
          'Mozambique',
          'Namibia',
          'Nauru',
          'Nepal',
          'Holanda',
          'Nueva Zelanda',
          'Nicaragua',
          'Niger',
          'Nigeria',
          'Noruega',
          'Omán',
          'Pakistan',
          'Panamá',
          'Papúa Nueva Guinea',
          'Paraguay',
          'Perú',
          'Filipinas',
          'Poland',
          'Portugal',
          'Puerto Rico',
          'Rusia',
          'Ruanda',
          'Samoa',
          'San Marino',
          'Santo Tomé y Principe',
          'Arabia Saudí',
          'Senegal',
          'Serbia',
          'Seychelles',
          'Sierra Leona',
          'Singapur',
          'Eslovaquia',
          'Eslovenia',
          'Somalia',
          'España',
          'Sri Lanka',
          'Sudán',
          'Suriname',
          'Suecia',
          'Suiza',
          'Siria',
          'Taiwan',
          'Tajikistan',
          'Tanzania',
          'Tailandia',
          'Timor-Leste',
          'Togo',
          'Tonga',
          'Trinidad y Tobago',
          'Tunez',
          'Turquia',
          'Uganda',
          'Ucrania',
          'Emiratos Árabes Unidos',
          'Reino Unido',
          'Estados Unidos de América',
          'Uruguay',
          'Uzbekistan',
          'Vanuatu',
          'Venezuela',
          'Vietnam',
          'Yemen',
          'Zambia',
          'Zimbabwe',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/es/address/building_number.js': [
      function(require, module, exports) {
        module['exports'] = [' s/n.', ', #', ', ##', ' #', ' ##']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/es/address/street_suffix.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Aldea',
          'Apartamento',
          'Arrabal',
          'Arroyo',
          'Avenida',
          'Bajada',
          'Barranco',
          'Barrio',
          'Bloque',
          'Calle',
          'Calleja',
          'Camino',
          'Carretera',
          'Caserio',
          'Colegio',
          'Colonia',
          'Conjunto',
          'Cuesta',
          'Chalet',
          'Edificio',
          'Entrada',
          'Escalinata',
          'Explanada',
          'Extramuros',
          'Extrarradio',
          'Ferrocarril',
          'Glorieta',
          'Gran Subida',
          'Grupo',
          'Huerta',
          'Jardines',
          'Lado',
          'Lugar',
          'Manzana',
          'Masía',
          'Mercado',
          'Monte',
          'Muelle',
          'Municipio',
          'Parcela',
          'Parque',
          'Partida',
          'Pasaje',
          'Paseo',
          'Plaza',
          'Poblado',
          'Polígono',
          'Prolongación',
          'Puente',
          'Puerta',
          'Quinta',
          'Ramal',
          'Rambla',
          'Rampa',
          'Riera',
          'Rincón',
          'Ronda',
          'Rua',
          'Salida',
          'Sector',
          'Sección',
          'Senda',
          'Solar',
          'Subida',
          'Terrenos',
          'Torrente',
          'Travesía',
          'Urbanización',
          'Vía',
          'Vía Pública',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/es/address/secondary_address.js': [
      function(require, module, exports) {
        module['exports'] = ['Esc. ###', 'Puerta ###']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/es/address/postcode.js': [
      function(require, module, exports) {
        module['exports'] = ['#####']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/es/address/province.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Álava',
          'Albacete',
          'Alicante',
          'Almería',
          'Asturias',
          'Ávila',
          'Badajoz',
          'Barcelona',
          'Burgos',
          'Cantabria',
          'Castellón',
          'Ciudad Real',
          'Cuenca',
          'Cáceres',
          'Cádiz',
          'Córdoba',
          'Gerona',
          'Granada',
          'Guadalajara',
          'Guipúzcoa',
          'Huelva',
          'Huesca',
          'Islas Baleares',
          'Jaén',
          'La Coruña',
          'La Rioja',
          'Las Palmas',
          'León',
          'Lugo',
          'lérida',
          'Madrid',
          'Murcia',
          'Málaga',
          'Navarra',
          'Orense',
          'Palencia',
          'Pontevedra',
          'Salamanca',
          'Santa Cruz de Tenerife',
          'Segovia',
          'Sevilla',
          'Soria',
          'Tarragona',
          'Teruel',
          'Toledo',
          'Valencia',
          'Valladolid',
          'Vizcaya',
          'Zamora',
          'Zaragoza',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/es/address/state.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Andalucía',
          'Aragón',
          'Principado de Asturias',
          'Baleares',
          'Canarias',
          'Cantabria',
          'Castilla-La Mancha',
          'Castilla y León',
          'Cataluña',
          'Comunidad Valenciana',
          'Extremadura',
          'Galicia',
          'La Rioja',
          'Comunidad de Madrid',
          'Navarra',
          'País Vasco',
          'Región de Murcia',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/es/address/state_abbr.js': [
      function(require, module, exports) {
        module['exports'] = [
          'And',
          'Ara',
          'Ast',
          'Bal',
          'Can',
          'Cbr',
          'Man',
          'Leo',
          'Cat',
          'Com',
          'Ext',
          'Gal',
          'Rio',
          'Mad',
          'Nav',
          'Vas',
          'Mur',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/es/address/time_zone.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Pacífico/Midway',
          'Pacífico/Pago_Pago',
          'Pacífico/Honolulu',
          'America/Juneau',
          'America/Los_Angeles',
          'America/Tijuana',
          'America/Denver',
          'America/Phoenix',
          'America/Chihuahua',
          'America/Mazatlan',
          'America/Chicago',
          'America/Regina',
          'America/Mexico_City',
          'America/Mexico_City',
          'America/Monterrey',
          'America/Guatemala',
          'America/New_York',
          'America/Indiana/Indianapolis',
          'America/Bogota',
          'America/Lima',
          'America/Lima',
          'America/Halifax',
          'America/Caracas',
          'America/La_Paz',
          'America/Santiago',
          'America/St_Johns',
          'America/Sao_Paulo',
          'America/Argentina/Buenos_Aires',
          'America/Guyana',
          'America/Godthab',
          'Atlantic/South_Georgia',
          'Atlantic/Azores',
          'Atlantic/Cape_Verde',
          'Europa/Dublin',
          'Europa/London',
          'Europa/Lisbon',
          'Europa/London',
          'Africa/Casablanca',
          'Africa/Monrovia',
          'Etc/UTC',
          'Europa/Belgrade',
          'Europa/Bratislava',
          'Europa/Budapest',
          'Europa/Ljubljana',
          'Europa/Prague',
          'Europa/Sarajevo',
          'Europa/Skopje',
          'Europa/Warsaw',
          'Europa/Zagreb',
          'Europa/Brussels',
          'Europa/Copenhagen',
          'Europa/Madrid',
          'Europa/Paris',
          'Europa/Amsterdam',
          'Europa/Berlin',
          'Europa/Berlin',
          'Europa/Rome',
          'Europa/Stockholm',
          'Europa/Vienna',
          'Africa/Algiers',
          'Europa/Bucharest',
          'Africa/Cairo',
          'Europa/Helsinki',
          'Europa/Kiev',
          'Europa/Riga',
          'Europa/Sofia',
          'Europa/Tallinn',
          'Europa/Vilnius',
          'Europa/Athens',
          'Europa/Istanbul',
          'Europa/Minsk',
          'Asia/Jerusalen',
          'Africa/Harare',
          'Africa/Johannesburg',
          'Europa/Moscú',
          'Europa/Moscú',
          'Europa/Moscú',
          'Asia/Kuwait',
          'Asia/Riyadh',
          'Africa/Nairobi',
          'Asia/Baghdad',
          'Asia/Tehran',
          'Asia/Muscat',
          'Asia/Muscat',
          'Asia/Baku',
          'Asia/Tbilisi',
          'Asia/Yerevan',
          'Asia/Kabul',
          'Asia/Yekaterinburg',
          'Asia/Karachi',
          'Asia/Karachi',
          'Asia/Tashkent',
          'Asia/Kolkata',
          'Asia/Kolkata',
          'Asia/Kolkata',
          'Asia/Kolkata',
          'Asia/Kathmandu',
          'Asia/Dhaka',
          'Asia/Dhaka',
          'Asia/Colombo',
          'Asia/Almaty',
          'Asia/Novosibirsk',
          'Asia/Rangoon',
          'Asia/Bangkok',
          'Asia/Bangkok',
          'Asia/Jakarta',
          'Asia/Krasnoyarsk',
          'Asia/Shanghai',
          'Asia/Chongqing',
          'Asia/Hong_Kong',
          'Asia/Urumqi',
          'Asia/Kuala_Lumpur',
          'Asia/Singapore',
          'Asia/Taipei',
          'Australia/Perth',
          'Asia/Irkutsk',
          'Asia/Ulaanbaatar',
          'Asia/Seoul',
          'Asia/Tokyo',
          'Asia/Tokyo',
          'Asia/Tokyo',
          'Asia/Yakutsk',
          'Australia/Darwin',
          'Australia/Adelaide',
          'Australia/Melbourne',
          'Australia/Melbourne',
          'Australia/Sydney',
          'Australia/Brisbane',
          'Australia/Hobart',
          'Asia/Vladivostok',
          'Pacífico/Guam',
          'Pacífico/Port_Moresby',
          'Asia/Magadan',
          'Asia/Magadan',
          'Pacífico/Noumea',
          'Pacífico/Fiji',
          'Asia/Kamchatka',
          'Pacífico/Majuro',
          'Pacífico/Auckland',
          'Pacífico/Auckland',
          'Pacífico/Tongatapu',
          'Pacífico/Fakaofo',
          'Pacífico/Apia',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/es/address/city.js': [
      function(require, module, exports) {
        module['exports'] = ['#{city_prefix}']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/es/address/street_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          '#{street_suffix} #{Name.first_name}',
          '#{street_suffix} #{Name.first_name} #{Name.last_name}',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/es/address/street_address.js': [
      function(require, module, exports) {
        module['exports'] = [
          '#{street_name}#{building_number}',
          '#{street_name}#{building_number} #{secondary_address}',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/es/address/default_country.js': [
      function(require, module, exports) {
        module['exports'] = ['España']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/es/address/index.js': [
      function(require, module, exports) {
        var address = {}
        module['exports'] = address
        address.city_prefix = require('./city_prefix')
        address.country = require('./country')
        address.building_number = require('./building_number')
        address.street_suffix = require('./street_suffix')
        address.secondary_address = require('./secondary_address')
        address.postcode = require('./postcode')
        address.province = require('./province')
        address.state = require('./state')
        address.state_abbr = require('./state_abbr')
        address.time_zone = require('./time_zone')
        address.city = require('./city')
        address.street_name = require('./street_name')
        address.street_address = require('./street_address')
        address.default_country = require('./default_country')
      },
      {
        './city_prefix':
          '../node_modules/faker/lib/locales/es/address/city_prefix.js',
        './country':
          '../node_modules/faker/lib/locales/es/address/country.js',
        './building_number':
          '../node_modules/faker/lib/locales/es/address/building_number.js',
        './street_suffix':
          '../node_modules/faker/lib/locales/es/address/street_suffix.js',
        './secondary_address':
          '../node_modules/faker/lib/locales/es/address/secondary_address.js',
        './postcode':
          '../node_modules/faker/lib/locales/es/address/postcode.js',
        './province':
          '../node_modules/faker/lib/locales/es/address/province.js',
        './state': '../node_modules/faker/lib/locales/es/address/state.js',
        './state_abbr':
          '../node_modules/faker/lib/locales/es/address/state_abbr.js',
        './time_zone':
          '../node_modules/faker/lib/locales/es/address/time_zone.js',
        './city': '../node_modules/faker/lib/locales/es/address/city.js',
        './street_name':
          '../node_modules/faker/lib/locales/es/address/street_name.js',
        './street_address':
          '../node_modules/faker/lib/locales/es/address/street_address.js',
        './default_country':
          '../node_modules/faker/lib/locales/es/address/default_country.js',
      },
    ],
    '../node_modules/faker/lib/locales/es/company/suffix.js': [
      function(require, module, exports) {
        module['exports'] = ['S.L.', 'e Hijos', 'S.A.', 'Hermanos']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/es/company/noun.js': [
      function(require, module, exports) {
        module['exports'] = [
          'habilidad',
          'acceso',
          'adaptador',
          'algoritmo',
          'alianza',
          'analista',
          'aplicación',
          'enfoque',
          'arquitectura',
          'archivo',
          'inteligencia artificial',
          'array',
          'actitud',
          'medición',
          'gestión presupuestaria',
          'capacidad',
          'desafío',
          'circuito',
          'colaboración',
          'complejidad',
          'concepto',
          'conglomeración',
          'contingencia',
          'núcleo',
          'fidelidad',
          'base de datos',
          'data-warehouse',
          'definición',
          'emulación',
          'codificar',
          'encriptar',
          'extranet',
          'firmware',
          'flexibilidad',
          'focus group',
          'previsión',
          'base de trabajo',
          'función',
          'funcionalidad',
          'Interfaz Gráfica',
          'groupware',
          'Interfaz gráfico de usuario',
          'hardware',
          'Soporte',
          'jerarquía',
          'conjunto',
          'implementación',
          'infraestructura',
          'iniciativa',
          'instalación',
          'conjunto de instrucciones',
          'interfaz',
          'intranet',
          'base del conocimiento',
          'red de area local',
          'aprovechar',
          'matrices',
          'metodologías',
          'middleware',
          'migración',
          'modelo',
          'moderador',
          'monitorizar',
          'arquitectura abierta',
          'sistema abierto',
          'orquestar',
          'paradigma',
          'paralelismo',
          'política',
          'portal',
          'estructura de precios',
          'proceso de mejora',
          'producto',
          'productividad',
          'proyecto',
          'proyección',
          'protocolo',
          'línea segura',
          'software',
          'solución',
          'estandardización',
          'estrategia',
          'estructura',
          'éxito',
          'superestructura',
          'soporte',
          'sinergia',
          'mediante',
          'marco de tiempo',
          'caja de herramientas',
          'utilización',
          'website',
          'fuerza de trabajo',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/es/company/descriptor.js': [
      function(require, module, exports) {
        module['exports'] = [
          '24 horas',
          '24/7',
          '3rd generación',
          '4th generación',
          '5th generación',
          '6th generación',
          'analizada',
          'asimétrica',
          'asíncrona',
          'monitorizada por red',
          'bidireccional',
          'bifurcada',
          'generada por el cliente',
          'cliente servidor',
          'coherente',
          'cohesiva',
          'compuesto',
          'sensible al contexto',
          'basado en el contexto',
          'basado en contenido',
          'dedicada',
          'generado por la demanda',
          'didactica',
          'direccional',
          'discreta',
          'dinámica',
          'potenciada',
          'acompasada',
          'ejecutiva',
          'explícita',
          'tolerante a fallos',
          'innovadora',
          'amplio ábanico',
          'global',
          'heurística',
          'alto nivel',
          'holística',
          'homogénea',
          'hibrida',
          'incremental',
          'intangible',
          'interactiva',
          'intermedia',
          'local',
          'logística',
          'maximizada',
          'metódica',
          'misión crítica',
          'móbil',
          'modular',
          'motivadora',
          'multimedia',
          'multiestado',
          'multitarea',
          'nacional',
          'basado en necesidades',
          'neutral',
          'nueva generación',
          'no-volátil',
          'orientado a objetos',
          'óptima',
          'optimizada',
          'radical',
          'tiempo real',
          'recíproca',
          'regional',
          'escalable',
          'secundaria',
          'orientada a soluciones',
          'estable',
          'estatica',
          'sistemática',
          'sistémica',
          'tangible',
          'terciaria',
          'transicional',
          'uniforme',
          'valor añadido',
          'vía web',
          'defectos cero',
          'tolerancia cero',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/es/company/adjective.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Adaptativo',
          'Avanzado',
          'Asimilado',
          'Automatizado',
          'Equilibrado',
          'Centrado en el negocio',
          'Centralizado',
          'Clonado',
          'Compatible',
          'Configurable',
          'Multi grupo',
          'Multi plataforma',
          'Centrado en el usuario',
          'Configurable',
          'Descentralizado',
          'Digitalizado',
          'Distribuido',
          'Diverso',
          'Reducido',
          'Mejorado',
          'Para toda la empresa',
          'Ergonomico',
          'Exclusivo',
          'Expandido',
          'Extendido',
          'Cara a cara',
          'Enfocado',
          'Totalmente configurable',
          'Fundamental',
          'Orígenes',
          'Horizontal',
          'Implementado',
          'Innovador',
          'Integrado',
          'Intuitivo',
          'Inverso',
          'Gestionado',
          'Obligatorio',
          'Monitorizado',
          'Multi canal',
          'Multi lateral',
          'Multi capa',
          'En red',
          'Orientado a objetos',
          'Open-source',
          'Operativo',
          'Optimizado',
          'Opcional',
          'Organico',
          'Organizado',
          'Perseverando',
          'Persistente',
          'en fases',
          'Polarizado',
          'Pre-emptivo',
          'Proactivo',
          'Enfocado a benficios',
          'Profundo',
          'Programable',
          'Progresivo',
          'Public-key',
          'Enfocado en la calidad',
          'Reactivo',
          'Realineado',
          'Re-contextualizado',
          'Re-implementado',
          'Reducido',
          'Ingenieria inversa',
          'Robusto',
          'Fácil',
          'Seguro',
          'Auto proporciona',
          'Compartible',
          'Intercambiable',
          'Sincronizado',
          'Orientado a equipos',
          'Total',
          'Universal',
          'Mejorado',
          'Actualizable',
          'Centrado en el usuario',
          'Amigable',
          'Versatil',
          'Virtual',
          'Visionario',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/es/company/name.js': [
      function(require, module, exports) {
        module['exports'] = [
          '#{Name.last_name} #{suffix}',
          '#{Name.last_name} y #{Name.last_name}',
          '#{Name.last_name} #{Name.last_name} #{suffix}',
          '#{Name.last_name}, #{Name.last_name} y #{Name.last_name} Asociados',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/es/company/index.js': [
      function(require, module, exports) {
        var company = {}
        module['exports'] = company
        company.suffix = require('./suffix')
        company.noun = require('./noun')
        company.descriptor = require('./descriptor')
        company.adjective = require('./adjective')
        company.name = require('./name')
      },
      {
        './suffix':
          '../node_modules/faker/lib/locales/es/company/suffix.js',
        './noun': '../node_modules/faker/lib/locales/es/company/noun.js',
        './descriptor':
          '../node_modules/faker/lib/locales/es/company/descriptor.js',
        './adjective':
          '../node_modules/faker/lib/locales/es/company/adjective.js',
        './name': '../node_modules/faker/lib/locales/es/company/name.js',
      },
    ],
    '../node_modules/faker/lib/locales/es/internet/free_email.js': [
      function(require, module, exports) {
        module['exports'] = ['gmail.com', 'yahoo.com', 'hotmail.com']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/es/internet/domain_suffix.js': [
      function(require, module, exports) {
        module['exports'] = ['com', 'es', 'info', 'com.es', 'org']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/es/internet/index.js': [
      function(require, module, exports) {
        var internet = {}
        module['exports'] = internet
        internet.free_email = require('./free_email')
        internet.domain_suffix = require('./domain_suffix')
      },
      {
        './free_email':
          '../node_modules/faker/lib/locales/es/internet/free_email.js',
        './domain_suffix':
          '../node_modules/faker/lib/locales/es/internet/domain_suffix.js',
      },
    ],
    '../node_modules/faker/lib/locales/es/name/first_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Adán',
          'Agustín',
          'Alberto',
          'Alejandro',
          'Alfonso',
          'Alfredo',
          'Andrés',
          'Antonio',
          'Armando',
          'Arturo',
          'Benito',
          'Benjamín',
          'Bernardo',
          'Carlos',
          'César',
          'Claudio',
          'Clemente',
          'Cristian',
          'Cristobal',
          'Daniel',
          'David',
          'Diego',
          'Eduardo',
          'Emilio',
          'Enrique',
          'Ernesto',
          'Esteban',
          'Federico',
          'Felipe',
          'Fernando',
          'Francisco',
          'Gabriel',
          'Gerardo',
          'Germán',
          'Gilberto',
          'Gonzalo',
          'Gregorio',
          'Guillermo',
          'Gustavo',
          'Hernán',
          'Homero',
          'Horacio',
          'Hugo',
          'Ignacio',
          'Jacobo',
          'Jaime',
          'Javier',
          'Jerónimo',
          'Jesús',
          'Joaquín',
          'Jorge',
          'Jorge Luis',
          'José',
          'José Eduardo',
          'José Emilio',
          'José Luis',
          'José María',
          'Juan',
          'Juan Carlos',
          'Julio',
          'Julio César',
          'Lorenzo',
          'Lucas',
          'Luis',
          'Luis Miguel',
          'Manuel',
          'Marco Antonio',
          'Marcos',
          'Mariano',
          'Mario',
          'Martín',
          'Mateo',
          'Miguel',
          'Miguel Ángel',
          'Nicolás',
          'Octavio',
          'Óscar',
          'Pablo',
          'Patricio',
          'Pedro',
          'Rafael',
          'Ramiro',
          'Ramón',
          'Raúl',
          'Ricardo',
          'Roberto',
          'Rodrigo',
          'Rubén',
          'Salvador',
          'Samuel',
          'Sancho',
          'Santiago',
          'Sergio',
          'Teodoro',
          'Timoteo',
          'Tomás',
          'Vicente',
          'Víctor',
          'Adela',
          'Adriana',
          'Alejandra',
          'Alicia',
          'Amalia',
          'Ana',
          'Ana Luisa',
          'Ana María',
          'Andrea',
          'Anita',
          'Ángela',
          'Antonia',
          'Ariadna',
          'Barbara',
          'Beatriz',
          'Berta',
          'Blanca',
          'Caridad',
          'Carla',
          'Carlota',
          'Carmen',
          'Carolina',
          'Catalina',
          'Cecilia',
          'Clara',
          'Claudia',
          'Concepción',
          'Conchita',
          'Cristina',
          'Daniela',
          'Débora',
          'Diana',
          'Dolores',
          'Lola',
          'Dorotea',
          'Elena',
          'Elisa',
          'Eloisa',
          'Elsa',
          'Elvira',
          'Emilia',
          'Esperanza',
          'Estela',
          'Ester',
          'Eva',
          'Florencia',
          'Francisca',
          'Gabriela',
          'Gloria',
          'Graciela',
          'Guadalupe',
          'Guillermina',
          'Inés',
          'Irene',
          'Isabel',
          'Isabela',
          'Josefina',
          'Juana',
          'Julia',
          'Laura',
          'Leonor',
          'Leticia',
          'Lilia',
          'Lorena',
          'Lourdes',
          'Lucia',
          'Luisa',
          'Luz',
          'Magdalena',
          'Manuela',
          'Marcela',
          'Margarita',
          'María',
          'María del Carmen',
          'María Cristina',
          'María Elena',
          'María Eugenia',
          'María José',
          'María Luisa',
          'María Soledad',
          'María Teresa',
          'Mariana',
          'Maricarmen',
          'Marilu',
          'Marisol',
          'Marta',
          'Mayte',
          'Mercedes',
          'Micaela',
          'Mónica',
          'Natalia',
          'Norma',
          'Olivia',
          'Patricia',
          'Pilar',
          'Ramona',
          'Raquel',
          'Rebeca',
          'Reina',
          'Rocio',
          'Rosa',
          'Rosalia',
          'Rosario',
          'Sara',
          'Silvia',
          'Sofia',
          'Soledad',
          'Sonia',
          'Susana',
          'Teresa',
          'Verónica',
          'Victoria',
          'Virginia',
          'Yolanda',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/es/name/last_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Abeyta',
          'Abrego',
          'Abreu',
          'Acevedo',
          'Acosta',
          'Acuña',
          'Adame',
          'Adorno',
          'Agosto',
          'Aguayo',
          'Águilar',
          'Aguilera',
          'Aguirre',
          'Alanis',
          'Alaniz',
          'Alarcón',
          'Alba',
          'Alcala',
          'Alcántar',
          'Alcaraz',
          'Alejandro',
          'Alemán',
          'Alfaro',
          'Alicea',
          'Almanza',
          'Almaraz',
          'Almonte',
          'Alonso',
          'Alonzo',
          'Altamirano',
          'Alva',
          'Alvarado',
          'Alvarez',
          'Amador',
          'Amaya',
          'Anaya',
          'Anguiano',
          'Angulo',
          'Aparicio',
          'Apodaca',
          'Aponte',
          'Aragón',
          'Araña',
          'Aranda',
          'Arce',
          'Archuleta',
          'Arellano',
          'Arenas',
          'Arevalo',
          'Arguello',
          'Arias',
          'Armas',
          'Armendáriz',
          'Armenta',
          'Armijo',
          'Arredondo',
          'Arreola',
          'Arriaga',
          'Arroyo',
          'Arteaga',
          'Atencio',
          'Ávalos',
          'Ávila',
          'Avilés',
          'Ayala',
          'Baca',
          'Badillo',
          'Báez',
          'Baeza',
          'Bahena',
          'Balderas',
          'Ballesteros',
          'Banda',
          'Bañuelos',
          'Barajas',
          'Barela',
          'Barragán',
          'Barraza',
          'Barrera',
          'Barreto',
          'Barrientos',
          'Barrios',
          'Batista',
          'Becerra',
          'Beltrán',
          'Benavides',
          'Benavídez',
          'Benítez',
          'Bermúdez',
          'Bernal',
          'Berríos',
          'Bétancourt',
          'Blanco',
          'Bonilla',
          'Borrego',
          'Botello',
          'Bravo',
          'Briones',
          'Briseño',
          'Brito',
          'Bueno',
          'Burgos',
          'Bustamante',
          'Bustos',
          'Caballero',
          'Cabán',
          'Cabrera',
          'Cadena',
          'Caldera',
          'Calderón',
          'Calvillo',
          'Camacho',
          'Camarillo',
          'Campos',
          'Canales',
          'Candelaria',
          'Cano',
          'Cantú',
          'Caraballo',
          'Carbajal',
          'Cardenas',
          'Cardona',
          'Carmona',
          'Carranza',
          'Carrasco',
          'Carrasquillo',
          'Carreón',
          'Carrera',
          'Carrero',
          'Carrillo',
          'Carrion',
          'Carvajal',
          'Casanova',
          'Casares',
          'Casárez',
          'Casas',
          'Casillas',
          'Castañeda',
          'Castellanos',
          'Castillo',
          'Castro',
          'Cavazos',
          'Cazares',
          'Ceballos',
          'Cedillo',
          'Ceja',
          'Centeno',
          'Cepeda',
          'Cerda',
          'Cervantes',
          'Cervántez',
          'Chacón',
          'Chapa',
          'Chavarría',
          'Chávez',
          'Cintrón',
          'Cisneros',
          'Collado',
          'Collazo',
          'Colón',
          'Colunga',
          'Concepción',
          'Contreras',
          'Cordero',
          'Córdova',
          'Cornejo',
          'Corona',
          'Coronado',
          'Corral',
          'Corrales',
          'Correa',
          'Cortés',
          'Cortez',
          'Cotto',
          'Covarrubias',
          'Crespo',
          'Cruz',
          'Cuellar',
          'Curiel',
          'Dávila',
          'de Anda',
          'de Jesús',
          'Delacrúz',
          'Delafuente',
          'Delagarza',
          'Delao',
          'Delapaz',
          'Delarosa',
          'Delatorre',
          'Deleón',
          'Delgadillo',
          'Delgado',
          'Delrío',
          'Delvalle',
          'Díaz',
          'Domínguez',
          'Domínquez',
          'Duarte',
          'Dueñas',
          'Duran',
          'Echevarría',
          'Elizondo',
          'Enríquez',
          'Escalante',
          'Escamilla',
          'Escobar',
          'Escobedo',
          'Esparza',
          'Espinal',
          'Espino',
          'Espinosa',
          'Espinoza',
          'Esquibel',
          'Esquivel',
          'Estévez',
          'Estrada',
          'Fajardo',
          'Farías',
          'Feliciano',
          'Fernández',
          'Ferrer',
          'Fierro',
          'Figueroa',
          'Flores',
          'Flórez',
          'Fonseca',
          'Franco',
          'Frías',
          'Fuentes',
          'Gaitán',
          'Galarza',
          'Galindo',
          'Gallardo',
          'Gallegos',
          'Galván',
          'Gálvez',
          'Gamboa',
          'Gamez',
          'Gaona',
          'Garay',
          'García',
          'Garibay',
          'Garica',
          'Garrido',
          'Garza',
          'Gastélum',
          'Gaytán',
          'Gil',
          'Girón',
          'Godínez',
          'Godoy',
          'Gómez',
          'Gonzales',
          'González',
          'Gollum',
          'Gracia',
          'Granado',
          'Granados',
          'Griego',
          'Grijalva',
          'Guajardo',
          'Guardado',
          'Guerra',
          'Guerrero',
          'Guevara',
          'Guillen',
          'Gurule',
          'Gutiérrez',
          'Guzmán',
          'Haro',
          'Henríquez',
          'Heredia',
          'Hernádez',
          'Hernandes',
          'Hernández',
          'Herrera',
          'Hidalgo',
          'Hinojosa',
          'Holguín',
          'Huerta',
          'Hurtado',
          'Ibarra',
          'Iglesias',
          'Irizarry',
          'Jaime',
          'Jaimes',
          'Jáquez',
          'Jaramillo',
          'Jasso',
          'Jiménez',
          'Jimínez',
          'Juárez',
          'Jurado',
          'Laboy',
          'Lara',
          'Laureano',
          'Leal',
          'Lebrón',
          'Ledesma',
          'Leiva',
          'Lemus',
          'León',
          'Lerma',
          'Leyva',
          'Limón',
          'Linares',
          'Lira',
          'Llamas',
          'Loera',
          'Lomeli',
          'Longoria',
          'López',
          'Lovato',
          'Loya',
          'Lozada',
          'Lozano',
          'Lucero',
          'Lucio',
          'Luevano',
          'Lugo',
          'Luna',
          'Macías',
          'Madera',
          'Madrid',
          'Madrigal',
          'Maestas',
          'Magaña',
          'Malave',
          'Maldonado',
          'Manzanares',
          'Mares',
          'Marín',
          'Márquez',
          'Marrero',
          'Marroquín',
          'Martínez',
          'Mascareñas',
          'Mata',
          'Mateo',
          'Matías',
          'Matos',
          'Maya',
          'Mayorga',
          'Medina',
          'Medrano',
          'Mejía',
          'Meléndez',
          'Melgar',
          'Mena',
          'Menchaca',
          'Méndez',
          'Mendoza',
          'Menéndez',
          'Meraz',
          'Mercado',
          'Merino',
          'Mesa',
          'Meza',
          'Miramontes',
          'Miranda',
          'Mireles',
          'Mojica',
          'Molina',
          'Mondragón',
          'Monroy',
          'Montalvo',
          'Montañez',
          'Montaño',
          'Montemayor',
          'Montenegro',
          'Montero',
          'Montes',
          'Montez',
          'Montoya',
          'Mora',
          'Morales',
          'Moreno',
          'Mota',
          'Moya',
          'Munguía',
          'Muñiz',
          'Muñoz',
          'Murillo',
          'Muro',
          'Nájera',
          'Naranjo',
          'Narváez',
          'Nava',
          'Navarrete',
          'Navarro',
          'Nazario',
          'Negrete',
          'Negrón',
          'Nevárez',
          'Nieto',
          'Nieves',
          'Niño',
          'Noriega',
          'Núñez',
          'Ocampo',
          'Ocasio',
          'Ochoa',
          'Ojeda',
          'Olivares',
          'Olivárez',
          'Olivas',
          'Olivera',
          'Olivo',
          'Olmos',
          'Olvera',
          'Ontiveros',
          'Oquendo',
          'Ordóñez',
          'Orellana',
          'Ornelas',
          'Orosco',
          'Orozco',
          'Orta',
          'Ortega',
          'Ortiz',
          'Osorio',
          'Otero',
          'Ozuna',
          'Pabón',
          'Pacheco',
          'Padilla',
          'Padrón',
          'Páez',
          'Pagan',
          'Palacios',
          'Palomino',
          'Palomo',
          'Pantoja',
          'Paredes',
          'Parra',
          'Partida',
          'Patiño',
          'Paz',
          'Pedraza',
          'Pedroza',
          'Pelayo',
          'Peña',
          'Perales',
          'Peralta',
          'Perea',
          'Peres',
          'Pérez',
          'Pichardo',
          'Piña',
          'Pineda',
          'Pizarro',
          'Polanco',
          'Ponce',
          'Porras',
          'Portillo',
          'Posada',
          'Prado',
          'Preciado',
          'Prieto',
          'Puente',
          'Puga',
          'Pulido',
          'Quesada',
          'Quezada',
          'Quiñones',
          'Quiñónez',
          'Quintana',
          'Quintanilla',
          'Quintero',
          'Quiroz',
          'Rael',
          'Ramírez',
          'Ramón',
          'Ramos',
          'Rangel',
          'Rascón',
          'Raya',
          'Razo',
          'Regalado',
          'Rendón',
          'Rentería',
          'Reséndez',
          'Reyes',
          'Reyna',
          'Reynoso',
          'Rico',
          'Rincón',
          'Riojas',
          'Ríos',
          'Rivas',
          'Rivera',
          'Rivero',
          'Robledo',
          'Robles',
          'Rocha',
          'Rodarte',
          'Rodrígez',
          'Rodríguez',
          'Rodríquez',
          'Rojas',
          'Rojo',
          'Roldán',
          'Rolón',
          'Romero',
          'Romo',
          'Roque',
          'Rosado',
          'Rosales',
          'Rosario',
          'Rosas',
          'Roybal',
          'Rubio',
          'Ruelas',
          'Ruiz',
          'Saavedra',
          'Sáenz',
          'Saiz',
          'Salas',
          'Salazar',
          'Salcedo',
          'Salcido',
          'Saldaña',
          'Saldivar',
          'Salgado',
          'Salinas',
          'Samaniego',
          'Sanabria',
          'Sanches',
          'Sánchez',
          'Sandoval',
          'Santacruz',
          'Santana',
          'Santiago',
          'Santillán',
          'Sarabia',
          'Sauceda',
          'Saucedo',
          'Sedillo',
          'Segovia',
          'Segura',
          'Sepúlveda',
          'Serna',
          'Serrano',
          'Serrato',
          'Sevilla',
          'Sierra',
          'Sisneros',
          'Solano',
          'Solís',
          'Soliz',
          'Solorio',
          'Solorzano',
          'Soria',
          'Sosa',
          'Sotelo',
          'Soto',
          'Suárez',
          'Tafoya',
          'Tamayo',
          'Tamez',
          'Tapia',
          'Tejada',
          'Tejeda',
          'Téllez',
          'Tello',
          'Terán',
          'Terrazas',
          'Tijerina',
          'Tirado',
          'Toledo',
          'Toro',
          'Torres',
          'Tórrez',
          'Tovar',
          'Trejo',
          'Treviño',
          'Trujillo',
          'Ulibarri',
          'Ulloa',
          'Urbina',
          'Ureña',
          'Urías',
          'Uribe',
          'Urrutia',
          'Vaca',
          'Valadez',
          'Valdés',
          'Valdez',
          'Valdivia',
          'Valencia',
          'Valentín',
          'Valenzuela',
          'Valladares',
          'Valle',
          'Vallejo',
          'Valles',
          'Valverde',
          'Vanegas',
          'Varela',
          'Vargas',
          'Vásquez',
          'Vázquez',
          'Vega',
          'Vela',
          'Velasco',
          'Velásquez',
          'Velázquez',
          'Vélez',
          'Véliz',
          'Venegas',
          'Vera',
          'Verdugo',
          'Verduzco',
          'Vergara',
          'Viera',
          'Vigil',
          'Villa',
          'Villagómez',
          'Villalobos',
          'Villalpando',
          'Villanueva',
          'Villareal',
          'Villarreal',
          'Villaseñor',
          'Villegas',
          'Yáñez',
          'Ybarra',
          'Zambrano',
          'Zamora',
          'Zamudio',
          'Zapata',
          'Zaragoza',
          'Zarate',
          'Zavala',
          'Zayas',
          'Zelaya',
          'Zepeda',
          'Zúñiga',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/es/name/prefix.js': [
      function(require, module, exports) {
        module['exports'] = ['Sr.', 'Sra.', 'Sta.']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/es/name/suffix.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Jr.',
          'Sr.',
          'I',
          'II',
          'III',
          'IV',
          'V',
          'MD',
          'DDS',
          'PhD',
          'DVM',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/es/name/title.js': [
      function(require, module, exports) {
        module['exports'] = {
          descriptor: [
            'Jefe',
            'Senior',
            'Directo',
            'Corporativo',
            'Dinánmico',
            'Futuro',
            'Producto',
            'Nacional',
            'Regional',
            'Distrito',
            'Central',
            'Global',
            'Cliente',
            'Inversor',
            'International',
            'Heredado',
            'Adelante',
            'Interno',
            'Humano',
            'Gerente',
            'Director',
          ],
          level: [
            'Soluciones',
            'Programa',
            'Marca',
            'Seguridada',
            'Investigación',
            'Marketing',
            'Normas',
            'Implementación',
            'Integración',
            'Funcionalidad',
            'Respuesta',
            'Paradigma',
            'Tácticas',
            'Identidad',
            'Mercados',
            'Grupo',
            'División',
            'Aplicaciones',
            'Optimización',
            'Operaciones',
            'Infraestructura',
            'Intranet',
            'Comunicaciones',
            'Web',
            'Calidad',
            'Seguro',
            'Mobilidad',
            'Cuentas',
            'Datos',
            'Creativo',
            'Configuración',
            'Contabilidad',
            'Interacciones',
            'Factores',
            'Usabilidad',
            'Métricas',
          ],
          job: [
            'Supervisor',
            'Asociado',
            'Ejecutivo',
            'Relacciones',
            'Oficial',
            'Gerente',
            'Ingeniero',
            'Especialista',
            'Director',
            'Coordinador',
            'Administrador',
            'Arquitecto',
            'Analista',
            'Diseñador',
            'Planificador',
            'Técnico',
            'Funcionario',
            'Desarrollador',
            'Productor',
            'Consultor',
            'Asistente',
            'Facilitador',
            'Agente',
            'Representante',
            'Estratega',
          ],
        }
      },
      {},
    ],
    '../node_modules/faker/lib/locales/es/name/name.js': [
      function(require, module, exports) {
        module['exports'] = [
          '#{prefix} #{first_name} #{last_name} #{last_name}',
          '#{first_name} #{last_name} #{last_name}',
          '#{first_name} #{last_name} #{last_name}',
          '#{first_name} #{last_name} #{last_name}',
          '#{first_name} #{last_name} #{last_name}',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/es/name/index.js': [
      function(require, module, exports) {
        var name = {}
        module['exports'] = name
        name.first_name = require('./first_name')
        name.last_name = require('./last_name')
        name.prefix = require('./prefix')
        name.suffix = require('./suffix')
        name.title = require('./title')
        name.name = require('./name')
      },
      {
        './first_name':
          '../node_modules/faker/lib/locales/es/name/first_name.js',
        './last_name':
          '../node_modules/faker/lib/locales/es/name/last_name.js',
        './prefix': '../node_modules/faker/lib/locales/es/name/prefix.js',
        './suffix': '../node_modules/faker/lib/locales/es/name/suffix.js',
        './title': '../node_modules/faker/lib/locales/es/name/title.js',
        './name': '../node_modules/faker/lib/locales/es/name/name.js',
      },
    ],
    '../node_modules/faker/lib/locales/es/phone_number/formats.js': [
      function(require, module, exports) {
        module['exports'] = [
          '9##-###-###',
          '9##.###.###',
          '9## ### ###',
          '9########',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/es/phone_number/index.js': [
      function(require, module, exports) {
        var phone_number = {}
        module['exports'] = phone_number
        phone_number.formats = require('./formats')
      },
      {
        './formats':
          '../node_modules/faker/lib/locales/es/phone_number/formats.js',
      },
    ],
    '../node_modules/faker/lib/locales/es/cell_phone/formats.js': [
      function(require, module, exports) {
        module['exports'] = [
          '6##-###-###',
          '6##.###.###',
          '6## ### ###',
          '6########',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/es/cell_phone/index.js': [
      function(require, module, exports) {
        var cell_phone = {}
        module['exports'] = cell_phone
        cell_phone.formats = require('./formats')
      },
      {
        './formats':
          '../node_modules/faker/lib/locales/es/cell_phone/formats.js',
      },
    ],
    '../node_modules/faker/lib/locales/es/index.js': [
      function(require, module, exports) {
        var es = {}
        module['exports'] = es
        es.title = 'Spanish'
        es.address = require('./address')
        es.company = require('./company')
        es.internet = require('./internet')
        es.name = require('./name')
        es.phone_number = require('./phone_number')
        es.cell_phone = require('./cell_phone')
      },
      {
        './address':
          '../node_modules/faker/lib/locales/es/address/index.js',
        './company':
          '../node_modules/faker/lib/locales/es/company/index.js',
        './internet':
          '../node_modules/faker/lib/locales/es/internet/index.js',
        './name': '../node_modules/faker/lib/locales/es/name/index.js',
        './phone_number':
          '../node_modules/faker/lib/locales/es/phone_number/index.js',
        './cell_phone':
          '../node_modules/faker/lib/locales/es/cell_phone/index.js',
      },
    ],
    '../node_modules/faker/lib/locales/es_MX/name/first_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Aarón',
          'Abraham',
          'Adán',
          'Agustín',
          'Alan',
          'Alberto',
          'Alejandro',
          'Alexander',
          'Alexis',
          'Alfonso',
          'Alfredo',
          'Andrés',
          'Ángel Daniel',
          'Ángel Gabriel',
          'Antonio',
          'Armando',
          'Arturo',
          'Axel',
          'Benito',
          'Benjamín',
          'Bernardo',
          'Brandon',
          'Brayan',
          'Carlos',
          'César',
          'Claudio',
          'Clemente',
          'Cristian',
          'Cristobal',
          'Damián',
          'Daniel',
          'David',
          'Diego',
          'Eduardo',
          'Elías',
          'Emiliano',
          'Emilio',
          'Emilio',
          'Emmanuel',
          'Enrique',
          'Erick',
          'Ernesto',
          'Esteban',
          'Federico',
          'Felipe',
          'Fernando',
          'Fernando Javier',
          'Francisco',
          'Francisco Javier',
          'Gabriel',
          'Gael',
          'Gerardo',
          'Germán',
          'Gilberto',
          'Gonzalo',
          'Gregorio',
          'Guillermo',
          'Gustavo',
          'Hernán',
          'Homero',
          'Horacio',
          'Hugo',
          'Ignacio',
          'Iker',
          'Isaac',
          'Isaias',
          'Israel',
          'Ivan',
          'Jacobo',
          'Jaime',
          'Javier',
          'Jerónimo',
          'Jesús',
          'Joaquín',
          'Jorge',
          'Jorge Luis',
          'José',
          'José Antonio',
          'Jose Daniel',
          'José Eduardo',
          'José Emilio',
          'José Luis',
          'José María',
          'José Miguel',
          'Juan',
          'Juan Carlos',
          'Juan Manuel',
          'Juan Pablo',
          'Julio',
          'Julio César',
          'Kevin',
          'Leonardo',
          'Lorenzo',
          'Lucas',
          'Luis',
          'Luis Ángel',
          'Luis Fernando',
          'Luis Gabino',
          'Luis Miguel',
          'Manuel',
          'Marco Antonio',
          'Marcos',
          'Mariano',
          'Mario',
          'Martín',
          'Mateo',
          'Matías',
          'Mauricio',
          'Maximiliano',
          'Miguel',
          'Miguel Ángel',
          'Nicolás',
          'Octavio',
          'Óscar',
          'Pablo',
          'Patricio',
          'Pedro',
          'Rafael',
          'Ramiro',
          'Ramón',
          'Raúl',
          'Ricardo',
          'Roberto',
          'Rodrigo',
          'Rubén',
          'Salvador',
          'Samuel',
          'Sancho',
          'Santiago',
          'Saúl',
          'Sebastian',
          'Sergio',
          'Tadeo',
          'Teodoro',
          'Timoteo',
          'Tomás',
          'Uriel',
          'Vicente',
          'Víctor',
          'Victor Manuel',
          'Adriana',
          'Alejandra',
          'Alicia',
          'Amalia',
          'Ana',
          'Ana Luisa',
          'Ana María',
          'Andrea',
          'Ángela',
          'Anita',
          'Antonia',
          'Araceli',
          'Ariadna',
          'Barbara',
          'Beatriz',
          'Berta',
          'Blanca',
          'Caridad',
          'Carla',
          'Carlota',
          'Carmen',
          'Carolina',
          'Catalina',
          'Cecilia',
          'Clara',
          'Claudia',
          'Concepción',
          'Conchita',
          'Cristina',
          'Daniela',
          'Débora',
          'Diana',
          'Dolores',
          'Dorotea',
          'Elena',
          'Elisa',
          'Elizabeth',
          'Eloisa',
          'Elsa',
          'Elvira',
          'Emilia',
          'Esperanza',
          'Estela',
          'Ester',
          'Eva',
          'Florencia',
          'Francisca',
          'Gabriela',
          'Gloria',
          'Graciela',
          'Guadalupe',
          'Guillermina',
          'Inés',
          'Irene',
          'Isabel',
          'Isabela',
          'Josefina',
          'Juana',
          'Julia',
          'Laura',
          'Leonor',
          'Leticia',
          'Lilia',
          'Lola',
          'Lorena',
          'Lourdes',
          'Lucia',
          'Luisa',
          'Luz',
          'Magdalena',
          'Manuela',
          'Marcela',
          'Margarita',
          'María',
          'María Cristina',
          'María de Jesús',
          'María de los Ángeles',
          'María del Carmen',
          'María Elena',
          'María Eugenia',
          'María Guadalupe',
          'María José',
          'María Luisa',
          'María Soledad',
          'María Teresa',
          'Mariana',
          'Maricarmen',
          'Marilu',
          'Marisol',
          'Marta',
          'Mayte',
          'Mercedes',
          'Micaela',
          'Mónica',
          'Natalia',
          'Norma',
          'Olivia',
          'Patricia',
          'Pilar',
          'Ramona',
          'Raquel',
          'Rebeca',
          'Reina',
          'Rocio',
          'Rosa',
          'Rosa María',
          'Rosalia',
          'Rosario',
          'Sara',
          'Silvia',
          'Sofia',
          'Soledad',
          'Sonia',
          'Susana',
          'Teresa',
          'Verónica',
          'Victoria',
          'Virginia',
          'Xochitl',
          'Yolanda',
          'Abigail',
          'Abril',
          'Adela',
          'Alexa',
          'Alondra Romina',
          'Ana Sofía',
          'Ana Victoria',
          'Camila',
          'Carolina',
          'Daniela',
          'Dulce María',
          'Emily',
          'Esmeralda',
          'Estefanía',
          'Evelyn',
          'Fatima',
          'Ivanna',
          'Jazmin',
          'Jennifer',
          'Jimena',
          'Julieta',
          'Kimberly',
          'Liliana',
          'Lizbeth',
          'María Fernanda',
          'Melany',
          'Melissa',
          'Miranda',
          'Monserrat',
          'Naomi',
          'Natalia',
          'Nicole',
          'Paola',
          'Paulina',
          'Regina',
          'Renata',
          'Valentina',
          'Valeria',
          'Vanessa',
          'Ximena',
          'Ximena Guadalupe',
          'Yamileth',
          'Yaretzi',
          'Zoe',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/es_MX/name/last_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Abeyta',
          'Abrego',
          'Abreu',
          'Acevedo',
          'Acosta',
          'Acuña',
          'Adame',
          'Adorno',
          'Agosto',
          'Aguayo',
          'Águilar',
          'Aguilera',
          'Aguirre',
          'Alanis',
          'Alaniz',
          'Alarcón',
          'Alba',
          'Alcala',
          'Alcántar',
          'Alcaraz',
          'Alejandro',
          'Alemán',
          'Alfaro',
          'Alicea',
          'Almanza',
          'Almaraz',
          'Almonte',
          'Alonso',
          'Alonzo',
          'Altamirano',
          'Alva',
          'Alvarado',
          'Alvarez',
          'Amador',
          'Amaya',
          'Anaya',
          'Anguiano',
          'Angulo',
          'Aparicio',
          'Apodaca',
          'Aponte',
          'Aragón',
          'Aranda',
          'Araña',
          'Arce',
          'Archuleta',
          'Arellano',
          'Arenas',
          'Arevalo',
          'Arguello',
          'Arias',
          'Armas',
          'Armendáriz',
          'Armenta',
          'Armijo',
          'Arredondo',
          'Arreola',
          'Arriaga',
          'Arroyo',
          'Arteaga',
          'Atencio',
          'Ávalos',
          'Ávila',
          'Avilés',
          'Ayala',
          'Baca',
          'Badillo',
          'Báez',
          'Baeza',
          'Bahena',
          'Balderas',
          'Ballesteros',
          'Banda',
          'Bañuelos',
          'Barajas',
          'Barela',
          'Barragán',
          'Barraza',
          'Barrera',
          'Barreto',
          'Barrientos',
          'Barrios',
          'Batista',
          'Becerra',
          'Beltrán',
          'Benavides',
          'Benavídez',
          'Benítez',
          'Bermúdez',
          'Bernal',
          'Berríos',
          'Bétancourt',
          'Blanco',
          'Bonilla',
          'Borrego',
          'Botello',
          'Bravo',
          'Briones',
          'Briseño',
          'Brito',
          'Bueno',
          'Burgos',
          'Bustamante',
          'Bustos',
          'Caballero',
          'Cabán',
          'Cabrera',
          'Cadena',
          'Caldera',
          'Calderón',
          'Calvillo',
          'Camacho',
          'Camarillo',
          'Campos',
          'Canales',
          'Candelaria',
          'Cano',
          'Cantú',
          'Caraballo',
          'Carbajal',
          'Cardenas',
          'Cardona',
          'Carmona',
          'Carranza',
          'Carrasco',
          'Carrasquillo',
          'Carreón',
          'Carrera',
          'Carrero',
          'Carrillo',
          'Carrion',
          'Carvajal',
          'Casanova',
          'Casares',
          'Casárez',
          'Casas',
          'Casillas',
          'Castañeda',
          'Castellanos',
          'Castillo',
          'Castro',
          'Cavazos',
          'Cazares',
          'Ceballos',
          'Cedillo',
          'Ceja',
          'Centeno',
          'Cepeda',
          'Cerda',
          'Cervantes',
          'Cervántez',
          'Chacón',
          'Chapa',
          'Chavarría',
          'Chávez',
          'Cintrón',
          'Cisneros',
          'Collado',
          'Collazo',
          'Colón',
          'Colunga',
          'Concepción',
          'Contreras',
          'Cordero',
          'Córdova',
          'Cornejo',
          'Corona',
          'Coronado',
          'Corral',
          'Corrales',
          'Correa',
          'Cortés',
          'Cortez',
          'Cotto',
          'Covarrubias',
          'Crespo',
          'Cruz',
          'Cuellar',
          'Curiel',
          'Dávila',
          'de Anda',
          'de Jesús',
          'Delacrúz',
          'Delafuente',
          'Delagarza',
          'Delao',
          'Delapaz',
          'Delarosa',
          'Delatorre',
          'Deleón',
          'Delgadillo',
          'Delgado',
          'Delrío',
          'Delvalle',
          'Díaz',
          'Domínguez',
          'Domínquez',
          'Duarte',
          'Dueñas',
          'Duran',
          'Echevarría',
          'Elizondo',
          'Enríquez',
          'Escalante',
          'Escamilla',
          'Escobar',
          'Escobedo',
          'Esparza',
          'Espinal',
          'Espino',
          'Espinosa',
          'Espinoza',
          'Esquibel',
          'Esquivel',
          'Estévez',
          'Estrada',
          'Fajardo',
          'Farías',
          'Feliciano',
          'Fernández',
          'Ferrer',
          'Fierro',
          'Figueroa',
          'Flores',
          'Flórez',
          'Fonseca',
          'Franco',
          'Frías',
          'Fuentes',
          'Gaitán',
          'Galarza',
          'Galindo',
          'Gallardo',
          'Gallegos',
          'Galván',
          'Gálvez',
          'Gamboa',
          'Gamez',
          'Gaona',
          'Garay',
          'García',
          'Garibay',
          'Garica',
          'Garrido',
          'Garza',
          'Gastélum',
          'Gaytán',
          'Gil',
          'Girón',
          'Godínez',
          'Godoy',
          'Gollum',
          'Gómez',
          'Gonzales',
          'González',
          'Gracia',
          'Granado',
          'Granados',
          'Griego',
          'Grijalva',
          'Guajardo',
          'Guardado',
          'Guerra',
          'Guerrero',
          'Guevara',
          'Guillen',
          'Gurule',
          'Gutiérrez',
          'Guzmán',
          'Haro',
          'Henríquez',
          'Heredia',
          'Hernádez',
          'Hernandes',
          'Hernández',
          'Herrera',
          'Hidalgo',
          'Hinojosa',
          'Holguín',
          'Huerta',
          'Huixtlacatl',
          'Hurtado',
          'Ibarra',
          'Iglesias',
          'Irizarry',
          'Jaime',
          'Jaimes',
          'Jáquez',
          'Jaramillo',
          'Jasso',
          'Jiménez',
          'Jimínez',
          'Juárez',
          'Jurado',
          'Kadar rodriguez',
          'Kamal',
          'Kamat',
          'Kanaria',
          'Kanea',
          'Kanimal',
          'Kano',
          'Kanzaki',
          'Kaplan',
          'Kara',
          'Karam',
          'Karan',
          'Kardache soto',
          'Karem',
          'Karen',
          'Khalid',
          'Kindelan',
          'Koenig',
          'Korta',
          'Korta hernandez',
          'Kortajarena',
          'Kranz sans',
          'Krasnova',
          'Krauel natera',
          'Kuzmina',
          'Kyra',
          'Laboy',
          'Lara',
          'Laureano',
          'Leal',
          'Lebrón',
          'Ledesma',
          'Leiva',
          'Lemus',
          'León',
          'Lerma',
          'Leyva',
          'Limón',
          'Linares',
          'Lira',
          'Llamas',
          'Loera',
          'Lomeli',
          'Longoria',
          'López',
          'Lovato',
          'Loya',
          'Lozada',
          'Lozano',
          'Lucero',
          'Lucio',
          'Luevano',
          'Lugo',
          'Luna',
          'Macías',
          'Madera',
          'Madrid',
          'Madrigal',
          'Maestas',
          'Magaña',
          'Malave',
          'Maldonado',
          'Manzanares',
          'Mares',
          'Marín',
          'Márquez',
          'Marrero',
          'Marroquín',
          'Martínez',
          'Mascareñas',
          'Mata',
          'Mateo',
          'Matías',
          'Matos',
          'Maya',
          'Mayorga',
          'Medina',
          'Medrano',
          'Mejía',
          'Meléndez',
          'Melgar',
          'Mena',
          'Menchaca',
          'Méndez',
          'Mendoza',
          'Menéndez',
          'Meraz',
          'Mercado',
          'Merino',
          'Mesa',
          'Meza',
          'Miramontes',
          'Miranda',
          'Mireles',
          'Mojica',
          'Molina',
          'Mondragón',
          'Monroy',
          'Montalvo',
          'Montañez',
          'Montaño',
          'Montemayor',
          'Montenegro',
          'Montero',
          'Montes',
          'Montez',
          'Montoya',
          'Mora',
          'Morales',
          'Moreno',
          'Mota',
          'Moya',
          'Munguía',
          'Muñiz',
          'Muñoz',
          'Murillo',
          'Muro',
          'Nájera',
          'Naranjo',
          'Narváez',
          'Nava',
          'Navarrete',
          'Navarro',
          'Nazario',
          'Negrete',
          'Negrón',
          'Nevárez',
          'Nieto',
          'Nieves',
          'Niño',
          'Noriega',
          'Núñez',
          'Ñañez',
          'Ocampo',
          'Ocasio',
          'Ochoa',
          'Ojeda',
          'Olivares',
          'Olivárez',
          'Olivas',
          'Olivera',
          'Olivo',
          'Olmos',
          'Olvera',
          'Ontiveros',
          'Oquendo',
          'Ordóñez',
          'Orellana',
          'Ornelas',
          'Orosco',
          'Orozco',
          'Orta',
          'Ortega',
          'Ortiz',
          'Osorio',
          'Otero',
          'Ozuna',
          'Pabón',
          'Pacheco',
          'Padilla',
          'Padrón',
          'Páez',
          'Pagan',
          'Palacios',
          'Palomino',
          'Palomo',
          'Pantoja',
          'Paredes',
          'Parra',
          'Partida',
          'Patiño',
          'Paz',
          'Pedraza',
          'Pedroza',
          'Pelayo',
          'Peña',
          'Perales',
          'Peralta',
          'Perea',
          'Peres',
          'Pérez',
          'Pichardo',
          'Pineda',
          'Piña',
          'Pizarro',
          'Polanco',
          'Ponce',
          'Porras',
          'Portillo',
          'Posada',
          'Prado',
          'Preciado',
          'Prieto',
          'Puente',
          'Puga',
          'Pulido',
          'Quesada',
          'Quevedo',
          'Quezada',
          'Quinta',
          'Quintairos',
          'Quintana',
          'Quintanilla',
          'Quintero',
          'Quintero cruz',
          'Quintero de la cruz',
          'Quiñones',
          'Quiñónez',
          'Quiros',
          'Quiroz',
          'Rael',
          'Ramírez',
          'Ramón',
          'Ramos',
          'Rangel',
          'Rascón',
          'Raya',
          'Razo',
          'Regalado',
          'Rendón',
          'Rentería',
          'Reséndez',
          'Reyes',
          'Reyna',
          'Reynoso',
          'Rico',
          'Rincón',
          'Riojas',
          'Ríos',
          'Rivas',
          'Rivera',
          'Rivero',
          'Robledo',
          'Robles',
          'Rocha',
          'Rodarte',
          'Rodrígez',
          'Rodríguez',
          'Rodríquez',
          'Rojas',
          'Rojo',
          'Roldán',
          'Rolón',
          'Romero',
          'Romo',
          'Roque',
          'Rosado',
          'Rosales',
          'Rosario',
          'Rosas',
          'Roybal',
          'Rubio',
          'Ruelas',
          'Ruiz',
          'Saavedra',
          'Sáenz',
          'Saiz',
          'Salas',
          'Salazar',
          'Salcedo',
          'Salcido',
          'Saldaña',
          'Saldivar',
          'Salgado',
          'Salinas',
          'Samaniego',
          'Sanabria',
          'Sanches',
          'Sánchez',
          'Sandoval',
          'Santacruz',
          'Santana',
          'Santiago',
          'Santillán',
          'Sarabia',
          'Sauceda',
          'Saucedo',
          'Sedillo',
          'Segovia',
          'Segura',
          'Sepúlveda',
          'Serna',
          'Serrano',
          'Serrato',
          'Sevilla',
          'Sierra',
          'Sisneros',
          'Solano',
          'Solís',
          'Soliz',
          'Solorio',
          'Solorzano',
          'Soria',
          'Sosa',
          'Sotelo',
          'Soto',
          'Suárez',
          'Tafoya',
          'Tamayo',
          'Tamez',
          'Tapia',
          'Tejada',
          'Tejeda',
          'Téllez',
          'Tello',
          'Terán',
          'Terrazas',
          'Tijerina',
          'Tirado',
          'Toledo',
          'Toro',
          'Torres',
          'Tórrez',
          'Tovar',
          'Trejo',
          'Treviño',
          'Trujillo',
          'Ulibarri',
          'Ulloa',
          'Urbina',
          'Ureña',
          'Urías',
          'Uribe',
          'Urrutia',
          'Vaca',
          'Valadez',
          'Valdés',
          'Valdez',
          'Valdivia',
          'Valencia',
          'Valentín',
          'Valenzuela',
          'Valladares',
          'Valle',
          'Vallejo',
          'Valles',
          'Valverde',
          'Vanegas',
          'Varela',
          'Vargas',
          'Vásquez',
          'Vázquez',
          'Vega',
          'Vela',
          'Velasco',
          'Velásquez',
          'Velázquez',
          'Vélez',
          'Véliz',
          'Venegas',
          'Vera',
          'Verdugo',
          'Verduzco',
          'Vergara',
          'Viera',
          'Vigil',
          'Villa',
          'Villagómez',
          'Villalobos',
          'Villalpando',
          'Villanueva',
          'Villareal',
          'Villarreal',
          'Villaseñor',
          'Villegas',
          'Xacon',
          'Xairo Belmonte',
          'Xana',
          'Xenia',
          'Xiana',
          'Xicoy',
          'Yago',
          'Yami',
          'Yanes',
          'Yáñez',
          'Ybarra',
          'Yebra',
          'Yunta',
          'Zabaleta',
          'Zamarreno',
          'Zamarripa',
          'Zambrana',
          'Zambrano',
          'Zamora',
          'Zamudio',
          'Zapata',
          'Zaragoza',
          'Zarate',
          'Zavala',
          'Zayas',
          'Zelaya',
          'Zepeda',
          'Zúñiga',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/es_MX/name/prefix.js': [
      function(require, module, exports) {
        module['exports'] = ['Sr.', 'Sra.', 'Sta.']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/es_MX/name/suffix.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Jr.',
          'Sr.',
          'I',
          'II',
          'III',
          'IV',
          'V',
          'MD',
          'DDS',
          'PhD',
          'DVM',
          'Ing.',
          'Lic.',
          'Dr.',
          'Mtro.',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/es_MX/name/title.js': [
      function(require, module, exports) {
        module['exports'] = {
          descriptor: [
            'Jefe',
            'Senior',
            'Directo',
            'Corporativo',
            'Dinánmico',
            'Futuro',
            'Producto',
            'Nacional',
            'Regional',
            'Distrito',
            'Central',
            'Global',
            'Cliente',
            'Inversor',
            'International',
            'Heredado',
            'Adelante',
            'Interno',
            'Humano',
            'Gerente',
            'SubGerente',
            'Director',
          ],
          level: [
            'Soluciones',
            'Programa',
            'Marca',
            'Seguridad',
            'Investigación',
            'Marketing',
            'Normas',
            'Implementación',
            'Integración',
            'Funcionalidad',
            'Respuesta',
            'Paradigma',
            'Tácticas',
            'Identidad',
            'Mercados',
            'Grupo',
            'División',
            'Aplicaciones',
            'Optimización',
            'Operaciones',
            'Infraestructura',
            'Intranet',
            'Comunicaciones',
            'Web',
            'Calidad',
            'Seguro',
            'Mobilidad',
            'Cuentas',
            'Datos',
            'Creativo',
            'Configuración',
            'Contabilidad',
            'Interacciones',
            'Factores',
            'Usabilidad',
            'Métricas',
          ],
          job: [
            'Supervisor',
            'Asociado',
            'Ejecutivo',
            'Relacciones',
            'Oficial',
            'Gerente',
            'Ingeniero',
            'Especialista',
            'Director',
            'Coordinador',
            'Administrador',
            'Arquitecto',
            'Analista',
            'Diseñador',
            'Planificador',
            'Técnico',
            'Funcionario',
            'Desarrollador',
            'Productor',
            'Consultor',
            'Asistente',
            'Facilitador',
            'Agente',
            'Representante',
            'Estratega',
            'Scrum Master',
            'Scrum Owner',
            'Product Owner',
            'Scrum Developer',
          ],
        }
      },
      {},
    ],
    '../node_modules/faker/lib/locales/es_MX/name/name.js': [
      function(require, module, exports) {
        module['exports'] = [
          '#{prefix} #{first_name} #{last_name} #{last_name}',
          '#{first_name} #{last_name} de #{last_name}',
          '#{suffix} #{first_name} #{last_name} #{last_name}',
          '#{first_name} #{last_name} #{last_name}',
          '#{first_name} #{last_name} #{last_name}',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/es_MX/name/index.js': [
      function(require, module, exports) {
        var name = {}
        module['exports'] = name
        name.first_name = require('./first_name')
        name.last_name = require('./last_name')
        name.prefix = require('./prefix')
        name.suffix = require('./suffix')
        name.title = require('./title')
        name.name = require('./name')
      },
      {
        './first_name':
          '../node_modules/faker/lib/locales/es_MX/name/first_name.js',
        './last_name':
          '../node_modules/faker/lib/locales/es_MX/name/last_name.js',
        './prefix':
          '../node_modules/faker/lib/locales/es_MX/name/prefix.js',
        './suffix':
          '../node_modules/faker/lib/locales/es_MX/name/suffix.js',
        './title': '../node_modules/faker/lib/locales/es_MX/name/title.js',
        './name': '../node_modules/faker/lib/locales/es_MX/name/name.js',
      },
    ],
    '../node_modules/faker/lib/locales/es_MX/address/city_prefix.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Aguascalientes',
          'Apodaca',
          'Buenavista',
          'Campeche',
          'Cancún',
          'Cárdenas',
          'Celaya',
          'Chalco',
          'Chetumal',
          'Chicoloapan',
          'Chignahuapan',
          'Chihuahua',
          'Chilpancingo',
          'Chimalhuacán',
          'Ciudad Acuña',
          'Ciudad de México',
          'Ciudad del Carmen',
          'Ciudad López Mateos',
          'Ciudad Madero',
          'Ciudad Obregón',
          'Ciudad Valles',
          'Ciudad Victoria',
          'Coatzacoalcos',
          'Colima-Villa de Álvarez',
          'Comitán de Dominguez',
          'Córdoba',
          'Cuautitlán Izcalli',
          'Cuautla',
          'Cuernavaca',
          'Culiacán',
          'Delicias',
          'Durango',
          'Ensenada',
          'Fresnillo',
          'General Escobedo',
          'Gómez Palacio',
          'Guadalajara',
          'Guadalupe',
          'Guanajuato',
          'Guaymas',
          'Hermosillo',
          'Hidalgo del Parral',
          'Iguala',
          'Irapuato',
          'Ixtapaluca',
          'Jiutepec',
          'Juárez',
          'La Laguna',
          'La Paz',
          'La Piedad-Pénjamo',
          'León',
          'Los Cabos',
          'Los Mochis',
          'Manzanillo',
          'Matamoros',
          'Mazatlán',
          'Mérida',
          'Mexicali',
          'Minatitlán',
          'Miramar',
          'Monclova',
          'Monclova-Frontera',
          'Monterrey',
          'Morelia',
          'Naucalpan de Juárez',
          'Navojoa',
          'Nezahualcóyotl',
          'Nogales',
          'Nuevo Laredo',
          'Oaxaca',
          'Ocotlán',
          'Ojo de agua',
          'Orizaba',
          'Pachuca',
          'Piedras Negras',
          'Poza Rica',
          'Puebla',
          'Puerto Vallarta',
          'Querétaro',
          'Reynosa-Río Bravo',
          'Rioverde-Ciudad Fernández',
          'Salamanca',
          'Saltillo',
          'San Cristobal de las Casas',
          'San Francisco Coacalco',
          'San Francisco del Rincón',
          'San Juan Bautista Tuxtepec',
          'San Juan del Río',
          'San Luis Potosí-Soledad',
          'San Luis Río Colorado',
          'San Nicolás de los Garza',
          'San Pablo de las Salinas',
          'San Pedro Garza García',
          'Santa Catarina',
          'Soledad de Graciano Sánchez',
          'Tampico-Pánuco',
          'Tapachula',
          'Tecomán',
          'Tehuacán',
          'Tehuacán',
          'Tehuantepec-Salina Cruz',
          'Tepexpan',
          'Tepic',
          'Tetela de Ocampo',
          'Texcoco de Mora',
          'Tijuana',
          'Tlalnepantla',
          'Tlaquepaque',
          'Tlaxcala-Apizaco',
          'Toluca',
          'Tonalá',
          'Torreón',
          'Tula',
          'Tulancingo',
          'Tulancingo de Bravo',
          'Tuxtla Gutiérrez',
          'Uruapan',
          'Uruapan del Progreso',
          'Valle de México',
          'Veracruz',
          'Villa de Álvarez',
          'Villa Nicolás Romero',
          'Villahermosa',
          'Xalapa',
          'Zacatecas-Guadalupe',
          'Zacatlan',
          'Zacatzingo',
          'Zamora-Jacona',
          'Zapopan',
          'Zitacuaro',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/es_MX/address/city_suffix.js': [
      function(require, module, exports) {
        module['exports'] = [
          'town',
          'ton',
          'land',
          'ville',
          'berg',
          'burgh',
          'borough',
          'bury',
          'view',
          'port',
          'mouth',
          'stad',
          'furt',
          'chester',
          'mouth',
          'fort',
          'haven',
          'side',
          'shire',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/es_MX/address/country.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Afganistán',
          'Albania',
          'Argelia',
          'Andorra',
          'Angola',
          'Argentina',
          'Armenia',
          'Aruba',
          'Australia',
          'Austria',
          'Azerbayán',
          'Bahamas',
          'Barein',
          'Bangladesh',
          'Barbados',
          'Bielorusia',
          'Bélgica',
          'Belice',
          'Bermuda',
          'Bután',
          'Bolivia',
          'Bosnia Herzegovina',
          'Botswana',
          'Brasil',
          'Bulgaria',
          'Burkina Faso',
          'Burundi',
          'Camboya',
          'Camerún',
          'Canada',
          'Cabo Verde',
          'Islas Caimán',
          'Chad',
          'Chile',
          'China',
          'Isla de Navidad',
          'Colombia',
          'Comodos',
          'Congo',
          'Costa Rica',
          'Costa de Marfil',
          'Croacia',
          'Cuba',
          'Chipre',
          'República Checa',
          'Dinamarca',
          'Dominica',
          'República Dominicana',
          'Ecuador',
          'Egipto',
          'El Salvador',
          'Guinea Ecuatorial',
          'Eritrea',
          'Estonia',
          'Etiopía',
          'Islas Faro',
          'Fiji',
          'Finlandia',
          'Francia',
          'Gabón',
          'Gambia',
          'Georgia',
          'Alemania',
          'Ghana',
          'Grecia',
          'Groenlandia',
          'Granada',
          'Guadalupe',
          'Guam',
          'Guatemala',
          'Guinea',
          'Guinea-Bisau',
          'Guayana',
          'Haiti',
          'Honduras',
          'Hong Kong',
          'Hungria',
          'Islandia',
          'India',
          'Indonesia',
          'Iran',
          'Irak',
          'Irlanda',
          'Italia',
          'Jamaica',
          'Japón',
          'Jordania',
          'Kazajistan',
          'Kenia',
          'Kiribati',
          'Corea',
          'Kuwait',
          'Letonia',
          'Líbano',
          'Liberia',
          'Liechtenstein',
          'Lituania',
          'Luxemburgo',
          'Macao',
          'Macedonia',
          'Madagascar',
          'Malawi',
          'Malasia',
          'Maldivas',
          'Mali',
          'Malta',
          'Martinica',
          'Mauritania',
          'México',
          'Micronesia',
          'Moldavia',
          'Mónaco',
          'Mongolia',
          'Montenegro',
          'Montserrat',
          'Marruecos',
          'Mozambique',
          'Namibia',
          'Nauru',
          'Nepal',
          'Holanda',
          'Nueva Zelanda',
          'Nicaragua',
          'Niger',
          'Nigeria',
          'Noruega',
          'Omán',
          'Pakistan',
          'Panamá',
          'Papúa Nueva Guinea',
          'Paraguay',
          'Perú',
          'Filipinas',
          'Poland',
          'Portugal',
          'Puerto Rico',
          'Rusia',
          'Ruanda',
          'Samoa',
          'San Marino',
          'Santo Tomé y Principe',
          'Arabia Saudí',
          'Senegal',
          'Serbia',
          'Seychelles',
          'Sierra Leona',
          'Singapur',
          'Eslovaquia',
          'Eslovenia',
          'Somalia',
          'España',
          'Sri Lanka',
          'Sudán',
          'Suriname',
          'Suecia',
          'Suiza',
          'Siria',
          'Taiwan',
          'Tajikistan',
          'Tanzania',
          'Tailandia',
          'Timor-Leste',
          'Togo',
          'Tonga',
          'Trinidad y Tobago',
          'Tunez',
          'Turquia',
          'Uganda',
          'Ucrania',
          'Emiratos Árabes Unidos',
          'Reino Unido',
          'Estados Unidos de América',
          'Uruguay',
          'Uzbekistan',
          'Vanuatu',
          'Venezuela',
          'Vietnam',
          'Yemen',
          'Zambia',
          'Zimbabwe',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/es_MX/address/building_number.js': [
      function(require, module, exports) {
        module['exports'] = [
          ' s/n.',
          ', #',
          ', ##',
          ' #',
          ' ##',
          ' ###',
          ' ####',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/es_MX/address/street_suffix.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Aldea',
          'Apartamento',
          'Arrabal',
          'Arroyo',
          'Avenida',
          'Bajada',
          'Barranco',
          'Barrio',
          'Bloque',
          'Calle',
          'Calleja',
          'Camino',
          'Carretera',
          'Caserio',
          'Colegio',
          'Colonia',
          'Conjunto',
          'Cuesta',
          'Chalet',
          'Edificio',
          'Entrada',
          'Escalinata',
          'Explanada',
          'Extramuros',
          'Extrarradio',
          'Ferrocarril',
          'Glorieta',
          'Gran Subida',
          'Grupo',
          'Huerta',
          'Jardines',
          'Lado',
          'Lugar',
          'Manzana',
          'Masía',
          'Mercado',
          'Monte',
          'Muelle',
          'Municipio',
          'Parcela',
          'Parque',
          'Partida',
          'Pasaje',
          'Paseo',
          'Plaza',
          'Poblado',
          'Polígono',
          'Prolongación',
          'Puente',
          'Puerta',
          'Quinta',
          'Ramal',
          'Rambla',
          'Rampa',
          'Riera',
          'Rincón',
          'Ronda',
          'Rua',
          'Salida',
          'Sector',
          'Sección',
          'Senda',
          'Solar',
          'Subida',
          'Terrenos',
          'Torrente',
          'Travesía',
          'Urbanización',
          'Vía',
          'Vía Pública',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/es_MX/address/secondary_address.js': [
      function(require, module, exports) {
        module['exports'] = ['Esc. ###', 'Puerta ###', 'Edificio #']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/es_MX/address/postcode.js': [
      function(require, module, exports) {
        module['exports'] = ['#####']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/es_MX/address/state.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Aguascalientes',
          'Baja California Norte',
          'Baja California Sur',
          'Estado de México',
          'Campeche',
          'Chiapas',
          'Chihuahua',
          'Coahuila',
          'Colima',
          'Durango',
          'Guanajuato',
          'Guerrero',
          'Hidalgo',
          'Jalisco',
          'Michoacan',
          'Morelos',
          'Nayarit',
          'Nuevo León',
          'Oaxaca',
          'Puebla',
          'Querétaro',
          'Quintana Roo',
          'San Luis Potosí',
          'Sinaloa',
          'Sonora',
          'Tabasco',
          'Tamaulipas',
          'Tlaxcala',
          'Veracruz',
          'Yucatán',
          'Zacatecas',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/es_MX/address/state_abbr.js': [
      function(require, module, exports) {
        module['exports'] = [
          'AS',
          'BC',
          'BS',
          'CC',
          'CS',
          'CH',
          'CL',
          'CM',
          'DF',
          'DG',
          'GT',
          'GR',
          'HG',
          'JC',
          'MC',
          'MN',
          'MS',
          'NT',
          'NL',
          'OC',
          'PL',
          'QT',
          'QR',
          'SP',
          'SL',
          'SR',
          'TC',
          'TS',
          'TL',
          'VZ',
          'YN',
          'ZS',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/es_MX/address/time_zone.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Pacífico/Midway',
          'Pacífico/Pago_Pago',
          'Pacífico/Honolulu',
          'America/Juneau',
          'America/Los_Angeles',
          'America/Tijuana',
          'America/Denver',
          'America/Phoenix',
          'America/Chihuahua',
          'America/Mazatlan',
          'America/Chicago',
          'America/Regina',
          'America/Mexico_City',
          'America/Monterrey',
          'America/Guatemala',
          'America/New_York',
          'America/Indiana/Indianapolis',
          'America/Bogota',
          'America/Lima',
          'America/Lima',
          'America/Halifax',
          'America/Caracas',
          'America/La_Paz',
          'America/Santiago',
          'America/St_Johns',
          'America/Sao_Paulo',
          'America/Argentina/Buenos_Aires',
          'America/Guyana',
          'America/Godthab',
          'Atlantic/South_Georgia',
          'Atlantic/Azores',
          'Atlantic/Cape_Verde',
          'Europa/Dublin',
          'Europa/London',
          'Europa/Lisbon',
          'Europa/London',
          'Africa/Casablanca',
          'Africa/Monrovia',
          'Etc/UTC',
          'Europa/Belgrade',
          'Europa/Bratislava',
          'Europa/Budapest',
          'Europa/Ljubljana',
          'Europa/Prague',
          'Europa/Sarajevo',
          'Europa/Skopje',
          'Europa/Warsaw',
          'Europa/Zagreb',
          'Europa/Brussels',
          'Europa/Copenhagen',
          'Europa/Madrid',
          'Europa/Paris',
          'Europa/Amsterdam',
          'Europa/Berlin',
          'Europa/Berlin',
          'Europa/Rome',
          'Europa/Stockholm',
          'Europa/Vienna',
          'Africa/Algiers',
          'Europa/Bucharest',
          'Africa/Cairo',
          'Europa/Helsinki',
          'Europa/Kiev',
          'Europa/Riga',
          'Europa/Sofia',
          'Europa/Tallinn',
          'Europa/Vilnius',
          'Europa/Athens',
          'Europa/Istanbul',
          'Europa/Minsk',
          'Asia/Jerusalen',
          'Africa/Harare',
          'Africa/Johannesburg',
          'Europa/Moscú',
          'Europa/Moscú',
          'Europa/Moscú',
          'Asia/Kuwait',
          'Asia/Riyadh',
          'Africa/Nairobi',
          'Asia/Baghdad',
          'Asia/Tehran',
          'Asia/Muscat',
          'Asia/Muscat',
          'Asia/Baku',
          'Asia/Tbilisi',
          'Asia/Yerevan',
          'Asia/Kabul',
          'Asia/Yekaterinburg',
          'Asia/Karachi',
          'Asia/Karachi',
          'Asia/Tashkent',
          'Asia/Kolkata',
          'Asia/Kolkata',
          'Asia/Kolkata',
          'Asia/Kolkata',
          'Asia/Kathmandu',
          'Asia/Dhaka',
          'Asia/Dhaka',
          'Asia/Colombo',
          'Asia/Almaty',
          'Asia/Novosibirsk',
          'Asia/Rangoon',
          'Asia/Bangkok',
          'Asia/Bangkok',
          'Asia/Jakarta',
          'Asia/Krasnoyarsk',
          'Asia/Shanghai',
          'Asia/Chongqing',
          'Asia/Hong_Kong',
          'Asia/Urumqi',
          'Asia/Kuala_Lumpur',
          'Asia/Singapore',
          'Asia/Taipei',
          'Australia/Perth',
          'Asia/Irkutsk',
          'Asia/Ulaanbaatar',
          'Asia/Seoul',
          'Asia/Tokyo',
          'Asia/Tokyo',
          'Asia/Tokyo',
          'Asia/Yakutsk',
          'Australia/Darwin',
          'Australia/Adelaide',
          'Australia/Melbourne',
          'Australia/Melbourne',
          'Australia/Sydney',
          'Australia/Brisbane',
          'Australia/Hobart',
          'Asia/Vladivostok',
          'Pacífico/Guam',
          'Pacífico/Port_Moresby',
          'Asia/Magadan',
          'Asia/Magadan',
          'Pacífico/Noumea',
          'Pacífico/Fiji',
          'Asia/Kamchatka',
          'Pacífico/Majuro',
          'Pacífico/Auckland',
          'Pacífico/Auckland',
          'Pacífico/Tongatapu',
          'Pacífico/Fakaofo',
          'Pacífico/Apia',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/es_MX/address/city.js': [
      function(require, module, exports) {
        module['exports'] = ['#{city_prefix}']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/es_MX/address/street.js': [
      function(require, module, exports) {
        module['exports'] = [
          '20 de Noviembre',
          'Cinco de Mayo',
          'Cuahutemoc',
          'Manzanares',
          'Donceles',
          'Francisco I. Madero',
          'Juárez',
          'Repúplica de Cuba',
          'Repúplica de Chile',
          'Repúplica de Argentina',
          'Repúplica de Uruguay',
          'Isabel la Católica',
          'Izazaga',
          'Eje Central',
          'Eje 6',
          'Eje 5',
          'La viga',
          'Aniceto Ortega',
          'Miguel Ángel de Quevedo',
          'Amores',
          'Coyoacán',
          'Coruña',
          'Batalla de Naco',
          'La otra banda',
          'Piedra del Comal',
          'Balcón de los edecanes',
          'Barrio la Lonja',
          'Jicolapa',
          'Zacatlán',
          'Zapata',
          'Polotitlan',
          'Calimaya',
          'Flor Marina',
          'Flor Solvestre',
          'San Miguel',
          'Naranjo',
          'Cedro',
          'Jalisco',
          'Avena',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/es_MX/address/street_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          '#{street_suffix} #{Name.first_name}',
          '#{street_suffix} #{Name.first_name} #{Name.last_name}',
          '#{street_suffix} #{street}',
          '#{street_suffix} #{street}',
          '#{street_suffix} #{street}',
          '#{street_suffix} #{street}',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/es_MX/address/street_address.js': [
      function(require, module, exports) {
        module['exports'] = [
          '#{street_name}#{building_number}',
          '#{street_name}#{building_number} #{secondary_address}',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/es_MX/address/default_country.js': [
      function(require, module, exports) {
        module['exports'] = ['México']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/es_MX/address/index.js': [
      function(require, module, exports) {
        var address = {}
        module['exports'] = address
        address.city_prefix = require('./city_prefix')
        address.city_suffix = require('./city_suffix')
        address.country = require('./country')
        address.building_number = require('./building_number')
        address.street_suffix = require('./street_suffix')
        address.secondary_address = require('./secondary_address')
        address.postcode = require('./postcode')
        address.state = require('./state')
        address.state_abbr = require('./state_abbr')
        address.time_zone = require('./time_zone')
        address.city = require('./city')
        address.street = require('./street')
        address.street_name = require('./street_name')
        address.street_address = require('./street_address')
        address.default_country = require('./default_country')
      },
      {
        './city_prefix':
          '../node_modules/faker/lib/locales/es_MX/address/city_prefix.js',
        './city_suffix':
          '../node_modules/faker/lib/locales/es_MX/address/city_suffix.js',
        './country':
          '../node_modules/faker/lib/locales/es_MX/address/country.js',
        './building_number':
          '../node_modules/faker/lib/locales/es_MX/address/building_number.js',
        './street_suffix':
          '../node_modules/faker/lib/locales/es_MX/address/street_suffix.js',
        './secondary_address':
          '../node_modules/faker/lib/locales/es_MX/address/secondary_address.js',
        './postcode':
          '../node_modules/faker/lib/locales/es_MX/address/postcode.js',
        './state':
          '../node_modules/faker/lib/locales/es_MX/address/state.js',
        './state_abbr':
          '../node_modules/faker/lib/locales/es_MX/address/state_abbr.js',
        './time_zone':
          '../node_modules/faker/lib/locales/es_MX/address/time_zone.js',
        './city':
          '../node_modules/faker/lib/locales/es_MX/address/city.js',
        './street':
          '../node_modules/faker/lib/locales/es_MX/address/street.js',
        './street_name':
          '../node_modules/faker/lib/locales/es_MX/address/street_name.js',
        './street_address':
          '../node_modules/faker/lib/locales/es_MX/address/street_address.js',
        './default_country':
          '../node_modules/faker/lib/locales/es_MX/address/default_country.js',
      },
    ],
    '../node_modules/faker/lib/locales/es_MX/company/suffix.js': [
      function(require, module, exports) {
        module['exports'] = ['S.L.', 'e Hijos', 'S.A.', 'Hermanos']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/es_MX/company/adjective.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Adaptativo',
          'Avanzado',
          'Asimilado',
          'Automatizado',
          'Equilibrado',
          'Centrado en el negocio',
          'Centralizado',
          'Clonado',
          'Compatible',
          'Configurable',
          'Multi grupo',
          'Multi plataforma',
          'Centrado en el usuario',
          'Configurable',
          'Descentralizado',
          'Digitalizado',
          'Distribuido',
          'Diverso',
          'Reducido',
          'Mejorado',
          'Para toda la empresa',
          'Ergonomico',
          'Exclusivo',
          'Expandido',
          'Extendido',
          'Cara a cara',
          'Enfocado',
          'Totalmente configurable',
          'Fundamental',
          'Orígenes',
          'Horizontal',
          'Implementado',
          'Innovador',
          'Integrado',
          'Intuitivo',
          'Inverso',
          'Gestionado',
          'Obligatorio',
          'Monitorizado',
          'Multi canal',
          'Multi lateral',
          'Multi capa',
          'En red',
          'Orientado a objetos',
          'Open-source',
          'Operativo',
          'Optimizado',
          'Opcional',
          'Organico',
          'Organizado',
          'Perseverando',
          'Persistente',
          'en fases',
          'Polarizado',
          'Pre-emptivo',
          'Proactivo',
          'Enfocado a benficios',
          'Profundo',
          'Programable',
          'Progresivo',
          'Public-key',
          'Enfocado en la calidad',
          'Reactivo',
          'Realineado',
          'Re-contextualizado',
          'Re-implementado',
          'Reducido',
          'Ingenieria inversa',
          'Robusto',
          'Fácil',
          'Seguro',
          'Auto proporciona',
          'Compartible',
          'Intercambiable',
          'Sincronizado',
          'Orientado a equipos',
          'Total',
          'Universal',
          'Mejorado',
          'Actualizable',
          'Centrado en el usuario',
          'Amigable',
          'Versatil',
          'Virtual',
          'Visionario',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/es_MX/company/descriptor.js': [
      function(require, module, exports) {
        module['exports'] = [
          '24 horas',
          '24/7',
          '3rd generación',
          '4th generación',
          '5th generación',
          '6th generación',
          'analizada',
          'asimétrica',
          'asíncrona',
          'monitorizada por red',
          'bidireccional',
          'bifurcada',
          'generada por el cliente',
          'cliente servidor',
          'coherente',
          'cohesiva',
          'compuesto',
          'sensible al contexto',
          'basado en el contexto',
          'basado en contenido',
          'dedicada',
          'generado por la demanda',
          'didactica',
          'direccional',
          'discreta',
          'dinámica',
          'potenciada',
          'acompasada',
          'ejecutiva',
          'explícita',
          'tolerante a fallos',
          'innovadora',
          'amplio ábanico',
          'global',
          'heurística',
          'alto nivel',
          'holística',
          'homogénea',
          'hibrida',
          'incremental',
          'intangible',
          'interactiva',
          'intermedia',
          'local',
          'logística',
          'maximizada',
          'metódica',
          'misión crítica',
          'móbil',
          'modular',
          'motivadora',
          'multimedia',
          'multiestado',
          'multitarea',
          'nacional',
          'basado en necesidades',
          'neutral',
          'nueva generación',
          'no-volátil',
          'orientado a objetos',
          'óptima',
          'optimizada',
          'radical',
          'tiempo real',
          'recíproca',
          'regional',
          'escalable',
          'secundaria',
          'orientada a soluciones',
          'estable',
          'estatica',
          'sistemática',
          'sistémica',
          'tangible',
          'terciaria',
          'transicional',
          'uniforme',
          'valor añadido',
          'vía web',
          'defectos cero',
          'tolerancia cero',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/es_MX/company/noun.js': [
      function(require, module, exports) {
        module['exports'] = [
          'habilidad',
          'acceso',
          'adaptador',
          'algoritmo',
          'alianza',
          'analista',
          'aplicación',
          'enfoque',
          'arquitectura',
          'archivo',
          'inteligencia artificial',
          'array',
          'actitud',
          'medición',
          'gestión presupuestaria',
          'capacidad',
          'desafío',
          'circuito',
          'colaboración',
          'complejidad',
          'concepto',
          'conglomeración',
          'contingencia',
          'núcleo',
          'fidelidad',
          'base de datos',
          'data-warehouse',
          'definición',
          'emulación',
          'codificar',
          'encriptar',
          'extranet',
          'firmware',
          'flexibilidad',
          'focus group',
          'previsión',
          'base de trabajo',
          'función',
          'funcionalidad',
          'Interfaz Gráfica',
          'groupware',
          'Interfaz gráfico de usuario',
          'hardware',
          'Soporte',
          'jerarquía',
          'conjunto',
          'implementación',
          'infraestructura',
          'iniciativa',
          'instalación',
          'conjunto de instrucciones',
          'interfaz',
          'intranet',
          'base del conocimiento',
          'red de area local',
          'aprovechar',
          'matrices',
          'metodologías',
          'middleware',
          'migración',
          'modelo',
          'moderador',
          'monitorizar',
          'arquitectura abierta',
          'sistema abierto',
          'orquestar',
          'paradigma',
          'paralelismo',
          'política',
          'portal',
          'estructura de precios',
          'proceso de mejora',
          'producto',
          'productividad',
          'proyecto',
          'proyección',
          'protocolo',
          'línea segura',
          'software',
          'solución',
          'estandardización',
          'estrategia',
          'estructura',
          'éxito',
          'superestructura',
          'soporte',
          'sinergia',
          'mediante',
          'marco de tiempo',
          'caja de herramientas',
          'utilización',
          'website',
          'fuerza de trabajo',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/es_MX/company/bs_verb.js': [
      function(require, module, exports) {
        module['exports'] = [
          'poner en práctica',
          'utilizar',
          'integrar',
          'racionalizar',
          'optimizar',
          'evolucionar',
          'transformar',
          'abrazar',
          'habilitar',
          'orquestar',
          'apalancamiento',
          'reinventar',
          'agregado',
          'arquitecto',
          'mejorar',
          'incentivar',
          'transformarse',
          'empoderar',
          'Envisioneer',
          'monetizar',
          'arnés',
          'facilitar',
          'aprovechar',
          'desintermediar',
          'sinergia',
          'estrategias',
          'desplegar',
          'marca',
          'crecer',
          'objetivo',
          'sindicato',
          'sintetizar',
          'entregue',
          'malla',
          'incubar',
          'enganchar',
          'maximizar',
          'punto de referencia',
          'acelerar',
          'reintermediate',
          'pizarra',
          'visualizar',
          'reutilizar',
          'innovar',
          'escala',
          'desatar',
          'conducir',
          'extender',
          'ingeniero',
          'revolucionar',
          'generar',
          'explotar',
          'transición',
          'e-enable',
          'repetir',
          'cultivar',
          'matriz',
          'productize',
          'redefinir',
          'recontextualizar',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/es_MX/company/name.js': [
      function(require, module, exports) {
        module['exports'] = [
          '#{Name.last_name} #{suffix}',
          '#{Name.last_name} y #{Name.last_name}',
          '#{Name.last_name} #{Name.last_name} #{suffix}',
          '#{Name.last_name}, #{Name.last_name} y #{Name.last_name} Asociados',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/es_MX/company/bs_adjective.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Clics y mortero',
          'Valor añadido',
          'Vertical',
          'Proactivo',
          'Robusto',
          'Revolucionario',
          'Escalable',
          'De vanguardia',
          'Innovador',
          'Intuitivo',
          'Estratégico',
          'E-business',
          'Misión crítica',
          'Pegajosa',
          'Doce y cincuenta y nueve de la noche',
          '24/7',
          'De extremo a extremo',
          'Global',
          'B2B',
          'B2C',
          'Granular',
          'Fricción',
          'Virtual',
          'Viral',
          'Dinámico',
          '24/365',
          'Mejor de su clase',
          'Asesino',
          'Magnética',
          'Filo sangriento',
          'Habilitado web',
          'Interactiva',
          'Punto com',
          'Sexy',
          'Back-end',
          'Tiempo real',
          'Eficiente',
          'Frontal',
          'Distribuida',
          'Sin costura',
          'Extensible',
          'Llave en mano',
          'Clase mundial',
          'Código abierto',
          'Multiplataforma',
          'Cross-media',
          'Sinérgico',
          'ladrillos y clics',
          'Fuera de la caja',
          'Empresa',
          'Integrado',
          'Impactante',
          'Inalámbrico',
          'Transparente',
          'Próxima generación',
          'Innovador',
          'User-centric',
          'Visionario',
          'A medida',
          'Ubicua',
          'Enchufa y juega',
          'Colaboración',
          'Convincente',
          'Holístico',
          'Ricos',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/es_MX/company/bs_noun.js': [
      function(require, module, exports) {
        module['exports'] = [
          'sinergias',
          'web-readiness',
          'paradigmas',
          'mercados',
          'asociaciones',
          'infraestructuras',
          'plataformas',
          'iniciativas',
          'canales',
          'ojos',
          'comunidades',
          'ROI',
          'soluciones',
          'minoristas electrónicos',
          'e-servicios',
          'elementos de acción',
          'portales',
          'nichos',
          'tecnologías',
          'contenido',
          'vortales',
          'cadenas de suministro',
          'convergencia',
          'relaciones',
          'arquitecturas',
          'interfaces',
          'mercados electrónicos',
          'e-commerce',
          'sistemas',
          'ancho de banda',
          'infomediarios',
          'modelos',
          'Mindshare',
          'entregables',
          'usuarios',
          'esquemas',
          'redes',
          'aplicaciones',
          'métricas',
          'e-business',
          'funcionalidades',
          'experiencias',
          'servicios web',
          'metodologías',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/es_MX/company/index.js': [
      function(require, module, exports) {
        var company = {}
        module['exports'] = company
        company.suffix = require('./suffix')
        company.adjective = require('./adjective')
        company.descriptor = require('./descriptor')
        company.noun = require('./noun')
        company.bs_verb = require('./bs_verb')
        company.name = require('./name')
        company.bs_adjective = require('./bs_adjective')
        company.bs_noun = require('./bs_noun')
      },
      {
        './suffix':
          '../node_modules/faker/lib/locales/es_MX/company/suffix.js',
        './adjective':
          '../node_modules/faker/lib/locales/es_MX/company/adjective.js',
        './descriptor':
          '../node_modules/faker/lib/locales/es_MX/company/descriptor.js',
        './noun':
          '../node_modules/faker/lib/locales/es_MX/company/noun.js',
        './bs_verb':
          '../node_modules/faker/lib/locales/es_MX/company/bs_verb.js',
        './name':
          '../node_modules/faker/lib/locales/es_MX/company/name.js',
        './bs_adjective':
          '../node_modules/faker/lib/locales/es_MX/company/bs_adjective.js',
        './bs_noun':
          '../node_modules/faker/lib/locales/es_MX/company/bs_noun.js',
      },
    ],
    '../node_modules/faker/lib/locales/es_MX/internet/free_email.js': [
      function(require, module, exports) {
        module['exports'] = [
          'gmail.com',
          'yahoo.com',
          'hotmail.com',
          'nearbpo.com',
          'corpfolder.com',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/es_MX/internet/domain_suffix.js': [
      function(require, module, exports) {
        module['exports'] = [
          'com',
          'mx',
          'info',
          'com.mx',
          'org',
          'gob.mx',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/es_MX/internet/index.js': [
      function(require, module, exports) {
        var internet = {}
        module['exports'] = internet
        internet.free_email = require('./free_email')
        internet.domain_suffix = require('./domain_suffix')
      },
      {
        './free_email':
          '../node_modules/faker/lib/locales/es_MX/internet/free_email.js',
        './domain_suffix':
          '../node_modules/faker/lib/locales/es_MX/internet/domain_suffix.js',
      },
    ],
    '../node_modules/faker/lib/locales/es_MX/phone_number/formats.js': [
      function(require, module, exports) {
        module['exports'] = [
          '5###-###-###',
          '5##.###.###',
          '5## ### ###',
          '5########',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/es_MX/phone_number/index.js': [
      function(require, module, exports) {
        var phone_number = {}
        module['exports'] = phone_number
        phone_number.formats = require('./formats')
      },
      {
        './formats':
          '../node_modules/faker/lib/locales/es_MX/phone_number/formats.js',
      },
    ],
    '../node_modules/faker/lib/locales/es_MX/cell_phone/formats.js': [
      function(require, module, exports) {
        module['exports'] = [
          '5##-###-###',
          '5##.###.###',
          '5## ### ###',
          '5########',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/es_MX/cell_phone/index.js': [
      function(require, module, exports) {
        var cell_phone = {}
        module['exports'] = cell_phone
        cell_phone.formats = require('./formats')
      },
      {
        './formats':
          '../node_modules/faker/lib/locales/es_MX/cell_phone/formats.js',
      },
    ],
    '../node_modules/faker/lib/locales/es_MX/lorem/words.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Abacalero',
          'Abacería',
          'Abacero',
          'Abacial',
          'Abaco',
          'Abacora',
          'Abacorar',
          'Abad',
          'Abada',
          'Abadejo',
          'Abadengo',
          'Abadernar',
          'Abadesa',
          'Abadí',
          'Abadía',
          'Abadiado',
          'Abadiato',
          'Abajadero',
          'Abajamiento',
          'Abajar',
          'Abajeño',
          'Abajera',
          'Abajo',
          'Abalada',
          'Abalanzar',
          'Abalar',
          'Abalaustrado',
          'Abaldonadamente',
          'Abaldonamiento',
          'Bastonada',
          'Bastonazo',
          'Bastoncillo',
          'Bastonear',
          'Bastonero',
          'Bástulo',
          'Basura',
          'Basural',
          'Basurear',
          'Basurero',
          'Bata',
          'Batacazo',
          'Batahola',
          'Batalán',
          'Batalla',
          'Batallador',
          'Batallar',
          'Batallaroso',
          'Batallola',
          'Batallón',
          'Batallona',
          'Batalloso',
          'Batán',
          'Batanar',
          'Batanear',
          'Batanero',
          'Batanga',
          'Bataola',
          'Batata',
          'Batatazo',
          'Batato',
          'Batavia',
          'Bátavo',
          'Batayola',
          'Batazo',
          'Bate',
          'Batea',
          'Bateador',
          'Bateaguas',
          'Cenagar',
          'Cenagoso',
          'Cenal',
          'Cenaoscuras',
          'Ceñar',
          'Cenata',
          'Cenca',
          'Cencapa',
          'Cencellada',
          'Cenceñada',
          'Cenceño',
          'Cencero',
          'Cencerra',
          'Cencerrada',
          'Cencerrado',
          'Cencerrear',
          'Cencerreo',
          'Cencerril',
          'Cencerrillas',
          'Cencerro',
          'Cencerrón',
          'Cencha',
          'Cencido',
          'Cencío',
          'Cencivera',
          'Cenco',
          'Cencuate',
          'Cendal',
          'Cendalí',
          'Céndea',
          'Cendolilla',
          'Cendra',
          'Cendrada',
          'Cendradilla',
          'Cendrado',
          'Cendrar',
          'Cendrazo',
          'Cenefa',
          'Cenegar',
          'Ceneque',
          'Cenero',
          'Cenestesia',
          'Desceñir',
          'Descensión',
          'Descenso',
          'Descentrado',
          'Descentralización',
          'Descentralizador',
          'Descentralizar',
          'Descentrar',
          'Descepar',
          'Descerar',
          'Descercado',
          'Descercador',
          'Descercar',
          'Descerco',
          'Descerebración',
          'Descerebrado',
          'Descerebrar',
          'Descerezar',
          'Descerrajado',
          'Descerrajadura',
          'Descerrajar',
          'Descerrar',
          'Descerrumarse',
          'Descervigamiento',
          'Descervigar',
          'Deschapar',
          'Descharchar',
          'Deschavetado',
          'Deschavetarse',
          'Deschuponar',
          'Descifrable',
          'Descifrador',
          'Desciframiento',
          'Descifrar',
          'Descifre',
          'Descimbramiento',
          'Descimbrar',
          'Engarbarse',
          'Engarberar',
          'Engarbullar',
          'Engarce',
          'Engarfiar',
          'Engargantadura',
          'Engargantar',
          'Engargante',
          'Engargolado',
          'Engargolar',
          'Engaritar',
          'Engarmarse',
          'Engarnio',
          'Engarrafador',
          'Engarrafar',
          'Engarrar',
          'Engarro',
          'Engarronar',
          'Engarrotar',
          'Engarzador',
          'Engarzadura',
          'Engarzar',
          'Engasgarse',
          'Engastador',
          'Engastadura',
          'Engastar',
          'Engaste',
          'Ficción',
          'Fice',
          'Ficha',
          'Fichaje',
          'Fichar',
          'Fichero',
          'Ficoideo',
          'Ficticio',
          'Fidalgo',
          'Fidecomiso',
          'Fidedigno',
          'Fideero',
          'Fideicomisario',
          'Fideicomiso',
          'Fideicomitente',
          'Fideísmo',
          'Fidelidad',
          'Fidelísimo',
          'Fideo',
          'Fido',
          'Fiducia',
          'Geminación',
          'Geminado',
          'Geminar',
          'Géminis',
          'Gémino',
          'Gemíparo',
          'Gemiquear',
          'Gemiqueo',
          'Gemir',
          'Gemología',
          'Gemológico',
          'Gemólogo',
          'Gemonias',
          'Gemoso',
          'Gemoterapia',
          'Gen',
          'Genciana',
          'Gencianáceo',
          'Gencianeo',
          'Gendarme',
          'Gendarmería',
          'Genealogía',
          'Genealógico',
          'Genealogista',
          'Genearca',
          'Geneático',
          'Generable',
          'Generación',
          'Generacional',
          'Generador',
          'General',
          'Generala',
          'Generalato',
          'Generalidad',
          'Generalísimo',
          'Incordio',
          'Incorporación',
          'Incorporal',
          'Incorporalmente',
          'Incorporar',
          'Incorporeidad',
          'Incorpóreo',
          'Incorporo',
          'Incorrección',
          'Incorrectamente',
          'Incorrecto',
          'Incorregibilidad',
          'Incorregible',
          'Incorregiblemente',
          'Incorrupción',
          'Incorruptamente',
          'Incorruptibilidad',
          'Incorruptible',
          'Incorrupto',
          'Incrasar',
          'Increado',
          'Incredibilidad',
          'Incrédulamente',
          'Incredulidad',
          'Incrédulo',
          'Increíble',
          'Increíblemente',
          'Incrementar',
          'Incremento',
          'Increpación',
          'Increpador',
          'Increpar',
          'Incriminación',
          'Incriminar',
          'Incristalizable',
          'Incruentamente',
          'Incruento',
          'Incrustación',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/es_MX/lorem/supplemental.js': [
      function(require, module, exports) {
        module['exports'] = [
          'abbas',
          'abduco',
          'abeo',
          'abscido',
          'absconditus',
          'absens',
          'absorbeo',
          'absque',
          'abstergo',
          'absum',
          'abundans',
          'abutor',
          'accedo',
          'accendo',
          'acceptus',
          'accipio',
          'accommodo',
          'accusator',
          'acer',
          'acerbitas',
          'acervus',
          'acidus',
          'acies',
          'acquiro',
          'acsi',
          'adamo',
          'adaugeo',
          'addo',
          'adduco',
          'ademptio',
          'adeo',
          'adeptio',
          'adfectus',
          'adfero',
          'adficio',
          'adflicto',
          'adhaero',
          'adhuc',
          'adicio',
          'adimpleo',
          'adinventitias',
          'adipiscor',
          'adiuvo',
          'administratio',
          'admiratio',
          'admitto',
          'admoneo',
          'admoveo',
          'adnuo',
          'adopto',
          'adsidue',
          'adstringo',
          'adsuesco',
          'adsum',
          'adulatio',
          'adulescens',
          'adultus',
          'aduro',
          'advenio',
          'adversus',
          'advoco',
          'aedificium',
          'aeger',
          'aegre',
          'aegrotatio',
          'aegrus',
          'aeneus',
          'aequitas',
          'aequus',
          'aer',
          'aestas',
          'aestivus',
          'aestus',
          'aetas',
          'aeternus',
          'ager',
          'aggero',
          'aggredior',
          'agnitio',
          'agnosco',
          'ago',
          'ait',
          'aiunt',
          'alienus',
          'alii',
          'alioqui',
          'aliqua',
          'alius',
          'allatus',
          'alo',
          'alter',
          'altus',
          'alveus',
          'amaritudo',
          'ambitus',
          'ambulo',
          'amicitia',
          'amiculum',
          'amissio',
          'amita',
          'amitto',
          'amo',
          'amor',
          'amoveo',
          'amplexus',
          'amplitudo',
          'amplus',
          'ancilla',
          'angelus',
          'angulus',
          'angustus',
          'animadverto',
          'animi',
          'animus',
          'annus',
          'anser',
          'ante',
          'antea',
          'antepono',
          'antiquus',
          'aperio',
          'aperte',
          'apostolus',
          'apparatus',
          'appello',
          'appono',
          'appositus',
          'approbo',
          'apto',
          'aptus',
          'apud',
          'aqua',
          'ara',
          'aranea',
          'arbitro',
          'arbor',
          'arbustum',
          'arca',
          'arceo',
          'arcesso',
          'arcus',
          'argentum',
          'argumentum',
          'arguo',
          'arma',
          'armarium',
          'armo',
          'aro',
          'ars',
          'articulus',
          'artificiose',
          'arto',
          'arx',
          'ascisco',
          'ascit',
          'asper',
          'aspicio',
          'asporto',
          'assentator',
          'astrum',
          'atavus',
          'ater',
          'atqui',
          'atrocitas',
          'atrox',
          'attero',
          'attollo',
          'attonbitus',
          'auctor',
          'auctus',
          'audacia',
          'audax',
          'audentia',
          'audeo',
          'audio',
          'auditor',
          'aufero',
          'aureus',
          'auris',
          'aurum',
          'aut',
          'autem',
          'autus',
          'auxilium',
          'avaritia',
          'avarus',
          'aveho',
          'averto',
          'avoco',
          'baiulus',
          'balbus',
          'barba',
          'bardus',
          'basium',
          'beatus',
          'bellicus',
          'bellum',
          'bene',
          'beneficium',
          'benevolentia',
          'benigne',
          'bestia',
          'bibo',
          'bis',
          'blandior',
          'bonus',
          'bos',
          'brevis',
          'cado',
          'caecus',
          'caelestis',
          'caelum',
          'calamitas',
          'calcar',
          'calco',
          'calculus',
          'callide',
          'campana',
          'candidus',
          'canis',
          'canonicus',
          'canto',
          'capillus',
          'capio',
          'capitulus',
          'capto',
          'caput',
          'carbo',
          'carcer',
          'careo',
          'caries',
          'cariosus',
          'caritas',
          'carmen',
          'carpo',
          'carus',
          'casso',
          'caste',
          'casus',
          'catena',
          'caterva',
          'cattus',
          'cauda',
          'causa',
          'caute',
          'caveo',
          'cavus',
          'cedo',
          'celebrer',
          'celer',
          'celo',
          'cena',
          'cenaculum',
          'ceno',
          'censura',
          'centum',
          'cerno',
          'cernuus',
          'certe',
          'certo',
          'certus',
          'cervus',
          'cetera',
          'charisma',
          'chirographum',
          'cibo',
          'cibus',
          'cicuta',
          'cilicium',
          'cimentarius',
          'ciminatio',
          'cinis',
          'circumvenio',
          'cito',
          'civis',
          'civitas',
          'clam',
          'clamo',
          'claro',
          'clarus',
          'claudeo',
          'claustrum',
          'clementia',
          'clibanus',
          'coadunatio',
          'coaegresco',
          'coepi',
          'coerceo',
          'cogito',
          'cognatus',
          'cognomen',
          'cogo',
          'cohaero',
          'cohibeo',
          'cohors',
          'colligo',
          'colloco',
          'collum',
          'colo',
          'color',
          'coma',
          'combibo',
          'comburo',
          'comedo',
          'comes',
          'cometes',
          'comis',
          'comitatus',
          'commemoro',
          'comminor',
          'commodo',
          'communis',
          'comparo',
          'compello',
          'complectus',
          'compono',
          'comprehendo',
          'comptus',
          'conatus',
          'concedo',
          'concido',
          'conculco',
          'condico',
          'conduco',
          'confero',
          'confido',
          'conforto',
          'confugo',
          'congregatio',
          'conicio',
          'coniecto',
          'conitor',
          'coniuratio',
          'conor',
          'conqueror',
          'conscendo',
          'conservo',
          'considero',
          'conspergo',
          'constans',
          'consuasor',
          'contabesco',
          'contego',
          'contigo',
          'contra',
          'conturbo',
          'conventus',
          'convoco',
          'copia',
          'copiose',
          'cornu',
          'corona',
          'corpus',
          'correptius',
          'corrigo',
          'corroboro',
          'corrumpo',
          'coruscus',
          'cotidie',
          'crapula',
          'cras',
          'crastinus',
          'creator',
          'creber',
          'crebro',
          'credo',
          'creo',
          'creptio',
          'crepusculum',
          'cresco',
          'creta',
          'cribro',
          'crinis',
          'cruciamentum',
          'crudelis',
          'cruentus',
          'crur',
          'crustulum',
          'crux',
          'cubicularis',
          'cubitum',
          'cubo',
          'cui',
          'cuius',
          'culpa',
          'culpo',
          'cultellus',
          'cultura',
          'cum',
          'cunabula',
          'cunae',
          'cunctatio',
          'cupiditas',
          'cupio',
          'cuppedia',
          'cupressus',
          'cur',
          'cura',
          'curatio',
          'curia',
          'curiositas',
          'curis',
          'curo',
          'curriculum',
          'currus',
          'cursim',
          'curso',
          'cursus',
          'curto',
          'curtus',
          'curvo',
          'curvus',
          'custodia',
          'damnatio',
          'damno',
          'dapifer',
          'debeo',
          'debilito',
          'decens',
          'decerno',
          'decet',
          'decimus',
          'decipio',
          'decor',
          'decretum',
          'decumbo',
          'dedecor',
          'dedico',
          'deduco',
          'defaeco',
          'defendo',
          'defero',
          'defessus',
          'defetiscor',
          'deficio',
          'defigo',
          'defleo',
          'defluo',
          'defungo',
          'degenero',
          'degero',
          'degusto',
          'deinde',
          'delectatio',
          'delego',
          'deleo',
          'delibero',
          'delicate',
          'delinquo',
          'deludo',
          'demens',
          'demergo',
          'demitto',
          'demo',
          'demonstro',
          'demoror',
          'demulceo',
          'demum',
          'denego',
          'denique',
          'dens',
          'denuncio',
          'denuo',
          'deorsum',
          'depereo',
          'depono',
          'depopulo',
          'deporto',
          'depraedor',
          'deprecator',
          'deprimo',
          'depromo',
          'depulso',
          'deputo',
          'derelinquo',
          'derideo',
          'deripio',
          'desidero',
          'desino',
          'desipio',
          'desolo',
          'desparatus',
          'despecto',
          'despirmatio',
          'infit',
          'inflammatio',
          'paens',
          'patior',
          'patria',
          'patrocinor',
          'patruus',
          'pauci',
          'paulatim',
          'pauper',
          'pax',
          'peccatus',
          'pecco',
          'pecto',
          'pectus',
          'pecunia',
          'pecus',
          'peior',
          'pel',
          'ocer',
          'socius',
          'sodalitas',
          'sol',
          'soleo',
          'solio',
          'solitudo',
          'solium',
          'sollers',
          'sollicito',
          'solum',
          'solus',
          'solutio',
          'solvo',
          'somniculosus',
          'somnus',
          'sonitus',
          'sono',
          'sophismata',
          'sopor',
          'sordeo',
          'sortitus',
          'spargo',
          'speciosus',
          'spectaculum',
          'speculum',
          'sperno',
          'spero',
          'spes',
          'spiculum',
          'spiritus',
          'spoliatio',
          'sponte',
          'stabilis',
          'statim',
          'statua',
          'stella',
          'stillicidium',
          'stipes',
          'stips',
          'sto',
          'strenuus',
          'strues',
          'studio',
          'stultus',
          'suadeo',
          'suasoria',
          'sub',
          'subito',
          'subiungo',
          'sublime',
          'subnecto',
          'subseco',
          'substantia',
          'subvenio',
          'succedo',
          'succurro',
          'sufficio',
          'suffoco',
          'suffragium',
          'suggero',
          'sui',
          'sulum',
          'sum',
          'summa',
          'summisse',
          'summopere',
          'sumo',
          'sumptus',
          'supellex',
          'super',
          'suppellex',
          'supplanto',
          'suppono',
          'supra',
          'surculus',
          'surgo',
          'sursum',
          'suscipio',
          'suspendo',
          'sustineo',
          'suus',
          'synagoga',
          'tabella',
          'tabernus',
          'tabesco',
          'tabgo',
          'tabula',
          'taceo',
          'tactus',
          'taedium',
          'talio',
          'talis',
          'talus',
          'tam',
          'tamdiu',
          'tamen',
          'tametsi',
          'tamisium',
          'tamquam',
          'tandem',
          'tantillus',
          'tantum',
          'tardus',
          'tego',
          'temeritas',
          'temperantia',
          'templum',
          'temptatio',
          'tempus',
          'tenax',
          'tendo',
          'teneo',
          'tener',
          'tenuis',
          'tenus',
          'tepesco',
          'tepidus',
          'ter',
          'terebro',
          'teres',
          'terga',
          'tergeo',
          'tergiversatio',
          'tergo',
          'tergum',
          'termes',
          'terminatio',
          'tero',
          'terra',
          'terreo',
          'territo',
          'terror',
          'tersus',
          'tertius',
          'testimonium',
          'texo',
          'textilis',
          'textor',
          'textus',
          'thalassinus',
          'theatrum',
          'theca',
          'thema',
          'theologus',
          'thermae',
          'thesaurus',
          'thesis',
          'thorax',
          'thymbra',
          'thymum',
          'tibi',
          'timidus',
          'timor',
          'titulus',
          'tolero',
          'tollo',
          'tondeo',
          'tonsor',
          'torqueo',
          'torrens',
          'tot',
          'totidem',
          'toties',
          'totus',
          'tracto',
          'trado',
          'traho',
          'trans',
          'tredecim',
          'tremo',
          'trepide',
          'tres',
          'tribuo',
          'tricesimus',
          'triduana',
          'triginta',
          'tripudio',
          'tristis',
          'triumphus',
          'trucido',
          'truculenter',
          'tubineus',
          'tui',
          'tum',
          'tumultus',
          'tunc',
          'turba',
          'turbo',
          'turpe',
          'turpis',
          'tutamen',
          'tutis',
          'tyrannus',
          'uberrime',
          'ubi',
          'ulciscor',
          'ullus',
          'ulterius',
          'ultio',
          'ultra',
          'umbra',
          'umerus',
          'umquam',
          'una',
          'unde',
          'undique',
          'universe',
          'unus',
          'urbanus',
          'urbs',
          'uredo',
          'usitas',
          'usque',
          'ustilo',
          'ustulo',
          'usus',
          'uter',
          'uterque',
          'utilis',
          'utique',
          'utor',
          'utpote',
          'utrimque',
          'utroque',
          'utrum',
          'uxor',
          'vaco',
          'vacuus',
          'vado',
          'vae',
          'valde',
          'valens',
          'valeo',
          'valetudo',
          'validus',
          'vallum',
          'vapulus',
          'varietas',
          'varius',
          'vehemens',
          'vel',
          'velociter',
          'velum',
          'velut',
          'venia',
          'venio',
          'ventito',
          'ventosus',
          'ventus',
          'venustas',
          'ver',
          'verbera',
          'verbum',
          'vere',
          'verecundia',
          'vereor',
          'vergo',
          'veritas',
          'vero',
          'versus',
          'verto',
          'verumtamen',
          'verus',
          'vesco',
          'vesica',
          'vesper',
          'vespillo',
          'vester',
          'vestigium',
          'vestrum',
          'vetus',
          'via',
          'vicinus',
          'vicissitudo',
          'victoria',
          'victus',
          'videlicet',
          'video',
          'viduata',
          'viduo',
          'vigilo',
          'vigor',
          'vilicus',
          'vilis',
          'vilitas',
          'villa',
          'vinco',
          'vinculum',
          'vindico',
          'vinitor',
          'vinum',
          'vir',
          'virga',
          'virgo',
          'viridis',
          'viriliter',
          'virtus',
          'vis',
          'viscus',
          'vita',
          'vitiosus',
          'vitium',
          'vito',
          'vivo',
          'vix',
          'vobis',
          'vociferor',
          'voco',
          'volaticus',
          'volo',
          'volubilis',
          'voluntarius',
          'volup',
          'volutabrum',
          'volva',
          'vomer',
          'vomica',
          'vomito',
          'vorago',
          'vorax',
          'voro',
          'vos',
          'votum',
          'voveo',
          'vox',
          'vulariter',
          'vulgaris',
          'vulgivagus',
          'vulgo',
          'vulgus',
          'vulnero',
          'vulnus',
          'vulpes',
          'vulticulus',
          'vultuosus',
          'xiphias',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/es_MX/lorem/index.js': [
      function(require, module, exports) {
        var lorem = {}
        module['exports'] = lorem
        lorem.words = require('./words')
        lorem.supplemental = require('./supplemental')
      },
      {
        './words':
          '../node_modules/faker/lib/locales/es_MX/lorem/words.js',
        './supplemental':
          '../node_modules/faker/lib/locales/es_MX/lorem/supplemental.js',
      },
    ],
    '../node_modules/faker/lib/locales/es_MX/commerce/color.js': [
      function(require, module, exports) {
        module['exports'] = [
          'rojo',
          'verde',
          'azul',
          'amarillo',
          'morado',
          'Menta verde',
          'teal',
          'blanco',
          'negro',
          'Naranja',
          'Rosa',
          'gris',
          'marrón',
          'violeta',
          'turquesa',
          'tan',
          'cielo azul',
          'salmón',
          'ciruela',
          'orquídea',
          'aceituna',
          'magenta',
          'Lima',
          'marfil',
          'índigo',
          'oro',
          'fucsia',
          'cian',
          'azul',
          'lavanda',
          'plata',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/es_MX/commerce/department.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Libros',
          'Películas',
          'Música',
          'Juegos',
          'Electrónica',
          'Ordenadores',
          'Hogar',
          'Jardín',
          'Herramientas',
          'Ultramarinos',
          'Salud',
          'Belleza',
          'Juguetes',
          'Kids',
          'Baby',
          'Ropa',
          'Zapatos',
          'Joyería',
          'Deportes',
          'Aire libre',
          'Automoción',
          'Industrial',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/es_MX/commerce/product_name.js': [
      function(require, module, exports) {
        module['exports'] = {
          adjective: [
            'Pequeño',
            'Ergonómico',
            'Rústico',
            'Inteligente',
            'Gorgeous',
            'Increíble',
            'Fantástico',
            'Práctica',
            'Elegante',
            'Increíble',
            'Genérica',
            'Artesanal',
            'Hecho a mano',
            'Licencia',
            'Refinado',
            'Sin marca',
            'Sabrosa',
          ],
          material: [
            'Acero',
            'Madera',
            'Hormigón',
            'Plástico',
            'Cotton',
            'Granito',
            'Caucho',
            'Metal',
            'Soft',
            'Fresco',
            'Frozen',
          ],
          product: [
            'Presidente',
            'Auto',
            'Computadora',
            'Teclado',
            'Ratón',
            'Bike',
            'Pelota',
            'Guantes',
            'Pantalones',
            'Camisa',
            'Mesa',
            'Zapatos',
            'Sombrero',
            'Toallas',
            'Jabón',
            'Tuna',
            'Pollo',
            'Pescado',
            'Queso',
            'Tocino',
            'Pizza',
            'Ensalada',
            'Embutidos',
          ],
        }
      },
      {},
    ],
    '../node_modules/faker/lib/locales/es_MX/commerce/index.js': [
      function(require, module, exports) {
        var commerce = {}
        module['exports'] = commerce
        commerce.color = require('./color')
        commerce.department = require('./department')
        commerce.product_name = require('./product_name')
      },
      {
        './color':
          '../node_modules/faker/lib/locales/es_MX/commerce/color.js',
        './department':
          '../node_modules/faker/lib/locales/es_MX/commerce/department.js',
        './product_name':
          '../node_modules/faker/lib/locales/es_MX/commerce/product_name.js',
      },
    ],
    '../node_modules/faker/lib/locales/es_MX/team/creature.js': [
      function(require, module, exports) {
        module['exports'] = [
          'hormigas',
          'murciélagos',
          'osos',
          'abejas',
          'pájaros',
          'búfalo',
          'gatos',
          'pollos',
          'ganado',
          'perros',
          'delfines',
          'patos',
          'elefantes',
          'peces',
          'zorros',
          'ranas',
          'gansos',
          'cabras',
          'caballos',
          'canguros',
          'leones',
          'monos',
          'búhos',
          'bueyes',
          'pingüinos',
          'pueblo',
          'cerdos',
          'conejos',
          'ovejas',
          'tigres',
          'ballenas',
          'lobos',
          'cebras',
          'almas en pena',
          'cuervos',
          'gatos negros',
          'quimeras',
          'fantasmas',
          'conspiradores',
          'dragones',
          'enanos',
          'duendes',
          'encantadores',
          'exorcistas',
          'hijos',
          'enemigos',
          'gigantes',
          'gnomos',
          'duendes',
          'gansos',
          'grifos',
          'licántropos',
          'némesis',
          'ogros',
          'oráculos',
          'profetas',
          'hechiceros',
          'arañas',
          'espíritus',
          'vampiros',
          'brujos',
          'zorras',
          'hombres lobo',
          'brujas',
          'adoradores',
          'zombies',
          'druidas',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/es_MX/team/name.js': [
      function(require, module, exports) {
        module['exports'] = ['#{Address.state} #{creature}']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/es_MX/team/index.js': [
      function(require, module, exports) {
        var team = {}
        module['exports'] = team
        team.creature = require('./creature')
        team.name = require('./name')
      },
      {
        './creature':
          '../node_modules/faker/lib/locales/es_MX/team/creature.js',
        './name': '../node_modules/faker/lib/locales/es_MX/team/name.js',
      },
    ],
    '../node_modules/faker/lib/locales/es_MX/index.js': [
      function(require, module, exports) {
        var es_MX = {}
        module['exports'] = es_MX
        es_MX.title = 'Spanish Mexico'
        es_MX.separator = ' & '
        es_MX.name = require('./name')
        es_MX.address = require('./address')
        es_MX.company = require('./company')
        es_MX.internet = require('./internet')
        es_MX.phone_number = require('./phone_number')
        es_MX.cell_phone = require('./cell_phone')
        es_MX.lorem = require('./lorem')
        es_MX.commerce = require('./commerce')
        es_MX.team = require('./team')
      },
      {
        './name': '../node_modules/faker/lib/locales/es_MX/name/index.js',
        './address':
          '../node_modules/faker/lib/locales/es_MX/address/index.js',
        './company':
          '../node_modules/faker/lib/locales/es_MX/company/index.js',
        './internet':
          '../node_modules/faker/lib/locales/es_MX/internet/index.js',
        './phone_number':
          '../node_modules/faker/lib/locales/es_MX/phone_number/index.js',
        './cell_phone':
          '../node_modules/faker/lib/locales/es_MX/cell_phone/index.js',
        './lorem':
          '../node_modules/faker/lib/locales/es_MX/lorem/index.js',
        './commerce':
          '../node_modules/faker/lib/locales/es_MX/commerce/index.js',
        './team': '../node_modules/faker/lib/locales/es_MX/team/index.js',
      },
    ],
    '../node_modules/faker/lib/locales/fa/name/first_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          'آبان دخت',
          'آبتین',
          'آتوسا',
          'آفر',
          'آفره دخت',
          'آذرنوش‌',
          'آذین',
          'آراه',
          'آرزو',
          'آرش',
          'آرتین',
          'آرتام',
          'آرتمن',
          'آرشام',
          'آرمان',
          'آرمین',
          'آرمیتا',
          'آریا فر',
          'آریا',
          'آریا مهر',
          'آرین',
          'آزاده',
          'آزرم',
          'آزرمدخت',
          'آزیتا',
          'آناهیتا',
          'آونگ',
          'آهو',
          'آیدا',
          'اتسز',
          'اختر',
          'ارد',
          'ارد شیر',
          'اردوان',
          'ارژن',
          'ارژنگ',
          'ارسلان',
          'ارغوان',
          'ارمغان',
          'ارنواز',
          'اروانه',
          'استر',
          'اسفندیار',
          'اشکان',
          'اشکبوس',
          'افسانه',
          'افسون',
          'افشین',
          'امید',
          'انوش (‌ آنوشا )',
          'انوشروان',
          'اورنگ',
          'اوژن',
          'اوستا',
          'اهورا',
          'ایاز',
          'ایران',
          'ایراندخت',
          'ایرج',
          'ایزدیار',
          'بابک',
          'باپوک',
          'باربد',
          'بارمان',
          'بامداد',
          'بامشاد',
          'بانو',
          'بختیار',
          'برانوش',
          'بردیا',
          'برزو',
          'برزویه',
          'برزین',
          'برمک',
          'بزرگمهر',
          'بنفشه',
          'بوژان',
          'بویان',
          'بهار',
          'بهارک',
          'بهاره',
          'بهتاش',
          'بهداد',
          'بهرام',
          'بهدیس',
          'بهرخ',
          'بهرنگ',
          'بهروز',
          'بهزاد',
          'بهشاد',
          'بهمن',
          'بهناز',
          'بهنام',
          'بهنود',
          'بهنوش',
          'بیتا',
          'بیژن',
          'پارسا',
          'پاکان',
          'پاکتن',
          'پاکدخت',
          'پانته آ',
          'پدرام',
          'پرتو',
          'پرشنگ',
          'پرتو',
          'پرستو',
          'پرویز',
          'پردیس',
          'پرهام',
          'پژمان',
          'پژوا',
          'پرنیا',
          'پشنگ',
          'پروانه',
          'پروین',
          'پری',
          'پریچهر',
          'پریدخت',
          'پریسا',
          'پرناز',
          'پریوش',
          'پریا',
          'پوپک',
          'پوران',
          'پوراندخت',
          'پوریا',
          'پولاد',
          'پویا',
          'پونه',
          'پیام',
          'پیروز',
          'پیمان',
          'تابان',
          'تاباندخت',
          'تاجی',
          'تارا',
          'تاویار',
          'ترانه',
          'تناز',
          'توران',
          'توراندخت',
          'تورج',
          'تورتک',
          'توفان',
          'توژال',
          'تیر داد',
          'تینا',
          'تینو',
          'جابان',
          'جامین',
          'جاوید',
          'جریره',
          'جمشید',
          'جوان',
          'جویا',
          'جهان',
          'جهانبخت',
          'جهانبخش',
          'جهاندار',
          'جهانگیر',
          'جهان بانو',
          'جهاندخت',
          'جهان ناز',
          'جیران',
          'چابک',
          'چالاک',
          'چاوش',
          'چترا',
          'چوبین',
          'چهرزاد',
          'خاوردخت',
          'خداداد',
          'خدایار',
          'خرم',
          'خرمدخت',
          'خسرو',
          'خشایار',
          'خورشید',
          'دادمهر',
          'دارا',
          'داراب',
          'داریا',
          'داریوش',
          'دانوش',
          'داور‌',
          'دایان',
          'دریا',
          'دل آرا',
          'دل آویز',
          'دلارام',
          'دل انگیز',
          'دلبر',
          'دلبند',
          'دلربا',
          'دلشاد',
          'دلکش',
          'دلناز',
          'دلنواز',
          'دورشاسب',
          'دنیا',
          'دیااکو',
          'دیانوش',
          'دیبا',
          'دیبا دخت',
          'رابو',
          'رابین',
          'رادبانو',
          'رادمان',
          'رازبان',
          'راژانه',
          'راسا',
          'رامتین',
          'رامش',
          'رامشگر',
          'رامونا',
          'رامیار',
          'رامیلا',
          'رامین',
          'راویار',
          'رژینا',
          'رخپاک',
          'رخسار',
          'رخشانه',
          'رخشنده',
          'رزمیار',
          'رستم',
          'رکسانا',
          'روبینا',
          'رودابه',
          'روزبه',
          'روشنک',
          'روناک',
          'رهام',
          'رهی',
          'ریبار',
          'راسپینا',
          'زادبخت',
          'زاد به',
          'زاد چهر',
          'زاد فر',
          'زال',
          'زادماسب',
          'زاوا',
          'زردشت',
          'زرنگار',
          'زری',
          'زرین',
          'زرینه',
          'زمانه',
          'زونا',
          'زیبا',
          'زیبار',
          'زیما',
          'زینو',
          'ژاله',
          'ژالان',
          'ژیار',
          'ژینا',
          'ژیوار',
          'سارا',
          'سارک',
          'سارنگ',
          'ساره',
          'ساسان',
          'ساغر',
          'سام',
          'سامان',
          'سانا',
          'ساناز',
          'سانیار',
          'ساویز',
          'ساهی',
          'ساینا',
          'سایه',
          'سپنتا',
          'سپند',
          'سپهر',
          'سپهرداد',
          'سپیدار',
          'سپید بانو',
          'سپیده',
          'ستاره',
          'ستی',
          'سرافراز',
          'سرور',
          'سروش',
          'سرور',
          'سوبا',
          'سوبار',
          'سنبله',
          'سودابه',
          'سوری',
          'سورن',
          'سورنا',
          'سوزان',
          'سوزه',
          'سوسن',
          'سومار',
          'سولان',
          'سولماز',
          'سوگند',
          'سهراب',
          'سهره',
          'سهند',
          'سیامک',
          'سیاوش',
          'سیبوبه ‌',
          'سیما',
          'سیمدخت',
          'سینا',
          'سیمین',
          'سیمین دخت',
          'شاپرک',
          'شادی',
          'شادمهر',
          'شاران',
          'شاهپور',
          'شاهدخت',
          'شاهرخ',
          'شاهین',
          'شاهیندخت',
          'شایسته',
          'شباهنگ',
          'شب بو',
          'شبدیز',
          'شبنم',
          'شراره',
          'شرمین',
          'شروین',
          'شکوفه',
          'شکفته',
          'شمشاد',
          'شمین',
          'شوان',
          'شمیلا',
          'شورانگیز',
          'شوری',
          'شهاب',
          'شهبار',
          'شهباز',
          'شهبال',
          'شهپر',
          'شهداد',
          'شهرآرا',
          'شهرام',
          'شهربانو',
          'شهرزاد',
          'شهرناز',
          'شهرنوش',
          'شهره',
          'شهریار',
          'شهرزاد',
          'شهلا',
          'شهنواز',
          'شهین',
          'شیبا',
          'شیدا',
          'شیده',
          'شیردل',
          'شیرزاد',
          'شیرنگ',
          'شیرو',
          'شیرین دخت',
          'شیما',
          'شینا',
          'شیرین',
          'شیوا',
          'طوس',
          'طوطی',
          'طهماسب',
          'طهمورث',
          'غوغا',
          'غنچه',
          'فتانه',
          'فدا',
          'فراز',
          'فرامرز',
          'فرانک',
          'فراهان',
          'فربد',
          'فربغ',
          'فرجاد',
          'فرخ',
          'فرخ پی',
          'فرخ داد',
          'فرخ رو',
          'فرخ زاد',
          'فرخ لقا',
          'فرخ مهر',
          'فرداد',
          'فردیس',
          'فرین',
          'فرزاد',
          'فرزام',
          'فرزان',
          'فرزانه',
          'فرزین',
          'فرشاد',
          'فرشته',
          'فرشید',
          'فرمان',
          'فرناز',
          'فرنگیس',
          'فرنود',
          'فرنوش',
          'فرنیا',
          'فروتن',
          'فرود',
          'فروز',
          'فروزان',
          'فروزش',
          'فروزنده',
          'فروغ',
          'فرهاد',
          'فرهنگ',
          'فرهود',
          'فربار',
          'فریبا',
          'فرید',
          'فریدخت',
          'فریدون',
          'فریمان',
          'فریناز',
          'فرینوش',
          'فریوش',
          'فیروز',
          'فیروزه',
          'قابوس',
          'قباد',
          'قدسی',
          'کابان',
          'کابوک',
          'کارا',
          'کارو',
          'کاراکو',
          'کامبخت',
          'کامبخش',
          'کامبیز',
          'کامجو',
          'کامدین',
          'کامران',
          'کامراوا',
          'کامک',
          'کامنوش',
          'کامیار',
          'کانیار',
          'کاووس',
          'کاوه',
          'کتایون',
          'کرشمه',
          'کسری',
          'کلاله',
          'کمبوجیه',
          'کوشا',
          'کهبد',
          'کهرام',
          'کهزاد',
          'کیارش',
          'کیان',
          'کیانا',
          'کیانچهر',
          'کیاندخت',
          'کیانوش',
          'کیاوش',
          'کیخسرو',
          'کیقباد',
          'کیکاووس',
          'کیوان',
          'کیوان دخت',
          'کیومرث',
          'کیهان',
          'کیاندخت',
          'کیهانه',
          'گرد آفرید',
          'گردان',
          'گرشا',
          'گرشاسب',
          'گرشین',
          'گرگین',
          'گزل',
          'گشتاسب',
          'گشسب',
          'گشسب بانو',
          'گل',
          'گل آذین',
          'گل آرا‌',
          'گلاره',
          'گل افروز',
          'گلاله',
          'گل اندام',
          'گلاویز',
          'گلباد',
          'گلبار',
          'گلبام',
          'گلبان',
          'گلبانو',
          'گلبرگ',
          'گلبو',
          'گلبهار',
          'گلبیز',
          'گلپاره',
          'گلپر',
          'گلپری',
          'گلپوش',
          'گل پونه',
          'گلچین',
          'گلدخت',
          'گلدیس',
          'گلربا',
          'گلرخ',
          'گلرنگ',
          'گلرو',
          'گلشن',
          'گلریز',
          'گلزاد',
          'گلزار',
          'گلسا',
          'گلشید',
          'گلنار',
          'گلناز',
          'گلنسا',
          'گلنواز',
          'گلنوش',
          'گلی',
          'گودرز',
          'گوماتو',
          'گهر چهر',
          'گوهر ناز',
          'گیتی',
          'گیسو',
          'گیلدا',
          'گیو',
          'لادن',
          'لاله',
          'لاله رخ',
          'لاله دخت',
          'لبخند',
          'لقاء',
          'لومانا',
          'لهراسب',
          'مارال',
          'ماری',
          'مازیار',
          'ماکان',
          'مامک',
          'مانا',
          'ماندانا',
          'مانوش',
          'مانی',
          'مانیا',
          'ماهان',
          'ماهاندخت',
          'ماه برزین',
          'ماه جهان',
          'ماهچهر',
          'ماهدخت',
          'ماهور',
          'ماهرخ',
          'ماهزاد',
          'مردآویز',
          'مرداس',
          'مرزبان',
          'مرمر',
          'مزدک',
          'مژده',
          'مژگان',
          'مستان',
          'مستانه',
          'مشکاندخت',
          'مشکناز',
          'مشکین دخت',
          'منیژه',
          'منوچهر',
          'مهبانو',
          'مهبد',
          'مه داد',
          'مهتاب',
          'مهدیس',
          'مه جبین',
          'مه دخت',
          'مهر آذر',
          'مهر آرا',
          'مهر آسا',
          'مهر آفاق',
          'مهر افرین',
          'مهرآب',
          'مهرداد',
          'مهر افزون',
          'مهرام',
          'مهران',
          'مهراندخت',
          'مهراندیش',
          'مهرانفر',
          'مهرانگیز',
          'مهرداد',
          'مهر دخت',
          'مهرزاده ‌',
          'مهرناز',
          'مهرنوش',
          'مهرنکار',
          'مهرنیا',
          'مهروز',
          'مهری',
          'مهریار',
          'مهسا',
          'مهستی',
          'مه سیما',
          'مهشاد',
          'مهشید',
          'مهنام',
          'مهناز',
          'مهنوش',
          'مهوش',
          'مهیار',
          'مهین',
          'مهین دخت',
          'میترا',
          'میخک',
          'مینا',
          'مینا دخت',
          'مینو',
          'مینودخت',
          'مینو فر',
          'نادر',
          'ناز آفرین',
          'نازبانو',
          'نازپرور',
          'نازچهر',
          'نازفر',
          'نازلی',
          'نازی',
          'نازیدخت',
          'نامور',
          'ناهید',
          'ندا',
          'نرسی',
          'نرگس',
          'نرمک',
          'نرمین',
          'نریمان',
          'نسترن',
          'نسرین',
          'نسرین دخت',
          'نسرین نوش',
          'نکیسا',
          'نگار',
          'نگاره',
          'نگارین',
          'نگین',
          'نوا',
          'نوش',
          'نوش آذر',
          'نوش آور',
          'نوشا',
          'نوش آفرین',
          'نوشدخت',
          'نوشروان',
          'نوشفر',
          'نوشناز',
          'نوشین',
          'نوید',
          'نوین',
          'نوین دخت',
          'نیش ا',
          'نیک بین',
          'نیک پی',
          'نیک چهر',
          'نیک خواه',
          'نیکداد',
          'نیکدخت',
          'نیکدل',
          'نیکزاد',
          'نیلوفر',
          'نیما',
          'وامق',
          'ورجاوند',
          'وریا',
          'وشمگیر',
          'وهرز',
          'وهسودان',
          'ویدا',
          'ویس',
          'ویشتاسب',
          'ویگن',
          'هژیر',
          'هخامنش',
          'هربد( هیربد )',
          'هرمز',
          'همایون',
          'هما',
          'همادخت',
          'همدم',
          'همراز',
          'همراه',
          'هنگامه',
          'هوتن',
          'هور',
          'هورتاش',
          'هورچهر',
          'هورداد',
          'هوردخت',
          'هورزاد',
          'هورمند',
          'هوروش',
          'هوشنگ',
          'هوشیار',
          'هومان',
          'هومن',
          'هونام',
          'هویدا',
          'هیتاسب',
          'هیرمند',
          'هیما',
          'هیوا',
          'یادگار',
          'یاسمن ( یاسمین )',
          'یاشار',
          'یاور',
          'یزدان',
          'یگانه',
          'یوشیتا',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/fa/name/last_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          'عارف',
          'عاشوری',
          'عالی',
          'عبادی',
          'عبدالکریمی',
          'عبدالملکی',
          'عراقی',
          'عزیزی',
          'عصار',
          'عقیلی',
          'علم',
          'علم‌الهدی',
          'علی عسگری',
          'علی‌آبادی',
          'علیا',
          'علی‌پور',
          'علی‌زمانی',
          'عنایت',
          'غضنفری',
          'غنی',
          'فارسی',
          'فاطمی',
          'فانی',
          'فتاحی',
          'فرامرزی',
          'فرج',
          'فرشیدورد',
          'فرمانفرمائیان',
          'فروتن',
          'فرهنگ',
          'فریاد',
          'فنایی',
          'فنی‌زاده',
          'فولادوند',
          'فهمیده',
          'قاضی',
          'قانعی',
          'قانونی',
          'قمیشی',
          'قنبری',
          'قهرمان',
          'قهرمانی',
          'قهرمانیان',
          'قهستانی',
          'کاشی',
          'کاکاوند',
          'کامکار',
          'کاملی',
          'کاویانی',
          'کدیور',
          'کردبچه',
          'کرمانی',
          'کریمی',
          'کلباسی',
          'کمالی',
          'کوشکی',
          'کهنمویی',
          'کیان',
          'کیانی (نام خانوادگی)',
          'کیمیایی',
          'گل محمدی',
          'گلپایگانی',
          'گنجی',
          'لاجوردی',
          'لاچینی',
          'لاهوتی',
          'لنکرانی',
          'لوکس',
          'مجاهد',
          'مجتبایی',
          'مجتبوی',
          'مجتهد شبستری',
          'مجتهدی',
          'مجرد',
          'محجوب',
          'محجوبی',
          'محدثی',
          'محمدرضایی',
          'محمدی',
          'مددی',
          'مرادخانی',
          'مرتضوی',
          'مستوفی',
          'مشا',
          'مصاحب',
          'مصباح',
          'مصباح‌زاده',
          'مطهری',
          'مظفر',
          'معارف',
          'معروف',
          'معین',
          'مفتاح',
          'مفتح',
          'مقدم',
          'ملایری',
          'ملک',
          'ملکیان',
          'منوچهری',
          'موحد',
          'موسوی',
          'موسویان',
          'مهاجرانی',
          'مهدی‌پور',
          'میرباقری',
          'میردامادی',
          'میرزاده',
          'میرسپاسی',
          'میزبانی',
          'ناظری',
          'نامور',
          'نجفی',
          'ندوشن',
          'نراقی',
          'نعمت‌زاده',
          'نقدی',
          'نقیب‌زاده',
          'نواب',
          'نوبخت',
          'نوبختی',
          'نهاوندی',
          'نیشابوری',
          'نیلوفری',
          'واثقی',
          'واعظ',
          'واعظ‌زاده',
          'واعظی',
          'وکیلی',
          'هاشمی',
          'هاشمی رفسنجانی',
          'هاشمیان',
          'هامون',
          'هدایت',
          'هراتی',
          'هروی',
          'همایون',
          'همت',
          'همدانی',
          'هوشیار',
          'هومن',
          'یاحقی',
          'یادگار',
          'یثربی',
          'یلدا',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/fa/name/prefix.js': [
      function(require, module, exports) {
        module['exports'] = ['آقای', 'خانم', 'دکتر']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/fa/name/index.js': [
      function(require, module, exports) {
        var name = {}
        module['exports'] = name
        name.first_name = require('./first_name')
        name.last_name = require('./last_name')
        name.prefix = require('./prefix')
      },
      {
        './first_name':
          '../node_modules/faker/lib/locales/fa/name/first_name.js',
        './last_name':
          '../node_modules/faker/lib/locales/fa/name/last_name.js',
        './prefix': '../node_modules/faker/lib/locales/fa/name/prefix.js',
      },
    ],
    '../node_modules/faker/lib/locales/fa/index.js': [
      function(require, module, exports) {
        var fa = {}
        module['exports'] = fa
        fa.title = 'Farsi'
        fa.name = require('./name')
      },
      { './name': '../node_modules/faker/lib/locales/fa/name/index.js' },
    ],
    '../node_modules/faker/lib/locales/fr/address/building_number.js': [
      function(require, module, exports) {
        module['exports'] = ['####', '###', '##', '#']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/fr/address/street_prefix.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Allée, Voie',
          'Rue',
          'Avenue',
          'Boulevard',
          'Quai',
          'Passage',
          'Impasse',
          'Place',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/fr/address/secondary_address.js': [
      function(require, module, exports) {
        module['exports'] = ['Apt. ###', '# étage']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/fr/address/postcode.js': [
      function(require, module, exports) {
        module['exports'] = ['#####']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/fr/address/state.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Alsace',
          'Aquitaine',
          'Auvergne',
          'Basse-Normandie',
          'Bourgogne',
          'Bretagne',
          'Centre',
          'Champagne-Ardenne',
          'Corse',
          'Franche-Comté',
          'Haute-Normandie',
          'Île-de-France',
          'Languedoc-Roussillon',
          'Limousin',
          'Lorraine',
          'Midi-Pyrénées',
          'Nord-Pas-de-Calais',
          'Pays de la Loire',
          'Picardie',
          'Poitou-Charentes',
          "Provence-Alpes-Côte d'Azur",
          'Rhône-Alpes',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/fr/address/city_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Paris',
          'Marseille',
          'Lyon',
          'Toulouse',
          'Nice',
          'Nantes',
          'Strasbourg',
          'Montpellier',
          'Bordeaux',
          'Lille13',
          'Rennes',
          'Reims',
          'Le Havre',
          'Saint-Étienne',
          'Toulon',
          'Grenoble',
          'Dijon',
          'Angers',
          'Saint-Denis',
          'Villeurbanne',
          'Le Mans',
          'Aix-en-Provence',
          'Brest',
          'Nîmes',
          'Limoges',
          'Clermont-Ferrand',
          'Tours',
          'Amiens',
          'Metz',
          'Perpignan',
          'Besançon',
          'Orléans',
          'Boulogne-Billancourt',
          'Mulhouse',
          'Rouen',
          'Caen',
          'Nancy',
          'Saint-Denis',
          'Saint-Paul',
          'Montreuil',
          'Argenteuil',
          'Roubaix',
          'Dunkerque14',
          'Tourcoing',
          'Nanterre',
          'Avignon',
          'Créteil',
          'Poitiers',
          'Fort-de-France',
          'Courbevoie',
          'Versailles',
          'Vitry-sur-Seine',
          'Colombes',
          'Pau',
          'Aulnay-sous-Bois',
          'Asnières-sur-Seine',
          'Rueil-Malmaison',
          'Saint-Pierre',
          'Antibes',
          'Saint-Maur-des-Fossés',
          'Champigny-sur-Marne',
          'La Rochelle',
          'Aubervilliers',
          'Calais',
          'Cannes',
          'Le Tampon',
          'Béziers',
          'Colmar',
          'Bourges',
          'Drancy',
          'Mérignac',
          'Saint-Nazaire',
          'Valence',
          'Ajaccio',
          'Issy-les-Moulineaux',
          "Villeneuve-d'Ascq",
          'Levallois-Perret',
          'Noisy-le-Grand',
          'Quimper',
          'La Seyne-sur-Mer',
          'Antony',
          'Troyes',
          'Neuilly-sur-Seine',
          'Sarcelles',
          'Les Abymes',
          'Vénissieux',
          'Clichy',
          'Lorient',
          'Pessac',
          'Ivry-sur-Seine',
          'Cergy',
          'Cayenne',
          'Niort',
          'Chambéry',
          'Montauban',
          'Saint-Quentin',
          'Villejuif',
          'Hyères',
          'Beauvais',
          'Cholet',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/fr/address/city.js': [
      function(require, module, exports) {
        module['exports'] = ['#{city_name}']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/fr/address/street_suffix.js': [
      function(require, module, exports) {
        module['exports'] = [
          "de l'Abbaye",
          'Adolphe Mille',
          "d'Alésia",
          "d'Argenteuil",
          "d'Assas",
          'du Bac',
          'de Paris',
          'La Boétie',
          'Bonaparte',
          'de la Bûcherie',
          'de Caumartin',
          'Charlemagne',
          'du Chat-qui-Pêche',
          "de la Chaussée-d'Antin",
          'du Dahomey',
          'Dauphine',
          'Delesseux',
          'du Faubourg Saint-Honoré',
          'du Faubourg-Saint-Denis',
          'de la Ferronnerie',
          'des Francs-Bourgeois',
          'des Grands Augustins',
          'de la Harpe',
          'du Havre',
          'de la Huchette',
          'Joubert',
          'Laffitte',
          'Lepic',
          'des Lombards',
          'Marcadet',
          'Molière',
          'Monsieur-le-Prince',
          'de Montmorency',
          'Montorgueil',
          'Mouffetard',
          'de Nesle',
          'Oberkampf',
          "de l'Odéon",
          "d'Orsel",
          'de la Paix',
          'des Panoramas',
          'Pastourelle',
          'Pierre Charron',
          'de la Pompe',
          'de Presbourg',
          'de Provence',
          'de Richelieu',
          'de Rivoli',
          'des Rosiers',
          'Royale',
          "d'Abbeville",
          'Saint-Honoré',
          'Saint-Bernard',
          'Saint-Denis',
          'Saint-Dominique',
          'Saint-Jacques',
          'Saint-Séverin',
          'des Saussaies',
          'de Seine',
          'de Solférino',
          'Du Sommerard',
          'de Tilsitt',
          'Vaneau',
          'de Vaugirard',
          'de la Victoire',
          'Zadkine',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/fr/address/street_name.js': [
      function(require, module, exports) {
        module['exports'] = ['#{street_prefix} #{street_suffix}']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/fr/address/street_address.js': [
      function(require, module, exports) {
        module['exports'] = ['#{building_number} #{street_name}']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/fr/address/default_country.js': [
      function(require, module, exports) {
        module['exports'] = ['France']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/fr/address/index.js': [
      function(require, module, exports) {
        var address = {}
        module['exports'] = address
        address.building_number = require('./building_number')
        address.street_prefix = require('./street_prefix')
        address.secondary_address = require('./secondary_address')
        address.postcode = require('./postcode')
        address.state = require('./state')
        address.city_name = require('./city_name')
        address.city = require('./city')
        address.street_suffix = require('./street_suffix')
        address.street_name = require('./street_name')
        address.street_address = require('./street_address')
        address.default_country = require('./default_country')
      },
      {
        './building_number':
          '../node_modules/faker/lib/locales/fr/address/building_number.js',
        './street_prefix':
          '../node_modules/faker/lib/locales/fr/address/street_prefix.js',
        './secondary_address':
          '../node_modules/faker/lib/locales/fr/address/secondary_address.js',
        './postcode':
          '../node_modules/faker/lib/locales/fr/address/postcode.js',
        './state': '../node_modules/faker/lib/locales/fr/address/state.js',
        './city_name':
          '../node_modules/faker/lib/locales/fr/address/city_name.js',
        './city': '../node_modules/faker/lib/locales/fr/address/city.js',
        './street_suffix':
          '../node_modules/faker/lib/locales/fr/address/street_suffix.js',
        './street_name':
          '../node_modules/faker/lib/locales/fr/address/street_name.js',
        './street_address':
          '../node_modules/faker/lib/locales/fr/address/street_address.js',
        './default_country':
          '../node_modules/faker/lib/locales/fr/address/default_country.js',
      },
    ],
    '../node_modules/faker/lib/locales/fr/company/suffix.js': [
      function(require, module, exports) {
        module['exports'] = [
          'SARL',
          'SA',
          'EURL',
          'SAS',
          'SEM',
          'SCOP',
          'GIE',
          'EI',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/fr/company/adjective.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Adaptive',
          'Advanced',
          'Ameliorated',
          'Assimilated',
          'Automated',
          'Balanced',
          'Business-focused',
          'Centralized',
          'Cloned',
          'Compatible',
          'Configurable',
          'Cross-group',
          'Cross-platform',
          'Customer-focused',
          'Customizable',
          'Decentralized',
          'De-engineered',
          'Devolved',
          'Digitized',
          'Distributed',
          'Diverse',
          'Down-sized',
          'Enhanced',
          'Enterprise-wide',
          'Ergonomic',
          'Exclusive',
          'Expanded',
          'Extended',
          'Face to face',
          'Focused',
          'Front-line',
          'Fully-configurable',
          'Function-based',
          'Fundamental',
          'Future-proofed',
          'Grass-roots',
          'Horizontal',
          'Implemented',
          'Innovative',
          'Integrated',
          'Intuitive',
          'Inverse',
          'Managed',
          'Mandatory',
          'Monitored',
          'Multi-channelled',
          'Multi-lateral',
          'Multi-layered',
          'Multi-tiered',
          'Networked',
          'Object-based',
          'Open-architected',
          'Open-source',
          'Operative',
          'Optimized',
          'Optional',
          'Organic',
          'Organized',
          'Persevering',
          'Persistent',
          'Phased',
          'Polarised',
          'Pre-emptive',
          'Proactive',
          'Profit-focused',
          'Profound',
          'Programmable',
          'Progressive',
          'Public-key',
          'Quality-focused',
          'Reactive',
          'Realigned',
          'Re-contextualized',
          'Re-engineered',
          'Reduced',
          'Reverse-engineered',
          'Right-sized',
          'Robust',
          'Seamless',
          'Secured',
          'Self-enabling',
          'Sharable',
          'Stand-alone',
          'Streamlined',
          'Switchable',
          'Synchronised',
          'Synergistic',
          'Synergized',
          'Team-oriented',
          'Total',
          'Triple-buffered',
          'Universal',
          'Up-sized',
          'Upgradable',
          'User-centric',
          'User-friendly',
          'Versatile',
          'Virtual',
          'Visionary',
          'Vision-oriented',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/fr/company/descriptor.js': [
      function(require, module, exports) {
        module['exports'] = [
          '24 hour',
          '24/7',
          '3rd generation',
          '4th generation',
          '5th generation',
          '6th generation',
          'actuating',
          'analyzing',
          'asymmetric',
          'asynchronous',
          'attitude-oriented',
          'background',
          'bandwidth-monitored',
          'bi-directional',
          'bifurcated',
          'bottom-line',
          'clear-thinking',
          'client-driven',
          'client-server',
          'coherent',
          'cohesive',
          'composite',
          'context-sensitive',
          'contextually-based',
          'content-based',
          'dedicated',
          'demand-driven',
          'didactic',
          'directional',
          'discrete',
          'disintermediate',
          'dynamic',
          'eco-centric',
          'empowering',
          'encompassing',
          'even-keeled',
          'executive',
          'explicit',
          'exuding',
          'fault-tolerant',
          'foreground',
          'fresh-thinking',
          'full-range',
          'global',
          'grid-enabled',
          'heuristic',
          'high-level',
          'holistic',
          'homogeneous',
          'human-resource',
          'hybrid',
          'impactful',
          'incremental',
          'intangible',
          'interactive',
          'intermediate',
          'leading edge',
          'local',
          'logistical',
          'maximized',
          'methodical',
          'mission-critical',
          'mobile',
          'modular',
          'motivating',
          'multimedia',
          'multi-state',
          'multi-tasking',
          'national',
          'needs-based',
          'neutral',
          'next generation',
          'non-volatile',
          'object-oriented',
          'optimal',
          'optimizing',
          'radical',
          'real-time',
          'reciprocal',
          'regional',
          'responsive',
          'scalable',
          'secondary',
          'solution-oriented',
          'stable',
          'static',
          'systematic',
          'systemic',
          'system-worthy',
          'tangible',
          'tertiary',
          'transitional',
          'uniform',
          'upward-trending',
          'user-facing',
          'value-added',
          'web-enabled',
          'well-modulated',
          'zero administration',
          'zero defect',
          'zero tolerance',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/fr/company/noun.js': [
      function(require, module, exports) {
        module['exports'] = [
          'ability',
          'access',
          'adapter',
          'algorithm',
          'alliance',
          'analyzer',
          'application',
          'approach',
          'architecture',
          'archive',
          'artificial intelligence',
          'array',
          'attitude',
          'benchmark',
          'budgetary management',
          'capability',
          'capacity',
          'challenge',
          'circuit',
          'collaboration',
          'complexity',
          'concept',
          'conglomeration',
          'contingency',
          'core',
          'customer loyalty',
          'database',
          'data-warehouse',
          'definition',
          'emulation',
          'encoding',
          'encryption',
          'extranet',
          'firmware',
          'flexibility',
          'focus group',
          'forecast',
          'frame',
          'framework',
          'function',
          'functionalities',
          'Graphic Interface',
          'groupware',
          'Graphical User Interface',
          'hardware',
          'help-desk',
          'hierarchy',
          'hub',
          'implementation',
          'info-mediaries',
          'infrastructure',
          'initiative',
          'installation',
          'instruction set',
          'interface',
          'internet solution',
          'intranet',
          'knowledge user',
          'knowledge base',
          'local area network',
          'leverage',
          'matrices',
          'matrix',
          'methodology',
          'middleware',
          'migration',
          'model',
          'moderator',
          'monitoring',
          'moratorium',
          'neural-net',
          'open architecture',
          'open system',
          'orchestration',
          'paradigm',
          'parallelism',
          'policy',
          'portal',
          'pricing structure',
          'process improvement',
          'product',
          'productivity',
          'project',
          'projection',
          'protocol',
          'secured line',
          'service-desk',
          'software',
          'solution',
          'standardization',
          'strategy',
          'structure',
          'success',
          'superstructure',
          'support',
          'synergy',
          'system engine',
          'task-force',
          'throughput',
          'time-frame',
          'toolset',
          'utilisation',
          'website',
          'workforce',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/fr/company/bs_verb.js': [
      function(require, module, exports) {
        module['exports'] = [
          'implement',
          'utilize',
          'integrate',
          'streamline',
          'optimize',
          'evolve',
          'transform',
          'embrace',
          'enable',
          'orchestrate',
          'leverage',
          'reinvent',
          'aggregate',
          'architect',
          'enhance',
          'incentivize',
          'morph',
          'empower',
          'envisioneer',
          'monetize',
          'harness',
          'facilitate',
          'seize',
          'disintermediate',
          'synergize',
          'strategize',
          'deploy',
          'brand',
          'grow',
          'target',
          'syndicate',
          'synthesize',
          'deliver',
          'mesh',
          'incubate',
          'engage',
          'maximize',
          'benchmark',
          'expedite',
          'reintermediate',
          'whiteboard',
          'visualize',
          'repurpose',
          'innovate',
          'scale',
          'unleash',
          'drive',
          'extend',
          'engineer',
          'revolutionize',
          'generate',
          'exploit',
          'transition',
          'e-enable',
          'iterate',
          'cultivate',
          'matrix',
          'productize',
          'redefine',
          'recontextualize',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/fr/company/bs_adjective.js': [
      function(require, module, exports) {
        module['exports'] = [
          'clicks-and-mortar',
          'value-added',
          'vertical',
          'proactive',
          'robust',
          'revolutionary',
          'scalable',
          'leading-edge',
          'innovative',
          'intuitive',
          'strategic',
          'e-business',
          'mission-critical',
          'sticky',
          'one-to-one',
          '24/7',
          'end-to-end',
          'global',
          'B2B',
          'B2C',
          'granular',
          'frictionless',
          'virtual',
          'viral',
          'dynamic',
          '24/365',
          'best-of-breed',
          'killer',
          'magnetic',
          'bleeding-edge',
          'web-enabled',
          'interactive',
          'dot-com',
          'sexy',
          'back-end',
          'real-time',
          'efficient',
          'front-end',
          'distributed',
          'seamless',
          'extensible',
          'turn-key',
          'world-class',
          'open-source',
          'cross-platform',
          'cross-media',
          'synergistic',
          'bricks-and-clicks',
          'out-of-the-box',
          'enterprise',
          'integrated',
          'impactful',
          'wireless',
          'transparent',
          'next-generation',
          'cutting-edge',
          'user-centric',
          'visionary',
          'customized',
          'ubiquitous',
          'plug-and-play',
          'collaborative',
          'compelling',
          'holistic',
          'rich',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/fr/company/bs_noun.js': [
      function(require, module, exports) {
        module['exports'] = [
          'synergies',
          'web-readiness',
          'paradigms',
          'markets',
          'partnerships',
          'infrastructures',
          'platforms',
          'initiatives',
          'channels',
          'eyeballs',
          'communities',
          'ROI',
          'solutions',
          'e-tailers',
          'e-services',
          'action-items',
          'portals',
          'niches',
          'technologies',
          'content',
          'vortals',
          'supply-chains',
          'convergence',
          'relationships',
          'architectures',
          'interfaces',
          'e-markets',
          'e-commerce',
          'systems',
          'bandwidth',
          'infomediaries',
          'models',
          'mindshare',
          'deliverables',
          'users',
          'schemas',
          'networks',
          'applications',
          'metrics',
          'e-business',
          'functionalities',
          'experiences',
          'web services',
          'methodologies',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/fr/company/name.js': [
      function(require, module, exports) {
        module['exports'] = [
          '#{Name.last_name} #{suffix}',
          '#{Name.last_name} et #{Name.last_name}',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/fr/company/index.js': [
      function(require, module, exports) {
        var company = {}
        module['exports'] = company
        company.suffix = require('./suffix')
        company.adjective = require('./adjective')
        company.descriptor = require('./descriptor')
        company.noun = require('./noun')
        company.bs_verb = require('./bs_verb')
        company.bs_adjective = require('./bs_adjective')
        company.bs_noun = require('./bs_noun')
        company.name = require('./name')
      },
      {
        './suffix':
          '../node_modules/faker/lib/locales/fr/company/suffix.js',
        './adjective':
          '../node_modules/faker/lib/locales/fr/company/adjective.js',
        './descriptor':
          '../node_modules/faker/lib/locales/fr/company/descriptor.js',
        './noun': '../node_modules/faker/lib/locales/fr/company/noun.js',
        './bs_verb':
          '../node_modules/faker/lib/locales/fr/company/bs_verb.js',
        './bs_adjective':
          '../node_modules/faker/lib/locales/fr/company/bs_adjective.js',
        './bs_noun':
          '../node_modules/faker/lib/locales/fr/company/bs_noun.js',
        './name': '../node_modules/faker/lib/locales/fr/company/name.js',
      },
    ],
    '../node_modules/faker/lib/locales/fr/internet/free_email.js': [
      function(require, module, exports) {
        module['exports'] = ['gmail.com', 'yahoo.fr', 'hotmail.fr']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/fr/internet/domain_suffix.js': [
      function(require, module, exports) {
        module['exports'] = [
          'com',
          'fr',
          'eu',
          'info',
          'name',
          'net',
          'org',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/fr/internet/index.js': [
      function(require, module, exports) {
        var internet = {}
        module['exports'] = internet
        internet.free_email = require('./free_email')
        internet.domain_suffix = require('./domain_suffix')
      },
      {
        './free_email':
          '../node_modules/faker/lib/locales/fr/internet/free_email.js',
        './domain_suffix':
          '../node_modules/faker/lib/locales/fr/internet/domain_suffix.js',
      },
    ],
    '../node_modules/faker/lib/locales/fr/lorem/words.js': [
      function(require, module, exports) {
        module['exports'] = [
          'alias',
          'consequatur',
          'aut',
          'perferendis',
          'sit',
          'voluptatem',
          'accusantium',
          'doloremque',
          'aperiam',
          'eaque',
          'ipsa',
          'quae',
          'ab',
          'illo',
          'inventore',
          'veritatis',
          'et',
          'quasi',
          'architecto',
          'beatae',
          'vitae',
          'dicta',
          'sunt',
          'explicabo',
          'aspernatur',
          'aut',
          'odit',
          'aut',
          'fugit',
          'sed',
          'quia',
          'consequuntur',
          'magni',
          'dolores',
          'eos',
          'qui',
          'ratione',
          'voluptatem',
          'sequi',
          'nesciunt',
          'neque',
          'dolorem',
          'ipsum',
          'quia',
          'dolor',
          'sit',
          'amet',
          'consectetur',
          'adipisci',
          'velit',
          'sed',
          'quia',
          'non',
          'numquam',
          'eius',
          'modi',
          'tempora',
          'incidunt',
          'ut',
          'labore',
          'et',
          'dolore',
          'magnam',
          'aliquam',
          'quaerat',
          'voluptatem',
          'ut',
          'enim',
          'ad',
          'minima',
          'veniam',
          'quis',
          'nostrum',
          'exercitationem',
          'ullam',
          'corporis',
          'nemo',
          'enim',
          'ipsam',
          'voluptatem',
          'quia',
          'voluptas',
          'sit',
          'suscipit',
          'laboriosam',
          'nisi',
          'ut',
          'aliquid',
          'ex',
          'ea',
          'commodi',
          'consequatur',
          'quis',
          'autem',
          'vel',
          'eum',
          'iure',
          'reprehenderit',
          'qui',
          'in',
          'ea',
          'voluptate',
          'velit',
          'esse',
          'quam',
          'nihil',
          'molestiae',
          'et',
          'iusto',
          'odio',
          'dignissimos',
          'ducimus',
          'qui',
          'blanditiis',
          'praesentium',
          'laudantium',
          'totam',
          'rem',
          'voluptatum',
          'deleniti',
          'atque',
          'corrupti',
          'quos',
          'dolores',
          'et',
          'quas',
          'molestias',
          'excepturi',
          'sint',
          'occaecati',
          'cupiditate',
          'non',
          'provident',
          'sed',
          'ut',
          'perspiciatis',
          'unde',
          'omnis',
          'iste',
          'natus',
          'error',
          'similique',
          'sunt',
          'in',
          'culpa',
          'qui',
          'officia',
          'deserunt',
          'mollitia',
          'animi',
          'id',
          'est',
          'laborum',
          'et',
          'dolorum',
          'fuga',
          'et',
          'harum',
          'quidem',
          'rerum',
          'facilis',
          'est',
          'et',
          'expedita',
          'distinctio',
          'nam',
          'libero',
          'tempore',
          'cum',
          'soluta',
          'nobis',
          'est',
          'eligendi',
          'optio',
          'cumque',
          'nihil',
          'impedit',
          'quo',
          'porro',
          'quisquam',
          'est',
          'qui',
          'minus',
          'id',
          'quod',
          'maxime',
          'placeat',
          'facere',
          'possimus',
          'omnis',
          'voluptas',
          'assumenda',
          'est',
          'omnis',
          'dolor',
          'repellendus',
          'temporibus',
          'autem',
          'quibusdam',
          'et',
          'aut',
          'consequatur',
          'vel',
          'illum',
          'qui',
          'dolorem',
          'eum',
          'fugiat',
          'quo',
          'voluptas',
          'nulla',
          'pariatur',
          'at',
          'vero',
          'eos',
          'et',
          'accusamus',
          'officiis',
          'debitis',
          'aut',
          'rerum',
          'necessitatibus',
          'saepe',
          'eveniet',
          'ut',
          'et',
          'voluptates',
          'repudiandae',
          'sint',
          'et',
          'molestiae',
          'non',
          'recusandae',
          'itaque',
          'earum',
          'rerum',
          'hic',
          'tenetur',
          'a',
          'sapiente',
          'delectus',
          'ut',
          'aut',
          'reiciendis',
          'voluptatibus',
          'maiores',
          'doloribus',
          'asperiores',
          'repellat',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/fr/lorem/supplemental.js': [
      function(require, module, exports) {
        module['exports'] = [
          'abbas',
          'abduco',
          'abeo',
          'abscido',
          'absconditus',
          'absens',
          'absorbeo',
          'absque',
          'abstergo',
          'absum',
          'abundans',
          'abutor',
          'accedo',
          'accendo',
          'acceptus',
          'accipio',
          'accommodo',
          'accusator',
          'acer',
          'acerbitas',
          'acervus',
          'acidus',
          'acies',
          'acquiro',
          'acsi',
          'adamo',
          'adaugeo',
          'addo',
          'adduco',
          'ademptio',
          'adeo',
          'adeptio',
          'adfectus',
          'adfero',
          'adficio',
          'adflicto',
          'adhaero',
          'adhuc',
          'adicio',
          'adimpleo',
          'adinventitias',
          'adipiscor',
          'adiuvo',
          'administratio',
          'admiratio',
          'admitto',
          'admoneo',
          'admoveo',
          'adnuo',
          'adopto',
          'adsidue',
          'adstringo',
          'adsuesco',
          'adsum',
          'adulatio',
          'adulescens',
          'adultus',
          'aduro',
          'advenio',
          'adversus',
          'advoco',
          'aedificium',
          'aeger',
          'aegre',
          'aegrotatio',
          'aegrus',
          'aeneus',
          'aequitas',
          'aequus',
          'aer',
          'aestas',
          'aestivus',
          'aestus',
          'aetas',
          'aeternus',
          'ager',
          'aggero',
          'aggredior',
          'agnitio',
          'agnosco',
          'ago',
          'ait',
          'aiunt',
          'alienus',
          'alii',
          'alioqui',
          'aliqua',
          'alius',
          'allatus',
          'alo',
          'alter',
          'altus',
          'alveus',
          'amaritudo',
          'ambitus',
          'ambulo',
          'amicitia',
          'amiculum',
          'amissio',
          'amita',
          'amitto',
          'amo',
          'amor',
          'amoveo',
          'amplexus',
          'amplitudo',
          'amplus',
          'ancilla',
          'angelus',
          'angulus',
          'angustus',
          'animadverto',
          'animi',
          'animus',
          'annus',
          'anser',
          'ante',
          'antea',
          'antepono',
          'antiquus',
          'aperio',
          'aperte',
          'apostolus',
          'apparatus',
          'appello',
          'appono',
          'appositus',
          'approbo',
          'apto',
          'aptus',
          'apud',
          'aqua',
          'ara',
          'aranea',
          'arbitro',
          'arbor',
          'arbustum',
          'arca',
          'arceo',
          'arcesso',
          'arcus',
          'argentum',
          'argumentum',
          'arguo',
          'arma',
          'armarium',
          'armo',
          'aro',
          'ars',
          'articulus',
          'artificiose',
          'arto',
          'arx',
          'ascisco',
          'ascit',
          'asper',
          'aspicio',
          'asporto',
          'assentator',
          'astrum',
          'atavus',
          'ater',
          'atqui',
          'atrocitas',
          'atrox',
          'attero',
          'attollo',
          'attonbitus',
          'auctor',
          'auctus',
          'audacia',
          'audax',
          'audentia',
          'audeo',
          'audio',
          'auditor',
          'aufero',
          'aureus',
          'auris',
          'aurum',
          'aut',
          'autem',
          'autus',
          'auxilium',
          'avaritia',
          'avarus',
          'aveho',
          'averto',
          'avoco',
          'baiulus',
          'balbus',
          'barba',
          'bardus',
          'basium',
          'beatus',
          'bellicus',
          'bellum',
          'bene',
          'beneficium',
          'benevolentia',
          'benigne',
          'bestia',
          'bibo',
          'bis',
          'blandior',
          'bonus',
          'bos',
          'brevis',
          'cado',
          'caecus',
          'caelestis',
          'caelum',
          'calamitas',
          'calcar',
          'calco',
          'calculus',
          'callide',
          'campana',
          'candidus',
          'canis',
          'canonicus',
          'canto',
          'capillus',
          'capio',
          'capitulus',
          'capto',
          'caput',
          'carbo',
          'carcer',
          'careo',
          'caries',
          'cariosus',
          'caritas',
          'carmen',
          'carpo',
          'carus',
          'casso',
          'caste',
          'casus',
          'catena',
          'caterva',
          'cattus',
          'cauda',
          'causa',
          'caute',
          'caveo',
          'cavus',
          'cedo',
          'celebrer',
          'celer',
          'celo',
          'cena',
          'cenaculum',
          'ceno',
          'censura',
          'centum',
          'cerno',
          'cernuus',
          'certe',
          'certo',
          'certus',
          'cervus',
          'cetera',
          'charisma',
          'chirographum',
          'cibo',
          'cibus',
          'cicuta',
          'cilicium',
          'cimentarius',
          'ciminatio',
          'cinis',
          'circumvenio',
          'cito',
          'civis',
          'civitas',
          'clam',
          'clamo',
          'claro',
          'clarus',
          'claudeo',
          'claustrum',
          'clementia',
          'clibanus',
          'coadunatio',
          'coaegresco',
          'coepi',
          'coerceo',
          'cogito',
          'cognatus',
          'cognomen',
          'cogo',
          'cohaero',
          'cohibeo',
          'cohors',
          'colligo',
          'colloco',
          'collum',
          'colo',
          'color',
          'coma',
          'combibo',
          'comburo',
          'comedo',
          'comes',
          'cometes',
          'comis',
          'comitatus',
          'commemoro',
          'comminor',
          'commodo',
          'communis',
          'comparo',
          'compello',
          'complectus',
          'compono',
          'comprehendo',
          'comptus',
          'conatus',
          'concedo',
          'concido',
          'conculco',
          'condico',
          'conduco',
          'confero',
          'confido',
          'conforto',
          'confugo',
          'congregatio',
          'conicio',
          'coniecto',
          'conitor',
          'coniuratio',
          'conor',
          'conqueror',
          'conscendo',
          'conservo',
          'considero',
          'conspergo',
          'constans',
          'consuasor',
          'contabesco',
          'contego',
          'contigo',
          'contra',
          'conturbo',
          'conventus',
          'convoco',
          'copia',
          'copiose',
          'cornu',
          'corona',
          'corpus',
          'correptius',
          'corrigo',
          'corroboro',
          'corrumpo',
          'coruscus',
          'cotidie',
          'crapula',
          'cras',
          'crastinus',
          'creator',
          'creber',
          'crebro',
          'credo',
          'creo',
          'creptio',
          'crepusculum',
          'cresco',
          'creta',
          'cribro',
          'crinis',
          'cruciamentum',
          'crudelis',
          'cruentus',
          'crur',
          'crustulum',
          'crux',
          'cubicularis',
          'cubitum',
          'cubo',
          'cui',
          'cuius',
          'culpa',
          'culpo',
          'cultellus',
          'cultura',
          'cum',
          'cunabula',
          'cunae',
          'cunctatio',
          'cupiditas',
          'cupio',
          'cuppedia',
          'cupressus',
          'cur',
          'cura',
          'curatio',
          'curia',
          'curiositas',
          'curis',
          'curo',
          'curriculum',
          'currus',
          'cursim',
          'curso',
          'cursus',
          'curto',
          'curtus',
          'curvo',
          'curvus',
          'custodia',
          'damnatio',
          'damno',
          'dapifer',
          'debeo',
          'debilito',
          'decens',
          'decerno',
          'decet',
          'decimus',
          'decipio',
          'decor',
          'decretum',
          'decumbo',
          'dedecor',
          'dedico',
          'deduco',
          'defaeco',
          'defendo',
          'defero',
          'defessus',
          'defetiscor',
          'deficio',
          'defigo',
          'defleo',
          'defluo',
          'defungo',
          'degenero',
          'degero',
          'degusto',
          'deinde',
          'delectatio',
          'delego',
          'deleo',
          'delibero',
          'delicate',
          'delinquo',
          'deludo',
          'demens',
          'demergo',
          'demitto',
          'demo',
          'demonstro',
          'demoror',
          'demulceo',
          'demum',
          'denego',
          'denique',
          'dens',
          'denuncio',
          'denuo',
          'deorsum',
          'depereo',
          'depono',
          'depopulo',
          'deporto',
          'depraedor',
          'deprecator',
          'deprimo',
          'depromo',
          'depulso',
          'deputo',
          'derelinquo',
          'derideo',
          'deripio',
          'desidero',
          'desino',
          'desipio',
          'desolo',
          'desparatus',
          'despecto',
          'despirmatio',
          'infit',
          'inflammatio',
          'paens',
          'patior',
          'patria',
          'patrocinor',
          'patruus',
          'pauci',
          'paulatim',
          'pauper',
          'pax',
          'peccatus',
          'pecco',
          'pecto',
          'pectus',
          'pecunia',
          'pecus',
          'peior',
          'pel',
          'ocer',
          'socius',
          'sodalitas',
          'sol',
          'soleo',
          'solio',
          'solitudo',
          'solium',
          'sollers',
          'sollicito',
          'solum',
          'solus',
          'solutio',
          'solvo',
          'somniculosus',
          'somnus',
          'sonitus',
          'sono',
          'sophismata',
          'sopor',
          'sordeo',
          'sortitus',
          'spargo',
          'speciosus',
          'spectaculum',
          'speculum',
          'sperno',
          'spero',
          'spes',
          'spiculum',
          'spiritus',
          'spoliatio',
          'sponte',
          'stabilis',
          'statim',
          'statua',
          'stella',
          'stillicidium',
          'stipes',
          'stips',
          'sto',
          'strenuus',
          'strues',
          'studio',
          'stultus',
          'suadeo',
          'suasoria',
          'sub',
          'subito',
          'subiungo',
          'sublime',
          'subnecto',
          'subseco',
          'substantia',
          'subvenio',
          'succedo',
          'succurro',
          'sufficio',
          'suffoco',
          'suffragium',
          'suggero',
          'sui',
          'sulum',
          'sum',
          'summa',
          'summisse',
          'summopere',
          'sumo',
          'sumptus',
          'supellex',
          'super',
          'suppellex',
          'supplanto',
          'suppono',
          'supra',
          'surculus',
          'surgo',
          'sursum',
          'suscipio',
          'suspendo',
          'sustineo',
          'suus',
          'synagoga',
          'tabella',
          'tabernus',
          'tabesco',
          'tabgo',
          'tabula',
          'taceo',
          'tactus',
          'taedium',
          'talio',
          'talis',
          'talus',
          'tam',
          'tamdiu',
          'tamen',
          'tametsi',
          'tamisium',
          'tamquam',
          'tandem',
          'tantillus',
          'tantum',
          'tardus',
          'tego',
          'temeritas',
          'temperantia',
          'templum',
          'temptatio',
          'tempus',
          'tenax',
          'tendo',
          'teneo',
          'tener',
          'tenuis',
          'tenus',
          'tepesco',
          'tepidus',
          'ter',
          'terebro',
          'teres',
          'terga',
          'tergeo',
          'tergiversatio',
          'tergo',
          'tergum',
          'termes',
          'terminatio',
          'tero',
          'terra',
          'terreo',
          'territo',
          'terror',
          'tersus',
          'tertius',
          'testimonium',
          'texo',
          'textilis',
          'textor',
          'textus',
          'thalassinus',
          'theatrum',
          'theca',
          'thema',
          'theologus',
          'thermae',
          'thesaurus',
          'thesis',
          'thorax',
          'thymbra',
          'thymum',
          'tibi',
          'timidus',
          'timor',
          'titulus',
          'tolero',
          'tollo',
          'tondeo',
          'tonsor',
          'torqueo',
          'torrens',
          'tot',
          'totidem',
          'toties',
          'totus',
          'tracto',
          'trado',
          'traho',
          'trans',
          'tredecim',
          'tremo',
          'trepide',
          'tres',
          'tribuo',
          'tricesimus',
          'triduana',
          'triginta',
          'tripudio',
          'tristis',
          'triumphus',
          'trucido',
          'truculenter',
          'tubineus',
          'tui',
          'tum',
          'tumultus',
          'tunc',
          'turba',
          'turbo',
          'turpe',
          'turpis',
          'tutamen',
          'tutis',
          'tyrannus',
          'uberrime',
          'ubi',
          'ulciscor',
          'ullus',
          'ulterius',
          'ultio',
          'ultra',
          'umbra',
          'umerus',
          'umquam',
          'una',
          'unde',
          'undique',
          'universe',
          'unus',
          'urbanus',
          'urbs',
          'uredo',
          'usitas',
          'usque',
          'ustilo',
          'ustulo',
          'usus',
          'uter',
          'uterque',
          'utilis',
          'utique',
          'utor',
          'utpote',
          'utrimque',
          'utroque',
          'utrum',
          'uxor',
          'vaco',
          'vacuus',
          'vado',
          'vae',
          'valde',
          'valens',
          'valeo',
          'valetudo',
          'validus',
          'vallum',
          'vapulus',
          'varietas',
          'varius',
          'vehemens',
          'vel',
          'velociter',
          'velum',
          'velut',
          'venia',
          'venio',
          'ventito',
          'ventosus',
          'ventus',
          'venustas',
          'ver',
          'verbera',
          'verbum',
          'vere',
          'verecundia',
          'vereor',
          'vergo',
          'veritas',
          'vero',
          'versus',
          'verto',
          'verumtamen',
          'verus',
          'vesco',
          'vesica',
          'vesper',
          'vespillo',
          'vester',
          'vestigium',
          'vestrum',
          'vetus',
          'via',
          'vicinus',
          'vicissitudo',
          'victoria',
          'victus',
          'videlicet',
          'video',
          'viduata',
          'viduo',
          'vigilo',
          'vigor',
          'vilicus',
          'vilis',
          'vilitas',
          'villa',
          'vinco',
          'vinculum',
          'vindico',
          'vinitor',
          'vinum',
          'vir',
          'virga',
          'virgo',
          'viridis',
          'viriliter',
          'virtus',
          'vis',
          'viscus',
          'vita',
          'vitiosus',
          'vitium',
          'vito',
          'vivo',
          'vix',
          'vobis',
          'vociferor',
          'voco',
          'volaticus',
          'volo',
          'volubilis',
          'voluntarius',
          'volup',
          'volutabrum',
          'volva',
          'vomer',
          'vomica',
          'vomito',
          'vorago',
          'vorax',
          'voro',
          'vos',
          'votum',
          'voveo',
          'vox',
          'vulariter',
          'vulgaris',
          'vulgivagus',
          'vulgo',
          'vulgus',
          'vulnero',
          'vulnus',
          'vulpes',
          'vulticulus',
          'vultuosus',
          'xiphias',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/fr/lorem/index.js': [
      function(require, module, exports) {
        var lorem = {}
        module['exports'] = lorem
        lorem.words = require('./words')
        lorem.supplemental = require('./supplemental')
      },
      {
        './words': '../node_modules/faker/lib/locales/fr/lorem/words.js',
        './supplemental':
          '../node_modules/faker/lib/locales/fr/lorem/supplemental.js',
      },
    ],
    '../node_modules/faker/lib/locales/fr/name/first_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Enzo',
          'Lucas',
          'Mathis',
          'Nathan',
          'Thomas',
          'Hugo',
          'Théo',
          'Tom',
          'Louis',
          'Raphaël',
          'Clément',
          'Léo',
          'Mathéo',
          'Maxime',
          'Alexandre',
          'Antoine',
          'Yanis',
          'Paul',
          'Baptiste',
          'Alexis',
          'Gabriel',
          'Arthur',
          'Jules',
          'Ethan',
          'Noah',
          'Quentin',
          'Axel',
          'Evan',
          'Mattéo',
          'Romain',
          'Valentin',
          'Maxence',
          'Noa',
          'Adam',
          'Nicolas',
          'Julien',
          'Mael',
          'Pierre',
          'Rayan',
          'Victor',
          'Mohamed',
          'Adrien',
          'Kylian',
          'Sacha',
          'Benjamin',
          'Léa',
          'Clara',
          'Manon',
          'Chloé',
          'Camille',
          'Ines',
          'Sarah',
          'Jade',
          'Lola',
          'Anaïs',
          'Lucie',
          'Océane',
          'Lilou',
          'Marie',
          'Eva',
          'Romane',
          'Lisa',
          'Zoe',
          'Julie',
          'Mathilde',
          'Louise',
          'Juliette',
          'Clémence',
          'Célia',
          'Laura',
          'Lena',
          'Maëlys',
          'Charlotte',
          'Ambre',
          'Maeva',
          'Pauline',
          'Lina',
          'Jeanne',
          'Lou',
          'Noémie',
          'Justine',
          'Louna',
          'Elisa',
          'Alice',
          'Emilie',
          'Carla',
          'Maëlle',
          'Alicia',
          'Mélissa',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/fr/name/last_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Martin',
          'Bernard',
          'Dubois',
          'Thomas',
          'Robert',
          'Richard',
          'Petit',
          'Durand',
          'Leroy',
          'Moreau',
          'Simon',
          'Laurent',
          'Lefebvre',
          'Michel',
          'Garcia',
          'David',
          'Bertrand',
          'Roux',
          'Vincent',
          'Fournier',
          'Morel',
          'Girard',
          'Andre',
          'Lefevre',
          'Mercier',
          'Dupont',
          'Lambert',
          'Bonnet',
          'Francois',
          'Martinez',
          'Legrand',
          'Garnier',
          'Faure',
          'Rousseau',
          'Blanc',
          'Guerin',
          'Muller',
          'Henry',
          'Roussel',
          'Nicolas',
          'Perrin',
          'Morin',
          'Mathieu',
          'Clement',
          'Gauthier',
          'Dumont',
          'Lopez',
          'Fontaine',
          'Chevalier',
          'Robin',
          'Masson',
          'Sanchez',
          'Gerard',
          'Nguyen',
          'Boyer',
          'Denis',
          'Lemaire',
          'Duval',
          'Joly',
          'Gautier',
          'Roger',
          'Roche',
          'Roy',
          'Noel',
          'Meyer',
          'Lucas',
          'Meunier',
          'Jean',
          'Perez',
          'Marchand',
          'Dufour',
          'Blanchard',
          'Marie',
          'Barbier',
          'Brun',
          'Dumas',
          'Brunet',
          'Schmitt',
          'Leroux',
          'Colin',
          'Fernandez',
          'Pierre',
          'Renard',
          'Arnaud',
          'Rolland',
          'Caron',
          'Aubert',
          'Giraud',
          'Leclerc',
          'Vidal',
          'Bourgeois',
          'Renaud',
          'Lemoine',
          'Picard',
          'Gaillard',
          'Philippe',
          'Leclercq',
          'Lacroix',
          'Fabre',
          'Dupuis',
          'Olivier',
          'Rodriguez',
          'Da silva',
          'Hubert',
          'Louis',
          'Charles',
          'Guillot',
          'Riviere',
          'Le gall',
          'Guillaume',
          'Adam',
          'Rey',
          'Moulin',
          'Gonzalez',
          'Berger',
          'Lecomte',
          'Menard',
          'Fleury',
          'Deschamps',
          'Carpentier',
          'Julien',
          'Benoit',
          'Paris',
          'Maillard',
          'Marchal',
          'Aubry',
          'Vasseur',
          'Le roux',
          'Renault',
          'Jacquet',
          'Collet',
          'Prevost',
          'Poirier',
          'Charpentier',
          'Royer',
          'Huet',
          'Baron',
          'Dupuy',
          'Pons',
          'Paul',
          'Laine',
          'Carre',
          'Breton',
          'Remy',
          'Schneider',
          'Perrot',
          'Guyot',
          'Barre',
          'Marty',
          'Cousin',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/fr/name/prefix.js': [
      function(require, module, exports) {
        module['exports'] = ['M', 'Mme', 'Mlle', 'Dr', 'Prof']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/fr/name/title.js': [
      function(require, module, exports) {
        module['exports'] = {
          job: [
            'Superviseur',
            'Executif',
            'Manager',
            'Ingenieur',
            'Specialiste',
            'Directeur',
            'Coordinateur',
            'Administrateur',
            'Architecte',
            'Analyste',
            'Designer',
            'Technicien',
            'Developpeur',
            'Producteur',
            'Consultant',
            'Assistant',
            'Agent',
            'Stagiaire',
          ],
        }
      },
      {},
    ],
    '../node_modules/faker/lib/locales/fr/name/name.js': [
      function(require, module, exports) {
        module['exports'] = [
          '#{prefix} #{first_name} #{last_name}',
          '#{first_name} #{last_name}',
          '#{last_name} #{first_name}',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/fr/name/index.js': [
      function(require, module, exports) {
        var name = {}
        module['exports'] = name
        name.first_name = require('./first_name')
        name.last_name = require('./last_name')
        name.prefix = require('./prefix')
        name.title = require('./title')
        name.name = require('./name')
      },
      {
        './first_name':
          '../node_modules/faker/lib/locales/fr/name/first_name.js',
        './last_name':
          '../node_modules/faker/lib/locales/fr/name/last_name.js',
        './prefix': '../node_modules/faker/lib/locales/fr/name/prefix.js',
        './title': '../node_modules/faker/lib/locales/fr/name/title.js',
        './name': '../node_modules/faker/lib/locales/fr/name/name.js',
      },
    ],
    '../node_modules/faker/lib/locales/fr/phone_number/formats.js': [
      function(require, module, exports) {
        module['exports'] = [
          '01########',
          '02########',
          '03########',
          '04########',
          '05########',
          '06########',
          '07########',
          '+33 1########',
          '+33 2########',
          '+33 3########',
          '+33 4########',
          '+33 5########',
          '+33 6########',
          '+33 7########',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/fr/phone_number/index.js': [
      function(require, module, exports) {
        var phone_number = {}
        module['exports'] = phone_number
        phone_number.formats = require('./formats')
      },
      {
        './formats':
          '../node_modules/faker/lib/locales/fr/phone_number/formats.js',
      },
    ],
    '../node_modules/faker/lib/locales/fr/index.js': [
      function(require, module, exports) {
        var fr = {}
        module['exports'] = fr
        fr.title = 'French'
        fr.address = require('./address')
        fr.company = require('./company')
        fr.internet = require('./internet')
        fr.lorem = require('./lorem')
        fr.name = require('./name')
        fr.phone_number = require('./phone_number')
      },
      {
        './address':
          '../node_modules/faker/lib/locales/fr/address/index.js',
        './company':
          '../node_modules/faker/lib/locales/fr/company/index.js',
        './internet':
          '../node_modules/faker/lib/locales/fr/internet/index.js',
        './lorem': '../node_modules/faker/lib/locales/fr/lorem/index.js',
        './name': '../node_modules/faker/lib/locales/fr/name/index.js',
        './phone_number':
          '../node_modules/faker/lib/locales/fr/phone_number/index.js',
      },
    ],
    '../node_modules/faker/lib/locales/fr_CA/address/postcode.js': [
      function(require, module, exports) {
        module['exports'] = ['?#? #?#']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/fr_CA/address/state.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Alberta',
          'Colombie-Britannique',
          'Manitoba',
          'Nouveau-Brunswick',
          'Terre-Neuve-et-Labrador',
          'Nouvelle-Écosse',
          'Territoires du Nord-Ouest',
          'Nunavut',
          'Ontario',
          'Île-du-Prince-Édouard',
          'Québec',
          'Saskatchewan',
          'Yukon',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/fr_CA/address/state_abbr.js': [
      function(require, module, exports) {
        module['exports'] = [
          'AB',
          'BC',
          'MB',
          'NB',
          'NL',
          'NS',
          'NU',
          'NT',
          'ON',
          'PE',
          'QC',
          'SK',
          'YK',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/fr_CA/address/default_country.js': [
      function(require, module, exports) {
        module['exports'] = ['Canada']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/fr_CA/address/index.js': [
      function(require, module, exports) {
        var address = {}
        module['exports'] = address
        address.postcode = require('./postcode')
        address.state = require('./state')
        address.state_abbr = require('./state_abbr')
        address.default_country = require('./default_country')
      },
      {
        './postcode':
          '../node_modules/faker/lib/locales/fr_CA/address/postcode.js',
        './state':
          '../node_modules/faker/lib/locales/fr_CA/address/state.js',
        './state_abbr':
          '../node_modules/faker/lib/locales/fr_CA/address/state_abbr.js',
        './default_country':
          '../node_modules/faker/lib/locales/fr_CA/address/default_country.js',
      },
    ],
    '../node_modules/faker/lib/locales/fr_CA/internet/free_email.js': [
      function(require, module, exports) {
        module['exports'] = ['gmail.com', 'yahoo.ca', 'hotmail.com']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/fr_CA/internet/domain_suffix.js': [
      function(require, module, exports) {
        module['exports'] = [
          'qc.ca',
          'ca',
          'com',
          'biz',
          'info',
          'name',
          'net',
          'org',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/fr_CA/internet/index.js': [
      function(require, module, exports) {
        var internet = {}
        module['exports'] = internet
        internet.free_email = require('./free_email')
        internet.domain_suffix = require('./domain_suffix')
      },
      {
        './free_email':
          '../node_modules/faker/lib/locales/fr_CA/internet/free_email.js',
        './domain_suffix':
          '../node_modules/faker/lib/locales/fr_CA/internet/domain_suffix.js',
      },
    ],
    '../node_modules/faker/lib/locales/fr_CA/phone_number/formats.js': [
      function(require, module, exports) {
        module['exports'] = [
          '### ###-####',
          '1 ### ###-####',
          '### ###-####, poste ###',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/fr_CA/phone_number/index.js': [
      function(require, module, exports) {
        var phone_number = {}
        module['exports'] = phone_number
        phone_number.formats = require('./formats')
      },
      {
        './formats':
          '../node_modules/faker/lib/locales/fr_CA/phone_number/formats.js',
      },
    ],
    '../node_modules/faker/lib/locales/fr_CA/index.js': [
      function(require, module, exports) {
        var fr_CA = {}
        module['exports'] = fr_CA
        fr_CA.title = 'Canada (French)'
        fr_CA.address = require('./address')
        fr_CA.internet = require('./internet')
        fr_CA.phone_number = require('./phone_number')
      },
      {
        './address':
          '../node_modules/faker/lib/locales/fr_CA/address/index.js',
        './internet':
          '../node_modules/faker/lib/locales/fr_CA/internet/index.js',
        './phone_number':
          '../node_modules/faker/lib/locales/fr_CA/phone_number/index.js',
      },
    ],
    '../node_modules/faker/lib/locales/ge/name/first_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          'აგული',
          'აგუნა',
          'ადოლა',
          'ავთანდილ',
          'ავთო',
          'აკაკი',
          'აკო',
          'ალეკო',
          'ალექსანდრე',
          'ალექსი',
          'ალიო',
          'ამირან',
          'ანა',
          'ანანო',
          'ანზორ',
          'ანნა',
          'ანუკა',
          'ანუკი',
          'არჩილ',
          'ასკილა',
          'ასლანაზ',
          'აჩიკო',
          'ბადრი',
          'ბაია',
          'ბარბარე',
          'ბაქარ',
          'ბაჩა',
          'ბაჩანა',
          'ბაჭუა',
          'ბაჭუკი',
          'ბახვა',
          'ბელა',
          'ბერა',
          'ბერდია',
          'ბესიკ',
          'ბესიკ',
          'ბესო',
          'ბექა',
          'ბიძინა',
          'ბიჭიკო',
          'ბოჩია',
          'ბოცო',
          'ბროლა',
          'ბუბუ',
          'ბუდუ',
          'ბუხუტი',
          'გაგა',
          'გაგი',
          'გახა',
          'გეგა',
          'გეგი',
          'გედია',
          'გელა',
          'გენადი',
          'გვადი',
          'გვანცა',
          'გვანჯი',
          'გვიტია',
          'გვრიტა',
          'გია',
          'გიგა',
          'გიგი',
          'გიგილო',
          'გიგლა',
          'გიგოლი',
          'გივი',
          'გივიკო',
          'გიორგი',
          'გოგი',
          'გოგიტა',
          'გოგიჩა',
          'გოგოთურ',
          'გოგოლა',
          'გოდერძი',
          'გოლა',
          'გოჩა',
          'გრიგოლ',
          'გუგა',
          'გუგუ',
          'გუგულა',
          'გუგული',
          'გუგუნა',
          'გუკა',
          'გულარისა',
          'გულვარდი',
          'გულვარდისა',
          'გულთამზე',
          'გულია',
          'გულიკო',
          'გულისა',
          'გულნარა',
          'გურამ',
          'დავით',
          'დალი',
          'დარეჯან',
          'დიანა',
          'დიმიტრი',
          'დოდო',
          'დუტუ',
          'ეთერ',
          'ეთო',
          'ეკა',
          'ეკატერინე',
          'ელგუჯა',
          'ელენა',
          'ელენე',
          'ელზა',
          'ელიკო',
          'ელისო',
          'ემზარ',
          'ეშხა',
          'ვალენტინა',
          'ვალერი',
          'ვანო',
          'ვაჟა',
          'ვაჟა',
          'ვარდო',
          'ვარსკვლავისა',
          'ვასიკო',
          'ვასილ',
          'ვატო',
          'ვახო',
          'ვახტანგ',
          'ვენერა',
          'ვერა',
          'ვერიკო',
          'ზაზა',
          'ზაირა',
          'ზაურ',
          'ზეზვა',
          'ზვიად',
          'ზინა',
          'ზოია',
          'ზუკა',
          'ზურა',
          'ზურაბ',
          'ზურია',
          'ზურიკო',
          'თაზო',
          'თათა',
          'თათია',
          'თათული',
          'თაია',
          'თაკო',
          'თალიკო',
          'თამაზ',
          'თამარ',
          'თამარა',
          'თამთა',
          'თამთიკე',
          'თამი',
          'თამილა',
          'თამრიკო',
          'თამრო',
          'თამუნა',
          'თამჩო',
          'თანანა',
          'თანდილა',
          'თაყა',
          'თეა',
          'თებრონე',
          'თეიმურაზ',
          'თემურ',
          'თენგიზ',
          'თენგო',
          'თეონა',
          'თიკა',
          'თიკო',
          'თიკუნა',
          'თინა',
          'თინათინ',
          'თინიკო',
          'თმაგიშერა',
          'თორნიკე',
          'თუთა',
          'თუთია',
          'ია',
          'იათამზე',
          'იამზე',
          'ივანე',
          'ივერი',
          'ივქირიონ',
          'იზოლდა',
          'ილია',
          'ილიკო',
          'იმედა',
          'ინგა',
          'იოსებ',
          'ირაკლი',
          'ირინა',
          'ირინე',
          'ირინკა',
          'ირმა',
          'იური',
          'კაკო',
          'კალე',
          'კატო',
          'კახა',
          'კახაბერ',
          'კეკელა',
          'კესანე',
          'კესო',
          'კვირია',
          'კიტა',
          'კობა',
          'კოკა',
          'კონსტანტინე',
          'კოსტა',
          'კოტე',
          'კუკური',
          'ლადო',
          'ლალი',
          'ლამაზა',
          'ლამარა',
          'ლამზირა',
          'ლაშა',
          'ლევან',
          'ლეილა',
          'ლელა',
          'ლენა',
          'ლერწამისა',
          'ლექსო',
          'ლია',
          'ლიანა',
          'ლიზა',
          'ლიზიკო',
          'ლილე',
          'ლილი',
          'ლილიკო',
          'ლომია',
          'ლუიზა',
          'მაგული',
          'მადონა',
          'მათიკო',
          'მაია',
          'მაიკო',
          'მაისა',
          'მაკა',
          'მაკო',
          'მაკუნა',
          'მალხაზ',
          'მამამზე',
          'მამია',
          'მამისა',
          'მამისთვალი',
          'მამისიმედი',
          'მამუკა',
          'მამულა',
          'მანანა',
          'მანჩო',
          'მარადი',
          'მარი',
          'მარია',
          'მარიამი',
          'მარიკა',
          'მარინა',
          'მარინე',
          'მარიტა',
          'მაყვალა',
          'მაყვალა',
          'მაშიკო',
          'მაშო',
          'მაცაცო',
          'მგელია',
          'მგელიკა',
          'მედეა',
          'მეკაშო',
          'მელანო',
          'მერაბ',
          'მერი',
          'მეტია',
          'მზაღო',
          'მზევინარ',
          'მზეთამზე',
          'მზეთვალა',
          'მზეონა',
          'მზექალა',
          'მზეხა',
          'მზეხათუნი',
          'მზია',
          'მზირა',
          'მზისადარ',
          'მზისთანადარი',
          'მზიულა',
          'მთვარისა',
          'მინდია',
          'მიშა',
          'მიშიკო',
          'მიხეილ',
          'მნათობი',
          'მნათობისა',
          'მოგელი',
          'მონავარდისა',
          'მურმან',
          'მუხრან',
          'ნაზი',
          'ნაზიკო',
          'ნათელა',
          'ნათია',
          'ნაირა',
          'ნანა',
          'ნანი',
          'ნანიკო',
          'ნანუკა',
          'ნანული',
          'ნარგიზი',
          'ნასყიდა',
          'ნატალია',
          'ნატო',
          'ნელი',
          'ნენე',
          'ნესტან',
          'ნია',
          'ნიაკო',
          'ნიკა',
          'ნიკოლოზ',
          'ნინა',
          'ნინაკა',
          'ნინი',
          'ნინიკო',
          'ნინო',
          'ნინუკა',
          'ნინუცა',
          'ნოდარ',
          'ნოდო',
          'ნონა',
          'ნორა',
          'ნუგზარ',
          'ნუგო',
          'ნუკა',
          'ნუკი',
          'ნუკრი',
          'ნუნუ',
          'ნუნუ',
          'ნუნუკა',
          'ნუცა',
          'ნუცი',
          'ოთარ',
          'ოთია',
          'ოთო',
          'ომარ',
          'ორბელ',
          'ოტია',
          'ოქროპირ',
          'პაატა',
          'პაპუნა',
          'პატარკაცი',
          'პატარქალი',
          'პეპელა',
          'პირვარდისა',
          'პირიმზე',
          'ჟამიერა',
          'ჟამიტა',
          'ჟამუტა',
          'ჟუჟუნა',
          'რამაზ',
          'რევაზ',
          'რეზი',
          'რეზო',
          'როზა',
          'რომან',
          'რუსკა',
          'რუსუდან',
          'საბა',
          'სალი',
          'სალომე',
          'სანათა',
          'სანდრო',
          'სერგო',
          'სესია',
          'სეხნია',
          'სვეტლანა',
          'სიხარულა',
          'სოსო',
          'სოფიკო',
          'სოფიო',
          'სოფო',
          'სულა',
          'სულიკო',
          'ტარიელ',
          'ტასიკო',
          'ტასო',
          'ტატიანა',
          'ტატო',
          'ტეტია',
          'ტურია',
          'უმანკო',
          'უტა',
          'უჩა',
          'ფაქიზო',
          'ფაცია',
          'ფეფელა',
          'ფეფენა',
          'ფეფიკო',
          'ფეფო',
          'ფოსო',
          'ფოფო',
          'ქაბატო',
          'ქავთარი',
          'ქალია',
          'ქართლოს',
          'ქეთათო',
          'ქეთევან',
          'ქეთი',
          'ქეთინო',
          'ქეთო',
          'ქველი',
          'ქიტესა',
          'ქიშვარდი',
          'ქობული',
          'ქრისტესია',
          'ქტისტეფორე',
          'ქურციკა',
          'ღარიბა',
          'ღვთისავარი',
          'ღვთისია',
          'ღვთისო',
          'ღვინია',
          'ღუღუნა',
          'ყაითამზა',
          'ყაყიტა',
          'ყვარყვარე',
          'ყიასა',
          'შაბური',
          'შაკო',
          'შალვა',
          'შალიკო',
          'შანშე',
          'შარია',
          'შაქარა',
          'შაქრო',
          'შოთა',
          'შორენა',
          'შოშია',
          'შუქია',
          'ჩიორა',
          'ჩიტო',
          'ჩიტო',
          'ჩოყოლა',
          'ცაგო',
          'ცაგული',
          'ცანგალა',
          'ცარო',
          'ცაცა',
          'ცაცო',
          'ციალა',
          'ციკო',
          'ცინარა',
          'ცირა',
          'ცისანა',
          'ცისია',
          'ცისკარა',
          'ცისკარი',
          'ცისმარა',
          'ცისმარი',
          'ციური',
          'ციცი',
          'ციცია',
          'ციცინო',
          'ცოტნე',
          'ცოქალა',
          'ცუცა',
          'ცხვარი',
          'ძაბული',
          'ძამისა',
          'ძაღინა',
          'ძიძია',
          'წათე',
          'წყალობა',
          'ჭაბუკა',
          'ჭიაბერ',
          'ჭიკჭიკა',
          'ჭიჭია',
          'ჭიჭიკო',
          'ჭოლა',
          'ხათუნა',
          'ხარება',
          'ხატია',
          'ხახულა',
          'ხახუტა',
          'ხეჩუა',
          'ხვიჩა',
          'ხიზანა',
          'ხირხელა',
          'ხობელასი',
          'ხოხია',
          'ხოხიტა',
          'ხუტა',
          'ხუცია',
          'ჯაბა',
          'ჯავახი',
          'ჯარჯი',
          'ჯემალ',
          'ჯონდო',
          'ჯოტო',
          'ჯუბი',
          'ჯულიეტა',
          'ჯუმბერ',
          'ჰამლეტ',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ge/name/last_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          'აბაზაძე',
          'აბაშიძე',
          'აბრამაშვილი',
          'აბუსერიძე',
          'აბშილავა',
          'ავაზნელი',
          'ავალიშვილი',
          'ამილახვარი',
          'ანთაძე',
          'ასლამაზიშვილი',
          'ასპანიძე',
          'აშკარელი',
          'ახალბედაშვილი',
          'ახალკაცი',
          'ახვლედიანი',
          'ბარათაშვილი',
          'ბარდაველიძე',
          'ბახტაძე',
          'ბედიანიძე',
          'ბერიძე',
          'ბერუაშვილი',
          'ბეჟანიშვილი',
          'ბოგველიშვილი',
          'ბოტკოველი',
          'გაბრიჩიძე',
          'გაგნიძე',
          'გამრეკელი',
          'გელაშვილი',
          'გზირიშვილი',
          'გიგაური',
          'გურამიშვილი',
          'გურგენიძე',
          'დადიანი',
          'დავითიშვილი',
          'დათუაშვილი',
          'დარბაისელი',
          'დეკანოიძე',
          'დვალი',
          'დოლაბერიძე',
          'ედიშერაშვილი',
          'ელიზბარაშვილი',
          'ელიოზაშვილი',
          'ერისთავი',
          'ვარამაშვილი',
          'ვარდიაშვილი',
          'ვაჩნაძე',
          'ვარდანიძე',
          'ველიაშვილი',
          'ველიჯანაშვილი',
          'ზარანდია',
          'ზარიძე',
          'ზედგინიძე',
          'ზუბიაშვილი',
          'თაბაგარი',
          'თავდგირიძე',
          'თათარაშვილი',
          'თამაზაშვილი',
          'თამარაშვილი',
          'თაქთაქიშვილი',
          'თაყაიშვილი',
          'თბილელი',
          'თუხარელი',
          'იაშვილი',
          'იგითხანიშვილი',
          'ინასარიძე',
          'იშხნელი',
          'კანდელაკი',
          'კაცია',
          'კერესელიძე',
          'კვირიკაშვილი',
          'კიკნაძე',
          'კლდიაშვილი',
          'კოვზაძე',
          'კოპაძე',
          'კოპტონაშვილი',
          'კოშკელაშვილი',
          'ლაბაძე',
          'ლეკიშვილი',
          'ლიქოკელი',
          'ლოლაძე',
          'ლურსმანაშვილი',
          'მაისურაძე',
          'მარტოლეკი',
          'მაღალაძე',
          'მახარაშვილი',
          'მგალობლიშვილი',
          'მეგრელიშვილი',
          'მელაშვილი',
          'მელიქიძე',
          'მერაბიშვილი',
          'მეფარიშვილი',
          'მუჯირი',
          'მჭედლიძე',
          'მხეიძე',
          'ნათაძე',
          'ნაჭყებია',
          'ნოზაძე',
          'ოდიშვილი',
          'ონოფრიშვილი',
          'პარეხელაშვილი',
          'პეტრიაშვილი',
          'სააკაძე',
          'სააკაშვილი',
          'საგინაშვილი',
          'სადუნიშვილი',
          'საძაგლიშვილი',
          'სებისკვერიძე',
          'სეთური',
          'სუთიაშვილი',
          'სულაშვილი',
          'ტაბაღუა',
          'ტყეშელაშვილი',
          'ულუმბელაშვილი',
          'უნდილაძე',
          'ქავთარაძე',
          'ქართველიშვილი',
          'ყაზბეგი',
          'ყაუხჩიშვილი',
          'შავლაშვილი',
          'შალიკაშვილი',
          'შონია',
          'ჩიბუხაშვილი',
          'ჩიხრაძე',
          'ჩიქოვანი',
          'ჩუბინიძე',
          'ჩოლოყაშვილი',
          'ჩოხელი',
          'ჩხვიმიანი',
          'ცალუღელაშვილი',
          'ცაძიკიძე',
          'ციციშვილი',
          'ციხელაშვილი',
          'ციხისთავი',
          'ცხოვრებაძე',
          'ცხომარია',
          'წამალაიძე',
          'წერეთელი',
          'წიკლაური',
          'წიფურია',
          'ჭაბუკაშვილი',
          'ჭავჭავაძე',
          'ჭანტურია',
          'ჭარელიძე',
          'ჭიორელი',
          'ჭუმბურიძე',
          'ხაბაზი',
          'ხარაძე',
          'ხარატიშვილი',
          'ხარატასშვილი',
          'ხარისჭირაშვილი',
          'ხარხელაური',
          'ხაშმელაშვილი',
          'ხეთაგური',
          'ხიზამბარელი',
          'ხიზანიშვილი',
          'ხიმშიაშვილი',
          'ხოსრუაშვილი',
          'ხოჯივანიშვილი',
          'ხუციშვილი',
          'ჯაბადარი',
          'ჯავახი',
          'ჯავახიშვილი',
          'ჯანელიძე',
          'ჯაფარიძე',
          'ჯაყელი',
          'ჯაჯანიძე',
          'ჯვარელია',
          'ჯინიუზაშვილი',
          'ჯუღაშვილი',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ge/name/prefix.js': [
      function(require, module, exports) {
        module['exports'] = ['ბ-ნი', 'ბატონი', 'ქ-ნი', 'ქალბატონი']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ge/name/title.js': [
      function(require, module, exports) {
        module['exports'] = {
          descriptor: [
            'გენერალური',
            'მთავარი',
            'სტაჟიორ',
            'უმცროსი',
            'ყოფილი',
            'წამყვანი',
          ],
          level: [
            'აღრიცხვების',
            'ბრენდინგის',
            'ბრენიდს',
            'ბუღალტერიის',
            'განყოფილების',
            'გაყიდვების',
            'გუნდის',
            'დახმარების',
            'დიზაინის',
            'თავდაცვის',
            'ინფორმაციის',
            'კვლევების',
            'კომუნიკაციების',
            'მარკეტინგის',
            'ოპერაციათა',
            'ოპტიმიზაციების',
            'პიარ',
            'პროგრამის',
            'საქმეთა',
            'ტაქტიკური',
            'უსაფრთხოების',
            'ფინანსთა',
            'ქსელის',
            'ხარისხის',
            'ჯგუფის',
          ],
          job: [
            'აგენტი',
            'ადვოკატი',
            'ადმინისტრატორი',
            'არქიტექტორი',
            'ასისტენტი',
            'აღმასრულებელი დირექტორი',
            'დეველოპერი',
            'დეკანი',
            'დიზაინერი',
            'დირექტორი',
            'ელექტრიკოსი',
            'ექსპერტი',
            'ინჟინერი',
            'იურისტი',
            'კონსტრუქტორი',
            'კონსულტანტი',
            'კოორდინატორი',
            'ლექტორი',
            'მასაჟისტი',
            'მემანქანე',
            'მენეჯერი',
            'მძღოლი',
            'მწვრთნელი',
            'ოპერატორი',
            'ოფიცერი',
            'პედაგოგი',
            'პოლიციელი',
            'პროგრამისტი',
            'პროდიუსერი',
            'პრორექტორი',
            'ჟურნალისტი',
            'რექტორი',
            'სპეციალისტი',
            'სტრატეგისტი',
            'ტექნიკოსი',
            'ფოტოგრაფი',
            'წარმომადგენელი',
          ],
        }
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ge/name/name.js': [
      function(require, module, exports) {
        module['exports'] = [
          '#{prefix} #{first_name} #{last_name}',
          '#{first_name} #{last_name}',
          '#{first_name} #{last_name}',
          '#{first_name} #{last_name}',
          '#{first_name} #{last_name}',
          '#{first_name} #{last_name}',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ge/name/index.js': [
      function(require, module, exports) {
        var name = {}
        module['exports'] = name
        name.first_name = require('./first_name')
        name.last_name = require('./last_name')
        name.prefix = require('./prefix')
        name.title = require('./title')
        name.name = require('./name')
      },
      {
        './first_name':
          '../node_modules/faker/lib/locales/ge/name/first_name.js',
        './last_name':
          '../node_modules/faker/lib/locales/ge/name/last_name.js',
        './prefix': '../node_modules/faker/lib/locales/ge/name/prefix.js',
        './title': '../node_modules/faker/lib/locales/ge/name/title.js',
        './name': '../node_modules/faker/lib/locales/ge/name/name.js',
      },
    ],
    '../node_modules/faker/lib/locales/ge/address/city_prefix.js': [
      function(require, module, exports) {
        module['exports'] = ['ახალი', 'ძველი', 'ზემო', 'ქვემო']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ge/address/city_suffix.js': [
      function(require, module, exports) {
        module['exports'] = ['სოფელი', 'ძირი', 'სკარი', 'დაბა']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ge/address/city.js': [
      function(require, module, exports) {
        module['exports'] = [
          '#{city_prefix} #{Name.first_name}#{city_suffix}',
          '#{city_prefix} #{Name.first_name}',
          '#{Name.first_name}#{city_suffix}',
          '#{Name.first_name}#{city_suffix}',
          '#{Name.last_name}#{city_suffix}',
          '#{Name.last_name}#{city_suffix}',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ge/address/country.js': [
      function(require, module, exports) {
        module['exports'] = [
          'ავსტრალია',
          'ავსტრია',
          'ავღანეთი',
          'აზავადი',
          'აზერბაიჯანი',
          'აზიაში',
          'აზიის',
          'ალბანეთი',
          'ალჟირი',
          'ამაღლება და ტრისტანი-და-კუნია',
          'ამერიკის ვირჯინიის კუნძულები',
          'ამერიკის სამოა',
          'ამერიკის შეერთებული შტატები',
          'ამერიკის',
          'ანგილია',
          'ანგოლა',
          'ანდორა',
          'ანტიგუა და ბარბუდა',
          'არაბეთის საემიროები',
          'არაბთა გაერთიანებული საამიროები',
          'არაბული ქვეყნების ლიგის',
          'არგენტინა',
          'არუბა',
          'არცნობილი ქვეყნების სია',
          'აფრიკაში',
          'აფრიკაშია',
          'აღდგომის კუნძული',
          'აღმ. ტიმორი',
          'აღმოსავლეთი აფრიკა',
          'აღმოსავლეთი ტიმორი',
          'აშშ',
          'აშშ-ის ვირჯინის კუნძულები',
          'ახალი ზელანდია',
          'ახალი კალედონია',
          'ბანგლადეში',
          'ბარბადოსი',
          'ბაჰამის კუნძულები',
          'ბაჰრეინი',
          'ბელარუსი',
          'ბელგია',
          'ბელიზი',
          'ბენინი',
          'ბერმუდა',
          'ბერმუდის კუნძულები',
          'ბოლივია',
          'ბოსნია და ჰერცეგოვინა',
          'ბოტსვანა',
          'ბრაზილია',
          'ბრიტანეთის ვირჯინიის კუნძულები',
          'ბრიტანეთის ვირჯინის კუნძულები',
          'ბრიტანეთის ინდოეთის ოკეანის ტერიტორია',
          'ბრუნეი',
          'ბულგარეთი',
          'ბურკინა ფასო',
          'ბურკინა-ფასო',
          'ბურუნდი',
          'ბჰუტანი',
          'გაბონი',
          'გაერთიანებული სამეფო',
          'გაეროს',
          'გაიანა',
          'გამბია',
          'განა',
          'გერმანია',
          'გვადელუპა',
          'გვატემალა',
          'გვინეა',
          'გვინეა-ბისაუ',
          'გიბრალტარი',
          'გრენადა',
          'გრენლანდია',
          'გუამი',
          'დამოკიდებული ტერ.',
          'დამოკიდებული ტერიტორია',
          'დამოკიდებული',
          'დანია',
          'დასავლეთი აფრიკა',
          'დასავლეთი საჰარა',
          'დიდი ბრიტანეთი',
          'დომინიკა',
          'დომინიკელთა რესპუბლიკა',
          'ეგვიპტე',
          'ევროკავშირის',
          'ევროპასთან',
          'ევროპაშია',
          'ევროპის ქვეყნები',
          'ეთიოპია',
          'ეკვადორი',
          'ეკვატორული გვინეა',
          'ეპარსეს კუნძული',
          'ერაყი',
          'ერიტრეა',
          'ესპანეთი',
          'ესპანეთის სუვერენული ტერიტორიები',
          'ესტონეთი',
          'ეშმორის და კარტიეს კუნძულები',
          'ვანუატუ',
          'ვატიკანი',
          'ვენესუელა',
          'ვიეტნამი',
          'ზამბია',
          'ზიმბაბვე',
          'თურქეთი',
          'თურქმენეთი',
          'იამაიკა',
          'იან მაიენი',
          'იაპონია',
          'იემენი',
          'ინდოეთი',
          'ინდონეზია',
          'იორდანია',
          'ირანი',
          'ირლანდია',
          'ისლანდია',
          'ისრაელი',
          'იტალია',
          'კაბო-ვერდე',
          'კაიმანის კუნძულები',
          'კამბოჯა',
          'კამერუნი',
          'კანადა',
          'კანარის კუნძულები',
          'კარიბის ზღვის',
          'კატარი',
          'კენია',
          'კვიპროსი',
          'კინგმენის რიფი',
          'კირიბატი',
          'კლიპერტონი',
          'კოლუმბია',
          'კომორი',
          'კომორის კუნძულები',
          'კონგოს დემოკრატიული რესპუბლიკა',
          'კონგოს რესპუბლიკა',
          'კორეის რესპუბლიკა',
          'კოსტა-რიკა',
          'კოტ-დ’ივუარი',
          'კუბა',
          'კუკის კუნძულები',
          'ლაოსი',
          'ლატვია',
          'ლესოთო',
          'ლიბანი',
          'ლიბერია',
          'ლიბია',
          'ლიტვა',
          'ლიხტენშტაინი',
          'ლუქსემბურგი',
          'მადაგასკარი',
          'მადეირა',
          'მავრიკი',
          'მავრიტანია',
          'მაიოტა',
          'მაკაო',
          'მაკედონია',
          'მალავი',
          'მალაიზია',
          'მალდივი',
          'მალდივის კუნძულები',
          'მალი',
          'მალტა',
          'მაროკო',
          'მარტინიკა',
          'მარშალის კუნძულები',
          'მარჯნის ზღვის კუნძულები',
          'მელილია',
          'მექსიკა',
          'მიანმარი',
          'მიკრონეზია',
          'მიკრონეზიის ფედერაციული შტატები',
          'მიმდებარე კუნძულები',
          'მოზამბიკი',
          'მოლდოვა',
          'მონაკო',
          'მონსერატი',
          'მონღოლეთი',
          'ნამიბია',
          'ნაურუ',
          'ნაწილობრივ აფრიკაში',
          'ნეპალი',
          'ნიგერი',
          'ნიგერია',
          'ნიდერლანდი',
          'ნიდერლანდის ანტილები',
          'ნიკარაგუა',
          'ნიუე',
          'ნორვეგია',
          'ნორფოლკის კუნძული',
          'ოკეანეთის',
          'ოკეანიას',
          'ომანი',
          'პაკისტანი',
          'პალაუ',
          'პალესტინა',
          'პალმირა (ატოლი)',
          'პანამა',
          'პანტელერია',
          'პაპუა-ახალი გვინეა',
          'პარაგვაი',
          'პერუ',
          'პიტკერნის კუნძულები',
          'პოლონეთი',
          'პორტუგალია',
          'პრინც-ედუარდის კუნძული',
          'პუერტო-რიკო',
          'რეუნიონი',
          'როტუმა',
          'რუანდა',
          'რუმინეთი',
          'რუსეთი',
          'საბერძნეთი',
          'სადავო ტერიტორიები',
          'სალვადორი',
          'სამოა',
          'სამხ. კორეა',
          'სამხრეთ ამერიკაშია',
          'სამხრეთ ამერიკის',
          'სამხრეთ აფრიკის რესპუბლიკა',
          'სამხრეთი აფრიკა',
          'სამხრეთი გეორგია და სამხრეთ სენდვიჩის კუნძულები',
          'სამხრეთი სუდანი',
          'სან-მარინო',
          'სან-ტომე და პრინსიპი',
          'საუდის არაბეთი',
          'საფრანგეთი',
          'საფრანგეთის გვიანა',
          'საფრანგეთის პოლინეზია',
          'საქართველო',
          'საჰარის არაბთა დემოკრატიული რესპუბლიკა',
          'სეიშელის კუნძულები',
          'სენ-ბართელმი',
          'სენ-მარტენი',
          'სენ-პიერი და მიკელონი',
          'სენეგალი',
          'სენტ-ვინსენტი და გრენადინები',
          'სენტ-კიტსი და ნევისი',
          'სენტ-ლუსია',
          'სერბეთი',
          'სეუტა',
          'სვაზილენდი',
          'სვალბარდი',
          'სიერა-ლეონე',
          'სინგაპური',
          'სირია',
          'სლოვაკეთი',
          'სლოვენია',
          'სოკოტრა',
          'სოლომონის კუნძულები',
          'სომალი',
          'სომალილენდი',
          'სომხეთი',
          'სუდანი',
          'სუვერენული სახელმწიფოები',
          'სურინამი',
          'ტაივანი',
          'ტაილანდი',
          'ტანზანია',
          'ტაჯიკეთი',
          'ტერიტორიები',
          'ტერქსისა და კაიკოსის კუნძულები',
          'ტოგო',
          'ტოკელაუ',
          'ტონგა',
          'ტრანსკონტინენტური ქვეყანა',
          'ტრინიდადი და ტობაგო',
          'ტუვალუ',
          'ტუნისი',
          'უგანდა',
          'უზბეკეთი',
          'უკრაინა',
          'უნგრეთი',
          'უოლისი და ფუტუნა',
          'ურუგვაი',
          'ფარერის კუნძულები',
          'ფილიპინები',
          'ფინეთი',
          'ფიჯი',
          'ფოლკლენდის კუნძულები',
          'ქვეყნები',
          'ქოქოსის კუნძულები',
          'ქუვეითი',
          'ღაზის სექტორი',
          'ყაზახეთი',
          'ყირგიზეთი',
          'შვედეთი',
          'შვეიცარია',
          'შობის კუნძული',
          'შრი-ლანკა',
          'ჩადი',
          'ჩერნოგორია',
          'ჩეჩნეთის რესპუბლიკა იჩქერია',
          'ჩეხეთი',
          'ჩილე',
          'ჩინეთი',
          'ჩრდ. კორეა',
          'ჩრდილოეთ ამერიკის',
          'ჩრდილოეთ მარიანას კუნძულები',
          'ჩრდილოეთი აფრიკა',
          'ჩრდილოეთი კორეა',
          'ჩრდილოეთი მარიანას კუნძულები',
          'ცენტრალური აფრიკა',
          'ცენტრალური აფრიკის რესპუბლიკა',
          'წევრები',
          'წმინდა ელენე',
          'წმინდა ელენეს კუნძული',
          'ხორვატია',
          'ჯერსი',
          'ჯიბუტი',
          'ჰავაი',
          'ჰაიტი',
          'ჰერდი და მაკდონალდის კუნძულები',
          'ჰონდურასი',
          'ჰონკონგი',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ge/address/building_number.js': [
      function(require, module, exports) {
        module['exports'] = ['###', '##', '#']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ge/address/street_suffix.js': [
      function(require, module, exports) {
        module['exports'] = [
          'გამზ.',
          'გამზირი',
          'ქ.',
          'ქუჩა',
          'ჩიხი',
          'ხეივანი',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ge/address/secondary_address.js': [
      function(require, module, exports) {
        module['exports'] = ['კორპ. ##', 'შენობა ###']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ge/address/postcode.js': [
      function(require, module, exports) {
        module['exports'] = ['01##']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ge/address/city_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          'აბასთუმანი',
          'აბაშა',
          'ადიგენი',
          'ამბროლაური',
          'ანაკლია',
          'ასპინძა',
          'ახალგორი',
          'ახალქალაქი',
          'ახალციხე',
          'ახმეტა',
          'ბათუმი',
          'ბაკურიანი',
          'ბაღდათი',
          'ბახმარო',
          'ბოლნისი',
          'ბორჯომი',
          'გარდაბანი',
          'გონიო',
          'გორი',
          'გრიგოლეთი',
          'გუდაური',
          'გურჯაანი',
          'დედოფლისწყარო',
          'დმანისი',
          'დუშეთი',
          'ვანი',
          'ზესტაფონი',
          'ზუგდიდი',
          'თბილისი',
          'თეთრიწყარო',
          'თელავი',
          'თერჯოლა',
          'თიანეთი',
          'კასპი',
          'კვარიათი',
          'კიკეთი',
          'კოჯორი',
          'ლაგოდეხი',
          'ლანჩხუთი',
          'ლენტეხი',
          'მარნეული',
          'მარტვილი',
          'მესტია',
          'მცხეთა',
          'მწვანე კონცხი',
          'ნინოწმინდა',
          'ოზურგეთი',
          'ონი',
          'რუსთავი',
          'საგარეჯო',
          'საგურამო',
          'საირმე',
          'სამტრედია',
          'სარფი',
          'საჩხერე',
          'სენაკი',
          'სიღნაღი',
          'სტეფანწმინდა',
          'სურამი',
          'ტაბახმელა',
          'ტყიბული',
          'ურეკი',
          'ფოთი',
          'ქარელი',
          'ქედა',
          'ქობულეთი',
          'ქუთაისი',
          'ყვარელი',
          'შუახევი',
          'ჩაქვი',
          'ჩოხატაური',
          'ცაგერი',
          'ცხოროჭყუ',
          'წავკისი',
          'წალენჯიხა',
          'წალკა',
          'წაღვერი',
          'წეროვანი',
          'წნორი',
          'წყალტუბო',
          'წყნეთი',
          'ჭიათურა',
          'ხარაგაული',
          'ხაშური',
          'ხელვაჩაური',
          'ხობი',
          'ხონი',
          'ხულო',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ge/address/street_title.js': [
      function(require, module, exports) {
        module['exports'] = [
          'აბაშიძის',
          'აბესაძის',
          'აბულაძის',
          'აგლაძის',
          'ადლერის',
          'ავიაქიმიის',
          'ავლაბრის',
          'ათარბეგოვის',
          'ათონელის',
          'ალავერდოვის',
          'ალექსიძის',
          'ალილუევის',
          'ალმასიანის',
          'ამაღლების',
          'ამირეჯიბის',
          'ანაგის',
          'ანდრონიკაშვილის',
          'ანთელავას',
          'ანჯაფარიძის',
          'არაგვის',
          'არდონის',
          'არეშიძის',
          'ასათიანის',
          'ასკურავას',
          'ასლანიდის',
          'ატენის',
          'აფხაზი',
          'აღმაშენებლის',
          'ახალშენის',
          'ახვლედიანის',
          'ბააზოვის',
          'ბაბისხევის',
          'ბაბუშკინის',
          'ბაგრატიონის',
          'ბალანჩივაძეების',
          'ბალანჩივაძის',
          'ბალანჩინის',
          'ბალმაშევის',
          'ბარამიძის',
          'ბარნოვის',
          'ბაშალეიშვილის',
          'ბევრეთის',
          'ბელინსკის',
          'ბელოსტოკის',
          'ბენაშვილის',
          'ბეჟანიშვილის',
          'ბერიძის',
          'ბოლქვაძის',
          'ბოცვაძის',
          'ბოჭორიშვილის',
          'ბოჭორიძის',
          'ბუაჩიძის',
          'ბუდაპეშტის',
          'ბურკიაშვილის',
          'ბურძგლას',
          'გაბესკირიას',
          'გაგარინის',
          'გაზაფხულის',
          'გამრეკელის',
          'გამსახურდიას',
          'გარეჯელის',
          'გეგეჭკორის',
          'გედაურის',
          'გელოვანი',
          'გელოვანის',
          'გერცენის',
          'გლდანის',
          'გოგებაშვილის',
          'გოგიბერიძის',
          'გოგოლის',
          'გონაშვილის',
          'გორგასლის',
          'გრანელის',
          'გრიზოდუბოვას',
          'გრინევიცკის',
          'გრომოვას',
          'გრუზინსკის',
          'გუდიაშვილის',
          'გულრიფშის',
          'გულუას',
          'გურამიშვილის',
          'გურგენიძის',
          'დადიანის',
          'დავითაშვილის',
          'დამაკავშირებელი',
          'დარიალის',
          'დედოფლისწყაროს',
          'დეპუტატის',
          'დიდგორის',
          'დიდი',
          'დიდუბის',
          'დიუმას',
          'დიღმის',
          'დიღომში',
          'დოლიძის',
          'დუნდუას',
          'დურმიშიძის',
          'ელიავას',
          'ენგელსის',
          'ენგურის',
          'ეპისკოპოსის',
          'ერისთავი',
          'ერისთავის',
          'ვაზისუბნის',
          'ვაკელის',
          'ვართაგავას',
          'ვატუტინის',
          'ვაჩნაძის',
          'ვაცეკის',
          'ვეკუას',
          'ვეშაპურის',
          'ვირსალაძის',
          'ვოლოდარსკის',
          'ვორონინის',
          'ზაარბრიუკენის',
          'ზაზიაშვილის',
          'ზაზიშვილის',
          'ზაკომოლდინის',
          'ზანდუკელის',
          'ზაქარაიას',
          'ზაქარიაძის',
          'ზახაროვის',
          'ზაჰესის',
          'ზნაურის',
          'ზურაბაშვილის',
          'ზღვის',
          'თაბუკაშვილის',
          'თავაძის',
          'თავისუფლების',
          'თამარაშვილის',
          'თაქთაქიშვილის',
          'თბილელის',
          'თელიას',
          'თორაძის',
          'თოფურიძის',
          'იალბუზის',
          'იამანიძის',
          'იაშვილის',
          'იბერიის',
          'იერუსალიმის',
          'ივანიძის',
          'ივერიელის',
          'იზაშვილის',
          'ილურიძის',
          'იმედაშვილის',
          'იმედაძის',
          'იმედის',
          'ინანიშვილის',
          'ინგოროყვას',
          'ინდუსტრიალიზაციის',
          'ინჟინრის',
          'ინწკირველის',
          'ირბახის',
          'ირემაშვილის',
          'ისაკაძის',
          'ისპასჰანლის',
          'იტალიის',
          'იუნკერთა',
          'კათალიკოსის',
          'კაიროს',
          'კაკაბაძის',
          'კაკაბეთის',
          'კაკლიანის',
          'კალანდაძის',
          'კალიაევის',
          'კალინინის',
          'კამალოვის',
          'კამოს',
          'კაშენის',
          'კახოვკის',
          'კედიას',
          'კელაპტრიშვილის',
          'კერესელიძის',
          'კეცხოველის',
          'კიბალჩიჩის',
          'კიკნაძის',
          'კიროვის',
          'კობარეთის',
          'კოლექტივიზაციის',
          'კოლმეურნეობის',
          'კოლხეთის',
          'კომკავშირის',
          'კომუნისტური',
          'კონსტიტუციის',
          'კოოპერაციის',
          'კოსტავას',
          'კოტეტიშვილის',
          'კოჩეტკოვის',
          'კოჯრის',
          'კრონშტადტის',
          'კროპოტკინის',
          'კრუპსკაიას',
          'კუიბიშევის',
          'კურნატოვსკის',
          'კურტანოვსკის',
          'კუტუზოვის',
          'ლაღიძის',
          'ლელაშვილის',
          'ლენინაშენის',
          'ლენინგრადის',
          'ლენინის',
          'ლენის',
          'ლეონიძის',
          'ლვოვის',
          'ლორთქიფანიძის',
          'ლოტკინის',
          'ლუბლიანის',
          'ლუბოვსკის',
          'ლუნაჩარსკის',
          'ლუქსემბურგის',
          'მაგნიტოგორსკის',
          'მაზნიაშვილის',
          'მაისურაძის',
          'მამარდაშვილის',
          'მამაცაშვილის',
          'მანაგაძის',
          'მანჯგალაძის',
          'მარის',
          'მარუაშვილის',
          'მარქსის',
          'მარჯანის',
          'მატროსოვის',
          'მაჭავარიანი',
          'მახალდიანის',
          'მახარაძის',
          'მებაღიშვილის',
          'მეგობრობის',
          'მელაანის',
          'მერკვილაძის',
          'მესხიას',
          'მესხის',
          'მეტეხის',
          'მეტრეველი',
          'მეჩნიკოვის',
          'მთავარანგელოზის',
          'მიასნიკოვის',
          'მილორავას',
          'მიმინოშვილის',
          'მიროტაძის',
          'მიქატაძის',
          'მიქელაძის',
          'მონტინის',
          'მორეტის',
          'მოსკოვის',
          'მრევლიშვილის',
          'მუშკორის',
          'მუჯირიშვილის',
          'მშვიდობის',
          'მცხეთის',
          'ნადირაძის',
          'ნაკაშიძის',
          'ნარიმანოვის',
          'ნასიძის',
          'ნაფარეულის',
          'ნეკრასოვის',
          'ნიაღვრის',
          'ნინიძის',
          'ნიშნიანიძის',
          'ობოლაძის',
          'ონიანის',
          'ოჟიოს',
          'ორახელაშვილის',
          'ორბელიანის',
          'ორჯონიკიძის',
          'ოქტომბრის',
          'ოცდაექვსი',
          'პავლოვის',
          'პარალელურის',
          'პარიზის',
          'პეკინის',
          'პეროვსკაიას',
          'პეტეფის',
          'პიონერის',
          'პირველი',
          'პისარევის',
          'პლეხანოვის',
          'პრავდის',
          'პროლეტარიატის',
          'ჟელიაბოვის',
          'ჟვანიას',
          'ჟორდანიას',
          'ჟღენტი',
          'ჟღენტის',
          'რადიანის',
          'რამიშვილი',
          'რასკოვას',
          'რენინგერის',
          'რინგის',
          'რიჟინაშვილის',
          'რობაქიძის',
          'რობესპიერის',
          'რუსის',
          'რუხაძის',
          'რჩეულიშვილის',
          'სააკაძის',
          'საბადურის',
          'საბაშვილის',
          'საბურთალოს',
          'საბჭოს',
          'საგურამოს',
          'სამრეკლოს',
          'სამღერეთის',
          'სანაკოევის',
          'სარაჯიშვილის',
          'საჯაიას',
          'სევასტოპოლის',
          'სერგი',
          'სვანიძის',
          'სვერდლოვის',
          'სტახანოვის',
          'სულთნიშნის',
          'სურგულაძის',
          'სხირტლაძის',
          'ტაბიძის',
          'ტატიშვილის',
          'ტელმანის',
          'ტერევერკოს',
          'ტეტელაშვილის',
          'ტოვსტონოგოვის',
          'ტოროშელიძის',
          'ტრაქტორის',
          'ტრიკოტაჟის',
          'ტურბინის',
          'უბილავას',
          'უბინაშვილის',
          'უზნაძის',
          'უკლებას',
          'ულიანოვის',
          'ურიდიას',
          'ფაბრიციუსის',
          'ფაღავას',
          'ფერისცვალების',
          'ფიგნერის',
          'ფიზკულტურის',
          'ფიოლეტოვის',
          'ფიფიების',
          'ფოცხიშვილის',
          'ქართველიშვილის',
          'ქართლელიშვილის',
          'ქინქლაძის',
          'ქიქოძის',
          'ქსოვრელის',
          'ქუთათელაძის',
          'ქუთათელის',
          'ქურდიანის',
          'ღოღობერიძის',
          'ღუდუშაურის',
          'ყავლაშვილის',
          'ყაზბეგის',
          'ყარყარაშვილის',
          'ყიფიანის',
          'ყუშიტაშვილის',
          'შანიძის',
          'შარტავას',
          'შატილოვის',
          'შაუმიანის',
          'შენგელაიას',
          'შერვაშიძის',
          'შეროზიას',
          'შირშოვის',
          'შმიდტის',
          'შრომის',
          'შუშინის',
          'შჩორსის',
          'ჩალაუბნის',
          'ჩანტლაძის',
          'ჩაპაევის',
          'ჩაჩავას',
          'ჩელუსკინელების',
          'ჩერნიახოვსკის',
          'ჩერქეზიშვილი',
          'ჩერქეზიშვილის',
          'ჩვიდმეტი',
          'ჩიტაიას',
          'ჩიტაძის',
          'ჩიქვანაიას',
          'ჩიქობავას',
          'ჩიხლაძის',
          'ჩოდრიშვილის',
          'ჩოლოყაშვილის',
          'ჩუღურეთის',
          'ცაბაძის',
          'ცაგარელის',
          'ცეტკინის',
          'ცინცაძის',
          'ცისკარიშვილის',
          'ცურტაველის',
          'ცქიტიშვილის',
          'ცხაკაიას',
          'ძმობის',
          'ძნელაძის',
          'წერეთლის',
          'წითელი',
          'წითელწყაროს',
          'წინამძღვრიშვილის',
          'წულაძის',
          'წულუკიძის',
          'ჭაბუკიანის',
          'ჭავჭავაძის',
          'ჭანტურიას',
          'ჭოველიძის',
          'ჭონქაძის',
          'ჭყონდიდელის',
          'ხანძთელის',
          'ხვამლის',
          'ხვინგიას',
          'ხვიჩიას',
          'ხიმშიაშვილის',
          'ხმელნიცკის',
          'ხორნაბუჯის',
          'ხრამჰესის',
          'ხუციშვილის',
          'ჯავახიშვილის',
          'ჯაფარიძის',
          'ჯიბლაძის',
          'ჯორჯიაშვილის',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ge/address/street_name.js': [
      function(require, module, exports) {
        module['exports'] = ['#{street_title} #{street_suffix}']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ge/address/street_address.js': [
      function(require, module, exports) {
        module['exports'] = ['#{street_name} #{building_number}']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ge/address/default_country.js': [
      function(require, module, exports) {
        module['exports'] = ['საქართველო']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ge/address/index.js': [
      function(require, module, exports) {
        var address = {}
        module['exports'] = address
        address.city_prefix = require('./city_prefix')
        address.city_suffix = require('./city_suffix')
        address.city = require('./city')
        address.country = require('./country')
        address.building_number = require('./building_number')
        address.street_suffix = require('./street_suffix')
        address.secondary_address = require('./secondary_address')
        address.postcode = require('./postcode')
        address.city_name = require('./city_name')
        address.street_title = require('./street_title')
        address.street_name = require('./street_name')
        address.street_address = require('./street_address')
        address.default_country = require('./default_country')
      },
      {
        './city_prefix':
          '../node_modules/faker/lib/locales/ge/address/city_prefix.js',
        './city_suffix':
          '../node_modules/faker/lib/locales/ge/address/city_suffix.js',
        './city': '../node_modules/faker/lib/locales/ge/address/city.js',
        './country':
          '../node_modules/faker/lib/locales/ge/address/country.js',
        './building_number':
          '../node_modules/faker/lib/locales/ge/address/building_number.js',
        './street_suffix':
          '../node_modules/faker/lib/locales/ge/address/street_suffix.js',
        './secondary_address':
          '../node_modules/faker/lib/locales/ge/address/secondary_address.js',
        './postcode':
          '../node_modules/faker/lib/locales/ge/address/postcode.js',
        './city_name':
          '../node_modules/faker/lib/locales/ge/address/city_name.js',
        './street_title':
          '../node_modules/faker/lib/locales/ge/address/street_title.js',
        './street_name':
          '../node_modules/faker/lib/locales/ge/address/street_name.js',
        './street_address':
          '../node_modules/faker/lib/locales/ge/address/street_address.js',
        './default_country':
          '../node_modules/faker/lib/locales/ge/address/default_country.js',
      },
    ],
    '../node_modules/faker/lib/locales/ge/internet/free_email.js': [
      function(require, module, exports) {
        module['exports'] = ['gmail.com', 'yahoo.com', 'posta.ge']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ge/internet/domain_suffix.js': [
      function(require, module, exports) {
        module['exports'] = ['ge', 'com', 'net', 'org', 'com.ge', 'org.ge']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ge/internet/index.js': [
      function(require, module, exports) {
        var internet = {}
        module['exports'] = internet
        internet.free_email = require('./free_email')
        internet.domain_suffix = require('./domain_suffix')
      },
      {
        './free_email':
          '../node_modules/faker/lib/locales/ge/internet/free_email.js',
        './domain_suffix':
          '../node_modules/faker/lib/locales/ge/internet/domain_suffix.js',
      },
    ],
    '../node_modules/faker/lib/locales/ge/company/prefix.js': [
      function(require, module, exports) {
        module['exports'] = ['შპს', 'სს', 'ააიპ', 'სსიპ']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ge/company/suffix.js': [
      function(require, module, exports) {
        module['exports'] = ['ჯგუფი', 'და კომპანია', 'სტუდია', 'გრუპი']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ge/company/name.js': [
      function(require, module, exports) {
        module['exports'] = [
          '#{prefix} #{Name.first_name}',
          '#{prefix} #{Name.last_name}',
          '#{prefix} #{Name.last_name} #{suffix}',
          '#{prefix} #{Name.first_name} #{suffix}',
          '#{prefix} #{Name.last_name}-#{Name.last_name}',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ge/company/index.js': [
      function(require, module, exports) {
        var company = {}
        module['exports'] = company
        company.prefix = require('./prefix')
        company.suffix = require('./suffix')
        company.name = require('./name')
      },
      {
        './prefix':
          '../node_modules/faker/lib/locales/ge/company/prefix.js',
        './suffix':
          '../node_modules/faker/lib/locales/ge/company/suffix.js',
        './name': '../node_modules/faker/lib/locales/ge/company/name.js',
      },
    ],
    '../node_modules/faker/lib/locales/ge/phone_number/formats.js': [
      function(require, module, exports) {
        module['exports'] = [
          '5##-###-###',
          '5########',
          '5## ## ## ##',
          '5## ######',
          '5## ### ###',
          '995 5##-###-###',
          '995 5########',
          '995 5## ## ## ##',
          '995 5## ######',
          '995 5## ### ###',
          '+995 5##-###-###',
          '+995 5########',
          '+995 5## ## ## ##',
          '+995 5## ######',
          '+995 5## ### ###',
          '(+995) 5##-###-###',
          '(+995) 5########',
          '(+995) 5## ## ## ##',
          '(+995) 5## ######',
          '(+995) 5## ### ###',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ge/phone_number/index.js': [
      function(require, module, exports) {
        var phone_number = {}
        module['exports'] = phone_number
        phone_number.formats = require('./formats')
      },
      {
        './formats':
          '../node_modules/faker/lib/locales/ge/phone_number/formats.js',
      },
    ],
    '../node_modules/faker/lib/locales/ge/cell_phone/formats.js': [
      function(require, module, exports) {
        module['exports'] = [
          '(+995 32) 2-##-##-##',
          '032-2-##-##-##',
          '032-2-######',
          '032-2-###-###',
          '032 2 ## ## ##',
          '032 2 ######',
          '2 ## ## ##',
          '2######',
          '2 ### ###',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ge/cell_phone/index.js': [
      function(require, module, exports) {
        var cell_phone = {}
        module['exports'] = cell_phone
        cell_phone.formats = require('./formats')
      },
      {
        './formats':
          '../node_modules/faker/lib/locales/ge/cell_phone/formats.js',
      },
    ],
    '../node_modules/faker/lib/locales/ge/index.js': [
      function(require, module, exports) {
        var ge = {}
        module['exports'] = ge
        ge.title = 'Georgian'
        ge.separator = ' და '
        ge.name = require('./name')
        ge.address = require('./address')
        ge.internet = require('./internet')
        ge.company = require('./company')
        ge.phone_number = require('./phone_number')
        ge.cell_phone = require('./cell_phone')
      },
      {
        './name': '../node_modules/faker/lib/locales/ge/name/index.js',
        './address':
          '../node_modules/faker/lib/locales/ge/address/index.js',
        './internet':
          '../node_modules/faker/lib/locales/ge/internet/index.js',
        './company':
          '../node_modules/faker/lib/locales/ge/company/index.js',
        './phone_number':
          '../node_modules/faker/lib/locales/ge/phone_number/index.js',
        './cell_phone':
          '../node_modules/faker/lib/locales/ge/cell_phone/index.js',
      },
    ],
    '../node_modules/faker/lib/locales/id_ID/address/building_number.js': [
      function(require, module, exports) {
        module['exports'] = ['##', '#']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/id_ID/address/postcode.js': [
      function(require, module, exports) {
        module['exports'] = ['#####']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/id_ID/address/state.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Aceh',
          'Sumatera Utara',
          'Sumatera Barat',
          'Jambi',
          'Bangka Belitung',
          'Riau',
          'Kepulauan Riau',
          'Bengkulu',
          'Sumatera Selatan',
          'Lampung',
          'Banten',
          'DKI Jakarta',
          'Jawa Barat',
          'Jawa Tengah',
          'Jawa Timur',
          'Nusa Tenggara Timur',
          'DI Yogyakarta',
          'Bali',
          'Nusa Tenggara Barat',
          'Kalimantan Barat',
          'Kalimantan Tengah',
          'Kalimantan Selatan',
          'Kalimantan Timur',
          'Kalimantan Utara',
          'Sulawesi Selatan',
          'Sulawesi Utara',
          'Gorontalo',
          'Sulawesi Tengah',
          'Sulawesi Barat',
          'Sulawesi Tenggara',
          'Maluku',
          'Maluku Utara',
          'Papua Barat',
          'Papua',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/id_ID/address/city_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Airmadidi',
          'Ampana',
          'Amurang',
          'Andolo',
          'Banggai',
          'Bantaeng',
          'Barru',
          'Bau-Bau',
          'Benteng',
          'Bitung',
          'Bolaang Uki',
          'Boroko',
          'Bulukumba',
          'Bungku',
          'Buol',
          'Buranga',
          'Donggala',
          'Enrekang',
          'Gorontalo',
          'Jeneponto',
          'Kawangkoan',
          'Kendari',
          'Kolaka',
          'Kotamobagu',
          'Kota Raha',
          'Kwandang',
          'Lasusua',
          'Luwuk',
          'Majene',
          'Makale',
          'Makassar',
          'Malili',
          'Mamasa',
          'Mamuju',
          'Manado',
          'Marisa',
          'Maros',
          'Masamba',
          'Melonguane',
          'Ondong Siau',
          'Palopo',
          'Palu',
          'Pangkajene',
          'Pare-Pare',
          'Parigi',
          'Pasangkayu',
          'Pinrang',
          'Polewali',
          'Poso',
          'Rantepao',
          'Ratahan',
          'Rumbia',
          'Sengkang',
          'Sidenreng',
          'Sigi Biromaru',
          'Sinjai',
          'Sunggu Minasa',
          'Suwawa',
          'Tahuna',
          'Takalar',
          'Tilamuta',
          'Toli Toli',
          'Tomohon',
          'Tondano',
          'Tutuyan',
          'Unaaha',
          'Wangi Wangi',
          'Wanggudu',
          'Watampone',
          'Watan Soppeng',
          'Ambarawa',
          'Anyer',
          'Bandung',
          'Bangil',
          'Banjar (Jawa Barat)',
          'Banjarnegara',
          'Bangkalan',
          'Bantul',
          'Banyumas',
          'Banyuwangi',
          'Batang',
          'Batu',
          'Bekasi',
          'Blitar',
          'Blora',
          'Bogor',
          'Bojonegoro',
          'Bondowoso',
          'Boyolali',
          'Bumiayu',
          'Brebes',
          'Caruban',
          'Cianjur',
          'Ciamis',
          'Cibinong',
          'Cikampek',
          'Cikarang',
          'Cilacap',
          'Cilegon',
          'Cirebon',
          'Demak',
          'Depok',
          'Garut',
          'Gresik',
          'Indramayu',
          'Jakarta',
          'Jember',
          'Jepara',
          'Jombang',
          'Kajen',
          'Karanganyar',
          'Kebumen',
          'Kediri',
          'Kendal',
          'Kepanjen',
          'Klaten',
          'Pelabuhan Ratu',
          'Kraksaan',
          'Kudus',
          'Kuningan',
          'Lamongan',
          'Lumajang',
          'Madiun',
          'Magelang',
          'Magetan',
          'Majalengka',
          'Malang',
          'Mojokerto',
          'Mojosari',
          'Mungkid',
          'Ngamprah',
          'Nganjuk',
          'Ngawi',
          'Pacitan',
          'Pamekasan',
          'Pandeglang',
          'Pare',
          'Pati',
          'Pasuruan',
          'Pekalongan',
          'Pemalang',
          'Ponorogo',
          'Probolinggo',
          'Purbalingga',
          'Purwakarta',
          'Purwodadi',
          'Purwokerto',
          'Purworejo',
          'Rangkasbitung',
          'Rembang',
          'Salatiga',
          'Sampang',
          'Semarang',
          'Serang',
          'Sidayu',
          'Sidoarjo',
          'Singaparna',
          'Situbondo',
          'Slawi',
          'Sleman',
          'Soreang',
          'Sragen',
          'Subang',
          'Sukabumi',
          'Sukoharjo',
          'Sumber',
          'Sumedang',
          'Sumenep',
          'Surabaya',
          'Surakarta',
          'Tasikmalaya',
          'Tangerang',
          'Tangerang Selatan',
          'Tegal',
          'Temanggung',
          'Tigaraksa',
          'Trenggalek',
          'Tuban',
          'Tulungagung',
          'Ungaran',
          'Wates',
          'Wlingi',
          'Wonogiri',
          'Wonosari',
          'Wonosobo',
          'Yogyakarta',
          'Atambua',
          'Baa',
          'Badung',
          'Bajawa',
          'Bangli',
          'Bima',
          'Denpasar',
          'Dompu',
          'Ende',
          'Gianyar',
          'Kalabahi',
          'Karangasem',
          'Kefamenanu',
          'Klungkung',
          'Kupang',
          'Labuhan Bajo',
          'Larantuka',
          'Lewoleba',
          'Maumere',
          'Mataram',
          'Mbay',
          'Negara',
          'Praya',
          'Raba',
          'Ruteng',
          'Selong',
          'Singaraja',
          'Soe',
          'Sumbawa Besar',
          'Tabanan',
          'Taliwang',
          'Tambolaka',
          'Tanjung',
          'Waibakul',
          'Waikabubak',
          'Waingapu',
          'Denpasar',
          'Negara,Bali',
          'Singaraja',
          'Tabanan',
          'Bangli',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/id_ID/address/city.js': [
      function(require, module, exports) {
        module['exports'] = ['#{city_name}']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/id_ID/address/street_prefix.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Ds.',
          'Dk.',
          'Gg.',
          'Jln.',
          'Jr.',
          'Kpg.',
          'Ki.',
          'Psr.',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/id_ID/address/street_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          '#{street_prefix} #{Name.first_name}',
          '#{street_prefix} #{Name.last_name}',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/id_ID/address/street_address.js': [
      function(require, module, exports) {
        module['exports'] = ['#{street_name} no #{building_number}']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/id_ID/address/default_country.js': [
      function(require, module, exports) {
        module['exports'] = ['Indonesia']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/id_ID/address/index.js': [
      function(require, module, exports) {
        var address = {}
        module['exports'] = address
        address.building_number = require('./building_number')
        address.postcode = require('./postcode')
        address.state = require('./state')
        address.city_name = require('./city_name')
        address.city = require('./city')
        address.street_prefix = require('./street_prefix')
        address.street_name = require('./street_name')
        address.street_address = require('./street_address')
        address.default_country = require('./default_country')
      },
      {
        './building_number':
          '../node_modules/faker/lib/locales/id_ID/address/building_number.js',
        './postcode':
          '../node_modules/faker/lib/locales/id_ID/address/postcode.js',
        './state':
          '../node_modules/faker/lib/locales/id_ID/address/state.js',
        './city_name':
          '../node_modules/faker/lib/locales/id_ID/address/city_name.js',
        './city':
          '../node_modules/faker/lib/locales/id_ID/address/city.js',
        './street_prefix':
          '../node_modules/faker/lib/locales/id_ID/address/street_prefix.js',
        './street_name':
          '../node_modules/faker/lib/locales/id_ID/address/street_name.js',
        './street_address':
          '../node_modules/faker/lib/locales/id_ID/address/street_address.js',
        './default_country':
          '../node_modules/faker/lib/locales/id_ID/address/default_country.js',
      },
    ],
    '../node_modules/faker/lib/locales/id_ID/company/prefix.js': [
      function(require, module, exports) {
        module['exports'] = ['PT', 'CV', 'UD', 'PD', 'Perum']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/id_ID/company/suffix.js': [
      function(require, module, exports) {
        module['exports'] = ['(Persero) Tbk', 'Tbk']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/id_ID/company/name.js': [
      function(require, module, exports) {
        module['exports'] = [
          '#{prefix} #{Name.last_name}',
          '#{Name.last_name} #{suffix}',
          '#{prefix} #{Name.last_name} #{suffix}',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/id_ID/company/index.js': [
      function(require, module, exports) {
        var company = {}
        module['exports'] = company
        company.prefix = require('./prefix')
        company.suffix = require('./suffix')
        company.name = require('./name')
      },
      {
        './prefix':
          '../node_modules/faker/lib/locales/id_ID/company/prefix.js',
        './suffix':
          '../node_modules/faker/lib/locales/id_ID/company/suffix.js',
        './name':
          '../node_modules/faker/lib/locales/id_ID/company/name.js',
      },
    ],
    '../node_modules/faker/lib/locales/id_ID/internet/free_email.js': [
      function(require, module, exports) {
        module['exports'] = [
          'gmail.com',
          'yahoo.com',
          'gmail.co.id',
          'yahoo.co.id',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/id_ID/internet/domain_suffix.js': [
      function(require, module, exports) {
        module['exports'] = [
          'com',
          'net',
          'org',
          'asia',
          'tv',
          'biz',
          'info',
          'in',
          'name',
          'co',
          'ac.id',
          'sch.id',
          'go.id',
          'mil.id',
          'co.id',
          'or.id',
          'web.id',
          'my.id',
          'biz.id',
          'desa.id',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/id_ID/internet/index.js': [
      function(require, module, exports) {
        var internet = {}
        module['exports'] = internet
        internet.free_email = require('./free_email')
        internet.domain_suffix = require('./domain_suffix')
      },
      {
        './free_email':
          '../node_modules/faker/lib/locales/id_ID/internet/free_email.js',
        './domain_suffix':
          '../node_modules/faker/lib/locales/id_ID/internet/domain_suffix.js',
      },
    ],
    '../node_modules/faker/lib/locales/id_ID/date/month.js': [
      function(require, module, exports) {
        module['exports'] = {
          wide: [
            'Januari',
            'Februari',
            'Maret',
            'April',
            'Mei',
            'Juni',
            'Juli',
            'Agustus',
            'September',
            'Oktober',
            'November',
            'Desember',
          ],
          wide_context: [
            'Januari',
            'Februari',
            'Maret',
            'April',
            'Mei',
            'Juni',
            'Juli',
            'Agustus',
            'September',
            'Oktober',
            'November',
            'Desember',
          ],
          abbr: [
            'Jan',
            'Feb',
            'Mar',
            'Apr',
            'Mei',
            'Jun',
            'Jul',
            'Ags',
            'Sep',
            'Okt',
            'Nov',
            'Des',
          ],
          abbr_context: [
            'Jan',
            'Feb',
            'Mar',
            'Apr',
            'Mei',
            'Jun',
            'Jul',
            'Ags',
            'Sep',
            'Okt',
            'Nov',
            'Des',
          ],
        }
      },
      {},
    ],
    '../node_modules/faker/lib/locales/id_ID/date/weekday.js': [
      function(require, module, exports) {
        module['exports'] = {
          wide: [
            'Minggu',
            'Senin',
            'Selasa',
            'Rabu',
            'Kamis',
            'Jumat',
            'Sabtu',
          ],
          wide_context: [
            'Minggu',
            'Senin',
            'Selasa',
            'Rabu',
            'Kamis',
            'Jumat',
            'Sabtu',
          ],
          abbr: ['Min', 'Sen', 'Sel', 'Rab', 'Kam', 'Jum', 'Sab'],
          abbr_context: ['Min', 'Sen', 'Sel', 'Rab', 'Kam', 'Jum', 'Sab'],
        }
      },
      {},
    ],
    '../node_modules/faker/lib/locales/id_ID/date/index.js': [
      function(require, module, exports) {
        var date = {}
        module['exports'] = date
        date.month = require('./month')
        date.weekday = require('./weekday')
      },
      {
        './month': '../node_modules/faker/lib/locales/id_ID/date/month.js',
        './weekday':
          '../node_modules/faker/lib/locales/id_ID/date/weekday.js',
      },
    ],
    '../node_modules/faker/lib/locales/id_ID/name/male_first_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Abyasa',
          'Ade',
          'Adhiarja',
          'Adiarja',
          'Adika',
          'Adikara',
          'Adinata',
          'Aditya',
          'Agus',
          'Ajiman',
          'Ajimat',
          'Ajimin',
          'Ajiono',
          'Akarsana',
          'Alambana',
          'Among',
          'Anggabaya',
          'Anom',
          'Argono',
          'Aris',
          'Arta',
          'Artanto',
          'Artawan',
          'Arsipatra',
          'Asirwada',
          'Asirwanda',
          'Aslijan',
          'Asmadi',
          'Asman',
          'Asmianto',
          'Asmuni',
          'Aswani',
          'Atma',
          'Atmaja',
          'Bagas',
          'Bagiya',
          'Bagus',
          'Bagya',
          'Bahuraksa',
          'Bahuwarna',
          'Bahuwirya',
          'Bajragin',
          'Bakda',
          'Bakiadi',
          'Bakianto',
          'Bakidin',
          'Bakijan',
          'Bakiman',
          'Bakiono',
          'Bakti',
          'Baktiadi',
          'Baktianto',
          'Baktiono',
          'Bala',
          'Balamantri',
          'Balangga',
          'Balapati',
          'Balidin',
          'Balijan',
          'Bambang',
          'Banara',
          'Banawa',
          'Banawi',
          'Bancar',
          'Budi',
          'Cagak',
          'Cager',
          'Cahyadi',
          'Cahyanto',
          'Cahya',
          'Cahyo',
          'Cahyono',
          'Caket',
          'Cakrabirawa',
          'Cakrabuana',
          'Cakrajiya',
          'Cakrawala',
          'Cakrawangsa',
          'Candra',
          'Chandra',
          'Candrakanta',
          'Capa',
          'Caraka',
          'Carub',
          'Catur',
          'Caturangga',
          'Cawisadi',
          'Cawisono',
          'Cawuk',
          'Cayadi',
          'Cecep',
          'Cemani',
          'Cemeti',
          'Cemplunk',
          'Cengkal',
          'Cengkir',
          'Dacin',
          'Dadap',
          'Dadi',
          'Dagel',
          'Daliman',
          'Dalimin',
          'Daliono',
          'Damar',
          'Damu',
          'Danang',
          'Daniswara',
          'Danu',
          'Danuja',
          'Dariati',
          'Darijan',
          'Darimin',
          'Darmaji',
          'Darman',
          'Darmana',
          'Darmanto',
          'Darsirah',
          'Dartono',
          'Daru',
          'Daruna',
          'Daryani',
          'Dasa',
          'Digdaya',
          'Dimas',
          'Dimaz',
          'Dipa',
          'Dirja',
          'Drajat',
          'Dwi',
          'Dono',
          'Dodo',
          'Edi',
          'Eka',
          'Elon',
          'Eluh',
          'Eman',
          'Emas',
          'Embuh',
          'Emong',
          'Empluk',
          'Endra',
          'Enteng',
          'Estiawan',
          'Estiono',
          'Eko',
          'Edi',
          'Edison',
          'Edward',
          'Elvin',
          'Erik',
          'Emil',
          'Ega',
          'Emin',
          'Eja',
          'Gada',
          'Gadang',
          'Gaduh',
          'Gaiman',
          'Galak',
          'Galang',
          'Galar',
          'Galih',
          'Galiono',
          'Galuh',
          'Galur',
          'Gaman',
          'Gamani',
          'Gamanto',
          'Gambira',
          'Gamblang',
          'Ganda',
          'Gandewa',
          'Gandi',
          'Gandi',
          'Ganep',
          'Gangsa',
          'Gangsar',
          'Ganjaran',
          'Gantar',
          'Gara',
          'Garan',
          'Garang',
          'Garda',
          'Gatot',
          'Gatra',
          'Gilang',
          'Galih',
          'Ghani',
          'Gading',
          'Hairyanto',
          'Hardana',
          'Hardi',
          'Harimurti',
          'Harja',
          'Harjasa',
          'Harjaya',
          'Harjo',
          'Harsana',
          'Harsanto',
          'Harsaya',
          'Hartaka',
          'Hartana',
          'Harto',
          'Hasta',
          'Heru',
          'Himawan',
          'Hadi',
          'Halim',
          'Hasim',
          'Hasan',
          'Hendra',
          'Hendri',
          'Heryanto',
          'Hamzah',
          'Hari',
          'Imam',
          'Indra',
          'Irwan',
          'Irsad',
          'Ikhsan',
          'Irfan',
          'Ian',
          'Ibrahim',
          'Ibrani',
          'Ismail',
          'Irnanto',
          'Ilyas',
          'Ibun',
          'Ivan',
          'Ikin',
          'Ihsan',
          'Jabal',
          'Jaeman',
          'Jaga',
          'Jagapati',
          'Jagaraga',
          'Jail',
          'Jaiman',
          'Jaka',
          'Jarwa',
          'Jarwadi',
          'Jarwi',
          'Jasmani',
          'Jaswadi',
          'Jati',
          'Jatmiko',
          'Jaya',
          'Jayadi',
          'Jayeng',
          'Jinawi',
          'Jindra',
          'Joko',
          'Jumadi',
          'Jumari',
          'Jamal',
          'Jamil',
          'Jais',
          'Jefri',
          'Johan',
          'Jono',
          'Kacung',
          'Kajen',
          'Kambali',
          'Kamidin',
          'Kariman',
          'Karja',
          'Karma',
          'Karman',
          'Karna',
          'Karsa',
          'Karsana',
          'Karta',
          'Kasiran',
          'Kasusra',
          'Kawaca',
          'Kawaya',
          'Kayun',
          'Kemba',
          'Kenari',
          'Kenes',
          'Kuncara',
          'Kunthara',
          'Kusuma',
          'Kadir',
          'Kala',
          'Kalim',
          'Kurnia',
          'Kanda',
          'Kardi',
          'Karya',
          'Kasim',
          'Kairav',
          'Kenzie',
          'Kemal',
          'Kamal',
          'Koko',
          'Labuh',
          'Laksana',
          'Lamar',
          'Lanang',
          'Langgeng',
          'Lanjar',
          'Lantar',
          'Lega',
          'Legawa',
          'Lembah',
          'Liman',
          'Limar',
          'Luhung',
          'Lukita',
          'Luluh',
          'Lulut',
          'Lurhur',
          'Luwar',
          'Luwes',
          'Latif',
          'Lasmanto',
          'Lukman',
          'Luthfi',
          'Leo',
          'Luis',
          'Lutfan',
          'Lasmono',
          'Laswi',
          'Mahesa',
          'Makara',
          'Makuta',
          'Manah',
          'Maras',
          'Margana',
          'Mariadi',
          'Marsudi',
          'Martaka',
          'Martana',
          'Martani',
          'Marwata',
          'Maryadi',
          'Maryanto',
          'Mitra',
          'Mujur',
          'Mulya',
          'Mulyanto',
          'Mulyono',
          'Mumpuni',
          'Muni',
          'Mursita',
          'Murti',
          'Mustika',
          'Maman',
          'Mahmud',
          'Mahdi',
          'Mahfud',
          'Malik',
          'Muhammad',
          'Mustofa',
          'Marsito',
          'Mursinin',
          'Nalar',
          'Naradi',
          'Nardi',
          'Niyaga',
          'Nrima',
          'Nugraha',
          'Nyana',
          'Narji',
          'Nasab',
          'Nasrullah',
          'Nasim',
          'Najib',
          'Najam',
          'Nyoman',
          'Olga',
          'Ozy',
          'Omar',
          'Opan',
          'Oskar',
          'Oman',
          'Okto',
          'Okta',
          'Opung',
          'Paiman',
          'Panca',
          'Pangeran',
          'Pangestu',
          'Pardi',
          'Parman',
          'Perkasa',
          'Praba',
          'Prabu',
          'Prabawa',
          'Prabowo',
          'Prakosa',
          'Pranata',
          'Pranawa',
          'Prasetya',
          'Prasetyo',
          'Prayitna',
          'Prayoga',
          'Prayogo',
          'Purwadi',
          'Purwa',
          'Purwanto',
          'Panji',
          'Pandu',
          'Paiman',
          'Prima',
          'Putu',
          'Raden',
          'Raditya',
          'Raharja',
          'Rama',
          'Rangga',
          'Reksa',
          'Respati',
          'Rusman',
          'Rosman',
          'Rahmat',
          'Rahman',
          'Rendy',
          'Reza',
          'Rizki',
          'Ridwan',
          'Rudi',
          'Raden',
          'Radit',
          'Radika',
          'Rafi',
          'Rafid',
          'Raihan',
          'Salman',
          'Saadat',
          'Saiful',
          'Surya',
          'Slamet',
          'Samsul',
          'Soleh',
          'Simon',
          'Sabar',
          'Sabri',
          'Sidiq',
          'Satya',
          'Setya',
          'Saka',
          'Sakti',
          'Taswir',
          'Tedi',
          'Teddy',
          'Taufan',
          'Taufik',
          'Tomi',
          'Tasnim',
          'Teguh',
          'Tasdik',
          'Timbul',
          'Tirta',
          'Tirtayasa',
          'Tri',
          'Tugiman',
          'Umar',
          'Usman',
          'Uda',
          'Umay',
          'Unggul',
          'Utama',
          'Umaya',
          'Upik',
          'Viktor',
          'Vino',
          'Vinsen',
          'Vero',
          'Vega',
          'Viman',
          'Virman',
          'Wahyu',
          'Wira',
          'Wisnu',
          'Wadi',
          'Wardi',
          'Warji',
          'Waluyo',
          'Wakiman',
          'Wage',
          'Wardaya',
          'Warsa',
          'Warsita',
          'Warta',
          'Wasis',
          'Wawan',
          'Xanana',
          'Yahya',
          'Yusuf',
          'Yosef',
          'Yono',
          'Yoga',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/id_ID/name/male_last_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Adriansyah',
          'Ardianto',
          'Anggriawan',
          'Budiman',
          'Budiyanto',
          'Damanik',
          'Dongoran',
          'Dabukke',
          'Firmansyah',
          'Firgantoro',
          'Gunarto',
          'Gunawan',
          'Hardiansyah',
          'Habibi',
          'Hakim',
          'Halim',
          'Haryanto',
          'Hidayat',
          'Hidayanto',
          'Hutagalung',
          'Hutapea',
          'Hutasoit',
          'Irawan',
          'Iswahyudi',
          'Kuswoyo',
          'Januar',
          'Jailani',
          'Kurniawan',
          'Kusumo',
          'Latupono',
          'Lazuardi',
          'Maheswara',
          'Mahendra',
          'Mustofa',
          'Mansur',
          'Mandala',
          'Megantara',
          'Maulana',
          'Maryadi',
          'Mangunsong',
          'Manullang',
          'Marpaung',
          'Marbun',
          'Narpati',
          'Natsir',
          'Nugroho',
          'Najmudin',
          'Nashiruddin',
          'Nainggolan',
          'Nababan',
          'Napitupulu',
          'Pangestu',
          'Putra',
          'Pranowo',
          'Prabowo',
          'Pratama',
          'Prasetya',
          'Prasetyo',
          'Pradana',
          'Pradipta',
          'Prakasa',
          'Permadi',
          'Prasasta',
          'Prayoga',
          'Ramadan',
          'Rajasa',
          'Rajata',
          'Saptono',
          'Santoso',
          'Saputra',
          'Saefullah',
          'Setiawan',
          'Suryono',
          'Suwarno',
          'Siregar',
          'Sihombing',
          'Salahudin',
          'Sihombing',
          'Samosir',
          'Saragih',
          'Sihotang',
          'Simanjuntak',
          'Sinaga',
          'Simbolon',
          'Sitompul',
          'Sitorus',
          'Sirait',
          'Siregar',
          'Situmorang',
          'Tampubolon',
          'Thamrin',
          'Tamba',
          'Tarihoran',
          'Utama',
          'Uwais',
          'Wahyudin',
          'Waluyo',
          'Wibowo',
          'Winarno',
          'Wibisono',
          'Wijaya',
          'Widodo',
          'Wacana',
          'Waskita',
          'Wasita',
          'Zulkarnain',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/id_ID/name/female_first_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Ade',
          'Agnes',
          'Ajeng',
          'Amalia',
          'Anita',
          'Ayu',
          'Aisyah',
          'Ana',
          'Ami',
          'Ani',
          'Azalea',
          'Aurora',
          'Alika',
          'Anastasia',
          'Amelia',
          'Almira',
          'Bella',
          'Betania',
          'Belinda',
          'Citra',
          'Cindy',
          'Chelsea',
          'Clara',
          'Cornelia',
          'Cinta',
          'Cinthia',
          'Ciaobella',
          'Cici',
          'Carla',
          'Calista',
          'Devi',
          'Dewi',
          'Dian',
          'Diah',
          'Diana',
          'Dina',
          'Dinda',
          'Dalima',
          'Eka',
          'Eva',
          'Endah',
          'Elisa',
          'Eli',
          'Ella',
          'Ellis',
          'Elma',
          'Elvina',
          'Fitria',
          'Fitriani',
          'Febi',
          'Faizah',
          'Farah',
          'Farhunnisa',
          'Fathonah',
          'Gabriella',
          'Gasti',
          'Gawati',
          'Genta',
          'Ghaliyati',
          'Gina',
          'Gilda',
          'Halima',
          'Hesti',
          'Hilda',
          'Hafshah',
          'Hamima',
          'Hana',
          'Hani',
          'Hasna',
          'Humaira',
          'Ika',
          'Indah',
          'Intan',
          'Irma',
          'Icha',
          'Ida',
          'Ifa',
          'Ilsa',
          'Ina',
          'Ira',
          'Iriana',
          'Jamalia',
          'Janet',
          'Jane',
          'Julia',
          'Juli',
          'Jessica',
          'Jasmin',
          'Jelita',
          'Kamaria',
          'Kamila',
          'Kani',
          'Karen',
          'Karimah',
          'Kartika',
          'Kasiyah',
          'Keisha',
          'Kezia',
          'Kiandra',
          'Kayla',
          'Kania',
          'Lala',
          'Lalita',
          'Latika',
          'Laila',
          'Laras',
          'Lidya',
          'Lili',
          'Lintang',
          'Maria',
          'Mala',
          'Maya',
          'Maida',
          'Maimunah',
          'Melinda',
          'Mila',
          'Mutia',
          'Michelle',
          'Malika',
          'Nadia',
          'Nadine',
          'Nabila',
          'Natalia',
          'Novi',
          'Nova',
          'Nurul',
          'Nilam',
          'Najwa',
          'Olivia',
          'Ophelia',
          'Oni',
          'Oliva',
          'Padma',
          'Putri',
          'Paramita',
          'Paris',
          'Patricia',
          'Paulin',
          'Puput',
          'Puji',
          'Pia',
          'Puspa',
          'Puti',
          'Putri',
          'Padmi',
          'Qori',
          'Queen',
          'Ratih',
          'Ratna',
          'Restu',
          'Rini',
          'Rika',
          'Rina',
          'Rahayu',
          'Rahmi',
          'Rachel',
          'Rahmi',
          'Raisa',
          'Raina',
          'Sarah',
          'Sari',
          'Siti',
          'Siska',
          'Suci',
          'Syahrini',
          'Septi',
          'Sadina',
          'Safina',
          'Sakura',
          'Salimah',
          'Salwa',
          'Salsabila',
          'Samiah',
          'Shania',
          'Sabrina',
          'Silvia',
          'Shakila',
          'Talia',
          'Tami',
          'Tira',
          'Tiara',
          'Titin',
          'Tania',
          'Tina',
          'Tantri',
          'Tari',
          'Titi',
          'Uchita',
          'Unjani',
          'Ulya',
          'Uli',
          'Ulva',
          'Umi',
          'Usyi',
          'Vanya',
          'Vanesa',
          'Vivi',
          'Vera',
          'Vicky',
          'Victoria',
          'Violet',
          'Winda',
          'Widya',
          'Wulan',
          'Wirda',
          'Wani',
          'Yani',
          'Yessi',
          'Yulia',
          'Yuliana',
          'Yuni',
          'Yunita',
          'Yance',
          'Zahra',
          'Zalindra',
          'Zaenab',
          'Zulfa',
          'Zizi',
          'Zulaikha',
          'Zamira',
          'Zelda',
          'Zelaya',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/id_ID/name/female_last_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Agustina',
          'Andriani',
          'Anggraini',
          'Aryani',
          'Astuti',
          'Fujiati',
          'Farida',
          'Handayani',
          'Hassanah',
          'Hartati',
          'Hasanah',
          'Haryanti',
          'Hariyah',
          'Hastuti',
          'Halimah',
          'Kusmawati',
          'Kuswandari',
          'Laksmiwati',
          'Laksita',
          'Lestari',
          'Lailasari',
          'Mandasari',
          'Mardhiyah',
          'Mayasari',
          'Melani',
          'Mulyani',
          'Maryati',
          'Nurdiyanti',
          'Novitasari',
          'Nuraini',
          'Nasyidah',
          'Nasyiah',
          'Namaga',
          'Palastri',
          'Pudjiastuti',
          'Puspasari',
          'Puspita',
          'Purwanti',
          'Pratiwi',
          'Purnawati',
          'Pertiwi',
          'Permata',
          'Prastuti',
          'Padmasari',
          'Rahmawati',
          'Rahayu',
          'Riyanti',
          'Rahimah',
          'Suartini',
          'Sudiati',
          'Suryatmi',
          'Susanti',
          'Safitri',
          'Oktaviani',
          'Utami',
          'Usamah',
          'Usada',
          'Uyainah',
          'Yuniar',
          'Yuliarti',
          'Yulianti',
          'Yolanda',
          'Wahyuni',
          'Wijayanti',
          'Widiastuti',
          'Winarsih',
          'Wulandari',
          'Wastuti',
          'Zulaika',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/id_ID/name/prefix.js': [
      function(require, module, exports) {
        module['exports'] = []
      },
      {},
    ],
    '../node_modules/faker/lib/locales/id_ID/name/suffix.js': [
      function(require, module, exports) {
        module['exports'] = [
          'S.Ked',
          'S.Gz',
          'S.Pt',
          'S.IP',
          'S.E.I',
          'S.E.',
          'S.Kom',
          'S.H.',
          'S.T.',
          'S.Pd',
          'S.Psi',
          'S.I.Kom',
          'S.Sos',
          'S.Farm',
          'M.M.',
          'M.Kom.',
          'M.TI.',
          'M.Pd',
          'M.Farm',
          'M.Ak',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/id_ID/name/name.js': [
      function(require, module, exports) {
        module['exports'] = [
          '#{male_first_name} #{male_last_name}',
          '#{male_last_name} #{male_first_name}',
          '#{male_first_name} #{male_first_name} #{male_last_name}',
          '#{female_first_name} #{female_last_name}',
          '#{female_first_name} #{male_last_name}',
          '#{female_last_name} #{female_first_name}',
          '#{female_first_name} #{female_first_name} #{female_last_name}',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/id_ID/name/index.js': [
      function(require, module, exports) {
        var name = {}
        module['exports'] = name
        name.male_first_name = require('./male_first_name')
        name.male_last_name = require('./male_last_name')
        name.female_first_name = require('./female_first_name')
        name.female_last_name = require('./female_last_name')
        name.prefix = require('./prefix')
        name.suffix = require('./suffix')
        name.name = require('./name')
      },
      {
        './male_first_name':
          '../node_modules/faker/lib/locales/id_ID/name/male_first_name.js',
        './male_last_name':
          '../node_modules/faker/lib/locales/id_ID/name/male_last_name.js',
        './female_first_name':
          '../node_modules/faker/lib/locales/id_ID/name/female_first_name.js',
        './female_last_name':
          '../node_modules/faker/lib/locales/id_ID/name/female_last_name.js',
        './prefix':
          '../node_modules/faker/lib/locales/id_ID/name/prefix.js',
        './suffix':
          '../node_modules/faker/lib/locales/id_ID/name/suffix.js',
        './name': '../node_modules/faker/lib/locales/id_ID/name/name.js',
      },
    ],
    '../node_modules/faker/lib/locales/id_ID/phone_number/formats.js': [
      function(require, module, exports) {
        module['exports'] = [
          '02# #### ###',
          '02## #### ###',
          '03## #### ###',
          '04## #### ###',
          '05## #### ###',
          '06## #### ###',
          '07## #### ###',
          '09## #### ###',
          '02# #### ####',
          '02## #### ####',
          '03## #### ####',
          '04## #### ####',
          '05## #### ####',
          '06## #### ####',
          '07## #### ####',
          '09## #### ####',
          '08## ### ###',
          '08## #### ###',
          '08## #### ####',
          '(+62) 8## ### ###',
          '(+62) 2# #### ###',
          '(+62) 2## #### ###',
          '(+62) 3## #### ###',
          '(+62) 4## #### ###',
          '(+62) 5## #### ###',
          '(+62) 6## #### ###',
          '(+62) 7## #### ###',
          '(+62) 8## #### ###',
          '(+62) 9## #### ###',
          '(+62) 2# #### ####',
          '(+62) 2## #### ####',
          '(+62) 3## #### ####',
          '(+62) 4## #### ####',
          '(+62) 5## #### ####',
          '(+62) 6## #### ####',
          '(+62) 7## #### ####',
          '(+62) 8## #### ####',
          '(+62) 9## #### ####',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/id_ID/phone_number/index.js': [
      function(require, module, exports) {
        var phone_number = {}
        module['exports'] = phone_number
        phone_number.formats = require('./formats')
      },
      {
        './formats':
          '../node_modules/faker/lib/locales/id_ID/phone_number/formats.js',
      },
    ],
    '../node_modules/faker/lib/locales/id_ID/index.js': [
      function(require, module, exports) {
        var id = {}
        module['exports'] = id
        id.title = 'Indonesia'
        id.address = require('./address')
        id.company = require('./company')
        id.internet = require('./internet')
        id.date = require('./date')
        id.name = require('./name')
        id.phone_number = require('./phone_number')
      },
      {
        './address':
          '../node_modules/faker/lib/locales/id_ID/address/index.js',
        './company':
          '../node_modules/faker/lib/locales/id_ID/company/index.js',
        './internet':
          '../node_modules/faker/lib/locales/id_ID/internet/index.js',
        './date': '../node_modules/faker/lib/locales/id_ID/date/index.js',
        './name': '../node_modules/faker/lib/locales/id_ID/name/index.js',
        './phone_number':
          '../node_modules/faker/lib/locales/id_ID/phone_number/index.js',
      },
    ],
    '../node_modules/faker/lib/locales/it/address/city_prefix.js': [
      function(require, module, exports) {
        module['exports'] = ['San', 'Borgo', 'Sesto', 'Quarto', 'Settimo']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/it/address/city_suffix.js': [
      function(require, module, exports) {
        module['exports'] = [
          'a mare',
          'lido',
          'ligure',
          'del friuli',
          'salentino',
          'calabro',
          'veneto',
          "nell'emilia",
          'umbro',
          'laziale',
          'terme',
          'sardo',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/it/address/country.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Afghanistan',
          'Albania',
          'Algeria',
          'American Samoa',
          'Andorra',
          'Angola',
          'Anguilla',
          'Antartide (territori a sud del 60° parallelo)',
          'Antigua e Barbuda',
          'Argentina',
          'Armenia',
          'Aruba',
          'Australia',
          'Austria',
          'Azerbaijan',
          'Bahamas',
          'Bahrain',
          'Bangladesh',
          'Barbados',
          'Bielorussia',
          'Belgio',
          'Belize',
          'Benin',
          'Bermuda',
          'Bhutan',
          'Bolivia',
          'Bosnia e Herzegovina',
          'Botswana',
          'Bouvet Island (Bouvetoya)',
          'Brasile',
          "Territorio dell'arcipelago indiano",
          'Isole Vergini Britanniche',
          'Brunei Darussalam',
          'Bulgaria',
          'Burkina Faso',
          'Burundi',
          'Cambogia',
          'Cameroon',
          'Canada',
          'Capo Verde',
          'Isole Cayman',
          'Repubblica Centrale Africana',
          'Chad',
          'Cile',
          'Cina',
          'Isola di Pasqua',
          'Isola di Cocos (Keeling)',
          'Colombia',
          'Comoros',
          'Congo',
          'Isole Cook',
          'Costa Rica',
          "Costa d'Avorio",
          'Croazia',
          'Cuba',
          'Cipro',
          'Repubblica Ceca',
          'Danimarca',
          'Gibuti',
          'Repubblica Dominicana',
          'Equador',
          'Egitto',
          'El Salvador',
          'Guinea Equatoriale',
          'Eritrea',
          'Estonia',
          'Etiopia',
          'Isole Faroe',
          'Isole Falkland (Malvinas)',
          'Fiji',
          'Finlandia',
          'Francia',
          'Guyana Francese',
          'Polinesia Francese',
          'Territori Francesi del sud',
          'Gabon',
          'Gambia',
          'Georgia',
          'Germania',
          'Ghana',
          'Gibilterra',
          'Grecia',
          'Groenlandia',
          'Grenada',
          'Guadalupa',
          'Guam',
          'Guatemala',
          'Guernsey',
          'Guinea',
          'Guinea-Bissau',
          'Guyana',
          'Haiti',
          'Heard Island and McDonald Islands',
          'Città del Vaticano',
          'Honduras',
          'Hong Kong',
          'Ungheria',
          'Islanda',
          'India',
          'Indonesia',
          'Iran',
          'Iraq',
          'Irlanda',
          'Isola di Man',
          'Israele',
          'Italia',
          'Giamaica',
          'Giappone',
          'Jersey',
          'Giordania',
          'Kazakhstan',
          'Kenya',
          'Kiribati',
          'Korea',
          'Kuwait',
          'Republicca Kirgiza',
          'Repubblica del Laos',
          'Latvia',
          'Libano',
          'Lesotho',
          'Liberia',
          'Libyan Arab Jamahiriya',
          'Liechtenstein',
          'Lituania',
          'Lussemburgo',
          'Macao',
          'Macedonia',
          'Madagascar',
          'Malawi',
          'Malesia',
          'Maldive',
          'Mali',
          'Malta',
          'Isole Marshall',
          'Martinica',
          'Mauritania',
          'Mauritius',
          'Mayotte',
          'Messico',
          'Micronesia',
          'Moldova',
          'Principato di Monaco',
          'Mongolia',
          'Montenegro',
          'Montserrat',
          'Marocco',
          'Mozambico',
          'Myanmar',
          'Namibia',
          'Nauru',
          'Nepal',
          'Antille Olandesi',
          'Olanda',
          'Nuova Caledonia',
          'Nuova Zelanda',
          'Nicaragua',
          'Niger',
          'Nigeria',
          'Niue',
          'Isole Norfolk',
          'Northern Mariana Islands',
          'Norvegia',
          'Oman',
          'Pakistan',
          'Palau',
          'Palestina',
          'Panama',
          'Papua Nuova Guinea',
          'Paraguay',
          'Peru',
          'Filippine',
          'Pitcairn Islands',
          'Polonia',
          'Portogallo',
          'Porto Rico',
          'Qatar',
          'Reunion',
          'Romania',
          'Russia',
          'Rwanda',
          'San Bartolomeo',
          "Sant'Elena",
          'Saint Kitts and Nevis',
          'Saint Lucia',
          'Saint Martin',
          'Saint Pierre and Miquelon',
          'Saint Vincent and the Grenadines',
          'Samoa',
          'San Marino',
          'Sao Tome and Principe',
          'Arabia Saudita',
          'Senegal',
          'Serbia',
          'Seychelles',
          'Sierra Leone',
          'Singapore',
          'Slovenia',
          'Isole Solomon',
          'Somalia',
          'Sud Africa',
          'Georgia del sud e South Sandwich Islands',
          'Spagna',
          'Sri Lanka',
          'Sudan',
          'Suriname',
          'Svalbard & Jan Mayen Islands',
          'Swaziland',
          'Svezia',
          'Svizzera',
          'Siria',
          'Taiwan',
          'Tajikistan',
          'Tanzania',
          'Tailandia',
          'Timor-Leste',
          'Togo',
          'Tokelau',
          'Tonga',
          'Trinidad e Tobago',
          'Tunisia',
          'Turchia',
          'Turkmenistan',
          'Isole di Turks and Caicos',
          'Tuvalu',
          'Uganda',
          'Ucraina',
          'Emirati Arabi Uniti',
          'Regno Unito',
          "Stati Uniti d'America",
          'United States Minor Outlying Islands',
          'Isole Vergini Statunitensi',
          'Uruguay',
          'Uzbekistan',
          'Vanuatu',
          'Venezuela',
          'Vietnam',
          'Wallis and Futuna',
          'Western Sahara',
          'Yemen',
          'Zambia',
          'Zimbabwe',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/it/address/building_number.js': [
      function(require, module, exports) {
        module['exports'] = ['###', '##', '#']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/it/address/street_suffix.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Piazza',
          'Strada',
          'Via',
          'Borgo',
          'Contrada',
          'Rotonda',
          'Incrocio',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/it/address/secondary_address.js': [
      function(require, module, exports) {
        module['exports'] = ['Appartamento ##', 'Piano #']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/it/address/postcode.js': [
      function(require, module, exports) {
        module['exports'] = ['#####']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/it/address/state.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Agrigento',
          'Alessandria',
          'Ancona',
          'Aosta',
          'Arezzo',
          'Ascoli Piceno',
          'Asti',
          'Avellino',
          'Bari',
          'Barletta-Andria-Trani',
          'Belluno',
          'Benevento',
          'Bergamo',
          'Biella',
          'Bologna',
          'Bolzano',
          'Brescia',
          'Brindisi',
          'Cagliari',
          'Caltanissetta',
          'Campobasso',
          'Carbonia-Iglesias',
          'Caserta',
          'Catania',
          'Catanzaro',
          'Chieti',
          'Como',
          'Cosenza',
          'Cremona',
          'Crotone',
          'Cuneo',
          'Enna',
          'Fermo',
          'Ferrara',
          'Firenze',
          'Foggia',
          'Forlì-Cesena',
          'Frosinone',
          'Genova',
          'Gorizia',
          'Grosseto',
          'Imperia',
          'Isernia',
          'La Spezia',
          "L'Aquila",
          'Latina',
          'Lecce',
          'Lecco',
          'Livorno',
          'Lodi',
          'Lucca',
          'Macerata',
          'Mantova',
          'Massa-Carrara',
          'Matera',
          'Messina',
          'Milano',
          'Modena',
          'Monza e della Brianza',
          'Napoli',
          'Novara',
          'Nuoro',
          'Olbia-Tempio',
          'Oristano',
          'Padova',
          'Palermo',
          'Parma',
          'Pavia',
          'Perugia',
          'Pesaro e Urbino',
          'Pescara',
          'Piacenza',
          'Pisa',
          'Pistoia',
          'Pordenone',
          'Potenza',
          'Prato',
          'Ragusa',
          'Ravenna',
          'Reggio Calabria',
          'Reggio Emilia',
          'Rieti',
          'Rimini',
          'Roma',
          'Rovigo',
          'Salerno',
          'Medio Campidano',
          'Sassari',
          'Savona',
          'Siena',
          'Siracusa',
          'Sondrio',
          'Taranto',
          'Teramo',
          'Terni',
          'Torino',
          'Ogliastra',
          'Trapani',
          'Trento',
          'Treviso',
          'Trieste',
          'Udine',
          'Varese',
          'Venezia',
          'Verbano-Cusio-Ossola',
          'Vercelli',
          'Verona',
          'Vibo Valentia',
          'Vicenza',
          'Viterbo',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/it/address/state_abbr.js': [
      function(require, module, exports) {
        module['exports'] = [
          'AG',
          'AL',
          'AN',
          'AO',
          'AR',
          'AP',
          'AT',
          'AV',
          'BA',
          'BT',
          'BL',
          'BN',
          'BG',
          'BI',
          'BO',
          'BZ',
          'BS',
          'BR',
          'CA',
          'CL',
          'CB',
          'CI',
          'CE',
          'CT',
          'CZ',
          'CH',
          'CO',
          'CS',
          'CR',
          'KR',
          'CN',
          'EN',
          'FM',
          'FE',
          'FI',
          'FG',
          'FC',
          'FR',
          'GE',
          'GO',
          'GR',
          'IM',
          'IS',
          'SP',
          'AQ',
          'LT',
          'LE',
          'LC',
          'LI',
          'LO',
          'LU',
          'MC',
          'MN',
          'MS',
          'MT',
          'ME',
          'MI',
          'MO',
          'MB',
          'NA',
          'NO',
          'NU',
          'OT',
          'OR',
          'PD',
          'PA',
          'PR',
          'PV',
          'PG',
          'PU',
          'PE',
          'PC',
          'PI',
          'PT',
          'PN',
          'PZ',
          'PO',
          'RG',
          'RA',
          'RC',
          'RE',
          'RI',
          'RN',
          'RM',
          'RO',
          'SA',
          'VS',
          'SS',
          'SV',
          'SI',
          'SR',
          'SO',
          'TA',
          'TE',
          'TR',
          'TO',
          'OG',
          'TP',
          'TN',
          'TV',
          'TS',
          'UD',
          'VA',
          'VE',
          'VB',
          'VC',
          'VR',
          'VV',
          'VI',
          'VT',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/it/address/city.js': [
      function(require, module, exports) {
        module['exports'] = [
          '#{city_prefix} #{Name.first_name} #{city_suffix}',
          '#{city_prefix} #{Name.first_name}',
          '#{Name.first_name} #{city_suffix}',
          '#{Name.last_name} #{city_suffix}',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/it/address/street_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          '#{street_suffix} #{Name.first_name}',
          '#{street_suffix} #{Name.last_name}',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/it/address/street_address.js': [
      function(require, module, exports) {
        module['exports'] = [
          '#{street_name} #{building_number}',
          '#{street_name} #{building_number}, #{secondary_address}',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/it/address/default_country.js': [
      function(require, module, exports) {
        module['exports'] = ['Italia']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/it/address/index.js': [
      function(require, module, exports) {
        var address = {}
        module['exports'] = address
        address.city_prefix = require('./city_prefix')
        address.city_suffix = require('./city_suffix')
        address.country = require('./country')
        address.building_number = require('./building_number')
        address.street_suffix = require('./street_suffix')
        address.secondary_address = require('./secondary_address')
        address.postcode = require('./postcode')
        address.state = require('./state')
        address.state_abbr = require('./state_abbr')
        address.city = require('./city')
        address.street_name = require('./street_name')
        address.street_address = require('./street_address')
        address.default_country = require('./default_country')
      },
      {
        './city_prefix':
          '../node_modules/faker/lib/locales/it/address/city_prefix.js',
        './city_suffix':
          '../node_modules/faker/lib/locales/it/address/city_suffix.js',
        './country':
          '../node_modules/faker/lib/locales/it/address/country.js',
        './building_number':
          '../node_modules/faker/lib/locales/it/address/building_number.js',
        './street_suffix':
          '../node_modules/faker/lib/locales/it/address/street_suffix.js',
        './secondary_address':
          '../node_modules/faker/lib/locales/it/address/secondary_address.js',
        './postcode':
          '../node_modules/faker/lib/locales/it/address/postcode.js',
        './state': '../node_modules/faker/lib/locales/it/address/state.js',
        './state_abbr':
          '../node_modules/faker/lib/locales/it/address/state_abbr.js',
        './city': '../node_modules/faker/lib/locales/it/address/city.js',
        './street_name':
          '../node_modules/faker/lib/locales/it/address/street_name.js',
        './street_address':
          '../node_modules/faker/lib/locales/it/address/street_address.js',
        './default_country':
          '../node_modules/faker/lib/locales/it/address/default_country.js',
      },
    ],
    '../node_modules/faker/lib/locales/it/company/suffix.js': [
      function(require, module, exports) {
        module['exports'] = ['SPA', 'e figli', 'Group', 's.r.l.']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/it/company/noun.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Abilità',
          'Access',
          'Adattatore',
          'Algoritmo',
          'Alleanza',
          'Analizzatore',
          'Applicazione',
          'Approccio',
          'Architettura',
          'Archivio',
          'Intelligenza artificiale',
          'Array',
          'Attitudine',
          'Benchmark',
          'Capacità',
          'Sfida',
          'Circuito',
          'Collaborazione',
          'Complessità',
          'Concetto',
          'Conglomerato',
          'Contingenza',
          'Core',
          'Database',
          'Data-warehouse',
          'Definizione',
          'Emulazione',
          'Codifica',
          'Criptazione',
          'Firmware',
          'Flessibilità',
          'Previsione',
          'Frame',
          'framework',
          'Funzione',
          'Funzionalità',
          'Interfaccia grafica',
          'Hardware',
          'Help-desk',
          'Gerarchia',
          'Hub',
          'Implementazione',
          'Infrastruttura',
          'Iniziativa',
          'Installazione',
          'Set di istruzioni',
          'Interfaccia',
          'Soluzione internet',
          'Intranet',
          'Conoscenza base',
          'Matrici',
          'Matrice',
          'Metodologia',
          'Middleware',
          'Migrazione',
          'Modello',
          'Moderazione',
          'Monitoraggio',
          'Moratoria',
          'Rete',
          'Architettura aperta',
          'Sistema aperto',
          'Orchestrazione',
          'Paradigma',
          'Parallelismo',
          'Policy',
          'Portale',
          'Struttura di prezzo',
          'Prodotto',
          'Produttività',
          'Progetto',
          'Proiezione',
          'Protocollo',
          'Servizio clienti',
          'Software',
          'Soluzione',
          'Standardizzazione',
          'Strategia',
          'Struttura',
          'Successo',
          'Sovrastruttura',
          'Supporto',
          'Sinergia',
          'Task-force',
          'Finestra temporale',
          'Strumenti',
          'Utilizzazione',
          'Sito web',
          'Forza lavoro',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/it/company/descriptor.js': [
      function(require, module, exports) {
        module['exports'] = [
          'adattiva',
          'avanzata',
          'migliorata',
          'assimilata',
          'automatizzata',
          'bilanciata',
          'centralizzata',
          'compatibile',
          'configurabile',
          'cross-platform',
          'decentralizzata',
          'digitalizzata',
          'distribuita',
          'piccola',
          'ergonomica',
          'esclusiva',
          'espansa',
          'estesa',
          'configurabile',
          'fondamentale',
          'orizzontale',
          'implementata',
          'innovativa',
          'integrata',
          'intuitiva',
          'inversa',
          'gestita',
          'obbligatoria',
          'monitorata',
          'multi-canale',
          'multi-laterale',
          'open-source',
          'operativa',
          'ottimizzata',
          'organica',
          'persistente',
          'polarizzata',
          'proattiva',
          'programmabile',
          'progressiva',
          'reattiva',
          'riallineata',
          'ricontestualizzata',
          'ridotta',
          'robusta',
          'sicura',
          'condivisibile',
          'stand-alone',
          'switchabile',
          'sincronizzata',
          'sinergica',
          'totale',
          'universale',
          'user-friendly',
          'versatile',
          'virtuale',
          'visionaria',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/it/company/adjective.js': [
      function(require, module, exports) {
        module['exports'] = [
          '24 ore',
          '24/7',
          'terza generazione',
          'quarta generazione',
          'quinta generazione',
          'sesta generazione',
          'asimmetrica',
          'asincrona',
          'background',
          'bi-direzionale',
          'biforcata',
          'bottom-line',
          'coerente',
          'coesiva',
          'composita',
          'sensibile al contesto',
          'basta sul contesto',
          'basata sul contenuto',
          'dedicata',
          'didattica',
          'direzionale',
          'discreta',
          'dinamica',
          'eco-centrica',
          'esecutiva',
          'esplicita',
          'full-range',
          'globale',
          'euristica',
          'alto livello',
          'olistica',
          'omogenea',
          'ibrida',
          'impattante',
          'incrementale',
          'intangibile',
          'interattiva',
          'intermediaria',
          'locale',
          'logistica',
          'massimizzata',
          'metodica',
          'mission-critical',
          'mobile',
          'modulare',
          'motivazionale',
          'multimedia',
          'multi-tasking',
          'nazionale',
          'neutrale',
          'nextgeneration',
          'non-volatile',
          'object-oriented',
          'ottima',
          'ottimizzante',
          'radicale',
          'real-time',
          'reciproca',
          'regionale',
          'responsiva',
          'scalabile',
          'secondaria',
          'stabile',
          'statica',
          'sistematica',
          'sistemica',
          'tangibile',
          'terziaria',
          'uniforme',
          'valore aggiunto',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/it/company/bs_noun.js': [
      function(require, module, exports) {
        module['exports'] = [
          'partnerships',
          'comunità',
          'ROI',
          'soluzioni',
          'e-services',
          'nicchie',
          'tecnologie',
          'contenuti',
          'supply-chains',
          'convergenze',
          'relazioni',
          'architetture',
          'interfacce',
          'mercati',
          'e-commerce',
          'sistemi',
          'modelli',
          'schemi',
          'reti',
          'applicazioni',
          'metriche',
          'e-business',
          'funzionalità',
          'esperienze',
          'webservices',
          'metodologie',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/it/company/bs_verb.js': [
      function(require, module, exports) {
        module['exports'] = [
          'implementate',
          'utilizzo',
          'integrate',
          'ottimali',
          'evolutive',
          'abilitate',
          'reinventate',
          'aggregate',
          'migliorate',
          'incentivate',
          'monetizzate',
          'sinergizzate',
          'strategiche',
          'deploy',
          'marchi',
          'accrescitive',
          'target',
          'sintetizzate',
          'spedizioni',
          'massimizzate',
          'innovazione',
          'guida',
          'estensioni',
          'generate',
          'exploit',
          'transizionali',
          'matrici',
          'ricontestualizzate',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/it/company/bs_adjective.js': [
      function(require, module, exports) {
        module['exports'] = [
          'valore aggiunto',
          'verticalizzate',
          'proattive',
          'forti',
          'rivoluzionari',
          'scalabili',
          'innovativi',
          'intuitivi',
          'strategici',
          'e-business',
          'mission-critical',
          '24/7',
          'globali',
          'B2B',
          'B2C',
          'granulari',
          'virtuali',
          'virali',
          'dinamiche',
          'magnetiche',
          'web',
          'interattive',
          'sexy',
          'back-end',
          'real-time',
          'efficienti',
          'front-end',
          'distributivi',
          'estensibili',
          'mondiali',
          'open-source',
          'cross-platform',
          'sinergiche',
          'out-of-the-box',
          'enterprise',
          'integrate',
          'di impatto',
          'wireless',
          'trasparenti',
          'next-generation',
          'cutting-edge',
          'visionari',
          'plug-and-play',
          'collaborative',
          'olistiche',
          'ricche',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/it/company/name.js': [
      function(require, module, exports) {
        module['exports'] = [
          '#{Name.last_name} #{suffix}',
          '#{Name.last_name}-#{Name.last_name} #{suffix}',
          '#{Name.last_name}, #{Name.last_name} e #{Name.last_name} #{suffix}',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/it/company/index.js': [
      function(require, module, exports) {
        var company = {}
        module['exports'] = company
        company.suffix = require('./suffix')
        company.noun = require('./noun')
        company.descriptor = require('./descriptor')
        company.adjective = require('./adjective')
        company.bs_noun = require('./bs_noun')
        company.bs_verb = require('./bs_verb')
        company.bs_adjective = require('./bs_adjective')
        company.name = require('./name')
      },
      {
        './suffix':
          '../node_modules/faker/lib/locales/it/company/suffix.js',
        './noun': '../node_modules/faker/lib/locales/it/company/noun.js',
        './descriptor':
          '../node_modules/faker/lib/locales/it/company/descriptor.js',
        './adjective':
          '../node_modules/faker/lib/locales/it/company/adjective.js',
        './bs_noun':
          '../node_modules/faker/lib/locales/it/company/bs_noun.js',
        './bs_verb':
          '../node_modules/faker/lib/locales/it/company/bs_verb.js',
        './bs_adjective':
          '../node_modules/faker/lib/locales/it/company/bs_adjective.js',
        './name': '../node_modules/faker/lib/locales/it/company/name.js',
      },
    ],
    '../node_modules/faker/lib/locales/it/internet/free_email.js': [
      function(require, module, exports) {
        module['exports'] = [
          'gmail.com',
          'yahoo.com',
          'hotmail.com',
          'email.it',
          'libero.it',
          'yahoo.it',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/it/internet/domain_suffix.js': [
      function(require, module, exports) {
        module['exports'] = [
          'com',
          'com',
          'com',
          'net',
          'org',
          'it',
          'it',
          'it',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/it/internet/index.js': [
      function(require, module, exports) {
        var internet = {}
        module['exports'] = internet
        internet.free_email = require('./free_email')
        internet.domain_suffix = require('./domain_suffix')
      },
      {
        './free_email':
          '../node_modules/faker/lib/locales/it/internet/free_email.js',
        './domain_suffix':
          '../node_modules/faker/lib/locales/it/internet/domain_suffix.js',
      },
    ],
    '../node_modules/faker/lib/locales/it/name/first_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Aaron',
          'Akira',
          'Alberto',
          'Alessandro',
          'Alighieri',
          'Amedeo',
          'Amos',
          'Anselmo',
          'Antonino',
          'Arcibaldo',
          'Armando',
          'Artes',
          'Audenico',
          'Ausonio',
          'Bacchisio',
          'Battista',
          'Bernardo',
          'Boris',
          'Caio',
          'Carlo',
          'Cecco',
          'Cirino',
          'Cleros',
          'Costantino',
          'Damiano',
          'Danny',
          'Davide',
          'Demian',
          'Dimitri',
          'Domingo',
          'Dylan',
          'Edilio',
          'Egidio',
          'Elio',
          'Emanuel',
          'Enrico',
          'Ercole',
          'Ermes',
          'Ethan',
          'Eusebio',
          'Evangelista',
          'Fabiano',
          'Ferdinando',
          'Fiorentino',
          'Flavio',
          'Fulvio',
          'Gabriele',
          'Gastone',
          'Germano',
          'Giacinto',
          'Gianantonio',
          'Gianleonardo',
          'Gianmarco',
          'Gianriccardo',
          'Gioacchino',
          'Giordano',
          'Giuliano',
          'Graziano',
          'Guido',
          'Harry',
          'Iacopo',
          'Ilario',
          'Ione',
          'Italo',
          'Jack',
          'Jari',
          'Joey',
          'Joseph',
          'Kai',
          'Kociss',
          'Laerte',
          'Lauro',
          'Leonardo',
          'Liborio',
          'Lorenzo',
          'Ludovico',
          'Maggiore',
          'Manuele',
          'Mariano',
          'Marvin',
          'Matteo',
          'Mauro',
          'Michael',
          'Mirco',
          'Modesto',
          'Muzio',
          'Nabil',
          'Nathan',
          'Nick',
          'Noah',
          'Odino',
          'Olo',
          'Oreste',
          'Osea',
          'Pablo',
          'Patrizio',
          'Piererminio',
          'Pierfrancesco',
          'Piersilvio',
          'Priamo',
          'Quarto',
          'Quirino',
          'Radames',
          'Raniero',
          'Renato',
          'Rocco',
          'Romeo',
          'Rosalino',
          'Rudy',
          'Sabatino',
          'Samuel',
          'Santo',
          'Sebastian',
          'Serse',
          'Silvano',
          'Sirio',
          'Tancredi',
          'Terzo',
          'Timoteo',
          'Tolomeo',
          'Trevis',
          'Ubaldo',
          'Ulrico',
          'Valdo',
          'Neri',
          'Vinicio',
          'Walter',
          'Xavier',
          'Yago',
          'Zaccaria',
          'Abramo',
          'Adriano',
          'Alan',
          'Albino',
          'Alessio',
          'Alighiero',
          'Amerigo',
          'Anastasio',
          'Antimo',
          'Antonio',
          'Arduino',
          'Aroldo',
          'Arturo',
          'Augusto',
          'Avide',
          'Baldassarre',
          'Bettino',
          'Bortolo',
          'Caligola',
          'Carmelo',
          'Celeste',
          'Ciro',
          'Costanzo',
          'Dante',
          'Danthon',
          'Davis',
          'Demis',
          'Dindo',
          'Domiziano',
          'Edipo',
          'Egisto',
          'Eliziario',
          'Emidio',
          'Enzo',
          'Eriberto',
          'Erminio',
          'Ettore',
          'Eustachio',
          'Fabio',
          'Fernando',
          'Fiorenzo',
          'Folco',
          'Furio',
          'Gaetano',
          'Gavino',
          'Gerlando',
          'Giacobbe',
          'Giancarlo',
          'Gianmaria',
          'Giobbe',
          'Giorgio',
          'Giulio',
          'Gregorio',
          'Hector',
          'Ian',
          'Ippolito',
          'Ivano',
          'Jacopo',
          'Jarno',
          'Joannes',
          'Joshua',
          'Karim',
          'Kris',
          'Lamberto',
          'Lazzaro',
          'Leone',
          'Lino',
          'Loris',
          'Luigi',
          'Manfredi',
          'Marco',
          'Marino',
          'Marzio',
          'Mattia',
          'Max',
          'Michele',
          'Mirko',
          'Moreno',
          'Nadir',
          'Nazzareno',
          'Nestore',
          'Nico',
          'Noel',
          'Odone',
          'Omar',
          'Orfeo',
          'Osvaldo',
          'Pacifico',
          'Pericle',
          'Pietro',
          'Primo',
          'Quasimodo',
          'Radio',
          'Raoul',
          'Renzo',
          'Rodolfo',
          'Romolo',
          'Rosolino',
          'Rufo',
          'Sabino',
          'Sandro',
          'Sasha',
          'Secondo',
          'Sesto',
          'Silverio',
          'Siro',
          'Tazio',
          'Teseo',
          'Timothy',
          'Tommaso',
          'Tristano',
          'Umberto',
          'Ariel',
          'Artemide',
          'Assia',
          'Azue',
          'Benedetta',
          'Bibiana',
          'Brigitta',
          'Carmela',
          'Cassiopea',
          'Cesidia',
          'Cira',
          'Clea',
          'Cleopatra',
          'Clodovea',
          'Concetta',
          'Cosetta',
          'Cristyn',
          'Damiana',
          'Danuta',
          'Deborah',
          'Demi',
          'Diamante',
          'Diana',
          'Donatella',
          'Doriana',
          'Edvige',
          'Elda',
          'Elga',
          'Elsa',
          'Emilia',
          'Enrica',
          'Erminia',
          'Eufemia',
          'Evita',
          'Fatima',
          'Felicia',
          'Filomena',
          'Flaviana',
          'Fortunata',
          'Gelsomina',
          'Genziana',
          'Giacinta',
          'Gilda',
          'Giovanna',
          'Giulietta',
          'Grazia',
          'Guendalina',
          'Helga',
          'Ileana',
          'Ingrid',
          'Irene',
          'Isabel',
          'Isira',
          'Ivonne',
          'Jelena',
          'Jole',
          'Claudia',
          'Kayla',
          'Kristel',
          'Laura',
          'Lucia',
          'Lia',
          'Lidia',
          'Lisa',
          'Loredana',
          'Loretta',
          'Luce',
          'Lucrezia',
          'Luna',
          'Maika',
          'Marcella',
          'Maria',
          'Mariagiulia',
          'Marianita',
          'Mariapia',
          'Marieva',
          'Marina',
          'Maristella',
          'Maruska',
          'Matilde',
          'Mecren',
          'Mercedes',
          'Mietta',
          'Miriana',
          'Miriam',
          'Monia',
          'Morgana',
          'Naomi',
          'Nayade',
          'Nicoletta',
          'Ninfa',
          'Noemi',
          'Nunzia',
          'Olimpia',
          'Oretta',
          'Ortensia',
          'Penelope',
          'Piccarda',
          'Prisca',
          'Rebecca',
          'Rita',
          'Rosalba',
          'Rosaria',
          'Rosita',
          'Ruth',
          'Samira',
          'Sarita',
          'Selvaggia',
          'Shaira',
          'Sibilla',
          'Soriana',
          'Thea',
          'Tosca',
          'Ursula',
          'Vania',
          'Vera',
          'Vienna',
          'Violante',
          'Vitalba',
          'Zelida',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/it/name/last_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Amato',
          'Barbieri',
          'Barone',
          'Basile',
          'Battaglia',
          'Bellini',
          'Benedetti',
          'Bernardi',
          'Bianc',
          'Bianchi',
          'Bruno',
          'Caputo',
          'Carbon',
          'Caruso',
          'Cattaneo',
          'Colombo',
          'Cont',
          'Conte',
          'Coppola',
          'Costa',
          'Costantin',
          "D'amico",
          "D'angelo",
          'Damico',
          'De Angelis',
          'De luca',
          'De rosa',
          'De Santis',
          'Donati',
          'Esposito',
          'Fabbri',
          'Farin',
          'Ferrara',
          'Ferrari',
          'Ferraro',
          'Ferretti',
          'Ferri',
          'Fior',
          'Fontana',
          'Galli',
          'Gallo',
          'Gatti',
          'Gentile',
          'Giordano',
          'Giuliani',
          'Grassi',
          'Grasso',
          'Greco',
          'Guerra',
          'Leone',
          'Lombardi',
          'Lombardo',
          'Longo',
          'Mancini',
          'Marchetti',
          'Marian',
          'Marini',
          'Marino',
          'Martinelli',
          'Martini',
          'Martino',
          'Mazza',
          'Messina',
          'Milani',
          'Montanari',
          'Monti',
          'Morelli',
          'Moretti',
          'Negri',
          'Neri',
          'Orlando',
          'Pagano',
          'Palmieri',
          'Palumbo',
          'Parisi',
          'Pellegrini',
          'Pellegrino',
          'Piras',
          'Ricci',
          'Rinaldi',
          'Riva',
          'Rizzi',
          'Rizzo',
          'Romano',
          'Ross',
          'Rossetti',
          'Ruggiero',
          'Russo',
          'Sala',
          'Sanna',
          'Santoro',
          'Sartori',
          'Serr',
          'Silvestri',
          'Sorrentino',
          'Testa',
          'Valentini',
          'Villa',
          'Vitale',
          'Vitali',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/it/name/prefix.js': [
      function(require, module, exports) {
        module['exports'] = ['Sig.', 'Dott.', 'Dr.', 'Ing.']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/it/name/suffix.js': [
      function(require, module, exports) {
        module['exports'] = []
      },
      {},
    ],
    '../node_modules/faker/lib/locales/it/name/name.js': [
      function(require, module, exports) {
        module['exports'] = [
          '#{prefix} #{first_name} #{last_name}',
          '#{first_name} #{last_name}',
          '#{first_name} #{last_name}',
          '#{first_name} #{last_name}',
          '#{first_name} #{last_name}',
          '#{first_name} #{last_name}',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/it/name/index.js': [
      function(require, module, exports) {
        var name = {}
        module['exports'] = name
        name.first_name = require('./first_name')
        name.last_name = require('./last_name')
        name.prefix = require('./prefix')
        name.suffix = require('./suffix')
        name.name = require('./name')
      },
      {
        './first_name':
          '../node_modules/faker/lib/locales/it/name/first_name.js',
        './last_name':
          '../node_modules/faker/lib/locales/it/name/last_name.js',
        './prefix': '../node_modules/faker/lib/locales/it/name/prefix.js',
        './suffix': '../node_modules/faker/lib/locales/it/name/suffix.js',
        './name': '../node_modules/faker/lib/locales/it/name/name.js',
      },
    ],
    '../node_modules/faker/lib/locales/it/phone_number/formats.js': [
      function(require, module, exports) {
        module['exports'] = [
          '+## ### ## ## ####',
          '+## ## #######',
          '+## ## ########',
          '+## ### #######',
          '+## ### ########',
          '+## #### #######',
          '+## #### ########',
          '0## ### ####',
          '+39 0## ### ###',
          '3## ### ###',
          '+39 3## ### ###',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/it/phone_number/index.js': [
      function(require, module, exports) {
        var phone_number = {}
        module['exports'] = phone_number
        phone_number.formats = require('./formats')
      },
      {
        './formats':
          '../node_modules/faker/lib/locales/it/phone_number/formats.js',
      },
    ],
    '../node_modules/faker/lib/locales/it/index.js': [
      function(require, module, exports) {
        var it = {}
        module['exports'] = it
        it.title = 'Italian'
        it.address = require('./address')
        it.company = require('./company')
        it.internet = require('./internet')
        it.name = require('./name')
        it.phone_number = require('./phone_number')
      },
      {
        './address':
          '../node_modules/faker/lib/locales/it/address/index.js',
        './company':
          '../node_modules/faker/lib/locales/it/company/index.js',
        './internet':
          '../node_modules/faker/lib/locales/it/internet/index.js',
        './name': '../node_modules/faker/lib/locales/it/name/index.js',
        './phone_number':
          '../node_modules/faker/lib/locales/it/phone_number/index.js',
      },
    ],
    '../node_modules/faker/lib/locales/ja/address/postcode.js': [
      function(require, module, exports) {
        module['exports'] = ['###-####']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ja/address/state.js': [
      function(require, module, exports) {
        module['exports'] = [
          '北海道',
          '青森県',
          '岩手県',
          '宮城県',
          '秋田県',
          '山形県',
          '福島県',
          '茨城県',
          '栃木県',
          '群馬県',
          '埼玉県',
          '千葉県',
          '東京都',
          '神奈川県',
          '新潟県',
          '富山県',
          '石川県',
          '福井県',
          '山梨県',
          '長野県',
          '岐阜県',
          '静岡県',
          '愛知県',
          '三重県',
          '滋賀県',
          '京都府',
          '大阪府',
          '兵庫県',
          '奈良県',
          '和歌山県',
          '鳥取県',
          '島根県',
          '岡山県',
          '広島県',
          '山口県',
          '徳島県',
          '香川県',
          '愛媛県',
          '高知県',
          '福岡県',
          '佐賀県',
          '長崎県',
          '熊本県',
          '大分県',
          '宮崎県',
          '鹿児島県',
          '沖縄県',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ja/address/state_abbr.js': [
      function(require, module, exports) {
        module['exports'] = [
          '1',
          '2',
          '3',
          '4',
          '5',
          '6',
          '7',
          '8',
          '9',
          '10',
          '11',
          '12',
          '13',
          '14',
          '15',
          '16',
          '17',
          '18',
          '19',
          '20',
          '21',
          '22',
          '23',
          '24',
          '25',
          '26',
          '27',
          '28',
          '29',
          '30',
          '31',
          '32',
          '33',
          '34',
          '35',
          '36',
          '37',
          '38',
          '39',
          '40',
          '41',
          '42',
          '43',
          '44',
          '45',
          '46',
          '47',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ja/address/city_prefix.js': [
      function(require, module, exports) {
        module['exports'] = ['北', '東', '西', '南', '新', '湖', '港']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ja/address/city_suffix.js': [
      function(require, module, exports) {
        module['exports'] = ['市', '区', '町', '村']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ja/address/city.js': [
      function(require, module, exports) {
        module['exports'] = [
          '#{city_prefix}#{Name.first_name}#{city_suffix}',
          '#{Name.first_name}#{city_suffix}',
          '#{city_prefix}#{Name.last_name}#{city_suffix}',
          '#{Name.last_name}#{city_suffix}',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ja/address/street_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          '#{Name.first_name}#{street_suffix}',
          '#{Name.last_name}#{street_suffix}',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ja/address/index.js': [
      function(require, module, exports) {
        var address = {}
        module['exports'] = address
        address.postcode = require('./postcode')
        address.state = require('./state')
        address.state_abbr = require('./state_abbr')
        address.city_prefix = require('./city_prefix')
        address.city_suffix = require('./city_suffix')
        address.city = require('./city')
        address.street_name = require('./street_name')
      },
      {
        './postcode':
          '../node_modules/faker/lib/locales/ja/address/postcode.js',
        './state': '../node_modules/faker/lib/locales/ja/address/state.js',
        './state_abbr':
          '../node_modules/faker/lib/locales/ja/address/state_abbr.js',
        './city_prefix':
          '../node_modules/faker/lib/locales/ja/address/city_prefix.js',
        './city_suffix':
          '../node_modules/faker/lib/locales/ja/address/city_suffix.js',
        './city': '../node_modules/faker/lib/locales/ja/address/city.js',
        './street_name':
          '../node_modules/faker/lib/locales/ja/address/street_name.js',
      },
    ],
    '../node_modules/faker/lib/locales/ja/phone_number/formats.js': [
      function(require, module, exports) {
        module['exports'] = [
          '0####-#-####',
          '0###-##-####',
          '0##-###-####',
          '0#-####-####',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ja/phone_number/index.js': [
      function(require, module, exports) {
        var phone_number = {}
        module['exports'] = phone_number
        phone_number.formats = require('./formats')
      },
      {
        './formats':
          '../node_modules/faker/lib/locales/ja/phone_number/formats.js',
      },
    ],
    '../node_modules/faker/lib/locales/ja/cell_phone/formats.js': [
      function(require, module, exports) {
        module['exports'] = [
          '090-####-####',
          '080-####-####',
          '070-####-####',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ja/cell_phone/index.js': [
      function(require, module, exports) {
        var cell_phone = {}
        module['exports'] = cell_phone
        cell_phone.formats = require('./formats')
      },
      {
        './formats':
          '../node_modules/faker/lib/locales/ja/cell_phone/formats.js',
      },
    ],
    '../node_modules/faker/lib/locales/ja/name/last_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          '佐藤',
          '鈴木',
          '高橋',
          '田中',
          '渡辺',
          '伊藤',
          '山本',
          '中村',
          '小林',
          '加藤',
          '吉田',
          '山田',
          '佐々木',
          '山口',
          '斎藤',
          '松本',
          '井上',
          '木村',
          '林',
          '清水',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ja/name/first_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          '大翔',
          '蓮',
          '颯太',
          '樹',
          '大和',
          '陽翔',
          '陸斗',
          '太一',
          '海翔',
          '蒼空',
          '翼',
          '陽菜',
          '結愛',
          '結衣',
          '杏',
          '莉子',
          '美羽',
          '結菜',
          '心愛',
          '愛菜',
          '美咲',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ja/name/name.js': [
      function(require, module, exports) {
        module['exports'] = ['#{last_name} #{first_name}']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ja/name/index.js': [
      function(require, module, exports) {
        var name = {}
        module['exports'] = name
        name.last_name = require('./last_name')
        name.first_name = require('./first_name')
        name.name = require('./name')
      },
      {
        './last_name':
          '../node_modules/faker/lib/locales/ja/name/last_name.js',
        './first_name':
          '../node_modules/faker/lib/locales/ja/name/first_name.js',
        './name': '../node_modules/faker/lib/locales/ja/name/name.js',
      },
    ],
    '../node_modules/faker/lib/locales/ja/index.js': [
      function(require, module, exports) {
        var ja = {}
        module['exports'] = ja
        ja.title = 'Japanese'
        ja.address = require('./address')
        ja.phone_number = require('./phone_number')
        ja.cell_phone = require('./cell_phone')
        ja.name = require('./name')
      },
      {
        './address':
          '../node_modules/faker/lib/locales/ja/address/index.js',
        './phone_number':
          '../node_modules/faker/lib/locales/ja/phone_number/index.js',
        './cell_phone':
          '../node_modules/faker/lib/locales/ja/cell_phone/index.js',
        './name': '../node_modules/faker/lib/locales/ja/name/index.js',
      },
    ],
    '../node_modules/faker/lib/locales/ko/address/postcode.js': [
      function(require, module, exports) {
        module['exports'] = ['###-###']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ko/address/state.js': [
      function(require, module, exports) {
        module['exports'] = [
          '강원',
          '경기',
          '경남',
          '경북',
          '광주',
          '대구',
          '대전',
          '부산',
          '서울',
          '울산',
          '인천',
          '전남',
          '전북',
          '제주',
          '충남',
          '충북',
          '세종',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ko/address/state_abbr.js': [
      function(require, module, exports) {
        module['exports'] = [
          '강원',
          '경기',
          '경남',
          '경북',
          '광주',
          '대구',
          '대전',
          '부산',
          '서울',
          '울산',
          '인천',
          '전남',
          '전북',
          '제주',
          '충남',
          '충북',
          '세종',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ko/address/city_suffix.js': [
      function(require, module, exports) {
        module['exports'] = ['구', '시', '군']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ko/address/city_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          '강릉',
          '양양',
          '인제',
          '광주',
          '구리',
          '부천',
          '밀양',
          '통영',
          '창원',
          '거창',
          '고성',
          '양산',
          '김천',
          '구미',
          '영주',
          '광산',
          '남',
          '북',
          '고창',
          '군산',
          '남원',
          '동작',
          '마포',
          '송파',
          '용산',
          '부평',
          '강화',
          '수성',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ko/address/city.js': [
      function(require, module, exports) {
        module['exports'] = ['#{city_name}#{city_suffix}']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ko/address/street_root.js': [
      function(require, module, exports) {
        module['exports'] = [
          '상계',
          '화곡',
          '신정',
          '목',
          '잠실',
          '면목',
          '주안',
          '안양',
          '중',
          '정왕',
          '구로',
          '신월',
          '연산',
          '부평',
          '창',
          '만수',
          '중계',
          '검단',
          '시흥',
          '상도',
          '방배',
          '장유',
          '상',
          '광명',
          '신길',
          '행신',
          '대명',
          '동탄',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ko/address/street_suffix.js': [
      function(require, module, exports) {
        module['exports'] = ['읍', '면', '동']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ko/address/street_name.js': [
      function(require, module, exports) {
        module['exports'] = ['#{street_root}#{street_suffix}']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ko/address/index.js': [
      function(require, module, exports) {
        var address = {}
        module['exports'] = address
        address.postcode = require('./postcode')
        address.state = require('./state')
        address.state_abbr = require('./state_abbr')
        address.city_suffix = require('./city_suffix')
        address.city_name = require('./city_name')
        address.city = require('./city')
        address.street_root = require('./street_root')
        address.street_suffix = require('./street_suffix')
        address.street_name = require('./street_name')
      },
      {
        './postcode':
          '../node_modules/faker/lib/locales/ko/address/postcode.js',
        './state': '../node_modules/faker/lib/locales/ko/address/state.js',
        './state_abbr':
          '../node_modules/faker/lib/locales/ko/address/state_abbr.js',
        './city_suffix':
          '../node_modules/faker/lib/locales/ko/address/city_suffix.js',
        './city_name':
          '../node_modules/faker/lib/locales/ko/address/city_name.js',
        './city': '../node_modules/faker/lib/locales/ko/address/city.js',
        './street_root':
          '../node_modules/faker/lib/locales/ko/address/street_root.js',
        './street_suffix':
          '../node_modules/faker/lib/locales/ko/address/street_suffix.js',
        './street_name':
          '../node_modules/faker/lib/locales/ko/address/street_name.js',
      },
    ],
    '../node_modules/faker/lib/locales/ko/phone_number/formats.js': [
      function(require, module, exports) {
        module['exports'] = [
          '0#-#####-####',
          '0##-###-####',
          '0##-####-####',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ko/phone_number/index.js': [
      function(require, module, exports) {
        var phone_number = {}
        module['exports'] = phone_number
        phone_number.formats = require('./formats')
      },
      {
        './formats':
          '../node_modules/faker/lib/locales/ko/phone_number/formats.js',
      },
    ],
    '../node_modules/faker/lib/locales/ko/company/suffix.js': [
      function(require, module, exports) {
        module['exports'] = [
          '연구소',
          '게임즈',
          '그룹',
          '전자',
          '물산',
          '코리아',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ko/company/prefix.js': [
      function(require, module, exports) {
        module['exports'] = ['주식회사', '한국']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ko/company/name.js': [
      function(require, module, exports) {
        module['exports'] = [
          '#{prefix} #{Name.first_name}',
          '#{Name.first_name} #{suffix}',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ko/company/index.js': [
      function(require, module, exports) {
        var company = {}
        module['exports'] = company
        company.suffix = require('./suffix')
        company.prefix = require('./prefix')
        company.name = require('./name')
      },
      {
        './suffix':
          '../node_modules/faker/lib/locales/ko/company/suffix.js',
        './prefix':
          '../node_modules/faker/lib/locales/ko/company/prefix.js',
        './name': '../node_modules/faker/lib/locales/ko/company/name.js',
      },
    ],
    '../node_modules/faker/lib/locales/ko/internet/free_email.js': [
      function(require, module, exports) {
        module['exports'] = [
          'gmail.com',
          'yahoo.co.kr',
          'hanmail.net',
          'naver.com',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ko/internet/domain_suffix.js': [
      function(require, module, exports) {
        module['exports'] = [
          'co.kr',
          'com',
          'biz',
          'info',
          'ne.kr',
          'net',
          'or.kr',
          'org',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ko/internet/index.js': [
      function(require, module, exports) {
        var internet = {}
        module['exports'] = internet
        internet.free_email = require('./free_email')
        internet.domain_suffix = require('./domain_suffix')
      },
      {
        './free_email':
          '../node_modules/faker/lib/locales/ko/internet/free_email.js',
        './domain_suffix':
          '../node_modules/faker/lib/locales/ko/internet/domain_suffix.js',
      },
    ],
    '../node_modules/faker/lib/locales/ko/lorem/words.js': [
      function(require, module, exports) {
        module['exports'] = [
          '국가는',
          '법률이',
          '정하는',
          '바에',
          '의하여',
          '재외국민을',
          '보호할',
          '의무를',
          '진다.',
          '모든',
          '국민은',
          '신체의',
          '자유를',
          '가진다.',
          '국가는',
          '전통문화의',
          '계승·발전과',
          '민족문화의',
          '창달에',
          '노력하여야',
          '한다.',
          '통신·방송의',
          '시설기준과',
          '신문의',
          '기능을',
          '보장하기',
          '위하여',
          '필요한',
          '사항은',
          '법률로',
          '정한다.',
          '헌법에',
          '의하여',
          '체결·공포된',
          '조약과',
          '일반적으로',
          '승인된',
          '국제법규는',
          '국내법과',
          '같은',
          '효력을',
          '가진다.',
          '다만,',
          '현행범인인',
          '경우와',
          '장기',
          '3년',
          '이상의',
          '형에',
          '해당하는',
          '죄를',
          '범하고',
          '도피',
          '또는',
          '증거인멸의',
          '염려가',
          '있을',
          '때에는',
          '사후에',
          '영장을',
          '청구할',
          '수',
          '있다.',
          '저작자·발명가·과학기술자와',
          '예술가의',
          '권리는',
          '법률로써',
          '보호한다.',
          '형사피고인은',
          '유죄의',
          '판결이',
          '확정될',
          '때까지는',
          '무죄로',
          '추정된다.',
          '모든',
          '국민은',
          '행위시의',
          '법률에',
          '의하여',
          '범죄를',
          '구성하지',
          '아니하는',
          '행위로',
          '소추되지',
          '아니하며,',
          '동일한',
          '범죄에',
          '대하여',
          '거듭',
          '처벌받지',
          '아니한다.',
          '국가는',
          '평생교육을',
          '진흥하여야',
          '한다.',
          '모든',
          '국민은',
          '사생활의',
          '비밀과',
          '자유를',
          '침해받지',
          '아니한다.',
          '의무교육은',
          '무상으로',
          '한다.',
          '저작자·발명가·과학기술자와',
          '예술가의',
          '권리는',
          '법률로써',
          '보호한다.',
          '국가는',
          '모성의',
          '보호를',
          '위하여',
          '노력하여야',
          '한다.',
          '헌법에',
          '의하여',
          '체결·공포된',
          '조약과',
          '일반적으로',
          '승인된',
          '국제법규는',
          '국내법과',
          '같은',
          '효력을',
          '가진다.',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ko/lorem/index.js': [
      function(require, module, exports) {
        var lorem = {}
        module['exports'] = lorem
        lorem.words = require('./words')
      },
      { './words': '../node_modules/faker/lib/locales/ko/lorem/words.js' },
    ],
    '../node_modules/faker/lib/locales/ko/name/last_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          '김',
          '이',
          '박',
          '최',
          '정',
          '강',
          '조',
          '윤',
          '장',
          '임',
          '오',
          '한',
          '신',
          '서',
          '권',
          '황',
          '안',
          '송',
          '류',
          '홍',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ko/name/first_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          '서연',
          '민서',
          '서현',
          '지우',
          '서윤',
          '지민',
          '수빈',
          '하은',
          '예은',
          '윤서',
          '민준',
          '지후',
          '지훈',
          '준서',
          '현우',
          '예준',
          '건우',
          '현준',
          '민재',
          '우진',
          '은주',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ko/name/name.js': [
      function(require, module, exports) {
        module['exports'] = ['#{last_name} #{first_name}']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ko/name/index.js': [
      function(require, module, exports) {
        var name = {}
        module['exports'] = name
        name.last_name = require('./last_name')
        name.first_name = require('./first_name')
        name.name = require('./name')
      },
      {
        './last_name':
          '../node_modules/faker/lib/locales/ko/name/last_name.js',
        './first_name':
          '../node_modules/faker/lib/locales/ko/name/first_name.js',
        './name': '../node_modules/faker/lib/locales/ko/name/name.js',
      },
    ],
    '../node_modules/faker/lib/locales/ko/index.js': [
      function(require, module, exports) {
        var ko = {}
        module['exports'] = ko
        ko.title = 'Korean'
        ko.address = require('./address')
        ko.phone_number = require('./phone_number')
        ko.company = require('./company')
        ko.internet = require('./internet')
        ko.lorem = require('./lorem')
        ko.name = require('./name')
      },
      {
        './address':
          '../node_modules/faker/lib/locales/ko/address/index.js',
        './phone_number':
          '../node_modules/faker/lib/locales/ko/phone_number/index.js',
        './company':
          '../node_modules/faker/lib/locales/ko/company/index.js',
        './internet':
          '../node_modules/faker/lib/locales/ko/internet/index.js',
        './lorem': '../node_modules/faker/lib/locales/ko/lorem/index.js',
        './name': '../node_modules/faker/lib/locales/ko/name/index.js',
      },
    ],
    '../node_modules/faker/lib/locales/nb_NO/address/city_root.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Fet',
          'Gjes',
          'Høy',
          'Inn',
          'Fager',
          'Lille',
          'Lo',
          'Mal',
          'Nord',
          'Nær',
          'Sand',
          'Sme',
          'Stav',
          'Stor',
          'Tand',
          'Ut',
          'Vest',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/nb_NO/address/city_suffix.js': [
      function(require, module, exports) {
        module['exports'] = [
          'berg',
          'borg',
          'by',
          'bø',
          'dal',
          'eid',
          'fjell',
          'fjord',
          'foss',
          'grunn',
          'hamn',
          'havn',
          'helle',
          'mark',
          'nes',
          'odden',
          'sand',
          'sjøen',
          'stad',
          'strand',
          'strøm',
          'sund',
          'vik',
          'vær',
          'våg',
          'ø',
          'øy',
          'ås',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/nb_NO/address/street_prefix.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Øvre',
          'Nedre',
          'Søndre',
          'Gamle',
          'Østre',
          'Vestre',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/nb_NO/address/street_root.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Eike',
          'Bjørke',
          'Gran',
          'Vass',
          'Furu',
          'Litj',
          'Lille',
          'Høy',
          'Fosse',
          'Elve',
          'Ku',
          'Konvall',
          'Soldugg',
          'Hestemyr',
          'Granitt',
          'Hegge',
          'Rogne',
          'Fiol',
          'Sol',
          'Ting',
          'Malm',
          'Klokker',
          'Preste',
          'Dam',
          'Geiterygg',
          'Bekke',
          'Berg',
          'Kirke',
          'Kors',
          'Bru',
          'Blåveis',
          'Torg',
          'Sjø',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/nb_NO/address/street_suffix.js': [
      function(require, module, exports) {
        module['exports'] = [
          'alléen',
          'bakken',
          'berget',
          'bråten',
          'eggen',
          'engen',
          'ekra',
          'faret',
          'flata',
          'gata',
          'gjerdet',
          'grenda',
          'gropa',
          'hagen',
          'haugen',
          'havna',
          'holtet',
          'høgda',
          'jordet',
          'kollen',
          'kroken',
          'lia',
          'lunden',
          'lyngen',
          'løkka',
          'marka',
          'moen',
          'myra',
          'plassen',
          'ringen',
          'roa',
          'røa',
          'skogen',
          'skrenten',
          'spranget',
          'stien',
          'stranda',
          'stubben',
          'stykket',
          'svingen',
          'tjernet',
          'toppen',
          'tunet',
          'vollen',
          'vika',
          'åsen',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/nb_NO/address/common_street_suffix.js': [
      function(require, module, exports) {
        module['exports'] = [
          'sgate',
          'svei',
          's Gate',
          's Vei',
          'gata',
          'veien',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/nb_NO/address/building_number.js': [
      function(require, module, exports) {
        module['exports'] = ['#', '##']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/nb_NO/address/secondary_address.js': [
      function(require, module, exports) {
        module['exports'] = ['Leil. ###', 'Oppgang A', 'Oppgang B']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/nb_NO/address/postcode.js': [
      function(require, module, exports) {
        module['exports'] = ['####', '####', '####', '0###']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/nb_NO/address/state.js': [
      function(require, module, exports) {
        module['exports'] = ['']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/nb_NO/address/city.js': [
      function(require, module, exports) {
        module['exports'] = ['#{city_root}#{city_suffix}']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/nb_NO/address/street_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          '#{street_root}#{street_suffix}',
          '#{street_prefix} #{street_root}#{street_suffix}',
          '#{Name.first_name}#{common_street_suffix}',
          '#{Name.last_name}#{common_street_suffix}',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/nb_NO/address/street_address.js': [
      function(require, module, exports) {
        module['exports'] = ['#{street_name} #{building_number}']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/nb_NO/address/default_country.js': [
      function(require, module, exports) {
        module['exports'] = ['Norge']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/nb_NO/address/index.js': [
      function(require, module, exports) {
        var address = {}
        module['exports'] = address
        address.city_root = require('./city_root')
        address.city_suffix = require('./city_suffix')
        address.street_prefix = require('./street_prefix')
        address.street_root = require('./street_root')
        address.street_suffix = require('./street_suffix')
        address.common_street_suffix = require('./common_street_suffix')
        address.building_number = require('./building_number')
        address.secondary_address = require('./secondary_address')
        address.postcode = require('./postcode')
        address.state = require('./state')
        address.city = require('./city')
        address.street_name = require('./street_name')
        address.street_address = require('./street_address')
        address.default_country = require('./default_country')
      },
      {
        './city_root':
          '../node_modules/faker/lib/locales/nb_NO/address/city_root.js',
        './city_suffix':
          '../node_modules/faker/lib/locales/nb_NO/address/city_suffix.js',
        './street_prefix':
          '../node_modules/faker/lib/locales/nb_NO/address/street_prefix.js',
        './street_root':
          '../node_modules/faker/lib/locales/nb_NO/address/street_root.js',
        './street_suffix':
          '../node_modules/faker/lib/locales/nb_NO/address/street_suffix.js',
        './common_street_suffix':
          '../node_modules/faker/lib/locales/nb_NO/address/common_street_suffix.js',
        './building_number':
          '../node_modules/faker/lib/locales/nb_NO/address/building_number.js',
        './secondary_address':
          '../node_modules/faker/lib/locales/nb_NO/address/secondary_address.js',
        './postcode':
          '../node_modules/faker/lib/locales/nb_NO/address/postcode.js',
        './state':
          '../node_modules/faker/lib/locales/nb_NO/address/state.js',
        './city':
          '../node_modules/faker/lib/locales/nb_NO/address/city.js',
        './street_name':
          '../node_modules/faker/lib/locales/nb_NO/address/street_name.js',
        './street_address':
          '../node_modules/faker/lib/locales/nb_NO/address/street_address.js',
        './default_country':
          '../node_modules/faker/lib/locales/nb_NO/address/default_country.js',
      },
    ],
    '../node_modules/faker/lib/locales/nb_NO/company/suffix.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Gruppen',
          'AS',
          'ASA',
          'BA',
          'RFH',
          'og Sønner',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/nb_NO/company/name.js': [
      function(require, module, exports) {
        module['exports'] = [
          '#{Name.last_name} #{suffix}',
          '#{Name.last_name}-#{Name.last_name}',
          '#{Name.last_name}, #{Name.last_name} og #{Name.last_name}',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/nb_NO/company/index.js': [
      function(require, module, exports) {
        var company = {}
        module['exports'] = company
        company.suffix = require('./suffix')
        company.name = require('./name')
      },
      {
        './suffix':
          '../node_modules/faker/lib/locales/nb_NO/company/suffix.js',
        './name':
          '../node_modules/faker/lib/locales/nb_NO/company/name.js',
      },
    ],
    '../node_modules/faker/lib/locales/nb_NO/internet/domain_suffix.js': [
      function(require, module, exports) {
        module['exports'] = ['no', 'com', 'net', 'org']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/nb_NO/internet/index.js': [
      function(require, module, exports) {
        var internet = {}
        module['exports'] = internet
        internet.domain_suffix = require('./domain_suffix')
      },
      {
        './domain_suffix':
          '../node_modules/faker/lib/locales/nb_NO/internet/domain_suffix.js',
      },
    ],
    '../node_modules/faker/lib/locales/nb_NO/name/first_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Emma',
          'Sara',
          'Thea',
          'Ida',
          'Julie',
          'Nora',
          'Emilie',
          'Ingrid',
          'Hanna',
          'Maria',
          'Sofie',
          'Anna',
          'Malin',
          'Amalie',
          'Vilde',
          'Frida',
          'Andrea',
          'Tuva',
          'Victoria',
          'Mia',
          'Karoline',
          'Mathilde',
          'Martine',
          'Linnea',
          'Marte',
          'Hedda',
          'Marie',
          'Helene',
          'Silje',
          'Leah',
          'Maja',
          'Elise',
          'Oda',
          'Kristine',
          'Aurora',
          'Kaja',
          'Camilla',
          'Mari',
          'Maren',
          'Mina',
          'Selma',
          'Jenny',
          'Celine',
          'Eline',
          'Sunniva',
          'Natalie',
          'Tiril',
          'Synne',
          'Sandra',
          'Madeleine',
          'Markus',
          'Mathias',
          'Kristian',
          'Jonas',
          'Andreas',
          'Alexander',
          'Martin',
          'Sander',
          'Daniel',
          'Magnus',
          'Henrik',
          'Tobias',
          'Kristoffer',
          'Emil',
          'Adrian',
          'Sebastian',
          'Marius',
          'Elias',
          'Fredrik',
          'Thomas',
          'Sondre',
          'Benjamin',
          'Jakob',
          'Oliver',
          'Lucas',
          'Oskar',
          'Nikolai',
          'Filip',
          'Mats',
          'William',
          'Erik',
          'Simen',
          'Ole',
          'Eirik',
          'Isak',
          'Kasper',
          'Noah',
          'Lars',
          'Joakim',
          'Johannes',
          'Håkon',
          'Sindre',
          'Jørgen',
          'Herman',
          'Anders',
          'Jonathan',
          'Even',
          'Theodor',
          'Mikkel',
          'Aksel',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/nb_NO/name/feminine_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Emma',
          'Sara',
          'Thea',
          'Ida',
          'Julie',
          'Nora',
          'Emilie',
          'Ingrid',
          'Hanna',
          'Maria',
          'Sofie',
          'Anna',
          'Malin',
          'Amalie',
          'Vilde',
          'Frida',
          'Andrea',
          'Tuva',
          'Victoria',
          'Mia',
          'Karoline',
          'Mathilde',
          'Martine',
          'Linnea',
          'Marte',
          'Hedda',
          'Marie',
          'Helene',
          'Silje',
          'Leah',
          'Maja',
          'Elise',
          'Oda',
          'Kristine',
          'Aurora',
          'Kaja',
          'Camilla',
          'Mari',
          'Maren',
          'Mina',
          'Selma',
          'Jenny',
          'Celine',
          'Eline',
          'Sunniva',
          'Natalie',
          'Tiril',
          'Synne',
          'Sandra',
          'Madeleine',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/nb_NO/name/masculine_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Markus',
          'Mathias',
          'Kristian',
          'Jonas',
          'Andreas',
          'Alexander',
          'Martin',
          'Sander',
          'Daniel',
          'Magnus',
          'Henrik',
          'Tobias',
          'Kristoffer',
          'Emil',
          'Adrian',
          'Sebastian',
          'Marius',
          'Elias',
          'Fredrik',
          'Thomas',
          'Sondre',
          'Benjamin',
          'Jakob',
          'Oliver',
          'Lucas',
          'Oskar',
          'Nikolai',
          'Filip',
          'Mats',
          'William',
          'Erik',
          'Simen',
          'Ole',
          'Eirik',
          'Isak',
          'Kasper',
          'Noah',
          'Lars',
          'Joakim',
          'Johannes',
          'Håkon',
          'Sindre',
          'Jørgen',
          'Herman',
          'Anders',
          'Jonathan',
          'Even',
          'Theodor',
          'Mikkel',
          'Aksel',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/nb_NO/name/last_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Johansen',
          'Hansen',
          'Andersen',
          'Kristiansen',
          'Larsen',
          'Olsen',
          'Solberg',
          'Andresen',
          'Pedersen',
          'Nilsen',
          'Berg',
          'Halvorsen',
          'Karlsen',
          'Svendsen',
          'Jensen',
          'Haugen',
          'Martinsen',
          'Eriksen',
          'Sørensen',
          'Johnsen',
          'Myhrer',
          'Johannessen',
          'Nielsen',
          'Hagen',
          'Pettersen',
          'Bakke',
          'Skuterud',
          'Løken',
          'Gundersen',
          'Strand',
          'Jørgensen',
          'Kvarme',
          'Røed',
          'Sæther',
          'Stensrud',
          'Moe',
          'Kristoffersen',
          'Jakobsen',
          'Holm',
          'Aas',
          'Lie',
          'Moen',
          'Andreassen',
          'Vedvik',
          'Nguyen',
          'Jacobsen',
          'Torgersen',
          'Ruud',
          'Krogh',
          'Christiansen',
          'Bjerke',
          'Aalerud',
          'Borge',
          'Sørlie',
          'Berge',
          'Østli',
          'Ødegård',
          'Torp',
          'Henriksen',
          'Haukelidsæter',
          'Fjeld',
          'Danielsen',
          'Aasen',
          'Fredriksen',
          'Dahl',
          'Berntsen',
          'Arnesen',
          'Wold',
          'Thoresen',
          'Solheim',
          'Skoglund',
          'Bakken',
          'Amundsen',
          'Solli',
          'Smogeli',
          'Kristensen',
          'Glosli',
          'Fossum',
          'Evensen',
          'Eide',
          'Carlsen',
          'Østby',
          'Vegge',
          'Tangen',
          'Smedsrud',
          'Olstad',
          'Lunde',
          'Kleven',
          'Huseby',
          'Bjørnstad',
          'Ryan',
          'Rasmussen',
          'Nygård',
          'Nordskaug',
          'Nordby',
          'Mathisen',
          'Hopland',
          'Gran',
          'Finstad',
          'Edvardsen',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/nb_NO/name/prefix.js': [
      function(require, module, exports) {
        module['exports'] = ['Dr.', 'Prof.']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/nb_NO/name/suffix.js': [
      function(require, module, exports) {
        module['exports'] = ['Jr.', 'Sr.', 'I', 'II', 'III', 'IV', 'V']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/nb_NO/name/name.js': [
      function(require, module, exports) {
        module['exports'] = [
          '#{prefix} #{first_name} #{last_name}',
          '#{first_name} #{last_name} #{suffix}',
          '#{feminine_name} #{feminine_name} #{last_name}',
          '#{masculine_name} #{masculine_name} #{last_name}',
          '#{first_name} #{last_name} #{last_name}',
          '#{first_name} #{last_name}',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/nb_NO/name/index.js': [
      function(require, module, exports) {
        var name = {}
        module['exports'] = name
        name.first_name = require('./first_name')
        name.feminine_name = require('./feminine_name')
        name.masculine_name = require('./masculine_name')
        name.last_name = require('./last_name')
        name.prefix = require('./prefix')
        name.suffix = require('./suffix')
        name.name = require('./name')
      },
      {
        './first_name':
          '../node_modules/faker/lib/locales/nb_NO/name/first_name.js',
        './feminine_name':
          '../node_modules/faker/lib/locales/nb_NO/name/feminine_name.js',
        './masculine_name':
          '../node_modules/faker/lib/locales/nb_NO/name/masculine_name.js',
        './last_name':
          '../node_modules/faker/lib/locales/nb_NO/name/last_name.js',
        './prefix':
          '../node_modules/faker/lib/locales/nb_NO/name/prefix.js',
        './suffix':
          '../node_modules/faker/lib/locales/nb_NO/name/suffix.js',
        './name': '../node_modules/faker/lib/locales/nb_NO/name/name.js',
      },
    ],
    '../node_modules/faker/lib/locales/nb_NO/phone_number/formats.js': [
      function(require, module, exports) {
        module['exports'] = [
          '########',
          '## ## ## ##',
          '### ## ###',
          '+47 ## ## ## ##',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/nb_NO/phone_number/index.js': [
      function(require, module, exports) {
        var phone_number = {}
        module['exports'] = phone_number
        phone_number.formats = require('./formats')
      },
      {
        './formats':
          '../node_modules/faker/lib/locales/nb_NO/phone_number/formats.js',
      },
    ],
    '../node_modules/faker/lib/locales/nb_NO/index.js': [
      function(require, module, exports) {
        var nb_NO = {}
        module['exports'] = nb_NO
        nb_NO.title = 'Norwegian'
        nb_NO.address = require('./address')
        nb_NO.company = require('./company')
        nb_NO.internet = require('./internet')
        nb_NO.name = require('./name')
        nb_NO.phone_number = require('./phone_number')
      },
      {
        './address':
          '../node_modules/faker/lib/locales/nb_NO/address/index.js',
        './company':
          '../node_modules/faker/lib/locales/nb_NO/company/index.js',
        './internet':
          '../node_modules/faker/lib/locales/nb_NO/internet/index.js',
        './name': '../node_modules/faker/lib/locales/nb_NO/name/index.js',
        './phone_number':
          '../node_modules/faker/lib/locales/nb_NO/phone_number/index.js',
      },
    ],
    '../node_modules/faker/lib/locales/nep/name/first_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Aarav',
          'Ajita',
          'Amit',
          'Amita',
          'Amrit',
          'Arijit',
          'Ashmi',
          'Asmita',
          'Bibek',
          'Bijay',
          'Bikash',
          'Bina',
          'Bishal',
          'Bishnu',
          'Buddha',
          'Deepika',
          'Dipendra',
          'Gagan',
          'Ganesh',
          'Khem',
          'Krishna',
          'Laxmi',
          'Manisha',
          'Nabin',
          'Nikita',
          'Niraj',
          'Nischal',
          'Padam',
          'Pooja',
          'Prabin',
          'Prakash',
          'Prashant',
          'Prem',
          'Purna',
          'Rajendra',
          'Rajina',
          'Raju',
          'Rakesh',
          'Ranjan',
          'Ratna',
          'Sagar',
          'Sandeep',
          'Sanjay',
          'Santosh',
          'Sarita',
          'Shilpa',
          'Shirisha',
          'Shristi',
          'Siddhartha',
          'Subash',
          'Sumeet',
          'Sunita',
          'Suraj',
          'Susan',
          'Sushant',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/nep/name/last_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Adhikari',
          'Aryal',
          'Baral',
          'Basnet',
          'Bastola',
          'Basynat',
          'Bhandari',
          'Bhattarai',
          'Chettri',
          'Devkota',
          'Dhakal',
          'Dongol',
          'Ghale',
          'Gurung',
          'Gyawali',
          'Hamal',
          'Jung',
          'KC',
          'Kafle',
          'Karki',
          'Khadka',
          'Koirala',
          'Lama',
          'Limbu',
          'Magar',
          'Maharjan',
          'Niroula',
          'Pandey',
          'Pradhan',
          'Rana',
          'Raut',
          'Sai',
          'Shai',
          'Shakya',
          'Sherpa',
          'Shrestha',
          'Subedi',
          'Tamang',
          'Thapa',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/nep/name/index.js': [
      function(require, module, exports) {
        var name = {}
        module['exports'] = name
        name.first_name = require('./first_name')
        name.last_name = require('./last_name')
      },
      {
        './first_name':
          '../node_modules/faker/lib/locales/nep/name/first_name.js',
        './last_name':
          '../node_modules/faker/lib/locales/nep/name/last_name.js',
      },
    ],
    '../node_modules/faker/lib/locales/nep/address/postcode.js': [
      function(require, module, exports) {
        module['exports'] = [0]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/nep/address/state.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Baglung',
          'Banke',
          'Bara',
          'Bardiya',
          'Bhaktapur',
          'Bhojupu',
          'Chitwan',
          'Dailekh',
          'Dang',
          'Dhading',
          'Dhankuta',
          'Dhanusa',
          'Dolakha',
          'Dolpha',
          'Gorkha',
          'Gulmi',
          'Humla',
          'Ilam',
          'Jajarkot',
          'Jhapa',
          'Jumla',
          'Kabhrepalanchok',
          'Kalikot',
          'Kapilvastu',
          'Kaski',
          'Kathmandu',
          'Lalitpur',
          'Lamjung',
          'Manang',
          'Mohottari',
          'Morang',
          'Mugu',
          'Mustang',
          'Myagdi',
          'Nawalparasi',
          'Nuwakot',
          'Palpa',
          'Parbat',
          'Parsa',
          'Ramechhap',
          'Rauswa',
          'Rautahat',
          'Rolpa',
          'Rupandehi',
          'Sankhuwasabha',
          'Sarlahi',
          'Sindhuli',
          'Sindhupalchok',
          'Sunsari',
          'Surket',
          'Syangja',
          'Tanahu',
          'Terhathum',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/nep/address/city.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Bhaktapur',
          'Biratnagar',
          'Birendranagar',
          'Birgunj',
          'Butwal',
          'Damak',
          'Dharan',
          'Gaur',
          'Gorkha',
          'Hetauda',
          'Itahari',
          'Janakpur',
          'Kathmandu',
          'Lahan',
          'Nepalgunj',
          'Pokhara',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/nep/address/default_country.js': [
      function(require, module, exports) {
        module['exports'] = ['Nepal']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/nep/address/index.js': [
      function(require, module, exports) {
        var address = {}
        module['exports'] = address
        address.postcode = require('./postcode')
        address.state = require('./state')
        address.city = require('./city')
        address.default_country = require('./default_country')
      },
      {
        './postcode':
          '../node_modules/faker/lib/locales/nep/address/postcode.js',
        './state':
          '../node_modules/faker/lib/locales/nep/address/state.js',
        './city': '../node_modules/faker/lib/locales/nep/address/city.js',
        './default_country':
          '../node_modules/faker/lib/locales/nep/address/default_country.js',
      },
    ],
    '../node_modules/faker/lib/locales/nep/internet/free_email.js': [
      function(require, module, exports) {
        module['exports'] = [
          'worldlink.com.np',
          'gmail.com',
          'yahoo.com',
          'hotmail.com',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/nep/internet/domain_suffix.js': [
      function(require, module, exports) {
        module['exports'] = ['np', 'com', 'info', 'net', 'org']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/nep/internet/index.js': [
      function(require, module, exports) {
        var internet = {}
        module['exports'] = internet
        internet.free_email = require('./free_email')
        internet.domain_suffix = require('./domain_suffix')
      },
      {
        './free_email':
          '../node_modules/faker/lib/locales/nep/internet/free_email.js',
        './domain_suffix':
          '../node_modules/faker/lib/locales/nep/internet/domain_suffix.js',
      },
    ],
    '../node_modules/faker/lib/locales/nep/company/suffix.js': [
      function(require, module, exports) {
        module['exports'] = ['Pvt Ltd', 'Group', 'Ltd', 'Limited']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/nep/company/index.js': [
      function(require, module, exports) {
        var company = {}
        module['exports'] = company
        company.suffix = require('./suffix')
      },
      {
        './suffix':
          '../node_modules/faker/lib/locales/nep/company/suffix.js',
      },
    ],
    '../node_modules/faker/lib/locales/nep/phone_number/formats.js': [
      function(require, module, exports) {
        module['exports'] = [
          '##-#######',
          '+977-#-#######',
          '+977########',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/nep/phone_number/index.js': [
      function(require, module, exports) {
        var phone_number = {}
        module['exports'] = phone_number
        phone_number.formats = require('./formats')
      },
      {
        './formats':
          '../node_modules/faker/lib/locales/nep/phone_number/formats.js',
      },
    ],
    '../node_modules/faker/lib/locales/nep/index.js': [
      function(require, module, exports) {
        var nep = {}
        module['exports'] = nep
        nep.title = 'Nepalese'
        nep.name = require('./name')
        nep.address = require('./address')
        nep.internet = require('./internet')
        nep.company = require('./company')
        nep.phone_number = require('./phone_number')
      },
      {
        './name': '../node_modules/faker/lib/locales/nep/name/index.js',
        './address':
          '../node_modules/faker/lib/locales/nep/address/index.js',
        './internet':
          '../node_modules/faker/lib/locales/nep/internet/index.js',
        './company':
          '../node_modules/faker/lib/locales/nep/company/index.js',
        './phone_number':
          '../node_modules/faker/lib/locales/nep/phone_number/index.js',
      },
    ],
    '../node_modules/faker/lib/locales/nl/address/city_prefix.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Aagte',
          'Aal',
          'Aalden',
          'Aals',
          'Aalst',
          'Aalsum',
          'Aanschot',
          'Aarden',
          'Aarle',
          'Abbe',
          'Abbegea',
          'Abben',
          'Abbestede',
          'Abcoven',
          'Absdale',
          'Abts',
          'Acht',
          'Achter',
          'Achterste',
          'Achtmaal',
          'Achttien',
          'Acquoy',
          'Aduard',
          'Aduarder',
          'Aekinga',
          'Aerde',
          'Aerden',
          'Aerdt',
          'Afferden',
          'Aijen',
          'Akersloot',
          'Akker',
          'Akkerput',
          'Akkrun',
          'Akmarijp',
          'Aldeboarn',
          'Aldegae',
          'Aldtsjerk',
          'Aling',
          'Alkmaar',
          'Allersma',
          'Allinga',
          'Almere',
          'Alphen',
          'Altena',
          'Alteveer',
          'Alting',
          'Altweert',
          'Alverna',
          'Ameide',
          'Amerika',
          'Amerongen',
          'Ammerstol',
          'Ams',
          'Amster',
          'Andel',
          'Angeren',
          'Anholt',
          'Anjum',
          'Anke',
          'Ankum',
          'Anna',
          'Annendaal',
          'Anneville',
          'Anreep',
          'Ansen',
          'Apeldoorn',
          'Apen',
          'Appel',
          'Appen',
          'Arcen',
          'Archem',
          'Arendnest',
          'Arensge',
          'Arkens',
          'Armweide',
          'Arnhem',
          'Arnoud',
          'Arriën',
          'Arriër',
          'Arum',
          'Arwerd',
          'Asch',
          'Asenray',
          'Asperen',
          'Asschat',
          'Assel',
          'Asselt',
          'Assen',
          'Asten',
          'Atze',
          'Augs',
          'Averlo',
          'Avest',
          'Azelo',
          'Azewijn',
          'Ba',
          'Baaium',
          'Baak',
          'Baaks',
          'Baal',
          'Baamsum',
          'Baan',
          'Baard',
          'Baarder',
          'Baarle',
          'Baarlo',
          'Baars',
          'Baarschot',
          'Baexem',
          'Baflo',
          'Bahr',
          'Bakel',
          'Bakelse',
          'Bakertand',
          'Bakke',
          'Bakkerom',
          'Balgoij',
          'Balinge',
          'Ballast',
          'Balleman',
          'Ballum',
          'Balma',
          'Bane',
          'Bankert',
          'Bantega',
          'Bare',
          'Bargebek',
          'Barlage',
          'Barlaque',
          'Barlo',
          'Barnflair',
          'Barrier',
          'Bars',
          'Basse',
          'Basser',
          'Baten',
          'Bath',
          'Bathmen',
          'Bavinkel',
          'Bazuin',
          'Bears',
          'Beckum',
          'Bedaf',
          'Bedum',
          'Beekb',
          'Beekkant',
          'Beemdkant',
          'Beemte',
          'Beertsen',
          'Beerze',
          'Beerzer',
          'Beesd',
          'Beetgum',
          'Beetgumer',
          'Behelp',
          'Beilen',
          'Beinum',
          'Beke',
          'Beldert',
          'Belgen',
          'Belgeren',
          'Belt',
          'Belvert',
          'Bemmel',
          'Bemmer',
          'Benderse',
          'Beneden',
          'Benne',
          'Bennekom',
          'Bent',
          'Bente',
          'Benthem',
          'Berg',
          'Bergakker',
          'Bergen',
          'Bergens',
          'Bergerden',
          'Bergharen',
          'Berghem',
          'Berghum',
          'Bergstoep',
          'Berik',
          'Beringe',
          'Berk',
          'Berke',
          'Berken',
          'Berkt',
          'Berlicum',
          'Bern',
          'Besse',
          'Besthmen',
          'Beswerd',
          'Bethlehem',
          'Beugt',
          'Beuke',
          'Beun',
          'Beusb',
          'Beusichem',
          'Bever',
          'Bidding',
          'Biert',
          'Bierum',
          'Biessum',
          'Biest',
          'Biezen',
          'Bigge',
          'Bijster',
          'Bijsteren',
          'Billing',
          'Bilt',
          'Bingerden',
          'Bisselt',
          'Bissen',
          'Blaker',
          'Blaricum',
          'Blauhûs',
          'Blauw',
          'Blauwe',
          'Blauwen',
          'Bleijen',
          'Bleijs',
          'Blekslage',
          'Blenkert',
          'Blerick',
          'Blessum',
          'Blije',
          'Blijham',
          'Blijnse',
          'Blok',
          'Blokken',
          'Blokum',
          'Boazum',
          'Boberden',
          'Bocholtz',
          'Bocht',
          'Boeiink',
          'Boek',
          'Boekel',
          'Boekelo',
          'Boekelte',
          'Boekend',
          'Boer',
          'Boerakker',
          'Boerelaan',
          'Boeren',
          'Boerengat',
          'Boerenhol',
          'Boerhaar',
          'Boijl',
          'Boks',
          'Boksum',
          'Bokt',
          'Bollinga',
          'Bols',
          'Bolst',
          'Bolt',
          'Bommerig',
          'Bong',
          'Bonkwert',
          'Bonner',
          'Bonrepas',
          'Bontebok',
          'Boomen',
          'Boord',
          'Borger',
          'Borgharen',
          'Borgs',
          'Borgweg',
          'Borkel',
          'Borkeld',
          'Born',
          'Borne',
          'Borneo',
          'Bornwird',
          'Bos',
          'Boschkens',
          'Bosje',
          'Bosjes',
          'Boskamp',
          'Boskant',
          'Boskoop',
          'Boslust',
          'Bosschen',
          'Bosscher',
          'Bosven',
          'Boter',
          'Botshoofd',
          'Boukoul',
          'Bourtange',
          'Boven',
          'Bovenstad',
          'Boxtel',
          'Braak',
          'Braamt',
          'Brabander',
          'Brakel',
          'Brand',
          'Brande',
          'Brandt',
          'Brantgum',
          'Breda',
          'Brede',
          'Bree',
          'Breede',
          'Breedeweg',
          'Breehees',
          'Breezand',
          'Brem',
          'Breskens',
          'Breugel',
          'Breukele',
          'Breyvin',
          'Brielle',
          'Brigdamme',
          'Brij',
          'Brillerij',
          'Briltil',
          'Brinkmans',
          'Britsum',
          'Britswert',
          'Broek',
          'Broekens',
          'Broekkant',
          'Brommelen',
          'Brons',
          'Bruchem',
          'Bruggen',
          'Brugger',
          'Bruil',
          'Bruinisse',
          'Bruister',
          'Brumhold',
          'Brunssum',
          'Brunsting',
          'Bruntinge',
          'Buchten',
          'Buggenum',
          'Buis',
          'Buiten',
          'Bulkenaar',
          'Bult',
          'Bultinge',
          'Bunne',
          'Bunnik',
          'Burdaard',
          'Burger',
          'Burgh',
          'Burgt',
          'Burgum',
          'Burgwerd',
          'Burstum',
          'Burum',
          'Bussel',
          'Busselte',
          'Busser',
          'Buttinge',
          'Buurtje',
          'Cadier',
          'Cadzand',
          'Calfven',
          'Calslagen',
          'Caluna',
          'Camerig',
          'Capelle',
          'Carnisse',
          'Cartils',
          'Castelré',
          'Castenray',
          'Castert',
          'Castricum',
          'Catsop',
          'Chaam',
          'Clinge',
          'Coevorden',
          'Colmont',
          'Cornjum',
          'Cornwerd',
          'Cottessen',
          'Crapoel',
          'Crau',
          'Crix',
          'Crob',
          'Croy',
          'Culemborg',
          'Daarle',
          'Dale',
          'Dalem',
          'Dalen',
          'Daler',
          'Dalerend',
          'Dalerpeel',
          'Dallinge',
          'Damwâld',
          'Daniken',
          'Darp',
          'Dassemus',
          'Dearsum',
          'Dedgum',
          'Deelen',
          'Deelse',
          'Deelshurk',
          'Deense',
          'Deest',
          'Deil',
          'Deinum',
          'Dekes',
          'Dekkers',
          'Del',
          'Delden',
          'Delf',
          'Delft',
          'Dellen',
          'Delwijnen',
          'Demen',
          'Den ',
          'Deursen',
          'Deuteren',
          'Deventer',
          'Dieden',
          'Diemen',
          'Diepen',
          'Diependal',
          'Diepswal',
          'Diermen',
          'Dieskant',
          'Dieteren',
          'Diever',
          'Dijken',
          'Dijker',
          'Dijkster',
          'Dijkwel',
          'Dintelsas',
          'Dinther',
          'Dintherse',
          'Diphoorn',
          'Dirkshorn',
          'Dis',
          'Diunt',
          'Doenrade',
          'Does',
          'Doeveren',
          'Doezum',
          'Doijum',
          'Dokkum',
          'Doldersum',
          'Dom',
          'Dommelen',
          'Donderen',
          'Dongen',
          'Donia',
          'Doniaga',
          'Donzel',
          'Dood',
          'Doodstil',
          'Doon',
          'Doorn',
          'Doornen',
          'Doornik',
          'Doorning',
          'Doorwerth',
          'Doosje',
          'Dorkwerd',
          'Dorst',
          'Dorther',
          'Douverge',
          'Douwen',
          'Draai',
          'Drachten',
          'Dreischor',
          'Drie',
          'Drieboere',
          'Driehuis',
          'Driene',
          'Dries',
          'Driewegen',
          'Driezum',
          'Drieën',
          'Drijber',
          'Drimmelen',
          'Drogeham',
          'Drogt',
          'Dronrijp',
          'Dronten',
          'Druif',
          'Drunen',
          'Druten',
          'Drylts',
          'Duifhuis',
          'Duinen',
          'Duiven',
          'Duizel',
          'Duizend',
          'Dulder',
          'Dunsborg',
          'Dussen',
          'Duur',
          'Duurends',
          'Eagum',
          'Earnewâld',
          'Easterein',
          'Eastermar',
          'Easthim',
          'Echt',
          'Echten',
          'Echtener',
          'Echter',
          'Eder',
          'Eede',
          'Eefsele',
          'Eekt',
          'Eekwerd',
          'Eelde',
          'Eelen',
          'Eems',
          'Eemster',
          'Eemten',
          'Een',
          'Eenigen',
          'Eenrum',
          'Eenum',
          'Eerde',
          'Eersel',
          'Eerste',
          'Ees',
          'Eesterga',
          'Effen',
          'Egchel',
          'Egede',
          'Egmond',
          'Egypte',
          'Eikelen',
          'Eikelhof',
          'Eimeren',
          'Eindewege',
          'Eindje',
          'Ekamp',
          'Elde',
          'Elden',
          'Eldik',
          'Eldrik',
          'Elft',
          'Elkerzee',
          'Ellemeet',
          'Eller',
          'Ellerhei',
          'Ellersing',
          'Elsen',
          'Elshof',
          'Elspeet',
          'Elst',
          'Elsteren',
          'Elzet',
          'Emmeloord',
          'Emmen',
          'Empel',
          'Endepoel',
          'Eng',
          'Enge',
          'Engel',
          'Engelbert',
          'Engelen',
          'Engelum',
          'Englum',
          'Engwegen',
          'Engwierum',
          'Enk',
          'Enschedé',
          'Enspijk',
          'Enumatil',
          'Enzelens',
          'Eper',
          'Eppen',
          'Erichem',
          'Erlecom',
          'Ermelo',
          'Ermer',
          'Escharen',
          'Eschoten',
          'Espelo',
          'Essen',
          'Etenaken',
          'Etzenrade',
          'Eursing',
          'Eursinge',
          'Euverem',
          'Ever',
          'Everd',
          'Everlo',
          'Everse',
          'Ewer',
          'Ewinkel',
          'Exmorra',
          'Eygels',
          'Eyser',
          'Ezinge',
          'Ezuma',
          'Faan',
          'Falom',
          'Farmsum',
          'Fatum',
          'Feerwerd',
          'Fel',
          'Ferwert',
          'Fiemel',
          'Fijfhûs',
          'Finke',
          'Finkum',
          'Flieren',
          'Flânsum',
          'Fokkers',
          'Follega',
          'Folsgeare',
          'Formerum',
          'Fort',
          'Fortmond',
          'Foudgum',
          'Fraamklap',
          'Frankhuis',
          'Frankrijk',
          'Fransum',
          'Friens',
          'Frytum',
          'Fûns',
          'Gaag',
          'Gaanderen',
          'Gaar',
          'Gaast',
          'Gaasten',
          'Gaastmar',
          'Gaete',
          'Gagel',
          'Galder',
          'Gameren',
          'Gammelke',
          'Ganzert',
          'Gapinge',
          'Garminge',
          'Garnwerd',
          'Garre',
          'Garrels',
          'Garst',
          'Garyp',
          'Gassel',
          'Gasthuis',
          'Gawege',
          'Gebergte',
          'Geefs',
          'Geen',
          'Geer',
          'Gees',
          'Geeuwen',
          'Geffen',
          'Gelders',
          'Gelderse',
          'Geleen',
          'Gelkenes',
          'Gellicum',
          'Gemaal',
          'Gement',
          'Gemert',
          'Gemonde',
          'Gendt',
          'Geneijgen',
          'Genen',
          'Gening',
          'Genne',
          'Gennep',
          'Genooi',
          'Gerheggen',
          'Gerner',
          'Gersloot',
          'Gerven',
          'Gerwen',
          'Geulhem',
          'Gever',
          'Geverik',
          'Gewande',
          'Giers',
          'Giessen',
          'Gietelo',
          'Giethmen',
          'Giethoorn',
          'Gijbe',
          'Gijsselte',
          'Gijzel',
          'Gilze',
          'Ginkel',
          'Ginnum',
          'Glaner',
          'Goaiïngea',
          'Godlinze',
          'Goes',
          'Goilberd',
          'Goirle',
          'Goldhoorn',
          'Gooium',
          'Goor',
          'Gorinchem',
          'Gorp',
          'Gortel',
          'Gouda',
          'Gouderak',
          'Goudseweg',
          'Goënga',
          'Graaf',
          'Graauw',
          'Gracht',
          'Graet',
          'Graf',
          'Grafwegen',
          'Gras',
          'Graspeel',
          'Graszode',
          'Grathem',
          'Grauwe',
          'Grave',
          'Grazen',
          'Greonterp',
          'Greup',
          'Griete',
          'Grijps',
          'Grits',
          'Groe',
          'Groede',
          'Groen',
          'Groenekan',
          'Groeneweg',
          'Groenlo',
          'Groep',
          'Groes',
          'Groessen',
          'Groet',
          'Groeve',
          'Groeze',
          'Gron',
          'Groot',
          'Groote',
          'Grote',
          'Grotel',
          'Grou',
          'Gytsjerk',
          'Haaften',
          'Haag',
          'Haagje',
          'Haaks',
          'Haakswold',
          'Haalderen',
          'Haalweide',
          'Haamstede',
          'Haandrik',
          'Haar',
          'Haarlem',
          'Haarsteeg',
          'Haart',
          'Haelen',
          'Haerst',
          'Hagestein',
          'Haiink',
          'Halder',
          'Haler',
          'Half',
          'Halfmijl',
          'Halfweg',
          'Halle',
          'Haller',
          'Hallum',
          'Halte',
          'Halvink',
          'Hamrik',
          'Hamshorn',
          'Handel',
          'Hane',
          'Hank',
          'Hankate',
          'Hansweert',
          'Hantum',
          'Hantumer',
          'Harculo',
          'Harde',
          'Hardinx',
          'Haren',
          'Harener',
          'Haring',
          'Harke',
          'Harkema',
          'Harl',
          'Harles',
          'Harpel',
          'Harre',
          'Harse',
          'Harskamp',
          'Harssens',
          'Hartwerd',
          'Haspel',
          'Hasselt',
          'Hasselter',
          'Hatte',
          'Hattem',
          'Hauwert',
          'Havelt',
          'Havelte',
          'Hayum',
          'Haze',
          'Hazenhurk',
          'Hazennest',
          'Heaburgen',
          'Hedel',
          'Hedik',
          'Heech',
          'Heegher',
          'Heek',
          'Heelsum',
          'Heems',
          'Heemstede',
          'Heenweg',
          'Heer',
          'Heerde',
          'Heere',
          'Heeren',
          'Heers',
          'Hees',
          'Heesakker',
          'Heesbeen',
          'Heesboom',
          'Heesch',
          'Heesselt',
          'Heet',
          'Heezeren',
          'Hefswal',
          'Hegge',
          'Hei',
          'Heiakker',
          'Heibloem',
          'Heid',
          'Heide',
          'Heidekant',
          'Heiden',
          'Heier',
          'Heihoefke',
          'Heij',
          'Heijen',
          'Heikant',
          'Heikantse',
          'Heille',
          'Heine',
          'Heioord',
          'Heister',
          'Heitrak',
          'Hekel',
          'Hekkum',
          'Hel',
          'Helden',
          'Helkant',
          'Hell',
          'Helle',
          'Hellegat',
          'Hellen',
          'Hellevoet',
          'Helling',
          'Hellouw',
          'Helwerd',
          'Hemert',
          'Hemrik',
          'Hendrik',
          'Henge',
          'Herfte',
          'Herike',
          'Herk',
          'Herken',
          'Hermalen',
          'Hernen',
          'Herpen',
          'Herpt',
          'Hersel',
          'Hersend',
          'Hert',
          'Herten',
          'Hertme',
          'Herveld',
          'Herwen',
          'Herwijnen',
          'Herxen',
          'Hesens',
          'Hespe',
          'Hessum',
          'Heugde',
          'Heukelom',
          'Heukelum',
          'Heult',
          'Heumen',
          'Heure',
          'Heurne',
          'Heusden',
          'Heuvel',
          'Heuvels',
          'Heuveltje',
          'Hexel',
          'Heze',
          'Hiaure',
          'Hichtum',
          'Hidaard',
          'Hien',
          'Hierden',
          'Hieslum',
          'Hijken',
          'Hijum',
          'Hilaard',
          'Hilakker',
          'Hild',
          'Hill',
          'Hilte',
          'Hilversum',
          'Hinnaard',
          'Hintham',
          'Hitsertse',
          'Hodenpijl',
          'Hoef',
          'Hoefkens',
          'Hoek',
          'Hoekdries',
          'Hoekelum',
          'Hoekens',
          'Hoekje',
          'Hoeks',
          'Hoekske',
          'Hoetmans',
          'Hoeve',
          'Hoeven',
          'Hoeves',
          'Hoge',
          'Hogert',
          'Hogeweg',
          'Holker',
          'Hollum',
          'Holm',
          'Holset',
          'Holsloot',
          'Holst',
          'Holt',
          'Holte',
          'Holten',
          'Holter',
          'Holthe',
          'Holtien',
          'Holtinge',
          'Holtum',
          'Holwerd',
          'Holwierde',
          'Holwinde',
          'Hommelse',
          'Hommert',
          'Hommerts',
          'Honderd',
          'Honds',
          'Hondsrug',
          'Hongerige',
          'Honthem',
          'Hoog',
          'Hoogcruts',
          'Hooge',
          'Hoogehaar',
          'Hoogen',
          'Hoogeweg',
          'Hooghalen',
          'Hoogmade',
          'Hoogmeien',
          'Hoogwatum',
          'Hool',
          'Hoon',
          'Hoonte',
          'Hoorn',
          'Hoornder',
          'Hoptille',
          'Horck',
          'Horick',
          'Horn',
          'Horssen',
          'Horsten',
          'Horzik',
          'Hout',
          'Houterd',
          'Houtgoor',
          'Houthei',
          'Houthem',
          'Houw',
          'Houwer',
          'Hugten',
          'Huij',
          'Huinen',
          'Huinerwal',
          'Huis',
          'Huissen',
          'Huize',
          'Huizinge',
          'Hul',
          'Huls',
          'Hulsen',
          'Hulst',
          'Hulten',
          'Hultje',
          'Humcoven',
          'Hunnecum',
          'Hunsel',
          'Hupsel',
          'Hurkske',
          'Hurpesch',
          'Hutten',
          'Huurne',
          'Höchte',
          'Höfke',
          'Húns',
          'Idaerd',
          'Idserda',
          'Idsken',
          'Idzegea',
          'Iens',
          'IJmuiden',
          'IJpe',
          'IJpelo',
          'IJsselham',
          'IJzen',
          'IJzeren',
          'IJzerlo',
          'Illik',
          'Indoornik',
          'Ingwert',
          'Inia',
          'Itens',
          'Itteren',
          'Jaars',
          'Jammer',
          'Jannum',
          'Jellum',
          'Jelsum',
          'Jeth',
          'Jipsing',
          'Jirnsum',
          'Jislum',
          'Jisp',
          'Jistrum',
          'Jonas',
          'Jonen',
          'Jonkers',
          'Jorwert',
          'Joure',
          'Jous',
          'Jousterp',
          'Jouswerd',
          'Jouwer',
          'Jubbega',
          'Jukwerd',
          'Junne',
          'Jutryp',
          'Kaag',
          'Kaakhorn',
          'Kaard',
          'Kaarschot',
          'Kaat',
          'Kade',
          'Kadoelen',
          'Kalis',
          'Kalteren',
          'Kameren',
          'Kamp',
          'Kampen',
          'Kamper',
          'Kamperei',
          'Kampers',
          'Kamperzee',
          'Kantens',
          'Kantje',
          'Kapel',
          'Kapelle',
          'Kapolder',
          'Kappert',
          'Karre',
          'Kasen',
          'Kasteren',
          'Kater',
          'Katerveer',
          'Kathagen',
          'Katlijk',
          'Kats',
          'Katwijk',
          'Kaumes',
          'Kavel',
          'Kaweide',
          'Kedichem',
          'Keegen',
          'Keent',
          'Keersop',
          'Keinsmer',
          'Keizers',
          'Kekerdom',
          'Kelmond',
          'Kelpen',
          'Kempkens',
          'Kerk',
          'Kerken',
          'Kerkhof',
          'Kerkrade',
          'Kerkwerve',
          'Keske',
          'Kessel',
          'Kesseleik',
          'Ketting',
          'Keulse',
          'Keunen',
          'Keup',
          'Keuter',
          'Kibbel',
          'Kiel',
          'Kiester',
          'Kievit',
          'Kijf',
          'Kijfwaard',
          'Kijkuit',
          'Kilder',
          'Kille',
          'Kimswerd',
          'Kinderbos',
          'Kink',
          'Kinnum',
          'Kipper',
          'Klaaswaal',
          'Kladde',
          'Klaren',
          'Klatering',
          'Klef',
          'Klei',
          'Klein',
          'Kleinder',
          'Kleine',
          'Kleinge',
          'Klem',
          'Kletter',
          'Klevers',
          'Klispoel',
          'Klomp',
          'Klooster',
          'Klosse',
          'Klösse',
          'Knaphof',
          'Knegsel',
          'Knipe',
          'Knol',
          'Knolle',
          'Knuiters',
          'Koedood',
          'Koehool',
          'Koekange',
          'Koekanger',
          'Koekoek',
          'Koel',
          'Koevering',
          'Kokkelert',
          'Kolder',
          'Kolhol',
          'Kolhorn',
          'Kolk',
          'Kollum',
          'Kolonie',
          'Kommer',
          'Konings',
          'Koog',
          'Kooi',
          'Kooldert',
          'Kopaf',
          'Korhorn',
          'Korn',
          'Kornhorn',
          'Kort',
          'Korte',
          'Korteraar',
          'Korteven',
          'Kortgene',
          'Kostvlies',
          'Koude',
          'Kouden',
          'Koudhoorn',
          'Koulen',
          'Kraan',
          'Kraanven',
          'Kraats',
          'Krabben',
          'Krachtig',
          'Kranen',
          'Krassum',
          'Kreek',
          'Kreielt',
          'Kreijel',
          'Kreijl',
          'Krewerd',
          'Krim',
          'Krimpen',
          'Krol',
          'Kruin',
          'Kruishaar',
          'Kruispunt',
          'Kruisweg',
          'Kuikhorne',
          'Kuiks',
          'Kuinre',
          'Kuitaart',
          'Kuivezand',
          'Kulert',
          'Kulsdom',
          'Kunrade',
          'Kutt',
          'Kuundert',
          'Kuzemer',
          'Kwaal',
          'Kwakel',
          'Kwakkel',
          'Kwartier',
          'Kûkherne',
          'Laag',
          'Laaghalen',
          'Laaghaler',
          'Laak',
          'Laaksum',
          'Laan',
          'Lage',
          'Lagekant',
          'Lageweg',
          'Lakei',
          'Laker',
          'Lalle',
          'Lammer',
          'Lammerweg',
          'Lamperen',
          'Landerum',
          'Landsrade',
          'Lang',
          'Lange',
          'Langeraar',
          'Langerak',
          'Langereit',
          'Lank',
          'Lankes',
          'Laren',
          'Laskwerd',
          'Lattrop',
          'Laude',
          'Lauwer',
          'Ledeacker',
          'Leeg',
          'Leegte',
          'Leek',
          'Leem',
          'Leen',
          'Leens',
          'Leensel',
          'Leermens',
          'Leersum',
          'Leeuw',
          'Leeuwerik',
          'Leeuwte',
          'Lege',
          'Legert',
          'Leiden',
          'Leimuiden',
          'Leker',
          'Lekker',
          'Lelystad',
          'Lemel',
          'Lemele',
          'Lemmer',
          'Lemselo',
          'Lengel',
          'Lent',
          'Lenthe',
          'Leons',
          'Lerop',
          'Lethe',
          'Lettele',
          'Leuke',
          'Leunen',
          'Leur',
          'Leusden',
          'Leutes',
          'Leuth',
          'Leuven',
          'Leuvenum',
          'Leveroy',
          'Lexmond',
          'Lhee',
          'Lichtaard',
          'Lichtmis',
          'Liefkens',
          'Liempde',
          'Lienden',
          'Lier',
          'Lieren',
          'Lierop',
          'Lies',
          'Lievelde',
          'Lieving',
          'Lijnden',
          'Limbricht',
          'Limmen',
          'Linde',
          'Lingsfort',
          'Lintelo',
          'Lintvelde',
          'Lioessens',
          'Lippen',
          'Lith',
          'Lithoijen',
          'Lobith',
          'Loc',
          'Locht',
          'Loenen',
          'Loer',
          'Loete',
          'Logt',
          'Loil',
          'Lollum',
          'Lomm',
          'Lonneker',
          'Loo',
          'Loobrink',
          'Loofaert',
          'Looi',
          'Looien',
          'Look',
          'Loon',
          'Loons',
          'Loonse',
          'Looveer',
          'Loppersum',
          'Lovendaal',
          'Loveren',
          'Loënga',
          'Lubbinge',
          'Luchen',
          'Luchten',
          'Luissel',
          'Luitert',
          'Lula',
          'Lunen',
          'Lunteren',
          'Lunters',
          'Lutjegast',
          'Lutjerijp',
          'Lutke',
          'Lutkepost',
          'Lutten',
          'Lutter',
          'Lytse',
          'Lytshuzen',
          'Maagd',
          'Maaijkant',
          'Maalb',
          'Maaldrift',
          'Maalstede',
          'Maar',
          'Maarn',
          'Maars',
          'Maarssen',
          'Maasband',
          'Maasbree',
          'Maaskant',
          'Maat',
          'Maatsehei',
          'Macharen',
          'Made',
          'Magele',
          'Magrette',
          'Makkum',
          'Mal',
          'Malden',
          'Mallem',
          'Mamelis',
          'Manen',
          'Mantgum',
          'Mantinge',
          'Maren',
          'Maria',
          'Maris',
          'Mark',
          'Markvelde',
          'Marle',
          'Marrum',
          'Mars',
          'Marssum',
          'Marsum',
          'Martens',
          'Marum',
          'Mataram',
          'Maten',
          'Mathijs',
          'Maurik',
          'Maxet',
          'Medemblik',
          'Medevoort',
          'Medler',
          'Meed',
          'Meeden',
          'Meele',
          'Meemortel',
          'Meene',
          'Meer',
          'Meeren',
          'Meern',
          'Meerten',
          'Meerven',
          'Meerwijck',
          'Megelsum',
          'Megen',
          'Meije',
          'Meijel',
          'Melick',
          'Melis',
          'Melissant',
          'Menaldum',
          'Mensinge',
          'Menzel',
          'Meppen',
          'Merkel',
          'Merm',
          'Merselo',
          'Merum',
          'Mesch',
          'Meteren',
          'Metsla',
          'Midbuul',
          'Midde',
          'Middel',
          'Middelijk',
          'Midden',
          'Middenhof',
          'Midlaren',
          'Midlum',
          'Mids',
          'Midwolde',
          'Miedum',
          'Mildert',
          'Milheeze',
          'Mill',
          'Mils',
          'Milschot',
          'Minkeloos',
          'Mispel',
          'Moddergat',
          'Moer',
          'Moeren',
          'Moerslag',
          'Moespot',
          'Molembaix',
          'Molenbaan',
          'Molenbelt',
          'Molengat',
          'Molenhof',
          'Molenperk',
          'Molenrij',
          'Molenstad',
          'Molkwar',
          'Monster',
          'Montfort',
          'Mook',
          'Moord',
          'Moorsel',
          'Morige',
          'Morra',
          'Mortel',
          'Mosbulten',
          'Mosik',
          'Moskou',
          'Mosse',
          'Mossel',
          'Most',
          'Muggenhol',
          'Muis',
          'Muizenhol',
          'Mulderij',
          'Mullegen',
          'Munneke',
          'Munnekens',
          'Munniken',
          'Munte',
          'Murns',
          'Mussel',
          'Mûnein',
          'Naarder',
          'Nabbegat',
          'Nagel',
          'Nansum',
          'Napels',
          'Natten',
          'Neder',
          'Nederbiel',
          'Neer',
          'Neerijnen',
          'Neeritter',
          'Neerloon',
          'Neerst',
          'Negen',
          'Nekke',
          'Nergena',
          'Nia',
          'Nie',
          'Niebert',
          'Niehove',
          'Nier',
          'Niersen',
          'Niesoord',
          'Nieuw',
          'Nieuwaal',
          'Nieuwe',
          'Nieuwer',
          'Nieuwklap',
          'Nieuwkoop',
          'Nieuwolda',
          'Nieuwstad',
          'Niftrik',
          'Nijega',
          'Nijehaske',
          'Nijesyl',
          'Nijken',
          'Nijkerker',
          'Nijlân',
          'Nijmegen',
          'Nijnsel',
          'Nijrees',
          'Nijstad',
          'Nijve',
          'Nispense',
          'Noardein',
          'Noenes',
          'Nolde',
          'Noord',
          'Noorden',
          'Noorder',
          'Noordhorn',
          'Noordink',
          'Noordkant',
          'Noordse',
          'Notendaal',
          'Notsel',
          'Noukoop',
          'Nuenen',
          'Nuijen',
          'Nuil',
          'Nuis',
          'Nunhem',
          'Nunspeet',
          'Nuth',
          'Obbicht',
          'Ock',
          'Oegst',
          'Oekel',
          'Oeken',
          'Oele',
          'Oensel',
          'Oentsjerk',
          'Oerle',
          'Oete',
          'Oever',
          'Offinga',
          'Ofwegen',
          'Ohé;',
          'Oijen',
          'Oirlo',
          'Oirs',
          'Okswerd',
          'Olde',
          'Oldehove',
          'Oldemarkt',
          'Olden',
          'Oldeneel',
          'Oldenhave',
          'Oldeouwer',
          'Oldörp',
          'Olen',
          'Oler',
          'Oling',
          'Olterterp',
          'Ommel',
          'Ommen',
          'Ommeren',
          'Onder',
          'Onna',
          'Onsenoort',
          'Onstwedde',
          'Ooij',
          'Ooijen',
          'Oost',
          'Oostappen',
          'Ooste',
          'Ooster',
          'Oosterend',
          'Oosterens',
          'Oosterhof',
          'Oosterik',
          'Oosternie',
          'Oosternij',
          'Oosterse',
          'Oosterzee',
          'Oosthem',
          'Oostindië',
          'Oostrum',
          'Oostum',
          'Oostwold',
          'Oostzaan',
          'Op',
          'Opende',
          'Ophemert',
          'Ophuis',
          'Opijnen',
          'Opmeeden',
          'Opper',
          'Opperdoes',
          'Opperduit',
          'Opwetten',
          'Opwierde',
          'Oranje',
          'Orvelte',
          'Osen',
          'Oshaar',
          'Ospel',
          'Ossen',
          'Ossenisse',
          'Ostaaijen',
          'Osterbos',
          'Othene',
          'Otterlo',
          'Ottersum',
          'Ou',
          'OuBildt',
          'Oude',
          'Oudega',
          'Oudehaske',
          'Oudehorne',
          'Ouden',
          'Oudenrijn',
          'Ouder',
          'Oudeschip',
          'Oudleusen',
          'Oukoop',
          'OuLeede',
          'OuLeije',
          'OuPolder',
          'OuSchouw',
          'OuStaten',
          'OuStee',
          'OuStoof',
          'OuStrumpt',
          'OuWaranda',
          'Ouwer',
          'OuWillem',
          'Ouwster',
          'Oventje',
          'Over',
          'Overa',
          'Overakker',
          'Overbiel',
          'Overeys',
          'Overgeul',
          'Overheek',
          'Overschot',
          'Overval',
          'Overwater',
          'Paal',
          'Paarde',
          'Paarlo',
          'Paauwen',
          'Paddepoel',
          'Padhuis',
          'Paesens',
          'Palestina',
          'Pallert',
          'Pandgat',
          'Panheel',
          'Pann',
          'Pannerden',
          'Papen',
          'Papenveer',
          'Park',
          'Parrega',
          'Partij',
          'Pasop',
          'Patrijzen',
          'Peebos',
          'Peelkant',
          'Peij',
          'Peizerweg',
          'Pelikaan',
          'Pepinus',
          'Pernis',
          'Pers',
          'Pesaken',
          'Peters',
          'Petten',
          'Piaam',
          'Pieperij',
          'Piepert',
          'Piershil',
          'Pieter',
          'Pikesyl',
          'Piksen',
          'Pingjum',
          'Pinkeveer',
          'Pitteperk',
          'Plaat',
          'Plaats',
          'Plak',
          'Plantage',
          'Plas',
          'Plat',
          'Plein',
          'Poffert',
          'Polen',
          'Polle',
          'Pollen',
          'Ponte',
          'Poonhaven',
          'Poppen',
          'Posterenk',
          'Posthoorn',
          'Pot',
          'Praets',
          'Prickart',
          'Puiflijk',
          'Punt',
          'Purmer',
          'Purmerend',
          'Puth',
          'Putse',
          'Putten',
          'Putters',
          'Pyramide',
          'Raai',
          'Raak',
          'Raam',
          'Raar',
          'Raard',
          'Raayen',
          'Raerd',
          'Rakens',
          'Rakt',
          'Rand',
          'Rande',
          'Randen',
          'Ranum',
          'Raren',
          'Rasquert',
          'Ratte',
          'Ravensgat',
          'Reahûs',
          'Rechteren',
          'Rectum',
          'Reduzum',
          'Reeth',
          'Reidswal',
          'Reitsum',
          'Remswerd',
          'Renesse',
          'Renkum',
          'Renneborg',
          'Rens',
          'Respel',
          'Ressen',
          'Reters',
          'Reth',
          'Reuth',
          'Reutje',
          'Reuzen',
          'Rewert',
          'Rhaan',
          'Rheder',
          'Rhee',
          'Rhenoy',
          'Rhoon',
          'Ridder',
          'Riel',
          'Rien',
          'Riet',
          'Rietven',
          'Rijckholt',
          'Rijen',
          'Rijke',
          'Rijkel',
          'Rijker',
          'Rijlst',
          'Rijnsater',
          'Rijsb',
          'Rijsoord',
          'Rijt',
          'Rijtjes',
          'Ril',
          'Rimpelt',
          'Rink',
          'Rips',
          'Rith',
          'Ritsuma',
          'Roeke',
          'Roekel',
          'Roelage',
          'Roels',
          'Roermond',
          'Roeven',
          'Roggel',
          'Rohel',
          'Rolaf',
          'Roligt',
          'Rollecate',
          'Rolpaal',
          'Rome',
          'Rond',
          'Ronduite',
          'Rood',
          'Roodehaan',
          'Rooden',
          'Roond',
          'Roosteren',
          'Rooth',
          'Ropta',
          'Roskam',
          'Rothem',
          'Rott',
          'Rotte',
          'Rotter',
          'Rotting',
          'Rottum',
          'Rozendaal',
          'Rucphen',
          'Ruif',
          'Ruigen',
          'Ruigezand',
          'Ruimel',
          'Ruinen',
          'Ruischer',
          'Ruiten',
          'Rukven',
          'Rullen',
          'Rumpt',
          'Rund',
          'Rusven',
          'Rut',
          'Ryptsjerk',
          'Rytseterp',
          'Saaksum',
          'Saaxum',
          'Salverd',
          'Sandebuur',
          'Santfort',
          'Santpoort',
          'Sasput',
          'Sauwerd',
          'Schaa',
          'Schaaphok',
          'Schaaps',
          'Schadron',
          'Schafelt',
          'Schaft',
          'Schagen',
          'Schager',
          'Schandelo',
          'Schans',
          'Schapers',
          'Scharen',
          'Scharne',
          'Scharster',
          'Schatkuil',
          'Schaveren',
          'Scheemder',
          'Schelf',
          'Schellach',
          'Schelm',
          'Schettens',
          'Schey',
          'Schieven',
          'Schijf',
          'Schijndel',
          'Schillers',
          'Schimmert',
          'Schin',
          'Schinnen',
          'Schippers',
          'School',
          'Schoon',
          'Schoonen',
          'Schoor',
          'Schoorl',
          'Schoot',
          'Schore',
          'Schoter',
          'Schotters',
          'Schouw',
          'Schouwen',
          'Schouwer',
          'Schraard',
          'Schrap',
          'Schuilen',
          'Schuring',
          'Schuwacht',
          'Sebalde',
          'Seerijp',
          'Sell',
          'Selmien',
          'Selwerd',
          'Seroos',
          'Seters',
          'Sibbe',
          'Siberië',
          'Siegers',
          'Simpel',
          'Sinouts',
          'Sinsel',
          'Sint',
          'Sion',
          'Sittard',
          'Sjunga',
          'Skarl',
          'Skillaerd',
          'Skou',
          'Skrins',
          'Skyldum',
          'Slee',
          'Sleen',
          'Slegge',
          'Slek',
          'Slichten',
          'Sliffert',
          'Slijkwell',
          'Slikken',
          'Sloot',
          'Sluis',
          'Smakt',
          'Smal',
          'Smalle',
          'Smeerling',
          'Smelbrêge',
          'Smele',
          'Smilde',
          'Smits',
          'Sneek',
          'Sneiders',
          'Snelle',
          'Sneps',
          'Snikzwaag',
          'Snipperij',
          'Snoden',
          'Soeter',
          'Solwerd',
          'Someren',
          'Sopsum',
          'Spaanrijt',
          'Spaanse',
          'Spaken',
          'Spannen',
          'Spannum',
          'Spears',
          'Spek',
          'Spekklef',
          'Spekt',
          'Speuld',
          'Speurgt',
          'Spier',
          'Spijk',
          'Spik',
          'Spits',
          'Spoolde',
          'Spoor',
          'Sprang',
          'Sprundel',
          'Spurkt',
          'Stad',
          'Stadterij',
          'Starten',
          'Stations',
          'Staverden',
          'Stedum',
          'Steeg',
          'Steegh',
          'Steel',
          'Steen',
          'Steenkamp',
          'Steenoven',
          'Steenpaal',
          'Steensel',
          'Steenvak',
          'Stegen',
          'Steger',
          'Stegeren',
          'Stein',
          'Sterken',
          'Sterre',
          'Steurgat',
          'Stevens',
          'Stevert',
          'Stiem',
          'Stiens',
          'Stitswerd',
          'Stobben',
          'Stokhem',
          'Stokkelen',
          'Stokkum',
          'Stokske',
          'Stokt',
          'Stolpen',
          'Stomme',
          'Stoof',
          'Stork',
          'Stouten',
          'Stox',
          'Strand',
          'Straten',
          'Strateris',
          'Streek',
          'Strepen',
          'Streukel',
          'Strij',
          'Strijen',
          'Strijp',
          'Stroet',
          'Stroo',
          'Stroopuit',
          'Strubben',
          'Strucht',
          'Strype',
          'Stuw',
          'Sumar',
          'Sumarre',
          'Surhuizum',
          'Susteren',
          'Suttum',
          'Suwâld',
          'Swaenwert',
          'Swalmen',
          'Sweik',
          'Syt',
          'Sânfurd',
          'Taarlo',
          'Teeffelen',
          'Teije',
          'Teijl',
          'Telgt',
          'Tempel',
          'Ter',
          'Terband',
          'Terblijt',
          'Terdiek',
          'Tereyken',
          'Tergêft',
          'Terhagen',
          'Terheijl',
          'Terherne',
          'Terkaple',
          'Terlet',
          'Terlinden',
          'Termaar',
          'Termoors',
          'Termunten',
          'Termunter',
          'Ternaard',
          'Teroele',
          'Terover',
          'Tersoal',
          'Tervaten',
          'Tervoorst',
          'Tervoort',
          'Terwispel',
          'Terwolde',
          'Terziet',
          'Teuge',
          'Theetuin',
          'Themaat',
          'Tholen',
          'Thull',
          'Thuserhof',
          'Tibma',
          'Tiel',
          'Tielse',
          'Tiggelt',
          'Tijnje',
          'Tike',
          'Til',
          'Timmer',
          'Tippe',
          'Tjaard',
          'Tjams',
          'Tjerkwerd',
          'Tjoene',
          'Tolbert',
          'Tolkamer',
          'Tommel',
          'Tongeren',
          'Tongerlo',
          'Tonsel',
          'Toom',
          'Toornwerd',
          'Top',
          'Toren',
          'Toterfout',
          'Toven',
          'Tragel',
          'Tranendal',
          'Trege',
          'Trent',
          'Tricht',
          'Triemen',
          'Trimpert',
          'Trintelen',
          'Tritzum',
          'Tronde',
          'Trophorne',
          'Trutjes',
          'Tuil',
          'Tull',
          'Tungelroy',
          'Turns',
          'Tusschen',
          'Tuut',
          'Tuuthees',
          'Twee',
          'Tweedeweg',
          'TweeTol',
          'Twekkelo',
          'Twello',
          'Twijzel',
          'Twijzeler',
          'Twisk',
          'Tynaarlo',
          'Tytsjerk',
          'Ubach',
          'Ubbena',
          'Ubber',
          'Uddel',
          'Uffelsen',
          'Uffelte',
          'Uit',
          'Uiter',
          'Uithoorn',
          'Uitwierde',
          'Ulfter',
          'Ulicoten',
          'Ulrum',
          'Ulsda',
          'Ulvend',
          'Unga',
          'Uppel',
          'Usquert',
          'Usselo',
          'Vaals',
          'Vaar',
          'Vaarle',
          'Vaart',
          'Vaesrade',
          'Valk',
          'Valken',
          'Valom',
          'Valsteeg',
          'Varik',
          'Varsen',
          'Varssel',
          'Vebenabos',
          'Vecht',
          'Veecaten',
          'Veele',
          'Veeler',
          'Veen',
          'Veenhof',
          'Veenhoop',
          'Veenhuis',
          'Veere',
          'Veessen',
          'Veghel',
          'Veld',
          'Veldbraak',
          'Velde',
          'Velden',
          'Veldhuis',
          'Veldzicht',
          'Velp',
          'Velsen',
          'Veluwe',
          'Vemde',
          'Ven',
          'Venbe',
          'Vene',
          'Venekoten',
          'Venlo',
          'Venne',
          'Venray',
          'Venweg',
          'Vergelt',
          'Verloren',
          'Vessem',
          'Vestjens',
          'Vet',
          'Vetterik',
          'Veulen',
          'Vianen',
          'Viel',
          'Vier',
          'Vierhuis',
          'Vijcie',
          'Vijf',
          'Vilgert',
          'Vilsteren',
          'Vilt',
          'Vink',
          'Vinkel',
          'Vinken',
          'Vinkepas',
          'Vis',
          'Visschers',
          'Vissers',
          'Vlaas',
          'Vlake',
          'Vlas',
          'Vledder',
          'Vleet',
          'Vleuten',
          'Vlie',
          'Vliegert',
          'Vlieghuis',
          'Vlijmen',
          'Vliss',
          'Vlist',
          'Vlodrop',
          'Vloei',
          'Vloet',
          'Vlootkant',
          'Vogelfort',
          'Volthe',
          'Voor',
          'Voorne',
          'Voorrijp',
          'Voorst',
          'Voorstad',
          'Voorste',
          'Voorster',
          'Voort',
          'Voortje',
          'Voorweg',
          'Vorchten',
          'Vorst',
          'Vorsten',
          'Voske',
          'Voskuil',
          'Vosse',
          'Vossebelt',
          'Vosselen',
          'Vossen',
          'Voulwames',
          'Vrachelen',
          'Vragender',
          'Vredepeel',
          'Vree',
          'Vries',
          'Vriezen',
          'Vrij',
          'Vrijhoeve',
          'Vrilk',
          'Vroe',
          'Vroelen',
          'Vuile',
          'Vuilpan',
          'Vuren',
          'Waaksens',
          'Waal',
          'Waar',
          'Waard',
          'Waarde',
          'Waarden',
          'Waarder',
          'Waatskamp',
          'Wachtum',
          'Waddinx',
          'Wadway',
          'Wadwerd',
          'Wagen',
          'Waije',
          'Walder',
          'Walik',
          'Walsert',
          'Wammert',
          'Wanneper',
          'Wanroij',
          'Wapen',
          'Wapse',
          'Wapser',
          'Warf',
          'Warffum',
          'Warfster',
          'Warmen',
          'Warmond',
          'Warnia',
          'Warstiens',
          'Warten',
          'Waspik',
          'Water',
          'Wateren',
          'Waterkant',
          'Waterop',
          'Waterval',
          'Waver',
          'Weakens',
          'Wedde',
          'Wedder',
          'Wee',
          'Weeg',
          'Weende',
          'Weerd',
          'Weerdinge',
          'Weere',
          'Weert',
          'Weerwille',
          'Wehe',
          'Wehl',
          'Weidum',
          'Weij',
          'Weijer',
          'Weijpoort',
          'Weilens',
          'Weimeren',
          'Weipoort',
          'Weite',
          'Weitemans',
          'Weiwerd',
          'Wekerom',
          'Wele',
          'Wells',
          'Welsum',
          'Wely',
          'Wenum',
          'Weper',
          'Wercheren',
          'Weren',
          'Wergea',
          'Werk',
          'Wernhouts',
          'Wesch',
          'Wessing',
          'Wessinge',
          'West',
          'Westeneng',
          'Wester',
          'Westerein',
          'Westerlee',
          'Westernie',
          'Westerse',
          'Westhim',
          'Westlaren',
          'Westmaas',
          'Westrik',
          'Wetering',
          'Wetsens',
          'Weurt',
          'Wevers',
          'Weverslo',
          'Wezel',
          'Wezep',
          'Wezup',
          'Wezuper',
          'Wielder',
          'Wieler',
          'Wielse',
          'Wiene',
          'Wierren',
          'Wierum',
          'Wiesel',
          'Wieuwens',
          'Wijchen',
          'Wijnaldum',
          'Wijnb',
          'Wijnje',
          'Wijster',
          'Wijthmen',
          'Wijzend',
          'Wilderhof',
          'Wildert',
          'Wilgen',
          'Wilp',
          'Wils',
          'Wilsum',
          'Winde',
          'Windraak',
          'Winkel',
          'Winkels',
          'Winssen',
          'Winsum',
          'Wintelre',
          'Winthagen',
          'Wirdum',
          'Wisse',
          'Wissel',
          'Wissen',
          'Witharen',
          'Withuis',
          'Witman',
          'Witmarsum',
          'Witrijt',
          'Witte',
          'Wittelte',
          'Witten',
          'Wiuwert',
          'Wjelsryp',
          'Woerd',
          'Woerdense',
          'Woezik',
          'Wognum',
          'Wolfers',
          'Wolfhaag',
          'Wolfhagen',
          'Wolfheze',
          'Wolfs',
          'Wolfshuis',
          'Wolling',
          'Wolsum',
          'Wommels',
          'Wonne',
          'Wons',
          'Woord',
          'Wopereis',
          'Wordragen',
          'Wormer',
          'Worsum',
          'Woubrugge',
          'Wouwse',
          'Wulpenbek',
          'Wyns',
          'Wytgaard',
          'Wâldsein',
          'Wânswert',
          'Yerseke',
          'Yndyk',
          'Zaamslag',
          'Zaarvlaas',
          'Zalk',
          'Zand',
          'Zande',
          'Zandfort',
          'Zandkant',
          'Zandoerle',
          'Zandplaat',
          'Zandpol',
          'Zandput',
          'Zandvoort',
          'Zee',
          'Zeegat',
          'Zeegse',
          'Zeerijp',
          'Zeesse',
          'Zegge',
          'Zeijen',
          'Zeijer',
          'Zeist',
          'Zelder',
          'Zelen',
          'Zelt',
          'Zenderen',
          'Zethuis',
          'Zeven',
          'Zevenhuis',
          'Zierikzee',
          'Zieuwent',
          'Zijder',
          'Zijdewind',
          'Zijp',
          'Zijper',
          'Zijtaart',
          'Zilven',
          'Zinkweg',
          'Zittard',
          'Zoeke',
          'Zoelen',
          'Zoelmond',
          'Zoerte',
          'Zoeter',
          'Zoggel',
          'Zomerven',
          'Zond',
          'Zorgvlied',
          'Zoutkamp',
          'Zuid',
          'Zuider',
          'Zuidhorn',
          'Zuidlaren',
          'Zuidwolde',
          'Zuidzande',
          'Zuidzijde',
          'Zuilichem',
          'Zundert',
          'Zurich',
          'Zutphen',
          'Zuuk',
          'Zwaag',
          'Zwager',
          'Zwanegat',
          'Zwart',
          'Zwarte',
          'Zweek',
          'Zwiggelte',
          'Zwijn',
          'Zwinderen',
          'Zwolle',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/nl/address/city_suffix.js': [
      function(require, module, exports) {
        module['exports'] = [
          ' aan de IJssel',
          ' aan de Rijn',
          'ambacht',
          'beek',
          'berg',
          'bergen',
          'bosch',
          'broek',
          'brug',
          'buren',
          'burg',
          'buurt',
          'dam',
          'dijk',
          'dijke',
          'donk',
          'dorp',
          'eind',
          'enmaes',
          'gat',
          'geest',
          'heide',
          'hoek',
          'horst',
          'hout',
          'hoven',
          'huizen',
          'ingen',
          'kerk',
          'laar',
          'land',
          'meer',
          'recht',
          'schoten',
          'sluis',
          'stroom',
          'swaerd',
          'veen',
          'veld',
          'vliet',
          'weer',
          'wier',
          'wijk',
          'woud',
          'woude',
          'zijl',
          '',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/nl/address/city.js': [
      function(require, module, exports) {
        module['exports'] = [
          '#{city_prefix}#{city_suffix}',
          '#{city_prefix}',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/nl/address/country.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Afghanistan',
          'Akrotiri',
          'Albanië',
          'Algerije',
          'Amerikaanse Maagdeneilanden',
          'Amerikaans-Samoa',
          'Andorra',
          'Angola',
          'Anguilla',
          'Antarctica',
          'Antigua en Barbuda',
          'Arctic Ocean',
          'Argentinië',
          'Armenië',
          'Aruba',
          'Ashmore and Cartier Islands',
          'Atlantic Ocean',
          'Australië',
          'Azerbeidzjan',
          "Bahama's",
          'Bahrein',
          'Bangladesh',
          'Barbados',
          'Belarus',
          'België',
          'Belize',
          'Benin',
          'Bermuda',
          'Bhutan',
          'Bolivië',
          'Bosnië-Herzegovina',
          'Botswana',
          'Bouvet Island',
          'Brazilië',
          'British Indian Ocean Territory',
          'Britse Maagdeneilanden',
          'Brunei',
          'Bulgarije',
          'Burkina Faso',
          'Burundi',
          'Cambodja',
          'Canada',
          'Caymaneilanden',
          'Centraal-Afrikaanse Republiek',
          'Chili',
          'China',
          'Christmas Island',
          'Clipperton Island',
          'Cocos (Keeling) Islands',
          'Colombia',
          'Comoren (Unie)',
          'Congo (Democratische Republiek)',
          'Congo (Volksrepubliek)',
          'Cook',
          'Coral Sea Islands',
          'Costa Rica',
          'Cuba',
          'Cyprus',
          'Denemarken',
          'Dhekelia',
          'Djibouti',
          'Dominica',
          'Dominicaanse Republiek',
          'Duitsland',
          'Ecuador',
          'Egypte',
          'El Salvador',
          'Equatoriaal-Guinea',
          'Eritrea',
          'Estland',
          'Ethiopië',
          'European Union',
          'Falkland',
          'Faroe Islands',
          'Fiji',
          'Filipijnen',
          'Finland',
          'Frankrijk',
          'Frans-Polynesië',
          'French Southern and Antarctic Lands',
          'Gabon',
          'Gambia',
          'Gaza Strip',
          'Georgië',
          'Ghana',
          'Gibraltar',
          'Grenada',
          'Griekenland',
          'Groenland',
          'Guam',
          'Guatemala',
          'Guernsey',
          'Guinea',
          'Guinee-Bissau',
          'Guyana',
          'Haïti',
          'Heard Island and McDonald Islands',
          'Heilige Stoel',
          'Honduras',
          'Hongarije',
          'Hongkong',
          'Ierland',
          'IJsland',
          'India',
          'Indian Ocean',
          'Indonesië',
          'Irak',
          'Iran',
          'Isle of Man',
          'Israël',
          'Italië',
          'Ivoorkust',
          'Jamaica',
          'Jan Mayen',
          'Japan',
          'Jemen',
          'Jersey',
          'Jordanië',
          'Kaapverdië',
          'Kameroen',
          'Kazachstan',
          'Kenia',
          'Kirgizstan',
          'Kiribati',
          'Koeweit',
          'Kroatië',
          'Laos',
          'Lesotho',
          'Letland',
          'Libanon',
          'Liberia',
          'Libië',
          'Liechtenstein',
          'Litouwen',
          'Luxemburg',
          'Macao',
          'Macedonië',
          'Madagaskar',
          'Malawi',
          'Maldiven',
          'Maleisië',
          'Mali',
          'Malta',
          'Marokko',
          'Marshall Islands',
          'Mauritanië',
          'Mauritius',
          'Mayotte',
          'Mexico',
          'Micronesia, Federated States of',
          'Moldavië',
          'Monaco',
          'Mongolië',
          'Montenegro',
          'Montserrat',
          'Mozambique',
          'Myanmar',
          'Namibië',
          'Nauru',
          'Navassa Island',
          'Nederland',
          'Nederlandse Antillen',
          'Nepal',
          'Ngwane',
          'Nicaragua',
          'Nieuw-Caledonië',
          'Nieuw-Zeeland',
          'Niger',
          'Nigeria',
          'Niue',
          'Noordelijke Marianen',
          'Noord-Korea',
          'Noorwegen',
          'Norfolk Island',
          'Oekraïne',
          'Oezbekistan',
          'Oman',
          'Oostenrijk',
          'Pacific Ocean',
          'Pakistan',
          'Palau',
          'Panama',
          'Papoea-Nieuw-Guinea',
          'Paracel Islands',
          'Paraguay',
          'Peru',
          'Pitcairn',
          'Polen',
          'Portugal',
          'Puerto Rico',
          'Qatar',
          'Roemenië',
          'Rusland',
          'Rwanda',
          'Saint Helena',
          'Saint Lucia',
          'Saint Vincent en de Grenadines',
          'Saint-Pierre en Miquelon',
          'Salomon',
          'Samoa',
          'San Marino',
          'São Tomé en Principe',
          'Saudi-Arabië',
          'Senegal',
          'Servië',
          'Seychellen',
          'Sierra Leone',
          'Singapore',
          'Sint-Kitts en Nevis',
          'Slovenië',
          'Slowakije',
          'Soedan',
          'Somalië',
          'South Georgia and the South Sandwich Islands',
          'Southern Ocean',
          'Spanje',
          'Spratly Islands',
          'Sri Lanka',
          'Suriname',
          'Svalbard',
          'Syrië',
          'Tadzjikistan',
          'Taiwan',
          'Tanzania',
          'Thailand',
          'Timor Leste',
          'Togo',
          'Tokelau',
          'Tonga',
          'Trinidad en Tobago',
          'Tsjaad',
          'Tsjechië',
          'Tunesië',
          'Turkije',
          'Turkmenistan',
          'Turks-en Caicoseilanden',
          'Tuvalu',
          'Uganda',
          'Uruguay',
          'Vanuatu',
          'Venezuela',
          'Verenigd Koninkrijk',
          'Verenigde Arabische Emiraten',
          'Verenigde Staten van Amerika',
          'Vietnam',
          'Wake Island',
          'Wallis en Futuna',
          'Wereld',
          'West Bank',
          'Westelijke Sahara',
          'Zambia',
          'Zimbabwe',
          'Zuid-Afrika',
          'Zuid-Korea',
          'Zweden',
          'Zwitserland',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/nl/address/building_number.js': [
      function(require, module, exports) {
        module['exports'] = [
          '#',
          '##',
          '###',
          '###a',
          '###b',
          '###c',
          '### I',
          '### II',
          '### III',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/nl/address/street_suffix.js': [
      function(require, module, exports) {
        module['exports'] = ['straat', 'laan', 'weg', 'plantsoen', 'park']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/nl/address/secondary_address.js': [
      function(require, module, exports) {
        module['exports'] = ['1 hoog', '2 hoog', '3 hoog']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/nl/address/street_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          '#{Name.first_name}#{street_suffix}',
          '#{Name.last_name}#{street_suffix}',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/nl/address/street_address.js': [
      function(require, module, exports) {
        module['exports'] = ['#{street_name} #{building_number}']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/nl/address/postcode.js': [
      function(require, module, exports) {
        module['exports'] = ['#### ??']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/nl/address/state.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Noord-Holland',
          'Zuid-Holland',
          'Utrecht',
          'Zeeland',
          'Overijssel',
          'Gelderland',
          'Drenthe',
          'Friesland',
          'Groningen',
          'Noord-Brabant',
          'Limburg',
          'Flevoland',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/nl/address/default_country.js': [
      function(require, module, exports) {
        module['exports'] = ['Nederland']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/nl/address/index.js': [
      function(require, module, exports) {
        var address = {}
        module['exports'] = address
        address.city_prefix = require('./city_prefix')
        address.city_suffix = require('./city_suffix')
        address.city = require('./city')
        address.country = require('./country')
        address.building_number = require('./building_number')
        address.street_suffix = require('./street_suffix')
        address.secondary_address = require('./secondary_address')
        address.street_name = require('./street_name')
        address.street_address = require('./street_address')
        address.postcode = require('./postcode')
        address.state = require('./state')
        address.default_country = require('./default_country')
      },
      {
        './city_prefix':
          '../node_modules/faker/lib/locales/nl/address/city_prefix.js',
        './city_suffix':
          '../node_modules/faker/lib/locales/nl/address/city_suffix.js',
        './city': '../node_modules/faker/lib/locales/nl/address/city.js',
        './country':
          '../node_modules/faker/lib/locales/nl/address/country.js',
        './building_number':
          '../node_modules/faker/lib/locales/nl/address/building_number.js',
        './street_suffix':
          '../node_modules/faker/lib/locales/nl/address/street_suffix.js',
        './secondary_address':
          '../node_modules/faker/lib/locales/nl/address/secondary_address.js',
        './street_name':
          '../node_modules/faker/lib/locales/nl/address/street_name.js',
        './street_address':
          '../node_modules/faker/lib/locales/nl/address/street_address.js',
        './postcode':
          '../node_modules/faker/lib/locales/nl/address/postcode.js',
        './state': '../node_modules/faker/lib/locales/nl/address/state.js',
        './default_country':
          '../node_modules/faker/lib/locales/nl/address/default_country.js',
      },
    ],
    '../node_modules/faker/lib/locales/nl/company/suffix.js': [
      function(require, module, exports) {
        module['exports'] = ['BV', 'V.O.F.', 'Group', 'en Zonen']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/nl/company/index.js': [
      function(require, module, exports) {
        var company = {}
        module['exports'] = company
        company.suffix = require('./suffix')
      },
      {
        './suffix':
          '../node_modules/faker/lib/locales/nl/company/suffix.js',
      },
    ],
    '../node_modules/faker/lib/locales/nl/internet/free_email.js': [
      function(require, module, exports) {
        module['exports'] = ['gmail.com', 'yahoo.com', 'hotmail.com']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/nl/internet/domain_suffix.js': [
      function(require, module, exports) {
        module['exports'] = ['nl', 'com', 'net', 'org']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/nl/internet/index.js': [
      function(require, module, exports) {
        var internet = {}
        module['exports'] = internet
        internet.free_email = require('./free_email')
        internet.domain_suffix = require('./domain_suffix')
      },
      {
        './free_email':
          '../node_modules/faker/lib/locales/nl/internet/free_email.js',
        './domain_suffix':
          '../node_modules/faker/lib/locales/nl/internet/domain_suffix.js',
      },
    ],
    '../node_modules/faker/lib/locales/nl/lorem/words.js': [
      function(require, module, exports) {
        module['exports'] = [
          'alias',
          'consequatur',
          'aut',
          'perferendis',
          'sit',
          'voluptatem',
          'accusantium',
          'doloremque',
          'aperiam',
          'eaque',
          'ipsa',
          'quae',
          'ab',
          'illo',
          'inventore',
          'veritatis',
          'et',
          'quasi',
          'architecto',
          'beatae',
          'vitae',
          'dicta',
          'sunt',
          'explicabo',
          'aspernatur',
          'aut',
          'odit',
          'aut',
          'fugit',
          'sed',
          'quia',
          'consequuntur',
          'magni',
          'dolores',
          'eos',
          'qui',
          'ratione',
          'voluptatem',
          'sequi',
          'nesciunt',
          'neque',
          'dolorem',
          'ipsum',
          'quia',
          'dolor',
          'sit',
          'amet',
          'consectetur',
          'adipisci',
          'velit',
          'sed',
          'quia',
          'non',
          'numquam',
          'eius',
          'modi',
          'tempora',
          'incidunt',
          'ut',
          'labore',
          'et',
          'dolore',
          'magnam',
          'aliquam',
          'quaerat',
          'voluptatem',
          'ut',
          'enim',
          'ad',
          'minima',
          'veniam',
          'quis',
          'nostrum',
          'exercitationem',
          'ullam',
          'corporis',
          'nemo',
          'enim',
          'ipsam',
          'voluptatem',
          'quia',
          'voluptas',
          'sit',
          'suscipit',
          'laboriosam',
          'nisi',
          'ut',
          'aliquid',
          'ex',
          'ea',
          'commodi',
          'consequatur',
          'quis',
          'autem',
          'vel',
          'eum',
          'iure',
          'reprehenderit',
          'qui',
          'in',
          'ea',
          'voluptate',
          'velit',
          'esse',
          'quam',
          'nihil',
          'molestiae',
          'et',
          'iusto',
          'odio',
          'dignissimos',
          'ducimus',
          'qui',
          'blanditiis',
          'praesentium',
          'laudantium',
          'totam',
          'rem',
          'voluptatum',
          'deleniti',
          'atque',
          'corrupti',
          'quos',
          'dolores',
          'et',
          'quas',
          'molestias',
          'excepturi',
          'sint',
          'occaecati',
          'cupiditate',
          'non',
          'provident',
          'sed',
          'ut',
          'perspiciatis',
          'unde',
          'omnis',
          'iste',
          'natus',
          'error',
          'similique',
          'sunt',
          'in',
          'culpa',
          'qui',
          'officia',
          'deserunt',
          'mollitia',
          'animi',
          'id',
          'est',
          'laborum',
          'et',
          'dolorum',
          'fuga',
          'et',
          'harum',
          'quidem',
          'rerum',
          'facilis',
          'est',
          'et',
          'expedita',
          'distinctio',
          'nam',
          'libero',
          'tempore',
          'cum',
          'soluta',
          'nobis',
          'est',
          'eligendi',
          'optio',
          'cumque',
          'nihil',
          'impedit',
          'quo',
          'porro',
          'quisquam',
          'est',
          'qui',
          'minus',
          'id',
          'quod',
          'maxime',
          'placeat',
          'facere',
          'possimus',
          'omnis',
          'voluptas',
          'assumenda',
          'est',
          'omnis',
          'dolor',
          'repellendus',
          'temporibus',
          'autem',
          'quibusdam',
          'et',
          'aut',
          'consequatur',
          'vel',
          'illum',
          'qui',
          'dolorem',
          'eum',
          'fugiat',
          'quo',
          'voluptas',
          'nulla',
          'pariatur',
          'at',
          'vero',
          'eos',
          'et',
          'accusamus',
          'officiis',
          'debitis',
          'aut',
          'rerum',
          'necessitatibus',
          'saepe',
          'eveniet',
          'ut',
          'et',
          'voluptates',
          'repudiandae',
          'sint',
          'et',
          'molestiae',
          'non',
          'recusandae',
          'itaque',
          'earum',
          'rerum',
          'hic',
          'tenetur',
          'a',
          'sapiente',
          'delectus',
          'ut',
          'aut',
          'reiciendis',
          'voluptatibus',
          'maiores',
          'doloribus',
          'asperiores',
          'repellat',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/nl/lorem/supplemental.js': [
      function(require, module, exports) {
        module['exports'] = [
          'abbas',
          'abduco',
          'abeo',
          'abscido',
          'absconditus',
          'absens',
          'absorbeo',
          'absque',
          'abstergo',
          'absum',
          'abundans',
          'abutor',
          'accedo',
          'accendo',
          'acceptus',
          'accipio',
          'accommodo',
          'accusator',
          'acer',
          'acerbitas',
          'acervus',
          'acidus',
          'acies',
          'acquiro',
          'acsi',
          'adamo',
          'adaugeo',
          'addo',
          'adduco',
          'ademptio',
          'adeo',
          'adeptio',
          'adfectus',
          'adfero',
          'adficio',
          'adflicto',
          'adhaero',
          'adhuc',
          'adicio',
          'adimpleo',
          'adinventitias',
          'adipiscor',
          'adiuvo',
          'administratio',
          'admiratio',
          'admitto',
          'admoneo',
          'admoveo',
          'adnuo',
          'adopto',
          'adsidue',
          'adstringo',
          'adsuesco',
          'adsum',
          'adulatio',
          'adulescens',
          'adultus',
          'aduro',
          'advenio',
          'adversus',
          'advoco',
          'aedificium',
          'aeger',
          'aegre',
          'aegrotatio',
          'aegrus',
          'aeneus',
          'aequitas',
          'aequus',
          'aer',
          'aestas',
          'aestivus',
          'aestus',
          'aetas',
          'aeternus',
          'ager',
          'aggero',
          'aggredior',
          'agnitio',
          'agnosco',
          'ago',
          'ait',
          'aiunt',
          'alienus',
          'alii',
          'alioqui',
          'aliqua',
          'alius',
          'allatus',
          'alo',
          'alter',
          'altus',
          'alveus',
          'amaritudo',
          'ambitus',
          'ambulo',
          'amicitia',
          'amiculum',
          'amissio',
          'amita',
          'amitto',
          'amo',
          'amor',
          'amoveo',
          'amplexus',
          'amplitudo',
          'amplus',
          'ancilla',
          'angelus',
          'angulus',
          'angustus',
          'animadverto',
          'animi',
          'animus',
          'annus',
          'anser',
          'ante',
          'antea',
          'antepono',
          'antiquus',
          'aperio',
          'aperte',
          'apostolus',
          'apparatus',
          'appello',
          'appono',
          'appositus',
          'approbo',
          'apto',
          'aptus',
          'apud',
          'aqua',
          'ara',
          'aranea',
          'arbitro',
          'arbor',
          'arbustum',
          'arca',
          'arceo',
          'arcesso',
          'arcus',
          'argentum',
          'argumentum',
          'arguo',
          'arma',
          'armarium',
          'armo',
          'aro',
          'ars',
          'articulus',
          'artificiose',
          'arto',
          'arx',
          'ascisco',
          'ascit',
          'asper',
          'aspicio',
          'asporto',
          'assentator',
          'astrum',
          'atavus',
          'ater',
          'atqui',
          'atrocitas',
          'atrox',
          'attero',
          'attollo',
          'attonbitus',
          'auctor',
          'auctus',
          'audacia',
          'audax',
          'audentia',
          'audeo',
          'audio',
          'auditor',
          'aufero',
          'aureus',
          'auris',
          'aurum',
          'aut',
          'autem',
          'autus',
          'auxilium',
          'avaritia',
          'avarus',
          'aveho',
          'averto',
          'avoco',
          'baiulus',
          'balbus',
          'barba',
          'bardus',
          'basium',
          'beatus',
          'bellicus',
          'bellum',
          'bene',
          'beneficium',
          'benevolentia',
          'benigne',
          'bestia',
          'bibo',
          'bis',
          'blandior',
          'bonus',
          'bos',
          'brevis',
          'cado',
          'caecus',
          'caelestis',
          'caelum',
          'calamitas',
          'calcar',
          'calco',
          'calculus',
          'callide',
          'campana',
          'candidus',
          'canis',
          'canonicus',
          'canto',
          'capillus',
          'capio',
          'capitulus',
          'capto',
          'caput',
          'carbo',
          'carcer',
          'careo',
          'caries',
          'cariosus',
          'caritas',
          'carmen',
          'carpo',
          'carus',
          'casso',
          'caste',
          'casus',
          'catena',
          'caterva',
          'cattus',
          'cauda',
          'causa',
          'caute',
          'caveo',
          'cavus',
          'cedo',
          'celebrer',
          'celer',
          'celo',
          'cena',
          'cenaculum',
          'ceno',
          'censura',
          'centum',
          'cerno',
          'cernuus',
          'certe',
          'certo',
          'certus',
          'cervus',
          'cetera',
          'charisma',
          'chirographum',
          'cibo',
          'cibus',
          'cicuta',
          'cilicium',
          'cimentarius',
          'ciminatio',
          'cinis',
          'circumvenio',
          'cito',
          'civis',
          'civitas',
          'clam',
          'clamo',
          'claro',
          'clarus',
          'claudeo',
          'claustrum',
          'clementia',
          'clibanus',
          'coadunatio',
          'coaegresco',
          'coepi',
          'coerceo',
          'cogito',
          'cognatus',
          'cognomen',
          'cogo',
          'cohaero',
          'cohibeo',
          'cohors',
          'colligo',
          'colloco',
          'collum',
          'colo',
          'color',
          'coma',
          'combibo',
          'comburo',
          'comedo',
          'comes',
          'cometes',
          'comis',
          'comitatus',
          'commemoro',
          'comminor',
          'commodo',
          'communis',
          'comparo',
          'compello',
          'complectus',
          'compono',
          'comprehendo',
          'comptus',
          'conatus',
          'concedo',
          'concido',
          'conculco',
          'condico',
          'conduco',
          'confero',
          'confido',
          'conforto',
          'confugo',
          'congregatio',
          'conicio',
          'coniecto',
          'conitor',
          'coniuratio',
          'conor',
          'conqueror',
          'conscendo',
          'conservo',
          'considero',
          'conspergo',
          'constans',
          'consuasor',
          'contabesco',
          'contego',
          'contigo',
          'contra',
          'conturbo',
          'conventus',
          'convoco',
          'copia',
          'copiose',
          'cornu',
          'corona',
          'corpus',
          'correptius',
          'corrigo',
          'corroboro',
          'corrumpo',
          'coruscus',
          'cotidie',
          'crapula',
          'cras',
          'crastinus',
          'creator',
          'creber',
          'crebro',
          'credo',
          'creo',
          'creptio',
          'crepusculum',
          'cresco',
          'creta',
          'cribro',
          'crinis',
          'cruciamentum',
          'crudelis',
          'cruentus',
          'crur',
          'crustulum',
          'crux',
          'cubicularis',
          'cubitum',
          'cubo',
          'cui',
          'cuius',
          'culpa',
          'culpo',
          'cultellus',
          'cultura',
          'cum',
          'cunabula',
          'cunae',
          'cunctatio',
          'cupiditas',
          'cupio',
          'cuppedia',
          'cupressus',
          'cur',
          'cura',
          'curatio',
          'curia',
          'curiositas',
          'curis',
          'curo',
          'curriculum',
          'currus',
          'cursim',
          'curso',
          'cursus',
          'curto',
          'curtus',
          'curvo',
          'curvus',
          'custodia',
          'damnatio',
          'damno',
          'dapifer',
          'debeo',
          'debilito',
          'decens',
          'decerno',
          'decet',
          'decimus',
          'decipio',
          'decor',
          'decretum',
          'decumbo',
          'dedecor',
          'dedico',
          'deduco',
          'defaeco',
          'defendo',
          'defero',
          'defessus',
          'defetiscor',
          'deficio',
          'defigo',
          'defleo',
          'defluo',
          'defungo',
          'degenero',
          'degero',
          'degusto',
          'deinde',
          'delectatio',
          'delego',
          'deleo',
          'delibero',
          'delicate',
          'delinquo',
          'deludo',
          'demens',
          'demergo',
          'demitto',
          'demo',
          'demonstro',
          'demoror',
          'demulceo',
          'demum',
          'denego',
          'denique',
          'dens',
          'denuncio',
          'denuo',
          'deorsum',
          'depereo',
          'depono',
          'depopulo',
          'deporto',
          'depraedor',
          'deprecator',
          'deprimo',
          'depromo',
          'depulso',
          'deputo',
          'derelinquo',
          'derideo',
          'deripio',
          'desidero',
          'desino',
          'desipio',
          'desolo',
          'desparatus',
          'despecto',
          'despirmatio',
          'infit',
          'inflammatio',
          'paens',
          'patior',
          'patria',
          'patrocinor',
          'patruus',
          'pauci',
          'paulatim',
          'pauper',
          'pax',
          'peccatus',
          'pecco',
          'pecto',
          'pectus',
          'pecunia',
          'pecus',
          'peior',
          'pel',
          'ocer',
          'socius',
          'sodalitas',
          'sol',
          'soleo',
          'solio',
          'solitudo',
          'solium',
          'sollers',
          'sollicito',
          'solum',
          'solus',
          'solutio',
          'solvo',
          'somniculosus',
          'somnus',
          'sonitus',
          'sono',
          'sophismata',
          'sopor',
          'sordeo',
          'sortitus',
          'spargo',
          'speciosus',
          'spectaculum',
          'speculum',
          'sperno',
          'spero',
          'spes',
          'spiculum',
          'spiritus',
          'spoliatio',
          'sponte',
          'stabilis',
          'statim',
          'statua',
          'stella',
          'stillicidium',
          'stipes',
          'stips',
          'sto',
          'strenuus',
          'strues',
          'studio',
          'stultus',
          'suadeo',
          'suasoria',
          'sub',
          'subito',
          'subiungo',
          'sublime',
          'subnecto',
          'subseco',
          'substantia',
          'subvenio',
          'succedo',
          'succurro',
          'sufficio',
          'suffoco',
          'suffragium',
          'suggero',
          'sui',
          'sulum',
          'sum',
          'summa',
          'summisse',
          'summopere',
          'sumo',
          'sumptus',
          'supellex',
          'super',
          'suppellex',
          'supplanto',
          'suppono',
          'supra',
          'surculus',
          'surgo',
          'sursum',
          'suscipio',
          'suspendo',
          'sustineo',
          'suus',
          'synagoga',
          'tabella',
          'tabernus',
          'tabesco',
          'tabgo',
          'tabula',
          'taceo',
          'tactus',
          'taedium',
          'talio',
          'talis',
          'talus',
          'tam',
          'tamdiu',
          'tamen',
          'tametsi',
          'tamisium',
          'tamquam',
          'tandem',
          'tantillus',
          'tantum',
          'tardus',
          'tego',
          'temeritas',
          'temperantia',
          'templum',
          'temptatio',
          'tempus',
          'tenax',
          'tendo',
          'teneo',
          'tener',
          'tenuis',
          'tenus',
          'tepesco',
          'tepidus',
          'ter',
          'terebro',
          'teres',
          'terga',
          'tergeo',
          'tergiversatio',
          'tergo',
          'tergum',
          'termes',
          'terminatio',
          'tero',
          'terra',
          'terreo',
          'territo',
          'terror',
          'tersus',
          'tertius',
          'testimonium',
          'texo',
          'textilis',
          'textor',
          'textus',
          'thalassinus',
          'theatrum',
          'theca',
          'thema',
          'theologus',
          'thermae',
          'thesaurus',
          'thesis',
          'thorax',
          'thymbra',
          'thymum',
          'tibi',
          'timidus',
          'timor',
          'titulus',
          'tolero',
          'tollo',
          'tondeo',
          'tonsor',
          'torqueo',
          'torrens',
          'tot',
          'totidem',
          'toties',
          'totus',
          'tracto',
          'trado',
          'traho',
          'trans',
          'tredecim',
          'tremo',
          'trepide',
          'tres',
          'tribuo',
          'tricesimus',
          'triduana',
          'triginta',
          'tripudio',
          'tristis',
          'triumphus',
          'trucido',
          'truculenter',
          'tubineus',
          'tui',
          'tum',
          'tumultus',
          'tunc',
          'turba',
          'turbo',
          'turpe',
          'turpis',
          'tutamen',
          'tutis',
          'tyrannus',
          'uberrime',
          'ubi',
          'ulciscor',
          'ullus',
          'ulterius',
          'ultio',
          'ultra',
          'umbra',
          'umerus',
          'umquam',
          'una',
          'unde',
          'undique',
          'universe',
          'unus',
          'urbanus',
          'urbs',
          'uredo',
          'usitas',
          'usque',
          'ustilo',
          'ustulo',
          'usus',
          'uter',
          'uterque',
          'utilis',
          'utique',
          'utor',
          'utpote',
          'utrimque',
          'utroque',
          'utrum',
          'uxor',
          'vaco',
          'vacuus',
          'vado',
          'vae',
          'valde',
          'valens',
          'valeo',
          'valetudo',
          'validus',
          'vallum',
          'vapulus',
          'varietas',
          'varius',
          'vehemens',
          'vel',
          'velociter',
          'velum',
          'velut',
          'venia',
          'venio',
          'ventito',
          'ventosus',
          'ventus',
          'venustas',
          'ver',
          'verbera',
          'verbum',
          'vere',
          'verecundia',
          'vereor',
          'vergo',
          'veritas',
          'vero',
          'versus',
          'verto',
          'verumtamen',
          'verus',
          'vesco',
          'vesica',
          'vesper',
          'vespillo',
          'vester',
          'vestigium',
          'vestrum',
          'vetus',
          'via',
          'vicinus',
          'vicissitudo',
          'victoria',
          'victus',
          'videlicet',
          'video',
          'viduata',
          'viduo',
          'vigilo',
          'vigor',
          'vilicus',
          'vilis',
          'vilitas',
          'villa',
          'vinco',
          'vinculum',
          'vindico',
          'vinitor',
          'vinum',
          'vir',
          'virga',
          'virgo',
          'viridis',
          'viriliter',
          'virtus',
          'vis',
          'viscus',
          'vita',
          'vitiosus',
          'vitium',
          'vito',
          'vivo',
          'vix',
          'vobis',
          'vociferor',
          'voco',
          'volaticus',
          'volo',
          'volubilis',
          'voluntarius',
          'volup',
          'volutabrum',
          'volva',
          'vomer',
          'vomica',
          'vomito',
          'vorago',
          'vorax',
          'voro',
          'vos',
          'votum',
          'voveo',
          'vox',
          'vulariter',
          'vulgaris',
          'vulgivagus',
          'vulgo',
          'vulgus',
          'vulnero',
          'vulnus',
          'vulpes',
          'vulticulus',
          'vultuosus',
          'xiphias',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/nl/lorem/index.js': [
      function(require, module, exports) {
        var lorem = {}
        module['exports'] = lorem
        lorem.words = require('./words')
        lorem.supplemental = require('./supplemental')
      },
      {
        './words': '../node_modules/faker/lib/locales/nl/lorem/words.js',
        './supplemental':
          '../node_modules/faker/lib/locales/nl/lorem/supplemental.js',
      },
    ],
    '../node_modules/faker/lib/locales/nl/name/first_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Amber',
          'Anna',
          'Anne',
          'Anouk',
          'Bas',
          'Bram',
          'Britt',
          'Daan',
          'Emma',
          'Eva',
          'Femke',
          'Finn',
          'Fleur',
          'Iris',
          'Isa',
          'Jan',
          'Jasper',
          'Jayden',
          'Jesse',
          'Johannes',
          'Julia',
          'Julian',
          'Kevin',
          'Lars',
          'Lieke',
          'Lisa',
          'Lotte',
          'Lucas',
          'Luuk',
          'Maud',
          'Max',
          'Mike',
          'Milan',
          'Nick',
          'Niels',
          'Noa',
          'Rick',
          'Roos',
          'Ruben',
          'Sander',
          'Sanne',
          'Sem',
          'Sophie',
          'Stijn',
          'Sven',
          'Thijs',
          'Thijs',
          'Thomas',
          'Tim',
          'Tom',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/nl/name/tussenvoegsel.js': [
      function(require, module, exports) {
        module['exports'] = [
          'van',
          'van de',
          'van den',
          "van 't",
          'van het',
          'de',
          'den',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/nl/name/last_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Bakker',
          'Beek',
          'Berg',
          'Boer',
          'Bos',
          'Bosch',
          'Brink',
          'Broek',
          'Brouwer',
          'Bruin',
          'Dam',
          'Dekker',
          'Dijk',
          'Dijkstra',
          'Graaf',
          'Groot',
          'Haan',
          'Hendriks',
          'Heuvel',
          'Hoek',
          'Jacobs',
          'Jansen',
          'Janssen',
          'Jong',
          'Klein',
          'Kok',
          'Koning',
          'Koster',
          'Leeuwen',
          'Linden',
          'Maas',
          'Meer',
          'Meijer',
          'Mulder',
          'Peters',
          'Ruiter',
          'Schouten',
          'Smit',
          'Smits',
          'Stichting',
          'Veen',
          'Ven',
          'Vermeulen',
          'Visser',
          'Vliet',
          'Vos',
          'Vries',
          'Wal',
          'Willems',
          'Wit',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/nl/name/prefix.js': [
      function(require, module, exports) {
        module['exports'] = ['Dhr.', 'Mevr. Dr.', 'Bsc', 'Msc', 'Prof.']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/nl/name/suffix.js': [
      function(require, module, exports) {
        module['exports'] = ['Jr.', 'Sr.', 'I', 'II', 'III', 'IV', 'V']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/nl/name/name.js': [
      function(require, module, exports) {
        module['exports'] = [
          '#{prefix} #{first_name} #{last_name}',
          '#{first_name} #{last_name} #{suffix}',
          '#{first_name} #{last_name}',
          '#{first_name} #{last_name}',
          '#{first_name} #{tussenvoegsel} #{last_name}',
          '#{first_name} #{tussenvoegsel} #{last_name}',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/nl/name/index.js': [
      function(require, module, exports) {
        var name = {}
        module['exports'] = name
        name.first_name = require('./first_name')
        name.tussenvoegsel = require('./tussenvoegsel')
        name.last_name = require('./last_name')
        name.prefix = require('./prefix')
        name.suffix = require('./suffix')
        name.name = require('./name')
      },
      {
        './first_name':
          '../node_modules/faker/lib/locales/nl/name/first_name.js',
        './tussenvoegsel':
          '../node_modules/faker/lib/locales/nl/name/tussenvoegsel.js',
        './last_name':
          '../node_modules/faker/lib/locales/nl/name/last_name.js',
        './prefix': '../node_modules/faker/lib/locales/nl/name/prefix.js',
        './suffix': '../node_modules/faker/lib/locales/nl/name/suffix.js',
        './name': '../node_modules/faker/lib/locales/nl/name/name.js',
      },
    ],
    '../node_modules/faker/lib/locales/nl/phone_number/formats.js': [
      function(require, module, exports) {
        module['exports'] = [
          '(####) ######',
          '##########',
          '06########',
          '06 #### ####',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/nl/phone_number/index.js': [
      function(require, module, exports) {
        var phone_number = {}
        module['exports'] = phone_number
        phone_number.formats = require('./formats')
      },
      {
        './formats':
          '../node_modules/faker/lib/locales/nl/phone_number/formats.js',
      },
    ],
    '../node_modules/faker/lib/locales/nl/index.js': [
      function(require, module, exports) {
        var nl = {}
        module['exports'] = nl
        nl.title = 'Dutch'
        nl.address = require('./address')
        nl.company = require('./company')
        nl.internet = require('./internet')
        nl.lorem = require('./lorem')
        nl.name = require('./name')
        nl.phone_number = require('./phone_number')
      },
      {
        './address':
          '../node_modules/faker/lib/locales/nl/address/index.js',
        './company':
          '../node_modules/faker/lib/locales/nl/company/index.js',
        './internet':
          '../node_modules/faker/lib/locales/nl/internet/index.js',
        './lorem': '../node_modules/faker/lib/locales/nl/lorem/index.js',
        './name': '../node_modules/faker/lib/locales/nl/name/index.js',
        './phone_number':
          '../node_modules/faker/lib/locales/nl/phone_number/index.js',
      },
    ],
    '../node_modules/faker/lib/locales/pl/name/first_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Aaron',
          'Abraham',
          'Adam',
          'Adrian',
          'Atanazy',
          'Agaton',
          'Alan',
          'Albert',
          'Aleksander',
          'Aleksy',
          'Alfred',
          'Alwar',
          'Ambroży',
          'Anatol',
          'Andrzej',
          'Antoni',
          'Apollinary',
          'Apollo',
          'Arkady',
          'Arkadiusz',
          'Archibald',
          'Arystarch',
          'Arnold',
          'Arseniusz',
          'Artur',
          'August',
          'Baldwin',
          'Bazyli',
          'Benedykt',
          'Beniamin',
          'Bernard',
          'Bertrand',
          'Bertram',
          'Borys',
          'Brajan',
          'Bruno',
          'Cezary',
          'Cecyliusz',
          'Karol',
          'Krystian',
          'Krzysztof',
          'Klarencjusz',
          'Klaudiusz',
          'Klemens',
          'Konrad',
          'Konstanty',
          'Konstantyn',
          'Kornel',
          'Korneliusz',
          'Korneli',
          'Cyryl',
          'Cyrus',
          'Damian',
          'Daniel',
          'Dariusz',
          'Dawid',
          'Dionizy',
          'Demetriusz',
          'Dominik',
          'Donald',
          'Dorian',
          'Edgar',
          'Edmund',
          'Edward',
          'Edwin',
          'Efrem',
          'Efraim',
          'Eliasz',
          'Eleazar',
          'Emil',
          'Emanuel',
          'Erast',
          'Ernest',
          'Eugeniusz',
          'Eustracjusz',
          'Fabian',
          'Feliks',
          'Florian',
          'Franciszek',
          'Fryderyk',
          'Gabriel',
          'Gedeon',
          'Galfryd',
          'Jerzy',
          'Gerald',
          'Gerazym',
          'Gilbert',
          'Gonsalwy',
          'Grzegorz',
          'Gwido',
          'Harald',
          'Henryk',
          'Herbert',
          'Herman',
          'Hilary',
          'Horacy',
          'Hubert',
          'Hugo',
          'Ignacy',
          'Igor',
          'Hilarion',
          'Innocenty',
          'Hipolit',
          'Ireneusz',
          'Erwin',
          'Izaak',
          'Izajasz',
          'Izydor',
          'Jakub',
          'Jeremi',
          'Jeremiasz',
          'Hieronim',
          'Gerald',
          'Joachim',
          'Jan',
          'Janusz',
          'Jonatan',
          'Józef',
          'Jozue',
          'Julian',
          'Juliusz',
          'Justyn',
          'Kalistrat',
          'Kazimierz',
          'Wawrzyniec',
          'Laurenty',
          'Laurencjusz',
          'Łazarz',
          'Leon',
          'Leonard',
          'Leonid',
          'Leon',
          'Ludwik',
          'Łukasz',
          'Lucjan',
          'Magnus',
          'Makary',
          'Marceli',
          'Marek',
          'Marcin',
          'Mateusz',
          'Maurycy',
          'Maksym',
          'Maksymilian',
          'Michał',
          'Miron',
          'Modest',
          'Mojżesz',
          'Natan',
          'Natanael',
          'Nazariusz',
          'Nazary',
          'Nestor',
          'Mikołaj',
          'Nikodem',
          'Olaf',
          'Oleg',
          'Oliwier',
          'Onufry',
          'Orestes',
          'Oskar',
          'Ansgary',
          'Osmund',
          'Pankracy',
          'Pantaleon',
          'Patryk',
          'Patrycjusz',
          'Patrycy',
          'Paweł',
          'Piotr',
          'Filemon',
          'Filip',
          'Platon',
          'Polikarp',
          'Porfiry',
          'Porfiriusz',
          'Prokles',
          'Prokul',
          'Prokop',
          'Kwintyn',
          'Randolf',
          'Rafał',
          'Rajmund',
          'Reginald',
          'Rajnold',
          'Ryszard',
          'Robert',
          'Roderyk',
          'Roger',
          'Roland',
          'Roman',
          'Romeo',
          'Reginald',
          'Rudolf',
          'Samson',
          'Samuel',
          'Salwator',
          'Sebastian',
          'Serafin',
          'Sergiusz',
          'Seweryn',
          'Zygmunt',
          'Sylwester',
          'Szymon',
          'Salomon',
          'Spirydion',
          'Stanisław',
          'Szczepan',
          'Stefan',
          'Terencjusz',
          'Teodor',
          'Tomasz',
          'Tymoteusz',
          'Tobiasz',
          'Walenty',
          'Walentyn',
          'Walerian',
          'Walery',
          'Wiktor',
          'Wincenty',
          'Witalis',
          'Włodzimierz',
          'Władysław',
          'Błażej',
          'Walter',
          'Walgierz',
          'Wacław',
          'Wilfryd',
          'Wilhelm',
          'Ksawery',
          'Ksenofont',
          'Jerzy',
          'Zachariasz',
          'Zachary',
          'Ada',
          'Adelajda',
          'Agata',
          'Agnieszka',
          'Agrypina',
          'Aida',
          'Aleksandra',
          'Alicja',
          'Alina',
          'Amanda',
          'Anastazja',
          'Angela',
          'Andżelika',
          'Angelina',
          'Anna',
          'Hanna',
          '—',
          'Antonina',
          'Ariadna',
          'Aurora',
          'Barbara',
          'Beatrycze',
          'Berta',
          'Brygida',
          'Kamila',
          'Karolina',
          'Karolina',
          'Kornelia',
          'Katarzyna',
          'Cecylia',
          'Karolina',
          'Chloe',
          'Krystyna',
          'Klara',
          'Klaudia',
          'Klementyna',
          'Konstancja',
          'Koralia',
          'Daria',
          'Diana',
          'Dina',
          'Dorota',
          'Edyta',
          'Eleonora',
          'Eliza',
          'Elżbieta',
          'Izabela',
          'Elwira',
          'Emilia',
          'Estera',
          'Eudoksja',
          'Eudokia',
          'Eugenia',
          'Ewa',
          'Ewelina',
          'Ferdynanda',
          'Florencja',
          'Franciszka',
          'Gabriela',
          'Gertruda',
          'Gloria',
          'Gracja',
          'Jadwiga',
          'Helena',
          'Henryka',
          'Nadzieja',
          'Ida',
          'Ilona',
          'Helena',
          'Irena',
          'Irma',
          'Izabela',
          'Izolda',
          'Jakubina',
          'Joanna',
          'Janina',
          'Żaneta',
          'Joanna',
          'Ginewra',
          'Józefina',
          'Judyta',
          'Julia',
          'Julia',
          'Julita',
          'Justyna',
          'Kira',
          'Cyra',
          'Kleopatra',
          'Larysa',
          'Laura',
          'Laurencja',
          'Laurentyna',
          'Lea',
          'Leila',
          'Eleonora',
          'Liliana',
          'Lilianna',
          'Lilia',
          'Lilla',
          'Liza',
          'Eliza',
          'Laura',
          'Ludwika',
          'Luiza',
          'Łucja',
          'Lucja',
          'Lidia',
          'Amabela',
          'Magdalena',
          'Malwina',
          'Małgorzata',
          'Greta',
          'Marianna',
          'Maryna',
          'Marta',
          'Martyna',
          'Maria',
          'Matylda',
          'Maja',
          'Maja',
          'Melania',
          'Michalina',
          'Monika',
          'Nadzieja',
          'Noemi',
          'Natalia',
          'Nikola',
          'Nina',
          'Olga',
          'Olimpia',
          'Oliwia',
          'Ofelia',
          'Patrycja',
          'Paula',
          'Pelagia',
          'Penelopa',
          'Filipa',
          'Paulina',
          'Rachela',
          'Rebeka',
          'Regina',
          'Renata',
          'Rozalia',
          'Róża',
          'Roksana',
          'Rufina',
          'Ruta',
          'Sabina',
          'Sara',
          'Serafina',
          'Sybilla',
          'Sylwia',
          'Zofia',
          'Stella',
          'Stefania',
          'Zuzanna',
          'Tamara',
          'Tacjana',
          'Tekla',
          'Teodora',
          'Teresa',
          'Walentyna',
          'Waleria',
          'Wanesa',
          'Wiara',
          'Weronika',
          'Wiktoria',
          'Wirginia',
          'Bibiana',
          'Bibianna',
          'Wanda',
          'Wilhelmina',
          'Ksawera',
          'Ksenia',
          'Zoe',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/pl/name/last_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Adamczak',
          'Adamczyk',
          'Adamek',
          'Adamiak',
          'Adamiec',
          'Adamowicz',
          'Adamski',
          'Adamus',
          'Aleksandrowicz',
          'Andrzejczak',
          'Andrzejewski',
          'Antczak',
          'Augustyn',
          'Augustyniak',
          'Bagiński',
          'Balcerzak',
          'Banach',
          'Banasiak',
          'Banasik',
          'Banaś',
          'Baran',
          'Baranowski',
          'Barański',
          'Bartczak',
          'Bartkowiak',
          'Bartnik',
          'Bartosik',
          'Bednarczyk',
          'Bednarek',
          'Bednarski',
          'Bednarz',
          'Białas',
          'Białek',
          'Białkowski',
          'Bielak',
          'Bielawski',
          'Bielecki',
          'Bielski',
          'Bieniek',
          'Biernacki',
          'Biernat',
          'Bieńkowski',
          'Bilski',
          'Bober',
          'Bochenek',
          'Bogucki',
          'Bogusz',
          'Borek',
          'Borkowski',
          'Borowiec',
          'Borowski',
          'Bożek',
          'Broda',
          'Brzeziński',
          'Brzozowski',
          'Buczek',
          'Buczkowski',
          'Buczyński',
          'Budziński',
          'Budzyński',
          'Bujak',
          'Bukowski',
          'Burzyński',
          'Bąk',
          'Bąkowski',
          'Błaszczak',
          'Błaszczyk',
          'Cebula',
          'Chmiel',
          'Chmielewski',
          'Chmura',
          'Chojnacki',
          'Chojnowski',
          'Cholewa',
          'Chrzanowski',
          'Chudzik',
          'Cichocki',
          'Cichoń',
          'Cichy',
          'Ciesielski',
          'Cieśla',
          'Cieślak',
          'Cieślik',
          'Ciszewski',
          'Cybulski',
          'Cygan',
          'Czaja',
          'Czajka',
          'Czajkowski',
          'Czapla',
          'Czarnecki',
          'Czech',
          'Czechowski',
          'Czekaj',
          'Czerniak',
          'Czerwiński',
          'Czyż',
          'Czyżewski',
          'Dec',
          'Dobosz',
          'Dobrowolski',
          'Dobrzyński',
          'Domagała',
          'Domański',
          'Dominiak',
          'Drabik',
          'Drozd',
          'Drozdowski',
          'Drzewiecki',
          'Dróżdż',
          'Dubiel',
          'Duda',
          'Dudek',
          'Dudziak',
          'Dudzik',
          'Dudziński',
          'Duszyński',
          'Dziedzic',
          'Dziuba',
          'Dąbek',
          'Dąbkowski',
          'Dąbrowski',
          'Dębowski',
          'Dębski',
          'Długosz',
          'Falkowski',
          'Fijałkowski',
          'Filipek',
          'Filipiak',
          'Filipowicz',
          'Flak',
          'Flis',
          'Florczak',
          'Florek',
          'Frankowski',
          'Frąckowiak',
          'Frączek',
          'Frątczak',
          'Furman',
          'Gadomski',
          'Gajda',
          'Gajewski',
          'Gaweł',
          'Gawlik',
          'Gawron',
          'Gawroński',
          'Gałka',
          'Gałązka',
          'Gil',
          'Godlewski',
          'Golec',
          'Gołąb',
          'Gołębiewski',
          'Gołębiowski',
          'Grabowski',
          'Graczyk',
          'Grochowski',
          'Grudzień',
          'Gruszczyński',
          'Gruszka',
          'Grzegorczyk',
          'Grzelak',
          'Grzesiak',
          'Grzesik',
          'Grześkowiak',
          'Grzyb',
          'Grzybowski',
          'Grzywacz',
          'Gutowski',
          'Guzik',
          'Gwóźdź',
          'Góra',
          'Góral',
          'Górecki',
          'Górka',
          'Górniak',
          'Górny',
          'Górski',
          'Gąsior',
          'Gąsiorowski',
          'Głogowski',
          'Głowacki',
          'Głąb',
          'Hajduk',
          'Herman',
          'Iwański',
          'Izdebski',
          'Jabłoński',
          'Jackowski',
          'Jagielski',
          'Jagiełło',
          'Jagodziński',
          'Jakubiak',
          'Jakubowski',
          'Janas',
          'Janiak',
          'Janicki',
          'Janik',
          'Janiszewski',
          'Jankowiak',
          'Jankowski',
          'Janowski',
          'Janus',
          'Janusz',
          'Januszewski',
          'Jaros',
          'Jarosz',
          'Jarząbek',
          'Jasiński',
          'Jastrzębski',
          'Jaworski',
          'Jaśkiewicz',
          'Jezierski',
          'Jurek',
          'Jurkiewicz',
          'Jurkowski',
          'Juszczak',
          'Jóźwiak',
          'Jóźwik',
          'Jędrzejczak',
          'Jędrzejczyk',
          'Jędrzejewski',
          'Kacprzak',
          'Kaczmarczyk',
          'Kaczmarek',
          'Kaczmarski',
          'Kaczor',
          'Kaczorowski',
          'Kaczyński',
          'Kaleta',
          'Kalinowski',
          'Kalisz',
          'Kamiński',
          'Kania',
          'Kaniewski',
          'Kapusta',
          'Karaś',
          'Karczewski',
          'Karpiński',
          'Karwowski',
          'Kasperek',
          'Kasprzak',
          'Kasprzyk',
          'Kaszuba',
          'Kawa',
          'Kawecki',
          'Kałuża',
          'Kaźmierczak',
          'Kiełbasa',
          'Kisiel',
          'Kita',
          'Klimczak',
          'Klimek',
          'Kmiecik',
          'Kmieć',
          'Knapik',
          'Kobus',
          'Kogut',
          'Kolasa',
          'Komorowski',
          'Konieczna',
          'Konieczny',
          'Konopka',
          'Kopczyński',
          'Koper',
          'Kopeć',
          'Korzeniowski',
          'Kos',
          'Kosiński',
          'Kosowski',
          'Kostecki',
          'Kostrzewa',
          'Kot',
          'Kotowski',
          'Kowal',
          'Kowalczuk',
          'Kowalczyk',
          'Kowalewski',
          'Kowalik',
          'Kowalski',
          'Koza',
          'Kozak',
          'Kozieł',
          'Kozioł',
          'Kozłowski',
          'Kołakowski',
          'Kołodziej',
          'Kołodziejczyk',
          'Kołodziejski',
          'Krajewski',
          'Krakowiak',
          'Krawczyk',
          'Krawiec',
          'Kruk',
          'Krukowski',
          'Krupa',
          'Krupiński',
          'Kruszewski',
          'Krysiak',
          'Krzemiński',
          'Krzyżanowski',
          'Król',
          'Królikowski',
          'Książek',
          'Kubacki',
          'Kubiak',
          'Kubica',
          'Kubicki',
          'Kubik',
          'Kuc',
          'Kucharczyk',
          'Kucharski',
          'Kuchta',
          'Kuciński',
          'Kuczyński',
          'Kujawa',
          'Kujawski',
          'Kula',
          'Kulesza',
          'Kulig',
          'Kulik',
          'Kuliński',
          'Kurek',
          'Kurowski',
          'Kuś',
          'Kwaśniewski',
          'Kwiatkowski',
          'Kwiecień',
          'Kwieciński',
          'Kędzierski',
          'Kędziora',
          'Kępa',
          'Kłos',
          'Kłosowski',
          'Lach',
          'Laskowski',
          'Lasota',
          'Lech',
          'Lenart',
          'Lesiak',
          'Leszczyński',
          'Lewandowski',
          'Lewicki',
          'Leśniak',
          'Leśniewski',
          'Lipiński',
          'Lipka',
          'Lipski',
          'Lis',
          'Lisiecki',
          'Lisowski',
          'Maciejewski',
          'Maciąg',
          'Mackiewicz',
          'Madej',
          'Maj',
          'Majcher',
          'Majchrzak',
          'Majewski',
          'Majka',
          'Makowski',
          'Malec',
          'Malicki',
          'Malinowski',
          'Maliszewski',
          'Marchewka',
          'Marciniak',
          'Marcinkowski',
          'Marczak',
          'Marek',
          'Markiewicz',
          'Markowski',
          'Marszałek',
          'Marzec',
          'Masłowski',
          'Matusiak',
          'Matuszak',
          'Matuszewski',
          'Matysiak',
          'Mazur',
          'Mazurek',
          'Mazurkiewicz',
          'Maćkowiak',
          'Małecki',
          'Małek',
          'Maślanka',
          'Michalak',
          'Michalczyk',
          'Michalik',
          'Michalski',
          'Michałek',
          'Michałowski',
          'Mielczarek',
          'Mierzejewski',
          'Mika',
          'Mikołajczak',
          'Mikołajczyk',
          'Mikulski',
          'Milczarek',
          'Milewski',
          'Miller',
          'Misiak',
          'Misztal',
          'Miśkiewicz',
          'Modzelewski',
          'Molenda',
          'Morawski',
          'Motyka',
          'Mroczek',
          'Mroczkowski',
          'Mrozek',
          'Mróz',
          'Mucha',
          'Murawski',
          'Musiał',
          'Muszyński',
          'Młynarczyk',
          'Napierała',
          'Nawrocki',
          'Nawrot',
          'Niedziela',
          'Niedzielski',
          'Niedźwiecki',
          'Niemczyk',
          'Niemiec',
          'Niewiadomski',
          'Noga',
          'Nowacki',
          'Nowaczyk',
          'Nowak',
          'Nowakowski',
          'Nowicki',
          'Nowiński',
          'Olczak',
          'Olejniczak',
          'Olejnik',
          'Olszewski',
          'Orzechowski',
          'Orłowski',
          'Osiński',
          'Ossowski',
          'Ostrowski',
          'Owczarek',
          'Paczkowski',
          'Pająk',
          'Pakuła',
          'Paluch',
          'Panek',
          'Partyka',
          'Pasternak',
          'Paszkowski',
          'Pawelec',
          'Pawlak',
          'Pawlicki',
          'Pawlik',
          'Pawlikowski',
          'Pawłowski',
          'Pałka',
          'Piasecki',
          'Piechota',
          'Piekarski',
          'Pietras',
          'Pietruszka',
          'Pietrzak',
          'Pietrzyk',
          'Pilarski',
          'Pilch',
          'Piotrowicz',
          'Piotrowski',
          'Piwowarczyk',
          'Piórkowski',
          'Piątek',
          'Piątkowski',
          'Piłat',
          'Pluta',
          'Podgórski',
          'Polak',
          'Popławski',
          'Porębski',
          'Prokop',
          'Prus',
          'Przybylski',
          'Przybysz',
          'Przybył',
          'Przybyła',
          'Ptak',
          'Puchalski',
          'Pytel',
          'Płonka',
          'Raczyński',
          'Radecki',
          'Radomski',
          'Rak',
          'Rakowski',
          'Ratajczak',
          'Robak',
          'Rogala',
          'Rogalski',
          'Rogowski',
          'Rojek',
          'Romanowski',
          'Rosa',
          'Rosiak',
          'Rosiński',
          'Ruciński',
          'Rudnicki',
          'Rudziński',
          'Rudzki',
          'Rusin',
          'Rutkowski',
          'Rybak',
          'Rybarczyk',
          'Rybicki',
          'Rzepka',
          'Różański',
          'Różycki',
          'Sadowski',
          'Sawicki',
          'Serafin',
          'Siedlecki',
          'Sienkiewicz',
          'Sieradzki',
          'Sikora',
          'Sikorski',
          'Sitek',
          'Siwek',
          'Skalski',
          'Skiba',
          'Skibiński',
          'Skoczylas',
          'Skowron',
          'Skowronek',
          'Skowroński',
          'Skrzypczak',
          'Skrzypek',
          'Skóra',
          'Smoliński',
          'Sobczak',
          'Sobczyk',
          'Sobieraj',
          'Sobolewski',
          'Socha',
          'Sochacki',
          'Sokołowski',
          'Sokół',
          'Sosnowski',
          'Sowa',
          'Sowiński',
          'Sołtys',
          'Sołtysiak',
          'Sroka',
          'Stachowiak',
          'Stachowicz',
          'Stachura',
          'Stachurski',
          'Stanek',
          'Staniszewski',
          'Stanisławski',
          'Stankiewicz',
          'Stasiak',
          'Staszewski',
          'Stawicki',
          'Stec',
          'Stefaniak',
          'Stefański',
          'Stelmach',
          'Stolarczyk',
          'Stolarski',
          'Strzelczyk',
          'Strzelecki',
          'Stępień',
          'Stępniak',
          'Surma',
          'Suski',
          'Szafrański',
          'Szatkowski',
          'Szczepaniak',
          'Szczepanik',
          'Szczepański',
          'Szczerba',
          'Szcześniak',
          'Szczygieł',
          'Szczęsna',
          'Szczęsny',
          'Szeląg',
          'Szewczyk',
          'Szostak',
          'Szulc',
          'Szwarc',
          'Szwed',
          'Szydłowski',
          'Szymański',
          'Szymczak',
          'Szymczyk',
          'Szymkowiak',
          'Szyszka',
          'Sławiński',
          'Słowik',
          'Słowiński',
          'Tarnowski',
          'Tkaczyk',
          'Tokarski',
          'Tomala',
          'Tomaszewski',
          'Tomczak',
          'Tomczyk',
          'Tracz',
          'Trojanowski',
          'Trzciński',
          'Trzeciak',
          'Turek',
          'Twardowski',
          'Urban',
          'Urbanek',
          'Urbaniak',
          'Urbanowicz',
          'Urbańczyk',
          'Urbański',
          'Walczak',
          'Walkowiak',
          'Warchoł',
          'Wasiak',
          'Wasilewski',
          'Wawrzyniak',
          'Wesołowski',
          'Wieczorek',
          'Wierzbicki',
          'Wilczek',
          'Wilczyński',
          'Wilk',
          'Winiarski',
          'Witczak',
          'Witek',
          'Witkowski',
          'Wiącek',
          'Więcek',
          'Więckowski',
          'Wiśniewski',
          'Wnuk',
          'Wojciechowski',
          'Wojtas',
          'Wojtasik',
          'Wojtczak',
          'Wojtkowiak',
          'Wolak',
          'Woliński',
          'Wolny',
          'Wolski',
          'Woś',
          'Woźniak',
          'Wrona',
          'Wroński',
          'Wróbel',
          'Wróblewski',
          'Wypych',
          'Wysocki',
          'Wyszyński',
          'Wójcicki',
          'Wójcik',
          'Wójtowicz',
          'Wąsik',
          'Węgrzyn',
          'Włodarczyk',
          'Włodarski',
          'Zaborowski',
          'Zabłocki',
          'Zagórski',
          'Zając',
          'Zajączkowski',
          'Zakrzewski',
          'Zalewski',
          'Zaremba',
          'Zarzycki',
          'Zaręba',
          'Zawada',
          'Zawadzki',
          'Zdunek',
          'Zieliński',
          'Zielonka',
          'Ziółkowski',
          'Zięba',
          'Ziętek',
          'Zwoliński',
          'Zych',
          'Zygmunt',
          'Łapiński',
          'Łuczak',
          'Łukasiewicz',
          'Łukasik',
          'Łukaszewski',
          'Śliwa',
          'Śliwiński',
          'Ślusarczyk',
          'Świderski',
          'Świerczyński',
          'Świątek',
          'Żak',
          'Żebrowski',
          'Żmuda',
          'Żuk',
          'Żukowski',
          'Żurawski',
          'Żurek',
          'Żyła',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/pl/name/prefix.js': [
      function(require, module, exports) {
        module['exports'] = ['Pan', 'Pani']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/pl/name/title.js': [
      function(require, module, exports) {
        module['exports'] = {
          descriptor: [
            'Lead',
            'Senior',
            'Direct',
            'Corporate',
            'Dynamic',
            'Future',
            'Product',
            'National',
            'Regional',
            'District',
            'Central',
            'Global',
            'Customer',
            'Investor',
            'Dynamic',
            'International',
            'Legacy',
            'Forward',
            'Internal',
            'Human',
            'Chief',
            'Principal',
          ],
          level: [
            'Solutions',
            'Program',
            'Brand',
            'Security',
            'Research',
            'Marketing',
            'Directives',
            'Implementation',
            'Integration',
            'Functionality',
            'Response',
            'Paradigm',
            'Tactics',
            'Identity',
            'Markets',
            'Group',
            'Division',
            'Applications',
            'Optimization',
            'Operations',
            'Infrastructure',
            'Intranet',
            'Communications',
            'Web',
            'Branding',
            'Quality',
            'Assurance',
            'Mobility',
            'Accounts',
            'Data',
            'Creative',
            'Configuration',
            'Accountability',
            'Interactions',
            'Factors',
            'Usability',
            'Metrics',
          ],
          job: [
            'Supervisor',
            'Associate',
            'Executive',
            'Liaison',
            'Officer',
            'Manager',
            'Engineer',
            'Specialist',
            'Director',
            'Coordinator',
            'Administrator',
            'Architect',
            'Analyst',
            'Designer',
            'Planner',
            'Orchestrator',
            'Technician',
            'Developer',
            'Producer',
            'Consultant',
            'Assistant',
            'Facilitator',
            'Agent',
            'Representative',
            'Strategist',
          ],
        }
      },
      {},
    ],
    '../node_modules/faker/lib/locales/pl/name/name.js': [
      function(require, module, exports) {
        module['exports'] = [
          '#{prefix} #{first_name} #{last_name}',
          '#{first_name} #{last_name}',
          '#{first_name} #{last_name}',
          '#{first_name} #{last_name}',
          '#{first_name} #{last_name}',
          '#{first_name} #{last_name}',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/pl/name/index.js': [
      function(require, module, exports) {
        var name = {}
        module['exports'] = name
        name.first_name = require('./first_name')
        name.last_name = require('./last_name')
        name.prefix = require('./prefix')
        name.title = require('./title')
        name.name = require('./name')
      },
      {
        './first_name':
          '../node_modules/faker/lib/locales/pl/name/first_name.js',
        './last_name':
          '../node_modules/faker/lib/locales/pl/name/last_name.js',
        './prefix': '../node_modules/faker/lib/locales/pl/name/prefix.js',
        './title': '../node_modules/faker/lib/locales/pl/name/title.js',
        './name': '../node_modules/faker/lib/locales/pl/name/name.js',
      },
    ],
    '../node_modules/faker/lib/locales/pl/address/country.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Afganistan',
          'Albania',
          'Algieria',
          'Andora',
          'Angola',
          'Antigua i Barbuda',
          'Arabia Saudyjska',
          'Argentyna',
          'Armenia',
          'Australia',
          'Austria',
          'Azerbejdżan',
          'Bahamy',
          'Bahrajn',
          'Bangladesz',
          'Barbados',
          'Belgia',
          'Belize',
          'Benin',
          'Bhutan',
          'Białoruś',
          'Birma',
          'Boliwia',
          'Sucre',
          'Bośnia i Hercegowina',
          'Botswana',
          'Brazylia',
          'Brunei',
          'Bułgaria',
          'Burkina Faso',
          'Burundi',
          'Chile',
          'Chiny',
          'Chorwacja',
          'Cypr',
          'Czad',
          'Czarnogóra',
          'Czechy',
          'Dania',
          'Demokratyczna Republika Konga',
          'Dominika',
          'Dominikana',
          'Dżibuti',
          'Egipt',
          'Ekwador',
          'Erytrea',
          'Estonia',
          'Etiopia',
          'Fidżi',
          'Filipiny',
          'Finlandia',
          'Francja',
          'Gabon',
          'Gambia',
          'Ghana',
          'Grecja',
          'Grenada',
          'Gruzja',
          'Gujana',
          'Gwatemala',
          'Gwinea',
          'Gwinea Bissau',
          'Gwinea Równikowa',
          'Haiti',
          'Hiszpania',
          'Holandia',
          'Haga',
          'Honduras',
          'Indie',
          'Indonezja',
          'Irak',
          'Iran',
          'Irlandia',
          'Islandia',
          'Izrael',
          'Jamajka',
          'Japonia',
          'Jemen',
          'Jordania',
          'Kambodża',
          'Kamerun',
          'Kanada',
          'Katar',
          'Kazachstan',
          'Kenia',
          'Kirgistan',
          'Kiribati',
          'Kolumbia',
          'Komory',
          'Kongo',
          'Korea Południowa',
          'Korea Północna',
          'Kostaryka',
          'Kuba',
          'Kuwejt',
          'Laos',
          'Lesotho',
          'Liban',
          'Liberia',
          'Libia',
          'Liechtenstein',
          'Litwa',
          'Luksemburg',
          'Łotwa',
          'Macedonia',
          'Madagaskar',
          'Malawi',
          'Malediwy',
          'Malezja',
          'Mali',
          'Malta',
          'Maroko',
          'Mauretania',
          'Mauritius',
          'Meksyk',
          'Mikronezja',
          'Mołdawia',
          'Monako',
          'Mongolia',
          'Mozambik',
          'Namibia',
          'Nauru',
          'Nepal',
          'Niemcy',
          'Niger',
          'Nigeria',
          'Nikaragua',
          'Norwegia',
          'Nowa Zelandia',
          'Oman',
          'Pakistan',
          'Palau',
          'Panama',
          'Papua-Nowa Gwinea',
          'Paragwaj',
          'Peru',
          'Polska',
          '322 575',
          'Portugalia',
          'Republika Południowej Afryki',
          'Republika Środkowoafrykańska',
          'Republika Zielonego Przylądka',
          'Rosja',
          'Rumunia',
          'Rwanda',
          'Saint Kitts i Nevis',
          'Saint Lucia',
          'Saint Vincent i Grenadyny',
          'Salwador',
          'Samoa',
          'San Marino',
          'Senegal',
          'Serbia',
          'Seszele',
          'Sierra Leone',
          'Singapur',
          'Słowacja',
          'Słowenia',
          'Somalia',
          'Sri Lanka',
          'Stany Zjednoczone',
          'Suazi',
          'Sudan',
          'Sudan Południowy',
          'Surinam',
          'Syria',
          'Szwajcaria',
          'Szwecja',
          'Tadżykistan',
          'Tajlandia',
          'Tanzania',
          'Timor Wschodni',
          'Togo',
          'Tonga',
          'Trynidad i Tobago',
          'Tunezja',
          'Turcja',
          'Turkmenistan',
          'Tuvalu',
          'Funafuti',
          'Uganda',
          'Ukraina',
          'Urugwaj',
          2008,
          'Uzbekistan',
          'Vanuatu',
          'Watykan',
          'Wenezuela',
          'Węgry',
          'Wielka Brytania',
          'Wietnam',
          'Włochy',
          'Wybrzeże Kości Słoniowej',
          'Wyspy Marshalla',
          'Wyspy Salomona',
          'Wyspy Świętego Tomasza i Książęca',
          'Zambia',
          'Zimbabwe',
          'Zjednoczone Emiraty Arabskie',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/pl/address/building_number.js': [
      function(require, module, exports) {
        module['exports'] = ['#####', '####', '###']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/pl/address/street_prefix.js': [
      function(require, module, exports) {
        module['exports'] = ['ul.', 'al.']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/pl/address/secondary_address.js': [
      function(require, module, exports) {
        module['exports'] = ['Apt. ###', 'Suite ###']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/pl/address/postcode.js': [
      function(require, module, exports) {
        module['exports'] = ['##-###']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/pl/address/state.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Dolnośląskie',
          'Kujawsko-pomorskie',
          'Lubelskie',
          'Lubuskie',
          'Łódzkie',
          'Małopolskie',
          'Mazowieckie',
          'Opolskie',
          'Podkarpackie',
          'Podlaskie',
          'Pomorskie',
          'Śląskie',
          'Świętokrzyskie',
          'Warmińsko-mazurskie',
          'Wielkopolskie',
          'Zachodniopomorskie',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/pl/address/state_abbr.js': [
      function(require, module, exports) {
        module['exports'] = [
          'DŚ',
          'KP',
          'LB',
          'LS',
          'ŁD',
          'MP',
          'MZ',
          'OP',
          'PK',
          'PL',
          'PM',
          'ŚL',
          'ŚK',
          'WM',
          'WP',
          'ZP',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/pl/address/city_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Aleksandrów Kujawski',
          'Aleksandrów Łódzki',
          'Alwernia',
          'Andrychów',
          'Annopol',
          'Augustów',
          'Babimost',
          'Baborów',
          'Baranów Sandomierski',
          'Barcin',
          'Barczewo',
          'Bardo',
          'Barlinek',
          'Bartoszyce',
          'Barwice',
          'Bełchatów',
          'Bełżyce',
          'Będzin',
          'Biała',
          'Biała Piska',
          'Biała Podlaska',
          'Biała Rawska',
          'Białobrzegi',
          'Białogard',
          'Biały Bór',
          'Białystok',
          'Biecz',
          'Bielawa',
          'Bielsk Podlaski',
          'Bielsko-Biała',
          'Bieruń',
          'Bierutów',
          'Bieżuń',
          'Biłgoraj',
          'Biskupiec',
          'Bisztynek',
          'Blachownia',
          'Błaszki',
          'Błażowa',
          'Błonie',
          'Bobolice',
          'Bobowa',
          'Bochnia',
          'Bodzentyn',
          'Bogatynia',
          'Boguchwała',
          'Boguszów-Gorce',
          'Bojanowo',
          'Bolesławiec',
          'Bolków',
          'Borek Wielkopolski',
          'Borne Sulinowo',
          'Braniewo',
          'Brańsk',
          'Brodnica',
          'Brok',
          'Brusy',
          'Brwinów',
          'Brzeg',
          'Brzeg Dolny',
          'Brzesko',
          'Brzeszcze',
          'Brześć Kujawski',
          'Brzeziny',
          'Brzostek',
          'Brzozów',
          'Buk',
          'Bukowno',
          'Busko-Zdrój',
          'Bychawa',
          'Byczyna',
          'Bydgoszcz',
          'Bystrzyca Kłodzka',
          'Bytom',
          'Bytom Odrzański',
          'Bytów',
          'Cedynia',
          'Chełm',
          'Chełmek',
          'Chełmno',
          'Chełmża',
          'Chęciny',
          'Chmielnik',
          'Chocianów',
          'Chociwel',
          'Chodecz',
          'Chodzież',
          'Chojna',
          'Chojnice',
          'Chojnów',
          'Choroszcz',
          'Chorzele',
          'Chorzów',
          'Choszczno',
          'Chrzanów',
          'Ciechanowiec',
          'Ciechanów',
          'Ciechocinek',
          'Cieszanów',
          'Cieszyn',
          'Ciężkowice',
          'Cybinka',
          'Czaplinek',
          'Czarna Białostocka',
          'Czarna Woda',
          'Czarne',
          'Czarnków',
          'Czchów',
          'Czechowice-Dziedzice',
          'Czeladź',
          'Czempiń',
          'Czerniejewo',
          'Czersk',
          'Czerwieńsk',
          'Czerwionka-Leszczyny',
          'Częstochowa',
          'Człopa',
          'Człuchów',
          'Czyżew',
          'Ćmielów',
          'Daleszyce',
          'Darłowo',
          'Dąbie',
          'Dąbrowa Białostocka',
          'Dąbrowa Górnicza',
          'Dąbrowa Tarnowska',
          'Debrzno',
          'Dębica',
          'Dęblin',
          'Dębno',
          'Dobczyce',
          'Dobiegniew',
          'Dobra (powiat łobeski)',
          'Dobra (powiat turecki)',
          'Dobre Miasto',
          'Dobrodzień',
          'Dobrzany',
          'Dobrzyń nad Wisłą',
          'Dolsk',
          'Drawno',
          'Drawsko Pomorskie',
          'Drezdenko',
          'Drobin',
          'Drohiczyn',
          'Drzewica',
          'Dukla',
          'Duszniki-Zdrój',
          'Dynów',
          'Działdowo',
          'Działoszyce',
          'Działoszyn',
          'Dzierzgoń',
          'Dzierżoniów',
          'Dziwnów',
          'Elbląg',
          'Ełk',
          'Frampol',
          'Frombork',
          'Garwolin',
          'Gąbin',
          'Gdańsk',
          'Gdynia',
          'Giżycko',
          'Glinojeck',
          'Gliwice',
          'Głogów',
          'Głogów Małopolski',
          'Głogówek',
          'Głowno',
          'Głubczyce',
          'Głuchołazy',
          'Głuszyca',
          'Gniew',
          'Gniewkowo',
          'Gniezno',
          'Gogolin',
          'Golczewo',
          'Goleniów',
          'Golina',
          'Golub-Dobrzyń',
          'Gołańcz',
          'Gołdap',
          'Goniądz',
          'Gorlice',
          'Gorzów Śląski',
          'Gorzów Wielkopolski',
          'Gostynin',
          'Gostyń',
          'Gościno',
          'Gozdnica',
          'Góra',
          'Góra Kalwaria',
          'Górowo Iławeckie',
          'Górzno',
          'Grabów nad Prosną',
          'Grajewo',
          'Grodków',
          'Grodzisk Mazowiecki',
          'Grodzisk Wielkopolski',
          'Grójec',
          'Grudziądz',
          'Grybów',
          'Gryfice',
          'Gryfino',
          'Gryfów Śląski',
          'Gubin',
          'Hajnówka',
          'Halinów',
          'Hel',
          'Hrubieszów',
          'Iława',
          'Iłowa',
          'Iłża',
          'Imielin',
          'Inowrocław',
          'Ińsko',
          'Iwonicz-Zdrój',
          'Izbica Kujawska',
          'Jabłonowo Pomorskie',
          'Janikowo',
          'Janowiec Wielkopolski',
          'Janów Lubelski',
          'Jarocin',
          'Jarosław',
          'Jasień',
          'Jasło',
          'Jastarnia',
          'Jastrowie',
          'Jastrzębie-Zdrój',
          'Jawor',
          'Jaworzno',
          'Jaworzyna Śląska',
          'Jedlicze',
          'Jedlina-Zdrój',
          'Jedwabne',
          'Jelcz-Laskowice',
          'Jelenia Góra',
          'Jeziorany',
          'Jędrzejów',
          'Jordanów',
          'Józefów (powiat biłgorajski)',
          'Józefów (powiat otwocki)',
          'Jutrosin',
          'Kalety',
          'Kalisz',
          'Kalisz Pomorski',
          'Kalwaria Zebrzydowska',
          'Kałuszyn',
          'Kamienna Góra',
          'Kamień Krajeński',
          'Kamień Pomorski',
          'Kamieńsk',
          'Kańczuga',
          'Karczew',
          'Kargowa',
          'Karlino',
          'Karpacz',
          'Kartuzy',
          'Katowice',
          'Kazimierz Dolny',
          'Kazimierza Wielka',
          'Kąty Wrocławskie',
          'Kcynia',
          'Kędzierzyn-Koźle',
          'Kępice',
          'Kępno',
          'Kętrzyn',
          'Kęty',
          'Kielce',
          'Kietrz',
          'Kisielice',
          'Kleczew',
          'Kleszczele',
          'Kluczbork',
          'Kłecko',
          'Kłobuck',
          'Kłodawa',
          'Kłodzko',
          'Knurów',
          'Knyszyn',
          'Kobylin',
          'Kobyłka',
          'Kock',
          'Kolbuszowa',
          'Kolno',
          'Kolonowskie',
          'Koluszki',
          'Kołaczyce',
          'Koło',
          'Kołobrzeg',
          'Koniecpol',
          'Konin',
          'Konstancin-Jeziorna',
          'Konstantynów Łódzki',
          'Końskie',
          'Koprzywnica',
          'Korfantów',
          'Koronowo',
          'Korsze',
          'Kosów Lacki',
          'Kostrzyn',
          'Kostrzyn nad Odrą',
          'Koszalin',
          'Kościan',
          'Kościerzyna',
          'Kowal',
          'Kowalewo Pomorskie',
          'Kowary',
          'Koziegłowy',
          'Kozienice',
          'Koźmin Wielkopolski',
          'Kożuchów',
          'Kórnik',
          'Krajenka',
          'Kraków',
          'Krapkowice',
          'Krasnobród',
          'Krasnystaw',
          'Kraśnik',
          'Krobia',
          'Krosno',
          'Krosno Odrzańskie',
          'Krośniewice',
          'Krotoszyn',
          'Kruszwica',
          'Krynica Morska',
          'Krynica-Zdrój',
          'Krynki',
          'Krzanowice',
          'Krzepice',
          'Krzeszowice',
          'Krzywiń',
          'Krzyż Wielkopolski',
          'Książ Wielkopolski',
          'Kudowa-Zdrój',
          'Kunów',
          'Kutno',
          'Kuźnia Raciborska',
          'Kwidzyn',
          'Lądek-Zdrój',
          'Legionowo',
          'Legnica',
          'Lesko',
          'Leszno',
          'Leśna',
          'Leśnica',
          'Lewin Brzeski',
          'Leżajsk',
          'Lębork',
          'Lędziny',
          'Libiąż',
          'Lidzbark',
          'Lidzbark Warmiński',
          'Limanowa',
          'Lipiany',
          'Lipno',
          'Lipsk',
          'Lipsko',
          'Lubaczów',
          'Lubań',
          'Lubartów',
          'Lubawa',
          'Lubawka',
          'Lubień Kujawski',
          'Lubin',
          'Lublin',
          'Lubliniec',
          'Lubniewice',
          'Lubomierz',
          'Luboń',
          'Lubraniec',
          'Lubsko',
          'Lwówek',
          'Lwówek Śląski',
          'Łabiszyn',
          'Łańcut',
          'Łapy',
          'Łasin',
          'Łask',
          'Łaskarzew',
          'Łaszczów',
          'Łaziska Górne',
          'Łazy',
          'Łeba',
          'Łęczna',
          'Łęczyca',
          'Łęknica',
          'Łobez',
          'Łobżenica',
          'Łochów',
          'Łomianki',
          'Łomża',
          'Łosice',
          'Łowicz',
          'Łódź',
          'Łuków',
          'Maków Mazowiecki',
          'Maków Podhalański',
          'Malbork',
          'Małogoszcz',
          'Małomice',
          'Margonin',
          'Marki',
          'Maszewo',
          'Miasteczko Śląskie',
          'Miastko',
          'Michałowo',
          'Miechów',
          'Miejska Górka',
          'Mielec',
          'Mieroszów',
          'Mieszkowice',
          'Międzybórz',
          'Międzychód',
          'Międzylesie',
          'Międzyrzec Podlaski',
          'Międzyrzecz',
          'Międzyzdroje',
          'Mikołajki',
          'Mikołów',
          'Mikstat',
          'Milanówek',
          'Milicz',
          'Miłakowo',
          'Miłomłyn',
          'Miłosław',
          'Mińsk Mazowiecki',
          'Mirosławiec',
          'Mirsk',
          'Mława',
          'Młynary',
          'Mogielnica',
          'Mogilno',
          'Mońki',
          'Morąg',
          'Mordy',
          'Moryń',
          'Mosina',
          'Mrągowo',
          'Mrocza',
          'Mszana Dolna',
          'Mszczonów',
          'Murowana Goślina',
          'Muszyna',
          'Mysłowice',
          'Myszków',
          'Myszyniec',
          'Myślenice',
          'Myślibórz',
          'Nakło nad Notecią',
          'Nałęczów',
          'Namysłów',
          'Narol',
          'Nasielsk',
          'Nekla',
          'Nidzica',
          'Niemcza',
          'Niemodlin',
          'Niepołomice',
          'Nieszawa',
          'Nisko',
          'Nowa Dęba',
          'Nowa Ruda',
          'Nowa Sarzyna',
          'Nowa Sól',
          'Nowe',
          'Nowe Brzesko',
          'Nowe Miasteczko',
          'Nowe Miasto Lubawskie',
          'Nowe Miasto nad Pilicą',
          'Nowe Skalmierzyce',
          'Nowe Warpno',
          'Nowogard',
          'Nowogrodziec',
          'Nowogród',
          'Nowogród Bobrzański',
          'Nowy Dwór Gdański',
          'Nowy Dwór Mazowiecki',
          'Nowy Sącz',
          'Nowy Staw',
          'Nowy Targ',
          'Nowy Tomyśl',
          'Nowy Wiśnicz',
          'Nysa',
          'Oborniki',
          'Oborniki Śląskie',
          'Obrzycko',
          'Odolanów',
          'Ogrodzieniec',
          'Okonek',
          'Olecko',
          'Olesno',
          'Oleszyce',
          'Oleśnica',
          'Olkusz',
          'Olsztyn',
          'Olsztynek',
          'Olszyna',
          'Oława',
          'Opalenica',
          'Opatów',
          'Opoczno',
          'Opole',
          'Opole Lubelskie',
          'Orneta',
          'Orzesze',
          'Orzysz',
          'Osieczna',
          'Osiek',
          'Ostrołęka',
          'Ostroróg',
          'Ostrowiec Świętokrzyski',
          'Ostróda',
          'Ostrów Lubelski',
          'Ostrów Mazowiecka',
          'Ostrów Wielkopolski',
          'Ostrzeszów',
          'Ośno Lubuskie',
          'Oświęcim',
          'Otmuchów',
          'Otwock',
          'Ozimek',
          'Ozorków',
          'Ożarów',
          'Ożarów Mazowiecki',
          'Pabianice',
          'Paczków',
          'Pajęczno',
          'Pakość',
          'Parczew',
          'Pasłęk',
          'Pasym',
          'Pelplin',
          'Pełczyce',
          'Piaseczno',
          'Piaski',
          'Piastów',
          'Piechowice',
          'Piekary Śląskie',
          'Pieniężno',
          'Pieńsk',
          'Pieszyce',
          'Pilawa',
          'Pilica',
          'Pilzno',
          'Piła',
          'Piława Górna',
          'Pińczów',
          'Pionki',
          'Piotrków Kujawski',
          'Piotrków Trybunalski',
          'Pisz',
          'Piwniczna-Zdrój',
          'Pleszew',
          'Płock',
          'Płońsk',
          'Płoty',
          'Pniewy',
          'Pobiedziska',
          'Poddębice',
          'Podkowa Leśna',
          'Pogorzela',
          'Polanica-Zdrój',
          'Polanów',
          'Police',
          'Polkowice',
          'Połaniec',
          'Połczyn-Zdrój',
          'Poniatowa',
          'Poniec',
          'Poręba',
          'Poznań',
          'Prabuty',
          'Praszka',
          'Prochowice',
          'Proszowice',
          'Prószków',
          'Pruchnik',
          'Prudnik',
          'Prusice',
          'Pruszcz Gdański',
          'Pruszków',
          'Przasnysz',
          'Przecław',
          'Przedbórz',
          'Przedecz',
          'Przemków',
          'Przemyśl',
          'Przeworsk',
          'Przysucha',
          'Pszczyna',
          'Pszów',
          'Puck',
          'Puławy',
          'Pułtusk',
          'Puszczykowo',
          'Pyrzyce',
          'Pyskowice',
          'Pyzdry',
          'Rabka-Zdrój',
          'Raciąż',
          'Racibórz',
          'Radków',
          'Radlin',
          'Radłów',
          'Radom',
          'Radomsko',
          'Radomyśl Wielki',
          'Radymno',
          'Radziejów',
          'Radzionków',
          'Radzymin',
          'Radzyń Chełmiński',
          'Radzyń Podlaski',
          'Rajgród',
          'Rakoniewice',
          'Raszków',
          'Rawa Mazowiecka',
          'Rawicz',
          'Recz',
          'Reda',
          'Rejowiec Fabryczny',
          'Resko',
          'Reszel',
          'Rogoźno',
          'Ropczyce',
          'Różan',
          'Ruciane-Nida',
          'Ruda Śląska',
          'Rudnik nad Sanem',
          'Rumia',
          'Rybnik',
          'Rychwał',
          'Rydułtowy',
          'Rydzyna',
          'Ryglice',
          'Ryki',
          'Rymanów',
          'Ryn',
          'Rypin',
          'Rzepin',
          'Rzeszów',
          'Rzgów',
          'Sandomierz',
          'Sanok',
          'Sejny',
          'Serock',
          'Sędziszów',
          'Sędziszów Małopolski',
          'Sępopol',
          'Sępólno Krajeńskie',
          'Sianów',
          'Siechnice',
          'Siedlce',
          'Siemianowice Śląskie',
          'Siemiatycze',
          'Sieniawa',
          'Sieradz',
          'Sieraków',
          'Sierpc',
          'Siewierz',
          'Skalbmierz',
          'Skała',
          'Skarszewy',
          'Skaryszew',
          'Skarżysko-Kamienna',
          'Skawina',
          'Skępe',
          'Skierniewice',
          'Skoczów',
          'Skoki',
          'Skórcz',
          'Skwierzyna',
          'Sława',
          'Sławków',
          'Sławno',
          'Słomniki',
          'Słubice',
          'Słupca',
          'Słupsk',
          'Sobótka',
          'Sochaczew',
          'Sokołów Małopolski',
          'Sokołów Podlaski',
          'Sokółka',
          'Solec Kujawski',
          'Sompolno',
          'Sopot',
          'Sosnowiec',
          'Sośnicowice',
          'Stalowa Wola',
          'Starachowice',
          'Stargard Szczeciński',
          'Starogard Gdański',
          'Stary Sącz',
          'Staszów',
          'Stawiski',
          'Stawiszyn',
          'Stąporków',
          'Stęszew',
          'Stoczek Łukowski',
          'Stronie Śląskie',
          'Strumień',
          'Stryków',
          'Strzegom',
          'Strzelce Krajeńskie',
          'Strzelce Opolskie',
          'Strzelin',
          'Strzelno',
          'Strzyżów',
          'Sucha Beskidzka',
          'Suchań',
          'Suchedniów',
          'Suchowola',
          'Sulechów',
          'Sulejów',
          'Sulejówek',
          'Sulęcin',
          'Sulmierzyce',
          'Sułkowice',
          'Supraśl',
          'Suraż',
          'Susz',
          'Suwałki',
          'Swarzędz',
          'Syców',
          'Szadek',
          'Szamocin',
          'Szamotuły',
          'Szczawnica',
          'Szczawno-Zdrój',
          'Szczebrzeszyn',
          'Szczecin',
          'Szczecinek',
          'Szczekociny',
          'Szczucin',
          'Szczuczyn',
          'Szczyrk',
          'Szczytna',
          'Szczytno',
          'Szepietowo',
          'Szklarska Poręba',
          'Szlichtyngowa',
          'Szprotawa',
          'Sztum',
          'Szubin',
          'Szydłowiec',
          'Ścinawa',
          'Ślesin',
          'Śmigiel',
          'Śrem',
          'Środa Śląska',
          'Środa Wielkopolska',
          'Świątniki Górne',
          'Świdnica',
          'Świdnik',
          'Świdwin',
          'Świebodzice',
          'Świebodzin',
          'Świecie',
          'Świeradów-Zdrój',
          'Świerzawa',
          'Świętochłowice',
          'Świnoujście',
          'Tarczyn',
          'Tarnobrzeg',
          'Tarnogród',
          'Tarnowskie Góry',
          'Tarnów',
          'Tczew',
          'Terespol',
          'Tłuszcz',
          'Tolkmicko',
          'Tomaszów Lubelski',
          'Tomaszów Mazowiecki',
          'Toruń',
          'Torzym',
          'Toszek',
          'Trzcianka',
          'Trzciel',
          'Trzcińsko-Zdrój',
          'Trzebiatów',
          'Trzebinia',
          'Trzebnica',
          'Trzemeszno',
          'Tuchola',
          'Tuchów',
          'Tuczno',
          'Tuliszków',
          'Turek',
          'Tuszyn',
          'Twardogóra',
          'Tychowo',
          'Tychy',
          'Tyczyn',
          'Tykocin',
          'Tyszowce',
          'Ujazd',
          'Ujście',
          'Ulanów',
          'Uniejów',
          'Ustka',
          'Ustroń',
          'Ustrzyki Dolne',
          'Wadowice',
          'Wałbrzych',
          'Wałcz',
          'Warka',
          'Warszawa',
          'Warta',
          'Wasilków',
          'Wąbrzeźno',
          'Wąchock',
          'Wągrowiec',
          'Wąsosz',
          'Wejherowo',
          'Węgliniec',
          'Węgorzewo',
          'Węgorzyno',
          'Węgrów',
          'Wiązów',
          'Wieleń',
          'Wielichowo',
          'Wieliczka',
          'Wieluń',
          'Wieruszów',
          'Więcbork',
          'Wilamowice',
          'Wisła',
          'Witkowo',
          'Witnica',
          'Wleń',
          'Władysławowo',
          'Włocławek',
          'Włodawa',
          'Włoszczowa',
          'Wodzisław Śląski',
          'Wojcieszów',
          'Wojkowice',
          'Wojnicz',
          'Wolbórz',
          'Wolbrom',
          'Wolin',
          'Wolsztyn',
          'Wołczyn',
          'Wołomin',
          'Wołów',
          'Woźniki',
          'Wrocław',
          'Wronki',
          'Września',
          'Wschowa',
          'Wyrzysk',
          'Wysoka',
          'Wysokie Mazowieckie',
          'Wyszków',
          'Wyszogród',
          'Wyśmierzyce',
          'Zabłudów',
          'Zabrze',
          'Zagórów',
          'Zagórz',
          'Zakliczyn',
          'Zakopane',
          'Zakroczym',
          'Zalewo',
          'Zambrów',
          'Zamość',
          'Zator',
          'Zawadzkie',
          'Zawichost',
          'Zawidów',
          'Zawiercie',
          'Ząbki',
          'Ząbkowice Śląskie',
          'Zbąszynek',
          'Zbąszyń',
          'Zduny',
          'Zduńska Wola',
          'Zdzieszowice',
          'Zelów',
          'Zgierz',
          'Zgorzelec',
          'Zielona Góra',
          'Zielonka',
          'Ziębice',
          'Złocieniec',
          'Złoczew',
          'Złotoryja',
          'Złotów',
          'Złoty Stok',
          'Zwierzyniec',
          'Zwoleń',
          'Żabno',
          'Żagań',
          'Żarki',
          'Żarów',
          'Żary',
          'Żelechów',
          'Żerków',
          'Żmigród',
          'Żnin',
          'Żory',
          'Żukowo',
          'Żuromin',
          'Żychlin',
          'Żyrardów',
          'Żywiec',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/pl/address/city.js': [
      function(require, module, exports) {
        module['exports'] = ['#{city_name}']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/pl/address/street_name.js': [
      function(require, module, exports) {
        module['exports'] = ['#{street_prefix} #{Name.last_name}']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/pl/address/street_address.js': [
      function(require, module, exports) {
        module['exports'] = ['#{street_name} #{building_number}']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/pl/address/default_country.js': [
      function(require, module, exports) {
        module['exports'] = ['Polska']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/pl/address/index.js': [
      function(require, module, exports) {
        var address = {}
        module['exports'] = address
        address.country = require('./country')
        address.building_number = require('./building_number')
        address.street_prefix = require('./street_prefix')
        address.secondary_address = require('./secondary_address')
        address.postcode = require('./postcode')
        address.state = require('./state')
        address.state_abbr = require('./state_abbr')
        address.city_name = require('./city_name')
        address.city = require('./city')
        address.street_name = require('./street_name')
        address.street_address = require('./street_address')
        address.default_country = require('./default_country')
      },
      {
        './country':
          '../node_modules/faker/lib/locales/pl/address/country.js',
        './building_number':
          '../node_modules/faker/lib/locales/pl/address/building_number.js',
        './street_prefix':
          '../node_modules/faker/lib/locales/pl/address/street_prefix.js',
        './secondary_address':
          '../node_modules/faker/lib/locales/pl/address/secondary_address.js',
        './postcode':
          '../node_modules/faker/lib/locales/pl/address/postcode.js',
        './state': '../node_modules/faker/lib/locales/pl/address/state.js',
        './state_abbr':
          '../node_modules/faker/lib/locales/pl/address/state_abbr.js',
        './city_name':
          '../node_modules/faker/lib/locales/pl/address/city_name.js',
        './city': '../node_modules/faker/lib/locales/pl/address/city.js',
        './street_name':
          '../node_modules/faker/lib/locales/pl/address/street_name.js',
        './street_address':
          '../node_modules/faker/lib/locales/pl/address/street_address.js',
        './default_country':
          '../node_modules/faker/lib/locales/pl/address/default_country.js',
      },
    ],
    '../node_modules/faker/lib/locales/pl/company/suffix.js': [
      function(require, module, exports) {
        module['exports'] = ['Inc', 'and Sons', 'LLC', 'Group']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/pl/company/adjetive.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Adaptive',
          'Advanced',
          'Ameliorated',
          'Assimilated',
          'Automated',
          'Balanced',
          'Business-focused',
          'Centralized',
          'Cloned',
          'Compatible',
          'Configurable',
          'Cross-group',
          'Cross-platform',
          'Customer-focused',
          'Customizable',
          'Decentralized',
          'De-engineered',
          'Devolved',
          'Digitized',
          'Distributed',
          'Diverse',
          'Down-sized',
          'Enhanced',
          'Enterprise-wide',
          'Ergonomic',
          'Exclusive',
          'Expanded',
          'Extended',
          'Face to face',
          'Focused',
          'Front-line',
          'Fully-configurable',
          'Function-based',
          'Fundamental',
          'Future-proofed',
          'Grass-roots',
          'Horizontal',
          'Implemented',
          'Innovative',
          'Integrated',
          'Intuitive',
          'Inverse',
          'Managed',
          'Mandatory',
          'Monitored',
          'Multi-channelled',
          'Multi-lateral',
          'Multi-layered',
          'Multi-tiered',
          'Networked',
          'Object-based',
          'Open-architected',
          'Open-source',
          'Operative',
          'Optimized',
          'Optional',
          'Organic',
          'Organized',
          'Persevering',
          'Persistent',
          'Phased',
          'Polarised',
          'Pre-emptive',
          'Proactive',
          'Profit-focused',
          'Profound',
          'Programmable',
          'Progressive',
          'Public-key',
          'Quality-focused',
          'Reactive',
          'Realigned',
          'Re-contextualized',
          'Re-engineered',
          'Reduced',
          'Reverse-engineered',
          'Right-sized',
          'Robust',
          'Seamless',
          'Secured',
          'Self-enabling',
          'Sharable',
          'Stand-alone',
          'Streamlined',
          'Switchable',
          'Synchronised',
          'Synergistic',
          'Synergized',
          'Team-oriented',
          'Total',
          'Triple-buffered',
          'Universal',
          'Up-sized',
          'Upgradable',
          'User-centric',
          'User-friendly',
          'Versatile',
          'Virtual',
          'Visionary',
          'Vision-oriented',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/pl/company/descriptor.js': [
      function(require, module, exports) {
        module['exports'] = [
          '24 hour',
          '24/7',
          '3rd generation',
          '4th generation',
          '5th generation',
          '6th generation',
          'actuating',
          'analyzing',
          'asymmetric',
          'asynchronous',
          'attitude-oriented',
          'background',
          'bandwidth-monitored',
          'bi-directional',
          'bifurcated',
          'bottom-line',
          'clear-thinking',
          'client-driven',
          'client-server',
          'coherent',
          'cohesive',
          'composite',
          'context-sensitive',
          'contextually-based',
          'content-based',
          'dedicated',
          'demand-driven',
          'didactic',
          'directional',
          'discrete',
          'disintermediate',
          'dynamic',
          'eco-centric',
          'empowering',
          'encompassing',
          'even-keeled',
          'executive',
          'explicit',
          'exuding',
          'fault-tolerant',
          'foreground',
          'fresh-thinking',
          'full-range',
          'global',
          'grid-enabled',
          'heuristic',
          'high-level',
          'holistic',
          'homogeneous',
          'human-resource',
          'hybrid',
          'impactful',
          'incremental',
          'intangible',
          'interactive',
          'intermediate',
          'leading edge',
          'local',
          'logistical',
          'maximized',
          'methodical',
          'mission-critical',
          'mobile',
          'modular',
          'motivating',
          'multimedia',
          'multi-state',
          'multi-tasking',
          'national',
          'needs-based',
          'neutral',
          'next generation',
          'non-volatile',
          'object-oriented',
          'optimal',
          'optimizing',
          'radical',
          'real-time',
          'reciprocal',
          'regional',
          'responsive',
          'scalable',
          'secondary',
          'solution-oriented',
          'stable',
          'static',
          'systematic',
          'systemic',
          'system-worthy',
          'tangible',
          'tertiary',
          'transitional',
          'uniform',
          'upward-trending',
          'user-facing',
          'value-added',
          'web-enabled',
          'well-modulated',
          'zero administration',
          'zero defect',
          'zero tolerance',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/pl/company/noun.js': [
      function(require, module, exports) {
        module['exports'] = [
          'ability',
          'access',
          'adapter',
          'algorithm',
          'alliance',
          'analyzer',
          'application',
          'approach',
          'architecture',
          'archive',
          'artificial intelligence',
          'array',
          'attitude',
          'benchmark',
          'budgetary management',
          'capability',
          'capacity',
          'challenge',
          'circuit',
          'collaboration',
          'complexity',
          'concept',
          'conglomeration',
          'contingency',
          'core',
          'customer loyalty',
          'database',
          'data-warehouse',
          'definition',
          'emulation',
          'encoding',
          'encryption',
          'extranet',
          'firmware',
          'flexibility',
          'focus group',
          'forecast',
          'frame',
          'framework',
          'function',
          'functionalities',
          'Graphic Interface',
          'groupware',
          'Graphical User Interface',
          'hardware',
          'help-desk',
          'hierarchy',
          'hub',
          'implementation',
          'info-mediaries',
          'infrastructure',
          'initiative',
          'installation',
          'instruction set',
          'interface',
          'internet solution',
          'intranet',
          'knowledge user',
          'knowledge base',
          'local area network',
          'leverage',
          'matrices',
          'matrix',
          'methodology',
          'middleware',
          'migration',
          'model',
          'moderator',
          'monitoring',
          'moratorium',
          'neural-net',
          'open architecture',
          'open system',
          'orchestration',
          'paradigm',
          'parallelism',
          'policy',
          'portal',
          'pricing structure',
          'process improvement',
          'product',
          'productivity',
          'project',
          'projection',
          'protocol',
          'secured line',
          'service-desk',
          'software',
          'solution',
          'standardization',
          'strategy',
          'structure',
          'success',
          'superstructure',
          'support',
          'synergy',
          'system engine',
          'task-force',
          'throughput',
          'time-frame',
          'toolset',
          'utilisation',
          'website',
          'workforce',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/pl/company/bs_verb.js': [
      function(require, module, exports) {
        module['exports'] = [
          'implement',
          'utilize',
          'integrate',
          'streamline',
          'optimize',
          'evolve',
          'transform',
          'embrace',
          'enable',
          'orchestrate',
          'leverage',
          'reinvent',
          'aggregate',
          'architect',
          'enhance',
          'incentivize',
          'morph',
          'empower',
          'envisioneer',
          'monetize',
          'harness',
          'facilitate',
          'seize',
          'disintermediate',
          'synergize',
          'strategize',
          'deploy',
          'brand',
          'grow',
          'target',
          'syndicate',
          'synthesize',
          'deliver',
          'mesh',
          'incubate',
          'engage',
          'maximize',
          'benchmark',
          'expedite',
          'reintermediate',
          'whiteboard',
          'visualize',
          'repurpose',
          'innovate',
          'scale',
          'unleash',
          'drive',
          'extend',
          'engineer',
          'revolutionize',
          'generate',
          'exploit',
          'transition',
          'e-enable',
          'iterate',
          'cultivate',
          'matrix',
          'productize',
          'redefine',
          'recontextualize',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/pl/company/bs_adjective.js': [
      function(require, module, exports) {
        module['exports'] = [
          'clicks-and-mortar',
          'value-added',
          'vertical',
          'proactive',
          'robust',
          'revolutionary',
          'scalable',
          'leading-edge',
          'innovative',
          'intuitive',
          'strategic',
          'e-business',
          'mission-critical',
          'sticky',
          'one-to-one',
          '24/7',
          'end-to-end',
          'global',
          'B2B',
          'B2C',
          'granular',
          'frictionless',
          'virtual',
          'viral',
          'dynamic',
          '24/365',
          'best-of-breed',
          'killer',
          'magnetic',
          'bleeding-edge',
          'web-enabled',
          'interactive',
          'dot-com',
          'sexy',
          'back-end',
          'real-time',
          'efficient',
          'front-end',
          'distributed',
          'seamless',
          'extensible',
          'turn-key',
          'world-class',
          'open-source',
          'cross-platform',
          'cross-media',
          'synergistic',
          'bricks-and-clicks',
          'out-of-the-box',
          'enterprise',
          'integrated',
          'impactful',
          'wireless',
          'transparent',
          'next-generation',
          'cutting-edge',
          'user-centric',
          'visionary',
          'customized',
          'ubiquitous',
          'plug-and-play',
          'collaborative',
          'compelling',
          'holistic',
          'rich',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/pl/company/bs_noun.js': [
      function(require, module, exports) {
        module['exports'] = [
          'synergies',
          'web-readiness',
          'paradigms',
          'markets',
          'partnerships',
          'infrastructures',
          'platforms',
          'initiatives',
          'channels',
          'eyeballs',
          'communities',
          'ROI',
          'solutions',
          'e-tailers',
          'e-services',
          'action-items',
          'portals',
          'niches',
          'technologies',
          'content',
          'vortals',
          'supply-chains',
          'convergence',
          'relationships',
          'architectures',
          'interfaces',
          'e-markets',
          'e-commerce',
          'systems',
          'bandwidth',
          'infomediaries',
          'models',
          'mindshare',
          'deliverables',
          'users',
          'schemas',
          'networks',
          'applications',
          'metrics',
          'e-business',
          'functionalities',
          'experiences',
          'web services',
          'methodologies',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/pl/company/name.js': [
      function(require, module, exports) {
        module['exports'] = [
          '#{Name.last_name} #{suffix}',
          '#{Name.last_name}-#{Name.last_name}',
          '#{Name.last_name}, #{Name.last_name} and #{Name.last_name}',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/pl/company/index.js': [
      function(require, module, exports) {
        var company = {}
        module['exports'] = company
        company.suffix = require('./suffix')
        company.adjetive = require('./adjetive')
        company.descriptor = require('./descriptor')
        company.noun = require('./noun')
        company.bs_verb = require('./bs_verb')
        company.bs_adjective = require('./bs_adjective')
        company.bs_noun = require('./bs_noun')
        company.name = require('./name')
      },
      {
        './suffix':
          '../node_modules/faker/lib/locales/pl/company/suffix.js',
        './adjetive':
          '../node_modules/faker/lib/locales/pl/company/adjetive.js',
        './descriptor':
          '../node_modules/faker/lib/locales/pl/company/descriptor.js',
        './noun': '../node_modules/faker/lib/locales/pl/company/noun.js',
        './bs_verb':
          '../node_modules/faker/lib/locales/pl/company/bs_verb.js',
        './bs_adjective':
          '../node_modules/faker/lib/locales/pl/company/bs_adjective.js',
        './bs_noun':
          '../node_modules/faker/lib/locales/pl/company/bs_noun.js',
        './name': '../node_modules/faker/lib/locales/pl/company/name.js',
      },
    ],
    '../node_modules/faker/lib/locales/pl/internet/free_email.js': [
      function(require, module, exports) {
        module['exports'] = ['gmail.com', 'yahoo.com', 'hotmail.com']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/pl/internet/domain_suffix.js': [
      function(require, module, exports) {
        module['exports'] = ['com', 'pl', 'com.pl', 'net', 'org']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/pl/internet/index.js': [
      function(require, module, exports) {
        var internet = {}
        module['exports'] = internet
        internet.free_email = require('./free_email')
        internet.domain_suffix = require('./domain_suffix')
      },
      {
        './free_email':
          '../node_modules/faker/lib/locales/pl/internet/free_email.js',
        './domain_suffix':
          '../node_modules/faker/lib/locales/pl/internet/domain_suffix.js',
      },
    ],
    '../node_modules/faker/lib/locales/pl/lorem/words.js': [
      function(require, module, exports) {
        module['exports'] = [
          'alias',
          'consequatur',
          'aut',
          'perferendis',
          'sit',
          'voluptatem',
          'accusantium',
          'doloremque',
          'aperiam',
          'eaque',
          'ipsa',
          'quae',
          'ab',
          'illo',
          'inventore',
          'veritatis',
          'et',
          'quasi',
          'architecto',
          'beatae',
          'vitae',
          'dicta',
          'sunt',
          'explicabo',
          'aspernatur',
          'aut',
          'odit',
          'aut',
          'fugit',
          'sed',
          'quia',
          'consequuntur',
          'magni',
          'dolores',
          'eos',
          'qui',
          'ratione',
          'voluptatem',
          'sequi',
          'nesciunt',
          'neque',
          'dolorem',
          'ipsum',
          'quia',
          'dolor',
          'sit',
          'amet',
          'consectetur',
          'adipisci',
          'velit',
          'sed',
          'quia',
          'non',
          'numquam',
          'eius',
          'modi',
          'tempora',
          'incidunt',
          'ut',
          'labore',
          'et',
          'dolore',
          'magnam',
          'aliquam',
          'quaerat',
          'voluptatem',
          'ut',
          'enim',
          'ad',
          'minima',
          'veniam',
          'quis',
          'nostrum',
          'exercitationem',
          'ullam',
          'corporis',
          'nemo',
          'enim',
          'ipsam',
          'voluptatem',
          'quia',
          'voluptas',
          'sit',
          'suscipit',
          'laboriosam',
          'nisi',
          'ut',
          'aliquid',
          'ex',
          'ea',
          'commodi',
          'consequatur',
          'quis',
          'autem',
          'vel',
          'eum',
          'iure',
          'reprehenderit',
          'qui',
          'in',
          'ea',
          'voluptate',
          'velit',
          'esse',
          'quam',
          'nihil',
          'molestiae',
          'et',
          'iusto',
          'odio',
          'dignissimos',
          'ducimus',
          'qui',
          'blanditiis',
          'praesentium',
          'laudantium',
          'totam',
          'rem',
          'voluptatum',
          'deleniti',
          'atque',
          'corrupti',
          'quos',
          'dolores',
          'et',
          'quas',
          'molestias',
          'excepturi',
          'sint',
          'occaecati',
          'cupiditate',
          'non',
          'provident',
          'sed',
          'ut',
          'perspiciatis',
          'unde',
          'omnis',
          'iste',
          'natus',
          'error',
          'similique',
          'sunt',
          'in',
          'culpa',
          'qui',
          'officia',
          'deserunt',
          'mollitia',
          'animi',
          'id',
          'est',
          'laborum',
          'et',
          'dolorum',
          'fuga',
          'et',
          'harum',
          'quidem',
          'rerum',
          'facilis',
          'est',
          'et',
          'expedita',
          'distinctio',
          'nam',
          'libero',
          'tempore',
          'cum',
          'soluta',
          'nobis',
          'est',
          'eligendi',
          'optio',
          'cumque',
          'nihil',
          'impedit',
          'quo',
          'porro',
          'quisquam',
          'est',
          'qui',
          'minus',
          'id',
          'quod',
          'maxime',
          'placeat',
          'facere',
          'possimus',
          'omnis',
          'voluptas',
          'assumenda',
          'est',
          'omnis',
          'dolor',
          'repellendus',
          'temporibus',
          'autem',
          'quibusdam',
          'et',
          'aut',
          'consequatur',
          'vel',
          'illum',
          'qui',
          'dolorem',
          'eum',
          'fugiat',
          'quo',
          'voluptas',
          'nulla',
          'pariatur',
          'at',
          'vero',
          'eos',
          'et',
          'accusamus',
          'officiis',
          'debitis',
          'aut',
          'rerum',
          'necessitatibus',
          'saepe',
          'eveniet',
          'ut',
          'et',
          'voluptates',
          'repudiandae',
          'sint',
          'et',
          'molestiae',
          'non',
          'recusandae',
          'itaque',
          'earum',
          'rerum',
          'hic',
          'tenetur',
          'a',
          'sapiente',
          'delectus',
          'ut',
          'aut',
          'reiciendis',
          'voluptatibus',
          'maiores',
          'doloribus',
          'asperiores',
          'repellat',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/pl/lorem/supplemental.js': [
      function(require, module, exports) {
        module['exports'] = [
          'abbas',
          'abduco',
          'abeo',
          'abscido',
          'absconditus',
          'absens',
          'absorbeo',
          'absque',
          'abstergo',
          'absum',
          'abundans',
          'abutor',
          'accedo',
          'accendo',
          'acceptus',
          'accipio',
          'accommodo',
          'accusator',
          'acer',
          'acerbitas',
          'acervus',
          'acidus',
          'acies',
          'acquiro',
          'acsi',
          'adamo',
          'adaugeo',
          'addo',
          'adduco',
          'ademptio',
          'adeo',
          'adeptio',
          'adfectus',
          'adfero',
          'adficio',
          'adflicto',
          'adhaero',
          'adhuc',
          'adicio',
          'adimpleo',
          'adinventitias',
          'adipiscor',
          'adiuvo',
          'administratio',
          'admiratio',
          'admitto',
          'admoneo',
          'admoveo',
          'adnuo',
          'adopto',
          'adsidue',
          'adstringo',
          'adsuesco',
          'adsum',
          'adulatio',
          'adulescens',
          'adultus',
          'aduro',
          'advenio',
          'adversus',
          'advoco',
          'aedificium',
          'aeger',
          'aegre',
          'aegrotatio',
          'aegrus',
          'aeneus',
          'aequitas',
          'aequus',
          'aer',
          'aestas',
          'aestivus',
          'aestus',
          'aetas',
          'aeternus',
          'ager',
          'aggero',
          'aggredior',
          'agnitio',
          'agnosco',
          'ago',
          'ait',
          'aiunt',
          'alienus',
          'alii',
          'alioqui',
          'aliqua',
          'alius',
          'allatus',
          'alo',
          'alter',
          'altus',
          'alveus',
          'amaritudo',
          'ambitus',
          'ambulo',
          'amicitia',
          'amiculum',
          'amissio',
          'amita',
          'amitto',
          'amo',
          'amor',
          'amoveo',
          'amplexus',
          'amplitudo',
          'amplus',
          'ancilla',
          'angelus',
          'angulus',
          'angustus',
          'animadverto',
          'animi',
          'animus',
          'annus',
          'anser',
          'ante',
          'antea',
          'antepono',
          'antiquus',
          'aperio',
          'aperte',
          'apostolus',
          'apparatus',
          'appello',
          'appono',
          'appositus',
          'approbo',
          'apto',
          'aptus',
          'apud',
          'aqua',
          'ara',
          'aranea',
          'arbitro',
          'arbor',
          'arbustum',
          'arca',
          'arceo',
          'arcesso',
          'arcus',
          'argentum',
          'argumentum',
          'arguo',
          'arma',
          'armarium',
          'armo',
          'aro',
          'ars',
          'articulus',
          'artificiose',
          'arto',
          'arx',
          'ascisco',
          'ascit',
          'asper',
          'aspicio',
          'asporto',
          'assentator',
          'astrum',
          'atavus',
          'ater',
          'atqui',
          'atrocitas',
          'atrox',
          'attero',
          'attollo',
          'attonbitus',
          'auctor',
          'auctus',
          'audacia',
          'audax',
          'audentia',
          'audeo',
          'audio',
          'auditor',
          'aufero',
          'aureus',
          'auris',
          'aurum',
          'aut',
          'autem',
          'autus',
          'auxilium',
          'avaritia',
          'avarus',
          'aveho',
          'averto',
          'avoco',
          'baiulus',
          'balbus',
          'barba',
          'bardus',
          'basium',
          'beatus',
          'bellicus',
          'bellum',
          'bene',
          'beneficium',
          'benevolentia',
          'benigne',
          'bestia',
          'bibo',
          'bis',
          'blandior',
          'bonus',
          'bos',
          'brevis',
          'cado',
          'caecus',
          'caelestis',
          'caelum',
          'calamitas',
          'calcar',
          'calco',
          'calculus',
          'callide',
          'campana',
          'candidus',
          'canis',
          'canonicus',
          'canto',
          'capillus',
          'capio',
          'capitulus',
          'capto',
          'caput',
          'carbo',
          'carcer',
          'careo',
          'caries',
          'cariosus',
          'caritas',
          'carmen',
          'carpo',
          'carus',
          'casso',
          'caste',
          'casus',
          'catena',
          'caterva',
          'cattus',
          'cauda',
          'causa',
          'caute',
          'caveo',
          'cavus',
          'cedo',
          'celebrer',
          'celer',
          'celo',
          'cena',
          'cenaculum',
          'ceno',
          'censura',
          'centum',
          'cerno',
          'cernuus',
          'certe',
          'certo',
          'certus',
          'cervus',
          'cetera',
          'charisma',
          'chirographum',
          'cibo',
          'cibus',
          'cicuta',
          'cilicium',
          'cimentarius',
          'ciminatio',
          'cinis',
          'circumvenio',
          'cito',
          'civis',
          'civitas',
          'clam',
          'clamo',
          'claro',
          'clarus',
          'claudeo',
          'claustrum',
          'clementia',
          'clibanus',
          'coadunatio',
          'coaegresco',
          'coepi',
          'coerceo',
          'cogito',
          'cognatus',
          'cognomen',
          'cogo',
          'cohaero',
          'cohibeo',
          'cohors',
          'colligo',
          'colloco',
          'collum',
          'colo',
          'color',
          'coma',
          'combibo',
          'comburo',
          'comedo',
          'comes',
          'cometes',
          'comis',
          'comitatus',
          'commemoro',
          'comminor',
          'commodo',
          'communis',
          'comparo',
          'compello',
          'complectus',
          'compono',
          'comprehendo',
          'comptus',
          'conatus',
          'concedo',
          'concido',
          'conculco',
          'condico',
          'conduco',
          'confero',
          'confido',
          'conforto',
          'confugo',
          'congregatio',
          'conicio',
          'coniecto',
          'conitor',
          'coniuratio',
          'conor',
          'conqueror',
          'conscendo',
          'conservo',
          'considero',
          'conspergo',
          'constans',
          'consuasor',
          'contabesco',
          'contego',
          'contigo',
          'contra',
          'conturbo',
          'conventus',
          'convoco',
          'copia',
          'copiose',
          'cornu',
          'corona',
          'corpus',
          'correptius',
          'corrigo',
          'corroboro',
          'corrumpo',
          'coruscus',
          'cotidie',
          'crapula',
          'cras',
          'crastinus',
          'creator',
          'creber',
          'crebro',
          'credo',
          'creo',
          'creptio',
          'crepusculum',
          'cresco',
          'creta',
          'cribro',
          'crinis',
          'cruciamentum',
          'crudelis',
          'cruentus',
          'crur',
          'crustulum',
          'crux',
          'cubicularis',
          'cubitum',
          'cubo',
          'cui',
          'cuius',
          'culpa',
          'culpo',
          'cultellus',
          'cultura',
          'cum',
          'cunabula',
          'cunae',
          'cunctatio',
          'cupiditas',
          'cupio',
          'cuppedia',
          'cupressus',
          'cur',
          'cura',
          'curatio',
          'curia',
          'curiositas',
          'curis',
          'curo',
          'curriculum',
          'currus',
          'cursim',
          'curso',
          'cursus',
          'curto',
          'curtus',
          'curvo',
          'curvus',
          'custodia',
          'damnatio',
          'damno',
          'dapifer',
          'debeo',
          'debilito',
          'decens',
          'decerno',
          'decet',
          'decimus',
          'decipio',
          'decor',
          'decretum',
          'decumbo',
          'dedecor',
          'dedico',
          'deduco',
          'defaeco',
          'defendo',
          'defero',
          'defessus',
          'defetiscor',
          'deficio',
          'defigo',
          'defleo',
          'defluo',
          'defungo',
          'degenero',
          'degero',
          'degusto',
          'deinde',
          'delectatio',
          'delego',
          'deleo',
          'delibero',
          'delicate',
          'delinquo',
          'deludo',
          'demens',
          'demergo',
          'demitto',
          'demo',
          'demonstro',
          'demoror',
          'demulceo',
          'demum',
          'denego',
          'denique',
          'dens',
          'denuncio',
          'denuo',
          'deorsum',
          'depereo',
          'depono',
          'depopulo',
          'deporto',
          'depraedor',
          'deprecator',
          'deprimo',
          'depromo',
          'depulso',
          'deputo',
          'derelinquo',
          'derideo',
          'deripio',
          'desidero',
          'desino',
          'desipio',
          'desolo',
          'desparatus',
          'despecto',
          'despirmatio',
          'infit',
          'inflammatio',
          'paens',
          'patior',
          'patria',
          'patrocinor',
          'patruus',
          'pauci',
          'paulatim',
          'pauper',
          'pax',
          'peccatus',
          'pecco',
          'pecto',
          'pectus',
          'pecunia',
          'pecus',
          'peior',
          'pel',
          'ocer',
          'socius',
          'sodalitas',
          'sol',
          'soleo',
          'solio',
          'solitudo',
          'solium',
          'sollers',
          'sollicito',
          'solum',
          'solus',
          'solutio',
          'solvo',
          'somniculosus',
          'somnus',
          'sonitus',
          'sono',
          'sophismata',
          'sopor',
          'sordeo',
          'sortitus',
          'spargo',
          'speciosus',
          'spectaculum',
          'speculum',
          'sperno',
          'spero',
          'spes',
          'spiculum',
          'spiritus',
          'spoliatio',
          'sponte',
          'stabilis',
          'statim',
          'statua',
          'stella',
          'stillicidium',
          'stipes',
          'stips',
          'sto',
          'strenuus',
          'strues',
          'studio',
          'stultus',
          'suadeo',
          'suasoria',
          'sub',
          'subito',
          'subiungo',
          'sublime',
          'subnecto',
          'subseco',
          'substantia',
          'subvenio',
          'succedo',
          'succurro',
          'sufficio',
          'suffoco',
          'suffragium',
          'suggero',
          'sui',
          'sulum',
          'sum',
          'summa',
          'summisse',
          'summopere',
          'sumo',
          'sumptus',
          'supellex',
          'super',
          'suppellex',
          'supplanto',
          'suppono',
          'supra',
          'surculus',
          'surgo',
          'sursum',
          'suscipio',
          'suspendo',
          'sustineo',
          'suus',
          'synagoga',
          'tabella',
          'tabernus',
          'tabesco',
          'tabgo',
          'tabula',
          'taceo',
          'tactus',
          'taedium',
          'talio',
          'talis',
          'talus',
          'tam',
          'tamdiu',
          'tamen',
          'tametsi',
          'tamisium',
          'tamquam',
          'tandem',
          'tantillus',
          'tantum',
          'tardus',
          'tego',
          'temeritas',
          'temperantia',
          'templum',
          'temptatio',
          'tempus',
          'tenax',
          'tendo',
          'teneo',
          'tener',
          'tenuis',
          'tenus',
          'tepesco',
          'tepidus',
          'ter',
          'terebro',
          'teres',
          'terga',
          'tergeo',
          'tergiversatio',
          'tergo',
          'tergum',
          'termes',
          'terminatio',
          'tero',
          'terra',
          'terreo',
          'territo',
          'terror',
          'tersus',
          'tertius',
          'testimonium',
          'texo',
          'textilis',
          'textor',
          'textus',
          'thalassinus',
          'theatrum',
          'theca',
          'thema',
          'theologus',
          'thermae',
          'thesaurus',
          'thesis',
          'thorax',
          'thymbra',
          'thymum',
          'tibi',
          'timidus',
          'timor',
          'titulus',
          'tolero',
          'tollo',
          'tondeo',
          'tonsor',
          'torqueo',
          'torrens',
          'tot',
          'totidem',
          'toties',
          'totus',
          'tracto',
          'trado',
          'traho',
          'trans',
          'tredecim',
          'tremo',
          'trepide',
          'tres',
          'tribuo',
          'tricesimus',
          'triduana',
          'triginta',
          'tripudio',
          'tristis',
          'triumphus',
          'trucido',
          'truculenter',
          'tubineus',
          'tui',
          'tum',
          'tumultus',
          'tunc',
          'turba',
          'turbo',
          'turpe',
          'turpis',
          'tutamen',
          'tutis',
          'tyrannus',
          'uberrime',
          'ubi',
          'ulciscor',
          'ullus',
          'ulterius',
          'ultio',
          'ultra',
          'umbra',
          'umerus',
          'umquam',
          'una',
          'unde',
          'undique',
          'universe',
          'unus',
          'urbanus',
          'urbs',
          'uredo',
          'usitas',
          'usque',
          'ustilo',
          'ustulo',
          'usus',
          'uter',
          'uterque',
          'utilis',
          'utique',
          'utor',
          'utpote',
          'utrimque',
          'utroque',
          'utrum',
          'uxor',
          'vaco',
          'vacuus',
          'vado',
          'vae',
          'valde',
          'valens',
          'valeo',
          'valetudo',
          'validus',
          'vallum',
          'vapulus',
          'varietas',
          'varius',
          'vehemens',
          'vel',
          'velociter',
          'velum',
          'velut',
          'venia',
          'venio',
          'ventito',
          'ventosus',
          'ventus',
          'venustas',
          'ver',
          'verbera',
          'verbum',
          'vere',
          'verecundia',
          'vereor',
          'vergo',
          'veritas',
          'vero',
          'versus',
          'verto',
          'verumtamen',
          'verus',
          'vesco',
          'vesica',
          'vesper',
          'vespillo',
          'vester',
          'vestigium',
          'vestrum',
          'vetus',
          'via',
          'vicinus',
          'vicissitudo',
          'victoria',
          'victus',
          'videlicet',
          'video',
          'viduata',
          'viduo',
          'vigilo',
          'vigor',
          'vilicus',
          'vilis',
          'vilitas',
          'villa',
          'vinco',
          'vinculum',
          'vindico',
          'vinitor',
          'vinum',
          'vir',
          'virga',
          'virgo',
          'viridis',
          'viriliter',
          'virtus',
          'vis',
          'viscus',
          'vita',
          'vitiosus',
          'vitium',
          'vito',
          'vivo',
          'vix',
          'vobis',
          'vociferor',
          'voco',
          'volaticus',
          'volo',
          'volubilis',
          'voluntarius',
          'volup',
          'volutabrum',
          'volva',
          'vomer',
          'vomica',
          'vomito',
          'vorago',
          'vorax',
          'voro',
          'vos',
          'votum',
          'voveo',
          'vox',
          'vulariter',
          'vulgaris',
          'vulgivagus',
          'vulgo',
          'vulgus',
          'vulnero',
          'vulnus',
          'vulpes',
          'vulticulus',
          'vultuosus',
          'xiphias',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/pl/lorem/index.js': [
      function(require, module, exports) {
        var lorem = {}
        module['exports'] = lorem
        lorem.words = require('./words')
        lorem.supplemental = require('./supplemental')
      },
      {
        './words': '../node_modules/faker/lib/locales/pl/lorem/words.js',
        './supplemental':
          '../node_modules/faker/lib/locales/pl/lorem/supplemental.js',
      },
    ],
    '../node_modules/faker/lib/locales/pl/phone_number/formats.js': [
      function(require, module, exports) {
        module['exports'] = [
          '12-###-##-##',
          '13-###-##-##',
          '14-###-##-##',
          '15-###-##-##',
          '16-###-##-##',
          '17-###-##-##',
          '18-###-##-##',
          '22-###-##-##',
          '23-###-##-##',
          '24-###-##-##',
          '25-###-##-##',
          '29-###-##-##',
          '32-###-##-##',
          '33-###-##-##',
          '34-###-##-##',
          '41-###-##-##',
          '42-###-##-##',
          '43-###-##-##',
          '44-###-##-##',
          '46-###-##-##',
          '48-###-##-##',
          '52-###-##-##',
          '54-###-##-##',
          '55-###-##-##',
          '56-###-##-##',
          '58-###-##-##',
          '59-###-##-##',
          '61-###-##-##',
          '62-###-##-##',
          '63-###-##-##',
          '65-###-##-##',
          '67-###-##-##',
          '68-###-##-##',
          '71-###-##-##',
          '74-###-##-##',
          '75-###-##-##',
          '76-###-##-##',
          '77-###-##-##',
          '81-###-##-##',
          '82-###-##-##',
          '83-###-##-##',
          '84-###-##-##',
          '85-###-##-##',
          '86-###-##-##',
          '87-###-##-##',
          '89-###-##-##',
          '91-###-##-##',
          '94-###-##-##',
          '95-###-##-##',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/pl/phone_number/index.js': [
      function(require, module, exports) {
        var phone_number = {}
        module['exports'] = phone_number
        phone_number.formats = require('./formats')
      },
      {
        './formats':
          '../node_modules/faker/lib/locales/pl/phone_number/formats.js',
      },
    ],
    '../node_modules/faker/lib/locales/pl/cell_phone/formats.js': [
      function(require, module, exports) {
        module['exports'] = [
          '50-###-##-##',
          '51-###-##-##',
          '53-###-##-##',
          '57-###-##-##',
          '60-###-##-##',
          '66-###-##-##',
          '69-###-##-##',
          '72-###-##-##',
          '73-###-##-##',
          '78-###-##-##',
          '79-###-##-##',
          '88-###-##-##',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/pl/cell_phone/index.js': [
      function(require, module, exports) {
        var cell_phone = {}
        module['exports'] = cell_phone
        cell_phone.formats = require('./formats')
      },
      {
        './formats':
          '../node_modules/faker/lib/locales/pl/cell_phone/formats.js',
      },
    ],
    '../node_modules/faker/lib/locales/pl/index.js': [
      function(require, module, exports) {
        var pl = {}
        module['exports'] = pl
        pl.title = 'Polish'
        pl.name = require('./name')
        pl.address = require('./address')
        pl.company = require('./company')
        pl.internet = require('./internet')
        pl.lorem = require('./lorem')
        pl.phone_number = require('./phone_number')
        pl.cell_phone = require('./cell_phone')
      },
      {
        './name': '../node_modules/faker/lib/locales/pl/name/index.js',
        './address':
          '../node_modules/faker/lib/locales/pl/address/index.js',
        './company':
          '../node_modules/faker/lib/locales/pl/company/index.js',
        './internet':
          '../node_modules/faker/lib/locales/pl/internet/index.js',
        './lorem': '../node_modules/faker/lib/locales/pl/lorem/index.js',
        './phone_number':
          '../node_modules/faker/lib/locales/pl/phone_number/index.js',
        './cell_phone':
          '../node_modules/faker/lib/locales/pl/cell_phone/index.js',
      },
    ],
    '../node_modules/faker/lib/locales/pt_BR/address/city_prefix.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Nova',
          'Velha',
          'Grande',
          'Vila',
          'Município de',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/pt_BR/address/city_suffix.js': [
      function(require, module, exports) {
        module['exports'] = [
          'do Descoberto',
          'de Nossa Senhora',
          'do Norte',
          'do Sul',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/pt_BR/address/country.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Afeganistão',
          'Albânia',
          'Algéria',
          'Samoa',
          'Andorra',
          'Angola',
          'Anguilla',
          'Antigua and Barbada',
          'Argentina',
          'Armênia',
          'Aruba',
          'Austrália',
          'Áustria',
          'Alzerbajão',
          'Bahamas',
          'Barém',
          'Bangladesh',
          'Barbado',
          'Belgrado',
          'Bélgica',
          'Belize',
          'Benin',
          'Bermuda',
          'Bhutan',
          'Bolívia',
          'Bôsnia',
          'Botuasuna',
          'Bouvetoia',
          'Brasil',
          'Arquipélago de Chagos',
          'Ilhas Virgens',
          'Brunei',
          'Bulgária',
          'Burkina Faso',
          'Burundi',
          'Cambójia',
          'Camarões',
          'Canadá',
          'Cabo Verde',
          'Ilhas Caiman',
          'República da África Central',
          'Chad',
          'Chile',
          'China',
          'Ilhas Natal',
          'Ilhas Cocos',
          'Colômbia',
          'Comoros',
          'Congo',
          'Ilhas Cook',
          'Costa Rica',
          'Costa do Marfim',
          'Croácia',
          'Cuba',
          'Cyprus',
          'República Tcheca',
          'Dinamarca',
          'Djibouti',
          'Dominica',
          'República Dominicana',
          'Equador',
          'Egito',
          'El Salvador',
          'Guiné Equatorial',
          'Eritrea',
          'Estônia',
          'Etiópia',
          'Ilhas Faroe',
          'Malvinas',
          'Fiji',
          'Finlândia',
          'França',
          'Guiné Francesa',
          'Polinésia Francesa',
          'Gabão',
          'Gâmbia',
          'Georgia',
          'Alemanha',
          'Gana',
          'Gibraltar',
          'Grécia',
          'Groelândia',
          'Granada',
          'Guadalupe',
          'Guano',
          'Guatemala',
          'Guernsey',
          'Guiné',
          'Guiné-Bissau',
          'Guiana',
          'Haiti',
          'Heard Island and McDonald Islands',
          'Vaticano',
          'Honduras',
          'Hong Kong',
          'Hungria',
          'Iceland',
          'Índia',
          'Indonésia',
          'Irã',
          'Iraque',
          'Irlanda',
          'Ilha de Man',
          'Israel',
          'Itália',
          'Jamaica',
          'Japão',
          'Jersey',
          'Jordânia',
          'Cazaquistão',
          'Quênia',
          'Kiribati',
          'Coreia do Norte',
          'Coreia do Sul',
          'Kuwait',
          'Kyrgyz Republic',
          'República Democrática de Lao People',
          'Latvia',
          'Líbano',
          'Lesotho',
          'Libéria',
          'Libyan Arab Jamahiriya',
          'Liechtenstein',
          'Lituânia',
          'Luxemburgo',
          'Macao',
          'Macedônia',
          'Madagascar',
          'Malawi',
          'Malásia',
          'Maldives',
          'Mali',
          'Malta',
          'Ilhas Marshall',
          'Martinica',
          'Mauritânia',
          'Mauritius',
          'Mayotte',
          'México',
          'Micronésia',
          'Moldova',
          'Mônaco',
          'Mongólia',
          'Montenegro',
          'Montserrat',
          'Marrocos',
          'Moçambique',
          'Myanmar',
          'Namibia',
          'Nauru',
          'Nepal',
          'Antilhas Holandesas',
          'Holanda',
          'Nova Caledonia',
          'Nova Zelândia',
          'Nicarágua',
          'Nigéria',
          'Niue',
          'Ilha Norfolk',
          'Northern Mariana Islands',
          'Noruega',
          'Oman',
          'Paquistão',
          'Palau',
          'Território da Palestina',
          'Panamá',
          'Nova Guiné Papua',
          'Paraguai',
          'Peru',
          'Filipinas',
          'Polônia',
          'Portugal',
          'Puerto Rico',
          'Qatar',
          'Romênia',
          'Rússia',
          'Ruanda',
          'São Bartolomeu',
          'Santa Helena',
          'Santa Lúcia',
          'Saint Martin',
          'Saint Pierre and Miquelon',
          'Saint Vincent and the Grenadines',
          'Samoa',
          'San Marino',
          'Sao Tomé e Príncipe',
          'Arábia Saudita',
          'Senegal',
          'Sérvia',
          'Seychelles',
          'Serra Leoa',
          'Singapura',
          'Eslováquia',
          'Eslovênia',
          'Ilhas Salomão',
          'Somália',
          'África do Sul',
          'South Georgia and the South Sandwich Islands',
          'Spanha',
          'Sri Lanka',
          'Sudão',
          'Suriname',
          'Svalbard & Jan Mayen Islands',
          'Swaziland',
          'Suécia',
          'Suíça',
          'Síria',
          'Taiwan',
          'Tajiquistão',
          'Tanzânia',
          'Tailândia',
          'Timor-Leste',
          'Togo',
          'Tokelau',
          'Tonga',
          'Trinidá e Tobago',
          'Tunísia',
          'Turquia',
          'Turcomenistão',
          'Turks and Caicos Islands',
          'Tuvalu',
          'Uganda',
          'Ucrânia',
          'Emirados Árabes Unidos',
          'Reino Unido',
          'Estados Unidos da América',
          'Estados Unidos das Ilhas Virgens',
          'Uruguai',
          'Uzbequistão',
          'Vanuatu',
          'Venezuela',
          'Vietnã',
          'Wallis and Futuna',
          'Sahara',
          'Yemen',
          'Zâmbia',
          'Zimbábue',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/pt_BR/address/building_number.js': [
      function(require, module, exports) {
        module['exports'] = ['#####', '####', '###']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/pt_BR/address/street_suffix.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Rua',
          'Avenida',
          'Travessa',
          'Ponte',
          'Alameda',
          'Marginal',
          'Viela',
          'Rodovia',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/pt_BR/address/secondary_address.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Apto. ###',
          'Sobrado ##',
          'Casa #',
          'Lote ##',
          'Quadra ##',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/pt_BR/address/postcode.js': [
      function(require, module, exports) {
        module['exports'] = ['#####', '#####-###']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/pt_BR/address/state.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Acre',
          'Alagoas',
          'Amapá',
          'Amazonas',
          'Bahia',
          'Ceará',
          'Distrito Federal',
          'Espírito Santo',
          'Goiás',
          'Maranhão',
          'Mato Grosso',
          'Mato Grosso do Sul',
          'Minas Gerais',
          'Pará',
          'Paraíba',
          'Paraná',
          'Pernambuco',
          'Piauí',
          'Rio de Janeiro',
          'Rio Grande do Norte',
          'Rio Grande do Sul',
          'Rondônia',
          'Roraima',
          'Santa Catarina',
          'São Paulo',
          'Sergipe',
          'Tocantins',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/pt_BR/address/state_abbr.js': [
      function(require, module, exports) {
        module['exports'] = [
          'AC',
          'AL',
          'AP',
          'AM',
          'BA',
          'CE',
          'DF',
          'ES',
          'GO',
          'MA',
          'MT',
          'MS',
          'PA',
          'PB',
          'PR',
          'PE',
          'PI',
          'RJ',
          'RN',
          'RS',
          'RO',
          'RR',
          'SC',
          'SP',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/pt_BR/address/default_country.js': [
      function(require, module, exports) {
        module['exports'] = ['Brasil']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/pt_BR/address/index.js': [
      function(require, module, exports) {
        var address = {}
        module['exports'] = address
        address.city_prefix = require('./city_prefix')
        address.city_suffix = require('./city_suffix')
        address.country = require('./country')
        address.building_number = require('./building_number')
        address.street_suffix = require('./street_suffix')
        address.secondary_address = require('./secondary_address')
        address.postcode = require('./postcode')
        address.state = require('./state')
        address.state_abbr = require('./state_abbr')
        address.default_country = require('./default_country')
      },
      {
        './city_prefix':
          '../node_modules/faker/lib/locales/pt_BR/address/city_prefix.js',
        './city_suffix':
          '../node_modules/faker/lib/locales/pt_BR/address/city_suffix.js',
        './country':
          '../node_modules/faker/lib/locales/pt_BR/address/country.js',
        './building_number':
          '../node_modules/faker/lib/locales/pt_BR/address/building_number.js',
        './street_suffix':
          '../node_modules/faker/lib/locales/pt_BR/address/street_suffix.js',
        './secondary_address':
          '../node_modules/faker/lib/locales/pt_BR/address/secondary_address.js',
        './postcode':
          '../node_modules/faker/lib/locales/pt_BR/address/postcode.js',
        './state':
          '../node_modules/faker/lib/locales/pt_BR/address/state.js',
        './state_abbr':
          '../node_modules/faker/lib/locales/pt_BR/address/state_abbr.js',
        './default_country':
          '../node_modules/faker/lib/locales/pt_BR/address/default_country.js',
      },
    ],
    '../node_modules/faker/lib/locales/pt_BR/company/suffix.js': [
      function(require, module, exports) {
        module['exports'] = ['S.A.', 'LTDA', 'e Associados', 'Comércio']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/pt_BR/company/name.js': [
      function(require, module, exports) {
        module['exports'] = [
          '#{Name.last_name} #{suffix}',
          '#{Name.last_name}-#{Name.last_name}',
          '#{Name.last_name}, #{Name.last_name} e #{Name.last_name}',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/pt_BR/company/index.js': [
      function(require, module, exports) {
        var company = {}
        module['exports'] = company
        company.suffix = require('./suffix')
        company.name = require('./name')
      },
      {
        './suffix':
          '../node_modules/faker/lib/locales/pt_BR/company/suffix.js',
        './name':
          '../node_modules/faker/lib/locales/pt_BR/company/name.js',
      },
    ],
    '../node_modules/faker/lib/locales/pt_BR/internet/free_email.js': [
      function(require, module, exports) {
        module['exports'] = [
          'gmail.com',
          'yahoo.com',
          'hotmail.com',
          'live.com',
          'bol.com.br',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/pt_BR/internet/domain_suffix.js': [
      function(require, module, exports) {
        module['exports'] = [
          'br',
          'com',
          'biz',
          'info',
          'name',
          'net',
          'org',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/pt_BR/internet/index.js': [
      function(require, module, exports) {
        var internet = {}
        module['exports'] = internet
        internet.free_email = require('./free_email')
        internet.domain_suffix = require('./domain_suffix')
      },
      {
        './free_email':
          '../node_modules/faker/lib/locales/pt_BR/internet/free_email.js',
        './domain_suffix':
          '../node_modules/faker/lib/locales/pt_BR/internet/domain_suffix.js',
      },
    ],
    '../node_modules/faker/lib/locales/pt_BR/lorem/words.js': [
      function(require, module, exports) {
        module['exports'] = [
          'alias',
          'consequatur',
          'aut',
          'perferendis',
          'sit',
          'voluptatem',
          'accusantium',
          'doloremque',
          'aperiam',
          'eaque',
          'ipsa',
          'quae',
          'ab',
          'illo',
          'inventore',
          'veritatis',
          'et',
          'quasi',
          'architecto',
          'beatae',
          'vitae',
          'dicta',
          'sunt',
          'explicabo',
          'aspernatur',
          'aut',
          'odit',
          'aut',
          'fugit',
          'sed',
          'quia',
          'consequuntur',
          'magni',
          'dolores',
          'eos',
          'qui',
          'ratione',
          'voluptatem',
          'sequi',
          'nesciunt',
          'neque',
          'dolorem',
          'ipsum',
          'quia',
          'dolor',
          'sit',
          'amet',
          'consectetur',
          'adipisci',
          'velit',
          'sed',
          'quia',
          'non',
          'numquam',
          'eius',
          'modi',
          'tempora',
          'incidunt',
          'ut',
          'labore',
          'et',
          'dolore',
          'magnam',
          'aliquam',
          'quaerat',
          'voluptatem',
          'ut',
          'enim',
          'ad',
          'minima',
          'veniam',
          'quis',
          'nostrum',
          'exercitationem',
          'ullam',
          'corporis',
          'nemo',
          'enim',
          'ipsam',
          'voluptatem',
          'quia',
          'voluptas',
          'sit',
          'suscipit',
          'laboriosam',
          'nisi',
          'ut',
          'aliquid',
          'ex',
          'ea',
          'commodi',
          'consequatur',
          'quis',
          'autem',
          'vel',
          'eum',
          'iure',
          'reprehenderit',
          'qui',
          'in',
          'ea',
          'voluptate',
          'velit',
          'esse',
          'quam',
          'nihil',
          'molestiae',
          'et',
          'iusto',
          'odio',
          'dignissimos',
          'ducimus',
          'qui',
          'blanditiis',
          'praesentium',
          'laudantium',
          'totam',
          'rem',
          'voluptatum',
          'deleniti',
          'atque',
          'corrupti',
          'quos',
          'dolores',
          'et',
          'quas',
          'molestias',
          'excepturi',
          'sint',
          'occaecati',
          'cupiditate',
          'non',
          'provident',
          'sed',
          'ut',
          'perspiciatis',
          'unde',
          'omnis',
          'iste',
          'natus',
          'error',
          'similique',
          'sunt',
          'in',
          'culpa',
          'qui',
          'officia',
          'deserunt',
          'mollitia',
          'animi',
          'id',
          'est',
          'laborum',
          'et',
          'dolorum',
          'fuga',
          'et',
          'harum',
          'quidem',
          'rerum',
          'facilis',
          'est',
          'et',
          'expedita',
          'distinctio',
          'nam',
          'libero',
          'tempore',
          'cum',
          'soluta',
          'nobis',
          'est',
          'eligendi',
          'optio',
          'cumque',
          'nihil',
          'impedit',
          'quo',
          'porro',
          'quisquam',
          'est',
          'qui',
          'minus',
          'id',
          'quod',
          'maxime',
          'placeat',
          'facere',
          'possimus',
          'omnis',
          'voluptas',
          'assumenda',
          'est',
          'omnis',
          'dolor',
          'repellendus',
          'temporibus',
          'autem',
          'quibusdam',
          'et',
          'aut',
          'consequatur',
          'vel',
          'illum',
          'qui',
          'dolorem',
          'eum',
          'fugiat',
          'quo',
          'voluptas',
          'nulla',
          'pariatur',
          'at',
          'vero',
          'eos',
          'et',
          'accusamus',
          'officiis',
          'debitis',
          'aut',
          'rerum',
          'necessitatibus',
          'saepe',
          'eveniet',
          'ut',
          'et',
          'voluptates',
          'repudiandae',
          'sint',
          'et',
          'molestiae',
          'non',
          'recusandae',
          'itaque',
          'earum',
          'rerum',
          'hic',
          'tenetur',
          'a',
          'sapiente',
          'delectus',
          'ut',
          'aut',
          'reiciendis',
          'voluptatibus',
          'maiores',
          'doloribus',
          'asperiores',
          'repellat',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/pt_BR/lorem/index.js': [
      function(require, module, exports) {
        var lorem = {}
        module['exports'] = lorem
        lorem.words = require('./words')
      },
      {
        './words':
          '../node_modules/faker/lib/locales/pt_BR/lorem/words.js',
      },
    ],
    '../node_modules/faker/lib/locales/pt_BR/name/first_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Alessandro',
          'Alessandra',
          'Alexandre',
          'Aline',
          'Antônio',
          'Breno',
          'Bruna',
          'Carlos',
          'Carla',
          'Célia',
          'Cecília',
          'César',
          'Danilo',
          'Dalila',
          'Deneval',
          'Eduardo',
          'Eduarda',
          'Esther',
          'Elísio',
          'Fábio',
          'Fabrício',
          'Fabrícia',
          'Félix',
          'Felícia',
          'Feliciano',
          'Frederico',
          'Fabiano',
          'Gustavo',
          'Guilherme',
          'Gúbio',
          'Heitor',
          'Hélio',
          'Hugo',
          'Isabel',
          'Isabela',
          'Ígor',
          'João',
          'Joana',
          'Júlio César',
          'Júlio',
          'Júlia',
          'Janaína',
          'Karla',
          'Kléber',
          'Lucas',
          'Lorena',
          'Lorraine',
          'Larissa',
          'Ladislau',
          'Marcos',
          'Meire',
          'Marcelo',
          'Marcela',
          'Margarida',
          'Mércia',
          'Márcia',
          'Marli',
          'Morgana',
          'Maria',
          'Norberto',
          'Natália',
          'Nataniel',
          'Núbia',
          'Ofélia',
          'Paulo',
          'Paula',
          'Pablo',
          'Pedro',
          'Raul',
          'Rafael',
          'Rafaela',
          'Ricardo',
          'Roberto',
          'Roberta',
          'Sílvia',
          'Sílvia',
          'Silas',
          'Suélen',
          'Sara',
          'Salvador',
          'Sirineu',
          'Talita',
          'Tertuliano',
          'Vicente',
          'Víctor',
          'Vitória',
          'Yango',
          'Yago',
          'Yuri',
          'Washington',
          'Warley',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/pt_BR/name/last_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Silva',
          'Souza',
          'Carvalho',
          'Santos',
          'Reis',
          'Xavier',
          'Franco',
          'Braga',
          'Macedo',
          'Batista',
          'Barros',
          'Moraes',
          'Costa',
          'Pereira',
          'Carvalho',
          'Melo',
          'Saraiva',
          'Nogueira',
          'Oliveira',
          'Martins',
          'Moreira',
          'Albuquerque',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/pt_BR/name/prefix.js': [
      function(require, module, exports) {
        module['exports'] = ['Sr.', 'Sra.', 'Srta.', 'Dr.']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/pt_BR/name/suffix.js': [
      function(require, module, exports) {
        module['exports'] = ['Jr.', 'Neto', 'Filho']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/pt_BR/name/index.js': [
      function(require, module, exports) {
        var name = {}
        module['exports'] = name
        name.first_name = require('./first_name')
        name.last_name = require('./last_name')
        name.prefix = require('./prefix')
        name.suffix = require('./suffix')
      },
      {
        './first_name':
          '../node_modules/faker/lib/locales/pt_BR/name/first_name.js',
        './last_name':
          '../node_modules/faker/lib/locales/pt_BR/name/last_name.js',
        './prefix':
          '../node_modules/faker/lib/locales/pt_BR/name/prefix.js',
        './suffix':
          '../node_modules/faker/lib/locales/pt_BR/name/suffix.js',
      },
    ],
    '../node_modules/faker/lib/locales/pt_BR/phone_number/formats.js': [
      function(require, module, exports) {
        module['exports'] = [
          '(##) ####-####',
          '+55 (##) ####-####',
          '(##) #####-####',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/pt_BR/phone_number/index.js': [
      function(require, module, exports) {
        var phone_number = {}
        module['exports'] = phone_number
        phone_number.formats = require('./formats')
      },
      {
        './formats':
          '../node_modules/faker/lib/locales/pt_BR/phone_number/formats.js',
      },
    ],
    '../node_modules/faker/lib/locales/pt_BR/index.js': [
      function(require, module, exports) {
        var pt_BR = {}
        module['exports'] = pt_BR
        pt_BR.title = 'Portuguese (Brazil)'
        pt_BR.address = require('./address')
        pt_BR.company = require('./company')
        pt_BR.internet = require('./internet')
        pt_BR.lorem = require('./lorem')
        pt_BR.name = require('./name')
        pt_BR.phone_number = require('./phone_number')
      },
      {
        './address':
          '../node_modules/faker/lib/locales/pt_BR/address/index.js',
        './company':
          '../node_modules/faker/lib/locales/pt_BR/company/index.js',
        './internet':
          '../node_modules/faker/lib/locales/pt_BR/internet/index.js',
        './lorem':
          '../node_modules/faker/lib/locales/pt_BR/lorem/index.js',
        './name': '../node_modules/faker/lib/locales/pt_BR/name/index.js',
        './phone_number':
          '../node_modules/faker/lib/locales/pt_BR/phone_number/index.js',
      },
    ],
    '../node_modules/faker/lib/locales/ru/address/country.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Австралия',
          'Австрия',
          'Азербайджан',
          'Албания',
          'Алжир',
          'Американское Самоа (не признана)',
          'Ангилья',
          'Ангола',
          'Андорра',
          'Антарктика (не признана)',
          'Антигуа и Барбуда',
          'Антильские Острова (не признана)',
          'Аомынь (не признана)',
          'Аргентина',
          'Армения',
          'Афганистан',
          'Багамские Острова',
          'Бангладеш',
          'Барбадос',
          'Бахрейн',
          'Беларусь',
          'Белиз',
          'Бельгия',
          'Бенин',
          'Болгария',
          'Боливия',
          'Босния и Герцеговина',
          'Ботсвана',
          'Бразилия',
          'Бруней',
          'Буркина-Фасо',
          'Бурунди',
          'Бутан',
          'Вануату',
          'Ватикан',
          'Великобритания',
          'Венгрия',
          'Венесуэла',
          'Восточный Тимор',
          'Вьетнам',
          'Габон',
          'Гаити',
          'Гайана',
          'Гамбия',
          'Гана',
          'Гваделупа (не признана)',
          'Гватемала',
          'Гвиана (не признана)',
          'Гвинея',
          'Гвинея-Бисау',
          'Германия',
          'Гондурас',
          'Гренада',
          'Греция',
          'Грузия',
          'Дания',
          'Джибути',
          'Доминика',
          'Доминиканская Республика',
          'Египет',
          'Замбия',
          'Зимбабве',
          'Израиль',
          'Индия',
          'Индонезия',
          'Иордания',
          'Ирак',
          'Иран',
          'Ирландия',
          'Исландия',
          'Испания',
          'Италия',
          'Йемен',
          'Кабо-Верде',
          'Казахстан',
          'Камбоджа',
          'Камерун',
          'Канада',
          'Катар',
          'Кения',
          'Кипр',
          'Кирибати',
          'Китай',
          'Колумбия',
          'Коморские Острова',
          'Конго',
          'Демократическая Республика',
          'Корея (Северная)',
          'Корея (Южная)',
          'Косово',
          'Коста-Рика',
          "Кот-д'Ивуар",
          'Куба',
          'Кувейт',
          'Кука острова',
          'Кыргызстан',
          'Лаос',
          'Латвия',
          'Лесото',
          'Либерия',
          'Ливан',
          'Ливия',
          'Литва',
          'Лихтенштейн',
          'Люксембург',
          'Маврикий',
          'Мавритания',
          'Мадагаскар',
          'Македония',
          'Малави',
          'Малайзия',
          'Мали',
          'Мальдивы',
          'Мальта',
          'Маршалловы Острова',
          'Мексика',
          'Микронезия',
          'Мозамбик',
          'Молдова',
          'Монако',
          'Монголия',
          'Марокко',
          'Мьянма',
          'Намибия',
          'Науру',
          'Непал',
          'Нигер',
          'Нигерия',
          'Нидерланды',
          'Никарагуа',
          'Новая Зеландия',
          'Норвегия',
          'Объединенные Арабские Эмираты',
          'Оман',
          'Пакистан',
          'Палау',
          'Панама',
          'Папуа — Новая Гвинея',
          'Парагвай',
          'Перу',
          'Польша',
          'Португалия',
          'Республика Конго',
          'Россия',
          'Руанда',
          'Румыния',
          'Сальвадор',
          'Самоа',
          'Сан-Марино',
          'Сан-Томе и Принсипи',
          'Саудовская Аравия',
          'Свазиленд',
          'Сейшельские острова',
          'Сенегал',
          'Сент-Винсент и Гренадины',
          'Сент-Киттс и Невис',
          'Сент-Люсия',
          'Сербия',
          'Сингапур',
          'Сирия',
          'Словакия',
          'Словения',
          'Соединенные Штаты Америки',
          'Соломоновы Острова',
          'Сомали',
          'Судан',
          'Суринам',
          'Сьерра-Леоне',
          'Таджикистан',
          'Таиланд',
          'Тайвань (не признана)',
          'Тамил-Илам (не признана)',
          'Танзания',
          'Тёркс и Кайкос (не признана)',
          'Того',
          'Токелау (не признана)',
          'Тонга',
          'Тринидад и Тобаго',
          'Тувалу',
          'Тунис',
          'Турецкая Республика Северного Кипра (не признана)',
          'Туркменистан',
          'Турция',
          'Уганда',
          'Узбекистан',
          'Украина',
          'Уругвай',
          'Фарерские Острова (не признана)',
          'Фиджи',
          'Филиппины',
          'Финляндия',
          'Франция',
          'Французская Полинезия (не признана)',
          'Хорватия',
          'Центральноафриканская Республика',
          'Чад',
          'Черногория',
          'Чехия',
          'Чили',
          'Швейцария',
          'Швеция',
          'Шри-Ланка',
          'Эквадор',
          'Экваториальная Гвинея',
          'Эритрея',
          'Эстония',
          'Эфиопия',
          'Южно-Африканская Республика',
          'Ямайка',
          'Япония',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ru/address/building_number.js': [
      function(require, module, exports) {
        module['exports'] = ['###']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ru/address/street_suffix.js': [
      function(require, module, exports) {
        module['exports'] = [
          'ул.',
          'улица',
          'проспект',
          'пр.',
          'площадь',
          'пл.',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ru/address/secondary_address.js': [
      function(require, module, exports) {
        module['exports'] = ['кв. ###']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ru/address/postcode.js': [
      function(require, module, exports) {
        module['exports'] = ['######']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ru/address/state.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Республика Адыгея',
          'Республика Башкортостан',
          'Республика Бурятия',
          'Республика Алтай Республика Дагестан',
          'Республика Ингушетия',
          'Кабардино-Балкарская Республика',
          'Республика Калмыкия',
          'Республика Карачаево-Черкессия',
          'Республика Карелия',
          'Республика Коми',
          'Республика Марий Эл',
          'Республика Мордовия',
          'Республика Саха (Якутия)',
          'Республика Северная Осетия-Алания',
          'Республика Татарстан',
          'Республика Тыва',
          'Удмуртская Республика',
          'Республика Хакасия',
          'Чувашская Республика',
          'Алтайский край',
          'Краснодарский край',
          'Красноярский край',
          'Приморский край',
          'Ставропольский край',
          'Хабаровский край',
          'Амурская область',
          'Архангельская область',
          'Астраханская область',
          'Белгородская область',
          'Брянская область',
          'Владимирская область',
          'Волгоградская область',
          'Вологодская область',
          'Воронежская область',
          'Ивановская область',
          'Иркутская область',
          'Калиниградская область',
          'Калужская область',
          'Камчатская область',
          'Кемеровская область',
          'Кировская область',
          'Костромская область',
          'Курганская область',
          'Курская область',
          'Ленинградская область',
          'Липецкая область',
          'Магаданская область',
          'Московская область',
          'Мурманская область',
          'Нижегородская область',
          'Новгородская область',
          'Новосибирская область',
          'Омская область',
          'Оренбургская область',
          'Орловская область',
          'Пензенская область',
          'Пермская область',
          'Псковская область',
          'Ростовская область',
          'Рязанская область',
          'Самарская область',
          'Саратовская область',
          'Сахалинская область',
          'Свердловская область',
          'Смоленская область',
          'Тамбовская область',
          'Тверская область',
          'Томская область',
          'Тульская область',
          'Тюменская область',
          'Ульяновская область',
          'Челябинская область',
          'Читинская область',
          'Ярославская область',
          'Еврейская автономная область',
          'Агинский Бурятский авт. округ',
          'Коми-Пермяцкий автономный округ',
          'Корякский автономный округ',
          'Ненецкий автономный округ',
          'Таймырский (Долгано-Ненецкий) автономный округ',
          'Усть-Ордынский Бурятский автономный округ',
          'Ханты-Мансийский автономный округ',
          'Чукотский автономный округ',
          'Эвенкийский автономный округ',
          'Ямало-Ненецкий автономный округ',
          'Чеченская Республика',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ru/address/street_title.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Советская',
          'Молодежная',
          'Центральная',
          'Школьная',
          'Новая',
          'Садовая',
          'Лесная',
          'Набережная',
          'Ленина',
          'Мира',
          'Октябрьская',
          'Зеленая',
          'Комсомольская',
          'Заречная',
          'Первомайская',
          'Гагарина',
          'Полевая',
          'Луговая',
          'Пионерская',
          'Кирова',
          'Юбилейная',
          'Северная',
          'Пролетарская',
          'Степная',
          'Пушкина',
          'Калинина',
          'Южная',
          'Колхозная',
          'Рабочая',
          'Солнечная',
          'Железнодорожная',
          'Восточная',
          'Заводская',
          'Чапаева',
          'Нагорная',
          'Строителей',
          'Береговая',
          'Победы',
          'Горького',
          'Кооперативная',
          'Красноармейская',
          'Совхозная',
          'Речная',
          'Школьный',
          'Спортивная',
          'Озерная',
          'Строительная',
          'Парковая',
          'Чкалова',
          'Мичурина',
          'речень улиц',
          'Подгорная',
          'Дружбы',
          'Почтовая',
          'Партизанская',
          'Вокзальная',
          'Лермонтова',
          'Свободы',
          'Дорожная',
          'Дачная',
          'Маяковского',
          'Западная',
          'Фрунзе',
          'Дзержинского',
          'Московская',
          'Свердлова',
          'Некрасова',
          'Гоголя',
          'Красная',
          'Трудовая',
          'Шоссейная',
          'Чехова',
          'Коммунистическая',
          'Труда',
          'Комарова',
          'Матросова',
          'Островского',
          'Сосновая',
          'Клубная',
          'Куйбышева',
          'Крупской',
          'Березовая',
          'Карла Маркса',
          '8 Марта',
          'Больничная',
          'Садовый',
          'Интернациональная',
          'Суворова',
          'Цветочная',
          'Трактовая',
          'Ломоносова',
          'Горная',
          'Космонавтов',
          'Энергетиков',
          'Шевченко',
          'Весенняя',
          'Механизаторов',
          'Коммунальная',
          'Лесной',
          '40 лет Победы',
          'Майская',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ru/address/city_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Москва',
          'Владимир',
          'Санкт-Петербург',
          'Новосибирск',
          'Екатеринбург',
          'Нижний Новгород',
          'Самара',
          'Казань',
          'Омск',
          'Челябинск',
          'Ростов-на-Дону',
          'Уфа',
          'Волгоград',
          'Пермь',
          'Красноярск',
          'Воронеж',
          'Саратов',
          'Краснодар',
          'Тольятти',
          'Ижевск',
          'Барнаул',
          'Ульяновск',
          'Тюмень',
          'Иркутск',
          'Владивосток',
          'Ярославль',
          'Хабаровск',
          'Махачкала',
          'Оренбург',
          'Новокузнецк',
          'Томск',
          'Кемерово',
          'Рязань',
          'Астрахань',
          'Пенза',
          'Липецк',
          'Тула',
          'Киров',
          'Чебоксары',
          'Курск',
          'Брянскm Магнитогорск',
          'Иваново',
          'Тверь',
          'Ставрополь',
          'Белгород',
          'Сочи',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ru/address/city.js': [
      function(require, module, exports) {
        module['exports'] = ['#{Address.city_name}']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ru/address/street_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          '#{street_suffix} #{Address.street_title}',
          '#{Address.street_title} #{street_suffix}',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ru/address/street_address.js': [
      function(require, module, exports) {
        module['exports'] = ['#{street_name}, #{building_number}']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ru/address/default_country.js': [
      function(require, module, exports) {
        module['exports'] = ['Россия']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ru/address/index.js': [
      function(require, module, exports) {
        var address = {}
        module['exports'] = address
        address.country = require('./country')
        address.building_number = require('./building_number')
        address.street_suffix = require('./street_suffix')
        address.secondary_address = require('./secondary_address')
        address.postcode = require('./postcode')
        address.state = require('./state')
        address.street_title = require('./street_title')
        address.city_name = require('./city_name')
        address.city = require('./city')
        address.street_name = require('./street_name')
        address.street_address = require('./street_address')
        address.default_country = require('./default_country')
      },
      {
        './country':
          '../node_modules/faker/lib/locales/ru/address/country.js',
        './building_number':
          '../node_modules/faker/lib/locales/ru/address/building_number.js',
        './street_suffix':
          '../node_modules/faker/lib/locales/ru/address/street_suffix.js',
        './secondary_address':
          '../node_modules/faker/lib/locales/ru/address/secondary_address.js',
        './postcode':
          '../node_modules/faker/lib/locales/ru/address/postcode.js',
        './state': '../node_modules/faker/lib/locales/ru/address/state.js',
        './street_title':
          '../node_modules/faker/lib/locales/ru/address/street_title.js',
        './city_name':
          '../node_modules/faker/lib/locales/ru/address/city_name.js',
        './city': '../node_modules/faker/lib/locales/ru/address/city.js',
        './street_name':
          '../node_modules/faker/lib/locales/ru/address/street_name.js',
        './street_address':
          '../node_modules/faker/lib/locales/ru/address/street_address.js',
        './default_country':
          '../node_modules/faker/lib/locales/ru/address/default_country.js',
      },
    ],
    '../node_modules/faker/lib/locales/ru/internet/free_email.js': [
      function(require, module, exports) {
        module['exports'] = [
          'yandex.ru',
          'ya.ru',
          'mail.ru',
          'gmail.com',
          'yahoo.com',
          'hotmail.com',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ru/internet/domain_suffix.js': [
      function(require, module, exports) {
        module['exports'] = ['com', 'ru', 'info', 'рф', 'net', 'org']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ru/internet/index.js': [
      function(require, module, exports) {
        var internet = {}
        module['exports'] = internet
        internet.free_email = require('./free_email')
        internet.domain_suffix = require('./domain_suffix')
      },
      {
        './free_email':
          '../node_modules/faker/lib/locales/ru/internet/free_email.js',
        './domain_suffix':
          '../node_modules/faker/lib/locales/ru/internet/domain_suffix.js',
      },
    ],
    '../node_modules/faker/lib/locales/ru/name/male_first_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Александр',
          'Алексей',
          'Альберт',
          'Анатолий',
          'Андрей',
          'Антон',
          'Аркадий',
          'Арсений',
          'Артём',
          'Борис',
          'Вадим',
          'Валентин',
          'Валерий',
          'Василий',
          'Виктор',
          'Виталий',
          'Владимир',
          'Владислав',
          'Вячеслав',
          'Геннадий',
          'Георгий',
          'Герман',
          'Григорий',
          'Даниил',
          'Денис',
          'Дмитрий',
          'Евгений',
          'Егор',
          'Иван',
          'Игнатий',
          'Игорь',
          'Илья',
          'Константин',
          'Лаврентий',
          'Леонид',
          'Лука',
          'Макар',
          'Максим',
          'Матвей',
          'Михаил',
          'Никита',
          'Николай',
          'Олег',
          'Роман',
          'Семён',
          'Сергей',
          'Станислав',
          'Степан',
          'Фёдор',
          'Эдуард',
          'Юрий',
          'Ярослав',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ru/name/male_middle_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Александрович',
          'Алексеевич',
          'Альбертович',
          'Анатольевич',
          'Андреевич',
          'Антонович',
          'Аркадьевич',
          'Арсеньевич',
          'Артёмович',
          'Борисович',
          'Вадимович',
          'Валентинович',
          'Валерьевич',
          'Васильевич',
          'Викторович',
          'Витальевич',
          'Владимирович',
          'Владиславович',
          'Вячеславович',
          'Геннадьевич',
          'Георгиевич',
          'Германович',
          'Григорьевич',
          'Даниилович',
          'Денисович',
          'Дмитриевич',
          'Евгеньевич',
          'Егорович',
          'Иванович',
          'Игнатьевич',
          'Игоревич',
          'Ильич',
          'Константинович',
          'Лаврентьевич',
          'Леонидович',
          'Лукич',
          'Макарович',
          'Максимович',
          'Матвеевич',
          'Михайлович',
          'Никитич',
          'Николаевич',
          'Олегович',
          'Романович',
          'Семёнович',
          'Сергеевич',
          'Станиславович',
          'Степанович',
          'Фёдорович',
          'Эдуардович',
          'Юрьевич',
          'Ярославович',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ru/name/male_last_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Смирнов',
          'Иванов',
          'Кузнецов',
          'Попов',
          'Соколов',
          'Лебедев',
          'Козлов',
          'Новиков',
          'Морозов',
          'Петров',
          'Волков',
          'Соловьев',
          'Васильев',
          'Зайцев',
          'Павлов',
          'Семенов',
          'Голубев',
          'Виноградов',
          'Богданов',
          'Воробьев',
          'Федоров',
          'Михайлов',
          'Беляев',
          'Тарасов',
          'Белов',
          'Комаров',
          'Орлов',
          'Киселев',
          'Макаров',
          'Андреев',
          'Ковалев',
          'Ильин',
          'Гусев',
          'Титов',
          'Кузьмин',
          'Кудрявцев',
          'Баранов',
          'Куликов',
          'Алексеев',
          'Степанов',
          'Яковлев',
          'Сорокин',
          'Сергеев',
          'Романов',
          'Захаров',
          'Борисов',
          'Королев',
          'Герасимов',
          'Пономарев',
          'Григорьев',
          'Лазарев',
          'Медведев',
          'Ершов',
          'Никитин',
          'Соболев',
          'Рябов',
          'Поляков',
          'Цветков',
          'Данилов',
          'Жуков',
          'Фролов',
          'Журавлев',
          'Николаев',
          'Крылов',
          'Максимов',
          'Сидоров',
          'Осипов',
          'Белоусов',
          'Федотов',
          'Дорофеев',
          'Егоров',
          'Матвеев',
          'Бобров',
          'Дмитриев',
          'Калинин',
          'Анисимов',
          'Петухов',
          'Антонов',
          'Тимофеев',
          'Никифоров',
          'Веселов',
          'Филиппов',
          'Марков',
          'Большаков',
          'Суханов',
          'Миронов',
          'Ширяев',
          'Александров',
          'Коновалов',
          'Шестаков',
          'Казаков',
          'Ефимов',
          'Денисов',
          'Громов',
          'Фомин',
          'Давыдов',
          'Мельников',
          'Щербаков',
          'Блинов',
          'Колесников',
          'Карпов',
          'Афанасьев',
          'Власов',
          'Маслов',
          'Исаков',
          'Тихонов',
          'Аксенов',
          'Гаврилов',
          'Родионов',
          'Котов',
          'Горбунов',
          'Кудряшов',
          'Быков',
          'Зуев',
          'Третьяков',
          'Савельев',
          'Панов',
          'Рыбаков',
          'Суворов',
          'Абрамов',
          'Воронов',
          'Мухин',
          'Архипов',
          'Трофимов',
          'Мартынов',
          'Емельянов',
          'Горшков',
          'Чернов',
          'Овчинников',
          'Селезнев',
          'Панфилов',
          'Копылов',
          'Михеев',
          'Галкин',
          'Назаров',
          'Лобанов',
          'Лукин',
          'Беляков',
          'Потапов',
          'Некрасов',
          'Хохлов',
          'Жданов',
          'Наумов',
          'Шилов',
          'Воронцов',
          'Ермаков',
          'Дроздов',
          'Игнатьев',
          'Савин',
          'Логинов',
          'Сафонов',
          'Капустин',
          'Кириллов',
          'Моисеев',
          'Елисеев',
          'Кошелев',
          'Костин',
          'Горбачев',
          'Орехов',
          'Ефремов',
          'Исаев',
          'Евдокимов',
          'Калашников',
          'Кабанов',
          'Носков',
          'Юдин',
          'Кулагин',
          'Лапин',
          'Прохоров',
          'Нестеров',
          'Харитонов',
          'Агафонов',
          'Муравьев',
          'Ларионов',
          'Федосеев',
          'Зимин',
          'Пахомов',
          'Шубин',
          'Игнатов',
          'Филатов',
          'Крюков',
          'Рогов',
          'Кулаков',
          'Терентьев',
          'Молчанов',
          'Владимиров',
          'Артемьев',
          'Гурьев',
          'Зиновьев',
          'Гришин',
          'Кононов',
          'Дементьев',
          'Ситников',
          'Симонов',
          'Мишин',
          'Фадеев',
          'Комиссаров',
          'Мамонтов',
          'Носов',
          'Гуляев',
          'Шаров',
          'Устинов',
          'Вишняков',
          'Евсеев',
          'Лаврентьев',
          'Брагин',
          'Константинов',
          'Корнилов',
          'Авдеев',
          'Зыков',
          'Бирюков',
          'Шарапов',
          'Никонов',
          'Щукин',
          'Дьячков',
          'Одинцов',
          'Сазонов',
          'Якушев',
          'Красильников',
          'Гордеев',
          'Самойлов',
          'Князев',
          'Беспалов',
          'Уваров',
          'Шашков',
          'Бобылев',
          'Доронин',
          'Белозеров',
          'Рожков',
          'Самсонов',
          'Мясников',
          'Лихачев',
          'Буров',
          'Сысоев',
          'Фомичев',
          'Русаков',
          'Стрелков',
          'Гущин',
          'Тетерин',
          'Колобов',
          'Субботин',
          'Фокин',
          'Блохин',
          'Селиверстов',
          'Пестов',
          'Кондратьев',
          'Силин',
          'Меркушев',
          'Лыткин',
          'Туров',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ru/name/female_first_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Анна',
          'Алёна',
          'Алевтина',
          'Александра',
          'Алина',
          'Алла',
          'Анастасия',
          'Ангелина',
          'Анжела',
          'Анжелика',
          'Антонида',
          'Антонина',
          'Анфиса',
          'Арина',
          'Валентина',
          'Валерия',
          'Варвара',
          'Василиса',
          'Вера',
          'Вероника',
          'Виктория',
          'Галина',
          'Дарья',
          'Евгения',
          'Екатерина',
          'Елена',
          'Елизавета',
          'Жанна',
          'Зинаида',
          'Зоя',
          'Ирина',
          'Кира',
          'Клавдия',
          'Ксения',
          'Лариса',
          'Лидия',
          'Любовь',
          'Людмила',
          'Маргарита',
          'Марина',
          'Мария',
          'Надежда',
          'Наталья',
          'Нина',
          'Оксана',
          'Ольга',
          'Раиса',
          'Регина',
          'Римма',
          'Светлана',
          'София',
          'Таисия',
          'Тамара',
          'Татьяна',
          'Ульяна',
          'Юлия',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ru/name/female_middle_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Александровна',
          'Алексеевна',
          'Альбертовна',
          'Анатольевна',
          'Андреевна',
          'Антоновна',
          'Аркадьевна',
          'Арсеньевна',
          'Артёмовна',
          'Борисовна',
          'Вадимовна',
          'Валентиновна',
          'Валерьевна',
          'Васильевна',
          'Викторовна',
          'Витальевна',
          'Владимировна',
          'Владиславовна',
          'Вячеславовна',
          'Геннадьевна',
          'Георгиевна',
          'Германовна',
          'Григорьевна',
          'Данииловна',
          'Денисовна',
          'Дмитриевна',
          'Евгеньевна',
          'Егоровна',
          'Ивановна',
          'Игнатьевна',
          'Игоревна',
          'Ильинична',
          'Константиновна',
          'Лаврентьевна',
          'Леонидовна',
          'Макаровна',
          'Максимовна',
          'Матвеевна',
          'Михайловна',
          'Никитична',
          'Николаевна',
          'Олеговна',
          'Романовна',
          'Семёновна',
          'Сергеевна',
          'Станиславовна',
          'Степановна',
          'Фёдоровна',
          'Эдуардовна',
          'Юрьевна',
          'Ярославовна',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ru/name/female_last_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Смирнова',
          'Иванова',
          'Кузнецова',
          'Попова',
          'Соколова',
          'Лебедева',
          'Козлова',
          'Новикова',
          'Морозова',
          'Петрова',
          'Волкова',
          'Соловьева',
          'Васильева',
          'Зайцева',
          'Павлова',
          'Семенова',
          'Голубева',
          'Виноградова',
          'Богданова',
          'Воробьева',
          'Федорова',
          'Михайлова',
          'Беляева',
          'Тарасова',
          'Белова',
          'Комарова',
          'Орлова',
          'Киселева',
          'Макарова',
          'Андреева',
          'Ковалева',
          'Ильина',
          'Гусева',
          'Титова',
          'Кузьмина',
          'Кудрявцева',
          'Баранова',
          'Куликова',
          'Алексеева',
          'Степанова',
          'Яковлева',
          'Сорокина',
          'Сергеева',
          'Романова',
          'Захарова',
          'Борисова',
          'Королева',
          'Герасимова',
          'Пономарева',
          'Григорьева',
          'Лазарева',
          'Медведева',
          'Ершова',
          'Никитина',
          'Соболева',
          'Рябова',
          'Полякова',
          'Цветкова',
          'Данилова',
          'Жукова',
          'Фролова',
          'Журавлева',
          'Николаева',
          'Крылова',
          'Максимова',
          'Сидорова',
          'Осипова',
          'Белоусова',
          'Федотова',
          'Дорофеева',
          'Егорова',
          'Матвеева',
          'Боброва',
          'Дмитриева',
          'Калинина',
          'Анисимова',
          'Петухова',
          'Антонова',
          'Тимофеева',
          'Никифорова',
          'Веселова',
          'Филиппова',
          'Маркова',
          'Большакова',
          'Суханова',
          'Миронова',
          'Ширяева',
          'Александрова',
          'Коновалова',
          'Шестакова',
          'Казакова',
          'Ефимова',
          'Денисова',
          'Громова',
          'Фомина',
          'Давыдова',
          'Мельникова',
          'Щербакова',
          'Блинова',
          'Колесникова',
          'Карпова',
          'Афанасьева',
          'Власова',
          'Маслова',
          'Исакова',
          'Тихонова',
          'Аксенова',
          'Гаврилова',
          'Родионова',
          'Котова',
          'Горбунова',
          'Кудряшова',
          'Быкова',
          'Зуева',
          'Третьякова',
          'Савельева',
          'Панова',
          'Рыбакова',
          'Суворова',
          'Абрамова',
          'Воронова',
          'Мухина',
          'Архипова',
          'Трофимова',
          'Мартынова',
          'Емельянова',
          'Горшкова',
          'Чернова',
          'Овчинникова',
          'Селезнева',
          'Панфилова',
          'Копылова',
          'Михеева',
          'Галкина',
          'Назарова',
          'Лобанова',
          'Лукина',
          'Белякова',
          'Потапова',
          'Некрасова',
          'Хохлова',
          'Жданова',
          'Наумова',
          'Шилова',
          'Воронцова',
          'Ермакова',
          'Дроздова',
          'Игнатьева',
          'Савина',
          'Логинова',
          'Сафонова',
          'Капустина',
          'Кириллова',
          'Моисеева',
          'Елисеева',
          'Кошелева',
          'Костина',
          'Горбачева',
          'Орехова',
          'Ефремова',
          'Исаева',
          'Евдокимова',
          'Калашникова',
          'Кабанова',
          'Носкова',
          'Юдина',
          'Кулагина',
          'Лапина',
          'Прохорова',
          'Нестерова',
          'Харитонова',
          'Агафонова',
          'Муравьева',
          'Ларионова',
          'Федосеева',
          'Зимина',
          'Пахомова',
          'Шубина',
          'Игнатова',
          'Филатова',
          'Крюкова',
          'Рогова',
          'Кулакова',
          'Терентьева',
          'Молчанова',
          'Владимирова',
          'Артемьева',
          'Гурьева',
          'Зиновьева',
          'Гришина',
          'Кононова',
          'Дементьева',
          'Ситникова',
          'Симонова',
          'Мишина',
          'Фадеева',
          'Комиссарова',
          'Мамонтова',
          'Носова',
          'Гуляева',
          'Шарова',
          'Устинова',
          'Вишнякова',
          'Евсеева',
          'Лаврентьева',
          'Брагина',
          'Константинова',
          'Корнилова',
          'Авдеева',
          'Зыкова',
          'Бирюкова',
          'Шарапова',
          'Никонова',
          'Щукина',
          'Дьячкова',
          'Одинцова',
          'Сазонова',
          'Якушева',
          'Красильникова',
          'Гордеева',
          'Самойлова',
          'Князева',
          'Беспалова',
          'Уварова',
          'Шашкова',
          'Бобылева',
          'Доронина',
          'Белозерова',
          'Рожкова',
          'Самсонова',
          'Мясникова',
          'Лихачева',
          'Бурова',
          'Сысоева',
          'Фомичева',
          'Русакова',
          'Стрелкова',
          'Гущина',
          'Тетерина',
          'Колобова',
          'Субботина',
          'Фокина',
          'Блохина',
          'Селиверстова',
          'Пестова',
          'Кондратьева',
          'Силина',
          'Меркушева',
          'Лыткина',
          'Турова',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ru/name/prefix.js': [
      function(require, module, exports) {
        module['exports'] = []
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ru/name/suffix.js': [
      function(require, module, exports) {
        module['exports'] = []
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ru/name/name.js': [
      function(require, module, exports) {
        module['exports'] = [
          '#{male_first_name} #{male_last_name}',
          '#{male_last_name} #{male_first_name}',
          '#{male_first_name} #{male_middle_name} #{male_last_name}',
          '#{male_last_name} #{male_first_name} #{male_middle_name}',
          '#{female_first_name} #{female_last_name}',
          '#{female_last_name} #{female_first_name}',
          '#{female_first_name} #{female_middle_name} #{female_last_name}',
          '#{female_last_name} #{female_first_name} #{female_middle_name}',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ru/name/index.js': [
      function(require, module, exports) {
        var name = {}
        module['exports'] = name
        name.male_first_name = require('./male_first_name')
        name.male_middle_name = require('./male_middle_name')
        name.male_last_name = require('./male_last_name')
        name.female_first_name = require('./female_first_name')
        name.female_middle_name = require('./female_middle_name')
        name.female_last_name = require('./female_last_name')
        name.prefix = require('./prefix')
        name.suffix = require('./suffix')
        name.name = require('./name')
      },
      {
        './male_first_name':
          '../node_modules/faker/lib/locales/ru/name/male_first_name.js',
        './male_middle_name':
          '../node_modules/faker/lib/locales/ru/name/male_middle_name.js',
        './male_last_name':
          '../node_modules/faker/lib/locales/ru/name/male_last_name.js',
        './female_first_name':
          '../node_modules/faker/lib/locales/ru/name/female_first_name.js',
        './female_middle_name':
          '../node_modules/faker/lib/locales/ru/name/female_middle_name.js',
        './female_last_name':
          '../node_modules/faker/lib/locales/ru/name/female_last_name.js',
        './prefix': '../node_modules/faker/lib/locales/ru/name/prefix.js',
        './suffix': '../node_modules/faker/lib/locales/ru/name/suffix.js',
        './name': '../node_modules/faker/lib/locales/ru/name/name.js',
      },
    ],
    '../node_modules/faker/lib/locales/ru/phone_number/formats.js': [
      function(require, module, exports) {
        module['exports'] = ['(9##)###-##-##']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ru/phone_number/index.js': [
      function(require, module, exports) {
        var phone_number = {}
        module['exports'] = phone_number
        phone_number.formats = require('./formats')
      },
      {
        './formats':
          '../node_modules/faker/lib/locales/ru/phone_number/formats.js',
      },
    ],
    '../node_modules/faker/lib/locales/ru/commerce/color.js': [
      function(require, module, exports) {
        module['exports'] = [
          'красный',
          'зеленый',
          'синий',
          'желтый',
          'багровый',
          'мятный',
          'зеленовато-голубой',
          'белый',
          'черный',
          'оранжевый',
          'розовый',
          'серый',
          'красно-коричневый',
          'фиолетовый',
          'бирюзовый',
          'желто-коричневый',
          'небесно голубой',
          'оранжево-розовый',
          'темно-фиолетовый',
          'орхидный',
          'оливковый',
          'пурпурный',
          'лимонный',
          'кремовый',
          'сине-фиолетовый',
          'золотой',
          'красно-пурпурный',
          'голубой',
          'лазурный',
          'лиловый',
          'серебряный',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ru/commerce/department.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Книги',
          'Фильмы',
          'музыка',
          'игры',
          'Электроника',
          'компьютеры',
          'Дом',
          'садинструмент',
          'Бакалея',
          'здоровье',
          'красота',
          'Игрушки',
          'детское',
          'для малышей',
          'Одежда',
          'обувь',
          'украшения',
          'Спорт',
          'туризм',
          'Автомобильное',
          'промышленное',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ru/commerce/product_name.js': [
      function(require, module, exports) {
        module['exports'] = {
          adjective: [
            'Маленький',
            'Эргономичный',
            'Грубый',
            'Интеллектуальный',
            'Великолепный',
            'Невероятный',
            'Фантастический',
            'Практчиный',
            'Лоснящийся',
            'Потрясающий',
          ],
          material: [
            'Стальной',
            'Деревянный',
            'Бетонный',
            'Пластиковый',
            'Хлопковый',
            'Гранитный',
            'Резиновый',
          ],
          product: [
            'Стул',
            'Автомобиль',
            'Компьютер',
            'Берет',
            'Кулон',
            'Стол',
            'Свитер',
            'Ремень',
            'Ботинок',
          ],
        }
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ru/commerce/index.js': [
      function(require, module, exports) {
        var commerce = {}
        module['exports'] = commerce
        commerce.color = require('./color')
        commerce.department = require('./department')
        commerce.product_name = require('./product_name')
      },
      {
        './color':
          '../node_modules/faker/lib/locales/ru/commerce/color.js',
        './department':
          '../node_modules/faker/lib/locales/ru/commerce/department.js',
        './product_name':
          '../node_modules/faker/lib/locales/ru/commerce/product_name.js',
      },
    ],
    '../node_modules/faker/lib/locales/ru/company/prefix.js': [
      function(require, module, exports) {
        module['exports'] = ['ИП', 'ООО', 'ЗАО', 'ОАО', 'НКО', 'ТСЖ', 'ОП']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ru/company/suffix.js': [
      function(require, module, exports) {
        module['exports'] = ['Снаб', 'Торг', 'Пром', 'Трейд', 'Сбыт']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ru/company/name.js': [
      function(require, module, exports) {
        module['exports'] = [
          '#{prefix} #{Name.female_first_name}',
          '#{prefix} #{Name.male_first_name}',
          '#{prefix} #{Name.male_last_name}',
          '#{prefix} #{suffix}#{suffix}',
          '#{prefix} #{suffix}#{suffix}#{suffix}',
          '#{prefix} #{Address.city_name}#{suffix}',
          '#{prefix} #{Address.city_name}#{suffix}#{suffix}',
          '#{prefix} #{Address.city_name}#{suffix}#{suffix}#{suffix}',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ru/company/index.js': [
      function(require, module, exports) {
        var company = {}
        module['exports'] = company
        company.prefix = require('./prefix')
        company.suffix = require('./suffix')
        company.name = require('./name')
      },
      {
        './prefix':
          '../node_modules/faker/lib/locales/ru/company/prefix.js',
        './suffix':
          '../node_modules/faker/lib/locales/ru/company/suffix.js',
        './name': '../node_modules/faker/lib/locales/ru/company/name.js',
      },
    ],
    '../node_modules/faker/lib/locales/ru/date/month.js': [
      function(require, module, exports) {
        // source: http://unicode.org/cldr/trac/browser/tags/release-27/common/main/ru.xml#L1734
        module['exports'] = {
          wide: [
            'январь',
            'февраль',
            'март',
            'апрель',
            'май',
            'июнь',
            'июль',
            'август',
            'сентябрь',
            'октябрь',
            'ноябрь',
            'декабрь',
          ],
          wide_context: [
            'января',
            'февраля',
            'марта',
            'апреля',
            'мая',
            'июня',
            'июля',
            'августа',
            'сентября',
            'октября',
            'ноября',
            'декабря',
          ],
          abbr: [
            'янв.',
            'февр.',
            'март',
            'апр.',
            'май',
            'июнь',
            'июль',
            'авг.',
            'сент.',
            'окт.',
            'нояб.',
            'дек.',
          ],
          abbr_context: [
            'янв.',
            'февр.',
            'марта',
            'апр.',
            'мая',
            'июня',
            'июля',
            'авг.',
            'сент.',
            'окт.',
            'нояб.',
            'дек.',
          ],
        }
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ru/date/weekday.js': [
      function(require, module, exports) {
        // source: http://unicode.org/cldr/trac/browser/tags/release-27/common/main/ru.xml#L1825
        module['exports'] = {
          wide: [
            'Воскресенье',
            'Понедельник',
            'Вторник',
            'Среда',
            'Четверг',
            'Пятница',
            'Суббота',
          ],
          wide_context: [
            'воскресенье',
            'понедельник',
            'вторник',
            'среда',
            'четверг',
            'пятница',
            'суббота',
          ],
          abbr: ['Вс', 'Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб'],
          abbr_context: ['вс', 'пн', 'вт', 'ср', 'чт', 'пт', 'сб'],
        }
      },
      {},
    ],
    '../node_modules/faker/lib/locales/ru/date/index.js': [
      function(require, module, exports) {
        var date = {}
        module['exports'] = date
        date.month = require('./month')
        date.weekday = require('./weekday')
      },
      {
        './month': '../node_modules/faker/lib/locales/ru/date/month.js',
        './weekday':
          '../node_modules/faker/lib/locales/ru/date/weekday.js',
      },
    ],
    '../node_modules/faker/lib/locales/ru/index.js': [
      function(require, module, exports) {
        var ru = {}
        module['exports'] = ru
        ru.title = 'Russian'
        ru.separator = ' и '
        ru.address = require('./address')
        ru.internet = require('./internet')
        ru.name = require('./name')
        ru.phone_number = require('./phone_number')
        ru.commerce = require('./commerce')
        ru.company = require('./company')
        ru.date = require('./date')
      },
      {
        './address':
          '../node_modules/faker/lib/locales/ru/address/index.js',
        './internet':
          '../node_modules/faker/lib/locales/ru/internet/index.js',
        './name': '../node_modules/faker/lib/locales/ru/name/index.js',
        './phone_number':
          '../node_modules/faker/lib/locales/ru/phone_number/index.js',
        './commerce':
          '../node_modules/faker/lib/locales/ru/commerce/index.js',
        './company':
          '../node_modules/faker/lib/locales/ru/company/index.js',
        './date': '../node_modules/faker/lib/locales/ru/date/index.js',
      },
    ],
    '../node_modules/faker/lib/locales/sk/address/city_prefix.js': [
      function(require, module, exports) {
        module['exports'] = [
          'North',
          'East',
          'West',
          'South',
          'New',
          'Lake',
          'Port',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/sk/address/city_suffix.js': [
      function(require, module, exports) {
        module['exports'] = [
          'town',
          'ton',
          'land',
          'ville',
          'berg',
          'burgh',
          'borough',
          'bury',
          'view',
          'port',
          'mouth',
          'stad',
          'furt',
          'chester',
          'mouth',
          'fort',
          'haven',
          'side',
          'shire',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/sk/address/country.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Afganistan',
          'Afgánsky islamský štát',
          'Albánsko',
          'Albánska republika',
          'Alžírsko',
          'Alžírska demokratická ľudová republika',
          'Andorra',
          'Andorrské kniežatsvo',
          'Angola',
          'Angolská republika',
          'Antigua a Barbuda',
          'Antigua a Barbuda',
          'Argentína',
          'Argentínska republika',
          'Arménsko',
          'Arménska republika',
          'Austrália',
          'Austrálsky zväz',
          'Azerbajdžan',
          'Azerbajdžanská republika',
          'Bahamy',
          'Bahamské spoločenstvo',
          'Bahrajn',
          'Bahrajnské kráľovstvo',
          'Bangladéš',
          'Bangladéšska ľudová republika',
          'Barbados',
          'Barbados',
          'Belgicko',
          'Belgické kráľovstvo',
          'Belize',
          'Belize',
          'Benin',
          'Beninská republika',
          'Bhután',
          'Bhutánske kráľovstvo',
          'Bielorusko',
          'Bieloruská republika',
          'Bolívia',
          'Bolívijská republika',
          'Bosna a Hercegovina',
          'Republika Bosny a Hercegoviny',
          'Botswana',
          'Botswanská republika',
          'Brazília',
          'Brazílska federatívna republika',
          'Brunej',
          'Brunejský sultanát',
          'Bulharsko',
          'Bulharská republika',
          'Burkina Faso',
          'Burkina Faso',
          'Burundi',
          'Burundská republika',
          'Cyprus',
          'Cyperská republika',
          'Čad',
          'Republika Čad',
          'Česko',
          'Česká republika',
          'Čína',
          'Čínska ľudová republika',
          'Dánsko',
          'Dánsko kráľovstvo',
          'Dominika',
          'Spoločenstvo Dominika',
          'Dominikánska republika',
          'Dominikánska republika',
          'Džibutsko',
          'Džibutská republika',
          'Egypt',
          'Egyptská arabská republika',
          'Ekvádor',
          'Ekvádorská republika',
          'Eritrea',
          'Eritrejský štát',
          'Estónsko',
          'Estónska republika',
          'Etiópia',
          'Etiópska federatívna demokratická republika',
          'Fidži',
          'Republika ostrovy Fidži',
          'Filipíny',
          'Filipínska republika',
          'Fínsko',
          'Fínska republika',
          'Francúzsko',
          'Francúzska republika',
          'Gabon',
          'Gabonská republika',
          'Gambia',
          'Gambijská republika',
          'Ghana',
          'Ghanská republika',
          'Grécko',
          'Helénska republika',
          'Grenada',
          'Grenada',
          'Gruzínsko',
          'Gruzínsko',
          'Guatemala',
          'Guatemalská republika',
          'Guinea',
          'Guinejská republika',
          'Guinea-Bissau',
          'Republika Guinea-Bissau',
          'Guayana',
          'Guayanská republika',
          'Haiti',
          'Republika Haiti',
          'Holandsko',
          'Holandské kráľovstvo',
          'Honduras',
          'Honduraská republika',
          'Chile',
          'Čílska republika',
          'Chorvátsko',
          'Chorvátska republika',
          'India',
          'Indická republika',
          'Indonézia',
          'Indonézska republika',
          'Irak',
          'Iracká republika',
          'Irán',
          'Iránska islamská republika',
          'Island',
          'Islandská republika',
          'Izrael',
          'Štát Izrael',
          'Írsko',
          'Írska republika',
          'Jamajka',
          'Jamajka',
          'Japonsko',
          'Japonsko',
          'Jemen',
          'Jemenská republika',
          'Jordánsko',
          'Jordánske hášimovské kráľovstvo',
          'Južná Afrika',
          'Juhoafrická republika',
          'Kambodža',
          'Kambodžské kráľovstvo',
          'Kamerun',
          'Kamerunská republika',
          'Kanada',
          'Kanada',
          'Kapverdy',
          'Kapverdská republika',
          'Katar',
          'Štát Katar',
          'Kazachstan',
          'Kazašská republika',
          'Keňa',
          'Kenská republika',
          'Kirgizsko',
          'Kirgizská republika',
          'Kiribati',
          'Kiribatská republika',
          'Kolumbia',
          'Kolumbijská republika',
          'Komory',
          'Komorská únia',
          'Kongo',
          'Konžská demokratická republika',
          'Kongo ("Brazzaville")',
          'Konžská republika',
          'Kórea ("Južná")',
          'Kórejská republika',
          'Kórea ("Severná")',
          'Kórejská ľudovodemokratická republika',
          'Kostarika',
          'Kostarická republika',
          'Kuba',
          'Kubánska republika',
          'Kuvajt',
          'Kuvajtský štát',
          'Laos',
          'Laoská ľudovodemokratická republika',
          'Lesotho',
          'Lesothské kráľovstvo',
          'Libanon',
          'Libanonská republika',
          'Libéria',
          'Libérijská republika',
          'Líbya',
          'Líbyjská arabská ľudová socialistická džamáhírija',
          'Lichtenštajnsko',
          'Lichtenštajnské kniežatstvo',
          'Litva',
          'Litovská republika',
          'Lotyšsko',
          'Lotyšská republika',
          'Luxembursko',
          'Luxemburské veľkovojvodstvo',
          'Macedónsko',
          'Macedónska republika',
          'Madagaskar',
          'Madagaskarská republika',
          'Maďarsko',
          'Maďarská republika',
          'Malajzia',
          'Malajzia',
          'Malawi',
          'Malawijská republika',
          'Maldivy',
          'Maldivská republika',
          'Mali',
          'Malijská republika',
          'Malta',
          'Malta',
          'Maroko',
          'Marocké kráľovstvo',
          'Marshallove ostrovy',
          'Republika Marshallových ostrovy',
          'Mauritánia',
          'Mauritánska islamská republika',
          'Maurícius',
          'Maurícijská republika',
          'Mexiko',
          'Spojené štáty mexické',
          'Mikronézia',
          'Mikronézske federatívne štáty',
          'Mjanmarsko',
          'Mjanmarský zväz',
          'Moldavsko',
          'Moldavská republika',
          'Monako',
          'Monacké kniežatstvo',
          'Mongolsko',
          'Mongolsko',
          'Mozambik',
          'Mozambická republika',
          'Namíbia',
          'Namíbijská republika',
          'Nauru',
          'Naurská republika',
          'Nemecko',
          'Nemecká spolková republika',
          'Nepál',
          'Nepálske kráľovstvo',
          'Niger',
          'Nigerská republika',
          'Nigéria',
          'Nigérijská federatívna republika',
          'Nikaragua',
          'Nikaragujská republika',
          'Nový Zéland',
          'Nový Zéland',
          'Nórsko',
          'Nórske kráľovstvo',
          'Omán',
          'Ománsky sultanát',
          'Pakistan',
          'Pakistanská islamská republika',
          'Palau',
          'Palauská republika',
          'Panama',
          'Panamská republika',
          'Papua-Nová Guinea',
          'Nezávislý štát Papua-Nová Guinea',
          'Paraguaj',
          'Paraguajská republika',
          'Peru',
          'Peruánska republika',
          'Pobrežie Slonoviny',
          'Republika Pobrežie Slonoviny',
          'Poľsko',
          'Poľská republika',
          'Portugalsko',
          'Portugalská republika',
          'Rakúsko',
          'Rakúska republika',
          'Rovníková Guinea',
          'Republika Rovníková Guinea',
          'Rumunsko',
          'Rumunsko',
          'Rusko',
          'Ruská federácia',
          'Rwanda',
          'Rwandská republika',
          'Salvádor',
          'Salvádorská republika',
          'Samoa',
          'Nezávislý štát Samoa',
          'San Maríno',
          'Sanmarínska republika',
          'Saudská Arábia',
          'Kráľovstvo Saudskej Arábie',
          'Senegal',
          'Senegalská republika',
          'Seychely',
          'Seychelská republika',
          'Sierra Leone',
          'Republika Sierra Leone',
          'Singapur',
          'Singapurska republika',
          'Slovensko',
          'Slovenská republika',
          'Slovinsko',
          'Slovinská republika',
          'Somálsko',
          'Somálska demokratická republika',
          'Spojené arabské emiráty',
          'Spojené arabské emiráty',
          'Spojené štáty americké',
          'Spojené štáty americké',
          'Srbsko a Čierna Hora',
          'Srbsko a Čierna Hora',
          'Srí Lanka',
          'Demokratická socialistická republika Srí Lanka',
          'Stredoafrická republika',
          'Stredoafrická republika',
          'Sudán',
          'Sudánska republika',
          'Surinam',
          'Surinamská republika',
          'Svazijsko',
          'Svazijské kráľovstvo',
          'Svätá Lucia',
          'Svätá Lucia',
          'Svätý Krištof a Nevis',
          'Federácia Svätý Krištof a Nevis',
          'Sv. Tomáš a Princov Ostrov',
          'Demokratická republika Svätý Tomáš a Princov Ostrov',
          'Sv. Vincent a Grenadíny',
          'Svätý Vincent a Grenadíny',
          'Sýria',
          'Sýrska arabská republika',
          'Šalamúnove ostrovy',
          'Šalamúnove ostrovy',
          'Španielsko',
          'Španielske kráľovstvo',
          'Švajčiarsko',
          'Švajčiarska konfederácia',
          'Švédsko',
          'Švédske kráľovstvo',
          'Tadžikistan',
          'Tadžická republika',
          'Taliansko',
          'Talianska republika',
          'Tanzánia',
          'Tanzánijská zjednotená republika',
          'Thajsko',
          'Thajské kráľovstvo',
          'Togo',
          'Tožská republika',
          'Tonga',
          'Tonžské kráľovstvo',
          'Trinidad a Tobago',
          'Republika Trinidad a Tobago',
          'Tunisko',
          'Tuniská republika',
          'Turecko',
          'Turecká republika',
          'Turkménsko',
          'Turkménsko',
          'Tuvalu',
          'Tuvalu',
          'Uganda',
          'Ugandská republika',
          'Ukrajina',
          'Uruguaj',
          'Uruguajská východná republika',
          'Uzbekistan',
          'Vanuatu',
          'Vanuatská republika',
          'Vatikán',
          'Svätá Stolica',
          'Veľká Británia',
          'Spojené kráľovstvo Veľkej Británie a Severného Írska',
          'Venezuela',
          'Venezuelská bolívarovská republika',
          'Vietnam',
          'Vietnamská socialistická republika',
          'Východný Timor',
          'Demokratická republika Východný Timor',
          'Zambia',
          'Zambijská republika',
          'Zimbabwe',
          'Zimbabwianska republika',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/sk/address/building_number.js': [
      function(require, module, exports) {
        module['exports'] = ['#', '##', '###']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/sk/address/secondary_address.js': [
      function(require, module, exports) {
        module['exports'] = ['Apt. ###', 'Suite ###']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/sk/address/postcode.js': [
      function(require, module, exports) {
        module['exports'] = ['#####', '### ##', '## ###']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/sk/address/state.js': [
      function(require, module, exports) {
        module['exports'] = []
      },
      {},
    ],
    '../node_modules/faker/lib/locales/sk/address/state_abbr.js': [
      function(require, module, exports) {
        module['exports'] = []
      },
      {},
    ],
    '../node_modules/faker/lib/locales/sk/address/time_zone.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Pacific/Midway',
          'Pacific/Pago_Pago',
          'Pacific/Honolulu',
          'America/Juneau',
          'America/Los_Angeles',
          'America/Tijuana',
          'America/Denver',
          'America/Phoenix',
          'America/Chihuahua',
          'America/Mazatlan',
          'America/Chicago',
          'America/Regina',
          'America/Mexico_City',
          'America/Mexico_City',
          'America/Monterrey',
          'America/Guatemala',
          'America/New_York',
          'America/Indiana/Indianapolis',
          'America/Bogota',
          'America/Lima',
          'America/Lima',
          'America/Halifax',
          'America/Caracas',
          'America/La_Paz',
          'America/Santiago',
          'America/St_Johns',
          'America/Sao_Paulo',
          'America/Argentina/Buenos_Aires',
          'America/Guyana',
          'America/Godthab',
          'Atlantic/South_Georgia',
          'Atlantic/Azores',
          'Atlantic/Cape_Verde',
          'Europe/Dublin',
          'Europe/London',
          'Europe/Lisbon',
          'Europe/London',
          'Africa/Casablanca',
          'Africa/Monrovia',
          'Etc/UTC',
          'Europe/Belgrade',
          'Europe/Bratislava',
          'Europe/Budapest',
          'Europe/Ljubljana',
          'Europe/Prague',
          'Europe/Sarajevo',
          'Europe/Skopje',
          'Europe/Warsaw',
          'Europe/Zagreb',
          'Europe/Brussels',
          'Europe/Copenhagen',
          'Europe/Madrid',
          'Europe/Paris',
          'Europe/Amsterdam',
          'Europe/Berlin',
          'Europe/Berlin',
          'Europe/Rome',
          'Europe/Stockholm',
          'Europe/Vienna',
          'Africa/Algiers',
          'Europe/Bucharest',
          'Africa/Cairo',
          'Europe/Helsinki',
          'Europe/Kiev',
          'Europe/Riga',
          'Europe/Sofia',
          'Europe/Tallinn',
          'Europe/Vilnius',
          'Europe/Athens',
          'Europe/Istanbul',
          'Europe/Minsk',
          'Asia/Jerusalem',
          'Africa/Harare',
          'Africa/Johannesburg',
          'Europe/Moscow',
          'Europe/Moscow',
          'Europe/Moscow',
          'Asia/Kuwait',
          'Asia/Riyadh',
          'Africa/Nairobi',
          'Asia/Baghdad',
          'Asia/Tehran',
          'Asia/Muscat',
          'Asia/Muscat',
          'Asia/Baku',
          'Asia/Tbilisi',
          'Asia/Yerevan',
          'Asia/Kabul',
          'Asia/Yekaterinburg',
          'Asia/Karachi',
          'Asia/Karachi',
          'Asia/Tashkent',
          'Asia/Kolkata',
          'Asia/Kolkata',
          'Asia/Kolkata',
          'Asia/Kolkata',
          'Asia/Kathmandu',
          'Asia/Dhaka',
          'Asia/Dhaka',
          'Asia/Colombo',
          'Asia/Almaty',
          'Asia/Novosibirsk',
          'Asia/Rangoon',
          'Asia/Bangkok',
          'Asia/Bangkok',
          'Asia/Jakarta',
          'Asia/Krasnoyarsk',
          'Asia/Shanghai',
          'Asia/Chongqing',
          'Asia/Hong_Kong',
          'Asia/Urumqi',
          'Asia/Kuala_Lumpur',
          'Asia/Singapore',
          'Asia/Taipei',
          'Australia/Perth',
          'Asia/Irkutsk',
          'Asia/Ulaanbaatar',
          'Asia/Seoul',
          'Asia/Tokyo',
          'Asia/Tokyo',
          'Asia/Tokyo',
          'Asia/Yakutsk',
          'Australia/Darwin',
          'Australia/Adelaide',
          'Australia/Melbourne',
          'Australia/Melbourne',
          'Australia/Sydney',
          'Australia/Brisbane',
          'Australia/Hobart',
          'Asia/Vladivostok',
          'Pacific/Guam',
          'Pacific/Port_Moresby',
          'Asia/Magadan',
          'Asia/Magadan',
          'Pacific/Noumea',
          'Pacific/Fiji',
          'Asia/Kamchatka',
          'Pacific/Majuro',
          'Pacific/Auckland',
          'Pacific/Auckland',
          'Pacific/Tongatapu',
          'Pacific/Fakaofo',
          'Pacific/Apia',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/sk/address/city_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Bánovce nad Bebravou',
          'Banská Bystrica',
          'Banská Štiavnica',
          'Bardejov',
          'Bratislava I',
          'Bratislava II',
          'Bratislava III',
          'Bratislava IV',
          'Bratislava V',
          'Brezno',
          'Bytča',
          'Čadca',
          'Detva',
          'Dolný Kubín',
          'Dunajská Streda',
          'Galanta',
          'Gelnica',
          'Hlohovec',
          'Humenné',
          'Ilava',
          'Kežmarok',
          'Komárno',
          'Košice I',
          'Košice II',
          'Košice III',
          'Košice IV',
          'Košice-okolie',
          'Krupina',
          'Kysucké Nové Mesto',
          'Levice',
          'Levoča',
          'Liptovský Mikuláš',
          'Lučenec',
          'Malacky',
          'Martin',
          'Medzilaborce',
          'Michalovce',
          'Myjava',
          'Námestovo',
          'Nitra',
          'Nové Mesto n.Váhom',
          'Nové Zámky',
          'Partizánske',
          'Pezinok',
          'Piešťany',
          'Poltár',
          'Poprad',
          'Považská Bystrica',
          'Prešov',
          'Prievidza',
          'Púchov',
          'Revúca',
          'Rimavská Sobota',
          'Rožňava',
          'Ružomberok',
          'Sabinov',
          'Šaľa',
          'Senec',
          'Senica',
          'Skalica',
          'Snina',
          'Sobrance',
          'Spišská Nová Ves',
          'Stará Ľubovňa',
          'Stropkov',
          'Svidník',
          'Topoľčany',
          'Trebišov',
          'Trenčín',
          'Trnava',
          'Turčianske Teplice',
          'Tvrdošín',
          'Veľký Krtíš',
          'Vranov nad Topľou',
          'Žarnovica',
          'Žiar nad Hronom',
          'Žilina',
          'Zlaté Moravce',
          'Zvolen',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/sk/address/city.js': [
      function(require, module, exports) {
        module['exports'] = ['#{city_name}']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/sk/address/street.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Adámiho',
          'Ahoj',
          'Albína Brunovského',
          'Albrechtova',
          'Alejová',
          'Alešova',
          'Alibernetová',
          'Alžbetínska',
          'Alžbety Gwerkovej',
          'Ambroseho',
          'Ambrušova',
          'Americká',
          'Americké námestie',
          'Americké námestie',
          'Andreja Mráza',
          'Andreja Plávku',
          'Andrusovova',
          'Anenská',
          'Anenská',
          'Antolská',
          'Astronomická',
          'Astrová',
          'Azalková',
          'Azovská',
          'Babuškova',
          'Bachova',
          'Bajkalská',
          'Bajkalská',
          'Bajkalská',
          'Bajkalská',
          'Bajkalská',
          'Bajkalská',
          'Bajzova',
          'Bancíkovej',
          'Banícka',
          'Baníkova',
          'Banskobystrická',
          'Banšelova',
          'Bardejovská',
          'Bartókova',
          'Bartoňova',
          'Bartoškova',
          'Baštová',
          'Bazová',
          'Bažantia',
          'Beblavého',
          'Beckovská',
          'Bedľová',
          'Belániková',
          'Belehradská',
          'Belinského',
          'Belopotockého',
          'Beňadická',
          'Bencúrova',
          'Benediktiho',
          'Beniakova',
          'Bernolákova',
          'Beskydská',
          'Betliarska',
          'Bezručova',
          'Biela',
          'Bielkova',
          'Björnsonova',
          'Blagoevova',
          'Blatnická',
          'Blumentálska',
          'Blyskáčová',
          'Bočná',
          'Bohrova',
          'Bohúňova',
          'Bojnická',
          'Borodáčova',
          'Borská',
          'Bosákova',
          'Botanická',
          'Bottova',
          'Boženy Němcovej',
          'Bôrik',
          'Bradáčova',
          'Bradlianska',
          'Brančská',
          'Bratská',
          'Brestová',
          'Brezovská',
          'Briežky',
          'Brnianska',
          'Brodná',
          'Brodská',
          'Broskyňová',
          'Břeclavská',
          'Budatínska',
          'Budatínska',
          'Budatínska',
          'Búdkova  cesta',
          'Budovateľská',
          'Budyšínska',
          'Budyšínska',
          'Buková',
          'Bukureštská',
          'Bulharská',
          'Bulíkova',
          'Bystrého',
          'Bzovícka',
          'Cablkova',
          'Cesta na Červený most',
          'Cesta na Červený most',
          'Cesta na Senec',
          'Cikkerova',
          'Cintorínska',
          'Cintulova',
          'Cukrová',
          'Cyrilova',
          'Čajakova',
          'Čajkovského',
          'Čaklovská',
          'Čalovská',
          'Čapajevova',
          'Čapkova',
          'Čárskeho',
          'Čavojského',
          'Čečinová',
          'Čelakovského',
          'Čerešňová',
          'Černyševského',
          'Červeňova',
          'Česká',
          'Československých par',
          'Čipkárska',
          'Čmelíkova',
          'Čmeľovec',
          'Čulenova',
          'Daliborovo námestie',
          'Dankovského',
          'Dargovská',
          'Ďatelinová',
          'Daxnerovo námestie',
          'Devínska cesta',
          'Dlhé diely I.',
          'Dlhé diely II.',
          'Dlhé diely III.',
          'Dobrovičova',
          'Dobrovičova',
          'Dobrovského',
          'Dobšinského',
          'Dohnalova',
          'Dohnányho',
          'Doležalova',
          'Dolná',
          'Dolnozemská cesta',
          'Domkárska',
          'Domové role',
          'Donnerova',
          'Donovalova',
          'Dostojevského rad',
          'Dr. Vladimíra Clemen',
          'Drevená',
          'Drieňová',
          'Drieňová',
          'Drieňová',
          'Drotárska cesta',
          'Drotárska cesta',
          'Drotárska cesta',
          'Družicová',
          'Družstevná',
          'Dubnická',
          'Dubová',
          'Dúbravská cesta',
          'Dudova',
          'Dulovo námestie',
          'Dulovo námestie',
          'Dunajská',
          'Dvořákovo nábrežie',
          'Edisonova',
          'Einsteinova',
          'Elektrárenská',
          'Exnárova',
          'F. Kostku',
          'Fadruszova',
          'Fajnorovo nábrežie',
          'Fándlyho',
          'Farebná',
          'Farská',
          'Farského',
          'Fazuľová',
          'Fedinova',
          'Ferienčíkova',
          'Fialkové údolie',
          'Fibichova',
          'Filiálne nádražie',
          'Flöglova',
          'Floriánske námestie',
          'Fraňa Kráľa',
          'Francisciho',
          'Francúzskych partizá',
          'Františkánska',
          'Františkánske námest',
          'Furdekova',
          'Furdekova',
          'Gabčíkova',
          'Gagarinova',
          'Gagarinova',
          'Gagarinova',
          'Gajova',
          'Galaktická',
          'Galandova',
          'Gallova',
          'Galvaniho',
          'Gašparíkova',
          'Gaštanová',
          'Gavlovičova',
          'Gemerská',
          'Gercenova',
          'Gessayova',
          'Gettingová',
          'Godrova',
          'Gogoľova',
          'Goláňova',
          'Gondova',
          'Goralská',
          'Gorazdova',
          'Gorkého',
          'Gregorovej',
          'Grösslingova',
          'Gruzínska',
          'Gunduličova',
          'Gusevova',
          'Haanova',
          'Haburská',
          'Halašova',
          'Hálkova',
          'Hálova',
          'Hamuliakova',
          'Hanácka',
          'Handlovská',
          'Hany Meličkovej',
          'Harmanecká',
          'Hasičská',
          'Hattalova',
          'Havlíčkova',
          'Havrania',
          'Haydnova',
          'Herlianska',
          'Herlianska',
          'Heydukova',
          'Hlaváčikova',
          'Hlavatého',
          'Hlavné námestie',
          'Hlboká cesta',
          'Hlboká cesta',
          'Hlivová',
          'Hlučínska',
          'Hodálova',
          'Hodžovo námestie',
          'Holekova',
          'Holíčska',
          'Hollého',
          'Holubyho',
          'Hontianska',
          'Horárska',
          'Horné Židiny',
          'Horská',
          'Horská',
          'Hrad',
          'Hradné údolie',
          'Hrachová',
          'Hraničná',
          'Hrebendova',
          'Hríbová',
          'Hriňovská',
          'Hrobákova',
          'Hrobárska',
          'Hroboňova',
          'Hudecova',
          'Humenské námestie',
          'Hummelova',
          'Hurbanovo námestie',
          'Hurbanovo námestie',
          'Hviezdoslavovo námes',
          'Hýrošova',
          'Chalupkova',
          'Chemická',
          'Chlumeckého',
          'Chorvátska',
          'Chorvátska',
          'Iľjušinova',
          'Ilkovičova',
          'Inovecká',
          'Inovecká',
          'Iskerníková',
          'Ivana Horvátha',
          'Ivánska cesta',
          'J.C.Hronského',
          'Jabloňová',
          'Jadrová',
          'Jakabova',
          'Jakubovo námestie',
          'Jamnického',
          'Jána Stanislava',
          'Janáčkova',
          'Jančova',
          'Janíkove role',
          'Jankolova',
          'Jánošíkova',
          'Jánoškova',
          'Janotova',
          'Jánska',
          'Jantárová cesta',
          'Jarabinková',
          'Jarná',
          'Jaroslavova',
          'Jarošova',
          'Jaseňová',
          'Jasná',
          'Jasovská',
          'Jastrabia',
          'Jašíkova',
          'Javorinská',
          'Javorová',
          'Jazdecká',
          'Jedlíkova',
          'Jégého',
          'Jelačičova',
          'Jelenia',
          'Jesenná',
          'Jesenského',
          'Jiráskova',
          'Jiskrova',
          'Jozefská',
          'Junácka',
          'Jungmannova',
          'Jurigovo námestie',
          'Jurovského',
          'Jurská',
          'Justičná',
          'K lomu',
          'K Železnej studienke',
          'Kalinčiakova',
          'Kamenárska',
          'Kamenné námestie',
          'Kapicova',
          'Kapitulská',
          'Kapitulský dvor',
          'Kapucínska',
          'Kapušianska',
          'Karadžičova',
          'Karadžičova',
          'Karadžičova',
          'Karadžičova',
          'Karloveská',
          'Karloveské rameno',
          'Karpatská',
          'Kašmírska',
          'Kaštielska',
          'Kaukazská',
          'Kempelenova',
          'Kežmarské námestie',
          'Kladnianska',
          'Klariská',
          'Kláštorská',
          'Klatovská',
          'Klatovská',
          'Klemensova',
          'Klincová',
          'Klobučnícka',
          'Klokočova',
          'Kľukatá',
          'Kmeťovo námestie',
          'Koceľova',
          'Kočánkova',
          'Kohútova',
          'Kolárska',
          'Kolískova',
          'Kollárovo námestie',
          'Kollárovo námestie',
          'Kolmá',
          'Komárňanská',
          'Komárnická',
          'Komárnická',
          'Komenského námestie',
          'Kominárska',
          'Komonicová',
          'Konopná',
          'Konvalinková',
          'Konventná',
          'Kopanice',
          'Kopčianska',
          'Koperníkova',
          'Korabinského',
          'Koreničova',
          'Kostlivého',
          'Kostolná',
          'Košická',
          'Košická',
          'Košická',
          'Kováčska',
          'Kovorobotnícka',
          'Kozia',
          'Koziarka',
          'Kozmonautická',
          'Krajná',
          'Krakovská',
          'Kráľovské údolie',
          'Krasinského',
          'Kraskova',
          'Krásna',
          'Krásnohorská',
          'Krasovského',
          'Krátka',
          'Krčméryho',
          'Kremnická',
          'Kresánkova',
          'Krivá',
          'Križkova',
          'Krížna',
          'Krížna',
          'Krížna',
          'Krížna',
          'Krmanova',
          'Krompašská',
          'Krupinská',
          'Krupkova',
          'Kubániho',
          'Kubínska',
          'Kuklovská',
          'Kukučínova',
          'Kukuričná',
          'Kulíškova',
          'Kultúrna',
          'Kupeckého',
          'Kúpeľná',
          'Kutlíkova',
          'Kutuzovova',
          'Kuzmányho',
          'Kvačalova',
          'Kvetná',
          'Kýčerského',
          'Kyjevská',
          'Kysucká',
          'Laborecká',
          'Lackova',
          'Ladislava Sáru',
          'Ľadová',
          'Lachova',
          'Ľaliová',
          'Lamačská cesta',
          'Lamačská cesta',
          'Lamanského',
          'Landererova',
          'Langsfeldova',
          'Ľanová',
          'Laskomerského',
          'Laučekova',
          'Laurinská',
          'Lazaretská',
          'Lazaretská',
          'Legerského',
          'Legionárska',
          'Legionárska',
          'Lehockého',
          'Lehockého',
          'Lenardova',
          'Lermontovova',
          'Lesná',
          'Leškova',
          'Letecká',
          'Letisko M.R.Štefánik',
          'Letná',
          'Levárska',
          'Levická',
          'Levočská',
          'Lidická',
          'Lietavská',
          'Lichardova',
          'Lipová',
          'Lipovinová',
          'Liptovská',
          'Listová',
          'Líščie nivy',
          'Líščie údolie',
          'Litovská',
          'Lodná',
          'Lombardiniho',
          'Lomonosovova',
          'Lopenícka',
          'Lovinského',
          'Ľubietovská',
          'Ľubinská',
          'Ľubľanská',
          'Ľubochnianska',
          'Ľubovnianska',
          'Lúčna',
          'Ľudové námestie',
          'Ľudovíta Fullu',
          'Luhačovická',
          'Lužická',
          'Lužná',
          'Lýcejná',
          'Lykovcová',
          'M. Hella',
          'Magnetová',
          'Macharova',
          'Majakovského',
          'Majerníkova',
          'Májkova',
          'Májová',
          'Makovického',
          'Malá',
          'Malé pálenisko',
          'Malinová',
          'Malý Draždiak',
          'Malý trh',
          'Mamateyova',
          'Mamateyova',
          'Mánesovo námestie',
          'Mariánska',
          'Marie Curie-Sklodows',
          'Márie Medveďovej',
          'Markova',
          'Marótyho',
          'Martákovej',
          'Martinčekova',
          'Martinčekova',
          'Martinengova',
          'Martinská',
          'Mateja Bela',
          'Matejkova',
          'Matičná',
          'Matúšova',
          'Medená',
          'Medzierka',
          'Medzilaborecká',
          'Merlotová',
          'Mesačná',
          'Mestská',
          'Meteorová',
          'Metodova',
          'Mickiewiczova',
          'Mierová',
          'Michalská',
          'Mikovíniho',
          'Mikulášska',
          'Miletičova',
          'Miletičova',
          'Mišíkova',
          'Mišíkova',
          'Mišíkova',
          'Mliekárenská',
          'Mlynarovičova',
          'Mlynská dolina',
          'Mlynská dolina',
          'Mlynská dolina',
          'Mlynské luhy',
          'Mlynské nivy',
          'Mlynské nivy',
          'Mlynské nivy',
          'Mlynské nivy',
          'Mlynské nivy',
          'Mlyny',
          'Modranská',
          'Mojmírova',
          'Mokráň záhon',
          'Mokrohájska cesta',
          'Moldavská',
          'Molecova',
          'Moravská',
          'Moskovská',
          'Most SNP',
          'Mostová',
          'Mošovského',
          'Motýlia',
          'Moyzesova',
          'Mozartova',
          'Mraziarenská',
          'Mudroňova',
          'Mudroňova',
          'Mudroňova',
          'Muchovo námestie',
          'Murgašova',
          'Muškátová',
          'Muštová',
          'Múzejná',
          'Myjavská',
          'Mýtna',
          'Mýtna',
          'Na Baránku',
          'Na Brezinách',
          'Na Hrebienku',
          'Na Kalvárii',
          'Na Kampárke',
          'Na kopci',
          'Na križovatkách',
          'Na lánoch',
          'Na paši',
          'Na piesku',
          'Na Riviére',
          'Na Sitine',
          'Na Slavíne',
          'Na stráni',
          'Na Štyridsiatku',
          'Na úvrati',
          'Na vŕšku',
          'Na výslní',
          'Nábělkova',
          'Nábrežie arm. gen. L',
          'Nábrežná',
          'Nad Dunajom',
          'Nad lomom',
          'Nad lúčkami',
          'Nad lúčkami',
          'Nad ostrovom',
          'Nad Sihoťou',
          'Námestie 1. mája',
          'Námestie Alexandra D',
          'Námestie Biely kríž',
          'Námestie Hraničiarov',
          'Námestie Jána Pavla',
          'Námestie Ľudovíta Št',
          'Námestie Martina Ben',
          'Nám. M.R.Štefánika',
          'Námestie slobody',
          'Námestie slobody',
          'Námestie SNP',
          'Námestie SNP',
          'Námestie sv. Františ',
          'Narcisová',
          'Nedbalova',
          'Nekrasovova',
          'Neronetová',
          'Nerudova',
          'Nevädzová',
          'Nezábudková',
          'Niťová',
          'Nitrianska',
          'Nížinná',
          'Nobelova',
          'Nobelovo námestie',
          'Nová',
          'Nová Rožňavská',
          'Novackého',
          'Nové pálenisko',
          'Nové záhrady I',
          'Nové záhrady II',
          'Nové záhrady III',
          'Nové záhrady IV',
          'Nové záhrady V',
          'Nové záhrady VI',
          'Nové záhrady VII',
          'Novinárska',
          'Novobanská',
          'Novohradská',
          'Novosvetská',
          'Novosvetská',
          'Novosvetská',
          'Obežná',
          'Obchodná',
          'Očovská',
          'Odbojárov',
          'Odborárska',
          'Odborárske námestie',
          'Odborárske námestie',
          'Ohnicová',
          'Okánikova',
          'Okružná',
          'Olbrachtova',
          'Olejkárska',
          'Ondavská',
          'Ondrejovova',
          'Oravská',
          'Orechová cesta',
          'Orechový rad',
          'Oriešková',
          'Ormisova',
          'Osadná',
          'Ostravská',
          'Ostredková',
          'Osuského',
          'Osvetová',
          'Otonelská',
          'Ovručská',
          'Ovsištské námestie',
          'Pajštúnska',
          'Palackého',
          'Palárikova',
          'Palárikova',
          'Pálavská',
          'Palisády',
          'Palisády',
          'Palisády',
          'Palkovičova',
          'Panenská',
          'Pankúchova',
          'Panónska cesta',
          'Panská',
          'Papánkovo námestie',
          'Papraďová',
          'Páričkova',
          'Parková',
          'Partizánska',
          'Pasienky',
          'Paulínyho',
          'Pavlovičova',
          'Pavlovova',
          'Pavlovská',
          'Pažického',
          'Pažítková',
          'Pečnianska',
          'Pernecká',
          'Pestovateľská',
          'Peterská',
          'Petzvalova',
          'Pezinská',
          'Piesočná',
          'Piešťanská',
          'Pifflova',
          'Pilárikova',
          'Pionierska',
          'Pivoňková',
          'Planckova',
          'Planét',
          'Plátenícka',
          'Pluhová',
          'Plynárenská',
          'Plzenská',
          'Pobrežná',
          'Pod Bôrikom',
          'Pod Kalváriou',
          'Pod lesom',
          'Pod Rovnicami',
          'Pod vinicami',
          'Podhorského',
          'Podjavorinskej',
          'Podlučinského',
          'Podniková',
          'Podtatranského',
          'Pohronská',
          'Polárna',
          'Poloreckého',
          'Poľná',
          'Poľská',
          'Poludníková',
          'Porubského',
          'Poštová',
          'Považská',
          'Povraznícka',
          'Povraznícka',
          'Pražská',
          'Predstaničné námesti',
          'Prepoštská',
          'Prešernova',
          'Prešovská',
          'Prešovská',
          'Prešovská',
          'Pri Bielom kríži',
          'Pri dvore',
          'Pri Dynamitke',
          'Pri Habánskom mlyne',
          'Pri hradnej studni',
          'Pri seči',
          'Pri Starej Prachárni',
          'Pri Starom háji',
          'Pri Starom Mýte',
          'Pri strelnici',
          'Pri Suchom mlyne',
          'Pri zvonici',
          'Pribinova',
          'Pribinova',
          'Pribinova',
          'Pribišova',
          'Pribylinská',
          'Priečna',
          'Priekopy',
          'Priemyselná',
          'Priemyselná',
          'Prievozská',
          'Prievozská',
          'Prievozská',
          'Príkopova',
          'Primaciálne námestie',
          'Prístav',
          'Prístavná',
          'Prokofievova',
          'Prokopa Veľkého',
          'Prokopova',
          'Prúdová',
          'Prvosienková',
          'Púpavová',
          'Pustá',
          'Puškinova',
          'Račianska',
          'Račianska',
          'Račianske mýto',
          'Radarová',
          'Rádiová',
          'Radlinského',
          'Radničná',
          'Radničné námestie',
          'Radvanská',
          'Rajská',
          'Raketová',
          'Rákosová',
          'Rastislavova',
          'Rázusovo nábrežie',
          'Repná',
          'Rešetkova',
          'Revolučná',
          'Révová',
          'Revúcka',
          'Rezedová',
          'Riazanská',
          'Riazanská',
          'Ribayová',
          'Riečna',
          'Rigeleho',
          'Rízlingová',
          'Riznerova',
          'Robotnícka',
          'Romanova',
          'Röntgenova',
          'Rosná',
          'Rovná',
          'Rovniankova',
          'Rovníková',
          'Rozmarínová',
          'Rožňavská',
          'Rožňavská',
          'Rožňavská',
          'Rubinsteinova',
          'Rudnayovo námestie',
          'Rumančeková',
          'Rusovská cesta',
          'Ružičková',
          'Ružinovská',
          'Ružinovská',
          'Ružinovská',
          'Ružomberská',
          'Ružová dolina',
          'Ružová dolina',
          'Rybárska brána',
          'Rybné námestie',
          'Rýdziková',
          'Sabinovská',
          'Sabinovská',
          'Sad Janka Kráľa',
          'Sadová',
          'Sartorisova',
          'Sasinkova',
          'Seberíniho',
          'Sečovská',
          'Sedlárska',
          'Sedmokrásková',
          'Segnerova',
          'Sekulská',
          'Semianova',
          'Senická',
          'Senná',
          'Schillerova',
          'Schody pri starej vo',
          'Sibírska',
          'Sienkiewiczova',
          'Silvánska',
          'Sinokvetná',
          'Skalická cesta',
          'Skalná',
          'Sklenárova',
          'Sklenárska',
          'Sládkovičova',
          'Sladová',
          'Slávičie údolie',
          'Slavín',
          'Slepá',
          'Sliačska',
          'Sliezska',
          'Slivková',
          'Slnečná',
          'Slovanská',
          'Slovinská',
          'Slovnaftská',
          'Slowackého',
          'Smetanova',
          'Smikova',
          'Smolenická',
          'Smolnícka',
          'Smrečianska',
          'Soferove schody',
          'Socháňova',
          'Sokolská',
          'Solivarská',
          'Sološnická',
          'Somolického',
          'Somolického',
          'Sosnová',
          'Spišská',
          'Spojná',
          'Spoločenská',
          'Sputniková',
          'Sreznevského',
          'Srnčia',
          'Stachanovská',
          'Stálicová',
          'Staničná',
          'Stará Černicová',
          'Stará Ivánska cesta',
          'Stará Prievozská',
          'Stará Vajnorská',
          'Stará vinárska',
          'Staré Grunty',
          'Staré ihrisko',
          'Staré záhrady',
          'Starhradská',
          'Starohájska',
          'Staromestská',
          'Staroturský chodník',
          'Staviteľská',
          'Stodolova',
          'Stoklasová',
          'Strakova',
          'Strážnická',
          'Strážny dom',
          'Strečnianska',
          'Stredná',
          'Strelecká',
          'Strmá cesta',
          'Strojnícka',
          'Stropkovská',
          'Struková',
          'Studená',
          'Stuhová',
          'Súbežná',
          'Súhvezdná',
          'Suché mýto',
          'Suchohradská',
          'Súkennícka',
          'Súľovská',
          'Sumbalova',
          'Súmračná',
          'Súťažná',
          'Svätého Vincenta',
          'Svätoplukova',
          'Svätoplukova',
          'Svätovojtešská',
          'Svetlá',
          'Svíbová',
          'Svidnícka',
          'Svoradova',
          'Svrčia',
          'Syslia',
          'Šafárikovo námestie',
          'Šafárikovo námestie',
          'Šafránová',
          'Šagátova',
          'Šalviová',
          'Šancová',
          'Šancová',
          'Šancová',
          'Šancová',
          'Šándorova',
          'Šarišská',
          'Šášovská',
          'Šaštínska',
          'Ševčenkova',
          'Šintavská',
          'Šípková',
          'Škarniclova',
          'Školská',
          'Škovránčia',
          'Škultétyho',
          'Šoltésovej',
          'Špieszova',
          'Špitálska',
          'Športová',
          'Šrobárovo námestie',
          'Šťastná',
          'Štedrá',
          'Štefánikova',
          'Štefánikova',
          'Štefánikova',
          'Štefanovičova',
          'Štefunkova',
          'Štetinova',
          'Štiavnická',
          'Štúrova',
          'Štyndlova',
          'Šulekova',
          'Šulekova',
          'Šulekova',
          'Šumavská',
          'Šuňavcova',
          'Šustekova',
          'Švabinského',
          'Tabaková',
          'Tablicova',
          'Táborská',
          'Tajovského',
          'Tallerova',
          'Tehelná',
          'Technická',
          'Tekovská',
          'Telocvičná',
          'Tematínska',
          'Teplická',
          'Terchovská',
          'Teslova',
          'Tetmayerova',
          'Thurzova',
          'Tichá',
          'Tilgnerova',
          'Timravina',
          'Tobrucká',
          'Tokajícka',
          'Tolstého',
          'Tománkova',
          'Tomášikova',
          'Tomášikova',
          'Tomášikova',
          'Tomášikova',
          'Tomášikova',
          'Topoľčianska',
          'Topoľová',
          'Továrenská',
          'Trebišovská',
          'Trebišovská',
          'Trebišovská',
          'Trenčianska',
          'Treskoňova',
          'Trnavská cesta',
          'Trnavská cesta',
          'Trnavská cesta',
          'Trnavská cesta',
          'Trnavská cesta',
          'Trnavské mýto',
          'Tŕňová',
          'Trojdomy',
          'Tučkova',
          'Tupolevova',
          'Turbínova',
          'Turčianska',
          'Turnianska',
          'Tvarožkova',
          'Tylova',
          'Tyršovo nábrežie',
          'Údernícka',
          'Údolná',
          'Uhorková',
          'Ukrajinská',
          'Ulica 29. augusta',
          'Ulica 29. augusta',
          'Ulica 29. augusta',
          'Ulica 29. augusta',
          'Ulica Imricha Karvaš',
          'Ulica Jozefa Krónera',
          'Ulica Viktora Tegelh',
          'Úprkova',
          'Úradnícka',
          'Uránová',
          'Urbánkova',
          'Ursínyho',
          'Uršulínska',
          'Úzka',
          'V záhradách',
          'Vajanského nábrežie',
          'Vajnorská',
          'Vajnorská',
          'Vajnorská',
          'Vajnorská',
          'Vajnorská',
          'Vajnorská',
          'Vajnorská',
          'Vajnorská',
          'Vajnorská',
          'Valašská',
          'Valchárska',
          'Vansovej',
          'Vápenná',
          'Varínska',
          'Varšavská',
          'Varšavská',
          'Vavilovova',
          'Vavrínova',
          'Vazovova',
          'Včelárska',
          'Velehradská',
          'Veltlínska',
          'Ventúrska',
          'Veterná',
          'Veternicová',
          'Vetvová',
          'Viedenská cesta',
          'Viedenská cesta',
          'Vietnamská',
          'Vígľašská',
          'Vihorlatská',
          'Viktorínova',
          'Vilová',
          'Vincenta Hložníka',
          'Vínna',
          'Vlastenecké námestie',
          'Vlčkova',
          'Vlčkova',
          'Vlčkova',
          'Vodný vrch',
          'Votrubova',
          'Vrábeľská',
          'Vrakunská cesta',
          'Vranovská',
          'Vretenová',
          'Vrchná',
          'Vrútocká',
          'Vyhliadka',
          'Vyhnianska cesta',
          'Vysoká',
          'Vyšehradská',
          'Vyšná',
          'Wattova',
          'Wilsonova',
          'Wolkrova',
          'Za Kasárňou',
          'Za sokolovňou',
          'Za Stanicou',
          'Za tehelňou',
          'Záborského',
          'Zadunajská cesta',
          'Záhorácka',
          'Záhradnícka',
          'Záhradnícka',
          'Záhradnícka',
          'Záhradnícka',
          'Záhrebská',
          'Záhrebská',
          'Zálužická',
          'Zámocká',
          'Zámocké schody',
          'Zámočnícka',
          'Západná',
          'Západný rad',
          'Záporožská',
          'Zátišie',
          'Závodníkova',
          'Zelená',
          'Zelinárska',
          'Zimná',
          'Zlaté piesky',
          'Zlaté schody',
          'Znievska',
          'Zohorská',
          'Zochova',
          'Zrinského',
          'Zvolenská',
          'Žabí majer',
          'Žabotova',
          'Žehrianska',
          'Železná',
          'Železničiarska',
          'Žellova',
          'Žiarska',
          'Židovská',
          'Žilinská',
          'Žilinská',
          'Živnostenská',
          'Žižkova',
          'Župné námestie',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/sk/address/street_name.js': [
      function(require, module, exports) {
        module['exports'] = ['#{street}']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/sk/address/street_address.js': [
      function(require, module, exports) {
        module['exports'] = ['#{street_name} #{building_number}']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/sk/address/default_country.js': [
      function(require, module, exports) {
        module['exports'] = ['Slovensko']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/sk/address/index.js': [
      function(require, module, exports) {
        var address = {}
        module['exports'] = address
        address.city_prefix = require('./city_prefix')
        address.city_suffix = require('./city_suffix')
        address.country = require('./country')
        address.building_number = require('./building_number')
        address.secondary_address = require('./secondary_address')
        address.postcode = require('./postcode')
        address.state = require('./state')
        address.state_abbr = require('./state_abbr')
        address.time_zone = require('./time_zone')
        address.city_name = require('./city_name')
        address.city = require('./city')
        address.street = require('./street')
        address.street_name = require('./street_name')
        address.street_address = require('./street_address')
        address.default_country = require('./default_country')
      },
      {
        './city_prefix':
          '../node_modules/faker/lib/locales/sk/address/city_prefix.js',
        './city_suffix':
          '../node_modules/faker/lib/locales/sk/address/city_suffix.js',
        './country':
          '../node_modules/faker/lib/locales/sk/address/country.js',
        './building_number':
          '../node_modules/faker/lib/locales/sk/address/building_number.js',
        './secondary_address':
          '../node_modules/faker/lib/locales/sk/address/secondary_address.js',
        './postcode':
          '../node_modules/faker/lib/locales/sk/address/postcode.js',
        './state': '../node_modules/faker/lib/locales/sk/address/state.js',
        './state_abbr':
          '../node_modules/faker/lib/locales/sk/address/state_abbr.js',
        './time_zone':
          '../node_modules/faker/lib/locales/sk/address/time_zone.js',
        './city_name':
          '../node_modules/faker/lib/locales/sk/address/city_name.js',
        './city': '../node_modules/faker/lib/locales/sk/address/city.js',
        './street':
          '../node_modules/faker/lib/locales/sk/address/street.js',
        './street_name':
          '../node_modules/faker/lib/locales/sk/address/street_name.js',
        './street_address':
          '../node_modules/faker/lib/locales/sk/address/street_address.js',
        './default_country':
          '../node_modules/faker/lib/locales/sk/address/default_country.js',
      },
    ],
    '../node_modules/faker/lib/locales/sk/company/suffix.js': [
      function(require, module, exports) {
        module['exports'] = ['s.r.o.', 'a.s.', 'v.o.s.']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/sk/company/adjective.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Adaptive',
          'Advanced',
          'Ameliorated',
          'Assimilated',
          'Automated',
          'Balanced',
          'Business-focused',
          'Centralized',
          'Cloned',
          'Compatible',
          'Configurable',
          'Cross-group',
          'Cross-platform',
          'Customer-focused',
          'Customizable',
          'Decentralized',
          'De-engineered',
          'Devolved',
          'Digitized',
          'Distributed',
          'Diverse',
          'Down-sized',
          'Enhanced',
          'Enterprise-wide',
          'Ergonomic',
          'Exclusive',
          'Expanded',
          'Extended',
          'Face to face',
          'Focused',
          'Front-line',
          'Fully-configurable',
          'Function-based',
          'Fundamental',
          'Future-proofed',
          'Grass-roots',
          'Horizontal',
          'Implemented',
          'Innovative',
          'Integrated',
          'Intuitive',
          'Inverse',
          'Managed',
          'Mandatory',
          'Monitored',
          'Multi-channelled',
          'Multi-lateral',
          'Multi-layered',
          'Multi-tiered',
          'Networked',
          'Object-based',
          'Open-architected',
          'Open-source',
          'Operative',
          'Optimized',
          'Optional',
          'Organic',
          'Organized',
          'Persevering',
          'Persistent',
          'Phased',
          'Polarised',
          'Pre-emptive',
          'Proactive',
          'Profit-focused',
          'Profound',
          'Programmable',
          'Progressive',
          'Public-key',
          'Quality-focused',
          'Reactive',
          'Realigned',
          'Re-contextualized',
          'Re-engineered',
          'Reduced',
          'Reverse-engineered',
          'Right-sized',
          'Robust',
          'Seamless',
          'Secured',
          'Self-enabling',
          'Sharable',
          'Stand-alone',
          'Streamlined',
          'Switchable',
          'Synchronised',
          'Synergistic',
          'Synergized',
          'Team-oriented',
          'Total',
          'Triple-buffered',
          'Universal',
          'Up-sized',
          'Upgradable',
          'User-centric',
          'User-friendly',
          'Versatile',
          'Virtual',
          'Visionary',
          'Vision-oriented',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/sk/company/descriptor.js': [
      function(require, module, exports) {
        module['exports'] = [
          '24 hour',
          '24/7',
          '3rd generation',
          '4th generation',
          '5th generation',
          '6th generation',
          'actuating',
          'analyzing',
          'asymmetric',
          'asynchronous',
          'attitude-oriented',
          'background',
          'bandwidth-monitored',
          'bi-directional',
          'bifurcated',
          'bottom-line',
          'clear-thinking',
          'client-driven',
          'client-server',
          'coherent',
          'cohesive',
          'composite',
          'context-sensitive',
          'contextually-based',
          'content-based',
          'dedicated',
          'demand-driven',
          'didactic',
          'directional',
          'discrete',
          'disintermediate',
          'dynamic',
          'eco-centric',
          'empowering',
          'encompassing',
          'even-keeled',
          'executive',
          'explicit',
          'exuding',
          'fault-tolerant',
          'foreground',
          'fresh-thinking',
          'full-range',
          'global',
          'grid-enabled',
          'heuristic',
          'high-level',
          'holistic',
          'homogeneous',
          'human-resource',
          'hybrid',
          'impactful',
          'incremental',
          'intangible',
          'interactive',
          'intermediate',
          'leading edge',
          'local',
          'logistical',
          'maximized',
          'methodical',
          'mission-critical',
          'mobile',
          'modular',
          'motivating',
          'multimedia',
          'multi-state',
          'multi-tasking',
          'national',
          'needs-based',
          'neutral',
          'next generation',
          'non-volatile',
          'object-oriented',
          'optimal',
          'optimizing',
          'radical',
          'real-time',
          'reciprocal',
          'regional',
          'responsive',
          'scalable',
          'secondary',
          'solution-oriented',
          'stable',
          'static',
          'systematic',
          'systemic',
          'system-worthy',
          'tangible',
          'tertiary',
          'transitional',
          'uniform',
          'upward-trending',
          'user-facing',
          'value-added',
          'web-enabled',
          'well-modulated',
          'zero administration',
          'zero defect',
          'zero tolerance',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/sk/company/noun.js': [
      function(require, module, exports) {
        module['exports'] = [
          'ability',
          'access',
          'adapter',
          'algorithm',
          'alliance',
          'analyzer',
          'application',
          'approach',
          'architecture',
          'archive',
          'artificial intelligence',
          'array',
          'attitude',
          'benchmark',
          'budgetary management',
          'capability',
          'capacity',
          'challenge',
          'circuit',
          'collaboration',
          'complexity',
          'concept',
          'conglomeration',
          'contingency',
          'core',
          'customer loyalty',
          'database',
          'data-warehouse',
          'definition',
          'emulation',
          'encoding',
          'encryption',
          'extranet',
          'firmware',
          'flexibility',
          'focus group',
          'forecast',
          'frame',
          'framework',
          'function',
          'functionalities',
          'Graphic Interface',
          'groupware',
          'Graphical User Interface',
          'hardware',
          'help-desk',
          'hierarchy',
          'hub',
          'implementation',
          'info-mediaries',
          'infrastructure',
          'initiative',
          'installation',
          'instruction set',
          'interface',
          'internet solution',
          'intranet',
          'knowledge user',
          'knowledge base',
          'local area network',
          'leverage',
          'matrices',
          'matrix',
          'methodology',
          'middleware',
          'migration',
          'model',
          'moderator',
          'monitoring',
          'moratorium',
          'neural-net',
          'open architecture',
          'open system',
          'orchestration',
          'paradigm',
          'parallelism',
          'policy',
          'portal',
          'pricing structure',
          'process improvement',
          'product',
          'productivity',
          'project',
          'projection',
          'protocol',
          'secured line',
          'service-desk',
          'software',
          'solution',
          'standardization',
          'strategy',
          'structure',
          'success',
          'superstructure',
          'support',
          'synergy',
          'system engine',
          'task-force',
          'throughput',
          'time-frame',
          'toolset',
          'utilisation',
          'website',
          'workforce',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/sk/company/bs_verb.js': [
      function(require, module, exports) {
        module['exports'] = [
          'implement',
          'utilize',
          'integrate',
          'streamline',
          'optimize',
          'evolve',
          'transform',
          'embrace',
          'enable',
          'orchestrate',
          'leverage',
          'reinvent',
          'aggregate',
          'architect',
          'enhance',
          'incentivize',
          'morph',
          'empower',
          'envisioneer',
          'monetize',
          'harness',
          'facilitate',
          'seize',
          'disintermediate',
          'synergize',
          'strategize',
          'deploy',
          'brand',
          'grow',
          'target',
          'syndicate',
          'synthesize',
          'deliver',
          'mesh',
          'incubate',
          'engage',
          'maximize',
          'benchmark',
          'expedite',
          'reintermediate',
          'whiteboard',
          'visualize',
          'repurpose',
          'innovate',
          'scale',
          'unleash',
          'drive',
          'extend',
          'engineer',
          'revolutionize',
          'generate',
          'exploit',
          'transition',
          'e-enable',
          'iterate',
          'cultivate',
          'matrix',
          'productize',
          'redefine',
          'recontextualize',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/sk/company/bs_noun.js': [
      function(require, module, exports) {
        module['exports'] = [
          'clicks-and-mortar',
          'value-added',
          'vertical',
          'proactive',
          'robust',
          'revolutionary',
          'scalable',
          'leading-edge',
          'innovative',
          'intuitive',
          'strategic',
          'e-business',
          'mission-critical',
          'sticky',
          'one-to-one',
          '24/7',
          'end-to-end',
          'global',
          'B2B',
          'B2C',
          'granular',
          'frictionless',
          'virtual',
          'viral',
          'dynamic',
          '24/365',
          'best-of-breed',
          'killer',
          'magnetic',
          'bleeding-edge',
          'web-enabled',
          'interactive',
          'dot-com',
          'sexy',
          'back-end',
          'real-time',
          'efficient',
          'front-end',
          'distributed',
          'seamless',
          'extensible',
          'turn-key',
          'world-class',
          'open-source',
          'cross-platform',
          'cross-media',
          'synergistic',
          'bricks-and-clicks',
          'out-of-the-box',
          'enterprise',
          'integrated',
          'impactful',
          'wireless',
          'transparent',
          'next-generation',
          'cutting-edge',
          'user-centric',
          'visionary',
          'customized',
          'ubiquitous',
          'plug-and-play',
          'collaborative',
          'compelling',
          'holistic',
          'rich',
          'synergies',
          'web-readiness',
          'paradigms',
          'markets',
          'partnerships',
          'infrastructures',
          'platforms',
          'initiatives',
          'channels',
          'eyeballs',
          'communities',
          'ROI',
          'solutions',
          'e-tailers',
          'e-services',
          'action-items',
          'portals',
          'niches',
          'technologies',
          'content',
          'vortals',
          'supply-chains',
          'convergence',
          'relationships',
          'architectures',
          'interfaces',
          'e-markets',
          'e-commerce',
          'systems',
          'bandwidth',
          'infomediaries',
          'models',
          'mindshare',
          'deliverables',
          'users',
          'schemas',
          'networks',
          'applications',
          'metrics',
          'e-business',
          'functionalities',
          'experiences',
          'web services',
          'methodologies',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/sk/company/name.js': [
      function(require, module, exports) {
        module['exports'] = [
          '#{Name.last_name} #{suffix}',
          '#{Name.last_name} #{suffix}',
          '#{Name.man_last_name} a #{Name.man_last_name} #{suffix}',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/sk/company/index.js': [
      function(require, module, exports) {
        var company = {}
        module['exports'] = company
        company.suffix = require('./suffix')
        company.adjective = require('./adjective')
        company.descriptor = require('./descriptor')
        company.noun = require('./noun')
        company.bs_verb = require('./bs_verb')
        company.bs_noun = require('./bs_noun')
        company.name = require('./name')
      },
      {
        './suffix':
          '../node_modules/faker/lib/locales/sk/company/suffix.js',
        './adjective':
          '../node_modules/faker/lib/locales/sk/company/adjective.js',
        './descriptor':
          '../node_modules/faker/lib/locales/sk/company/descriptor.js',
        './noun': '../node_modules/faker/lib/locales/sk/company/noun.js',
        './bs_verb':
          '../node_modules/faker/lib/locales/sk/company/bs_verb.js',
        './bs_noun':
          '../node_modules/faker/lib/locales/sk/company/bs_noun.js',
        './name': '../node_modules/faker/lib/locales/sk/company/name.js',
      },
    ],
    '../node_modules/faker/lib/locales/sk/internet/free_email.js': [
      function(require, module, exports) {
        module['exports'] = ['gmail.com', 'zoznam.sk', 'azet.sk']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/sk/internet/domain_suffix.js': [
      function(require, module, exports) {
        module['exports'] = ['sk', 'com', 'net', 'eu', 'org']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/sk/internet/index.js': [
      function(require, module, exports) {
        var internet = {}
        module['exports'] = internet
        internet.free_email = require('./free_email')
        internet.domain_suffix = require('./domain_suffix')
      },
      {
        './free_email':
          '../node_modules/faker/lib/locales/sk/internet/free_email.js',
        './domain_suffix':
          '../node_modules/faker/lib/locales/sk/internet/domain_suffix.js',
      },
    ],
    '../node_modules/faker/lib/locales/sk/lorem/words.js': [
      function(require, module, exports) {
        module['exports'] = [
          'alias',
          'consequatur',
          'aut',
          'perferendis',
          'sit',
          'voluptatem',
          'accusantium',
          'doloremque',
          'aperiam',
          'eaque',
          'ipsa',
          'quae',
          'ab',
          'illo',
          'inventore',
          'veritatis',
          'et',
          'quasi',
          'architecto',
          'beatae',
          'vitae',
          'dicta',
          'sunt',
          'explicabo',
          'aspernatur',
          'aut',
          'odit',
          'aut',
          'fugit',
          'sed',
          'quia',
          'consequuntur',
          'magni',
          'dolores',
          'eos',
          'qui',
          'ratione',
          'voluptatem',
          'sequi',
          'nesciunt',
          'neque',
          'dolorem',
          'ipsum',
          'quia',
          'dolor',
          'sit',
          'amet',
          'consectetur',
          'adipisci',
          'velit',
          'sed',
          'quia',
          'non',
          'numquam',
          'eius',
          'modi',
          'tempora',
          'incidunt',
          'ut',
          'labore',
          'et',
          'dolore',
          'magnam',
          'aliquam',
          'quaerat',
          'voluptatem',
          'ut',
          'enim',
          'ad',
          'minima',
          'veniam',
          'quis',
          'nostrum',
          'exercitationem',
          'ullam',
          'corporis',
          'nemo',
          'enim',
          'ipsam',
          'voluptatem',
          'quia',
          'voluptas',
          'sit',
          'suscipit',
          'laboriosam',
          'nisi',
          'ut',
          'aliquid',
          'ex',
          'ea',
          'commodi',
          'consequatur',
          'quis',
          'autem',
          'vel',
          'eum',
          'iure',
          'reprehenderit',
          'qui',
          'in',
          'ea',
          'voluptate',
          'velit',
          'esse',
          'quam',
          'nihil',
          'molestiae',
          'et',
          'iusto',
          'odio',
          'dignissimos',
          'ducimus',
          'qui',
          'blanditiis',
          'praesentium',
          'laudantium',
          'totam',
          'rem',
          'voluptatum',
          'deleniti',
          'atque',
          'corrupti',
          'quos',
          'dolores',
          'et',
          'quas',
          'molestias',
          'excepturi',
          'sint',
          'occaecati',
          'cupiditate',
          'non',
          'provident',
          'sed',
          'ut',
          'perspiciatis',
          'unde',
          'omnis',
          'iste',
          'natus',
          'error',
          'similique',
          'sunt',
          'in',
          'culpa',
          'qui',
          'officia',
          'deserunt',
          'mollitia',
          'animi',
          'id',
          'est',
          'laborum',
          'et',
          'dolorum',
          'fuga',
          'et',
          'harum',
          'quidem',
          'rerum',
          'facilis',
          'est',
          'et',
          'expedita',
          'distinctio',
          'nam',
          'libero',
          'tempore',
          'cum',
          'soluta',
          'nobis',
          'est',
          'eligendi',
          'optio',
          'cumque',
          'nihil',
          'impedit',
          'quo',
          'porro',
          'quisquam',
          'est',
          'qui',
          'minus',
          'id',
          'quod',
          'maxime',
          'placeat',
          'facere',
          'possimus',
          'omnis',
          'voluptas',
          'assumenda',
          'est',
          'omnis',
          'dolor',
          'repellendus',
          'temporibus',
          'autem',
          'quibusdam',
          'et',
          'aut',
          'consequatur',
          'vel',
          'illum',
          'qui',
          'dolorem',
          'eum',
          'fugiat',
          'quo',
          'voluptas',
          'nulla',
          'pariatur',
          'at',
          'vero',
          'eos',
          'et',
          'accusamus',
          'officiis',
          'debitis',
          'aut',
          'rerum',
          'necessitatibus',
          'saepe',
          'eveniet',
          'ut',
          'et',
          'voluptates',
          'repudiandae',
          'sint',
          'et',
          'molestiae',
          'non',
          'recusandae',
          'itaque',
          'earum',
          'rerum',
          'hic',
          'tenetur',
          'a',
          'sapiente',
          'delectus',
          'ut',
          'aut',
          'reiciendis',
          'voluptatibus',
          'maiores',
          'doloribus',
          'asperiores',
          'repellat',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/sk/lorem/supplemental.js': [
      function(require, module, exports) {
        module['exports'] = [
          'abbas',
          'abduco',
          'abeo',
          'abscido',
          'absconditus',
          'absens',
          'absorbeo',
          'absque',
          'abstergo',
          'absum',
          'abundans',
          'abutor',
          'accedo',
          'accendo',
          'acceptus',
          'accipio',
          'accommodo',
          'accusator',
          'acer',
          'acerbitas',
          'acervus',
          'acidus',
          'acies',
          'acquiro',
          'acsi',
          'adamo',
          'adaugeo',
          'addo',
          'adduco',
          'ademptio',
          'adeo',
          'adeptio',
          'adfectus',
          'adfero',
          'adficio',
          'adflicto',
          'adhaero',
          'adhuc',
          'adicio',
          'adimpleo',
          'adinventitias',
          'adipiscor',
          'adiuvo',
          'administratio',
          'admiratio',
          'admitto',
          'admoneo',
          'admoveo',
          'adnuo',
          'adopto',
          'adsidue',
          'adstringo',
          'adsuesco',
          'adsum',
          'adulatio',
          'adulescens',
          'adultus',
          'aduro',
          'advenio',
          'adversus',
          'advoco',
          'aedificium',
          'aeger',
          'aegre',
          'aegrotatio',
          'aegrus',
          'aeneus',
          'aequitas',
          'aequus',
          'aer',
          'aestas',
          'aestivus',
          'aestus',
          'aetas',
          'aeternus',
          'ager',
          'aggero',
          'aggredior',
          'agnitio',
          'agnosco',
          'ago',
          'ait',
          'aiunt',
          'alienus',
          'alii',
          'alioqui',
          'aliqua',
          'alius',
          'allatus',
          'alo',
          'alter',
          'altus',
          'alveus',
          'amaritudo',
          'ambitus',
          'ambulo',
          'amicitia',
          'amiculum',
          'amissio',
          'amita',
          'amitto',
          'amo',
          'amor',
          'amoveo',
          'amplexus',
          'amplitudo',
          'amplus',
          'ancilla',
          'angelus',
          'angulus',
          'angustus',
          'animadverto',
          'animi',
          'animus',
          'annus',
          'anser',
          'ante',
          'antea',
          'antepono',
          'antiquus',
          'aperio',
          'aperte',
          'apostolus',
          'apparatus',
          'appello',
          'appono',
          'appositus',
          'approbo',
          'apto',
          'aptus',
          'apud',
          'aqua',
          'ara',
          'aranea',
          'arbitro',
          'arbor',
          'arbustum',
          'arca',
          'arceo',
          'arcesso',
          'arcus',
          'argentum',
          'argumentum',
          'arguo',
          'arma',
          'armarium',
          'armo',
          'aro',
          'ars',
          'articulus',
          'artificiose',
          'arto',
          'arx',
          'ascisco',
          'ascit',
          'asper',
          'aspicio',
          'asporto',
          'assentator',
          'astrum',
          'atavus',
          'ater',
          'atqui',
          'atrocitas',
          'atrox',
          'attero',
          'attollo',
          'attonbitus',
          'auctor',
          'auctus',
          'audacia',
          'audax',
          'audentia',
          'audeo',
          'audio',
          'auditor',
          'aufero',
          'aureus',
          'auris',
          'aurum',
          'aut',
          'autem',
          'autus',
          'auxilium',
          'avaritia',
          'avarus',
          'aveho',
          'averto',
          'avoco',
          'baiulus',
          'balbus',
          'barba',
          'bardus',
          'basium',
          'beatus',
          'bellicus',
          'bellum',
          'bene',
          'beneficium',
          'benevolentia',
          'benigne',
          'bestia',
          'bibo',
          'bis',
          'blandior',
          'bonus',
          'bos',
          'brevis',
          'cado',
          'caecus',
          'caelestis',
          'caelum',
          'calamitas',
          'calcar',
          'calco',
          'calculus',
          'callide',
          'campana',
          'candidus',
          'canis',
          'canonicus',
          'canto',
          'capillus',
          'capio',
          'capitulus',
          'capto',
          'caput',
          'carbo',
          'carcer',
          'careo',
          'caries',
          'cariosus',
          'caritas',
          'carmen',
          'carpo',
          'carus',
          'casso',
          'caste',
          'casus',
          'catena',
          'caterva',
          'cattus',
          'cauda',
          'causa',
          'caute',
          'caveo',
          'cavus',
          'cedo',
          'celebrer',
          'celer',
          'celo',
          'cena',
          'cenaculum',
          'ceno',
          'censura',
          'centum',
          'cerno',
          'cernuus',
          'certe',
          'certo',
          'certus',
          'cervus',
          'cetera',
          'charisma',
          'chirographum',
          'cibo',
          'cibus',
          'cicuta',
          'cilicium',
          'cimentarius',
          'ciminatio',
          'cinis',
          'circumvenio',
          'cito',
          'civis',
          'civitas',
          'clam',
          'clamo',
          'claro',
          'clarus',
          'claudeo',
          'claustrum',
          'clementia',
          'clibanus',
          'coadunatio',
          'coaegresco',
          'coepi',
          'coerceo',
          'cogito',
          'cognatus',
          'cognomen',
          'cogo',
          'cohaero',
          'cohibeo',
          'cohors',
          'colligo',
          'colloco',
          'collum',
          'colo',
          'color',
          'coma',
          'combibo',
          'comburo',
          'comedo',
          'comes',
          'cometes',
          'comis',
          'comitatus',
          'commemoro',
          'comminor',
          'commodo',
          'communis',
          'comparo',
          'compello',
          'complectus',
          'compono',
          'comprehendo',
          'comptus',
          'conatus',
          'concedo',
          'concido',
          'conculco',
          'condico',
          'conduco',
          'confero',
          'confido',
          'conforto',
          'confugo',
          'congregatio',
          'conicio',
          'coniecto',
          'conitor',
          'coniuratio',
          'conor',
          'conqueror',
          'conscendo',
          'conservo',
          'considero',
          'conspergo',
          'constans',
          'consuasor',
          'contabesco',
          'contego',
          'contigo',
          'contra',
          'conturbo',
          'conventus',
          'convoco',
          'copia',
          'copiose',
          'cornu',
          'corona',
          'corpus',
          'correptius',
          'corrigo',
          'corroboro',
          'corrumpo',
          'coruscus',
          'cotidie',
          'crapula',
          'cras',
          'crastinus',
          'creator',
          'creber',
          'crebro',
          'credo',
          'creo',
          'creptio',
          'crepusculum',
          'cresco',
          'creta',
          'cribro',
          'crinis',
          'cruciamentum',
          'crudelis',
          'cruentus',
          'crur',
          'crustulum',
          'crux',
          'cubicularis',
          'cubitum',
          'cubo',
          'cui',
          'cuius',
          'culpa',
          'culpo',
          'cultellus',
          'cultura',
          'cum',
          'cunabula',
          'cunae',
          'cunctatio',
          'cupiditas',
          'cupio',
          'cuppedia',
          'cupressus',
          'cur',
          'cura',
          'curatio',
          'curia',
          'curiositas',
          'curis',
          'curo',
          'curriculum',
          'currus',
          'cursim',
          'curso',
          'cursus',
          'curto',
          'curtus',
          'curvo',
          'curvus',
          'custodia',
          'damnatio',
          'damno',
          'dapifer',
          'debeo',
          'debilito',
          'decens',
          'decerno',
          'decet',
          'decimus',
          'decipio',
          'decor',
          'decretum',
          'decumbo',
          'dedecor',
          'dedico',
          'deduco',
          'defaeco',
          'defendo',
          'defero',
          'defessus',
          'defetiscor',
          'deficio',
          'defigo',
          'defleo',
          'defluo',
          'defungo',
          'degenero',
          'degero',
          'degusto',
          'deinde',
          'delectatio',
          'delego',
          'deleo',
          'delibero',
          'delicate',
          'delinquo',
          'deludo',
          'demens',
          'demergo',
          'demitto',
          'demo',
          'demonstro',
          'demoror',
          'demulceo',
          'demum',
          'denego',
          'denique',
          'dens',
          'denuncio',
          'denuo',
          'deorsum',
          'depereo',
          'depono',
          'depopulo',
          'deporto',
          'depraedor',
          'deprecator',
          'deprimo',
          'depromo',
          'depulso',
          'deputo',
          'derelinquo',
          'derideo',
          'deripio',
          'desidero',
          'desino',
          'desipio',
          'desolo',
          'desparatus',
          'despecto',
          'despirmatio',
          'infit',
          'inflammatio',
          'paens',
          'patior',
          'patria',
          'patrocinor',
          'patruus',
          'pauci',
          'paulatim',
          'pauper',
          'pax',
          'peccatus',
          'pecco',
          'pecto',
          'pectus',
          'pecunia',
          'pecus',
          'peior',
          'pel',
          'ocer',
          'socius',
          'sodalitas',
          'sol',
          'soleo',
          'solio',
          'solitudo',
          'solium',
          'sollers',
          'sollicito',
          'solum',
          'solus',
          'solutio',
          'solvo',
          'somniculosus',
          'somnus',
          'sonitus',
          'sono',
          'sophismata',
          'sopor',
          'sordeo',
          'sortitus',
          'spargo',
          'speciosus',
          'spectaculum',
          'speculum',
          'sperno',
          'spero',
          'spes',
          'spiculum',
          'spiritus',
          'spoliatio',
          'sponte',
          'stabilis',
          'statim',
          'statua',
          'stella',
          'stillicidium',
          'stipes',
          'stips',
          'sto',
          'strenuus',
          'strues',
          'studio',
          'stultus',
          'suadeo',
          'suasoria',
          'sub',
          'subito',
          'subiungo',
          'sublime',
          'subnecto',
          'subseco',
          'substantia',
          'subvenio',
          'succedo',
          'succurro',
          'sufficio',
          'suffoco',
          'suffragium',
          'suggero',
          'sui',
          'sulum',
          'sum',
          'summa',
          'summisse',
          'summopere',
          'sumo',
          'sumptus',
          'supellex',
          'super',
          'suppellex',
          'supplanto',
          'suppono',
          'supra',
          'surculus',
          'surgo',
          'sursum',
          'suscipio',
          'suspendo',
          'sustineo',
          'suus',
          'synagoga',
          'tabella',
          'tabernus',
          'tabesco',
          'tabgo',
          'tabula',
          'taceo',
          'tactus',
          'taedium',
          'talio',
          'talis',
          'talus',
          'tam',
          'tamdiu',
          'tamen',
          'tametsi',
          'tamisium',
          'tamquam',
          'tandem',
          'tantillus',
          'tantum',
          'tardus',
          'tego',
          'temeritas',
          'temperantia',
          'templum',
          'temptatio',
          'tempus',
          'tenax',
          'tendo',
          'teneo',
          'tener',
          'tenuis',
          'tenus',
          'tepesco',
          'tepidus',
          'ter',
          'terebro',
          'teres',
          'terga',
          'tergeo',
          'tergiversatio',
          'tergo',
          'tergum',
          'termes',
          'terminatio',
          'tero',
          'terra',
          'terreo',
          'territo',
          'terror',
          'tersus',
          'tertius',
          'testimonium',
          'texo',
          'textilis',
          'textor',
          'textus',
          'thalassinus',
          'theatrum',
          'theca',
          'thema',
          'theologus',
          'thermae',
          'thesaurus',
          'thesis',
          'thorax',
          'thymbra',
          'thymum',
          'tibi',
          'timidus',
          'timor',
          'titulus',
          'tolero',
          'tollo',
          'tondeo',
          'tonsor',
          'torqueo',
          'torrens',
          'tot',
          'totidem',
          'toties',
          'totus',
          'tracto',
          'trado',
          'traho',
          'trans',
          'tredecim',
          'tremo',
          'trepide',
          'tres',
          'tribuo',
          'tricesimus',
          'triduana',
          'triginta',
          'tripudio',
          'tristis',
          'triumphus',
          'trucido',
          'truculenter',
          'tubineus',
          'tui',
          'tum',
          'tumultus',
          'tunc',
          'turba',
          'turbo',
          'turpe',
          'turpis',
          'tutamen',
          'tutis',
          'tyrannus',
          'uberrime',
          'ubi',
          'ulciscor',
          'ullus',
          'ulterius',
          'ultio',
          'ultra',
          'umbra',
          'umerus',
          'umquam',
          'una',
          'unde',
          'undique',
          'universe',
          'unus',
          'urbanus',
          'urbs',
          'uredo',
          'usitas',
          'usque',
          'ustilo',
          'ustulo',
          'usus',
          'uter',
          'uterque',
          'utilis',
          'utique',
          'utor',
          'utpote',
          'utrimque',
          'utroque',
          'utrum',
          'uxor',
          'vaco',
          'vacuus',
          'vado',
          'vae',
          'valde',
          'valens',
          'valeo',
          'valetudo',
          'validus',
          'vallum',
          'vapulus',
          'varietas',
          'varius',
          'vehemens',
          'vel',
          'velociter',
          'velum',
          'velut',
          'venia',
          'venio',
          'ventito',
          'ventosus',
          'ventus',
          'venustas',
          'ver',
          'verbera',
          'verbum',
          'vere',
          'verecundia',
          'vereor',
          'vergo',
          'veritas',
          'vero',
          'versus',
          'verto',
          'verumtamen',
          'verus',
          'vesco',
          'vesica',
          'vesper',
          'vespillo',
          'vester',
          'vestigium',
          'vestrum',
          'vetus',
          'via',
          'vicinus',
          'vicissitudo',
          'victoria',
          'victus',
          'videlicet',
          'video',
          'viduata',
          'viduo',
          'vigilo',
          'vigor',
          'vilicus',
          'vilis',
          'vilitas',
          'villa',
          'vinco',
          'vinculum',
          'vindico',
          'vinitor',
          'vinum',
          'vir',
          'virga',
          'virgo',
          'viridis',
          'viriliter',
          'virtus',
          'vis',
          'viscus',
          'vita',
          'vitiosus',
          'vitium',
          'vito',
          'vivo',
          'vix',
          'vobis',
          'vociferor',
          'voco',
          'volaticus',
          'volo',
          'volubilis',
          'voluntarius',
          'volup',
          'volutabrum',
          'volva',
          'vomer',
          'vomica',
          'vomito',
          'vorago',
          'vorax',
          'voro',
          'vos',
          'votum',
          'voveo',
          'vox',
          'vulariter',
          'vulgaris',
          'vulgivagus',
          'vulgo',
          'vulgus',
          'vulnero',
          'vulnus',
          'vulpes',
          'vulticulus',
          'vultuosus',
          'xiphias',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/sk/lorem/index.js': [
      function(require, module, exports) {
        var lorem = {}
        module['exports'] = lorem
        lorem.words = require('./words')
        lorem.supplemental = require('./supplemental')
      },
      {
        './words': '../node_modules/faker/lib/locales/sk/lorem/words.js',
        './supplemental':
          '../node_modules/faker/lib/locales/sk/lorem/supplemental.js',
      },
    ],
    '../node_modules/faker/lib/locales/sk/name/male_first_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Drahoslav',
          'Severín',
          'Alexej',
          'Ernest',
          'Rastislav',
          'Radovan',
          'Dobroslav',
          'Dalibor',
          'Vincent',
          'Miloš',
          'Timotej',
          'Gejza',
          'Bohuš',
          'Alfonz',
          'Gašpar',
          'Emil',
          'Erik',
          'Blažej',
          'Zdenko',
          'Dezider',
          'Arpád',
          'Valentín',
          'Pravoslav',
          'Jaromír',
          'Roman',
          'Matej',
          'Frederik',
          'Viktor',
          'Alexander',
          'Radomír',
          'Albín',
          'Bohumil',
          'Kazimír',
          'Fridrich',
          'Radoslav',
          'Tomáš',
          'Alan',
          'Branislav',
          'Bruno',
          'Gregor',
          'Vlastimil',
          'Boleslav',
          'Eduard',
          'Jozef',
          'Víťazoslav',
          'Blahoslav',
          'Beňadik',
          'Adrián',
          'Gabriel',
          'Marián',
          'Emanuel',
          'Miroslav',
          'Benjamín',
          'Hugo',
          'Richard',
          'Izidor',
          'Zoltán',
          'Albert',
          'Igor',
          'Július',
          'Aleš',
          'Fedor',
          'Rudolf',
          'Valér',
          'Marcel',
          'Ervín',
          'Slavomír',
          'Vojtech',
          'Juraj',
          'Marek',
          'Jaroslav',
          'Žigmund',
          'Florián',
          'Roland',
          'Pankrác',
          'Servác',
          'Bonifác',
          'Svetozár',
          'Bernard',
          'Júlia',
          'Urban',
          'Dušan',
          'Viliam',
          'Ferdinand',
          'Norbert',
          'Róbert',
          'Medard',
          'Zlatko',
          'Anton',
          'Vasil',
          'Vít',
          'Adolf',
          'Vratislav',
          'Alfréd',
          'Alojz',
          'Ján',
          'Tadeáš',
          'Ladislav',
          'Peter',
          'Pavol',
          'Miloslav',
          'Prokop',
          'Cyril',
          'Metod',
          'Patrik',
          'Oliver',
          'Ivan',
          'Kamil',
          'Henrich',
          'Drahomír',
          'Bohuslav',
          'Iľja',
          'Daniel',
          'Vladimír',
          'Jakub',
          'Krištof',
          'Ignác',
          'Gustáv',
          'Jerguš',
          'Dominik',
          'Oskar',
          'Vavrinec',
          'Ľubomír',
          'Mojmír',
          'Leonard',
          'Tichomír',
          'Filip',
          'Bartolomej',
          'Ľudovít',
          'Samuel',
          'Augustín',
          'Belo',
          'Oleg',
          'Bystrík',
          'Ctibor',
          'Ľudomil',
          'Konštantín',
          'Ľuboslav',
          'Matúš',
          'Móric',
          'Ľuboš',
          'Ľubor',
          'Vladislav',
          'Cyprián',
          'Václav',
          'Michal',
          'Jarolím',
          'Arnold',
          'Levoslav',
          'František',
          'Dionýz',
          'Maximilián',
          'Koloman',
          'Boris',
          'Lukáš',
          'Kristián',
          'Vendelín',
          'Sergej',
          'Aurel',
          'Demeter',
          'Denis',
          'Hubert',
          'Karol',
          'Imrich',
          'René',
          'Bohumír',
          'Teodor',
          'Tibor',
          'Maroš',
          'Martin',
          'Svätopluk',
          'Stanislav',
          'Leopold',
          'Eugen',
          'Félix',
          'Klement',
          'Kornel',
          'Milan',
          'Vratko',
          'Ondrej',
          'Andrej',
          'Edmund',
          'Oldrich',
          'Oto',
          'Mikuláš',
          'Ambróz',
          'Radúz',
          'Bohdan',
          'Adam',
          'Štefan',
          'Dávid',
          'Silvester',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/sk/name/female_first_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Alexandra',
          'Karina',
          'Daniela',
          'Andrea',
          'Antónia',
          'Bohuslava',
          'Dáša',
          'Malvína',
          'Kristína',
          'Nataša',
          'Bohdana',
          'Drahomíra',
          'Sára',
          'Zora',
          'Tamara',
          'Ema',
          'Tatiana',
          'Erika',
          'Veronika',
          'Agáta',
          'Dorota',
          'Vanda',
          'Zoja',
          'Gabriela',
          'Perla',
          'Ida',
          'Liana',
          'Miloslava',
          'Vlasta',
          'Lívia',
          'Eleonóra',
          'Etela',
          'Romana',
          'Zlatica',
          'Anežka',
          'Bohumila',
          'Františka',
          'Angela',
          'Matilda',
          'Svetlana',
          'Ľubica',
          'Alena',
          'Soňa',
          'Vieroslava',
          'Zita',
          'Miroslava',
          'Irena',
          'Milena',
          'Estera',
          'Justína',
          'Dana',
          'Danica',
          'Jela',
          'Jaroslava',
          'Jarmila',
          'Lea',
          'Anastázia',
          'Galina',
          'Lesana',
          'Hermína',
          'Monika',
          'Ingrida',
          'Viktória',
          'Blažena',
          'Žofia',
          'Sofia',
          'Gizela',
          'Viola',
          'Gertrúda',
          'Zina',
          'Júlia',
          'Juliana',
          'Želmíra',
          'Ela',
          'Vanesa',
          'Iveta',
          'Vilma',
          'Petronela',
          'Žaneta',
          'Xénia',
          'Karolína',
          'Lenka',
          'Laura',
          'Stanislava',
          'Margaréta',
          'Dobroslava',
          'Blanka',
          'Valéria',
          'Paulína',
          'Sidónia',
          'Adriána',
          'Beáta',
          'Petra',
          'Melánia',
          'Diana',
          'Berta',
          'Patrícia',
          'Lujza',
          'Amália',
          'Milota',
          'Nina',
          'Margita',
          'Kamila',
          'Dušana',
          'Magdaléna',
          'Oľga',
          'Anna',
          'Hana',
          'Božena',
          'Marta',
          'Libuša',
          'Božidara',
          'Dominika',
          'Hortenzia',
          'Jozefína',
          'Štefánia',
          'Ľubomíra',
          'Zuzana',
          'Darina',
          'Marcela',
          'Milica',
          'Elena',
          'Helena',
          'Lýdia',
          'Anabela',
          'Jana',
          'Silvia',
          'Nikola',
          'Ružena',
          'Nora',
          'Drahoslava',
          'Linda',
          'Melinda',
          'Rebeka',
          'Rozália',
          'Regína',
          'Alica',
          'Marianna',
          'Miriama',
          'Martina',
          'Mária',
          'Jolana',
          'Ľudomila',
          'Ľudmila',
          'Olympia',
          'Eugénia',
          'Ľuboslava',
          'Zdenka',
          'Edita',
          'Michaela',
          'Stela',
          'Viera',
          'Natália',
          'Eliška',
          'Brigita',
          'Valentína',
          'Terézia',
          'Vladimíra',
          'Hedviga',
          'Uršuľa',
          'Alojza',
          'Kvetoslava',
          'Sabína',
          'Dobromila',
          'Klára',
          'Simona',
          'Aurélia',
          'Denisa',
          'Renáta',
          'Irma',
          'Agnesa',
          'Klaudia',
          'Alžbeta',
          'Elvíra',
          'Cecília',
          'Emília',
          'Katarína',
          'Henrieta',
          'Bibiána',
          'Barbora',
          'Marína',
          'Izabela',
          'Hilda',
          'Otília',
          'Lucia',
          'Branislava',
          'Bronislava',
          'Ivica',
          'Albína',
          'Kornélia',
          'Sláva',
          'Slávka',
          'Judita',
          'Dagmara',
          'Adela',
          'Nadežda',
          'Eva',
          'Filoména',
          'Ivana',
          'Milada',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/sk/name/male_last_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Antal',
          'Babka',
          'Bahna',
          'Bahno',
          'Baláž',
          'Baran',
          'Baranka',
          'Bartovič',
          'Bartoš',
          'Bača',
          'Bernolák',
          'Beňo',
          'Bicek',
          'Bielik',
          'Blaho',
          'Bondra',
          'Bosák',
          'Boška',
          'Brezina',
          'Bukovský',
          'Chalupka',
          'Chudík',
          'Cibula',
          'Cibulka',
          'Cibuľa',
          'Cyprich',
          'Cíger',
          'Danko',
          'Daňko',
          'Daňo',
          'Debnár',
          'Dej',
          'Dekýš',
          'Doležal',
          'Dočolomanský',
          'Droppa',
          'Dubovský',
          'Dudek',
          'Dula',
          'Dulla',
          'Dusík',
          'Dvonč',
          'Dzurjanin',
          'Dávid',
          'Fabian',
          'Fabián',
          'Fajnor',
          'Farkašovský',
          'Fico',
          'Filc',
          'Filip',
          'Finka',
          'Ftorek',
          'Gašpar',
          'Gašparovič',
          'Gocník',
          'Gregor',
          'Greguš',
          'Grznár',
          'Hablák',
          'Habšuda',
          'Halda',
          'Haluška',
          'Halák',
          'Hanko',
          'Hanzal',
          'Haščák',
          'Heretik',
          'Hečko',
          'Hlaváček',
          'Hlinka',
          'Holub',
          'Holuby',
          'Hossa',
          'Hoza',
          'Hraško',
          'Hric',
          'Hrmo',
          'Hrušovský',
          'Huba',
          'Ihnačák',
          'Janeček',
          'Janoška',
          'Jantošovič',
          'Janík',
          'Janček',
          'Jedľovský',
          'Jendek',
          'Jonata',
          'Jurina',
          'Jurkovič',
          'Jurík',
          'Jánošík',
          'Kafenda',
          'Kaliský',
          'Karul',
          'Keníž',
          'Klapka',
          'Kmeť',
          'Kolesár',
          'Kollár',
          'Kolnik',
          'Kolník',
          'Kolár',
          'Korec',
          'Kostka',
          'Kostrec',
          'Kováč',
          'Kováčik',
          'Koza',
          'Kočiš',
          'Krajíček',
          'Krajči',
          'Krajčo',
          'Krajčovič',
          'Krajčír',
          'Králik',
          'Krúpa',
          'Kubík',
          'Kyseľ',
          'Kállay',
          'Labuda',
          'Lepšík',
          'Lipták',
          'Lisický',
          'Lubina',
          'Lukáč',
          'Lupták',
          'Líška',
          'Madej',
          'Majeský',
          'Malachovský',
          'Malíšek',
          'Mamojka',
          'Marcinko',
          'Marián',
          'Masaryk',
          'Maslo',
          'Matiaško',
          'Medveď',
          'Melcer',
          'Mečiar',
          'Michalík',
          'Mihalik',
          'Mihál',
          'Mihálik',
          'Mikloško',
          'Mikulík',
          'Mikuš',
          'Mikúš',
          'Milota',
          'Mináč',
          'Mišík',
          'Mojžiš',
          'Mokroš',
          'Mora',
          'Moravčík',
          'Mydlo',
          'Nemec',
          'Nitra',
          'Novák',
          'Obšut',
          'Ondruš',
          'Otčenáš',
          'Pauko',
          'Pavlikovský',
          'Pavúk',
          'Pašek',
          'Paška',
          'Paško',
          'Pelikán',
          'Petrovický',
          'Petruška',
          'Peško',
          'Plch',
          'Plekanec',
          'Podhradský',
          'Podkonický',
          'Poliak',
          'Pupák',
          'Rak',
          'Repiský',
          'Romančík',
          'Rus',
          'Ružička',
          'Rybníček',
          'Rybár',
          'Rybárik',
          'Samson',
          'Sedliak',
          'Senko',
          'Sklenka',
          'Skokan',
          'Skutecký',
          'Slašťan',
          'Sloboda',
          'Slobodník',
          'Slota',
          'Slovák',
          'Smrek',
          'Stodola',
          'Straka',
          'Strnisko',
          'Svrbík',
          'Sámel',
          'Sýkora',
          'Tatar',
          'Tatarka',
          'Tatár',
          'Tatárka',
          'Thomka',
          'Tomeček',
          'Tomka',
          'Tomko',
          'Truben',
          'Turčok',
          'Uram',
          'Urblík',
          'Vajcík',
          'Vajda',
          'Valach',
          'Valachovič',
          'Valent',
          'Valuška',
          'Vanek',
          'Vesel',
          'Vicen',
          'Višňovský',
          'Vlach',
          'Vojtek',
          'Vydarený',
          'Zajac',
          'Zima',
          'Zimka',
          'Záborský',
          'Zúbrik',
          'Čapkovič',
          'Čaplovič',
          'Čarnogurský',
          'Čierny',
          'Čobrda',
          'Ďaďo',
          'Ďurica',
          'Ďuriš',
          'Šidlo',
          'Šimonovič',
          'Škriniar',
          'Škultéty',
          'Šmajda',
          'Šoltés',
          'Šoltýs',
          'Štefan',
          'Štefanka',
          'Šulc',
          'Šurka',
          'Švehla',
          'Šťastný',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/sk/name/female_last_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Antalová',
          'Babková',
          'Bahnová',
          'Balážová',
          'Baranová',
          'Baranková',
          'Bartovičová',
          'Bartošová',
          'Bačová',
          'Bernoláková',
          'Beňová',
          'Biceková',
          'Bieliková',
          'Blahová',
          'Bondrová',
          'Bosáková',
          'Bošková',
          'Brezinová',
          'Bukovská',
          'Chalupková',
          'Chudíková',
          'Cibulová',
          'Cibulková',
          'Cyprichová',
          'Cígerová',
          'Danková',
          'Daňková',
          'Daňová',
          'Debnárová',
          'Dejová',
          'Dekýšová',
          'Doležalová',
          'Dočolomanská',
          'Droppová',
          'Dubovská',
          'Dudeková',
          'Dulová',
          'Dullová',
          'Dusíková',
          'Dvončová',
          'Dzurjaninová',
          'Dávidová',
          'Fabianová',
          'Fabiánová',
          'Fajnorová',
          'Farkašovská',
          'Ficová',
          'Filcová',
          'Filipová',
          'Finková',
          'Ftoreková',
          'Gašparová',
          'Gašparovičová',
          'Gocníková',
          'Gregorová',
          'Gregušová',
          'Grznárová',
          'Habláková',
          'Habšudová',
          'Haldová',
          'Halušková',
          'Haláková',
          'Hanková',
          'Hanzalová',
          'Haščáková',
          'Heretiková',
          'Hečková',
          'Hlaváčeková',
          'Hlinková',
          'Holubová',
          'Holubyová',
          'Hossová',
          'Hozová',
          'Hrašková',
          'Hricová',
          'Hrmová',
          'Hrušovská',
          'Hubová',
          'Ihnačáková',
          'Janečeková',
          'Janošková',
          'Jantošovičová',
          'Janíková',
          'Jančeková',
          'Jedľovská',
          'Jendeková',
          'Jonatová',
          'Jurinová',
          'Jurkovičová',
          'Juríková',
          'Jánošíková',
          'Kafendová',
          'Kaliská',
          'Karulová',
          'Kenížová',
          'Klapková',
          'Kmeťová',
          'Kolesárová',
          'Kollárová',
          'Kolniková',
          'Kolníková',
          'Kolárová',
          'Korecová',
          'Kostkaová',
          'Kostrecová',
          'Kováčová',
          'Kováčiková',
          'Kozová',
          'Kočišová',
          'Krajíčeková',
          'Krajčová',
          'Krajčovičová',
          'Krajčírová',
          'Králiková',
          'Krúpová',
          'Kubíková',
          'Kyseľová',
          'Kállayová',
          'Labudová',
          'Lepšíková',
          'Liptáková',
          'Lisická',
          'Lubinová',
          'Lukáčová',
          'Luptáková',
          'Líšková',
          'Madejová',
          'Majeská',
          'Malachovská',
          'Malíšeková',
          'Mamojková',
          'Marcinková',
          'Mariánová',
          'Masaryková',
          'Maslová',
          'Matiašková',
          'Medveďová',
          'Melcerová',
          'Mečiarová',
          'Michalíková',
          'Mihaliková',
          'Mihálová',
          'Miháliková',
          'Miklošková',
          'Mikulíková',
          'Mikušová',
          'Mikúšová',
          'Milotová',
          'Mináčová',
          'Mišíková',
          'Mojžišová',
          'Mokrošová',
          'Morová',
          'Moravčíková',
          'Mydlová',
          'Nemcová',
          'Nováková',
          'Obšutová',
          'Ondrušová',
          'Otčenášová',
          'Pauková',
          'Pavlikovská',
          'Pavúková',
          'Pašeková',
          'Pašková',
          'Pelikánová',
          'Petrovická',
          'Petrušková',
          'Pešková',
          'Plchová',
          'Plekanecová',
          'Podhradská',
          'Podkonická',
          'Poliaková',
          'Pupáková',
          'Raková',
          'Repiská',
          'Romančíková',
          'Rusová',
          'Ružičková',
          'Rybníčeková',
          'Rybárová',
          'Rybáriková',
          'Samsonová',
          'Sedliaková',
          'Senková',
          'Sklenková',
          'Skokanová',
          'Skutecká',
          'Slašťanová',
          'Slobodová',
          'Slobodníková',
          'Slotová',
          'Slováková',
          'Smreková',
          'Stodolová',
          'Straková',
          'Strnisková',
          'Svrbíková',
          'Sámelová',
          'Sýkorová',
          'Tatarová',
          'Tatarková',
          'Tatárová',
          'Tatárkaová',
          'Thomková',
          'Tomečeková',
          'Tomková',
          'Trubenová',
          'Turčoková',
          'Uramová',
          'Urblíková',
          'Vajcíková',
          'Vajdová',
          'Valachová',
          'Valachovičová',
          'Valentová',
          'Valušková',
          'Vaneková',
          'Veselová',
          'Vicenová',
          'Višňovská',
          'Vlachová',
          'Vojteková',
          'Vydarená',
          'Zajacová',
          'Zimová',
          'Zimková',
          'Záborská',
          'Zúbriková',
          'Čapkovičová',
          'Čaplovičová',
          'Čarnogurská',
          'Čierná',
          'Čobrdová',
          'Ďaďová',
          'Ďuricová',
          'Ďurišová',
          'Šidlová',
          'Šimonovičová',
          'Škriniarová',
          'Škultétyová',
          'Šmajdová',
          'Šoltésová',
          'Šoltýsová',
          'Štefanová',
          'Štefanková',
          'Šulcová',
          'Šurková',
          'Švehlová',
          'Šťastná',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/sk/name/prefix.js': [
      function(require, module, exports) {
        module['exports'] = ['Ing.', 'Mgr.', 'JUDr.', 'MUDr.']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/sk/name/suffix.js': [
      function(require, module, exports) {
        module['exports'] = ['Phd.']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/sk/name/title.js': [
      function(require, module, exports) {
        module['exports'] = {
          descriptor: [
            'Lead',
            'Senior',
            'Direct',
            'Corporate',
            'Dynamic',
            'Future',
            'Product',
            'National',
            'Regional',
            'District',
            'Central',
            'Global',
            'Customer',
            'Investor',
            'Dynamic',
            'International',
            'Legacy',
            'Forward',
            'Internal',
            'Human',
            'Chief',
            'Principal',
          ],
          level: [
            'Solutions',
            'Program',
            'Brand',
            'Security',
            'Research',
            'Marketing',
            'Directives',
            'Implementation',
            'Integration',
            'Functionality',
            'Response',
            'Paradigm',
            'Tactics',
            'Identity',
            'Markets',
            'Group',
            'Division',
            'Applications',
            'Optimization',
            'Operations',
            'Infrastructure',
            'Intranet',
            'Communications',
            'Web',
            'Branding',
            'Quality',
            'Assurance',
            'Mobility',
            'Accounts',
            'Data',
            'Creative',
            'Configuration',
            'Accountability',
            'Interactions',
            'Factors',
            'Usability',
            'Metrics',
          ],
          job: [
            'Supervisor',
            'Associate',
            'Executive',
            'Liaison',
            'Officer',
            'Manager',
            'Engineer',
            'Specialist',
            'Director',
            'Coordinator',
            'Administrator',
            'Architect',
            'Analyst',
            'Designer',
            'Planner',
            'Orchestrator',
            'Technician',
            'Developer',
            'Producer',
            'Consultant',
            'Assistant',
            'Facilitator',
            'Agent',
            'Representative',
            'Strategist',
          ],
        }
      },
      {},
    ],
    '../node_modules/faker/lib/locales/sk/name/name.js': [
      function(require, module, exports) {
        module['exports'] = [
          '#{prefix} #{man_first_name} #{man_last_name}',
          '#{prefix} #{woman_first_name} #{woman_last_name}',
          '#{man_first_name} #{man_last_name} #{suffix}',
          '#{woman_first_name} #{woman_last_name} #{suffix}',
          '#{man_first_name} #{man_last_name}',
          '#{man_first_name} #{man_last_name}',
          '#{man_first_name} #{man_last_name}',
          '#{woman_first_name} #{woman_last_name}',
          '#{woman_first_name} #{woman_last_name}',
          '#{woman_first_name} #{woman_last_name}',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/sk/name/index.js': [
      function(require, module, exports) {
        var name = {}
        module['exports'] = name
        name.male_first_name = require('./male_first_name')
        name.female_first_name = require('./female_first_name')
        name.male_last_name = require('./male_last_name')
        name.female_last_name = require('./female_last_name')
        name.prefix = require('./prefix')
        name.suffix = require('./suffix')
        name.title = require('./title')
        name.name = require('./name')
      },
      {
        './male_first_name':
          '../node_modules/faker/lib/locales/sk/name/male_first_name.js',
        './female_first_name':
          '../node_modules/faker/lib/locales/sk/name/female_first_name.js',
        './male_last_name':
          '../node_modules/faker/lib/locales/sk/name/male_last_name.js',
        './female_last_name':
          '../node_modules/faker/lib/locales/sk/name/female_last_name.js',
        './prefix': '../node_modules/faker/lib/locales/sk/name/prefix.js',
        './suffix': '../node_modules/faker/lib/locales/sk/name/suffix.js',
        './title': '../node_modules/faker/lib/locales/sk/name/title.js',
        './name': '../node_modules/faker/lib/locales/sk/name/name.js',
      },
    ],
    '../node_modules/faker/lib/locales/sk/phone_number/formats.js': [
      function(require, module, exports) {
        module['exports'] = [
          '09## ### ###',
          '0## #### ####',
          '0# #### ####',
          '+421 ### ### ###',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/sk/phone_number/index.js': [
      function(require, module, exports) {
        var phone_number = {}
        module['exports'] = phone_number
        phone_number.formats = require('./formats')
      },
      {
        './formats':
          '../node_modules/faker/lib/locales/sk/phone_number/formats.js',
      },
    ],
    '../node_modules/faker/lib/locales/sk/index.js': [
      function(require, module, exports) {
        var sk = {}
        module['exports'] = sk
        sk.title = 'Slovakian'
        sk.address = require('./address')
        sk.company = require('./company')
        sk.internet = require('./internet')
        sk.lorem = require('./lorem')
        sk.name = require('./name')
        sk.phone_number = require('./phone_number')
      },
      {
        './address':
          '../node_modules/faker/lib/locales/sk/address/index.js',
        './company':
          '../node_modules/faker/lib/locales/sk/company/index.js',
        './internet':
          '../node_modules/faker/lib/locales/sk/internet/index.js',
        './lorem': '../node_modules/faker/lib/locales/sk/lorem/index.js',
        './name': '../node_modules/faker/lib/locales/sk/name/index.js',
        './phone_number':
          '../node_modules/faker/lib/locales/sk/phone_number/index.js',
      },
    ],
    '../node_modules/faker/lib/locales/sv/address/city_prefix.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Söder',
          'Norr',
          'Väst',
          'Öster',
          'Aling',
          'Ar',
          'Av',
          'Bo',
          'Br',
          'Bå',
          'Ek',
          'En',
          'Esk',
          'Fal',
          'Gäv',
          'Göte',
          'Ha',
          'Helsing',
          'Karl',
          'Krist',
          'Kram',
          'Kung',
          'Kö',
          'Lyck',
          'Ny',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/sv/address/city_suffix.js': [
      function(require, module, exports) {
        module['exports'] = [
          'stad',
          'land',
          'sås',
          'ås',
          'holm',
          'tuna',
          'sta',
          'berg',
          'löv',
          'borg',
          'mora',
          'hamn',
          'fors',
          'köping',
          'by',
          'hult',
          'torp',
          'fred',
          'vik',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/sv/address/country.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Ryssland',
          'Kanada',
          'Kina',
          'USA',
          'Brasilien',
          'Australien',
          'Indien',
          'Argentina',
          'Kazakstan',
          'Algeriet',
          'DR Kongo',
          'Danmark',
          'Färöarna',
          'Grönland',
          'Saudiarabien',
          'Mexiko',
          'Indonesien',
          'Sudan',
          'Libyen',
          'Iran',
          'Mongoliet',
          'Peru',
          'Tchad',
          'Niger',
          'Angola',
          'Mali',
          'Sydafrika',
          'Colombia',
          'Etiopien',
          'Bolivia',
          'Mauretanien',
          'Egypten',
          'Tanzania',
          'Nigeria',
          'Venezuela',
          'Namibia',
          'Pakistan',
          'Moçambique',
          'Turkiet',
          'Chile',
          'Zambia',
          'Marocko',
          'Västsahara',
          'Burma',
          'Afghanistan',
          'Somalia',
          'Centralafrikanska republiken',
          'Sydsudan',
          'Ukraina',
          'Botswana',
          'Madagaskar',
          'Kenya',
          'Frankrike',
          'Franska Guyana',
          'Jemen',
          'Thailand',
          'Spanien',
          'Turkmenistan',
          'Kamerun',
          'Papua Nya Guinea',
          'Sverige',
          'Uzbekistan',
          'Irak',
          'Paraguay',
          'Zimbabwe',
          'Japan',
          'Tyskland',
          'Kongo',
          'Finland',
          'Malaysia',
          'Vietnam',
          'Norge',
          'Svalbard',
          'Jan Mayen',
          'Elfenbenskusten',
          'Polen',
          'Italien',
          'Filippinerna',
          'Ecuador',
          'Burkina Faso',
          'Nya Zeeland',
          'Gabon',
          'Guinea',
          'Storbritannien',
          'Ghana',
          'Rumänien',
          'Laos',
          'Uganda',
          'Guyana',
          'Oman',
          'Vitryssland',
          'Kirgizistan',
          'Senegal',
          'Syrien',
          'Kambodja',
          'Uruguay',
          'Tunisien',
          'Surinam',
          'Nepal',
          'Bangladesh',
          'Tadzjikistan',
          'Grekland',
          'Nicaragua',
          'Eritrea',
          'Nordkorea',
          'Malawi',
          'Benin',
          'Honduras',
          'Liberia',
          'Bulgarien',
          'Kuba',
          'Guatemala',
          'Island',
          'Sydkorea',
          'Ungern',
          'Portugal',
          'Jordanien',
          'Serbien',
          'Azerbajdzjan',
          'Österrike',
          'Förenade Arabemiraten',
          'Tjeckien',
          'Panama',
          'Sierra Leone',
          'Irland',
          'Georgien',
          'Sri Lanka',
          'Litauen',
          'Lettland',
          'Togo',
          'Kroatien',
          'Bosnien och Hercegovina',
          'Costa Rica',
          'Slovakien',
          'Dominikanska republiken',
          'Bhutan',
          'Estland',
          'Danmark',
          'Färöarna',
          'Grönland',
          'Nederländerna',
          'Schweiz',
          'Guinea-Bissau',
          'Taiwan',
          'Moldavien',
          'Belgien',
          'Lesotho',
          'Armenien',
          'Albanien',
          'Salomonöarna',
          'Ekvatorialguinea',
          'Burundi',
          'Haiti',
          'Rwanda',
          'Makedonien',
          'Djibouti',
          'Belize',
          'Israel',
          'El Salvador',
          'Slovenien',
          'Fiji',
          'Kuwait',
          'Swaziland',
          'Timor-Leste',
          'Montenegro',
          'Bahamas',
          'Vanuatu',
          'Qatar',
          'Gambia',
          'Jamaica',
          'Kosovo',
          'Libanon',
          'Cypern',
          'Brunei',
          'Trinidad och Tobago',
          'Kap Verde',
          'Samoa',
          'Luxemburg',
          'Komorerna',
          'Mauritius',
          'São Tomé och Príncipe',
          'Kiribati',
          'Dominica',
          'Tonga',
          'Mikronesiens federerade stater',
          'Singapore',
          'Bahrain',
          'Saint Lucia',
          'Andorra',
          'Palau',
          'Seychellerna',
          'Antigua och Barbuda',
          'Barbados',
          'Saint Vincent och Grenadinerna',
          'Grenada',
          'Malta',
          'Maldiverna',
          'Saint Kitts och Nevis',
          'Marshallöarna',
          'Liechtenstein',
          'San Marino',
          'Tuvalu',
          'Nauru',
          'Monaco',
          'Vatikanstaten',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/sv/address/common_street_suffix.js': [
      function(require, module, exports) {
        module['exports'] = ['s Väg', 's Gata']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/sv/address/street_prefix.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Västra',
          'Östra',
          'Norra',
          'Södra',
          'Övre',
          'Undre',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/sv/address/street_root.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Björk',
          'Järnvägs',
          'Ring',
          'Skol',
          'Skogs',
          'Ny',
          'Gran',
          'Idrotts',
          'Stor',
          'Kyrk',
          'Industri',
          'Park',
          'Strand',
          'Skol',
          'Trädgård',
          'Ängs',
          'Kyrko',
          'Villa',
          'Ek',
          'Kvarn',
          'Stations',
          'Back',
          'Furu',
          'Gen',
          'Fabriks',
          'Åker',
          'Bäck',
          'Asp',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/sv/address/street_suffix.js': [
      function(require, module, exports) {
        module['exports'] = [
          'vägen',
          'gatan',
          'gränden',
          'gärdet',
          'allén',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/sv/address/state.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Blekinge',
          'Dalarna',
          'Gotland',
          'Gävleborg',
          'Göteborg',
          'Halland',
          'Jämtland',
          'Jönköping',
          'Kalmar',
          'Kronoberg',
          'Norrbotten',
          'Skaraborg',
          'Skåne',
          'Stockholm',
          'Södermanland',
          'Uppsala',
          'Värmland',
          'Västerbotten',
          'Västernorrland',
          'Västmanland',
          'Älvsborg',
          'Örebro',
          'Östergötland',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/sv/address/city.js': [
      function(require, module, exports) {
        module['exports'] = ['#{city_prefix}#{city_suffix}']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/sv/address/street_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          '#{street_root}#{street_suffix}',
          '#{street_prefix} #{street_root}#{street_suffix}',
          '#{Name.first_name}#{common_street_suffix}',
          '#{Name.last_name}#{common_street_suffix}',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/sv/address/postcode.js': [
      function(require, module, exports) {
        module['exports'] = ['#####']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/sv/address/building_number.js': [
      function(require, module, exports) {
        module['exports'] = ['###', '##', '#']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/sv/address/secondary_address.js': [
      function(require, module, exports) {
        module['exports'] = ['Lgh. ###', 'Hus ###']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/sv/address/street_address.js': [
      function(require, module, exports) {
        module['exports'] = ['#{street_name} #{building_number}']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/sv/address/default_country.js': [
      function(require, module, exports) {
        module['exports'] = ['Sverige']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/sv/address/index.js': [
      function(require, module, exports) {
        var address = {}
        module['exports'] = address
        address.city_prefix = require('./city_prefix')
        address.city_suffix = require('./city_suffix')
        address.country = require('./country')
        address.common_street_suffix = require('./common_street_suffix')
        address.street_prefix = require('./street_prefix')
        address.street_root = require('./street_root')
        address.street_suffix = require('./street_suffix')
        address.state = require('./state')
        address.city = require('./city')
        address.street_name = require('./street_name')
        address.postcode = require('./postcode')
        address.building_number = require('./building_number')
        address.secondary_address = require('./secondary_address')
        address.street_address = require('./street_address')
        address.default_country = require('./default_country')
      },
      {
        './city_prefix':
          '../node_modules/faker/lib/locales/sv/address/city_prefix.js',
        './city_suffix':
          '../node_modules/faker/lib/locales/sv/address/city_suffix.js',
        './country':
          '../node_modules/faker/lib/locales/sv/address/country.js',
        './common_street_suffix':
          '../node_modules/faker/lib/locales/sv/address/common_street_suffix.js',
        './street_prefix':
          '../node_modules/faker/lib/locales/sv/address/street_prefix.js',
        './street_root':
          '../node_modules/faker/lib/locales/sv/address/street_root.js',
        './street_suffix':
          '../node_modules/faker/lib/locales/sv/address/street_suffix.js',
        './state': '../node_modules/faker/lib/locales/sv/address/state.js',
        './city': '../node_modules/faker/lib/locales/sv/address/city.js',
        './street_name':
          '../node_modules/faker/lib/locales/sv/address/street_name.js',
        './postcode':
          '../node_modules/faker/lib/locales/sv/address/postcode.js',
        './building_number':
          '../node_modules/faker/lib/locales/sv/address/building_number.js',
        './secondary_address':
          '../node_modules/faker/lib/locales/sv/address/secondary_address.js',
        './street_address':
          '../node_modules/faker/lib/locales/sv/address/street_address.js',
        './default_country':
          '../node_modules/faker/lib/locales/sv/address/default_country.js',
      },
    ],
    '../node_modules/faker/lib/locales/sv/company/suffix.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Gruppen',
          'AB',
          'HB',
          'Group',
          'Investment',
          'Kommanditbolag',
          'Aktiebolag',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/sv/company/name.js': [
      function(require, module, exports) {
        module['exports'] = [
          '#{Name.last_name} #{suffix}',
          '#{Name.last_name}-#{Name.last_name}',
          '#{Name.last_name}, #{Name.last_name} #{suffix}',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/sv/company/index.js': [
      function(require, module, exports) {
        var company = {}
        module['exports'] = company
        company.suffix = require('./suffix')
        company.name = require('./name')
      },
      {
        './suffix':
          '../node_modules/faker/lib/locales/sv/company/suffix.js',
        './name': '../node_modules/faker/lib/locales/sv/company/name.js',
      },
    ],
    '../node_modules/faker/lib/locales/sv/internet/domain_suffix.js': [
      function(require, module, exports) {
        module['exports'] = ['se', 'nu', 'info', 'com', 'org']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/sv/internet/index.js': [
      function(require, module, exports) {
        var internet = {}
        module['exports'] = internet
        internet.domain_suffix = require('./domain_suffix')
      },
      {
        './domain_suffix':
          '../node_modules/faker/lib/locales/sv/internet/domain_suffix.js',
      },
    ],
    '../node_modules/faker/lib/locales/sv/name/first_name_women.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Maria',
          'Anna',
          'Margareta',
          'Elisabeth',
          'Eva',
          'Birgitta',
          'Kristina',
          'Karin',
          'Elisabet',
          'Marie',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/sv/name/first_name_men.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Erik',
          'Lars',
          'Karl',
          'Anders',
          'Per',
          'Johan',
          'Nils',
          'Lennart',
          'Emil',
          'Hans',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/sv/name/last_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Johansson',
          'Andersson',
          'Karlsson',
          'Nilsson',
          'Eriksson',
          'Larsson',
          'Olsson',
          'Persson',
          'Svensson',
          'Gustafsson',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/sv/name/prefix.js': [
      function(require, module, exports) {
        module['exports'] = ['Dr.', 'Prof.', 'PhD.']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/sv/name/title.js': [
      function(require, module, exports) {
        module['exports'] = {
          descriptor: [
            'Lead',
            'Senior',
            'Direct',
            'Corporate',
            'Dynamic',
            'Future',
            'Product',
            'National',
            'Regional',
            'District',
            'Central',
            'Global',
            'Customer',
            'Investor',
            'Dynamic',
            'International',
            'Legacy',
            'Forward',
            'Internal',
            'Human',
            'Chief',
            'Principal',
          ],
          level: [
            'Solutions',
            'Program',
            'Brand',
            'Security',
            'Research',
            'Marketing',
            'Directives',
            'Implementation',
            'Integration',
            'Functionality',
            'Response',
            'Paradigm',
            'Tactics',
            'Identity',
            'Markets',
            'Group',
            'Division',
            'Applications',
            'Optimization',
            'Operations',
            'Infrastructure',
            'Intranet',
            'Communications',
            'Web',
            'Branding',
            'Quality',
            'Assurance',
            'Mobility',
            'Accounts',
            'Data',
            'Creative',
            'Configuration',
            'Accountability',
            'Interactions',
            'Factors',
            'Usability',
            'Metrics',
          ],
          job: [
            'Supervisor',
            'Associate',
            'Executive',
            'Liaison',
            'Officer',
            'Manager',
            'Engineer',
            'Specialist',
            'Director',
            'Coordinator',
            'Administrator',
            'Architect',
            'Analyst',
            'Designer',
            'Planner',
            'Orchestrator',
            'Technician',
            'Developer',
            'Producer',
            'Consultant',
            'Assistant',
            'Facilitator',
            'Agent',
            'Representative',
            'Strategist',
          ],
        }
      },
      {},
    ],
    '../node_modules/faker/lib/locales/sv/name/name.js': [
      function(require, module, exports) {
        module['exports'] = [
          '#{first_name_women} #{last_name}',
          '#{first_name_men} #{last_name}',
          '#{first_name_women} #{last_name}',
          '#{first_name_men} #{last_name}',
          '#{first_name_women} #{last_name}',
          '#{first_name_men} #{last_name}',
          '#{prefix} #{first_name_men} #{last_name}',
          '#{prefix} #{first_name_women} #{last_name}',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/sv/name/index.js': [
      function(require, module, exports) {
        var name = {}
        module['exports'] = name
        name.first_name_women = require('./first_name_women')
        name.first_name_men = require('./first_name_men')
        name.last_name = require('./last_name')
        name.prefix = require('./prefix')
        name.title = require('./title')
        name.name = require('./name')
      },
      {
        './first_name_women':
          '../node_modules/faker/lib/locales/sv/name/first_name_women.js',
        './first_name_men':
          '../node_modules/faker/lib/locales/sv/name/first_name_men.js',
        './last_name':
          '../node_modules/faker/lib/locales/sv/name/last_name.js',
        './prefix': '../node_modules/faker/lib/locales/sv/name/prefix.js',
        './title': '../node_modules/faker/lib/locales/sv/name/title.js',
        './name': '../node_modules/faker/lib/locales/sv/name/name.js',
      },
    ],
    '../node_modules/faker/lib/locales/sv/phone_number/formats.js': [
      function(require, module, exports) {
        module['exports'] = ['####-#####', '####-######']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/sv/phone_number/index.js': [
      function(require, module, exports) {
        var phone_number = {}
        module['exports'] = phone_number
        phone_number.formats = require('./formats')
      },
      {
        './formats':
          '../node_modules/faker/lib/locales/sv/phone_number/formats.js',
      },
    ],
    '../node_modules/faker/lib/locales/sv/cell_phone/common_cell_prefix.js': [
      function(require, module, exports) {
        module['exports'] = [56, 62, 59]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/sv/cell_phone/formats.js': [
      function(require, module, exports) {
        module['exports'] = ['#{common_cell_prefix}-###-####']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/sv/cell_phone/index.js': [
      function(require, module, exports) {
        var cell_phone = {}
        module['exports'] = cell_phone
        cell_phone.common_cell_prefix = require('./common_cell_prefix')
        cell_phone.formats = require('./formats')
      },
      {
        './common_cell_prefix':
          '../node_modules/faker/lib/locales/sv/cell_phone/common_cell_prefix.js',
        './formats':
          '../node_modules/faker/lib/locales/sv/cell_phone/formats.js',
      },
    ],
    '../node_modules/faker/lib/locales/sv/commerce/color.js': [
      function(require, module, exports) {
        module['exports'] = [
          'vit',
          'silver',
          'grå',
          'svart',
          'röd',
          'grön',
          'blå',
          'gul',
          'lila',
          'indigo',
          'guld',
          'brun',
          'rosa',
          'purpur',
          'korall',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/sv/commerce/department.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Böcker',
          'Filmer',
          'Musik',
          'Spel',
          'Elektronik',
          'Datorer',
          'Hem',
          'Trädgård',
          'Verktyg',
          'Livsmedel',
          'Hälsa',
          'Skönhet',
          'Leksaker',
          'Klädsel',
          'Skor',
          'Smycken',
          'Sport',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/sv/commerce/product_name.js': [
      function(require, module, exports) {
        module['exports'] = {
          adjective: [
            'Liten',
            'Ergonomisk',
            'Robust',
            'Intelligent',
            'Söt',
            'Otrolig',
            'Fatastisk',
            'Praktisk',
            'Slimmad',
            'Grym',
          ],
          material: [
            'Stål',
            'Metall',
            'Trä',
            'Betong',
            'Plast',
            'Bomul',
            'Grnit',
            'Gummi',
            'Latex',
          ],
          product: [
            'Stol',
            'Bil',
            'Dator',
            'Handskar',
            'Pants',
            'Shirt',
            'Table',
            'Shoes',
            'Hat',
          ],
        }
      },
      {},
    ],
    '../node_modules/faker/lib/locales/sv/commerce/index.js': [
      function(require, module, exports) {
        var commerce = {}
        module['exports'] = commerce
        commerce.color = require('./color')
        commerce.department = require('./department')
        commerce.product_name = require('./product_name')
      },
      {
        './color':
          '../node_modules/faker/lib/locales/sv/commerce/color.js',
        './department':
          '../node_modules/faker/lib/locales/sv/commerce/department.js',
        './product_name':
          '../node_modules/faker/lib/locales/sv/commerce/product_name.js',
      },
    ],
    '../node_modules/faker/lib/locales/sv/team/suffix.js': [
      function(require, module, exports) {
        module['exports'] = [
          'IF',
          'FF',
          'BK',
          'HK',
          'AIF',
          'SK',
          'FC',
          'SK',
          'BoIS',
          'FK',
          'BIS',
          'FIF',
          'IK',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/sv/team/name.js': [
      function(require, module, exports) {
        module['exports'] = ['#{Address.city} #{suffix}']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/sv/team/index.js': [
      function(require, module, exports) {
        var team = {}
        module['exports'] = team
        team.suffix = require('./suffix')
        team.name = require('./name')
      },
      {
        './suffix': '../node_modules/faker/lib/locales/sv/team/suffix.js',
        './name': '../node_modules/faker/lib/locales/sv/team/name.js',
      },
    ],
    '../node_modules/faker/lib/locales/sv/date/month.js': [
      function(require, module, exports) {
        // Source: http://unicode.org/cldr/trac/browser/tags/release-27/common/main/en.xml#L1799
        module['exports'] = {
          wide: [
            'januari',
            'februari',
            'mars',
            'april',
            'maj',
            'juni',
            'juli',
            'augusti',
            'september',
            'oktober',
            'november',
            'december',
          ],
          abbr: [
            'jan',
            'feb',
            'mar',
            'apr',
            'maj',
            'jun',
            'jul',
            'aug',
            'sep',
            'okt',
            'nov',
            'dec',
          ],
        }
      },
      {},
    ],
    '../node_modules/faker/lib/locales/sv/date/weekday.js': [
      function(require, module, exports) {
        // Source: http://unicode.org/cldr/trac/browser/tags/release-27/common/main/en.xml#L1847
        module['exports'] = {
          wide: [
            'söndag',
            'måndag',
            'tisdag',
            'onsdag',
            'torsdag',
            'fredag',
            'lördag',
          ],
          abbr: ['sön', 'mån', 'tis', 'ons', 'tor', 'fre', 'lör'],
        }
      },
      {},
    ],
    '../node_modules/faker/lib/locales/sv/date/index.js': [
      function(require, module, exports) {
        var date = {}
        module['exports'] = date
        date.month = require('./month')
        date.weekday = require('./weekday')
      },
      {
        './month': '../node_modules/faker/lib/locales/sv/date/month.js',
        './weekday':
          '../node_modules/faker/lib/locales/sv/date/weekday.js',
      },
    ],
    '../node_modules/faker/lib/locales/sv/index.js': [
      function(require, module, exports) {
        var sv = {}
        module['exports'] = sv
        sv.title = 'Swedish'
        sv.address = require('./address')
        sv.company = require('./company')
        sv.internet = require('./internet')
        sv.name = require('./name')
        sv.phone_number = require('./phone_number')
        sv.cell_phone = require('./cell_phone')
        sv.commerce = require('./commerce')
        sv.team = require('./team')
        sv.date = require('./date')
      },
      {
        './address':
          '../node_modules/faker/lib/locales/sv/address/index.js',
        './company':
          '../node_modules/faker/lib/locales/sv/company/index.js',
        './internet':
          '../node_modules/faker/lib/locales/sv/internet/index.js',
        './name': '../node_modules/faker/lib/locales/sv/name/index.js',
        './phone_number':
          '../node_modules/faker/lib/locales/sv/phone_number/index.js',
        './cell_phone':
          '../node_modules/faker/lib/locales/sv/cell_phone/index.js',
        './commerce':
          '../node_modules/faker/lib/locales/sv/commerce/index.js',
        './team': '../node_modules/faker/lib/locales/sv/team/index.js',
        './date': '../node_modules/faker/lib/locales/sv/date/index.js',
      },
    ],
    '../node_modules/faker/lib/locales/tr/address/city.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Adana',
          'Adıyaman',
          'Afyon',
          'Ağrı',
          'Amasya',
          'Ankara',
          'Antalya',
          'Artvin',
          'Aydın',
          'Balıkesir',
          'Bilecik',
          'Bingöl',
          'Bitlis',
          'Bolu',
          'Burdur',
          'Bursa',
          'Çanakkale',
          'Çankırı',
          'Çorum',
          'Denizli',
          'Diyarbakır',
          'Edirne',
          'Elazığ',
          'Erzincan',
          'Erzurum',
          'Eskişehir',
          'Gaziantep',
          'Giresun',
          'Gümüşhane',
          'Hakkari',
          'Hatay',
          'Isparta',
          'İçel (Mersin)',
          'İstanbul',
          'İzmir',
          'Kars',
          'Kastamonu',
          'Kayseri',
          'Kırklareli',
          'Kırşehir',
          'Kocaeli',
          'Konya',
          'Kütahya',
          'Malatya',
          'Manisa',
          'K.maraş',
          'Mardin',
          'Muğla',
          'Muş',
          'Nevşehir',
          'Niğde',
          'Ordu',
          'Rize',
          'Sakarya',
          'Samsun',
          'Siirt',
          'Sinop',
          'Sivas',
          'Tekirdağ',
          'Tokat',
          'Trabzon',
          'Tunceli',
          'Şanlıurfa',
          'Uşak',
          'Van',
          'Yozgat',
          'Zonguldak',
          'Aksaray',
          'Bayburt',
          'Karaman',
          'Kırıkkale',
          'Batman',
          'Şırnak',
          'Bartın',
          'Ardahan',
          'Iğdır',
          'Yalova',
          'Karabük',
          'Kilis',
          'Osmaniye',
          'Düzce',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/tr/address/street_root.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Atatürk Bulvarı',
          'Alparslan Türkeş Bulvarı',
          'Ali Çetinkaya Caddesi',
          'Tevfik Fikret Caddesi',
          'Kocatepe Caddesi',
          'İsmet Paşa Caddesi',
          '30 Ağustos Caddesi',
          'İsmet Attila Caddesi',
          'Namık Kemal Caddesi',
          'Lütfi Karadirek Caddesi',
          'Sarıkaya Caddesi',
          'Yunus Emre Sokak',
          'Dar Sokak',
          'Fatih Sokak ',
          'Harman Yolu Sokak ',
          'Ergenekon Sokak  ',
          'Ülkü Sokak',
          'Sağlık Sokak',
          'Okul Sokak',
          'Harman Altı Sokak',
          'Kaldırım Sokak',
          'Mevlana Sokak',
          'Gül Sokak',
          'Sıran Söğüt Sokak',
          'Güven Yaka Sokak',
          'Saygılı Sokak',
          'Menekşe Sokak',
          'Dağınık Evler Sokak',
          'Sevgi Sokak',
          'Afyon Kaya Sokak',
          'Oğuzhan Sokak',
          'İbn-i Sina Sokak',
          'Okul Sokak',
          'Bahçe Sokak',
          'Köypınar Sokak',
          'Kekeçoğlu Sokak',
          'Barış Sokak',
          'Bayır Sokak',
          'Kerimoğlu Sokak',
          'Nalbant Sokak',
          'Bandak Sokak',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/tr/address/country.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Afganistan',
          'Almanya',
          'Amerika Birleşik Devletleri',
          'Amerikan Samoa',
          'Andorra',
          'Angola',
          'Anguilla, İngiltere',
          'Antigua ve Barbuda',
          'Arjantin',
          'Arnavutluk',
          'Aruba, Hollanda',
          'Avustralya',
          'Avusturya',
          'Azerbaycan',
          'Bahama Adaları',
          'Bahreyn',
          'Bangladeş',
          'Barbados',
          'Belçika',
          'Belize',
          'Benin',
          'Bermuda, İngiltere',
          'Beyaz Rusya',
          'Bhutan',
          'Birleşik Arap Emirlikleri',
          'Birmanya (Myanmar)',
          'Bolivya',
          'Bosna Hersek',
          'Botswana',
          'Brezilya',
          'Brunei',
          'Bulgaristan',
          'Burkina Faso',
          'Burundi',
          'Cape Verde',
          'Cayman Adaları, İngiltere',
          'Cebelitarık, İngiltere',
          'Cezayir',
          'Christmas Adası , Avusturalya',
          'Cibuti',
          'Çad',
          'Çek Cumhuriyeti',
          'Çin',
          'Danimarka',
          'Doğu Timor',
          'Dominik Cumhuriyeti',
          'Dominika',
          'Ekvator',
          'Ekvator Ginesi',
          'El Salvador',
          'Endonezya',
          'Eritre',
          'Ermenistan',
          'Estonya',
          'Etiyopya',
          'Fas',
          'Fiji',
          'Fildişi Sahili',
          'Filipinler',
          'Filistin',
          'Finlandiya',
          'Folkland Adaları, İngiltere',
          'Fransa',
          'Fransız Guyanası',
          'Fransız Güney Eyaletleri (Kerguelen Adaları)',
          'Fransız Polinezyası',
          'Gabon',
          'Galler',
          'Gambiya',
          'Gana',
          'Gine',
          'Gine-Bissau',
          'Grenada',
          'Grönland',
          'Guadalup, Fransa',
          'Guam, Amerika',
          'Guatemala',
          'Guyana',
          'Güney Afrika',
          'Güney Georgia ve Güney Sandviç Adaları, İngiltere',
          'Güney Kıbrıs Rum Yönetimi',
          'Güney Kore',
          'Gürcistan H',
          'Haiti',
          'Hırvatistan',
          'Hindistan',
          'Hollanda',
          'Hollanda Antilleri',
          'Honduras',
          'Irak',
          'İngiltere',
          'İran',
          'İrlanda',
          'İspanya',
          'İsrail',
          'İsveç',
          'İsviçre',
          'İtalya',
          'İzlanda',
          'Jamaika',
          'Japonya',
          'Johnston Atoll, Amerika',
          'K.K.T.C.',
          'Kamboçya',
          'Kamerun',
          'Kanada',
          'Kanarya Adaları',
          'Karadağ',
          'Katar',
          'Kazakistan',
          'Kenya',
          'Kırgızistan',
          'Kiribati',
          'Kolombiya',
          'Komorlar',
          'Kongo',
          'Kongo Demokratik Cumhuriyeti',
          'Kosova',
          'Kosta Rika',
          'Kuveyt',
          'Kuzey İrlanda',
          'Kuzey Kore',
          'Kuzey Maryana Adaları',
          'Küba',
          'Laos',
          'Lesotho',
          'Letonya',
          'Liberya',
          'Libya',
          'Liechtenstein',
          'Litvanya',
          'Lübnan',
          'Lüksemburg',
          'Macaristan',
          'Madagaskar',
          'Makau (Makao)',
          'Makedonya',
          'Malavi',
          'Maldiv Adaları',
          'Malezya',
          'Mali',
          'Malta',
          'Marşal Adaları',
          'Martinik, Fransa',
          'Mauritius',
          'Mayotte, Fransa',
          'Meksika',
          'Mısır',
          'Midway Adaları, Amerika',
          'Mikronezya',
          'Moğolistan',
          'Moldavya',
          'Monako',
          'Montserrat',
          'Moritanya',
          'Mozambik',
          'Namibia',
          'Nauru',
          'Nepal',
          'Nijer',
          'Nijerya',
          'Nikaragua',
          'Niue, Yeni Zelanda',
          'Norveç',
          'Orta Afrika Cumhuriyeti',
          'Özbekistan',
          'Pakistan',
          'Palau Adaları',
          'Palmyra Atoll, Amerika',
          'Panama',
          'Papua Yeni Gine',
          'Paraguay',
          'Peru',
          'Polonya',
          'Portekiz',
          'Porto Riko, Amerika',
          'Reunion, Fransa',
          'Romanya',
          'Ruanda',
          'Rusya Federasyonu',
          'Saint Helena, İngiltere',
          'Saint Martin, Fransa',
          'Saint Pierre ve Miquelon, Fransa',
          'Samoa',
          'San Marino',
          'Santa Kitts ve Nevis',
          'Santa Lucia',
          'Santa Vincent ve Grenadinler',
          'Sao Tome ve Principe',
          'Senegal',
          'Seyşeller',
          'Sırbistan',
          'Sierra Leone',
          'Singapur',
          'Slovakya',
          'Slovenya',
          'Solomon Adaları',
          'Somali',
          'Sri Lanka',
          'Sudan',
          'Surinam',
          'Suriye',
          'Suudi Arabistan',
          'Svalbard, Norveç',
          'Svaziland',
          'Şili',
          'Tacikistan',
          'Tanzanya',
          'Tayland',
          'Tayvan',
          'Togo',
          'Tonga',
          'Trinidad ve Tobago',
          'Tunus',
          'Turks ve Caicos Adaları, İngiltere',
          'Tuvalu',
          'Türkiye',
          'Türkmenistan',
          'Uganda',
          'Ukrayna',
          'Umman',
          'Uruguay',
          'Ürdün',
          'Vallis ve Futuna, Fransa',
          'Vanuatu',
          'Venezuela',
          'Vietnam',
          'Virgin Adaları, Amerika',
          'Virgin Adaları, İngiltere',
          'Wake Adaları, Amerika',
          'Yemen',
          'Yeni Kaledonya, Fransa',
          'Yeni Zelanda',
          'Yunanistan',
          'Zambiya',
          'Zimbabve',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/tr/address/postcode.js': [
      function(require, module, exports) {
        module['exports'] = ['#####']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/tr/address/default_country.js': [
      function(require, module, exports) {
        module['exports'] = ['Türkiye']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/tr/address/building_number.js': [
      function(require, module, exports) {
        module['exports'] = ['###', '##', '#', '##a', '##b', '##c']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/tr/address/street_name.js': [
      function(require, module, exports) {
        module['exports'] = ['#{street_root}']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/tr/address/street_address.js': [
      function(require, module, exports) {
        module['exports'] = ['#{street_name} #{building_number}']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/tr/address/index.js': [
      function(require, module, exports) {
        var address = {}
        module['exports'] = address
        address.city = require('./city')
        address.street_root = require('./street_root')
        address.country = require('./country')
        address.postcode = require('./postcode')
        address.default_country = require('./default_country')
        address.building_number = require('./building_number')
        address.street_name = require('./street_name')
        address.street_address = require('./street_address')
      },
      {
        './city': '../node_modules/faker/lib/locales/tr/address/city.js',
        './street_root':
          '../node_modules/faker/lib/locales/tr/address/street_root.js',
        './country':
          '../node_modules/faker/lib/locales/tr/address/country.js',
        './postcode':
          '../node_modules/faker/lib/locales/tr/address/postcode.js',
        './default_country':
          '../node_modules/faker/lib/locales/tr/address/default_country.js',
        './building_number':
          '../node_modules/faker/lib/locales/tr/address/building_number.js',
        './street_name':
          '../node_modules/faker/lib/locales/tr/address/street_name.js',
        './street_address':
          '../node_modules/faker/lib/locales/tr/address/street_address.js',
      },
    ],
    '../node_modules/faker/lib/locales/tr/internet/domain_suffix.js': [
      function(require, module, exports) {
        module['exports'] = [
          'com.tr',
          'com',
          'biz',
          'info',
          'name',
          'gov.tr',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/tr/internet/index.js': [
      function(require, module, exports) {
        var internet = {}
        module['exports'] = internet
        internet.domain_suffix = require('./domain_suffix')
      },
      {
        './domain_suffix':
          '../node_modules/faker/lib/locales/tr/internet/domain_suffix.js',
      },
    ],
    '../node_modules/faker/lib/locales/tr/lorem/words.js': [
      function(require, module, exports) {
        module['exports'] = [
          'alias',
          'consequatur',
          'aut',
          'perferendis',
          'sit',
          'voluptatem',
          'accusantium',
          'doloremque',
          'aperiam',
          'eaque',
          'ipsa',
          'quae',
          'ab',
          'illo',
          'inventore',
          'veritatis',
          'et',
          'quasi',
          'architecto',
          'beatae',
          'vitae',
          'dicta',
          'sunt',
          'explicabo',
          'aspernatur',
          'aut',
          'odit',
          'aut',
          'fugit',
          'sed',
          'quia',
          'consequuntur',
          'magni',
          'dolores',
          'eos',
          'qui',
          'ratione',
          'voluptatem',
          'sequi',
          'nesciunt',
          'neque',
          'dolorem',
          'ipsum',
          'quia',
          'dolor',
          'sit',
          'amet',
          'consectetur',
          'adipisci',
          'velit',
          'sed',
          'quia',
          'non',
          'numquam',
          'eius',
          'modi',
          'tempora',
          'incidunt',
          'ut',
          'labore',
          'et',
          'dolore',
          'magnam',
          'aliquam',
          'quaerat',
          'voluptatem',
          'ut',
          'enim',
          'ad',
          'minima',
          'veniam',
          'quis',
          'nostrum',
          'exercitationem',
          'ullam',
          'corporis',
          'nemo',
          'enim',
          'ipsam',
          'voluptatem',
          'quia',
          'voluptas',
          'sit',
          'suscipit',
          'laboriosam',
          'nisi',
          'ut',
          'aliquid',
          'ex',
          'ea',
          'commodi',
          'consequatur',
          'quis',
          'autem',
          'vel',
          'eum',
          'iure',
          'reprehenderit',
          'qui',
          'in',
          'ea',
          'voluptate',
          'velit',
          'esse',
          'quam',
          'nihil',
          'molestiae',
          'et',
          'iusto',
          'odio',
          'dignissimos',
          'ducimus',
          'qui',
          'blanditiis',
          'praesentium',
          'laudantium',
          'totam',
          'rem',
          'voluptatum',
          'deleniti',
          'atque',
          'corrupti',
          'quos',
          'dolores',
          'et',
          'quas',
          'molestias',
          'excepturi',
          'sint',
          'occaecati',
          'cupiditate',
          'non',
          'provident',
          'sed',
          'ut',
          'perspiciatis',
          'unde',
          'omnis',
          'iste',
          'natus',
          'error',
          'similique',
          'sunt',
          'in',
          'culpa',
          'qui',
          'officia',
          'deserunt',
          'mollitia',
          'animi',
          'id',
          'est',
          'laborum',
          'et',
          'dolorum',
          'fuga',
          'et',
          'harum',
          'quidem',
          'rerum',
          'facilis',
          'est',
          'et',
          'expedita',
          'distinctio',
          'nam',
          'libero',
          'tempore',
          'cum',
          'soluta',
          'nobis',
          'est',
          'eligendi',
          'optio',
          'cumque',
          'nihil',
          'impedit',
          'quo',
          'porro',
          'quisquam',
          'est',
          'qui',
          'minus',
          'id',
          'quod',
          'maxime',
          'placeat',
          'facere',
          'possimus',
          'omnis',
          'voluptas',
          'assumenda',
          'est',
          'omnis',
          'dolor',
          'repellendus',
          'temporibus',
          'autem',
          'quibusdam',
          'et',
          'aut',
          'consequatur',
          'vel',
          'illum',
          'qui',
          'dolorem',
          'eum',
          'fugiat',
          'quo',
          'voluptas',
          'nulla',
          'pariatur',
          'at',
          'vero',
          'eos',
          'et',
          'accusamus',
          'officiis',
          'debitis',
          'aut',
          'rerum',
          'necessitatibus',
          'saepe',
          'eveniet',
          'ut',
          'et',
          'voluptates',
          'repudiandae',
          'sint',
          'et',
          'molestiae',
          'non',
          'recusandae',
          'itaque',
          'earum',
          'rerum',
          'hic',
          'tenetur',
          'a',
          'sapiente',
          'delectus',
          'ut',
          'aut',
          'reiciendis',
          'voluptatibus',
          'maiores',
          'doloribus',
          'asperiores',
          'repellat',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/tr/lorem/index.js': [
      function(require, module, exports) {
        var lorem = {}
        module['exports'] = lorem
        lorem.words = require('./words')
      },
      { './words': '../node_modules/faker/lib/locales/tr/lorem/words.js' },
    ],
    '../node_modules/faker/lib/locales/tr/phone_number/area_code.js': [
      function(require, module, exports) {
        module['exports'] = [
          '392',
          '510',
          '512',
          '522',
          '562',
          '564',
          '592',
          '594',
          '800',
          '811',
          '822',
          '850',
          '888',
          '898',
          '900',
          '322',
          '416',
          '272',
          '472',
          '382',
          '358',
          '312',
          '242',
          '478',
          '466',
          '256',
          '266',
          '378',
          '488',
          '458',
          '228',
          '426',
          '434',
          '374',
          '248',
          '224',
          '286',
          '376',
          '364',
          '258',
          '412',
          '380',
          '284',
          '424',
          '446',
          '442',
          '222',
          '342',
          '454',
          '456',
          '438',
          '326',
          '476',
          '246',
          '216',
          '212',
          '232',
          '344',
          '370',
          '338',
          '474',
          '366',
          '352',
          '318',
          '288',
          '386',
          '348',
          '262',
          '332',
          '274',
          '422',
          '236',
          '482',
          '324',
          '252',
          '436',
          '384',
          '388',
          '452',
          '328',
          '464',
          '264',
          '362',
          '484',
          '368',
          '346',
          '414',
          '486',
          '282',
          '356',
          '462',
          '428',
          '276',
          '432',
          '226',
          '354',
          '372',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/tr/phone_number/formats.js': [
      function(require, module, exports) {
        module['exports'] = ['+90-###-###-##-##', '+90-###-###-#-###']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/tr/phone_number/index.js': [
      function(require, module, exports) {
        var phone_number = {}
        module['exports'] = phone_number
        phone_number.area_code = require('./area_code')
        phone_number.formats = require('./formats')
      },
      {
        './area_code':
          '../node_modules/faker/lib/locales/tr/phone_number/area_code.js',
        './formats':
          '../node_modules/faker/lib/locales/tr/phone_number/formats.js',
      },
    ],
    '../node_modules/faker/lib/locales/tr/cell_phone/formats.js': [
      function(require, module, exports) {
        module['exports'] = [
          '+90-53#-###-##-##',
          '+90-54#-###-##-##',
          '+90-55#-###-##-##',
          '+90-50#-###-##-##',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/tr/cell_phone/index.js': [
      function(require, module, exports) {
        var cell_phone = {}
        module['exports'] = cell_phone
        cell_phone.formats = require('./formats')
      },
      {
        './formats':
          '../node_modules/faker/lib/locales/tr/cell_phone/formats.js',
      },
    ],
    '../node_modules/faker/lib/locales/tr/name/first_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Aba',
          'Abak',
          'Abaka',
          'Abakan',
          'Abakay',
          'Abar',
          'Abay',
          'Abı',
          'Abılay',
          'Abluç',
          'Abşar',
          'Açığ',
          'Açık',
          'Açuk',
          'Adalan',
          'Adaldı',
          'Adalmış',
          'Adar',
          'Adaş',
          'Adberilgen',
          'Adıgüzel',
          'Adık',
          'Adıkutlu',
          'Adıkutlutaş',
          'Adlı',
          'Adlıbeğ',
          'Adraman',
          'Adsız',
          'Afşar',
          'Afşın',
          'Ağabay',
          'Ağakağan',
          'Ağalak',
          'Ağlamış',
          'Ak',
          'Akaş',
          'Akata',
          'Akbaş',
          'Akbay',
          'Akboğa',
          'Akbörü',
          'Akbudak',
          'Akbuğra',
          'Akbulak',
          'Akça',
          'Akçakoca',
          'Akçora',
          'Akdemir',
          'Akdoğan',
          'Akı',
          'Akıbudak',
          'Akım',
          'Akın',
          'Akınçı',
          'Akkun',
          'Akkunlu',
          'Akkurt',
          'Akkuş',
          'Akpıra',
          'Aksungur',
          'Aktan',
          'Al',
          'Ala',
          'Alaban',
          'Alabörü',
          'Aladağ',
          'Aladoğan',
          'Alakurt',
          'Alayunt',
          'Alayuntlu',
          'Aldemir',
          'Aldıgerey',
          'Aldoğan',
          'Algu',
          'Alımga',
          'Alka',
          'Alkabölük',
          'Alkaevli',
          'Alkan',
          'Alkaşı',
          'Alkış',
          'Alp',
          'Alpagut',
          'Alpamış',
          'Alparsbeğ',
          'Alparslan',
          'Alpata',
          'Alpay',
          'Alpaya',
          'Alpaykağan',
          'Alpbamsı',
          'Alpbilge',
          'Alpdirek',
          'Alpdoğan',
          'Alper',
          'Alperen',
          'Alpertunga',
          'Alpgerey',
          'Alpış',
          'Alpilig',
          'Alpkara',
          'Alpkutlu',
          'Alpkülük',
          'Alpşalçı',
          'Alptegin',
          'Alptuğrul',
          'Alptunga',
          'Alpturan',
          'Alptutuk',
          'Alpuluğ',
          'Alpurungu',
          'Alpurungututuk',
          'Alpyörük',
          'Altan',
          'Altankağan',
          'Altankan',
          'Altay',
          'Altın',
          'Altınkağan',
          'Altınkan',
          'Altınoba',
          'Altıntamgan',
          'Altıntamgantarkan',
          'Altıntarkan',
          'Altıntay',
          'Altmışkara',
          'Altuga',
          'Amaç',
          'Amrak',
          'Amul',
          'Ançuk',
          'Andarıman',
          'Anıl',
          'Ant',
          'Apa',
          'Apak',
          'Apatarkan',
          'Aprançur',
          'Araboğa',
          'Arademir',
          'Aral',
          'Arbay',
          'Arbuz',
          'Arçuk',
          'Ardıç',
          'Argıl',
          'Argu',
          'Argun',
          'Arı',
          'Arıboğa',
          'Arık',
          'Arıkağan',
          'Arıkdoruk',
          'Arınç',
          'Arkın',
          'Arkış',
          'Armağan',
          'Arnaç',
          'Arpat',
          'Arsal',
          'Arsıl',
          'Arslan',
          'Arslanargun',
          'Arslanbörü',
          'Arslansungur',
          'Arslantegin',
          'Arslanyabgu',
          'Arşun',
          'Artıınal',
          'Artuk',
          'Artukaç',
          'Artut',
          'Aruk',
          'Asartegin',
          'Asığ',
          'Asrı',
          'Asuğ',
          'Aşan',
          'Aşanboğa',
          'Aşantuğrul',
          'Aşantudun',
          'Aşıkbulmuş',
          'Aşkın',
          'Aştaloğul',
          'Aşuk',
          'Ataç',
          'Atakağan',
          'Atakan',
          'Atalan',
          'Ataldı',
          'Atalmış',
          'Ataman',
          'Atasagun',
          'Atasu',
          'Atberilgen',
          'Atıgay',
          'Atıkutlu',
          'Atıkutlutaş',
          'Atıla',
          'Atılgan',
          'Atım',
          'Atımer',
          'Atış',
          'Atlı',
          'Atlıbeğ',
          'Atlıkağan',
          'Atmaca',
          'Atsız',
          'Atunçu',
          'Avar',
          'Avluç',
          'Avşar',
          'Ay',
          'Ayaçı',
          'Ayas',
          'Ayaş',
          'Ayaz',
          'Aybalta',
          'Ayban',
          'Aybars',
          'Aybeğ',
          'Aydarkağan',
          'Aydemir',
          'Aydın',
          'Aydınalp',
          'Aydoğan',
          'Aydoğdu',
          'Aydoğmuş',
          'Aygırak',
          'Ayıtmış',
          'Ayız',
          'Ayızdağ',
          'Aykağan',
          'Aykan',
          'Aykurt',
          'Ayluç',
          'Ayluçtarkan',
          'Ayma',
          'Ayruk',
          'Aysılığ',
          'Aytak',
          'Ayyıldız',
          'Azak',
          'Azban',
          'Azgan',
          'Azganaz',
          'Azıl',
          'Babır',
          'Babur',
          'Baçara',
          'Baççayman',
          'Baçman',
          'Badabul',
          'Badruk',
          'Badur',
          'Bağa',
          'Bağaalp',
          'Bağaışbara',
          'Bağan',
          'Bağaşatulu',
          'Bağatarkan',
          'Bağatengrikağan',
          'Bağatur',
          'Bağaturçigşi',
          'Bağaturgerey',
          'Bağaturipi',
          'Bağatursepi',
          'Bağış',
          'Bağtaş',
          'Bakağul',
          'Bakır',
          'Bakırsokum',
          'Baksı',
          'Bakşı',
          'Balaban',
          'Balaka',
          'Balakatay',
          'Balamır',
          'Balçar',
          'Baldu',
          'Balkık',
          'Balta',
          'Baltacı',
          'Baltar',
          'Baltır',
          'Baltur',
          'Bamsı',
          'Bangu',
          'Barak',
          'Baraktöre',
          'Baran',
          'Barbeğ',
          'Barboğa',
          'Barbol',
          'Barbulsun',
          'Barça',
          'Barçadoğdu',
          'Barçadoğmuş',
          'Barçadurdu',
          'Barçadurmuş',
          'Barçan',
          'Barçatoyun',
          'Bardıbay',
          'Bargan',
          'Barımtay',
          'Barın',
          'Barkan',
          'Barkdoğdu',
          'Barkdoğmuş',
          'Barkdurdu',
          'Barkdurmuş',
          'Barkın',
          'Barlas',
          'Barlıbay',
          'Barmaklak',
          'Barmaklı',
          'Barman',
          'Bars',
          'Barsbeğ',
          'Barsboğa',
          'Barsgan',
          'Barskan',
          'Barsurungu',
          'Bartu',
          'Basademir',
          'Basan',
          'Basanyalavaç',
          'Basar',
          'Basat',
          'Baskın',
          'Basmıl',
          'Bastı',
          'Bastuğrul',
          'Basu',
          'Basut',
          'Başak',
          'Başbuğ',
          'Başçı',
          'Başgan',
          'Başkırt',
          'Başkurt',
          'Baştar',
          'Batrak',
          'Batu',
          'Batuk',
          'Batur',
          'Baturalp',
          'Bay',
          'Bayançar',
          'Bayankağan',
          'Bayat',
          'Bayazıt',
          'Baybars',
          'Baybayık',
          'Baybiçen',
          'Bayboğa',
          'Baybora',
          'Baybüre',
          'Baydar',
          'Baydemir',
          'Baydur',
          'Bayık',
          'Bayınçur',
          'Bayındır',
          'Baykal',
          'Baykara',
          'Baykoca',
          'Baykuzu',
          'Baymünke',
          'Bayna',
          'Baynal',
          'Baypüre',
          'Bayrı',
          'Bayraç',
          'Bayrak',
          'Bayram',
          'Bayrın',
          'Bayruk',
          'Baysungur',
          'Baytara',
          'Baytaş',
          'Bayunçur',
          'Bayur',
          'Bayurku',
          'Bayutmuş',
          'Bayuttu',
          'Bazır',
          'Beçeapa',
          'Beçkem',
          'Beğ',
          'Beğarslan',
          'Beğbars',
          'Beğbilgeçikşin',
          'Beğboğa',
          'Beğçur',
          'Beğdemir',
          'Beğdilli',
          'Beğdurmuş',
          'Beğkulu',
          'Beğtaş',
          'Beğtegin',
          'Beğtüzün',
          'Begi',
          'Begil',
          'Begine',
          'Begitutuk',
          'Beglen',
          'Begni',
          'Bek',
          'Bekazıl',
          'Bekbekeç',
          'Bekeç',
          'Bekeçarslan',
          'Bekeçarslantegin',
          'Bekeçtegin',
          'Beker',
          'Beklemiş',
          'Bektür',
          'Belçir',
          'Belek',
          'Belgi',
          'Belgüc',
          'Beltir',
          'Bengi',
          'Bengü',
          'Benlidemir',
          'Berdibeğ',
          'Berendey',
          'Bergü',
          'Berginsenge',
          'Berk',
          'Berke',
          'Berkiş',
          'Berkyaruk',
          'Bermek',
          'Besentegin',
          'Betemir',
          'Beyizçi',
          'Beyrek',
          'Beyrem',
          'Bıçkı',
          'Bıçkıcı',
          'Bıdın',
          'Bıtaybıkı',
          'Bıtrı',
          'Biçek',
          'Bilge',
          'Bilgebayunçur',
          'Bilgebeğ',
          'Bilgeçikşin',
          'Bilgeışbara',
          'Bilgeışbaratamgan',
          'Bilgekağan',
          'Bilgekan',
          'Bilgekutluk',
          'Bilgekülüçur',
          'Bilgetaçam',
          'Bilgetamgacı',
          'Bilgetardu',
          'Bilgetegin',
          'Bilgetonyukuk',
          'Bilgez',
          'Bilgiç',
          'Bilgin',
          'Bilig',
          'Biligköngülsengün',
          'Bilik',
          'Binbeği',
          'Bindir',
          'Boğa',
          'Boğaç',
          'Boğaçuk',
          'Boldaz',
          'Bolmuş',
          'Bolsun',
          'Bolun',
          'Boncuk',
          'Bongul',
          'Bongulboğa',
          'Bora',
          'Boran',
          'Borçul',
          'Borlukçu',
          'Bornak',
          'Boyan',
          'Boyankulu',
          'Boylabağa',
          'Boylabağatarkan',
          'Boylakutlutarkan',
          'Bozan',
          'Bozbörü',
          'Bozdoğan',
          'Bozkurt',
          'Bozkuş',
          'Bozok',
          'Bögde',
          'Böge',
          'Bögü',
          'Bökde',
          'Bökde',
          'Böke',
          'Bölen',
          'Bölükbaşı',
          'Bönek',
          'Bönge',
          'Börü',
          'Börübars',
          'Börüsengün',
          'Börteçine',
          'Buçan',
          'Buçur',
          'Budağ',
          'Budak',
          'Budunlu',
          'Buğday',
          'Buğra',
          'Buğrakarakağan',
          'Bukak',
          'Bukaktutuk',
          'Bulaçapan',
          'Bulak',
          'Bulan',
          'Buldur',
          'Bulgak',
          'Bulmaz',
          'Bulmuş',
          'Buluç',
          'Buluğ',
          'Buluk',
          'Buluş',
          'Bulut',
          'Bumın',
          'Bunsuz',
          'Burçak',
          'Burguçan',
          'Burkay',
          'Burslan',
          'Burulday',
          'Burulgu',
          'Burunduk',
          'Buşulgan',
          'Butak',
          'Butuk',
          'Buyan',
          'Buyançuk',
          'Buyandemir',
          'Buyankara',
          'Buyat',
          'Buyraç',
          'Buyruç',
          'Buyruk',
          'Buzaç',
          'Buzaçtutuk',
          'Büdüs',
          'Büdüstudun',
          'Bügü',
          'Bügdüz',
          'Bügdüzemen',
          'Büge',
          'Büğübilge',
          'Bükdüz',
          'Büke',
          'Bükebuyraç',
          'Bükebuyruç',
          'Bükey',
          'Büktegin',
          'Büküşboğa',
          'Bümen',
          'Bünül',
          'Büre',
          'Bürgüt',
          'Bürkek',
          'Bürküt',
          'Bürlük',
          'Cebe',
          'Ceyhun',
          'Cılasun',
          'Çaba',
          'Çabdar',
          'Çablı',
          'Çabuş',
          'Çağan',
          'Çağatay',
          'Çağlar',
          'Çağlayan',
          'Çağrı',
          'Çağrıbeğ',
          'Çağrıtegin',
          'Çağru',
          'Çalapkulu',
          'Çankız',
          'Çemen',
          'Çemgen',
          'Çeykün',
          'Çıngır',
          'Çiçek',
          'Çiçem',
          'Çiğdem',
          'Çilenti',
          'Çimen',
          'Çobulmak',
          'Çocukbörü',
          'Çokramayul',
          'Çolman',
          'Çolpan',
          'Çölü',
          'Damla',
          'Deniz',
          'Dilek',
          'Diri',
          'Dizik',
          'Duru',
          'Dururbunsuz',
          'Duygu',
          'Ebin',
          'Ebkızı',
          'Ebren',
          'Edil',
          'Ediz',
          'Egemen',
          'Eğrim',
          'Ekeç',
          'Ekim',
          'Ekin',
          'Elkin',
          'Elti',
          'Engin',
          'Erdem',
          'Erdeni',
          'Erdeniözük',
          'Erdenikatun',
          'Erentüz',
          'Ergene',
          'Ergenekatun',
          'Erinç',
          'Erke',
          'Ermen',
          'Erten',
          'Ertenözük',
          'Esen',
          'Esenbike',
          'Eser',
          'Esin',
          'Etil',
          'Evin',
          'Eyiz',
          'Gelin',
          'Gelincik',
          'Gökbörü',
          'Gökçe',
          'Gökçegöl',
          'Gökçen',
          'Gökçiçek',
          'Gökşin',
          'Gönül',
          'Görün',
          'Gözde',
          'Gülegen',
          'Gülemen',
          'Güler',
          'Gülümser',
          'Gümüş',
          'Gün',
          'Günay',
          'Günçiçek',
          'Gündoğdu',
          'Gündoğmuş',
          'Güneş',
          'Günyaruk',
          'Gürbüz',
          'Güvercin',
          'Güzey',
          'Işığ',
          'Işık',
          'Işıl',
          'Işılay',
          'Ila',
          'Ilaçın',
          'Ilgın',
          'Inanç',
          'Irmak',
          'Isığ',
          'Isık',
          'Iyık',
          'Iyıktağ',
          'İdil',
          'İkeme',
          'İkiçitoyun',
          'İlbilge',
          'İldike',
          'İlgegü',
          'İmrem',
          'İnci',
          'İnç',
          'İrinç',
          'İrinçköl',
          'İrtiş',
          'İtil',
          'Kancı',
          'Kançı',
          'Kapgar',
          'Karaca',
          'Karaça',
          'Karak',
          'Kargılaç',
          'Karlıgaç',
          'Katun',
          'Katunkız',
          'Kayacık',
          'Kayaçık',
          'Kayça',
          'Kaynak',
          'Kazanç',
          'Kazkatun',
          'Kekik',
          'Keklik',
          'Kepez',
          'Kesme',
          'Keyken',
          'Kezlik',
          'Kımız',
          'Kımızın',
          'Kımızalma',
          'Kımızalmıla',
          'Kırçiçek',
          'Kırgavul',
          'Kırlangıç',
          'Kıvanç',
          'Kıvılcım',
          'Kızdurmuş',
          'Kızılalma',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/tr/name/last_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Abacı',
          'Abadan',
          'Aclan',
          'Adal',
          'Adan',
          'Adıvar',
          'Akal',
          'Akan',
          'Akar ',
          'Akay',
          'Akaydın',
          'Akbulut',
          'Akgül',
          'Akışık',
          'Akman',
          'Akyürek',
          'Akyüz',
          'Akşit',
          'Alnıaçık',
          'Alpuğan',
          'Alyanak',
          'Arıcan',
          'Arslanoğlu',
          'Atakol',
          'Atan',
          'Avan',
          'Ayaydın',
          'Aybar',
          'Aydan',
          'Aykaç',
          'Ayverdi',
          'Ağaoğlu',
          'Aşıkoğlu',
          'Babacan',
          'Babaoğlu',
          'Bademci',
          'Bakırcıoğlu',
          'Balaban',
          'Balcı',
          'Barbarosoğlu',
          'Baturalp',
          'Baykam',
          'Başoğlu',
          'Berberoğlu',
          'Beşerler',
          'Beşok',
          'Biçer',
          'Bolatlı',
          'Dalkıran',
          'Dağdaş',
          'Dağlaroğlu',
          'Demirbaş',
          'Demirel',
          'Denkel',
          'Dizdar ',
          'Doğan ',
          'Durak ',
          'Durmaz',
          'Duygulu',
          'Düşenkalkar',
          'Egeli',
          'Ekici',
          'Ekşioğlu',
          'Eliçin',
          'Elmastaşoğlu',
          'Elçiboğa',
          'Erbay',
          'Erberk',
          'Erbulak',
          'Erdoğan',
          'Erez',
          'Erginsoy',
          'Erkekli',
          'Eronat',
          'Ertepınar',
          'Ertürk',
          'Erçetin',
          'Evliyaoğlu',
          'Gönültaş',
          'Gümüşpala',
          'Günday',
          'Gürmen',
          'Hakyemez',
          'Hamzaoğlu',
          'Ilıcalı',
          'Kahveci',
          'Kaplangı',
          'Karabulut',
          'Karaböcek',
          'Karadaş',
          'Karaduman',
          'Karaer',
          'Kasapoğlu',
          'Kavaklıoğlu',
          'Kaya ',
          'Keseroğlu',
          'Keçeci',
          'Kılıççı',
          'Kıraç ',
          'Kocabıyık',
          'Korol',
          'Koyuncu',
          'Koç',
          'Koçoğlu',
          'Koçyiğit',
          'Kuday',
          'Kulaksızoğlu',
          'Kumcuoğlu',
          'Kunt',
          'Kunter',
          'Kurutluoğlu',
          'Kutlay',
          'Kuzucu',
          'Körmükçü',
          'Köybaşı',
          'Köylüoğlu',
          'Küçükler',
          'Limoncuoğlu',
          'Mayhoş',
          'Menemencioğlu',
          'Mertoğlu',
          'Nalbantoğlu',
          'Nebioğlu',
          'Numanoğlu',
          'Okumuş',
          'Okur',
          'Oraloğlu',
          'Orbay',
          'Ozansoy',
          'Paksüt',
          'Pekkan',
          'Pektemek',
          'Polat',
          'Poyrazoğlu',
          'Poçan',
          'Sadıklar',
          'Samancı',
          'Sandalcı',
          'Sarıoğlu',
          'Saygıner',
          'Sepetçi',
          'Sezek',
          'Sinanoğlu',
          'Solmaz',
          'Sözeri',
          'Süleymanoğlu',
          'Tahincioğlu',
          'Tanrıkulu',
          'Tazegül',
          'Taşlı',
          'Taşçı',
          'Tekand',
          'Tekelioğlu',
          'Tokatlıoğlu',
          'Tokgöz',
          'Topaloğlu',
          'Topçuoğlu',
          'Toraman',
          'Tunaboylu',
          'Tunçeri',
          'Tuğlu',
          'Tuğluk',
          'Türkdoğan',
          'Türkyılmaz',
          'Tütüncü',
          'Tüzün',
          'Uca',
          'Uluhan',
          'Velioğlu',
          'Yalçın',
          'Yazıcı',
          'Yetkiner',
          'Yeşilkaya',
          'Yıldırım ',
          'Yıldızoğlu',
          'Yılmazer',
          'Yorulmaz',
          'Çamdalı',
          'Çapanoğlu',
          'Çatalbaş',
          'Çağıran',
          'Çetin',
          'Çetiner',
          'Çevik',
          'Çörekçi',
          'Önür',
          'Örge',
          'Öymen',
          'Özberk',
          'Özbey',
          'Özbir',
          'Özdenak',
          'Özdoğan',
          'Özgörkey',
          'Özkara',
          'Özkök ',
          'Öztonga',
          'Öztuna',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/tr/name/prefix.js': [
      function(require, module, exports) {
        module['exports'] = ['Bay', 'Bayan', 'Dr.', 'Prof. Dr.']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/tr/name/name.js': [
      function(require, module, exports) {
        module['exports'] = [
          '#{prefix} #{first_name} #{last_name}',
          '#{first_name} #{last_name}',
          '#{first_name} #{last_name}',
          '#{first_name} #{last_name}',
          '#{first_name} #{last_name}',
          '#{first_name} #{last_name}',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/tr/name/index.js': [
      function(require, module, exports) {
        var name = {}
        module['exports'] = name
        name.first_name = require('./first_name')
        name.last_name = require('./last_name')
        name.prefix = require('./prefix')
        name.name = require('./name')
      },
      {
        './first_name':
          '../node_modules/faker/lib/locales/tr/name/first_name.js',
        './last_name':
          '../node_modules/faker/lib/locales/tr/name/last_name.js',
        './prefix': '../node_modules/faker/lib/locales/tr/name/prefix.js',
        './name': '../node_modules/faker/lib/locales/tr/name/name.js',
      },
    ],
    '../node_modules/faker/lib/locales/tr/index.js': [
      function(require, module, exports) {
        var tr = {}
        module['exports'] = tr
        tr.title = 'Turkish'
        tr.address = require('./address')
        tr.internet = require('./internet')
        tr.lorem = require('./lorem')
        tr.phone_number = require('./phone_number')
        tr.cell_phone = require('./cell_phone')
        tr.name = require('./name')
      },
      {
        './address':
          '../node_modules/faker/lib/locales/tr/address/index.js',
        './internet':
          '../node_modules/faker/lib/locales/tr/internet/index.js',
        './lorem': '../node_modules/faker/lib/locales/tr/lorem/index.js',
        './phone_number':
          '../node_modules/faker/lib/locales/tr/phone_number/index.js',
        './cell_phone':
          '../node_modules/faker/lib/locales/tr/cell_phone/index.js',
        './name': '../node_modules/faker/lib/locales/tr/name/index.js',
      },
    ],
    '../node_modules/faker/lib/locales/uk/address/country.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Австралія',
          'Австрія',
          'Азербайджан',
          'Албанія',
          'Алжир',
          'Ангола',
          'Андорра',
          'Антигуа і Барбуда',
          'Аргентина',
          'Афганістан',
          'Багамські Острови',
          'Бангладеш',
          'Барбадос',
          'Бахрейн',
          'Беліз',
          'Бельгія',
          'Бенін',
          'Білорусь',
          'Болгарія',
          'Болівія',
          'Боснія і Герцеговина',
          'Ботсвана',
          'Бразилія',
          'Бруней',
          'Буркіна-Фасо',
          'Бурунді',
          'Бутан',
          'В’єтнам',
          'Вануату',
          'Ватикан',
          'Велика Британія',
          'Венесуела',
          'Вірменія',
          'Габон',
          'Гаїті',
          'Гайана',
          'Гамбія',
          'Гана',
          'Гватемала',
          'Гвінея',
          'Гвінея-Бісау',
          'Гондурас',
          'Гренада',
          'Греція',
          'Грузія',
          'Данія',
          'Демократична Республіка Конго',
          'Джибуті',
          'Домініка',
          'Домініканська Республіка',
          'Еквадор',
          'Екваторіальна Гвінея',
          'Еритрея',
          'Естонія',
          'Ефіопія',
          'Єгипет',
          'Ємен',
          'Замбія',
          'Зімбабве',
          'Ізраїль',
          'Індія',
          'Індонезія',
          'Ірак',
          'Іран',
          'Ірландія',
          'Ісландія',
          'Іспанія',
          'Італія',
          'Йорданія',
          'Кабо-Верде',
          'Казахстан',
          'Камбоджа',
          'Камерун',
          'Канада',
          'Катар',
          'Кенія',
          'Киргизстан',
          'Китай',
          'Кіпр',
          'Кірибаті',
          'Колумбія',
          'Коморські Острови',
          'Конго',
          'Коста-Рика',
          'Кот-д’Івуар',
          'Куба',
          'Кувейт',
          'Лаос',
          'Латвія',
          'Лесото',
          'Литва',
          'Ліберія',
          'Ліван',
          'Лівія',
          'Ліхтенштейн',
          'Люксембург',
          'Маврикій',
          'Мавританія',
          'Мадаґаскар',
          'Македонія',
          'Малаві',
          'Малайзія',
          'Малі',
          'Мальдіви',
          'Мальта',
          'Марокко',
          'Маршаллові Острови',
          'Мексика',
          'Мозамбік',
          'Молдова',
          'Монако',
          'Монголія',
          'Намібія',
          'Науру',
          'Непал',
          'Нігер',
          'Нігерія',
          'Нідерланди',
          'Нікарагуа',
          'Німеччина',
          'Нова Зеландія',
          'Норвегія',
          'Об’єднані Арабські Емірати',
          'Оман',
          'Пакистан',
          'Палау',
          'Панама',
          'Папуа-Нова Гвінея',
          'Парагвай',
          'Перу',
          'Південна Корея',
          'Південний Судан',
          'Південно-Африканська Республіка',
          'Північна Корея',
          'Польща',
          'Португалія',
          'Російська Федерація',
          'Руанда',
          'Румунія',
          'Сальвадор',
          'Самоа',
          'Сан-Марино',
          'Сан-Томе і Принсіпі',
          'Саудівська Аравія',
          'Свазіленд',
          'Сейшельські Острови',
          'Сенеґал',
          'Сент-Вінсент і Гренадини',
          'Сент-Кітс і Невіс',
          'Сент-Люсія',
          'Сербія',
          'Сирія',
          'Сінгапур',
          'Словаччина',
          'Словенія',
          'Соломонові Острови',
          'Сомалі',
          'Судан',
          'Суринам',
          'Східний Тимор',
          'США',
          'Сьєрра-Леоне',
          'Таджикистан',
          'Таїланд',
          'Танзанія',
          'Того',
          'Тонга',
          'Тринідад і Тобаго',
          'Тувалу',
          'Туніс',
          'Туреччина',
          'Туркменістан',
          'Уганда',
          'Угорщина',
          'Узбекистан',
          'Україна',
          'Уругвай',
          'Федеративні Штати Мікронезії',
          'Фіджі',
          'Філіппіни',
          'Фінляндія',
          'Франція',
          'Хорватія',
          'Центральноафриканська Республіка',
          'Чад',
          'Чехія',
          'Чилі',
          'Чорногорія',
          'Швейцарія',
          'Швеція',
          'Шрі-Ланка',
          'Ямайка',
          'Японія',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/uk/address/building_number.js': [
      function(require, module, exports) {
        module['exports'] = ['#', '##', '###']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/uk/address/street_prefix.js': [
      function(require, module, exports) {
        module['exports'] = [
          'вул.',
          'вулиця',
          'пр.',
          'проспект',
          'пл.',
          'площа',
          'пров.',
          'провулок',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/uk/address/street_suffix.js': [
      function(require, module, exports) {
        module['exports'] = ['майдан']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/uk/address/secondary_address.js': [
      function(require, module, exports) {
        module['exports'] = ['кв. ###']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/uk/address/postcode.js': [
      function(require, module, exports) {
        module['exports'] = ['#####']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/uk/address/state.js': [
      function(require, module, exports) {
        module['exports'] = [
          'АР Крим',
          'Вінницька область',
          'Волинська область',
          'Дніпропетровська область',
          'Донецька область',
          'Житомирська область',
          'Закарпатська область',
          'Запорізька область',
          'Івано-Франківська область',
          'Київська область',
          'Кіровоградська область',
          'Луганська область',
          'Львівська область',
          'Миколаївська область',
          'Одеська область',
          'Полтавська область',
          'Рівненська область',
          'Сумська область',
          'Тернопільська область',
          'Харківська область',
          'Херсонська область',
          'Хмельницька область',
          'Черкаська область',
          'Чернівецька область',
          'Чернігівська область',
          'Київ',
          'Севастополь',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/uk/address/street_title.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Зелена',
          'Молодіжна',
          'Городоцька',
          'Стрийська',
          'Вузька',
          'Нижанківського',
          'Староміська',
          'Ліста',
          'Вічева',
          'Брюховичів',
          'Винників',
          'Рудного',
          'Коліївщини',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/uk/address/city_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Алчевськ',
          'Артемівськ',
          'Бердичів',
          'Бердянськ',
          'Біла Церква',
          'Бровари',
          'Вінниця',
          'Горлівка',
          'Дніпродзержинськ',
          'Дніпропетровськ',
          'Донецьк',
          'Євпаторія',
          'Єнакієве',
          'Житомир',
          'Запоріжжя',
          'Івано-Франківськ',
          'Ізмаїл',
          'Кам’янець-Подільський',
          'Керч',
          'Київ',
          'Кіровоград',
          'Конотоп',
          'Краматорськ',
          'Красний Луч',
          'Кременчук',
          'Кривий Ріг',
          'Лисичанськ',
          'Луганськ',
          'Луцьк',
          'Львів',
          'Макіївка',
          'Маріуполь',
          'Мелітополь',
          'Миколаїв',
          'Мукачеве',
          'Нікополь',
          'Одеса',
          'Олександрія',
          'Павлоград',
          'Полтава',
          'Рівне',
          'Севастополь',
          'Сєвєродонецьк',
          'Сімферополь',
          'Слов’янськ',
          'Суми',
          'Тернопіль',
          'Ужгород',
          'Умань',
          'Харків',
          'Херсон',
          'Хмельницький',
          'Черкаси',
          'Чернівці',
          'Чернігів',
          'Шостка',
          'Ялта',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/uk/address/city.js': [
      function(require, module, exports) {
        module['exports'] = [
          '#{city_name}',
          '#{city_prefix} #{Name.male_first_name}',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/uk/address/city_prefix.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Південний',
          'Північний',
          'Східний',
          'Західний',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/uk/address/city_suffix.js': [
      function(require, module, exports) {
        module['exports'] = ['град']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/uk/address/street_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          '#{street_prefix} #{Address.street_title}',
          '#{Address.street_title} #{street_suffix}',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/uk/address/street_address.js': [
      function(require, module, exports) {
        module['exports'] = ['#{street_name}, #{building_number}']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/uk/address/default_country.js': [
      function(require, module, exports) {
        module['exports'] = ['Україна']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/uk/address/index.js': [
      function(require, module, exports) {
        var address = {}
        module['exports'] = address
        address.country = require('./country')
        address.building_number = require('./building_number')
        address.street_prefix = require('./street_prefix')
        address.street_suffix = require('./street_suffix')
        address.secondary_address = require('./secondary_address')
        address.postcode = require('./postcode')
        address.state = require('./state')
        address.street_title = require('./street_title')
        address.city_name = require('./city_name')
        address.city = require('./city')
        address.city_prefix = require('./city_prefix')
        address.city_suffix = require('./city_suffix')
        address.street_name = require('./street_name')
        address.street_address = require('./street_address')
        address.default_country = require('./default_country')
      },
      {
        './country':
          '../node_modules/faker/lib/locales/uk/address/country.js',
        './building_number':
          '../node_modules/faker/lib/locales/uk/address/building_number.js',
        './street_prefix':
          '../node_modules/faker/lib/locales/uk/address/street_prefix.js',
        './street_suffix':
          '../node_modules/faker/lib/locales/uk/address/street_suffix.js',
        './secondary_address':
          '../node_modules/faker/lib/locales/uk/address/secondary_address.js',
        './postcode':
          '../node_modules/faker/lib/locales/uk/address/postcode.js',
        './state': '../node_modules/faker/lib/locales/uk/address/state.js',
        './street_title':
          '../node_modules/faker/lib/locales/uk/address/street_title.js',
        './city_name':
          '../node_modules/faker/lib/locales/uk/address/city_name.js',
        './city': '../node_modules/faker/lib/locales/uk/address/city.js',
        './city_prefix':
          '../node_modules/faker/lib/locales/uk/address/city_prefix.js',
        './city_suffix':
          '../node_modules/faker/lib/locales/uk/address/city_suffix.js',
        './street_name':
          '../node_modules/faker/lib/locales/uk/address/street_name.js',
        './street_address':
          '../node_modules/faker/lib/locales/uk/address/street_address.js',
        './default_country':
          '../node_modules/faker/lib/locales/uk/address/default_country.js',
      },
    ],
    '../node_modules/faker/lib/locales/uk/company/prefix.js': [
      function(require, module, exports) {
        module['exports'] = [
          'ТОВ',
          'ПАТ',
          'ПрАТ',
          'ТДВ',
          'КТ',
          'ПТ',
          'ДП',
          'ФОП',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/uk/company/suffix.js': [
      function(require, module, exports) {
        module['exports'] = ['Постач', 'Торг', 'Пром', 'Трейд', 'Збут']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/uk/company/name.js': [
      function(require, module, exports) {
        module['exports'] = [
          '#{prefix} #{Name.female_first_name}',
          '#{prefix} #{Name.male_first_name}',
          '#{prefix} #{Name.male_last_name}',
          '#{prefix} #{suffix}#{suffix}',
          '#{prefix} #{suffix}#{suffix}#{suffix}',
          '#{prefix} #{Address.city_name}#{suffix}',
          '#{prefix} #{Address.city_name}#{suffix}#{suffix}',
          '#{prefix} #{Address.city_name}#{suffix}#{suffix}#{suffix}',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/uk/company/index.js': [
      function(require, module, exports) {
        var company = {}
        module['exports'] = company
        company.prefix = require('./prefix')
        company.suffix = require('./suffix')
        company.name = require('./name')
      },
      {
        './prefix':
          '../node_modules/faker/lib/locales/uk/company/prefix.js',
        './suffix':
          '../node_modules/faker/lib/locales/uk/company/suffix.js',
        './name': '../node_modules/faker/lib/locales/uk/company/name.js',
      },
    ],
    '../node_modules/faker/lib/locales/uk/internet/free_email.js': [
      function(require, module, exports) {
        module['exports'] = [
          'ukr.net',
          'ex.ua',
          'e-mail.ua',
          'i.ua',
          'meta.ua',
          'yandex.ua',
          'gmail.com',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/uk/internet/domain_suffix.js': [
      function(require, module, exports) {
        module['exports'] = [
          'cherkassy.ua',
          'cherkasy.ua',
          'ck.ua',
          'cn.ua',
          'com.ua',
          'crimea.ua',
          'cv.ua',
          'dn.ua',
          'dnepropetrovsk.ua',
          'dnipropetrovsk.ua',
          'donetsk.ua',
          'dp.ua',
          'if.ua',
          'in.ua',
          'ivano-frankivsk.ua',
          'kh.ua',
          'kharkiv.ua',
          'kharkov.ua',
          'kherson.ua',
          'khmelnitskiy.ua',
          'kiev.ua',
          'kirovograd.ua',
          'km.ua',
          'kr.ua',
          'ks.ua',
          'lg.ua',
          'lt.ua',
          'lugansk.ua',
          'lutsk.ua',
          'lutsk.net',
          'lviv.ua',
          'mk.ua',
          'net.ua',
          'nikolaev.ua',
          'od.ua',
          'odessa.ua',
          'org.ua',
          'pl.ua',
          'pl.ua',
          'poltava.ua',
          'rovno.ua',
          'rv.ua',
          'sebastopol.ua',
          'sm.ua',
          'sumy.ua',
          'te.ua',
          'ternopil.ua',
          'ua',
          'uz.ua',
          'uzhgorod.ua',
          'vinnica.ua',
          'vn.ua',
          'volyn.net',
          'volyn.ua',
          'yalta.ua',
          'zaporizhzhe.ua',
          'zhitomir.ua',
          'zp.ua',
          'zt.ua',
          'укр',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/uk/internet/index.js': [
      function(require, module, exports) {
        var internet = {}
        module['exports'] = internet
        internet.free_email = require('./free_email')
        internet.domain_suffix = require('./domain_suffix')
      },
      {
        './free_email':
          '../node_modules/faker/lib/locales/uk/internet/free_email.js',
        './domain_suffix':
          '../node_modules/faker/lib/locales/uk/internet/domain_suffix.js',
      },
    ],
    '../node_modules/faker/lib/locales/uk/name/male_first_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Августин',
          'Аврелій',
          'Адам',
          'Адріян',
          'Азарій',
          'Алевтин',
          'Альберт',
          'Анастас',
          'Анастасій',
          'Анатолій',
          'Андрій',
          'Антін',
          'Антон',
          'Антоній',
          'Аркадій',
          'Арсен',
          'Арсеній',
          'Артем',
          'Архип',
          'Аскольд',
          'Афанасій',
          'Біломир',
          'Білослав',
          'Богдан',
          'Божемир',
          'Божен',
          'Болеслав',
          'Боримир',
          'Боримисл',
          'Борис',
          'Борислав',
          'Братимир',
          'Братислав',
          'Братомил',
          'Братослав',
          'Брячислав',
          'Будимир',
          'Буйтур',
          'Буревіст',
          'В’ячеслав',
          'Вадим',
          'Валентин',
          'Валерій',
          'Василь',
          'Велемир',
          'Віктор',
          'Віталій',
          'Влад',
          'Владислав',
          'Володимир',
          'Володислав',
          'Всевлад',
          'Всеволод',
          'Всеслав',
          'Гаврило',
          'Гарнослав',
          'Геннадій',
          'Георгій',
          'Герасим',
          'Гліб',
          'Гнат',
          'Гордій',
          'Горимир',
          'Горислав',
          'Градимир',
          'Григорій',
          'Далемир',
          'Данило',
          'Дарій',
          'Даромир',
          'Денис',
          'Дмитро',
          'Добромир',
          'Добромисл',
          'Доброслав',
          'Євген',
          'Єремій',
          'Захар',
          'Захарій',
          'Зборислав',
          'Звенигор',
          'Звенимир',
          'Звенислав',
          'Земислав',
          'Зеновій',
          'Зиновій',
          'Злат',
          'Златомир',
          'Зоремир',
          'Зореслав',
          'Зорян',
          'Іван',
          'Ігор',
          'Ізяслав',
          'Ілля',
          'Кий',
          'Корнелій',
          'Корнилій',
          'Корнило',
          'Корній',
          'Костянтин',
          'Кузьма',
          'Лаврентій',
          'Лаврін',
          'Лад',
          'Ладислав',
          'Ладо',
          'Ладомир',
          'Левко',
          'Листвич',
          'Лук’ян',
          'Любодар',
          'Любозар',
          'Любомир',
          'Макар',
          'Максим',
          'Мар’ян',
          'Маркіян',
          'Марко',
          'Матвій',
          'Мечислав',
          'Микита',
          'Микола',
          'Мирон',
          'Мирослав',
          'Михайло',
          'Мстислав',
          'Мусій',
          'Назар',
          'Назарій',
          'Натан',
          'Немир',
          'Нестор',
          'Олег',
          'Олександр',
          'Олексій',
          'Олелько',
          'Олесь',
          'Омелян',
          'Орест',
          'Орхип',
          'Остап',
          'Охрім',
          'Павло',
          'Панас',
          'Пантелеймон',
          'Петро',
          'Пилип',
          'Подолян',
          'Потап',
          'Радим',
          'Радимир',
          'Ратибор',
          'Ратимир',
          'Родіон',
          'Родослав',
          'Роксолан',
          'Роман',
          'Ростислав',
          'Руслан',
          'Святополк',
          'Святослав',
          'Семибор',
          'Сергій',
          'Синьоок',
          'Славолюб',
          'Славомир',
          'Славута',
          'Сніжан',
          'Сологуб',
          'Станіслав',
          'Степан',
          'Стефаній',
          'Стожар',
          'Тарас',
          'Тиміш',
          'Тимофій',
          'Тихон',
          'Тур',
          'Устим',
          'Хвалимир',
          'Хорив',
          'Чорнота',
          'Щастислав',
          'Щек',
          'Юліан',
          'Юрій',
          'Юхим',
          'Ян',
          'Ярема',
          'Яровид',
          'Яромил',
          'Яромир',
          'Ярополк',
          'Ярослав',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/uk/name/male_middle_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Адамович',
          'Азарович',
          'Алевтинович',
          'Альбертович',
          'Анастасович',
          'Анатолійович',
          'Андрійович',
          'Антонович',
          'Аркадійович',
          'Арсенійович',
          'Арсенович',
          'Артемович',
          'Архипович',
          'Аскольдович',
          'Афанасійович',
          'Білославович',
          'Богданович',
          'Божемирович',
          'Боженович',
          'Болеславович',
          'Боримирович',
          'Борисович',
          'Бориславович',
          'Братиславович',
          'В’ячеславович',
          'Вадимович',
          'Валентинович',
          'Валерійович',
          'Васильович',
          'Вікторович',
          'Віталійович',
          'Владиславович',
          'Володимирович',
          'Всеволодович',
          'Всеславович',
          'Гаврилович',
          'Герасимович',
          'Георгійович',
          'Гнатович',
          'Гордійович',
          'Григорійович',
          'Данилович',
          'Даромирович',
          'Денисович',
          'Дмитрович',
          'Добромирович',
          'Доброславович',
          'Євгенович',
          'Захарович',
          'Захарійович',
          'Збориславович',
          'Звенимирович',
          'Звениславович',
          'Зеновійович',
          'Зиновійович',
          'Златомирович',
          'Зореславович',
          'Іванович',
          'Ігорович',
          'Ізяславович',
          'Корнелійович',
          'Корнилович',
          'Корнійович',
          'Костянтинович',
          'Лаврентійович',
          'Любомирович',
          'Макарович',
          'Максимович',
          'Маркович',
          'Маркіянович',
          'Матвійович',
          'Мечиславович',
          'Микитович',
          'Миколайович',
          'Миронович',
          'Мирославович',
          'Михайлович',
          'Мстиславович',
          'Назарович',
          'Назарійович',
          'Натанович',
          'Немирович',
          'Несторович',
          'Олегович',
          'Олександрович',
          'Олексійович',
          'Олелькович',
          'Омелянович',
          'Орестович',
          'Орхипович',
          'Остапович',
          'Охрімович',
          'Павлович',
          'Панасович',
          'Пантелеймонович',
          'Петрович',
          'Пилипович',
          'Радимирович',
          'Радимович',
          'Родіонович',
          'Романович',
          'Ростиславович',
          'Русланович',
          'Святославович',
          'Сергійович',
          'Славутович',
          'Станіславович',
          'Степанович',
          'Стефанович',
          'Тарасович',
          'Тимофійович',
          'Тихонович',
          'Устимович',
          'Юрійович',
          'Юхимович',
          'Ярославович',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/uk/name/male_last_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Андрухович',
          'Бабух',
          'Балабан',
          'Балабух',
          'Балакун',
          'Балицький',
          'Бамбула',
          'Бандера',
          'Барановський',
          'Бачей',
          'Башук',
          'Бердник',
          'Білич',
          'Бондаренко',
          'Борецький',
          'Боровський',
          'Борочко',
          'Боярчук',
          'Брицький',
          'Бурмило',
          'Бутько',
          'Василин',
          'Василишин',
          'Васильківський',
          'Вергун',
          'Вередун',
          'Верещук',
          'Витребенько',
          'Вітряк',
          'Волощук',
          'Гайдук',
          'Гайовий',
          'Гайчук',
          'Галаєнко',
          'Галатей',
          'Галаціон',
          'Гаман',
          'Гамула',
          'Ганич',
          'Гарай',
          'Гарун',
          'Гладківський',
          'Гладух',
          'Глинський',
          'Гнатишин',
          'Гойко',
          'Головець',
          'Горбач',
          'Гордійчук',
          'Горовий',
          'Городоцький',
          'Гречко',
          'Григоришин',
          'Гриневецький',
          'Гриневський',
          'Гришко',
          'Громико',
          'Данилишин',
          'Данилко',
          'Демків',
          'Демчишин',
          'Дзюб’як',
          'Дзюба',
          'Дідух',
          'Дмитришин',
          'Дмитрук',
          'Довгалевський',
          'Дурдинець',
          'Євенко',
          'Євпак',
          'Ємець',
          'Єрмак',
          'Забіла',
          'Зварич',
          'Зінкевич',
          'Зленко',
          'Іванишин',
          'Іванів',
          'Іванців',
          'Калач',
          'Кандиба',
          'Карпух',
          'Каськів',
          'Кивач',
          'Коваленко',
          'Ковальський',
          'Коломієць',
          'Коман',
          'Компанієць',
          'Кононець',
          'Кордун',
          'Корецький',
          'Корнїйчук',
          'Коров’як',
          'Коцюбинський',
          'Кулинич',
          'Кульчицький',
          'Лагойда',
          'Лазірко',
          'Лановий',
          'Латаний',
          'Латанський',
          'Лахман',
          'Левадовський',
          'Ликович',
          'Линдик',
          'Ліхно',
          'Лобачевський',
          'Ломовий',
          'Луговий',
          'Луцький',
          'Луцьків',
          'Лученко',
          'Лучко',
          'Лютий',
          'Лящук',
          'Магера',
          'Мазайло',
          'Мазило',
          'Мазун',
          'Майборода',
          'Майстренко',
          'Маковецький',
          'Малкович',
          'Мамій',
          'Маринич',
          'Марієвський',
          'Марків',
          'Махно',
          'Миклашевський',
          'Миклухо',
          'Милославський',
          'Михайлюк',
          'Міняйло',
          'Могилевський',
          'Москаль',
          'Москалюк',
          'Мотрієнко',
          'Негода',
          'Ногачевський',
          'Опенько',
          'Осадко',
          'Павленко',
          'Павлишин',
          'Павлів',
          'Пагутяк',
          'Паламарчук',
          'Палій',
          'Паращук',
          'Пасічник',
          'Пендик',
          'Петик',
          'Петлюра',
          'Петренко',
          'Петрин',
          'Петришин',
          'Петрів',
          'Плаксій',
          'Погиба',
          'Поліщук',
          'Пономарів',
          'Поривай',
          'Поривайло',
          'Потебенько',
          'Потоцький',
          'Пригода',
          'Приймак',
          'Притула',
          'Прядун',
          'Розпутній',
          'Романишин',
          'Романів',
          'Ромей',
          'Роменець',
          'Ромочко',
          'Савицький',
          'Саєнко',
          'Свидригайло',
          'Семеночко',
          'Семещук',
          'Сердюк',
          'Силецький',
          'Сідлецький',
          'Сідляк',
          'Сірко',
          'Скиба',
          'Скоропадський',
          'Слободян',
          'Сосюра',
          'Сплюх',
          'Спотикач',
          'Стахів',
          'Степанець',
          'Стецьків',
          'Стигайло',
          'Сторожук',
          'Сторчак',
          'Стоян',
          'Сучак',
          'Сушко',
          'Тарасюк',
          'Тиндарей',
          'Ткаченко',
          'Третяк',
          'Троян',
          'Трублаєвський',
          'Трясило',
          'Трясун',
          'Уманець',
          'Унич',
          'Усич',
          'Федоришин',
          'Хитрово',
          'Цимбалістий',
          'Цушко',
          'Червоній',
          'Шамрило',
          'Шевченко',
          'Шестак',
          'Шиндарей',
          'Шиян',
          'Шкараба',
          'Шудрик',
          'Шумило',
          'Шупик',
          'Шухевич',
          'Щербак',
          'Юрчишин',
          'Юхно',
          'Ющик',
          'Ющук',
          'Яворівський',
          'Яловий',
          'Ялюк',
          'Янюк',
          'Ярмак',
          'Яцишин',
          'Яцьків',
          'Ящук',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/uk/name/female_first_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Аврелія',
          'Аврора',
          'Агапія',
          'Агата',
          'Агафія',
          'Агнеса',
          'Агнія',
          'Агрипина',
          'Ада',
          'Аделаїда',
          'Аделіна',
          'Адріана',
          'Азалія',
          'Алевтина',
          'Аліна',
          'Алла',
          'Альбіна',
          'Альвіна',
          'Анастасія',
          'Анастасія',
          'Анатолія',
          'Ангеліна',
          'Анжела',
          'Анна',
          'Антонида',
          'Антоніна',
          'Антонія',
          'Анфіса',
          'Аполлінарія',
          'Аполлонія',
          'Аркадія',
          'Артемія',
          'Афанасія',
          'Білослава',
          'Біляна',
          'Благовіста',
          'Богдана',
          'Богуслава',
          'Божена',
          'Болеслава',
          'Борислава',
          'Броніслава',
          'В’ячеслава',
          'Валентина',
          'Валерія',
          'Варвара',
          'Василина',
          'Вікторія',
          'Вілена',
          'Віленіна',
          'Віліна',
          'Віола',
          'Віолетта',
          'Віра',
          'Віргінія',
          'Віта',
          'Віталіна',
          'Влада',
          'Владислава',
          'Власта',
          'Всеслава',
          'Галина',
          'Ганна',
          'Гелена',
          'Далеслава',
          'Дана',
          'Дарина',
          'Дарислава',
          'Діана',
          'Діяна',
          'Добринка',
          'Добромила',
          'Добромира',
          'Добромисла',
          'Доброслава',
          'Долеслава',
          'Доляна',
          'Жанна',
          'Жозефіна',
          'Забава',
          'Звенислава',
          'Зінаїда',
          'Злата',
          'Зореслава',
          'Зорина',
          'Зоряна',
          'Зоя',
          'Іванна',
          'Ілона',
          'Інна',
          'Іннеса',
          'Ірина',
          'Ірма',
          'Калина',
          'Каріна',
          'Катерина',
          'Квітка',
          'Квітослава',
          'Клавдія',
          'Крентта',
          'Ксенія',
          'Купава',
          'Лада',
          'Лариса',
          'Леся',
          'Ликера',
          'Лідія',
          'Лілія',
          'Любава',
          'Любислава',
          'Любов',
          'Любомила',
          'Любомира',
          'Люборада',
          'Любослава',
          'Людмила',
          'Людомила',
          'Майя',
          'Мальва',
          'Мар’яна',
          'Марина',
          'Марічка',
          'Марія',
          'Марта',
          'Меланія',
          'Мечислава',
          'Милодара',
          'Милослава',
          'Мирослава',
          'Мілана',
          'Мокрина',
          'Мотря',
          'Мстислава',
          'Надія',
          'Наталія',
          'Неля',
          'Немира',
          'Ніна',
          'Огняна',
          'Оксана',
          'Олександра',
          'Олена',
          'Олеся',
          'Ольга',
          'Ореста',
          'Орина',
          'Орислава',
          'Орися',
          'Оріяна',
          'Павліна',
          'Палажка',
          'Пелагея',
          'Пелагія',
          'Поліна',
          'Поляна',
          'Потішана',
          'Радміла',
          'Радослава',
          'Раїна',
          'Раїса',
          'Роксолана',
          'Ромена',
          'Ростислава',
          'Руслана',
          'Світлана',
          'Святослава',
          'Слава',
          'Сміяна',
          'Сніжана',
          'Соломія',
          'Соня',
          'Софія',
          'Станислава',
          'Сюзана',
          'Таїсія',
          'Тамара',
          'Тетяна',
          'Устина',
          'Фаїна',
          'Февронія',
          'Федора',
          'Феодосія',
          'Харитина',
          'Христина',
          'Христя',
          'Юліанна',
          'Юлія',
          'Юстина',
          'Юхима',
          'Юхимія',
          'Яна',
          'Ярина',
          'Ярослава',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/uk/name/female_middle_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Адамівна',
          'Азарівна',
          'Алевтинівна',
          'Альбертівна',
          'Анастасівна',
          'Анатоліївна',
          'Андріївна',
          'Антонівна',
          'Аркадіївна',
          'Арсенівна',
          'Арсеніївна',
          'Артемівна',
          'Архипівна',
          'Аскольдівна',
          'Афанасіївна',
          'Білославівна',
          'Богданівна',
          'Божемирівна',
          'Боженівна',
          'Болеславівна',
          'Боримирівна',
          'Борисівна',
          'Бориславівна',
          'Братиславівна',
          'В’ячеславівна',
          'Вадимівна',
          'Валентинівна',
          'Валеріївна',
          'Василівна',
          'Вікторівна',
          'Віталіївна',
          'Владиславівна',
          'Володимирівна',
          'Всеволодівна',
          'Всеславівна',
          'Гаврилівна',
          'Гарасимівна',
          'Георгіївна',
          'Гнатівна',
          'Гордіївна',
          'Григоріївна',
          'Данилівна',
          'Даромирівна',
          'Денисівна',
          'Дмитрівна',
          'Добромирівна',
          'Доброславівна',
          'Євгенівна',
          'Захарівна',
          'Захаріївна',
          'Збориславівна',
          'Звенимирівна',
          'Звениславівна',
          'Зеновіївна',
          'Зиновіївна',
          'Златомирівна',
          'Зореславівна',
          'Іванівна',
          'Ігорівна',
          'Ізяславівна',
          'Корнеліївна',
          'Корнилівна',
          'Корніївна',
          'Костянтинівна',
          'Лаврентіївна',
          'Любомирівна',
          'Макарівна',
          'Максимівна',
          'Марківна',
          'Маркіянівна',
          'Матвіївна',
          'Мечиславівна',
          'Микитівна',
          'Миколаївна',
          'Миронівна',
          'Мирославівна',
          'Михайлівна',
          'Мстиславівна',
          'Назарівна',
          'Назаріївна',
          'Натанівна',
          'Немирівна',
          'Несторівна',
          'Олегівна',
          'Олександрівна',
          'Олексіївна',
          'Олельківна',
          'Омелянівна',
          'Орестівна',
          'Орхипівна',
          'Остапівна',
          'Охрімівна',
          'Павлівна',
          'Панасівна',
          'Пантелеймонівна',
          'Петрівна',
          'Пилипівна',
          'Радимирівна',
          'Радимівна',
          'Родіонівна',
          'Романівна',
          'Ростиславівна',
          'Русланівна',
          'Святославівна',
          'Сергіївна',
          'Славутівна',
          'Станіславівна',
          'Степанівна',
          'Стефаніївна',
          'Тарасівна',
          'Тимофіївна',
          'Тихонівна',
          'Устимівна',
          'Юріївна',
          'Юхимівна',
          'Ярославівна',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/uk/name/female_last_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Андрухович',
          'Бабух',
          'Балабан',
          'Балабуха',
          'Балакун',
          'Балицька',
          'Бамбула',
          'Бандера',
          'Барановська',
          'Бачей',
          'Башук',
          'Бердник',
          'Білич',
          'Бондаренко',
          'Борецька',
          'Боровська',
          'Борочко',
          'Боярчук',
          'Брицька',
          'Бурмило',
          'Бутько',
          'Василишина',
          'Васильківська',
          'Вергун',
          'Вередун',
          'Верещук',
          'Витребенько',
          'Вітряк',
          'Волощук',
          'Гайдук',
          'Гайова',
          'Гайчук',
          'Галаєнко',
          'Галатей',
          'Галаціон',
          'Гаман',
          'Гамула',
          'Ганич',
          'Гарай',
          'Гарун',
          'Гладківська',
          'Гладух',
          'Глинська',
          'Гнатишина',
          'Гойко',
          'Головець',
          'Горбач',
          'Гордійчук',
          'Горова',
          'Городоцька',
          'Гречко',
          'Григоришина',
          'Гриневецька',
          'Гриневська',
          'Гришко',
          'Громико',
          'Данилишина',
          'Данилко',
          'Демків',
          'Демчишина',
          'Дзюб’як',
          'Дзюба',
          'Дідух',
          'Дмитришина',
          'Дмитрук',
          'Довгалевська',
          'Дурдинець',
          'Євенко',
          'Євпак',
          'Ємець',
          'Єрмак',
          'Забіла',
          'Зварич',
          'Зінкевич',
          'Зленко',
          'Іванишина',
          'Калач',
          'Кандиба',
          'Карпух',
          'Кивач',
          'Коваленко',
          'Ковальська',
          'Коломієць',
          'Коман',
          'Компанієць',
          'Кононець',
          'Кордун',
          'Корецька',
          'Корнїйчук',
          'Коров’як',
          'Коцюбинська',
          'Кулинич',
          'Кульчицька',
          'Лагойда',
          'Лазірко',
          'Ланова',
          'Латан',
          'Латанська',
          'Лахман',
          'Левадовська',
          'Ликович',
          'Линдик',
          'Ліхно',
          'Лобачевська',
          'Ломова',
          'Лугова',
          'Луцька',
          'Луцьків',
          'Лученко',
          'Лучко',
          'Люта',
          'Лящук',
          'Магера',
          'Мазайло',
          'Мазило',
          'Мазун',
          'Майборода',
          'Майстренко',
          'Маковецька',
          'Малкович',
          'Мамій',
          'Маринич',
          'Марієвська',
          'Марків',
          'Махно',
          'Миклашевська',
          'Миклухо',
          'Милославська',
          'Михайлюк',
          'Міняйло',
          'Могилевська',
          'Москаль',
          'Москалюк',
          'Мотрієнко',
          'Негода',
          'Ногачевська',
          'Опенько',
          'Осадко',
          'Павленко',
          'Павлишина',
          'Павлів',
          'Пагутяк',
          'Паламарчук',
          'Палій',
          'Паращук',
          'Пасічник',
          'Пендик',
          'Петик',
          'Петлюра',
          'Петренко',
          'Петрина',
          'Петришина',
          'Петрів',
          'Плаксій',
          'Погиба',
          'Поліщук',
          'Пономарів',
          'Поривай',
          'Поривайло',
          'Потебенько',
          'Потоцька',
          'Пригода',
          'Приймак',
          'Притула',
          'Прядун',
          'Розпутня',
          'Романишина',
          'Ромей',
          'Роменець',
          'Ромочко',
          'Савицька',
          'Саєнко',
          'Свидригайло',
          'Семеночко',
          'Семещук',
          'Сердюк',
          'Силецька',
          'Сідлецька',
          'Сідляк',
          'Сірко',
          'Скиба',
          'Скоропадська',
          'Слободян',
          'Сосюра',
          'Сплюха',
          'Спотикач',
          'Степанець',
          'Стигайло',
          'Сторожук',
          'Сторчак',
          'Стоян',
          'Сучак',
          'Сушко',
          'Тарасюк',
          'Тиндарей',
          'Ткаченко',
          'Третяк',
          'Троян',
          'Трублаєвська',
          'Трясило',
          'Трясун',
          'Уманець',
          'Унич',
          'Усич',
          'Федоришина',
          'Цушко',
          'Червоній',
          'Шамрило',
          'Шевченко',
          'Шестак',
          'Шиндарей',
          'Шиян',
          'Шкараба',
          'Шудрик',
          'Шумило',
          'Шупик',
          'Шухевич',
          'Щербак',
          'Юрчишина',
          'Юхно',
          'Ющик',
          'Ющук',
          'Яворівська',
          'Ялова',
          'Ялюк',
          'Янюк',
          'Ярмак',
          'Яцишина',
          'Яцьків',
          'Ящук',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/uk/name/prefix.js': [
      function(require, module, exports) {
        module['exports'] = ['Пан', 'Пані']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/uk/name/suffix.js': [
      function(require, module, exports) {
        module['exports'] = [
          'проф.',
          'доц.',
          'докт. пед. наук',
          'докт. політ. наук',
          'докт. філол. наук',
          'докт. філос. наук',
          'докт. і. наук',
          'докт. юрид. наук',
          'докт. техн. наук',
          'докт. психол. наук',
          'канд. пед. наук',
          'канд. політ. наук',
          'канд. філол. наук',
          'канд. філос. наук',
          'канд. і. наук',
          'канд. юрид. наук',
          'канд. техн. наук',
          'канд. психол. наук',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/uk/name/title.js': [
      function(require, module, exports) {
        module['exports'] = {
          descriptor: [
            'Головний',
            'Генеральний',
            'Провідний',
            'Національний',
            'Регіональний',
            'Обласний',
            'Районний',
            'Глобальний',
            'Міжнародний',
            'Центральний',
          ],
          level: [
            'маркетинговий',
            'оптимізаційний',
            'страховий',
            'функціональний',
            'інтеграційний',
            'логістичний',
          ],
          job: [
            'інженер',
            'агент',
            'адміністратор',
            'аналітик',
            'архітектор',
            'дизайнер',
            'керівник',
            'консультант',
            'координатор',
            'менеджер',
            'планувальник',
            'помічник',
            'розробник',
            'спеціаліст',
            'співробітник',
            'технік',
          ],
        }
      },
      {},
    ],
    '../node_modules/faker/lib/locales/uk/name/name.js': [
      function(require, module, exports) {
        module['exports'] = [
          '#{male_first_name} #{male_last_name}',
          '#{male_last_name} #{male_first_name}',
          '#{male_first_name} #{male_middle_name} #{male_last_name}',
          '#{male_last_name} #{male_first_name} #{male_middle_name}',
          '#{female_first_name} #{female_last_name}',
          '#{female_last_name} #{female_first_name}',
          '#{female_first_name} #{female_middle_name} #{female_last_name}',
          '#{female_last_name} #{female_first_name} #{female_middle_name}',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/uk/name/index.js': [
      function(require, module, exports) {
        var name = {}
        module['exports'] = name
        name.male_first_name = require('./male_first_name')
        name.male_middle_name = require('./male_middle_name')
        name.male_last_name = require('./male_last_name')
        name.female_first_name = require('./female_first_name')
        name.female_middle_name = require('./female_middle_name')
        name.female_last_name = require('./female_last_name')
        name.prefix = require('./prefix')
        name.suffix = require('./suffix')
        name.title = require('./title')
        name.name = require('./name')
      },
      {
        './male_first_name':
          '../node_modules/faker/lib/locales/uk/name/male_first_name.js',
        './male_middle_name':
          '../node_modules/faker/lib/locales/uk/name/male_middle_name.js',
        './male_last_name':
          '../node_modules/faker/lib/locales/uk/name/male_last_name.js',
        './female_first_name':
          '../node_modules/faker/lib/locales/uk/name/female_first_name.js',
        './female_middle_name':
          '../node_modules/faker/lib/locales/uk/name/female_middle_name.js',
        './female_last_name':
          '../node_modules/faker/lib/locales/uk/name/female_last_name.js',
        './prefix': '../node_modules/faker/lib/locales/uk/name/prefix.js',
        './suffix': '../node_modules/faker/lib/locales/uk/name/suffix.js',
        './title': '../node_modules/faker/lib/locales/uk/name/title.js',
        './name': '../node_modules/faker/lib/locales/uk/name/name.js',
      },
    ],
    '../node_modules/faker/lib/locales/uk/phone_number/formats.js': [
      function(require, module, exports) {
        module['exports'] = [
          '(044) ###-##-##',
          '(050) ###-##-##',
          '(063) ###-##-##',
          '(066) ###-##-##',
          '(073) ###-##-##',
          '(091) ###-##-##',
          '(092) ###-##-##',
          '(093) ###-##-##',
          '(094) ###-##-##',
          '(095) ###-##-##',
          '(096) ###-##-##',
          '(097) ###-##-##',
          '(098) ###-##-##',
          '(099) ###-##-##',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/uk/phone_number/index.js': [
      function(require, module, exports) {
        var phone_number = {}
        module['exports'] = phone_number
        phone_number.formats = require('./formats')
      },
      {
        './formats':
          '../node_modules/faker/lib/locales/uk/phone_number/formats.js',
      },
    ],
    '../node_modules/faker/lib/locales/uk/index.js': [
      function(require, module, exports) {
        var uk = {}
        module['exports'] = uk
        uk.title = 'Ukrainian'
        uk.address = require('./address')
        uk.company = require('./company')
        uk.internet = require('./internet')
        uk.name = require('./name')
        uk.phone_number = require('./phone_number')
      },
      {
        './address':
          '../node_modules/faker/lib/locales/uk/address/index.js',
        './company':
          '../node_modules/faker/lib/locales/uk/company/index.js',
        './internet':
          '../node_modules/faker/lib/locales/uk/internet/index.js',
        './name': '../node_modules/faker/lib/locales/uk/name/index.js',
        './phone_number':
          '../node_modules/faker/lib/locales/uk/phone_number/index.js',
      },
    ],
    '../node_modules/faker/lib/locales/vi/address/city_root.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Bắc Giang',
          'Bắc Kạn',
          'Bắc Ninh',
          'Cao Bằng',
          'Điện Biên',
          'Hà Giang',
          'Hà Nam',
          'Hà Tây',
          'Hải Dương',
          'TP Hải Phòng',
          'Hòa Bình',
          'Hưng Yên',
          'Lai Châu',
          'Lào Cai',
          'Lạng Sơn',
          'Nam Định',
          'Ninh Bình',
          'Phú Thọ',
          'Quảng Ninh',
          'Sơn La',
          'Thái Bình',
          'Thái Nguyên',
          'Tuyên Quang',
          'Vĩnh Phúc',
          'Yên Bái',
          'TP Đà Nẵng',
          'Bình Định',
          'Đắk Lắk',
          'Đắk Nông',
          'Gia Lai',
          'Hà Tĩnh',
          'Khánh Hòa',
          'Kon Tum',
          'Nghệ An',
          'Phú Yên',
          'Quảng Bình',
          'Quảng Nam',
          'Quảng Ngãi',
          'Quảng Trị',
          'Thanh Hóa',
          'Thừa Thiên Huế',
          'TP TP. Hồ Chí Minh',
          'An Giang',
          'Bà Rịa Vũng Tàu',
          'Bạc Liêu',
          'Bến Tre',
          'Bình Dương',
          'Bình Phước',
          'Bình Thuận',
          'Cà Mau',
          'TP Cần Thơ',
          'Đồng Nai',
          'Đồng Tháp',
          'Hậu Giang',
          'Kiên Giang',
          'Lâm Đồng',
          'Long An',
          'Ninh Thuận',
          'Sóc Trăng',
          'Tây Ninh',
          'Tiền Giang',
          'Trà Vinh',
          'Vĩnh Long',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/vi/address/city.js': [
      function(require, module, exports) {
        module['exports'] = ['#{city_root}']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/vi/address/county.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Avon',
          'Bedfordshire',
          'Berkshire',
          'Borders',
          'Buckinghamshire',
          'Cambridgeshire',
          'Central',
          'Cheshire',
          'Cleveland',
          'Clwyd',
          'Cornwall',
          'County Antrim',
          'County Armagh',
          'County Down',
          'County Fermanagh',
          'County Londonderry',
          'County Tyrone',
          'Cumbria',
          'Derbyshire',
          'Devon',
          'Dorset',
          'Dumfries and Galloway',
          'Durham',
          'Dyfed',
          'East Sussex',
          'Essex',
          'Fife',
          'Gloucestershire',
          'Grampian',
          'Greater Manchester',
          'Gwent',
          'Gwynedd County',
          'Hampshire',
          'Herefordshire',
          'Hertfordshire',
          'Highlands and Islands',
          'Humberside',
          'Isle of Wight',
          'Kent',
          'Lancashire',
          'Leicestershire',
          'Lincolnshire',
          'Lothian',
          'Merseyside',
          'Mid Glamorgan',
          'Norfolk',
          'North Yorkshire',
          'Northamptonshire',
          'Northumberland',
          'Nottinghamshire',
          'Oxfordshire',
          'Powys',
          'Rutland',
          'Shropshire',
          'Somerset',
          'South Glamorgan',
          'South Yorkshire',
          'Staffordshire',
          'Strathclyde',
          'Suffolk',
          'Surrey',
          'Tayside',
          'Tyne and Wear',
          'Việt Nam',
          'Warwickshire',
          'West Glamorgan',
          'West Midlands',
          'West Sussex',
          'West Yorkshire',
          'Wiltshire',
          'Worcestershire',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/vi/address/default_country.js': [
      function(require, module, exports) {
        module['exports'] = ['Việt Nam']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/vi/address/index.js': [
      function(require, module, exports) {
        var address = {}
        module['exports'] = address
        address.city_root = require('./city_root')
        address.city = require('./city')
        address.county = require('./county')
        address.default_country = require('./default_country')
      },
      {
        './city_root':
          '../node_modules/faker/lib/locales/vi/address/city_root.js',
        './city': '../node_modules/faker/lib/locales/vi/address/city.js',
        './county':
          '../node_modules/faker/lib/locales/vi/address/county.js',
        './default_country':
          '../node_modules/faker/lib/locales/vi/address/default_country.js',
      },
    ],
    '../node_modules/faker/lib/locales/vi/internet/domain_suffix.js': [
      function(require, module, exports) {
        module['exports'] = ['com', 'net', 'info', 'vn', 'com.vn']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/vi/internet/index.js': [
      function(require, module, exports) {
        var internet = {}
        module['exports'] = internet
        internet.domain_suffix = require('./domain_suffix')
      },
      {
        './domain_suffix':
          '../node_modules/faker/lib/locales/vi/internet/domain_suffix.js',
      },
    ],
    '../node_modules/faker/lib/locales/vi/phone_number/formats.js': [
      function(require, module, exports) {
        module['exports'] = [
          '01#### #####',
          '01### ######',
          '01#1 ### ####',
          '011# ### ####',
          '02# #### ####',
          '03## ### ####',
          '055 #### ####',
          '056 #### ####',
          '0800 ### ####',
          '08## ### ####',
          '09## ### ####',
          '016977 ####',
          '01### #####',
          '0500 ######',
          '0800 ######',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/vi/phone_number/index.js': [
      function(require, module, exports) {
        var phone_number = {}
        module['exports'] = phone_number
        phone_number.formats = require('./formats')
      },
      {
        './formats':
          '../node_modules/faker/lib/locales/vi/phone_number/formats.js',
      },
    ],
    '../node_modules/faker/lib/locales/vi/cell_phone/formats.js': [
      function(require, module, exports) {
        module['exports'] = [
          '074## ######',
          '075## ######',
          '076## ######',
          '077## ######',
          '078## ######',
          '079## ######',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/vi/cell_phone/index.js': [
      function(require, module, exports) {
        var cell_phone = {}
        module['exports'] = cell_phone
        cell_phone.formats = require('./formats')
      },
      {
        './formats':
          '../node_modules/faker/lib/locales/vi/cell_phone/formats.js',
      },
    ],
    '../node_modules/faker/lib/locales/vi/name/first_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Phạm',
          'Nguyễn',
          'Trần',
          'Lê',
          'Lý',
          'Hoàng',
          'Phan',
          'Vũ',
          'Tăng',
          'Đặng',
          'Bùi',
          'Đỗ',
          'Hồ',
          'Ngô',
          'Dương',
          'Đào',
          'Đoàn',
          'Vương',
          'Trịnh',
          'Đinh',
          'Lâm',
          'Phùng',
          'Mai',
          'Tô',
          'Trương',
          'Hà',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/vi/name/last_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Nam',
          'Trung',
          'Thanh',
          'Thị',
          'Văn',
          'Dương',
          'Tăng',
          'Quốc',
          'Như',
          'Phạm',
          'Nguyễn',
          'Trần',
          'Lê',
          'Lý',
          'Hoàng',
          'Phan',
          'Vũ',
          'Tăng',
          'Đặng',
          'Bùi',
          'Đỗ',
          'Hồ',
          'Ngô',
          'Dương',
          'Đào',
          'Đoàn',
          'Vương',
          'Trịnh',
          'Đinh',
          'Lâm',
          'Phùng',
          'Mai',
          'Tô',
          'Trương',
          'Hà',
          'Vinh',
          'Nhung',
          'Hòa',
          'Tiến',
          'Tâm',
          'Bửu',
          'Loan',
          'Hiền',
          'Hải',
          'Vân',
          'Kha',
          'Minh',
          'Nhân',
          'Triệu',
          'Tuân',
          'Hữu',
          'Đức',
          'Phú',
          'Khoa',
          'Thắgn',
          'Sơn',
          'Dung',
          'Tú',
          'Trinh',
          'Thảo',
          'Sa',
          'Kim',
          'Long',
          'Thi',
          'Cường',
          'Ngọc',
          'Sinh',
          'Khang',
          'Phong',
          'Thắm',
          'Thu',
          'Thủy',
          'Nhàn',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/vi/name/name.js': [
      function(require, module, exports) {
        module['exports'] = [
          '#{first_name} #{last_name}',
          '#{first_name} #{last_name} #{last_name}',
          '#{first_name} #{last_name} #{last_name} #{last_name}',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/vi/name/index.js': [
      function(require, module, exports) {
        var name = {}
        module['exports'] = name
        name.first_name = require('./first_name')
        name.last_name = require('./last_name')
        name.name = require('./name')
      },
      {
        './first_name':
          '../node_modules/faker/lib/locales/vi/name/first_name.js',
        './last_name':
          '../node_modules/faker/lib/locales/vi/name/last_name.js',
        './name': '../node_modules/faker/lib/locales/vi/name/name.js',
      },
    ],
    '../node_modules/faker/lib/locales/vi/company/prefix.js': [
      function(require, module, exports) {
        module['exports'] = [
          'Công ty',
          'Cty TNHH',
          'Cty',
          'Cửa hàng',
          'Trung tâm',
          'Chi nhánh',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/vi/company/name.js': [
      function(require, module, exports) {
        module['exports'] = ['#{prefix} #{Name.last_name}']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/vi/company/index.js': [
      function(require, module, exports) {
        var company = {}
        module['exports'] = company
        company.prefix = require('./prefix')
        company.name = require('./name')
      },
      {
        './prefix':
          '../node_modules/faker/lib/locales/vi/company/prefix.js',
        './name': '../node_modules/faker/lib/locales/vi/company/name.js',
      },
    ],
    '../node_modules/faker/lib/locales/vi/lorem/words.js': [
      function(require, module, exports) {
        module['exports'] = [
          'đã',
          'đang',
          'ừ',
          'ờ',
          'á',
          'không',
          'biết',
          'gì',
          'hết',
          'đâu',
          'nha',
          'thế',
          'thì',
          'là',
          'đánh',
          'đá',
          'đập',
          'phá',
          'viết',
          'vẽ',
          'tô',
          'thuê',
          'mướn',
          'mượn',
          'mua',
          'một',
          'hai',
          'ba',
          'bốn',
          'năm',
          'sáu',
          'bảy',
          'tám',
          'chín',
          'mười',
          'thôi',
          'việc',
          'nghỉ',
          'làm',
          'nhà',
          'cửa',
          'xe',
          'đạp',
          'ác',
          'độc',
          'khoảng',
          'khoan',
          'thuyền',
          'tàu',
          'bè',
          'lầu',
          'xanh',
          'đỏ',
          'tím',
          'vàng',
          'kim',
          'chỉ',
          'khâu',
          'may',
          'vá',
          'em',
          'anh',
          'yêu',
          'thương',
          'thích',
          'con',
          'cái',
          'bàn',
          'ghế',
          'tủ',
          'quần',
          'áo',
          'nón',
          'dép',
          'giày',
          'lỗi',
          'được',
          'ghét',
          'giết',
          'chết',
          'hết',
          'tôi',
          'bạn',
          'tui',
          'trời',
          'trăng',
          'mây',
          'gió',
          'máy',
          'hàng',
          'hóa',
          'leo',
          'núi',
          'bơi',
          'biển',
          'chìm',
          'xuồng',
          'nước',
          'ngọt',
          'ruộng',
          'đồng',
          'quê',
          'hương',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/vi/lorem/index.js': [
      function(require, module, exports) {
        var lorem = {}
        module['exports'] = lorem
        lorem.words = require('./words')
      },
      { './words': '../node_modules/faker/lib/locales/vi/lorem/words.js' },
    ],
    '../node_modules/faker/lib/locales/vi/index.js': [
      function(require, module, exports) {
        var vi = {}
        module['exports'] = vi
        vi.title = 'Vietnamese'
        vi.address = require('./address')
        vi.internet = require('./internet')
        vi.phone_number = require('./phone_number')
        vi.cell_phone = require('./cell_phone')
        vi.name = require('./name')
        vi.company = require('./company')
        vi.lorem = require('./lorem')
      },
      {
        './address':
          '../node_modules/faker/lib/locales/vi/address/index.js',
        './internet':
          '../node_modules/faker/lib/locales/vi/internet/index.js',
        './phone_number':
          '../node_modules/faker/lib/locales/vi/phone_number/index.js',
        './cell_phone':
          '../node_modules/faker/lib/locales/vi/cell_phone/index.js',
        './name': '../node_modules/faker/lib/locales/vi/name/index.js',
        './company':
          '../node_modules/faker/lib/locales/vi/company/index.js',
        './lorem': '../node_modules/faker/lib/locales/vi/lorem/index.js',
      },
    ],
    '../node_modules/faker/lib/locales/zh_CN/address/city_prefix.js': [
      function(require, module, exports) {
        module['exports'] = [
          '长',
          '上',
          '南',
          '西',
          '北',
          '诸',
          '宁',
          '珠',
          '武',
          '衡',
          '成',
          '福',
          '厦',
          '贵',
          '吉',
          '海',
          '太',
          '济',
          '安',
          '吉',
          '包',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/zh_CN/address/city_suffix.js': [
      function(require, module, exports) {
        module['exports'] = [
          '沙市',
          '京市',
          '宁市',
          '安市',
          '乡县',
          '海市',
          '码市',
          '汉市',
          '阳市',
          '都市',
          '州市',
          '门市',
          '阳市',
          '口市',
          '原市',
          '南市',
          '徽市',
          '林市',
          '头市',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/zh_CN/address/building_number.js': [
      function(require, module, exports) {
        module['exports'] = ['#####', '####', '###', '##', '#']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/zh_CN/address/street_suffix.js': [
      function(require, module, exports) {
        module['exports'] = [
          '巷',
          '街',
          '路',
          '桥',
          '侬',
          '旁',
          '中心',
          '栋',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/zh_CN/address/postcode.js': [
      function(require, module, exports) {
        module['exports'] = ['######']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/zh_CN/address/state.js': [
      function(require, module, exports) {
        module['exports'] = [
          '北京市',
          '上海市',
          '天津市',
          '重庆市',
          '黑龙江省',
          '吉林省',
          '辽宁省',
          '内蒙古',
          '河北省',
          '新疆',
          '甘肃省',
          '青海省',
          '陕西省',
          '宁夏',
          '河南省',
          '山东省',
          '山西省',
          '安徽省',
          '湖北省',
          '湖南省',
          '江苏省',
          '四川省',
          '贵州省',
          '云南省',
          '广西省',
          '西藏',
          '浙江省',
          '江西省',
          '广东省',
          '福建省',
          '台湾省',
          '海南省',
          '香港',
          '澳门',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/zh_CN/address/state_abbr.js': [
      function(require, module, exports) {
        module['exports'] = [
          '京',
          '沪',
          '津',
          '渝',
          '黑',
          '吉',
          '辽',
          '蒙',
          '冀',
          '新',
          '甘',
          '青',
          '陕',
          '宁',
          '豫',
          '鲁',
          '晋',
          '皖',
          '鄂',
          '湘',
          '苏',
          '川',
          '黔',
          '滇',
          '桂',
          '藏',
          '浙',
          '赣',
          '粤',
          '闽',
          '台',
          '琼',
          '港',
          '澳',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/zh_CN/address/city.js': [
      function(require, module, exports) {
        module['exports'] = ['#{city_prefix}#{city_suffix}']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/zh_CN/address/street_name.js': [
      function(require, module, exports) {
        module['exports'] = ['#{Name.last_name}#{street_suffix}']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/zh_CN/address/street_address.js': [
      function(require, module, exports) {
        module['exports'] = ['#{street_name}#{building_number}号']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/zh_CN/address/default_country.js': [
      function(require, module, exports) {
        module['exports'] = ['中国']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/zh_CN/address/index.js': [
      function(require, module, exports) {
        var address = {}
        module['exports'] = address
        address.city_prefix = require('./city_prefix')
        address.city_suffix = require('./city_suffix')
        address.building_number = require('./building_number')
        address.street_suffix = require('./street_suffix')
        address.postcode = require('./postcode')
        address.state = require('./state')
        address.state_abbr = require('./state_abbr')
        address.city = require('./city')
        address.street_name = require('./street_name')
        address.street_address = require('./street_address')
        address.default_country = require('./default_country')
      },
      {
        './city_prefix':
          '../node_modules/faker/lib/locales/zh_CN/address/city_prefix.js',
        './city_suffix':
          '../node_modules/faker/lib/locales/zh_CN/address/city_suffix.js',
        './building_number':
          '../node_modules/faker/lib/locales/zh_CN/address/building_number.js',
        './street_suffix':
          '../node_modules/faker/lib/locales/zh_CN/address/street_suffix.js',
        './postcode':
          '../node_modules/faker/lib/locales/zh_CN/address/postcode.js',
        './state':
          '../node_modules/faker/lib/locales/zh_CN/address/state.js',
        './state_abbr':
          '../node_modules/faker/lib/locales/zh_CN/address/state_abbr.js',
        './city':
          '../node_modules/faker/lib/locales/zh_CN/address/city.js',
        './street_name':
          '../node_modules/faker/lib/locales/zh_CN/address/street_name.js',
        './street_address':
          '../node_modules/faker/lib/locales/zh_CN/address/street_address.js',
        './default_country':
          '../node_modules/faker/lib/locales/zh_CN/address/default_country.js',
      },
    ],
    '../node_modules/faker/lib/locales/zh_CN/name/first_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          '王',
          '李',
          '张',
          '刘',
          '陈',
          '杨',
          '黄',
          '吴',
          '赵',
          '周',
          '徐',
          '孙',
          '马',
          '朱',
          '胡',
          '林',
          '郭',
          '何',
          '高',
          '罗',
          '郑',
          '梁',
          '谢',
          '宋',
          '唐',
          '许',
          '邓',
          '冯',
          '韩',
          '曹',
          '曾',
          '彭',
          '萧',
          '蔡',
          '潘',
          '田',
          '董',
          '袁',
          '于',
          '余',
          '叶',
          '蒋',
          '杜',
          '苏',
          '魏',
          '程',
          '吕',
          '丁',
          '沈',
          '任',
          '姚',
          '卢',
          '傅',
          '钟',
          '姜',
          '崔',
          '谭',
          '廖',
          '范',
          '汪',
          '陆',
          '金',
          '石',
          '戴',
          '贾',
          '韦',
          '夏',
          '邱',
          '方',
          '侯',
          '邹',
          '熊',
          '孟',
          '秦',
          '白',
          '江',
          '阎',
          '薛',
          '尹',
          '段',
          '雷',
          '黎',
          '史',
          '龙',
          '陶',
          '贺',
          '顾',
          '毛',
          '郝',
          '龚',
          '邵',
          '万',
          '钱',
          '严',
          '赖',
          '覃',
          '洪',
          '武',
          '莫',
          '孔',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/zh_CN/name/last_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          '绍齐',
          '博文',
          '梓晨',
          '胤祥',
          '瑞霖',
          '明哲',
          '天翊',
          '凯瑞',
          '健雄',
          '耀杰',
          '潇然',
          '子涵',
          '越彬',
          '钰轩',
          '智辉',
          '致远',
          '俊驰',
          '雨泽',
          '烨磊',
          '晟睿',
          '文昊',
          '修洁',
          '黎昕',
          '远航',
          '旭尧',
          '鸿涛',
          '伟祺',
          '荣轩',
          '越泽',
          '浩宇',
          '瑾瑜',
          '皓轩',
          '擎苍',
          '擎宇',
          '志泽',
          '子轩',
          '睿渊',
          '弘文',
          '哲瀚',
          '雨泽',
          '楷瑞',
          '建辉',
          '晋鹏',
          '天磊',
          '绍辉',
          '泽洋',
          '鑫磊',
          '鹏煊',
          '昊强',
          '伟宸',
          '博超',
          '君浩',
          '子骞',
          '鹏涛',
          '炎彬',
          '鹤轩',
          '越彬',
          '风华',
          '靖琪',
          '明辉',
          '伟诚',
          '明轩',
          '健柏',
          '修杰',
          '志泽',
          '弘文',
          '峻熙',
          '嘉懿',
          '煜城',
          '懿轩',
          '烨伟',
          '苑博',
          '伟泽',
          '熠彤',
          '鸿煊',
          '博涛',
          '烨霖',
          '烨华',
          '煜祺',
          '智宸',
          '正豪',
          '昊然',
          '明杰',
          '立诚',
          '立轩',
          '立辉',
          '峻熙',
          '弘文',
          '熠彤',
          '鸿煊',
          '烨霖',
          '哲瀚',
          '鑫鹏',
          '昊天',
          '思聪',
          '展鹏',
          '笑愚',
          '志强',
          '炫明',
          '雪松',
          '思源',
          '智渊',
          '思淼',
          '晓啸',
          '天宇',
          '浩然',
          '文轩',
          '鹭洋',
          '振家',
          '乐驹',
          '晓博',
          '文博',
          '昊焱',
          '立果',
          '金鑫',
          '锦程',
          '嘉熙',
          '鹏飞',
          '子默',
          '思远',
          '浩轩',
          '语堂',
          '聪健',
          '明',
          '文',
          '果',
          '思',
          '鹏',
          '驰',
          '涛',
          '琪',
          '浩',
          '航',
          '彬',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/zh_CN/name/name.js': [
      function(require, module, exports) {
        module['exports'] = ['#{first_name}#{last_name}']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/zh_CN/name/index.js': [
      function(require, module, exports) {
        var name = {}
        module['exports'] = name
        name.first_name = require('./first_name')
        name.last_name = require('./last_name')
        name.name = require('./name')
      },
      {
        './first_name':
          '../node_modules/faker/lib/locales/zh_CN/name/first_name.js',
        './last_name':
          '../node_modules/faker/lib/locales/zh_CN/name/last_name.js',
        './name': '../node_modules/faker/lib/locales/zh_CN/name/name.js',
      },
    ],
    '../node_modules/faker/lib/locales/zh_CN/phone_number/formats.js': [
      function(require, module, exports) {
        module['exports'] = [
          '###-########',
          '####-########',
          '###########',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/zh_CN/phone_number/index.js': [
      function(require, module, exports) {
        var phone_number = {}
        module['exports'] = phone_number
        phone_number.formats = require('./formats')
      },
      {
        './formats':
          '../node_modules/faker/lib/locales/zh_CN/phone_number/formats.js',
      },
    ],
    '../node_modules/faker/lib/locales/zh_CN/index.js': [
      function(require, module, exports) {
        var zh_CN = {}
        module['exports'] = zh_CN
        zh_CN.title = 'Chinese'
        zh_CN.address = require('./address')
        zh_CN.name = require('./name')
        zh_CN.phone_number = require('./phone_number')
      },
      {
        './address':
          '../node_modules/faker/lib/locales/zh_CN/address/index.js',
        './name': '../node_modules/faker/lib/locales/zh_CN/name/index.js',
        './phone_number':
          '../node_modules/faker/lib/locales/zh_CN/phone_number/index.js',
      },
    ],
    '../node_modules/faker/lib/locales/zh_TW/address/city_prefix.js': [
      function(require, module, exports) {
        module['exports'] = [
          '臺北',
          '新北',
          '桃園',
          '臺中',
          '臺南',
          '高雄',
          '基隆',
          '新竹',
          '嘉義',
          '苗栗',
          '彰化',
          '南投',
          '雲林',
          '屏東',
          '宜蘭',
          '花蓮',
          '臺東',
          '澎湖',
          '金門',
          '連江',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/zh_TW/address/city_suffix.js': [
      function(require, module, exports) {
        module['exports'] = ['縣', '市']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/zh_TW/address/building_number.js': [
      function(require, module, exports) {
        module['exports'] = ['####', '###', '##', '#']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/zh_TW/address/street_suffix.js': [
      function(require, module, exports) {
        module['exports'] = ['街', '路', '北路', '南路', '東路', '西路']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/zh_TW/address/postcode.js': [
      function(require, module, exports) {
        module['exports'] = ['######']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/zh_TW/address/state.js': [
      function(require, module, exports) {
        module['exports'] = ['福建省', '台灣省']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/zh_TW/address/state_abbr.js': [
      function(require, module, exports) {
        module['exports'] = [
          '北',
          '新北',
          '桃',
          '中',
          '南',
          '高',
          '基',
          '竹市',
          '嘉市',
          '竹縣',
          '苗',
          '彰',
          '投',
          '雲',
          '嘉縣',
          '宜',
          '花',
          '東',
          '澎',
          '金',
          '馬',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/zh_TW/address/city.js': [
      function(require, module, exports) {
        module['exports'] = ['#{city_prefix}#{city_suffix}']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/zh_TW/address/street_name.js': [
      function(require, module, exports) {
        module['exports'] = ['#{Name.last_name}#{street_suffix}']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/zh_TW/address/street_address.js': [
      function(require, module, exports) {
        module['exports'] = ['#{street_name}#{building_number}號']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/zh_TW/address/default_country.js': [
      function(require, module, exports) {
        module['exports'] = ['Taiwan (R.O.C.)']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/zh_TW/address/index.js': [
      function(require, module, exports) {
        var address = {}
        module['exports'] = address
        address.city_prefix = require('./city_prefix')
        address.city_suffix = require('./city_suffix')
        address.building_number = require('./building_number')
        address.street_suffix = require('./street_suffix')
        address.postcode = require('./postcode')
        address.state = require('./state')
        address.state_abbr = require('./state_abbr')
        address.city = require('./city')
        address.street_name = require('./street_name')
        address.street_address = require('./street_address')
        address.default_country = require('./default_country')
      },
      {
        './city_prefix':
          '../node_modules/faker/lib/locales/zh_TW/address/city_prefix.js',
        './city_suffix':
          '../node_modules/faker/lib/locales/zh_TW/address/city_suffix.js',
        './building_number':
          '../node_modules/faker/lib/locales/zh_TW/address/building_number.js',
        './street_suffix':
          '../node_modules/faker/lib/locales/zh_TW/address/street_suffix.js',
        './postcode':
          '../node_modules/faker/lib/locales/zh_TW/address/postcode.js',
        './state':
          '../node_modules/faker/lib/locales/zh_TW/address/state.js',
        './state_abbr':
          '../node_modules/faker/lib/locales/zh_TW/address/state_abbr.js',
        './city':
          '../node_modules/faker/lib/locales/zh_TW/address/city.js',
        './street_name':
          '../node_modules/faker/lib/locales/zh_TW/address/street_name.js',
        './street_address':
          '../node_modules/faker/lib/locales/zh_TW/address/street_address.js',
        './default_country':
          '../node_modules/faker/lib/locales/zh_TW/address/default_country.js',
      },
    ],
    '../node_modules/faker/lib/locales/zh_TW/name/first_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          '王',
          '李',
          '張',
          '劉',
          '陳',
          '楊',
          '黃',
          '吳',
          '趙',
          '週',
          '徐',
          '孫',
          '馬',
          '朱',
          '胡',
          '林',
          '郭',
          '何',
          '高',
          '羅',
          '鄭',
          '梁',
          '謝',
          '宋',
          '唐',
          '許',
          '鄧',
          '馮',
          '韓',
          '曹',
          '曾',
          '彭',
          '蕭',
          '蔡',
          '潘',
          '田',
          '董',
          '袁',
          '於',
          '餘',
          '葉',
          '蔣',
          '杜',
          '蘇',
          '魏',
          '程',
          '呂',
          '丁',
          '沈',
          '任',
          '姚',
          '盧',
          '傅',
          '鐘',
          '姜',
          '崔',
          '譚',
          '廖',
          '範',
          '汪',
          '陸',
          '金',
          '石',
          '戴',
          '賈',
          '韋',
          '夏',
          '邱',
          '方',
          '侯',
          '鄒',
          '熊',
          '孟',
          '秦',
          '白',
          '江',
          '閻',
          '薛',
          '尹',
          '段',
          '雷',
          '黎',
          '史',
          '龍',
          '陶',
          '賀',
          '顧',
          '毛',
          '郝',
          '龔',
          '邵',
          '萬',
          '錢',
          '嚴',
          '賴',
          '覃',
          '洪',
          '武',
          '莫',
          '孔',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/zh_TW/name/last_name.js': [
      function(require, module, exports) {
        module['exports'] = [
          '紹齊',
          '博文',
          '梓晨',
          '胤祥',
          '瑞霖',
          '明哲',
          '天翊',
          '凱瑞',
          '健雄',
          '耀傑',
          '瀟然',
          '子涵',
          '越彬',
          '鈺軒',
          '智輝',
          '致遠',
          '俊馳',
          '雨澤',
          '燁磊',
          '晟睿',
          '文昊',
          '修潔',
          '黎昕',
          '遠航',
          '旭堯',
          '鴻濤',
          '偉祺',
          '榮軒',
          '越澤',
          '浩宇',
          '瑾瑜',
          '皓軒',
          '擎蒼',
          '擎宇',
          '志澤',
          '子軒',
          '睿淵',
          '弘文',
          '哲瀚',
          '雨澤',
          '楷瑞',
          '建輝',
          '晉鵬',
          '天磊',
          '紹輝',
          '澤洋',
          '鑫磊',
          '鵬煊',
          '昊強',
          '偉宸',
          '博超',
          '君浩',
          '子騫',
          '鵬濤',
          '炎彬',
          '鶴軒',
          '越彬',
          '風華',
          '靖琪',
          '明輝',
          '偉誠',
          '明軒',
          '健柏',
          '修傑',
          '志澤',
          '弘文',
          '峻熙',
          '嘉懿',
          '煜城',
          '懿軒',
          '燁偉',
          '苑博',
          '偉澤',
          '熠彤',
          '鴻煊',
          '博濤',
          '燁霖',
          '燁華',
          '煜祺',
          '智宸',
          '正豪',
          '昊然',
          '明杰',
          '立誠',
          '立軒',
          '立輝',
          '峻熙',
          '弘文',
          '熠彤',
          '鴻煊',
          '燁霖',
          '哲瀚',
          '鑫鵬',
          '昊天',
          '思聰',
          '展鵬',
          '笑愚',
          '志強',
          '炫明',
          '雪松',
          '思源',
          '智淵',
          '思淼',
          '曉嘯',
          '天宇',
          '浩然',
          '文軒',
          '鷺洋',
          '振家',
          '樂駒',
          '曉博',
          '文博',
          '昊焱',
          '立果',
          '金鑫',
          '錦程',
          '嘉熙',
          '鵬飛',
          '子默',
          '思遠',
          '浩軒',
          '語堂',
          '聰健',
        ]
      },
      {},
    ],
    '../node_modules/faker/lib/locales/zh_TW/name/name.js': [
      function(require, module, exports) {
        module['exports'] = ['#{first_name}#{last_name}']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/zh_TW/name/index.js': [
      function(require, module, exports) {
        var name = {}
        module['exports'] = name
        name.first_name = require('./first_name')
        name.last_name = require('./last_name')
        name.name = require('./name')
      },
      {
        './first_name':
          '../node_modules/faker/lib/locales/zh_TW/name/first_name.js',
        './last_name':
          '../node_modules/faker/lib/locales/zh_TW/name/last_name.js',
        './name': '../node_modules/faker/lib/locales/zh_TW/name/name.js',
      },
    ],
    '../node_modules/faker/lib/locales/zh_TW/phone_number/formats.js': [
      function(require, module, exports) {
        module['exports'] = ['0#-#######', '02-########', '09##-######']
      },
      {},
    ],
    '../node_modules/faker/lib/locales/zh_TW/phone_number/index.js': [
      function(require, module, exports) {
        var phone_number = {}
        module['exports'] = phone_number
        phone_number.formats = require('./formats')
      },
      {
        './formats':
          '../node_modules/faker/lib/locales/zh_TW/phone_number/formats.js',
      },
    ],
    '../node_modules/faker/lib/locales/zh_TW/index.js': [
      function(require, module, exports) {
        var zh_TW = {}
        module['exports'] = zh_TW
        zh_TW.title = 'Chinese (Taiwan)'
        zh_TW.address = require('./address')
        zh_TW.name = require('./name')
        zh_TW.phone_number = require('./phone_number')
      },
      {
        './address':
          '../node_modules/faker/lib/locales/zh_TW/address/index.js',
        './name': '../node_modules/faker/lib/locales/zh_TW/name/index.js',
        './phone_number':
          '../node_modules/faker/lib/locales/zh_TW/phone_number/index.js',
      },
    ],
    '../node_modules/faker/lib/locales.js': [
      function(require, module, exports) {
        exports['az'] = require('./locales/az')
        exports['cz'] = require('./locales/cz')
        exports['de'] = require('./locales/de')
        exports['de_AT'] = require('./locales/de_AT')
        exports['de_CH'] = require('./locales/de_CH')
        exports['en'] = require('./locales/en')
        exports['en_AU'] = require('./locales/en_AU')
        exports['en_BORK'] = require('./locales/en_BORK')
        exports['en_CA'] = require('./locales/en_CA')
        exports['en_GB'] = require('./locales/en_GB')
        exports['en_IE'] = require('./locales/en_IE')
        exports['en_IND'] = require('./locales/en_IND')
        exports['en_US'] = require('./locales/en_US')
        exports['en_au_ocker'] = require('./locales/en_au_ocker')
        exports['es'] = require('./locales/es')
        exports['es_MX'] = require('./locales/es_MX')
        exports['fa'] = require('./locales/fa')
        exports['fr'] = require('./locales/fr')
        exports['fr_CA'] = require('./locales/fr_CA')
        exports['ge'] = require('./locales/ge')
        exports['id_ID'] = require('./locales/id_ID')
        exports['it'] = require('./locales/it')
        exports['ja'] = require('./locales/ja')
        exports['ko'] = require('./locales/ko')
        exports['nb_NO'] = require('./locales/nb_NO')
        exports['nep'] = require('./locales/nep')
        exports['nl'] = require('./locales/nl')
        exports['pl'] = require('./locales/pl')
        exports['pt_BR'] = require('./locales/pt_BR')
        exports['ru'] = require('./locales/ru')
        exports['sk'] = require('./locales/sk')
        exports['sv'] = require('./locales/sv')
        exports['tr'] = require('./locales/tr')
        exports['uk'] = require('./locales/uk')
        exports['vi'] = require('./locales/vi')
        exports['zh_CN'] = require('./locales/zh_CN')
        exports['zh_TW'] = require('./locales/zh_TW')
      },
      {
        './locales/az': '../node_modules/faker/lib/locales/az/index.js',
        './locales/cz': '../node_modules/faker/lib/locales/cz/index.js',
        './locales/de': '../node_modules/faker/lib/locales/de/index.js',
        './locales/de_AT':
          '../node_modules/faker/lib/locales/de_AT/index.js',
        './locales/de_CH':
          '../node_modules/faker/lib/locales/de_CH/index.js',
        './locales/en': '../node_modules/faker/lib/locales/en/index.js',
        './locales/en_AU':
          '../node_modules/faker/lib/locales/en_AU/index.js',
        './locales/en_BORK':
          '../node_modules/faker/lib/locales/en_BORK/index.js',
        './locales/en_CA':
          '../node_modules/faker/lib/locales/en_CA/index.js',
        './locales/en_GB':
          '../node_modules/faker/lib/locales/en_GB/index.js',
        './locales/en_IE':
          '../node_modules/faker/lib/locales/en_IE/index.js',
        './locales/en_IND':
          '../node_modules/faker/lib/locales/en_IND/index.js',
        './locales/en_US':
          '../node_modules/faker/lib/locales/en_US/index.js',
        './locales/en_au_ocker':
          '../node_modules/faker/lib/locales/en_au_ocker/index.js',
        './locales/es': '../node_modules/faker/lib/locales/es/index.js',
        './locales/es_MX':
          '../node_modules/faker/lib/locales/es_MX/index.js',
        './locales/fa': '../node_modules/faker/lib/locales/fa/index.js',
        './locales/fr': '../node_modules/faker/lib/locales/fr/index.js',
        './locales/fr_CA':
          '../node_modules/faker/lib/locales/fr_CA/index.js',
        './locales/ge': '../node_modules/faker/lib/locales/ge/index.js',
        './locales/id_ID':
          '../node_modules/faker/lib/locales/id_ID/index.js',
        './locales/it': '../node_modules/faker/lib/locales/it/index.js',
        './locales/ja': '../node_modules/faker/lib/locales/ja/index.js',
        './locales/ko': '../node_modules/faker/lib/locales/ko/index.js',
        './locales/nb_NO':
          '../node_modules/faker/lib/locales/nb_NO/index.js',
        './locales/nep': '../node_modules/faker/lib/locales/nep/index.js',
        './locales/nl': '../node_modules/faker/lib/locales/nl/index.js',
        './locales/pl': '../node_modules/faker/lib/locales/pl/index.js',
        './locales/pt_BR':
          '../node_modules/faker/lib/locales/pt_BR/index.js',
        './locales/ru': '../node_modules/faker/lib/locales/ru/index.js',
        './locales/sk': '../node_modules/faker/lib/locales/sk/index.js',
        './locales/sv': '../node_modules/faker/lib/locales/sv/index.js',
        './locales/tr': '../node_modules/faker/lib/locales/tr/index.js',
        './locales/uk': '../node_modules/faker/lib/locales/uk/index.js',
        './locales/vi': '../node_modules/faker/lib/locales/vi/index.js',
        './locales/zh_CN':
          '../node_modules/faker/lib/locales/zh_CN/index.js',
        './locales/zh_TW':
          '../node_modules/faker/lib/locales/zh_TW/index.js',
      },
    ],
    '../node_modules/faker/index.js': [
      function(require, module, exports) {
        // since we are requiring the top level of faker, load all locales by default
        var Faker = require('./lib')
        var faker = new Faker({ locales: require('./lib/locales') })
        module['exports'] = faker
      },
      {
        './lib': '../node_modules/faker/lib/index.js',
        './lib/locales': '../node_modules/faker/lib/locales.js',
      },
    ],
    '../node_modules/is-hotkey/lib/index.js': [
      function(require, module, exports) {
        'use strict'

        Object.defineProperty(exports, '__esModule', {
          value: true,
        })

        /**
         * Constants.
         */

        var IS_MAC =
          typeof window != 'undefined' &&
          /Mac|iPod|iPhone|iPad/.test(window.navigator.platform)

        var MODIFIERS = {
          alt: 'altKey',
          control: 'ctrlKey',
          meta: 'metaKey',
          shift: 'shiftKey',
        }

        var ALIASES = {
          add: '+',
          break: 'pause',
          cmd: 'meta',
          command: 'meta',
          ctl: 'control',
          ctrl: 'control',
          del: 'delete',
          down: 'arrowdown',
          esc: 'escape',
          ins: 'insert',
          left: 'arrowleft',
          mod: IS_MAC ? 'meta' : 'control',
          opt: 'alt',
          option: 'alt',
          return: 'enter',
          right: 'arrowright',
          space: ' ',
          spacebar: ' ',
          up: 'arrowup',
          win: 'meta',
          windows: 'meta',
        }

        var CODES = {
          backspace: 8,
          tab: 9,
          enter: 13,
          shift: 16,
          control: 17,
          alt: 18,
          pause: 19,
          capslock: 20,
          escape: 27,
          ' ': 32,
          pageup: 33,
          pagedown: 34,
          end: 35,
          home: 36,
          arrowleft: 37,
          arrowup: 38,
          arrowright: 39,
          arrowdown: 40,
          insert: 45,
          delete: 46,
          meta: 91,
          numlock: 144,
          scrolllock: 145,
          ';': 186,
          '=': 187,
          ',': 188,
          '-': 189,
          '.': 190,
          '/': 191,
          '`': 192,
          '[': 219,
          '\\': 220,
          ']': 221,
          "'": 222,
        }

        for (var f = 1; f < 20; f++) {
          CODES['f' + f] = 111 + f
        }

        /**
         * Is hotkey?
         */

        function isHotkey(hotkey, options, event) {
          if (options && !('byKey' in options)) {
            event = options
            options = null
          }

          if (!Array.isArray(hotkey)) {
            hotkey = [hotkey]
          }

          var array = hotkey.map(function(string) {
            return parseHotkey(string, options)
          })
          var check = function check(e) {
            return array.some(function(object) {
              return compareHotkey(object, e)
            })
          }
          var ret = event == null ? check : check(event)
          return ret
        }

        function isCodeHotkey(hotkey, event) {
          return isHotkey(hotkey, event)
        }

        function isKeyHotkey(hotkey, event) {
          return isHotkey(hotkey, { byKey: true }, event)
        }

        /**
         * Parse.
         */

        function parseHotkey(hotkey, options) {
          var byKey = options && options.byKey
          var ret = {}

          // Special case to handle the `+` key since we use it as a separator.
          hotkey = hotkey.replace('++', '+add')
          var values = hotkey.split('+')
          var length = values.length

          // Ensure that all the modifiers are set to false unless the hotkey has them.

          for (var k in MODIFIERS) {
            ret[MODIFIERS[k]] = false
          }

          var _iteratorNormalCompletion = true
          var _didIteratorError = false
          var _iteratorError = undefined

          try {
            for (
              var _iterator = values[Symbol.iterator](), _step;
              !(_iteratorNormalCompletion = (_step = _iterator.next())
                .done);
              _iteratorNormalCompletion = true
            ) {
              var value = _step.value

              var optional = value.endsWith('?')

              if (optional) {
                value = value.slice(0, -1)
              }

              var name = toKeyName(value)
              var modifier = MODIFIERS[name]

              if (length === 1 || !modifier) {
                if (byKey) {
                  ret.key = name
                } else {
                  ret.which = toKeyCode(value)
                }
              }

              if (modifier) {
                ret[modifier] = optional ? null : true
              }
            }
          } catch (err) {
            _didIteratorError = true
            _iteratorError = err
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return()
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError
              }
            }
          }

          return ret
        }

        /**
         * Compare.
         */

        function compareHotkey(object, event) {
          for (var key in object) {
            var expected = object[key]
            var actual = void 0

            if (expected == null) {
              continue
            }

            if (key === 'key') {
              actual = event.key.toLowerCase()
            } else if (key === 'which') {
              actual =
                expected === 91 && event.which === 93 ? 91 : event.which
            } else {
              actual = event[key]
            }

            if (actual == null && expected === false) {
              continue
            }

            if (actual !== expected) {
              return false
            }
          }

          return true
        }

        /**
         * Utils.
         */

        function toKeyCode(name) {
          name = toKeyName(name)
          var code = CODES[name] || name.toUpperCase().charCodeAt(0)
          return code
        }

        function toKeyName(name) {
          name = name.toLowerCase()
          name = ALIASES[name] || name
          return name
        }

        /**
         * Export.
         */

        exports.default = isHotkey
        exports.isHotkey = isHotkey
        exports.isCodeHotkey = isCodeHotkey
        exports.isKeyHotkey = isKeyHotkey
        exports.parseHotkey = parseHotkey
        exports.compareHotkey = compareHotkey
        exports.toKeyCode = toKeyCode
        exports.toKeyName = toKeyName
      },
      {},
    ],
    'main.js': [
      function(require, module, exports) {
        'use strict'

        var _cacheHelpers = require('./cache-helpers')

        var R = _interopRequireWildcard(require('ramda'))

        require('./main.scss')

        var _Main = require('./Main.elm')

        var _pouchdbBrowser = _interopRequireDefault(
          require('pouchdb-browser'),
        )

        var _aproba = _interopRequireDefault(require('aproba'))

        var _nanoid = _interopRequireDefault(require('nanoid'))

        var _faker = _interopRequireDefault(require('faker'))

        var _isHotkey = _interopRequireDefault(require('is-hotkey'))

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj
          } else {
            var newObj = {}
            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                  var desc =
                    Object.defineProperty &&
                    Object.getOwnPropertyDescriptor
                      ? Object.getOwnPropertyDescriptor(obj, key)
                      : {}
                  if (desc.get || desc.set) {
                    Object.defineProperty(newObj, key, desc)
                  } else {
                    newObj[key] = obj[key]
                  }
                }
              }
            }
            newObj.default = obj
            return newObj
          }
        }

        function _objectSpread(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i] != null ? arguments[i] : {}
            var ownKeys = Object.keys(source)
            if (typeof Object.getOwnPropertySymbols === 'function') {
              ownKeys = ownKeys.concat(
                Object.getOwnPropertySymbols(source).filter(function(sym) {
                  return Object.getOwnPropertyDescriptor(
                    source,
                    sym,
                  ).enumerable
                }),
              )
            }
            ownKeys.forEach(function(key) {
              _defineProperty(target, key, source[key])
            })
          }
          return target
        }

        function _defineProperty(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, {
              value: value,
              enumerable: true,
              configurable: true,
              writable: true,
            })
          } else {
            obj[key] = value
          }
          return obj
        }

        function _slicedToArray(arr, i) {
          return (
            _arrayWithHoles(arr) ||
            _iterableToArrayLimit(arr, i) ||
            _nonIterableRest()
          )
        }

        function _nonIterableRest() {
          throw new TypeError(
            'Invalid attempt to destructure non-iterable instance',
          )
        }

        function _iterableToArrayLimit(arr, i) {
          var _arr = []
          var _n = true
          var _d = false
          var _e = undefined
          try {
            for (
              var _i = arr[Symbol.iterator](), _s;
              !(_n = (_s = _i.next()).done);
              _n = true
            ) {
              _arr.push(_s.value)
              if (i && _arr.length === i) break
            }
          } catch (err) {
            _d = true
            _e = err
          } finally {
            try {
              if (!_n && _i['return'] != null) _i['return']()
            } finally {
              if (_d) throw _e
            }
          }
          return _arr
        }

        function _arrayWithHoles(arr) {
          if (Array.isArray(arr)) return arr
        }

        /* ITEM */
        var rootItemId = 'i_root_item_id'
        var initialRootItem = {
          id: rootItemId,
          rev: null,
          title: 'Root Item',
          pid: null,
          childIds: [],
        }

        function createNewItem() {
          return {
            id: 'i_' + (0, _nanoid.default)(),
            rev: null,
            title: _faker.default.lorem.words(),
            pid: rootItemId,
            childIds: [],
          }
        }
        /* PRE ELM APP INIT */

        function focusOffset(event, offset) {
          var focusable = Array.from(
            document.querySelectorAll('[data-is-focusable=true]'),
          )
          var idx = focusable.indexOf(event.target)
          R.compose(
            R.unless(R.isNil)(R.invoker(0, 'focus')),
            R.defaultTo(focusable[0]),
            R.nth(idx + offset),
          )(focusable)
        }

        window.addEventListener('keydown', function(event) {
          var isFocusable = !!event.target.dataset.isFocusable
          console.log('isFocusable', isFocusable)

          if (isFocusable) {
            // console.debug(idx, focusable)
            if ((0, _isHotkey.default)('up')(event)) {
              focusOffset(event, -1)
            } else if ((0, _isHotkey.default)('down')(event)) {
              focusOffset(event, 1)
            }
          }
        })
        /* ELM APP */

        var app = _Main.Elm.Main.init({
          node:
            document.querySelector('#main') ||
            document.querySelector('body > *'),
          flags: getMainCache(),
        })

        var db = new _pouchdbBrowser.default('items')
        db.allDocs({
          include_docs: true,
        }).then(function(_ref) {
          var rows = _ref.rows

          if (rows.length === 0) {
            db.put(itemToPouchDoc(initialRootItem))
          } else {
            app.ports.pouchItemsLoaded.send(
              rows.map(function(r) {
                return pouchDocToItem(r.doc)
              }),
            )
          }
        })
        db.changes({
          include_docs: true,
          live: true,
          since: 'now',
        })
          .on('change', function(change) {
            console.log(change)

            if (change.deleted) {
            } else {
              app.ports.pouchItemChanged.send(pouchDocToItem(change.doc))
            }
          })
          .on('error', function(error) {
            return console.error('item changes error', error)
          })
        app.ports.newItemDoc.subscribe(function(_ref2) {
          var _ref3 = _slicedToArray(_ref2, 2),
            parent = _ref3[0],
            idx = _ref3[1]

          ;(0, _aproba.default)('A', arguments)
          ;(0, _aproba.default)('ON', [parent, idx])
          var newItem = createNewItem()
          db.put(
            itemToPouchDoc(
              _objectSpread({}, parent, {
                childIds: (0, R.insert)(idx)(newItem.id)(parent.childIds),
              }),
            ),
          )
            .then(function() {
              return db.put(itemToPouchDoc(newItem))
            })
            .catch(console.error)
        })
        app.ports.toJsCache.subscribe(function(model) {
          ;(0, _cacheHelpers.setCache)('elm-main', model)
        })
        app.ports.bulkItemDocs.subscribe(bulkItemDocs) // const debouncedBulkItemDocs = debounce(bulkItemDocs, 1000, {
        //   leading: false,
        //   trailing: true,
        // })
        //
        // app.ports.debouncedBulkItemDocs.subscribe(debouncedBulkItemDocs)

        /* HELPERS */

        function bulkItemDocs(items) {
          ;(0, _aproba.default)('A', arguments)
          console.log('bulkItemDocs: items', items)

          if (!(0, R.isEmpty)(items)) {
            var docs = items.map(itemToPouchDoc)
            console.log('bulkItemDocs: docs', docs)
            db.bulkDocs(docs)
              .then(function(res) {
                return console.log('ports.bulkItemDocs res', res)
              })
              .catch(console.error)
          }
        }

        function pouchDocToItem(doc) {
          var id = doc._id
          var rev = doc._rev
          return _objectSpread(
            {
              id: id,
              rev: rev,
            },
            (0, R.omit)(['_id', '_rev'])(doc),
          )
        }

        function itemToPouchDoc(item) {
          return _objectSpread(
            {
              _id: item.id,
              _rev: item.rev,
            },
            (0, R.omit)(['id', 'rev'])(item),
          )
        }

        function getMainCache() {
          return (0, R.compose)(
            (0, R.mergeDeepRight)({
              items: [],
              maybeFocusedItemId: null,
            }),
            (0, R.defaultTo)({}), // always(null),
            _cacheHelpers.getCached,
          )('elm-main')
        }

        if (module.hot) {
          module.hot.accept(function() {
            return window.location.reload(true)
          })
        }
      },
      {
        './cache-helpers': 'cache-helpers.js',
        ramda: '../node_modules/ramda/es/index.js',
        './main.scss': 'main.scss',
        './Main.elm': 'Main.elm',
        'pouchdb-browser':
          '../node_modules/pouchdb-browser/lib/index.es.js',
        aproba: '../node_modules/aproba/index.js',
        nanoid: '../node_modules/nanoid/index.browser.js',
        faker: '../node_modules/faker/index.js',
        'is-hotkey': '../node_modules/is-hotkey/lib/index.js',
      },
    ],
    '../../../.config/yarn/global/node_modules/parcel-bundler/src/builtins/hmr-runtime.js': [
      function(require, module, exports) {
        var global = arguments[3]
        var OVERLAY_ID = '__parcel__error__overlay__'
        var OldModule = module.bundle.Module

        function Module(moduleName) {
          OldModule.call(this, moduleName)
          this.hot = {
            data: module.bundle.hotData,
            _acceptCallbacks: [],
            _disposeCallbacks: [],
            accept: function(fn) {
              this._acceptCallbacks.push(fn || function() {})
            },
            dispose: function(fn) {
              this._disposeCallbacks.push(fn)
            },
          }
          module.bundle.hotData = null
        }

        module.bundle.Module = Module
        var parent = module.bundle.parent

        if (
          (!parent || !parent.isParcelRequire) &&
          typeof WebSocket !== 'undefined'
        ) {
          var hostname = '' || location.hostname
          var protocol = location.protocol === 'https:' ? 'wss' : 'ws'
          var ws = new WebSocket(
            protocol + '://' + hostname + ':' + '63421' + '/',
          )

          ws.onmessage = function(event) {
            var data = JSON.parse(event.data)

            if (data.type === 'update') {
              console.clear()
              data.assets.forEach(function(asset) {
                hmrApply(global.parcelRequire, asset)
              })
              data.assets.forEach(function(asset) {
                if (!asset.isNew) {
                  hmrAccept(global.parcelRequire, asset.id)
                }
              })
            }

            if (data.type === 'reload') {
              ws.close()

              ws.onclose = function() {
                location.reload()
              }
            }

            if (data.type === 'error-resolved') {
              console.log('[parcel] ✨ Error resolved')
              removeErrorOverlay()
            }

            if (data.type === 'error') {
              console.error(
                '[parcel] 🚨  ' +
                  data.error.message +
                  '\n' +
                  data.error.stack,
              )
              removeErrorOverlay()
              var overlay = createErrorOverlay(data)
              document.body.appendChild(overlay)
            }
          }
        }

        function removeErrorOverlay() {
          var overlay = document.getElementById(OVERLAY_ID)

          if (overlay) {
            overlay.remove()
          }
        }

        function createErrorOverlay(data) {
          var overlay = document.createElement('div')
          overlay.id = OVERLAY_ID // html encode message and stack trace

          var message = document.createElement('div')
          var stackTrace = document.createElement('pre')
          message.innerText = data.error.message
          stackTrace.innerText = data.error.stack
          overlay.innerHTML =
            '<div style="background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;">' +
            '<span style="background: red; padding: 2px 4px; border-radius: 2px;">ERROR</span>' +
            '<span style="top: 2px; margin-left: 5px; position: relative;">🚨</span>' +
            '<div style="font-size: 18px; font-weight: bold; margin-top: 20px;">' +
            message.innerHTML +
            '</div>' +
            '<pre>' +
            stackTrace.innerHTML +
            '</pre>' +
            '</div>'
          return overlay
        }

        function getParents(bundle, id) {
          var modules = bundle.modules

          if (!modules) {
            return []
          }

          var parents = []
          var k, d, dep

          for (k in modules) {
            for (d in modules[k][1]) {
              dep = modules[k][1][d]

              if (
                dep === id ||
                (Array.isArray(dep) && dep[dep.length - 1] === id)
              ) {
                parents.push(k)
              }
            }
          }

          if (bundle.parent) {
            parents = parents.concat(getParents(bundle.parent, id))
          }

          return parents
        }

        function hmrApply(bundle, asset) {
          var modules = bundle.modules

          if (!modules) {
            return
          }

          if (modules[asset.id] || !bundle.parent) {
            var fn = new Function(
              'require',
              'module',
              'exports',
              asset.generated.js,
            )
            asset.isNew = !modules[asset.id]
            modules[asset.id] = [fn, asset.deps]
          } else if (bundle.parent) {
            hmrApply(bundle.parent, asset)
          }
        }

        function hmrAccept(bundle, id) {
          var modules = bundle.modules

          if (!modules) {
            return
          }

          if (!modules[id] && bundle.parent) {
            return hmrAccept(bundle.parent, id)
          }

          var cached = bundle.cache[id]
          bundle.hotData = {}

          if (cached) {
            cached.hot.data = bundle.hotData
          }

          if (
            cached &&
            cached.hot &&
            cached.hot._disposeCallbacks.length
          ) {
            cached.hot._disposeCallbacks.forEach(function(cb) {
              cb(bundle.hotData)
            })
          }

          delete bundle.cache[id]
          bundle(id)
          cached = bundle.cache[id]

          if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
            cached.hot._acceptCallbacks.forEach(function(cb) {
              cb()
            })

            return true
          }

          return getParents(global.parcelRequire, id).some(function(id) {
            return hmrAccept(global.parcelRequire, id)
          })
        }
      },
      {},
    ],
  },
  {},
  [
    '../../../.config/yarn/global/node_modules/parcel-bundler/src/builtins/hmr-runtime.js',
    'main.js',
  ],
  null,
)
//# sourceMappingURL=/main.1f19ae8e.map
